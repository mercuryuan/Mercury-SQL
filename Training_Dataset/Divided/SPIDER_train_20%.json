[
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name and capacity of the dorm with least number of amenities. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT t1.dorm_name ,  t1.student_capacity FROM dorm as t1 JOIN has_amenity as t2 ON t1.dormid  =  t2.dormid JOIN dorm_amenity as t3 ON t2.amenid  =  t3.amenid GROUP BY t2.dormid ORDER BY COUNT(*) LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of people of each sex who have a weight higher than 85. ###filtered_database_schema: CREATE TABLE `candidate` ( Candidate_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Poll_Source TEXT, Date TEXT, Support_rate REAL, Consider_rate REAL, Oppose_rate REAL, Unsure_rate REAL ); Sample rows from `candidate`: (1, 1, WNBC/Marist Poll, Feb 12–15, 2007, 0.25, 0.3, 0.43, 0.2), (2, 3, WNBC/Marist Poll, Feb 12–15, 2007, 0.17, 0.42, 0.32, 0.9), (3, 4, FOX News/Opinion Dynamics Poll, Feb 13–14, 2007, 0.18, 0.34, 0.44, 0.3), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Sex TEXT, Name TEXT, Date_of_Birth TEXT, Height REAL, Weight REAL ); Sample rows from `people`: (1, M, Hubert Henno, 06.10.1976, 188.0, 83.0), (2, M, Dominique Daquin, 10.11.1972, 197.0, 85.0), (3, F, Stéphane Antiga, 03.02.1976, 200.0, 94.0), ",
        "output": "SELECT COUNT(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the title and star rating of the movie that got the least rating star for each reviewer. ###filtered_database_schema: CREATE TABLE `Movie` ( mID INT PRIMARY KEY, title TEXT, year INT, director TEXT ); Sample rows from `Movie`: (101, Gone with the Wind, 1939, Victor Fleming), (102, Star Wars, 1977, George Lucas), (103, The Sound of Music, 1965, Robert Wise), CREATE TABLE `Reviewer` ( rID INT PRIMARY KEY, name TEXT ); Sample rows from `Reviewer`: (201, Sarah Martinez), (202, Daniel Lewis), (203, Brittany Harris), CREATE TABLE `Rating` ( rID INT REFERENCES Reviewer(rID), mID INT REFERENCES Movie(mID), stars INT, ratingDate date ); Sample rows from `Rating`: (201, 101, 2, 2011-01-22), (201, 101, 4, 2011-01-27), (202, 106, 4, None), ",
        "output": "SELECT t2.title ,  t1.rid ,  t1.stars ,  MIN(t1.stars) FROM rating as t1 JOIN movie as t2 ON t1.mid  =  t2.mid GROUP BY t1.rid"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many phone hardware models are produced by the company named \"Nokia Corporation\"? ###filtered_database_schema: CREATE TABLE `chip_model` ( Model_name TEXT PRIMARY KEY, Launch_year REAL, RAM_MiB REAL, ROM_MiB REAL, Slots TEXT, WiFi TEXT, Bluetooth TEXT ); Sample rows from `chip_model`: (X5, 2002.0, 32.0, 32.0, 1CFII,1SD, No, No), (X5 high end, 2002.0, 64.0, 48.0, 1CFII,1SD, No, No), (X3 Basic, 2003.0, 32.0, 32.0, 1SD, No, No), CREATE TABLE `screen_mode` ( Graphics_mode REAL PRIMARY KEY, Char_cells TEXT, Pixels TEXT, Hardware_colours REAL, used_kb REAL, map TEXT, Type TEXT ); Sample rows from `screen_mode`: (0.0, 80 × 32, 640 × 256, 2.0, 20.0, 3000–7FFF, Graphics), (1.0, 40 × 32, 320 × 256, 4.0, 20.0, 3000–7FFF, Graphics), (2.0, 20 × 32, 160 × 256, 8.0, 20.0, 3000–7FFF, Graphics), CREATE TABLE `phone` ( Company_name TEXT, Hardware_Model_name TEXT PRIMARY KEY, Accreditation_type TEXT, Accreditation_level TEXT, Date TEXT, chip_model TEXT REFERENCES chip_model(Model_name), screen_mode TEXT REFERENCES screen_mode(Graphics_mode) ); Sample rows from `phone`: (Sony Mobile Communications, XPERIA T, XPERIA J, Full, joyn Hot Fixes, Approved (awarded 15.11.12), X5, 1), (LG Electronics, LG-P760, Full, joyn Hot Fixes, Approved (awarded 19.11.12), X51v, 3), (Nokia Corporation, Lumia 920, Lumia 820, Lumia 620, Full, joyn Hot Fixes, Approved (awarded 05.12.12), X5, 4), ",
        "output": "SELECT COUNT(*) FROM phone WHERE company_name = \"Nokia Corporation\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the number of authors who have papers in PVLDB . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT COUNT(DISTINCT t1.name) FROM publication as t4 JOIN journal as t2 ON t4.jid  =  t2.jid JOIN writes as t3 ON t3.pid  =  t4.pid JOIN author as t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the id, genre, and name of the artist for every English song ordered by ascending rating? ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many film are there? ###filtered_database_schema: CREATE TABLE `film` ( Film_ID INT PRIMARY KEY, Title TEXT, Studio TEXT, Director TEXT, Gross_in_dollar INT ); Sample rows from `film`: (1, ET the Extra-Terrestrial, Universal, Steven Spielberg, 435110554), (2, Tootsie, Columbia, Sydney Pollack, 177200000), (3, An Officer and a Gentleman, Paramount / Lorimar, Taylor Hackford, 129795554), CREATE TABLE `market` ( Market_ID INT PRIMARY KEY, Country TEXT, Number_cities INT ); Sample rows from `market`: (1, Japan, 209), (2, China, 540), (3, USA, 700), CREATE TABLE `film_market_estimation` ( Estimation_ID INT PRIMARY KEY, Low_Estimate REAL, High_Estimate REAL, Film_ID INT REFERENCES film(Film_ID), Type TEXT, Market_ID INT REFERENCES market(Market_ID), Year INT ); Sample rows from `film_market_estimation`: (1, 80000.0, 80400.0, 1, Mass suicide murder, 1, 1945), (2, 8000.0, 8000.0, 2, Mass suicide, 2, 1944), (3, 3000.0, 80400.0, 3, Mass human sacrifice, 3, 1487), ",
        "output": "SELECT COUNT(*) FROM film"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the email addresses of the drama workshop groups located in Alaska state. ###filtered_database_schema: CREATE TABLE `Ref_Payment_Methods` ( payment_method_code CHAR(10) PRIMARY KEY, payment_method_description VARCHAR(80) ); Sample rows from `Ref_Payment_Methods`: (American E, credit), (MasterCard, debit), (Visa, Visa), CREATE TABLE `Ref_Service_Types` ( Service_Type_Code CHAR(15) PRIMARY KEY, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255) ); Sample rows from `Ref_Service_Types`: (1, 1, provide photo service), (2, 1, provide dinning service), (3, 1, provide filming service), CREATE TABLE `Addresses` ( Address_ID VARCHAR(100) PRIMARY KEY, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Addresses`: (110, 4753 Dach Highway, Suite 846, Feliciaberg, Florida, None), (124, 391 Vandervort Fall Apt. 446, Apt. 107, West Sherwoodstad, Indiana, None), (148, 809 Izabella Islands, Suite 271, Schadenville, Ohio, None), CREATE TABLE `Products` ( Product_ID VARCHAR(100) PRIMARY KEY, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Products`: (11, photo, 4448536, None, None), (154, film, 2302, None, None), (156, film, 17622723, None, None), CREATE TABLE `Marketing_Regions` ( Marketing_Region_Code CHAR(15) PRIMARY KEY, Marketing_Region_Name VARCHAR(255), Marketing_Region_Descriptrion VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Marketing_Regions`: (CA, Canada, Our target market, None), (CN, China, Our largest market, None), (ES, Spain, , None), CREATE TABLE `Clients` ( Client_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Clients`: (423, 201, branson94@example.net, Clifford, (042)912-3404x5135, VIP), (426, 383, alba04@example.com, Bettye, (604)849-0214, None), (478, 15, westley30@example.net, Reinhold, 1-048-214-4640x64380, None), CREATE TABLE `Drama_Workshop_Groups` ( Workshop_Group_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Currency_Code CHAR(15), Marketing_Region_Code CHAR(15), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Drama_Workshop_Groups`: (136, 383, EU, FR, Amely Cafe, 122-084-8029, amely.ruecker@example.com, None), (140, 180, EU, DE, Veda Film, 793-966-9311x5303, breitenberg.veda@example.com, None), (176, 286, EU, RU, Queen Art, 492-463-5967, quigley.queen@example.org, Good), CREATE TABLE `Performers` ( Performer_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Performers`: (153, 124, Shawna, 664.495.1939, krogahn@example.com, None), (211, 124, Ashley, 893-536-8857, preston45@example.net, None), (313, 39, Oren, 1-952-052-6685x28082, ferry.carolina@example.net, None), CREATE TABLE `Customers` ( Customer_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Customers`: (240, 286, Harold, 624-096-7791, jerde.harmon@example.com, None), (267, 98, Federico, 914-915-7483, johnson27@example.com, None), (304, 369, Samson, 1-463-121-4086x655, dalton75@example.com, None), CREATE TABLE `Stores` ( Store_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Marketing_Region_Code CHAR(15) REFERENCES Marketing_Regions(Marketing_Region_Code), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Stores`: (150, 286, IN, FJA Filming, +65(1)3590790358, fjacobson@example.com, None), (229, 266, CA, Rob Dinning, 1-327-185-9368, rborer@example.org, 5 stars), (231, 230, ES, Adan Dinning, 896-931-9633x869, adan93@example.com, None), CREATE TABLE `Bookings` ( Booking_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Clients(Client_ID), Workshop_Group_ID VARCHAR(100) REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Status_Code CHAR(15), Store_ID INTEGER, Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Bookings`: (1, 938, 140, good, 8, 2016-12-12 10:43:01, 2013-03-10 18:47:05, 1997-11-21 10:07:40, None), (2, 868, 838, stop, 7, 1976-08-20 00:33:08, 2009-07-09 09:18:38, 1976-01-08 07:19:23, None), (3, 735, 176, good, 9, 1975-11-23 06:28:47, 1989-01-05 19:24:45, 1990-03-16 19:38:47, None), CREATE TABLE `Performers_in_Bookings` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Performer_ID INTEGER PRIMARY KEY REFERENCES Performers(Performer_ID) ); Sample rows from `Performers_in_Bookings`: (1, 153), (1, 341), (2, 466), CREATE TABLE `Customer_Orders` ( Order_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Store_ID INTEGER REFERENCES Stores(Store_ID), Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 516, 231, 1994-08-03 12:34:58, 1977-03-11 03:58:19, 1992-07-21 22:11:11, None), (2, 418, 229, 2014-07-10 10:56:01, 1996-08-26 19:19:59, 1998-08-22 17:57:32, None), (3, 712, 229, 1981-06-20 16:29:43, 1980-12-19 05:49:35, 2011-04-13 07:15:35, None), CREATE TABLE `Order_Items` ( Order_Item_ID INTEGER, Order_ID INTEGER REFERENCES Customer_Orders(Order_ID), Product_ID INTEGER REFERENCES Products(Product_ID), Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 3, 233, 1, None), (2, 15, 300, 2, None), (3, 12, 300, 1, None), CREATE TABLE `Invoices` ( Invoice_ID INTEGER, Order_ID INTEGER REFERENCES Bookings(Booking_ID) REFERENCES Customer_Orders(Order_ID), payment_method_code CHAR(15) REFERENCES Ref_Payment_Methods(payment_method_code), Product_ID INTEGER, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER ); Sample rows from `Invoices`: (128, 14, MasterCard, 4, 2, None, 1), (162, 13, MasterCard, 9, 2, None, 9), (164, 7, Visa, 7, 2, None, 1), CREATE TABLE `Services` ( Service_ID INTEGER PRIMARY KEY, Service_Type_Code CHAR(15) REFERENCES Ref_Service_Types(Service_Type_Code), Workshop_Group_ID INTEGER REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Services`: (191, 1, 415, None, film, 58932775.8822, None), (219, 2, 838, None, film, 2704.4719, None), (220, 1, 708, None, dinning, 6888.8306, None), CREATE TABLE `Bookings_Services` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Product_ID INTEGER PRIMARY KEY REFERENCES Services(Service_ID) ); Sample rows from `Bookings_Services`: (1, 396), (1, 779), (4, 191), CREATE TABLE `Invoice_Items` ( Invoice_Item_ID INTEGER, Invoice_ID INTEGER REFERENCES Invoices(Invoice_ID), Order_ID INTEGER REFERENCES Bookings_Services(Order_ID), Order_Item_ID INTEGER REFERENCES Order_Items(Order_Item_ID), Product_ID INTEGER REFERENCES Bookings_Services(Product_ID), Order_Quantity INTEGER, Other_Item_Details VARCHAR(255) ); Sample rows from `Invoice_Items`: (1, 128, 1, 5, 396, 2, None), (2, 162, 4, 6, 191, 6, Good quality), ",
        "output": "SELECT t2.store_email_address FROM addresses as t1 JOIN drama_workshop_groups as t2 ON t1.address_id  =  t2.address_id WHERE t1.state_county  =  \"Alaska\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the different countries for artists. ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Year_Join INT, Age INT ); Sample rows from `artist`: (1, Vijay Singh, Fiji, 1998, 45), (2, John Daly, United States, 1991, 46), (3, Paul Azinger, United States, 1993, 47), CREATE TABLE `exhibition` ( Exhibition_ID INT PRIMARY KEY, Year INT, Theme TEXT, Artist_ID INT REFERENCES artist(Artist_ID), Ticket_Price REAL ); Sample rows from `exhibition`: (1, 2004, Santa Claus, 1, 19.95), (2, 2005, Christmas stocking, 2, 19.95), (3, 2006, Santa Claus and Rudolph the Red-Nosed Reindeer, 4, 14.95), CREATE TABLE `exhibition_record` ( Exhibition_ID INT PRIMARY KEY REFERENCES exhibition(Exhibition_ID), Date TEXT PRIMARY KEY, Attendance INT ); Sample rows from `exhibition_record`: (1, December 2, 965), (1, December 5, 1098), (1, December 7, 2983), ",
        "output": "SELECT DISTINCT country FROM artist"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names and trade names of the medcines that are FDA approved? ###filtered_database_schema: CREATE TABLE `medicine` ( id INT PRIMARY KEY, name TEXT, Trade_Name TEXT, FDA_approved TEXT ); Sample rows from `medicine`: (1, Amisulpride, Solian, No), (2, Aripiprazole, Abilify, Yes), (3, Asenapine, Saphris, Yes), CREATE TABLE `enzyme` ( id INT PRIMARY KEY, name TEXT, Location TEXT, Product TEXT, Chromosome TEXT, OMIM INT, Porphyria TEXT ); Sample rows from `enzyme`: (1, ALA synthase, Mitochondrion, δ-Aminolevulinic acid, 3p21.1, 125290, none), (2, ALA dehydratase, Cytosol, Porphobilinogen, 9q34, 125270, ALA-Dehydratase deficiency), (3, PBG deaminase, Cytosol, Hydroxymethyl bilane, 11q23.3, 176000, acute intermittent porphyria), CREATE TABLE `medicine_enzyme_interaction` ( enzyme_id INT PRIMARY KEY REFERENCES enzyme(id), medicine_id INT PRIMARY KEY REFERENCES medicine(id), interaction_type TEXT ); Sample rows from `medicine_enzyme_interaction`: (1, 1, inhibitor), (1, 2, inhibitor), (1, 3, inhibitor), ",
        "output": "SELECT name ,  trade_name FROM medicine WHERE fda_approved  =  'Yes'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the project details of the projects launched by the organisation ###filtered_database_schema: CREATE TABLE `Document_Types` ( document_type_code VARCHAR(10) PRIMARY KEY, document_description VARCHAR(255) ); Sample rows from `Document_Types`: (APP, Initial Application), (REG, Regular), CREATE TABLE `Documents` ( document_id INTEGER, document_type_code VARCHAR(10) REFERENCES Document_Types(document_type_code), grant_id INTEGER REFERENCES Grants(grant_id), sent_date DATETIME, response_received_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Documents`: (1, APP, 5, 1986-11-30 07:56:35, 1977-12-01 02:18:53, ), (2, APP, 13, 2004-01-23 11:57:08, 1979-12-08 10:38:07, ), (3, REG, 10, 1999-03-03 12:25:58, 1995-09-12 13:13:48, ), CREATE TABLE `Grants` ( grant_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), grant_amount DECIMAL(19,4), grant_start_date DATETIME, grant_end_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Grants`: (1, 10, 4094.542, 2016-11-20 00:18:51, 2004-10-24 09:09:39, et), (2, 3, 281.2446, 1985-10-09 20:08:49, 1985-06-08 00:22:07, occaecati), (3, 14, 4515947.7015, 1970-09-19 22:53:49, 1989-03-16 18:27:16, et), CREATE TABLE `Organisation_Types` ( organisation_type VARCHAR(10) PRIMARY KEY, organisation_type_description VARCHAR(255) ); Sample rows from `Organisation_Types`: (RES, Research), (SPON, Sponsor), CREATE TABLE `Organisations` ( organisation_id INTEGER, organisation_type VARCHAR(10) REFERENCES Organisation_Types(organisation_type), organisation_details VARCHAR(255) ); Sample rows from `Organisations`: (1, RES, et), (2, RES, eius), (3, RES, impedit), CREATE TABLE `Project_Outcomes` ( project_id INTEGER REFERENCES Projects(project_id), outcome_code VARCHAR(10) REFERENCES Research_Outcomes(outcome_code), outcome_details VARCHAR(255) ); Sample rows from `Project_Outcomes`: (4, Paper, None), (3, Patent, None), (9, Paper, None), CREATE TABLE `Project_Staff` ( staff_id DOUBLE PRIMARY KEY, project_id INTEGER REFERENCES Projects(project_id), role_code VARCHAR(10) REFERENCES Staff_Roles(role_code), date_from DATETIME, date_to DATETIME, other_details VARCHAR(255) ); Sample rows from `Project_Staff`: (0.0, 2, leader, 1981-10-04 22:44:50, 1985-05-30 22:26:30, None), (674810.0, 5, leader, 2003-04-19 15:06:20, 2010-12-08 11:55:36, None), (779.0, 2, researcher, 1981-10-09 21:32:53, 2004-12-16 13:03:36, None), CREATE TABLE `Projects` ( project_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), project_details VARCHAR(255) ); Sample rows from `Projects`: (1, 15, porro), (2, 11, et), (3, 7, sint), CREATE TABLE `Research_Outcomes` ( outcome_code VARCHAR(10) PRIMARY KEY, outcome_description VARCHAR(255) ); Sample rows from `Research_Outcomes`: (Paper, Published Research Paper), (Patent, Research Patent), CREATE TABLE `Research_Staff` ( staff_id INTEGER, employer_organisation_id INTEGER REFERENCES Organisations(organisation_id), staff_details VARCHAR(255) ); Sample rows from `Research_Staff`: (1, 1, quo), (2, 4, est), (3, 5, aspernatur), CREATE TABLE `Staff_Roles` ( role_code VARCHAR(10) PRIMARY KEY, role_description VARCHAR(255) ); Sample rows from `Staff_Roles`: (leader, Project Leader), (researcher, Project Researcher), CREATE TABLE `Tasks` ( task_id INTEGER, project_id INTEGER REFERENCES Projects(project_id), task_details VARCHAR(255), eg Agree Objectives VARCHAR(1) ); Sample rows from `Tasks`: (1, 1, a, None), (2, 2, b, None), (3, 3, c, None), ",
        "output": "SELECT project_details FROM projects WHERE organisation_id IN ( SELECT organisation_id FROM projects GROUP BY organisation_id ORDER BY COUNT(*) DESC LIMIT 1 )"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of dorms which have both TV Lounge and Study Room as amenities. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT t1.dorm_name FROM dorm as t1 JOIN has_amenity as t2 ON t1.dormid  =  t2.dormid JOIN dorm_amenity as t3 ON t2.amenid  =  t3.amenid WHERE t3.amenity_name  =  'TV Lounge' INTERSECT SELECT t1.dorm_name FROM dorm as t1 JOIN has_amenity as t2 ON t1.dormid  =  t2.dormid JOIN dorm_amenity as t3 ON t2.amenid  =  t3.amenid WHERE t3.amenity_name  =  'Study Room'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the gender and name of artist who produced the song with the lowest resolution. ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT t1.gender ,  t1.artist_name FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name ORDER BY t2.resolution LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show all countries and the number of people from each country. ###filtered_database_schema: CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Is_Male TEXT, Age INT ); Sample rows from `people`: (1, Mike Weir, Canada, T, 34), (2, Juli Hanson, Sweden, F, 32), (3, Ricky Barnes, United States, T, 30), CREATE TABLE `church` ( Church_ID INT PRIMARY KEY, Name TEXT, Organized_by TEXT, Open_Date INT, Continuation_of TEXT ); Sample rows from `church`: (1, Pure Church of Christ, Wycam Clark, 1831, Church of Christ), (2, Independent Church, – Hoton, 1832, Church of Christ), (3, Church of Christ, Ezra Booth, 1836, Church of the Latter Day Saints), CREATE TABLE `wedding` ( Church_ID INT PRIMARY KEY REFERENCES church(Church_ID), Male_ID INT PRIMARY KEY REFERENCES people(People_ID), Female_ID INT PRIMARY KEY REFERENCES people(People_ID), Year INT ); Sample rows from `wedding`: (1, 1, 2, 2014), (3, 3, 4, 2015), (5, 5, 6, 2016), ",
        "output": "SELECT country ,  COUNT(*) FROM people GROUP BY country"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many different professors are there for the different schools? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT COUNT(*) ,  t1.school_code FROM department as t1 JOIN professor as t2 ON t1.dept_code  =  t2.dept_code GROUP BY t1.school_code"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Please show the different statuses of cities and the average population of cities with each status. ###filtered_database_schema: CREATE TABLE `city` ( City_ID INT PRIMARY KEY, Official_Name TEXT, Status TEXT, Area_km_2 REAL, Population REAL, Census_Ranking TEXT ); Sample rows from `city`: (1, Grand Falls/Grand-Sault, Town, 18.06, 5706.0, 636 of 5008), (2, Perth-Andover, Village, 8.89, 1778.0, 1442 of 5,008), (3, Plaster Rock, Village, 3.09, 1135.0, 1936 of 5,008), CREATE TABLE `farm` ( Farm_ID INT PRIMARY KEY, Year INT, Total_Horses REAL, Working_Horses REAL, Total_Cattle REAL, Oxen REAL, Bulls REAL, Cows REAL, Pigs REAL, Sheep_and_Goats REAL ); Sample rows from `farm`: (1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8), CREATE TABLE `farm_competition` ( Competition_ID INT PRIMARY KEY, Year INT, Theme TEXT, Host_city_ID INT REFERENCES city(City_ID), Hosts TEXT ); Sample rows from `farm_competition`: (1, 2013, Carnival M is back!, 1, Miley Cyrus Jared Leto and Karen Mok), (2, 2006, Codehunters, 2, Leehom Wang and Kelly Rowland), (3, 2005, MTV Asia Aid, 3, Alicia Keys), CREATE TABLE `competition_record` ( Competition_ID INT PRIMARY KEY REFERENCES farm_competition(Competition_ID), Farm_ID INT PRIMARY KEY REFERENCES farm(Farm_ID), Rank INT ); Sample rows from `competition_record`: (1, 8, 1), (1, 2, 2), (1, 3, 3), ",
        "output": "SELECT status ,  AVG(population) FROM city GROUP BY status"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many people reviewed the restaurant \" Texas de Brazil \" in Dallas Texas ? ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT COUNT(DISTINCT t4.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t1.name  =  \"Texas de Brazil\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of rooms for different block code? ###filtered_database_schema: CREATE TABLE `Physician` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), SSN INTEGER ); Sample rows from `Physician`: (1, John Dorian, Staff Internist, 111111111), (2, Elliot Reid, Attending Physician, 222222222), (3, Christopher Turk, Surgical Attending Physician, 333333333), CREATE TABLE `Department` ( DepartmentID INTEGER, Name VARCHAR(30), Head INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Department`: (1, General Medicine, 4), (2, Surgery, 7), (3, Psychiatry, 9), CREATE TABLE `Affiliated_With` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID), PrimaryAffiliation BOOLEAN ); Sample rows from `Affiliated_With`: (1, 1, 1), (2, 1, 1), (3, 1, 0), CREATE TABLE `Procedures` ( Code INTEGER, Name VARCHAR(30), Cost REAL ); Sample rows from `Procedures`: (1, Reverse Rhinopodoplasty, 1500.0), (2, Obtuse Pyloric Recombobulation, 3750.0), (3, Folded Demiophtalmectomy, 4500.0), CREATE TABLE `Trained_In` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code), CertificationDate DATETIME, CertificationExpires DATETIME ); Sample rows from `Trained_In`: (3, 1, 2008-01-01, 2008-12-31), (3, 2, 2008-01-01, 2008-12-31), (3, 5, 2008-01-01, 2008-12-31), CREATE TABLE `Patient` ( SSN INTEGER, Name VARCHAR(30), Address VARCHAR(30), Phone VARCHAR(30), InsuranceID INTEGER, PCP INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Patient`: (100000001, John Smith, 42 Foobar Lane, 555-0256, 68476213, 1), (100000002, Grace Ritchie, 37 Snafu Drive, 555-0512, 36546321, 2), (100000003, Random J. Patient, 101 Omgbbq Street, 555-1204, 65465421, 2), CREATE TABLE `Nurse` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), Registered BOOLEAN, SSN INTEGER ); Sample rows from `Nurse`: (101, Carla Espinosa, Head Nurse, 1, 111111110), (102, Laverne Roberts, Nurse, 1, 222222220), (103, Paul Flowers, Nurse, 0, 333333330), CREATE TABLE `Appointment` ( AppointmentID INTEGER, Patient INTEGER REFERENCES Patient(SSN), PrepNurse INTEGER REFERENCES Nurse(EmployeeID), Physician INTEGER REFERENCES Physician(EmployeeID), Start DATETIME, End DATETIME, ExaminationRoom TEXT ); Sample rows from `Appointment`: (13216584, 100000001, 101, 1, 2008-04-24 10:00, 2008-04-24 11:00, A), (26548913, 100000002, 101, 2, 2008-04-24 10:00, 2008-04-24 11:00, B), (36549879, 100000001, 102, 1, 2008-04-25 10:00, 2008-04-25 11:00, A), CREATE TABLE `Medication` ( Code INTEGER, Name VARCHAR(30), Brand VARCHAR(30), Description VARCHAR(30) ); Sample rows from `Medication`: (1, Procrastin-X, X, N/A), (2, Thesisin, Foo Labs, N/A), (3, Awakin, Bar Laboratories, N/A), CREATE TABLE `Prescribes` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Medication INTEGER PRIMARY KEY REFERENCES Medication(Code), Date DATETIME PRIMARY KEY, Appointment INTEGER REFERENCES Appointment(AppointmentID), Dose VARCHAR(30) ); Sample rows from `Prescribes`: (1, 100000001, 1, 2008-04-24 10:47, 13216584, 5), (9, 100000004, 2, 2008-04-27 10:53, 86213939, 10), (9, 100000004, 2, 2008-04-30 16:53, None, 5), CREATE TABLE `Block` ( BlockFloor INTEGER PRIMARY KEY, BlockCode INTEGER PRIMARY KEY ); Sample rows from `Block`: (1, 1), (1, 2), (1, 3), CREATE TABLE `Room` ( RoomNumber INTEGER, RoomType VARCHAR(30), BlockFloor INTEGER REFERENCES Block(BlockFloor), BlockCode INTEGER REFERENCES Block(BlockCode), Unavailable BOOLEAN ); Sample rows from `Room`: (101, Single, 1, 1, 0), (102, Single, 1, 1, 0), (103, Single, 1, 1, 0), CREATE TABLE `On_Call` ( Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID), BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor), BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode), OnCallStart DATETIME PRIMARY KEY, OnCallEnd DATETIME PRIMARY KEY ); Sample rows from `On_Call`: (101, 1, 1, 2008-11-04 11:00, 2008-11-04 19:00), (101, 1, 2, 2008-11-04 11:00, 2008-11-04 19:00), (102, 1, 3, 2008-11-04 11:00, 2008-11-04 19:00), CREATE TABLE `Stay` ( StayID INTEGER, Patient INTEGER REFERENCES Patient(SSN), Room INTEGER REFERENCES Room(RoomNumber), StayStart DATETIME, StayEnd DATETIME ); Sample rows from `Stay`: (3215, 100000001, 111, 2008-05-01, 2008-05-04), (3216, 100000003, 123, 2008-05-03, 2008-05-14), (3217, 100000004, 112, 2008-05-02, 2008-05-03), CREATE TABLE `Undergoes` ( Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code), Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID), DateUndergoes DATETIME PRIMARY KEY, Physician INTEGER REFERENCES Physician(EmployeeID), AssistingNurse INTEGER REFERENCES Nurse(EmployeeID) ); Sample rows from `Undergoes`: (100000001, 6, 3215, 2008-05-02, 3, 101), (100000001, 2, 3215, 2008-05-03, 7, 101), (100000004, 1, 3217, 2008-05-07, 3, 102), ",
        "output": "SELECT COUNT(*) ,  t1.blockcode FROM block as t1 JOIN room as t2 ON t1.blockfloor  =  t2.blockfloor AND t1.blockcode  =  t2.blockcode GROUP BY t1.blockcode"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the code of the location with the largest number of documents. ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CV, CV, ), (BK, Book, ), (PR, Paper, ), CREATE TABLE `Ref_Calendar` ( Calendar_Date DATETIME PRIMARY KEY, Day_Number INTEGER ); Sample rows from `Ref_Calendar`: (1972-03-31 09:47:22, 5), (1976-06-15 03:40:06, 7), (1985-05-13 12:19:43, 7), CREATE TABLE `Ref_Locations` ( Location_Code CHAR(15) PRIMARY KEY, Location_Name VARCHAR(255), Location_Description VARCHAR(255) ); Sample rows from `Ref_Locations`: (b, Brazil, ), (c, Canada, ), (e, Edinburgh, ), CREATE TABLE `Roles` ( Role_Code CHAR(15) PRIMARY KEY, Role_Name VARCHAR(255), Role_Description VARCHAR(255) ); Sample rows from `Roles`: (MG, Manager, Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti.), (ED, Editor, Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos.), (PT, Photo, Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt.), CREATE TABLE `All_Documents` ( Document_ID INTEGER, Date_Stored DATETIME REFERENCES Ref_Calendar(Calendar_Date), Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255) ); Sample rows from `All_Documents`: (7, 1976-06-15 03:40:06, CV, Robin CV, None, None), (11, 1986-10-14 17:53:39, CV, Marry CV, None, None), (25, 2008-06-08 12:45:38, BK, One hundred years of solitude, None, None), CREATE TABLE `Employees` ( Employee_ID INTEGER, Role_Code CHAR(15) REFERENCES Roles(Role_Code), Employee_Name VARCHAR(255), Gender_MFU CHAR(1), Date_of_Birth DATETIME, Other_Details VARCHAR(255) ); Sample rows from `Employees`: (25, HR, Leo, , 1973-02-15 17:16:00, None), (30, MG, Ebba, , 1979-09-20 12:50:15, None), (38, ED, Stephanie, 1, 2012-03-30 23:02:28, None), CREATE TABLE `Document_Locations` ( Document_ID INTEGER PRIMARY KEY REFERENCES All_Documents(Document_ID), Location_Code CHAR(15) PRIMARY KEY REFERENCES Ref_Locations(Location_Code), Date_in_Location_From DATETIME PRIMARY KEY REFERENCES Ref_Calendar(Calendar_Date), Date_in_Locaton_To DATETIME REFERENCES Ref_Calendar(Calendar_Date) ); Sample rows from `Document_Locations`: (7, e, 2017-01-06 23:17:22, 2008-06-08 12:45:38), (11, x, 2017-01-06 23:17:22, 2012-07-03 09:48:46), (81, c, 1972-03-31 09:47:22, 1987-11-05 06:11:22), CREATE TABLE `Documents_to_be_Destroyed` ( Document_ID INTEGER REFERENCES All_Documents(Document_ID), Destruction_Authorised_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Destroyed_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Planned_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Actual_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Other_Details VARCHAR(255) ); Sample rows from `Documents_to_be_Destroyed`: (7, 156, 138, 1988-02-01 14:41:52, 2017-01-06 23:17:22, None), (11, 55, 173, 2010-11-26 19:22:50, 1986-10-14 17:53:39, None), (25, 183, 156, 2009-08-18 03:29:08, 1995-01-01 03:52:11, None), ",
        "output": "SELECT location_code FROM document_locations GROUP BY location_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many papers does Christopher D. Manning have ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which movie had the character \" Daffy Duck \" ###filtered_database_schema: CREATE TABLE `actor` ( aid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `copyright` ( id INT PRIMARY KEY, msid INT, cid INT ); CREATE TABLE `cast` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), aid INT REFERENCES actor(aid), role INT ); CREATE TABLE `genre` ( gid INT PRIMARY KEY, genre TEXT ); CREATE TABLE `classification` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), gid INT REFERENCES genre(gid) ); CREATE TABLE `company` ( id INT PRIMARY KEY, name TEXT, country_code TEXT ); CREATE TABLE `director` ( did INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `producer` ( pid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `directed_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), did INT REFERENCES director(did) ); CREATE TABLE `keyword` ( id INT PRIMARY KEY, keyword TEXT ); CREATE TABLE `made_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), pid INT REFERENCES producer(pid) ); CREATE TABLE `movie` ( mid INT PRIMARY KEY, title TEXT, release_year INT, title_aka TEXT, budget TEXT ); CREATE TABLE `tags` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), kid INT REFERENCES keyword(kid) ); CREATE TABLE `tv_series` ( sid INT PRIMARY KEY, title TEXT, release_year INT, num_of_seasons INT, num_of_episodes INT, title_aka TEXT, budget TEXT ); CREATE TABLE `writer` ( wid INT PRIMARY KEY, gender TEXT, name INT, nationality INT, num_of_episodes INT, birth_city TEXT, birth_year INT ); CREATE TABLE `written_by` ( id INT, msid INT REFERENCES copyright(msid), wid INT REFERENCES writer(wid) ); ",
        "output": "SELECT t1.title FROM movie as t1 JOIN CasT as t2 ON t1.mid  =  t2.msid WHERE t2.role  =  \"Daffy Duck\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the dates when customers with ids between 10 and 20 became customers? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_content VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), other_address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 9443 Boyle Route Suite 857, Lucasville, 416, Colorado, USA, None), (2, 1969 Jabari Port Suite 393, New Sabryna, 721, SouthCarolina, USA, None), (3, 295 Hackett Curve, Reingertown, 255, NewJersey, USA, None), CREATE TABLE `Products` ( product_id INTEGER, product_details VARCHAR(255) ); Sample rows from `Products`: (1, Americano), (2, Dove Chocolate), (3, Latte), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method VARCHAR(15), customer_name VARCHAR(80), date_became_customer DATETIME, other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Cash, Dr. Julia Wuckert MD, 2018-03-01 23:20:10, None), (2, Cheque, Tillman Ernser, 2018-02-28 11:37:44, None), (3, Credit Card, Rodrick Heaney, 2018-03-09 17:41:58, None), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_address_from DATETIME, address_type VARCHAR(15), date_address_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 11, 1985-03-29 20:31:43, Billing, 1993-02-17 17:55:18), (13, 11, 2010-08-25 04:24:35, Billing, 1972-02-17 22:23:38), (2, 14, 2010-12-26 08:52:50, Residential, 1979-07-16 18:22:39), CREATE TABLE `Customer_Contact_Channels` ( customer_id INTEGER REFERENCES Customers(customer_id), channel_code VARCHAR(15), active_from_date DATETIME, active_to_date DATETIME, contact_number VARCHAR(50) ); Sample rows from `Customer_Contact_Channels`: (9, Email, 2017-12-07 18:18:15, 2018-03-23 13:37:14, 940.035.6435x0225), (2, Email, 2017-04-07 04:51:41, 2018-03-23 01:30:52, 189.449.8326x7607), (9, Email, 2017-05-25 16:08:45, 2018-03-13 07:32:25, 958-653-2640), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(15), order_date DATETIME, order_details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 15, Cancelled, 2018-03-21 11:20:46, None), (2, 3, Cancelled, 2018-03-05 06:35:33, None), (3, 5, Delivered, 2018-03-04 07:16:22, Second time), CREATE TABLE `Order_Items` ( order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), order_quantity VARCHAR(15) ); Sample rows from `Order_Items`: (14, 2, 5), (5, 2, 9), (14, 3, 2), ",
        "output": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of the customer who made an order most recently. ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_content VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), other_address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 9443 Boyle Route Suite 857, Lucasville, 416, Colorado, USA, None), (2, 1969 Jabari Port Suite 393, New Sabryna, 721, SouthCarolina, USA, None), (3, 295 Hackett Curve, Reingertown, 255, NewJersey, USA, None), CREATE TABLE `Products` ( product_id INTEGER, product_details VARCHAR(255) ); Sample rows from `Products`: (1, Americano), (2, Dove Chocolate), (3, Latte), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method VARCHAR(15), customer_name VARCHAR(80), date_became_customer DATETIME, other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Cash, Dr. Julia Wuckert MD, 2018-03-01 23:20:10, None), (2, Cheque, Tillman Ernser, 2018-02-28 11:37:44, None), (3, Credit Card, Rodrick Heaney, 2018-03-09 17:41:58, None), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_address_from DATETIME, address_type VARCHAR(15), date_address_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 11, 1985-03-29 20:31:43, Billing, 1993-02-17 17:55:18), (13, 11, 2010-08-25 04:24:35, Billing, 1972-02-17 22:23:38), (2, 14, 2010-12-26 08:52:50, Residential, 1979-07-16 18:22:39), CREATE TABLE `Customer_Contact_Channels` ( customer_id INTEGER REFERENCES Customers(customer_id), channel_code VARCHAR(15), active_from_date DATETIME, active_to_date DATETIME, contact_number VARCHAR(50) ); Sample rows from `Customer_Contact_Channels`: (9, Email, 2017-12-07 18:18:15, 2018-03-23 13:37:14, 940.035.6435x0225), (2, Email, 2017-04-07 04:51:41, 2018-03-23 01:30:52, 189.449.8326x7607), (9, Email, 2017-05-25 16:08:45, 2018-03-13 07:32:25, 958-653-2640), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(15), order_date DATETIME, order_details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 15, Cancelled, 2018-03-21 11:20:46, None), (2, 3, Cancelled, 2018-03-05 06:35:33, None), (3, 5, Delivered, 2018-03-04 07:16:22, Second time), CREATE TABLE `Order_Items` ( order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), order_quantity VARCHAR(15) ); Sample rows from `Order_Items`: (14, 2, 5), (5, 2, 9), (14, 3, 2), ",
        "output": "SELECT t1.customer_name FROM customers as t1 JOIN customer_orders as t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all songs that are in mp3 format and have a resolution lower than 1000? ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT t2.song_name FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: brian curless convolution paper ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the names of customers who have once canceled the purchase of the product \"food\" (the item status is \"Cancel\"). ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_name VARCHAR(80), customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Savannah, rerum), (2, George, est), (3, Alberto, deleniti), CREATE TABLE `Invoices` ( invoice_number INTEGER, invoice_date DATETIME, invoice_details VARCHAR(255) ); Sample rows from `Invoices`: (1, 1989-09-03 16:03:05, vitae), (2, 1989-12-11 16:40:57, magnam), (3, 1995-10-07 14:13:05, et), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(10), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 2, Shipped, 2009-02-21 15:26:19, None), (2, 11, Shipped, 1974-06-24 22:10:26, None), (3, 4, Shipped, 1982-12-29 21:10:11, None), CREATE TABLE `Products` ( product_id INTEGER, product_name VARCHAR(80), product_details VARCHAR(255) ); Sample rows from `Products`: (1, food, None), (2, book, None), (3, food, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, product_id INTEGER REFERENCES Products(product_id), order_id INTEGER REFERENCES Orders(order_id), order_item_status VARCHAR(10), order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 6, Finish, None), (2, 15, 6, Finish, None), (3, 12, 15, Finish, None), CREATE TABLE `Shipments` ( shipment_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), shipment_tracking_number VARCHAR(80), shipment_date DATETIME, other_shipment_details VARCHAR(255) ); Sample rows from `Shipments`: (1, 5, 13, 3452, 1983-08-13 22:34:11, None), (2, 7, 2, 0114, 1977-11-10 12:11:25, None), (3, 10, 5, 478, 2006-01-17 03:08:05, None), CREATE TABLE `Shipment_Items` ( shipment_id INTEGER REFERENCES Shipments(shipment_id), order_item_id INTEGER REFERENCES Order_Items(order_item_id) ); Sample rows from `Shipment_Items`: (11, 12), (10, 15), (10, 12), ",
        "output": "SELECT t1.customer_name FROM customers as t1 JOIN orders as t2 JOIN order_items as t3 JOIN products as t4 ON t1.customer_id = t2.customer_id AND t2.order_id = t3.order_id AND t3.product_id = t4.product_id WHERE t3.order_item_status = \"Cancel\" AND t4.product_name = \"food\" GROUP BY t1.customer_id HAVING COUNT(*)  >=  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the response received date for the document described as Regular that was granted more than 100 dollars? ###filtered_database_schema: CREATE TABLE `Document_Types` ( document_type_code VARCHAR(10) PRIMARY KEY, document_description VARCHAR(255) ); Sample rows from `Document_Types`: (APP, Initial Application), (REG, Regular), CREATE TABLE `Documents` ( document_id INTEGER, document_type_code VARCHAR(10) REFERENCES Document_Types(document_type_code), grant_id INTEGER REFERENCES Grants(grant_id), sent_date DATETIME, response_received_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Documents`: (1, APP, 5, 1986-11-30 07:56:35, 1977-12-01 02:18:53, ), (2, APP, 13, 2004-01-23 11:57:08, 1979-12-08 10:38:07, ), (3, REG, 10, 1999-03-03 12:25:58, 1995-09-12 13:13:48, ), CREATE TABLE `Grants` ( grant_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), grant_amount DECIMAL(19,4), grant_start_date DATETIME, grant_end_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Grants`: (1, 10, 4094.542, 2016-11-20 00:18:51, 2004-10-24 09:09:39, et), (2, 3, 281.2446, 1985-10-09 20:08:49, 1985-06-08 00:22:07, occaecati), (3, 14, 4515947.7015, 1970-09-19 22:53:49, 1989-03-16 18:27:16, et), CREATE TABLE `Organisation_Types` ( organisation_type VARCHAR(10) PRIMARY KEY, organisation_type_description VARCHAR(255) ); Sample rows from `Organisation_Types`: (RES, Research), (SPON, Sponsor), CREATE TABLE `Organisations` ( organisation_id INTEGER, organisation_type VARCHAR(10) REFERENCES Organisation_Types(organisation_type), organisation_details VARCHAR(255) ); Sample rows from `Organisations`: (1, RES, et), (2, RES, eius), (3, RES, impedit), CREATE TABLE `Project_Outcomes` ( project_id INTEGER REFERENCES Projects(project_id), outcome_code VARCHAR(10) REFERENCES Research_Outcomes(outcome_code), outcome_details VARCHAR(255) ); Sample rows from `Project_Outcomes`: (4, Paper, None), (3, Patent, None), (9, Paper, None), CREATE TABLE `Project_Staff` ( staff_id DOUBLE PRIMARY KEY, project_id INTEGER REFERENCES Projects(project_id), role_code VARCHAR(10) REFERENCES Staff_Roles(role_code), date_from DATETIME, date_to DATETIME, other_details VARCHAR(255) ); Sample rows from `Project_Staff`: (0.0, 2, leader, 1981-10-04 22:44:50, 1985-05-30 22:26:30, None), (674810.0, 5, leader, 2003-04-19 15:06:20, 2010-12-08 11:55:36, None), (779.0, 2, researcher, 1981-10-09 21:32:53, 2004-12-16 13:03:36, None), CREATE TABLE `Projects` ( project_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), project_details VARCHAR(255) ); Sample rows from `Projects`: (1, 15, porro), (2, 11, et), (3, 7, sint), CREATE TABLE `Research_Outcomes` ( outcome_code VARCHAR(10) PRIMARY KEY, outcome_description VARCHAR(255) ); Sample rows from `Research_Outcomes`: (Paper, Published Research Paper), (Patent, Research Patent), CREATE TABLE `Research_Staff` ( staff_id INTEGER, employer_organisation_id INTEGER REFERENCES Organisations(organisation_id), staff_details VARCHAR(255) ); Sample rows from `Research_Staff`: (1, 1, quo), (2, 4, est), (3, 5, aspernatur), CREATE TABLE `Staff_Roles` ( role_code VARCHAR(10) PRIMARY KEY, role_description VARCHAR(255) ); Sample rows from `Staff_Roles`: (leader, Project Leader), (researcher, Project Researcher), CREATE TABLE `Tasks` ( task_id INTEGER, project_id INTEGER REFERENCES Projects(project_id), task_details VARCHAR(255), eg Agree Objectives VARCHAR(1) ); Sample rows from `Tasks`: (1, 1, a, None), (2, 2, b, None), (3, 3, c, None), ",
        "output": "SELECT t1.response_received_date FROM documents as t1 JOIN document_types as t2 ON t1.document_type_code  =  t2.document_type_code JOIN grants as t3 ON t1.grant_id  =  t3.grant_id WHERE t2.document_description  =  'Regular' OR t3.grant_amount  >  100"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is all the information about employees who have never had a job in the past? ###filtered_database_schema: CREATE TABLE `regions` ( REGION_ID decimal(5,0) PRIMARY KEY, REGION_NAME varchar(25) ); Sample rows from `regions`: (1, Europe\\r), (2, Americas\\r), (3, Asia\\r), CREATE TABLE `countries` ( COUNTRY_ID varchar(2) PRIMARY KEY, COUNTRY_NAME varchar(40), REGION_ID decimal(10,0) REFERENCES regions(REGION_ID) ); Sample rows from `countries`: (AR, Argentina, 2), (AU, Australia, 3), (BE, Belgium, 1), CREATE TABLE `departments` ( DEPARTMENT_ID decimal(4,0) PRIMARY KEY, DEPARTMENT_NAME varchar(30), MANAGER_ID decimal(6,0), LOCATION_ID decimal(4,0) ); Sample rows from `departments`: (10, Administration, 200, 1700), (20, Marketing, 201, 1800), (30, Purchasing, 114, 1700), CREATE TABLE `jobs` ( JOB_ID varchar(10) PRIMARY KEY, JOB_TITLE varchar(35), MIN_SALARY decimal(6,0), MAX_SALARY decimal(6,0) ); Sample rows from `jobs`: (AD_PRES, President, 20000, 40000), (AD_VP, Administration Vice President, 15000, 30000), (AD_ASST, Administration Assistant, 3000, 6000), CREATE TABLE `employees` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY, FIRST_NAME varchar(20), LAST_NAME varchar(25), EMAIL varchar(25), PHONE_NUMBER varchar(20), HIRE_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), SALARY decimal(8,2), COMMISSION_PCT decimal(2,2), MANAGER_ID decimal(6,0), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `employees`: (100, Steven, King, SKING, 515.123.4567, 1987-06-17, AD_PRES, 24000, 0, 0, 90), (101, Neena, Kochhar, NKOCHHAR, 515.123.4568, 1987-06-18, AD_VP, 17000, 0, 100, 90), (102, Lex, De Haan, LDEHAAN, 515.123.4569, 1987-06-19, AD_VP, 17000, 0, 100, 90), CREATE TABLE `job_history` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY REFERENCES employees(EMPLOYEE_ID), START_DATE date PRIMARY KEY, END_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `job_history`: (102, 1993-01-13, 1998-07-24, IT_PROG, 60), (101, 1989-09-21, 1993-10-27, AC_ACCOUNT, 110), (101, 1993-10-28, 1997-03-15, AC_MGR, 110), CREATE TABLE `locations` ( LOCATION_ID decimal(4,0) PRIMARY KEY, STREET_ADDRESS varchar(40), POSTAL_CODE varchar(12), CITY varchar(30), STATE_PROVINCE varchar(25), COUNTRY_ID varchar(2) REFERENCES countries(COUNTRY_ID) ); Sample rows from `locations`: (1000, 1297 Via Cola di Rie, 989, Roma, , IT), (1100, 93091 Calle della Testa, 10934, Venice, , IT), (1200, 2017 Shinjuku-ku, 1689, Tokyo, Tokyo Prefecture, JP), ",
        "output": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all male British artists? ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the number of papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT COUNT(DISTINCT t5.title) FROM writes as t3 JOIN author as t2 ON t3.aid  =  t2.aid JOIN publication as t5 ON t3.pid  =  t5.pid JOIN writes as t4 ON t4.pid  =  t5.pid JOIN author as t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: give me a good restaurant in mountain view for arabic food ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the product ids and color descriptions for products with two or more characteristics? ###filtered_database_schema: CREATE TABLE `Ref_Characteristic_Types` ( characteristic_type_code VARCHAR(15) PRIMARY KEY, characteristic_type_description VARCHAR(80) ); Sample rows from `Ref_Characteristic_Types`: (Grade, Grade), (Purity, Purity), CREATE TABLE `Ref_Colors` ( color_code VARCHAR(15) PRIMARY KEY, color_description VARCHAR(80) ); Sample rows from `Ref_Colors`: (9, red), (5, green), (1, yellow), CREATE TABLE `Ref_Product_Categories` ( product_category_code VARCHAR(15) PRIMARY KEY, product_category_description VARCHAR(80), unit_of_measure VARCHAR(20) ); Sample rows from `Ref_Product_Categories`: (Herbs, Herbs, Handful ), (Seeds, Seeds, Weight - pound,kilo.), (Spices, Spices, Weight - pound,kilo.), CREATE TABLE `Characteristics` ( characteristic_id INTEGER, characteristic_type_code VARCHAR(15) REFERENCES Ref_Characteristic_Types(characteristic_type_code), characteristic_data_type VARCHAR(10), characteristic_name VARCHAR(80), other_characteristic_details VARCHAR(255) ); Sample rows from `Characteristics`: (1, Grade, numquam, slow, None), (2, Grade, doloribus, fast, None), (3, Purity, rem, warm, None), CREATE TABLE `Products` ( product_id INTEGER, color_code VARCHAR(15) REFERENCES Ref_Colors(color_code), product_category_code VARCHAR(15) REFERENCES Ref_Product_Categories(product_category_code), product_name VARCHAR(80), typical_buying_price VARCHAR(20), typical_selling_price VARCHAR(20), product_description VARCHAR(255), other_product_details VARCHAR(255) ); Sample rows from `Products`: (1, 4, Spices, cumin, , 2878.3, et, None), (2, 2, Spices, peper, 352447.2874677, 1892070.2803543, rerum, None), (3, 9, Herbs, basil, 503.8431967, 0.1859512, officia, None), CREATE TABLE `Product_Characteristics` ( product_id INTEGER REFERENCES Products(product_id), characteristic_id INTEGER REFERENCES Characteristics(characteristic_id), product_characteristic_value VARCHAR(50) ); Sample rows from `Product_Characteristics`: (13, 13, low), (11, 2, low), (5, 15, low), ",
        "output": "SELECT t1.product_id ,  t2.color_description FROM products as t1 JOIN ref_colors as t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics as t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING COUNT(*)  >=  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many customers are there? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_content VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), other_address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 9443 Boyle Route Suite 857, Lucasville, 416, Colorado, USA, None), (2, 1969 Jabari Port Suite 393, New Sabryna, 721, SouthCarolina, USA, None), (3, 295 Hackett Curve, Reingertown, 255, NewJersey, USA, None), CREATE TABLE `Products` ( product_id INTEGER, product_details VARCHAR(255) ); Sample rows from `Products`: (1, Americano), (2, Dove Chocolate), (3, Latte), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method VARCHAR(15), customer_name VARCHAR(80), date_became_customer DATETIME, other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Cash, Dr. Julia Wuckert MD, 2018-03-01 23:20:10, None), (2, Cheque, Tillman Ernser, 2018-02-28 11:37:44, None), (3, Credit Card, Rodrick Heaney, 2018-03-09 17:41:58, None), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_address_from DATETIME, address_type VARCHAR(15), date_address_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 11, 1985-03-29 20:31:43, Billing, 1993-02-17 17:55:18), (13, 11, 2010-08-25 04:24:35, Billing, 1972-02-17 22:23:38), (2, 14, 2010-12-26 08:52:50, Residential, 1979-07-16 18:22:39), CREATE TABLE `Customer_Contact_Channels` ( customer_id INTEGER REFERENCES Customers(customer_id), channel_code VARCHAR(15), active_from_date DATETIME, active_to_date DATETIME, contact_number VARCHAR(50) ); Sample rows from `Customer_Contact_Channels`: (9, Email, 2017-12-07 18:18:15, 2018-03-23 13:37:14, 940.035.6435x0225), (2, Email, 2017-04-07 04:51:41, 2018-03-23 01:30:52, 189.449.8326x7607), (9, Email, 2017-05-25 16:08:45, 2018-03-13 07:32:25, 958-653-2640), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(15), order_date DATETIME, order_details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 15, Cancelled, 2018-03-21 11:20:46, None), (2, 3, Cancelled, 2018-03-05 06:35:33, None), (3, 5, Delivered, 2018-03-04 07:16:22, Second time), CREATE TABLE `Order_Items` ( order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), order_quantity VARCHAR(15) ); Sample rows from `Order_Items`: (14, 2, 5), (5, 2, 9), (14, 3, 2), ",
        "output": "SELECT COUNT(*) FROM customers"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many users have reviewed Irish Pub in Dallas ? ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT COUNT(DISTINCT t4.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id JOIN user as t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"Irish Pub\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the id for the employee called Ebba? ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CV, CV, ), (BK, Book, ), (PR, Paper, ), CREATE TABLE `Ref_Calendar` ( Calendar_Date DATETIME PRIMARY KEY, Day_Number INTEGER ); Sample rows from `Ref_Calendar`: (1972-03-31 09:47:22, 5), (1976-06-15 03:40:06, 7), (1985-05-13 12:19:43, 7), CREATE TABLE `Ref_Locations` ( Location_Code CHAR(15) PRIMARY KEY, Location_Name VARCHAR(255), Location_Description VARCHAR(255) ); Sample rows from `Ref_Locations`: (b, Brazil, ), (c, Canada, ), (e, Edinburgh, ), CREATE TABLE `Roles` ( Role_Code CHAR(15) PRIMARY KEY, Role_Name VARCHAR(255), Role_Description VARCHAR(255) ); Sample rows from `Roles`: (MG, Manager, Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti.), (ED, Editor, Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos.), (PT, Photo, Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt.), CREATE TABLE `All_Documents` ( Document_ID INTEGER, Date_Stored DATETIME REFERENCES Ref_Calendar(Calendar_Date), Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255) ); Sample rows from `All_Documents`: (7, 1976-06-15 03:40:06, CV, Robin CV, None, None), (11, 1986-10-14 17:53:39, CV, Marry CV, None, None), (25, 2008-06-08 12:45:38, BK, One hundred years of solitude, None, None), CREATE TABLE `Employees` ( Employee_ID INTEGER, Role_Code CHAR(15) REFERENCES Roles(Role_Code), Employee_Name VARCHAR(255), Gender_MFU CHAR(1), Date_of_Birth DATETIME, Other_Details VARCHAR(255) ); Sample rows from `Employees`: (25, HR, Leo, , 1973-02-15 17:16:00, None), (30, MG, Ebba, , 1979-09-20 12:50:15, None), (38, ED, Stephanie, 1, 2012-03-30 23:02:28, None), CREATE TABLE `Document_Locations` ( Document_ID INTEGER PRIMARY KEY REFERENCES All_Documents(Document_ID), Location_Code CHAR(15) PRIMARY KEY REFERENCES Ref_Locations(Location_Code), Date_in_Location_From DATETIME PRIMARY KEY REFERENCES Ref_Calendar(Calendar_Date), Date_in_Locaton_To DATETIME REFERENCES Ref_Calendar(Calendar_Date) ); Sample rows from `Document_Locations`: (7, e, 2017-01-06 23:17:22, 2008-06-08 12:45:38), (11, x, 2017-01-06 23:17:22, 2012-07-03 09:48:46), (81, c, 1972-03-31 09:47:22, 1987-11-05 06:11:22), CREATE TABLE `Documents_to_be_Destroyed` ( Document_ID INTEGER REFERENCES All_Documents(Document_ID), Destruction_Authorised_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Destroyed_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Planned_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Actual_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Other_Details VARCHAR(255) ); Sample rows from `Documents_to_be_Destroyed`: (7, 156, 138, 1988-02-01 14:41:52, 2017-01-06 23:17:22, None), (11, 55, 173, 2010-11-26 19:22:50, 1986-10-14 17:53:39, None), (25, 183, 156, 2009-08-18 03:29:08, 1995-01-01 03:52:11, None), ",
        "output": "SELECT employee_id FROM employees WHERE employee_name  =  \"Ebba\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points? ###filtered_database_schema: CREATE TABLE `circuits` ( circuitId INTEGER, circuitRef TEXT, name TEXT, location TEXT, country TEXT, lat REAL, lng REAL, alt TEXT, url TEXT ); Sample rows from `circuits`: (1, albert_park, Albert Park Grand Prix Circuit, Melbourne, Australia, -37.8497, 144.968, 10, http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit), (2, sepang, Sepang International Circuit, Kuala Lumpur, Malaysia, 2.76083, 101.738, , http://en.wikipedia.org/wiki/Sepang_International_Circuit), (3, bahrain, Bahrain International Circuit, Sakhir, Bahrain, 26.0325, 50.5106, , http://en.wikipedia.org/wiki/Bahrain_International_Circuit), CREATE TABLE `races` ( raceId INTEGER, year INTEGER, round INTEGER, circuitId INTEGER REFERENCES circuits(circuitId), name TEXT, date TEXT, time TEXT, url TEXT ); Sample rows from `races`: (1, 2009, 1, 1, Australian Grand Prix, 2009-03-29, 06:00:00, http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix), (2, 2009, 2, 2, Malaysian Grand Prix, 2009-04-05, 09:00:00, http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix), (3, 2009, 3, 17, Chinese Grand Prix, 2009-04-19, 07:00:00, http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix), CREATE TABLE `drivers` ( driverId INTEGER, driverRef TEXT, number TEXT, code TEXT, forename TEXT, surname TEXT, dob TEXT, nationality TEXT, url TEXT ); Sample rows from `drivers`: (1, hamilton, 44, HAM, Lewis, Hamilton, 07/01/1985, British, http://en.wikipedia.org/wiki/Lewis_Hamilton), (2, heidfeld, , HEI, Nick, Heidfeld, 10/05/1977, German, http://en.wikipedia.org/wiki/Nick_Heidfeld), (3, rosberg, 6, ROS, Nico, Rosberg, 27/06/1985, German, http://en.wikipedia.org/wiki/Nico_Rosberg), CREATE TABLE `status` ( statusId INTEGER, status TEXT ); Sample rows from `status`: (1, Finished), (2, Disqualified), (3, Accident), CREATE TABLE `seasons` ( year INTEGER, url TEXT ); Sample rows from `seasons`: (1950, http://en.wikipedia.org/wiki/1950_Formula_One_season), (1951, http://en.wikipedia.org/wiki/1951_Formula_One_season), (1952, http://en.wikipedia.org/wiki/1952_Formula_One_season), CREATE TABLE `constructors` ( constructorId INTEGER, constructorRef TEXT, name TEXT, nationality TEXT, url TEXT ); Sample rows from `constructors`: (1, mclaren, McLaren, British, http://en.wikipedia.org/wiki/McLaren), (2, bmw_sauber, BMW Sauber, German, http://en.wikipedia.org/wiki/BMW_Sauber), (3, williams, Williams, British, http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering), CREATE TABLE `constructorStandings` ( constructorStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `constructorStandings`: (1, 18, 1, 14.0, 1, 1, 1), (2, 18, 2, 8.0, 3, 3, 0), (3, 18, 3, 9.0, 2, 2, 0), CREATE TABLE `results` ( resultId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, grid INTEGER, position TEXT, positionText TEXT, positionOrder INTEGER, points REAL, laps TEXT, time TEXT, milliseconds TEXT, fastestLap TEXT, rank TEXT, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId INTEGER ); Sample rows from `results`: (1, 18, 1, 1, 22, 1, 1, 1, 1, 10.0, 58, 34:50.6, 5690616, 39, 2, 01:27.5, 218.3, 1), (2, 18, 2, 2, 3, 5, 2, 2, 2, 8.0, 58, 5.478, 5696094, 41, 3, 01:27.7, 217.586, 1), (3, 18, 3, 3, 7, 7, 3, 3, 3, 6.0, 58, 8.163, 5698779, 41, 5, 01:28.1, 216.719, 1), CREATE TABLE `driverStandings` ( driverStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `driverStandings`: (1, 18, 1, 10.0, 1, 1, 1), (2, 18, 2, 8.0, 2, 2, 0), (3, 18, 3, 6.0, 3, 3, 0), CREATE TABLE `constructorResults` ( constructorResultsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, status TEXT ); Sample rows from `constructorResults`: (1, 18, 1, 14.0, NULL), (2, 18, 2, 8.0, NULL), (3, 18, 3, 9.0, NULL), CREATE TABLE `qualifying` ( qualifyId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, position INTEGER, q1 TEXT, q2 TEXT, q3 TEXT ); Sample rows from `qualifying`: (1, 18, 1, 1, 22, 1, 1:26.572, 1:25.187, 1:26.714), (2, 18, 9, 2, 4, 2, 1:26.103, 1:25.315, 1:26.869), (3, 18, 5, 1, 23, 3, 1:25.664, 1:25.452, 1:27.079), CREATE TABLE `pitStops` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), stop INTEGER PRIMARY KEY, lap INTEGER, time TEXT, duration TEXT, milliseconds INTEGER ); CREATE TABLE `lapTimes` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), lap INTEGER PRIMARY KEY, position INTEGER, time TEXT, milliseconds INTEGER ); ",
        "output": "SELECT DISTINCT t1.forename FROM drivers as t1 JOIN driverstandings as t2 ON t1.driverid = t2.driverid WHERE t2.position = 1 AND t2.wins = 1 AND t2.points > 20"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of the courses taught by the tutor whose personal name is \"Julio\"? ###filtered_database_schema: CREATE TABLE `Course_Authors_and_Tutors` ( author_id INTEGER, author_tutor_ATB VARCHAR(3), login_name VARCHAR(40), password VARCHAR(40), personal_name VARCHAR(80), middle_name VARCHAR(80), family_name VARCHAR(80), gender_mf VARCHAR(1), address_line_1 VARCHAR(80) ); Sample rows from `Course_Authors_and_Tutors`: (1, 331, jmckenzie, c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b, Cathrine, Ruthie, Grant, 0, 756 Monahan Mews Spinkashire, NJ 64230-5098), (2, 975, heidenreich.ara, 24b0ee84063c3b017ab1839e01b7280f47f7c7c2, Retha, Corene, Armstrong, 0, 98623 Huels Manor Jasttown, DE 31611), (3, 349, clementina29, cdaf6c3483f19e2253659a40a3aab786a3390f78, Darius, Ethyl, Reichel, 0, 99296 Keeling Courts North Audreanne, IL 28272), CREATE TABLE `Students` ( student_id INTEGER, date_of_registration DATETIME, date_of_latest_logon DATETIME, login_name VARCHAR(40), password VARCHAR(10), personal_name VARCHAR(40), middle_name VARCHAR(40), family_name VARCHAR(40) ); Sample rows from `Students`: (1, 2015-07-22 13:32:35, 2017-10-17 22:52:26, annamae.hoppe, db8765bb6f, Wilson, Aubrey, Ward), (2, 2015-07-02 00:21:42, 2017-06-24 22:16:27, wmiller, 35faf8182a, Karson, Luella, Jaskolski), (3, 2015-10-11 03:23:27, 2018-03-10 23:22:23, ahartmann, 8e064ec4e6, Mariela, Brandt, Legros), CREATE TABLE `Subjects` ( subject_id INTEGER, subject_name VARCHAR(120) ); Sample rows from `Subjects`: (1, Computer Science), (2, Arts), (3, Language), CREATE TABLE `Courses` ( course_id INTEGER, author_id INTEGER REFERENCES Course_Authors_and_Tutors(author_id), subject_id INTEGER REFERENCES Subjects(subject_id), course_name VARCHAR(120), course_description VARCHAR(255) ); Sample rows from `Courses`: (1, 8, 1, database, database), (2, 6, 1, advanced database, advanced database), (3, 15, 1, operating system, operating system), CREATE TABLE `Student_Course_Enrolment` ( registration_id INTEGER, student_id INTEGER REFERENCES Students(student_id), course_id INTEGER REFERENCES Courses(course_id), date_of_enrolment DATETIME, date_of_completion DATETIME ); Sample rows from `Student_Course_Enrolment`: (1, 11, 2, 2017-10-09 07:09:02, 2018-02-26 07:48:52), (2, 15, 4, 2017-11-13 12:49:33, 2018-03-04 01:24:56), (3, 10, 8, 2017-10-17 13:50:40, 2018-03-22 02:53:01), CREATE TABLE `Student_Tests_Taken` ( registration_id INTEGER REFERENCES Student_Course_Enrolment(registration_id), date_test_taken DATETIME, test_result VARCHAR(255) ); Sample rows from `Student_Tests_Taken`: (12, 2018-03-25 03:27:16, Fail), (10, 2018-03-25 21:50:22, Pass), (7, 2018-03-21 00:32:25, Pass), ",
        "output": "SELECT t2.course_name FROM course_authors_and_tutors as t1 JOIN courses as t2 ON t1.author_id  =  t2.author_id WHERE t1.personal_name  =  \"Julio\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\". ###filtered_database_schema: CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Sponsor_name TEXT, Player_name TEXT, Gender TEXT, Residence TEXT, Occupation TEXT, Votes INT, Rank TEXT ); Sample rows from `player`: (1, Brandon—Souris, Jean Luc Bouché, M, Brandon, Locomotive Engineer, 6055, 2nd), (2, Charleswood—St. James—Assiniboia, Fiona Shiells, F, Winnipeg, Ministerial Assistant, 7190, 3rd), (3, Churchill, Niki Ashton, F, Thompson, Researcher, 8734, 1st), CREATE TABLE `club` ( Club_ID INT PRIMARY KEY, Club_name TEXT, Region TEXT, Start_year INT ); Sample rows from `club`: (1, AIK, USA, 2009), (2, BK Häcken, UK, 1998), (3, Djurgårdens IF, USA, 2005), CREATE TABLE `coach` ( Coach_ID INT PRIMARY KEY, Coach_name TEXT, Gender TEXT, Club_ID INT REFERENCES club(Club_ID), Rank INT ); Sample rows from `coach`: (1, Jameson Tomas, M, 1, 1), (2, Joe Fabbri, F, 1, 2), (3, Robert Chen, M, 3, 3), CREATE TABLE `player_coach` ( Player_ID INT PRIMARY KEY REFERENCES player(Player_ID), Coach_ID INT PRIMARY KEY REFERENCES coach(Coach_ID), Starting_year INT ); Sample rows from `player_coach`: (1, 1, 2010), (2, 1, 2011), (3, 1, 2012), CREATE TABLE `match_result` ( Rank INT PRIMARY KEY, Club_ID INT PRIMARY KEY REFERENCES club(Club_ID), Gold INT, Big_Silver INT, Small_Silver INT, Bronze INT, Points INT ); Sample rows from `match_result`: (1, 1, 20, 14, 9, 8, 168), (2, 2, 13, 11, 16, 9, 139), (3, 3, 12, 9, 4, 7, 102), ",
        "output": "SELECT sponsor_name FROM player WHERE residence  =  \"Brandon\" OR residence  =  \"Birtle\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500? ###filtered_database_schema: CREATE TABLE `city` ( City_ID INT PRIMARY KEY, Official_Name TEXT, Status TEXT, Area_km_2 REAL, Population REAL, Census_Ranking TEXT ); Sample rows from `city`: (1, Grand Falls/Grand-Sault, Town, 18.06, 5706.0, 636 of 5008), (2, Perth-Andover, Village, 8.89, 1778.0, 1442 of 5,008), (3, Plaster Rock, Village, 3.09, 1135.0, 1936 of 5,008), CREATE TABLE `farm` ( Farm_ID INT PRIMARY KEY, Year INT, Total_Horses REAL, Working_Horses REAL, Total_Cattle REAL, Oxen REAL, Bulls REAL, Cows REAL, Pigs REAL, Sheep_and_Goats REAL ); Sample rows from `farm`: (1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8), CREATE TABLE `farm_competition` ( Competition_ID INT PRIMARY KEY, Year INT, Theme TEXT, Host_city_ID INT REFERENCES city(City_ID), Hosts TEXT ); Sample rows from `farm_competition`: (1, 2013, Carnival M is back!, 1, Miley Cyrus Jared Leto and Karen Mok), (2, 2006, Codehunters, 2, Leehom Wang and Kelly Rowland), (3, 2005, MTV Asia Aid, 3, Alicia Keys), CREATE TABLE `competition_record` ( Competition_ID INT PRIMARY KEY REFERENCES farm_competition(Competition_ID), Farm_ID INT PRIMARY KEY REFERENCES farm(Farm_ID), Rank INT ); Sample rows from `competition_record`: (1, 8, 1), (1, 2, 2), (1, 3, 3), ",
        "output": "SELECT status FROM city WHERE population  >  1500 INTERSECT SELECT status FROM city WHERE population  <  500"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: how high are the highest points of all the states ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT highest_elevation FROM highlow;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many lesson does customer with first name Ray took? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 3904 Stroman Passage, Port Melyssa, 14445, Georgia, USA), (2, 053 Quigley Island, Hagenesfurt, 22194, Kentucky, USA), (3, 00704 Zoe Alley, Lake Elaina, 08938, Georgia, USA), CREATE TABLE `Staff` ( staff_id INTEGER, staff_address_id INTEGER REFERENCES Addresses(address_id), nickname VARCHAR(80), first_name VARCHAR(80), middle_name VARCHAR(80), last_name VARCHAR(80), date_of_birth DATETIME, date_joined_staff DATETIME, date_left_staff DATETIME ); Sample rows from `Staff`: (1, 14, thompson.constantin, Janessa, Amara, Sawayn, 2010-12-08 16:55:14, 2017-04-27 03:21:26, 2018-03-23 22:53:12), (2, 3, santos45, Camylle, Icie, Weissnat, 2015-08-01 13:22:43, 2016-06-06 08:54:28, 2018-03-10 15:25:00), (3, 5, ynader, Kaitlin, Stephania, Mertz, 1994-05-17 05:32:11, 2018-01-02 12:24:24, 2018-03-24 10:11:08), CREATE TABLE `Vehicles` ( vehicle_id INTEGER, vehicle_details VARCHAR(255) ); Sample rows from `Vehicles`: (1, Van), (2, Truck), (3, Car), CREATE TABLE `Customers` ( customer_id INTEGER, customer_address_id INTEGER REFERENCES Addresses(address_id), customer_status_code VARCHAR(15), date_became_customer DATETIME, date_of_birth DATETIME, first_name VARCHAR(80), last_name VARCHAR(80), amount_outstanding DOUBLE, email_address VARCHAR(250), phone_number VARCHAR(255), cell_mobile_phone_number VARCHAR(255) ); Sample rows from `Customers`: (1, 13, Bad Customer, 2016-05-11 17:03:48, 1998-12-15 13:24:40, Carole, Bernhard, 255.0, everette.goyette@example.org, 07278206718, 861-638-9797), (2, 10, Bad Customer, 2015-11-16 22:52:14, 1995-07-17 12:13:16, Genevieve, Terry, 7256.0, huel.jana@example.org, +14(5)2351480248, 578-518-4785x612), (3, 10, Good Customer, 2016-04-08 00:28:15, 1994-06-21 01:34:56, Clara, Ortiz, 9443.0, hilario.sporer@example.org, 374-483-2758x85087, 1-197-686-2849x8761), CREATE TABLE `Customer_Payments` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), datetime_payment DATETIME PRIMARY KEY, payment_method_code VARCHAR(10), amount_payment DOUBLE ); Sample rows from `Customer_Payments`: (11, 2018-02-05 18:44:46, Direct Debit, 9570.93), (2, 2018-02-24 10:07:05, Direct Debit, 8180.26), (14, 2018-02-27 20:08:53, Direct Debit, 4610.26), CREATE TABLE `Lessons` ( lesson_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), lesson_status_code VARCHAR(15), staff_id INTEGER REFERENCES Staff(staff_id), vehicle_id INTEGER REFERENCES Vehicles(vehicle_id), lesson_date DATETIME, lesson_time VARCHAR(10), price DOUBLE ); Sample rows from `Lessons`: (1, 6, Cancelled, 8, 3, 2018-02-28 10:55:36, 5, 199.0), (2, 8, Cancelled, 14, 3, 2018-03-07 16:12:36, 6, 167.0), (3, 6, Cancelled, 11, 2, 2018-03-03 15:10:16, 3, 352.0), ",
        "output": "SELECT COUNT(*) FROM lessons as t1 JOIN customers as t2 ON t1.customer_id  = t2.customer_id WHERE t2.first_name = \"Ray\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the id and address of the shops whose score is below the average score. ###filtered_database_schema: CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Address TEXT, Num_of_staff TEXT, Score REAL, Open_Year TEXT ); Sample rows from `shop`: (1, 1200 Main Street, 13, 42.0, 2010), (2, 1111 Main Street, 19, 38.0, 2008), (3, 1330 Baltimore Street, 42, 36.0, 2010), CREATE TABLE `member` ( Member_ID INT PRIMARY KEY, Name TEXT, Membership_card TEXT, Age INT, Time_of_purchase INT, Level_of_membership INT, Address TEXT ); Sample rows from `member`: (1, Ashby, Lazale, Black, 29, 18, 5, Hartford), (2, Breton, Robert, White, 67, 41, 4, Waterbury), (3, Campbell, Jessie, Black, 34, 20, 6, Hartford), CREATE TABLE `happy_hour` ( HH_ID INT PRIMARY KEY, Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID), Month TEXT PRIMARY KEY, Num_of_shaff_in_charge INT ); Sample rows from `happy_hour`: (1, 1, May, 10), (2, 1, April, 12), (3, 10, June, 15), CREATE TABLE `happy_hour_member` ( HH_ID INT PRIMARY KEY, Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Total_amount REAL ); Sample rows from `happy_hour_member`: (1, 3, 20.9), (4, 3, 20.92), (7, 9, 4.9), ",
        "output": "SELECT shop_id ,  address FROM shop WHERE score  <  (SELECT AVG(score) FROM shop)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are all the friends of Alice who are female? ###filtered_database_schema: CREATE TABLE `Person` ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT ); Sample rows from `Person`: (Alice, 25, new york city, female, student), (Bob, 35, salt lake city, male, engineer), (Zach, 45, austin, male, doctor), CREATE TABLE `PersonFriend` ( name varchar(20) REFERENCES Person(name), friend varchar(20) REFERENCES Person(name), year INTEGER ); Sample rows from `PersonFriend`: (Alice, Bob, 10), (Zach, Dan, 12), (Bob, Zach, 5), ",
        "output": "SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name  =  'Alice' AND t1.gender  =  'female'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the names of wrestlers that have not been eliminated. ###filtered_database_schema: CREATE TABLE `wrestler` ( Wrestler_ID INT PRIMARY KEY, Name TEXT, Reign TEXT, Days_held TEXT, Location TEXT, Event TEXT ); Sample rows from `wrestler`: (1, Rey Misterio Sr., 1, 344, Tijuana , Mexico, Live event), (2, Fishman, 1, 113, Tijuana , Mexico, Live event), (3, Villaño IV, 1, 1285, Tijuana , Mexico, Live event), CREATE TABLE `Elimination` ( Elimination_ID TEXT PRIMARY KEY, Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID), Team TEXT, Eliminated_By TEXT, Elimination_Move TEXT, Time TEXT ); Sample rows from `Elimination`: (1, 1, Team Orton, Punk, Go To Sleep, 00:11), (2, 2, Team Batista, Benjamin, Paydirt, 07:38), (3, 4, Team Batista, Orton, Rope hung DDT, 10:45), ",
        "output": "SELECT name FROM wrestler WHERE wrestler_id NOT IN (SELECT wrestler_id FROM elimination)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which catalog contents have length below 3 or above 5? Find the catalog entry names. ###filtered_database_schema: CREATE TABLE `Attribute_Definitions` ( attribute_id INTEGER, attribute_name VARCHAR(30), attribute_data_type VARCHAR(10) ); Sample rows from `Attribute_Definitions`: (1, Green, Bool), (2, Black, Bool), (3, Yellow, Bool), CREATE TABLE `Catalogs` ( catalog_id INTEGER, catalog_name VARCHAR(50), catalog_publisher VARCHAR(80), date_of_publication DATETIME, date_of_latest_revision DATETIME ); Sample rows from `Catalogs`: (1, Chocolate, Koepp-Rutherford handmade chocolate store, 2013-03-15 05:09:17, 2017-09-26 12:10:36), (2, Coffee Bean, Murray Coffee shop, 2012-04-13 06:37:09, 2017-10-26 01:16:51), (3, Lemonade, Russel-Gislason Lemon shop, 2012-11-27 19:29:22, 2017-12-04 06:48:13), CREATE TABLE `Catalog_Structure` ( catalog_level_number INTEGER, catalog_id INTEGER REFERENCES Catalogs(catalog_id), catalog_level_name VARCHAR(50) ); Sample rows from `Catalog_Structure`: (1, 1, Category), (8, 2, Sub-Category), (9, 8, Product), CREATE TABLE `Catalog_Contents` ( catalog_entry_id INTEGER, catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number), parent_entry_id INTEGER, previous_entry_id INTEGER, next_entry_id INTEGER, catalog_entry_name VARCHAR(80), product_stock_number VARCHAR(50), price_in_dollars DOUBLE, price_in_euros DOUBLE, price_in_pounds DOUBLE, capacity VARCHAR(20), length VARCHAR(20), height VARCHAR(20), width VARCHAR(20) ); Sample rows from `Catalog_Contents`: (1, 1, 5, 9, 7, Cola, 89 cp, 200.78, 159.84, 172.17, 1, 3, 9, 5), (2, 8, 6, 9, 8, Root beer, 37 hq, 687.59, 590.11, 471.78, 8, 6, 5, 6), (3, 8, 6, 6, 1, Cream Soda, 52 ee, 360.5, 202.32, 110.32, 5, 9, 7, 8), CREATE TABLE `Catalog_Contents_Additional_Attributes` ( catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id), catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number), attribute_id INTEGER, attribute_value VARCHAR(255) ); Sample rows from `Catalog_Contents_Additional_Attributes`: (5, 8, 4, 1), (15, 9, 3, 0), (11, 1, 2, 0), ",
        "output": "SELECT catalog_entry_name FROM catalog_contents WHERE length  <  3 OR width  >  5"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many kinds of enzymes are there? ###filtered_database_schema: CREATE TABLE `medicine` ( id INT PRIMARY KEY, name TEXT, Trade_Name TEXT, FDA_approved TEXT ); Sample rows from `medicine`: (1, Amisulpride, Solian, No), (2, Aripiprazole, Abilify, Yes), (3, Asenapine, Saphris, Yes), CREATE TABLE `enzyme` ( id INT PRIMARY KEY, name TEXT, Location TEXT, Product TEXT, Chromosome TEXT, OMIM INT, Porphyria TEXT ); Sample rows from `enzyme`: (1, ALA synthase, Mitochondrion, δ-Aminolevulinic acid, 3p21.1, 125290, none), (2, ALA dehydratase, Cytosol, Porphobilinogen, 9q34, 125270, ALA-Dehydratase deficiency), (3, PBG deaminase, Cytosol, Hydroxymethyl bilane, 11q23.3, 176000, acute intermittent porphyria), CREATE TABLE `medicine_enzyme_interaction` ( enzyme_id INT PRIMARY KEY REFERENCES enzyme(id), medicine_id INT PRIMARY KEY REFERENCES medicine(id), interaction_type TEXT ); Sample rows from `medicine_enzyme_interaction`: (1, 1, inhibitor), (1, 2, inhibitor), (1, 3, inhibitor), ",
        "output": "SELECT COUNT(*) FROM enzyme"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: how many cities are there in usa ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT COUNT(city_name) FROM city;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the best american in the bay area ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities? ###filtered_database_schema: CREATE TABLE `city` ( City_ID INT PRIMARY KEY, City TEXT, Hanzi TEXT, Hanyu_Pinyin TEXT, Regional_Population INT, GDP REAL ); Sample rows from `city`: (1, Shanghai, 上海, Shànghǎi, 23019148, 1919.57), (2, Nanjing ( Jiangsu ), 南京, Nánjīng, 8004680, 614.55), (3, Hangzhou ( Zhejiang ), 杭州, Hángzhōu, 8700400, 701.18), CREATE TABLE `match` ( Match_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Score TEXT, Result TEXT, Competition TEXT ); Sample rows from `match`: (1, 18 February 1992, Estadio Cuscatlán , San Salvador , El Salvador, 1-0, 2-0, Friendly match), (2, 19 July 1992, Estadio Rigoberto López , Managua , Nicaragua, 3-0, 5-0, 1994 FIFA World Cup qualification), (3, 23 July 1992, Estadio Cuscatlán , San Salvador , El Salvador, 1-0, 5-1, 1994 FIFA World Cup qualification), CREATE TABLE `temperature` ( City_ID INT PRIMARY KEY REFERENCES city(City_ID), Jan REAL, Feb REAL, Mar REAL, Apr REAL, Jun REAL, Jul REAL, Aug REAL, Sep REAL, Oct REAL, Nov REAL, Dec REAL ); Sample rows from `temperature`: (1, 17.8, 17.8, 18.3, 18.9, 20.0, 20.6, 20.6, 20.6, 20.0, 19.4, 18.3), (2, 26.1, 26.1, 26.1, 26.1, 27.8, 27.8, 28.3, 28.3, 28.3, 27.2, 26.7), (3, 18.9, 18.3, 19.4, 20.0, 22.2, 23.3, 23.9, 23.3, 22.8, 21.7, 20.0), CREATE TABLE `hosting_city` ( Year INT PRIMARY KEY, Match_ID INT REFERENCES match(Match_ID), Host_City TEXT REFERENCES city(City_ID) ); Sample rows from `hosting_city`: (2008, 1, 1), (2009, 2, 2), (2010, 3, 2), ",
        "output": "SELECT t1.city FROM city as t1 JOIN temperature as t2 ON t1.city_id  =  t2.city_id WHERE t2.mar  <  t2.jul INTERSECT SELECT t3.city FROM city as t3 JOIN hosting_city as t4 ON t3.city_id  =  t4.host_city"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is all the information on the airport with the largest number of international passengers? ###filtered_database_schema: CREATE TABLE `pilot` ( Pilot_Id int(11) PRIMARY KEY, Name varchar(50), Age int(11) ); Sample rows from `pilot`: (1, Prof. Zackery Collins, 23), (2, Katheryn Gorczany IV, 20), (3, Mr. Cristian Halvorson II, 23), CREATE TABLE `aircraft` ( Aircraft_ID int(11) PRIMARY KEY, Aircraft varchar(50), Description varchar(50), Max_Gross_Weight varchar(50), Total_disk_area varchar(50), Max_disk_Loading varchar(50) ); Sample rows from `aircraft`: (1, Robinson R-22, Light utility helicopter, 1,370 lb (635 kg), 497 ft² (46.2 m²), 2.6 lb/ft² (14 kg/m²)), (2, Bell 206B3 JetRanger, Turboshaft utility helicopter, 3,200 lb (1,451 kg), 872 ft² (81.1 m²), 3.7 lb/ft² (18 kg/m²)), (3, CH-47D Chinook, Tandem rotor helicopter, 50,000 lb (22,680 kg), 5,655 ft² (526 m²), 8.8 lb/ft² (43 kg/m²)), CREATE TABLE `match` ( Round REAL PRIMARY KEY, Location TEXT, Country TEXT, Date TEXT, Fastest_Qualifying TEXT, Winning_Pilot TEXT REFERENCES pilot(Pilot_Id), Winning_Aircraft TEXT REFERENCES aircraft(Aircraft_ID) ); Sample rows from `match`: (1.0, Mina' Zayid , Abu Dhabi, United Arab Emirates, March 26–27, Hannes Arch, 1, 1), (2.0, Swan River , Perth, Australia, April 17–18, Paul Bonhomme, 4, 1), (3.0, Flamengo Beach , Rio de Janeiro, Brazil, May 8–9, Hannes Arch, 6, 2), CREATE TABLE `airport` ( Airport_ID INT PRIMARY KEY, Airport_Name TEXT, Total_Passengers REAL, %_Change_2007 TEXT, International_Passengers REAL, Domestic_Passengers REAL, Transit_Passengers REAL, Aircraft_Movements REAL, Freight_Metric_Tonnes REAL ); Sample rows from `airport`: (1, London Heathrow, 67054745.0, 1.5%, 61344438.0, 5562516.0, 147791.0, 478693.0, 1397054.0), (2, London Gatwick, 34205887.0, 2.9%, 30431051.0, 3730963.0, 43873.0, 263653.0, 107702.0), (3, London Stansted, 22360364.0, 6.0%, 19996947.0, 2343428.0, 19989.0, 193282.0, 197738.0), CREATE TABLE `airport_aircraft` ( ID INT, Airport_ID INT PRIMARY KEY REFERENCES airport(Airport_ID), Aircraft_ID INT PRIMARY KEY REFERENCES aircraft(Aircraft_ID) ); Sample rows from `airport_aircraft`: (1, 6, 5), (2, 2, 1), (3, 1, 2), ",
        "output": "SELECT * FROM airport ORDER BY international_passengers DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids of the students who registered course statistics by order of registration date? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1 VARCHAR(80), line_2 VARCHAR(80), city VARCHAR(50), zip_postcode CHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (5, 0900 Roderick Oval New Albina, WA 19200-7914, Suite 096, Linnealand, 862, Montana, USA), (9, 966 Dach Ports Apt. 322 Lake Harmonyhaven, VA 65235, Apt. 163, South Minnie, 716, Texas, USA), (29, 28550 Broderick Underpass Suite 667 Zakaryhaven, WY 22945-1534, Apt. 419, North Trystanborough, 112, Vermont, USA), CREATE TABLE `People` ( person_id INTEGER, first_name VARCHAR(255), middle_name VARCHAR(255), last_name VARCHAR(255), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), login_name VARCHAR(40), password VARCHAR(40) ); Sample rows from `People`: (111, Shannon, Elissa, Senger, 01955267735, javier.trantow@example.net, pgub, 5e4ff49a61b3544da3ad7dc7e2cf28847564c64c), (121, Virginie, Jasmin, Hartmann, (508)319-2970x043, boyer.lonie@example.com, bkkv, b063331ea8116befaa7b84c59c6a22200f5f8caa), (131, Dariana, Hayley, Bednar, (262)347-9364x516, leila14@example.net, zops, b20b6a9f24aadeda70d54e410c3219f61fb063fb), CREATE TABLE `Students` ( student_id INTEGER REFERENCES People(person_id), student_details VARCHAR(255) ); Sample rows from `Students`: (111, Marry), (121, Martin), (131, Barry), CREATE TABLE `Courses` ( course_id VARCHAR(100) PRIMARY KEY, course_name VARCHAR(120), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Courses`: (301, statistics, statistics, None), (302, English, English, None), (303, French, French, None), CREATE TABLE `People_Addresses` ( person_address_id INTEGER, person_id INTEGER REFERENCES People(person_id), address_id INTEGER REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `People_Addresses`: (122, 111, 9, 2012-09-26 13:21:00, 2018-03-21 09:46:30), (257, 121, 5, 2008-07-31 02:17:25, 2018-03-09 02:11:12), (269, 131, 88, 2008-05-26 20:43:41, 2018-03-11 20:26:41), CREATE TABLE `Student_Course_Registrations` ( student_id INTEGER PRIMARY KEY REFERENCES Students(student_id), course_id INTEGER PRIMARY KEY REFERENCES Courses(course_id), registration_date DATETIME ); Sample rows from `Student_Course_Registrations`: (111, 301, 2008-11-04 10:35:13), (121, 301, 2008-10-04 10:35:13), (121, 303, 2008-11-14 10:35:13), CREATE TABLE `Student_Course_Attendance` ( student_id INTEGER PRIMARY KEY REFERENCES Student_Course_Registrations(student_id), course_id INTEGER PRIMARY KEY REFERENCES Student_Course_Registrations(course_id), date_of_attendance DATETIME ); Sample rows from `Student_Course_Attendance`: (111, 301, 2008-11-04 10:35:13), (121, 301, 2012-04-09 11:44:34), (121, 303, 2014-04-09 11:44:34), CREATE TABLE `Candidates` ( candidate_id INTEGER REFERENCES People(person_id), candidate_details VARCHAR(255) ); Sample rows from `Candidates`: (111, Jane), (121, Robert), (131, Alex), CREATE TABLE `Candidate_Assessments` ( candidate_id INTEGER PRIMARY KEY REFERENCES Candidates(candidate_id), qualification CHAR(15) PRIMARY KEY, assessment_date DATETIME, asessment_outcome_code CHAR(15) ); Sample rows from `Candidate_Assessments`: (111, A, 2010-04-07 11:44:34, Pass), (121, B, 2010-04-17 11:44:34, Pass), (131, D, 2010-04-05 11:44:34, Fail), ",
        "output": "SELECT t2.student_id FROM courses as t1 JOIN student_course_registrations as t2 ON t1.course_id = t2.course_id WHERE t1.course_name = \"statistics\" ORDER BY t2.registration_date"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are names of patients who made an appointment? ###filtered_database_schema: CREATE TABLE `Physician` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), SSN INTEGER ); Sample rows from `Physician`: (1, John Dorian, Staff Internist, 111111111), (2, Elliot Reid, Attending Physician, 222222222), (3, Christopher Turk, Surgical Attending Physician, 333333333), CREATE TABLE `Department` ( DepartmentID INTEGER, Name VARCHAR(30), Head INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Department`: (1, General Medicine, 4), (2, Surgery, 7), (3, Psychiatry, 9), CREATE TABLE `Affiliated_With` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID), PrimaryAffiliation BOOLEAN ); Sample rows from `Affiliated_With`: (1, 1, 1), (2, 1, 1), (3, 1, 0), CREATE TABLE `Procedures` ( Code INTEGER, Name VARCHAR(30), Cost REAL ); Sample rows from `Procedures`: (1, Reverse Rhinopodoplasty, 1500.0), (2, Obtuse Pyloric Recombobulation, 3750.0), (3, Folded Demiophtalmectomy, 4500.0), CREATE TABLE `Trained_In` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code), CertificationDate DATETIME, CertificationExpires DATETIME ); Sample rows from `Trained_In`: (3, 1, 2008-01-01, 2008-12-31), (3, 2, 2008-01-01, 2008-12-31), (3, 5, 2008-01-01, 2008-12-31), CREATE TABLE `Patient` ( SSN INTEGER, Name VARCHAR(30), Address VARCHAR(30), Phone VARCHAR(30), InsuranceID INTEGER, PCP INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Patient`: (100000001, John Smith, 42 Foobar Lane, 555-0256, 68476213, 1), (100000002, Grace Ritchie, 37 Snafu Drive, 555-0512, 36546321, 2), (100000003, Random J. Patient, 101 Omgbbq Street, 555-1204, 65465421, 2), CREATE TABLE `Nurse` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), Registered BOOLEAN, SSN INTEGER ); Sample rows from `Nurse`: (101, Carla Espinosa, Head Nurse, 1, 111111110), (102, Laverne Roberts, Nurse, 1, 222222220), (103, Paul Flowers, Nurse, 0, 333333330), CREATE TABLE `Appointment` ( AppointmentID INTEGER, Patient INTEGER REFERENCES Patient(SSN), PrepNurse INTEGER REFERENCES Nurse(EmployeeID), Physician INTEGER REFERENCES Physician(EmployeeID), Start DATETIME, End DATETIME, ExaminationRoom TEXT ); Sample rows from `Appointment`: (13216584, 100000001, 101, 1, 2008-04-24 10:00, 2008-04-24 11:00, A), (26548913, 100000002, 101, 2, 2008-04-24 10:00, 2008-04-24 11:00, B), (36549879, 100000001, 102, 1, 2008-04-25 10:00, 2008-04-25 11:00, A), CREATE TABLE `Medication` ( Code INTEGER, Name VARCHAR(30), Brand VARCHAR(30), Description VARCHAR(30) ); Sample rows from `Medication`: (1, Procrastin-X, X, N/A), (2, Thesisin, Foo Labs, N/A), (3, Awakin, Bar Laboratories, N/A), CREATE TABLE `Prescribes` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Medication INTEGER PRIMARY KEY REFERENCES Medication(Code), Date DATETIME PRIMARY KEY, Appointment INTEGER REFERENCES Appointment(AppointmentID), Dose VARCHAR(30) ); Sample rows from `Prescribes`: (1, 100000001, 1, 2008-04-24 10:47, 13216584, 5), (9, 100000004, 2, 2008-04-27 10:53, 86213939, 10), (9, 100000004, 2, 2008-04-30 16:53, None, 5), CREATE TABLE `Block` ( BlockFloor INTEGER PRIMARY KEY, BlockCode INTEGER PRIMARY KEY ); Sample rows from `Block`: (1, 1), (1, 2), (1, 3), CREATE TABLE `Room` ( RoomNumber INTEGER, RoomType VARCHAR(30), BlockFloor INTEGER REFERENCES Block(BlockFloor), BlockCode INTEGER REFERENCES Block(BlockCode), Unavailable BOOLEAN ); Sample rows from `Room`: (101, Single, 1, 1, 0), (102, Single, 1, 1, 0), (103, Single, 1, 1, 0), CREATE TABLE `On_Call` ( Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID), BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor), BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode), OnCallStart DATETIME PRIMARY KEY, OnCallEnd DATETIME PRIMARY KEY ); Sample rows from `On_Call`: (101, 1, 1, 2008-11-04 11:00, 2008-11-04 19:00), (101, 1, 2, 2008-11-04 11:00, 2008-11-04 19:00), (102, 1, 3, 2008-11-04 11:00, 2008-11-04 19:00), CREATE TABLE `Stay` ( StayID INTEGER, Patient INTEGER REFERENCES Patient(SSN), Room INTEGER REFERENCES Room(RoomNumber), StayStart DATETIME, StayEnd DATETIME ); Sample rows from `Stay`: (3215, 100000001, 111, 2008-05-01, 2008-05-04), (3216, 100000003, 123, 2008-05-03, 2008-05-14), (3217, 100000004, 112, 2008-05-02, 2008-05-03), CREATE TABLE `Undergoes` ( Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code), Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID), DateUndergoes DATETIME PRIMARY KEY, Physician INTEGER REFERENCES Physician(EmployeeID), AssistingNurse INTEGER REFERENCES Nurse(EmployeeID) ); Sample rows from `Undergoes`: (100000001, 6, 3215, 2008-05-02, 3, 101), (100000001, 2, 3215, 2008-05-03, 7, 101), (100000004, 1, 3217, 2008-05-07, 3, 102), ",
        "output": "SELECT name FROM appointment as t1 JOIN patient as t2 ON t1.patient  =  t2.ssn"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the full names of employees who help customers with the first name Leonie. ###filtered_database_schema: CREATE TABLE `Album` ( AlbumId INTEGER, Title varchar(160), ArtistId INTEGER PRIMARY KEY REFERENCES Artist(ArtistId) ); Sample rows from `Album`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `Artist` ( ArtistId INTEGER, Name varchar(120) ); Sample rows from `Artist`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `Customer` ( CustomerId INTEGER, FirstName varchar(40), LastName varchar(20), Company varchar(80), Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60), SupportRepId INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId) ); Sample rows from `Customer`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `Employee` ( EmployeeId INTEGER, LastName varchar(20), FirstName varchar(20), Title varchar(30), ReportsTo INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId), BirthDate datetime, HireDate datetime, Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60) ); Sample rows from `Employee`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `Genre` ( GenreId INTEGER, Name varchar(120) ); Sample rows from `Genre`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `Invoice` ( InvoiceId INTEGER, CustomerId INTEGER PRIMARY KEY REFERENCES Customer(CustomerId), InvoiceDate datetime, BillingAddress varchar(70), BillingCity varchar(40), BillingState varchar(40), BillingCountry varchar(40), BillingPostalCode varchar(10), Total decimal(10,2) ); Sample rows from `Invoice`: (1, 2, 2009-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2009-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2009-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `InvoiceLine` ( InvoiceLineId INTEGER, InvoiceId INTEGER PRIMARY KEY REFERENCES Invoice(InvoiceId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId), UnitPrice decimal(10,2), Quantity INTEGER ); Sample rows from `InvoiceLine`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `MediaType` ( MediaTypeId INTEGER, Name varchar(120) ); Sample rows from `MediaType`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `Playlist` ( PlaylistId INTEGER, Name varchar(120) ); Sample rows from `Playlist`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `PlaylistTrack` ( PlaylistId INTEGER PRIMARY KEY REFERENCES Playlist(PlaylistId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId) ); Sample rows from `PlaylistTrack`: (1, 1), (8, 1), (17, 1), CREATE TABLE `Track` ( TrackId INTEGER, Name varchar(200), AlbumId INTEGER PRIMARY KEY REFERENCES Album(AlbumId), MediaTypeId INTEGER PRIMARY KEY REFERENCES MediaType(MediaTypeId), GenreId INTEGER PRIMARY KEY REFERENCES Genre(GenreId), Composer varchar(220), Milliseconds INTEGER, Bytes INTEGER, UnitPrice decimal(10,2) ); Sample rows from `Track`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), ",
        "output": "SELECT t2.firstname ,  t2.lastname FROM customer as t1 JOIN employee as t2 ON t1.supportrepid  =  t2.employeeid WHERE t1.firstname  =  \"Leonie\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Who directed the movie \" James Bond \" ? ###filtered_database_schema: CREATE TABLE `actor` ( aid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `copyright` ( id INT PRIMARY KEY, msid INT, cid INT ); CREATE TABLE `cast` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), aid INT REFERENCES actor(aid), role INT ); CREATE TABLE `genre` ( gid INT PRIMARY KEY, genre TEXT ); CREATE TABLE `classification` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), gid INT REFERENCES genre(gid) ); CREATE TABLE `company` ( id INT PRIMARY KEY, name TEXT, country_code TEXT ); CREATE TABLE `director` ( did INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `producer` ( pid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `directed_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), did INT REFERENCES director(did) ); CREATE TABLE `keyword` ( id INT PRIMARY KEY, keyword TEXT ); CREATE TABLE `made_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), pid INT REFERENCES producer(pid) ); CREATE TABLE `movie` ( mid INT PRIMARY KEY, title TEXT, release_year INT, title_aka TEXT, budget TEXT ); CREATE TABLE `tags` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), kid INT REFERENCES keyword(kid) ); CREATE TABLE `tv_series` ( sid INT PRIMARY KEY, title TEXT, release_year INT, num_of_seasons INT, num_of_episodes INT, title_aka TEXT, budget TEXT ); CREATE TABLE `writer` ( wid INT PRIMARY KEY, gender TEXT, name INT, nationality INT, num_of_episodes INT, birth_city TEXT, birth_year INT ); CREATE TABLE `written_by` ( id INT, msid INT REFERENCES copyright(msid), wid INT REFERENCES writer(wid) ); ",
        "output": "SELECT t2.name FROM director as t2 JOIN directed_by as t1 ON t2.did  =  t1.did JOIN movie as t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the count of universities whose campus fee is greater than the average campus fee. ###filtered_database_schema: CREATE TABLE `Campuses` ( Id INTEGER, Campus TEXT, Location TEXT, County TEXT, Year INTEGER ); Sample rows from `Campuses`: (1, California State University-Bakersfield, Bakersfield, Kern, 1965), (2, California State University-Channel Islands, Camarillo, Ventura, 2002), (3, California State University-Chico, Chico, Butte, 1887), CREATE TABLE `csu_fees` ( Campus INTEGER REFERENCES Campuses(Id), Year INTEGER, CampusFee INTEGER ); Sample rows from `csu_fees`: (1, 1996, 1951), (2, 2003, 1868), (3, 1996, 2042), CREATE TABLE `degrees` ( Year INTEGER PRIMARY KEY, Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Degrees INTEGER ); Sample rows from `degrees`: (1990, 1, 701), (1991, 1, 681), (1992, 1, 791), CREATE TABLE `discipline_enrollments` ( Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Discipline INTEGER PRIMARY KEY, Year INTEGER, Undergraduate INTEGER, Graduate INTEGER ); Sample rows from `discipline_enrollments`: (1, 4, 2004, 248, 0), (1, 5, 2004, 811, 73), (1, 6, 2004, 199, 0), CREATE TABLE `enrollments` ( Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Year INTEGER PRIMARY KEY, TotalEnrollment_AY INTEGER, FTE_AY INTEGER ); Sample rows from `enrollments`: (1, 1956, 384, 123), (1, 1957, 432, 151), (1, 1958, 422, 178), CREATE TABLE `faculty` ( Campus INTEGER REFERENCES Campuses(Id), Year INTEGER, Faculty REAL ); Sample rows from `faculty`: (1, 2002, 357.1), (2, 2002, 48.4), (3, 2002, 742.8), ",
        "output": "SELECT COUNT(*) FROM csu_fees WHERE campusfee  >  (SELECT AVG(campusfee) FROM csu_fees)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the themes of farm competitions, sorted by year ascending. ###filtered_database_schema: CREATE TABLE `city` ( City_ID INT PRIMARY KEY, Official_Name TEXT, Status TEXT, Area_km_2 REAL, Population REAL, Census_Ranking TEXT ); Sample rows from `city`: (1, Grand Falls/Grand-Sault, Town, 18.06, 5706.0, 636 of 5008), (2, Perth-Andover, Village, 8.89, 1778.0, 1442 of 5,008), (3, Plaster Rock, Village, 3.09, 1135.0, 1936 of 5,008), CREATE TABLE `farm` ( Farm_ID INT PRIMARY KEY, Year INT, Total_Horses REAL, Working_Horses REAL, Total_Cattle REAL, Oxen REAL, Bulls REAL, Cows REAL, Pigs REAL, Sheep_and_Goats REAL ); Sample rows from `farm`: (1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8), CREATE TABLE `farm_competition` ( Competition_ID INT PRIMARY KEY, Year INT, Theme TEXT, Host_city_ID INT REFERENCES city(City_ID), Hosts TEXT ); Sample rows from `farm_competition`: (1, 2013, Carnival M is back!, 1, Miley Cyrus Jared Leto and Karen Mok), (2, 2006, Codehunters, 2, Leehom Wang and Kelly Rowland), (3, 2005, MTV Asia Aid, 3, Alicia Keys), CREATE TABLE `competition_record` ( Competition_ID INT PRIMARY KEY REFERENCES farm_competition(Competition_ID), Farm_ID INT PRIMARY KEY REFERENCES farm(Farm_ID), Rank INT ); Sample rows from `competition_record`: (1, 8, 1), (1, 2, 2), (1, 3, 3), ",
        "output": "SELECT theme FROM farm_competition ORDER BY year ASC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find all breweries in Los Angeles ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the maximum price and score of wines for each year? ###filtered_database_schema: CREATE TABLE `grapes` ( ID INTEGER, Grape TEXT PRIMARY KEY, Color TEXT ); Sample rows from `grapes`: (1, Barbera, Red), (2, Cabernet Franc, Red), (3, Cabernet Sauvingnon, Red), CREATE TABLE `appellations` ( No INTEGER, Appelation TEXT PRIMARY KEY, County TEXT, State TEXT, Area TEXT, isAVA TEXT ); Sample rows from `appellations`: (1, Alexander Valley, Sonoma, California, North Coast, Yes), (2, Amador County, Amador, California, Sierra Foothills, No), (3, Amador-Mendocino-Sonoma Counties, N/A, California, N/A, No), CREATE TABLE `wine` ( No INTEGER, Grape TEXT REFERENCES grapes(Grape), Winery TEXT, Appelation TEXT REFERENCES appellations(Appelation), State TEXT, Name TEXT, Year INTEGER, Price INTEGER, Score INTEGER, Cases INTEGER, Drink TEXT ); Sample rows from `wine`: (1, Zinfandel, Robert Biale, St. Helena, California, Old Kraft Vineyard, 2008, 44, 93, 275, now), (2, Zinfandel, Chiarello Family, Napa Valley, California, Giana, 2008, 35, 93, 480, now), (3, Zinfandel, Robert Biale, Napa Valley, California, Black Chicken, 2008, 40, 91, 2700, 2012), ",
        "output": "SELECT MAX(price) ,  MAX(score) ,  year FROM wine GROUP BY year"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are some recent papers written in deep learning ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the unique block codes that have available rooms? ###filtered_database_schema: CREATE TABLE `Physician` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), SSN INTEGER ); Sample rows from `Physician`: (1, John Dorian, Staff Internist, 111111111), (2, Elliot Reid, Attending Physician, 222222222), (3, Christopher Turk, Surgical Attending Physician, 333333333), CREATE TABLE `Department` ( DepartmentID INTEGER, Name VARCHAR(30), Head INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Department`: (1, General Medicine, 4), (2, Surgery, 7), (3, Psychiatry, 9), CREATE TABLE `Affiliated_With` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID), PrimaryAffiliation BOOLEAN ); Sample rows from `Affiliated_With`: (1, 1, 1), (2, 1, 1), (3, 1, 0), CREATE TABLE `Procedures` ( Code INTEGER, Name VARCHAR(30), Cost REAL ); Sample rows from `Procedures`: (1, Reverse Rhinopodoplasty, 1500.0), (2, Obtuse Pyloric Recombobulation, 3750.0), (3, Folded Demiophtalmectomy, 4500.0), CREATE TABLE `Trained_In` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code), CertificationDate DATETIME, CertificationExpires DATETIME ); Sample rows from `Trained_In`: (3, 1, 2008-01-01, 2008-12-31), (3, 2, 2008-01-01, 2008-12-31), (3, 5, 2008-01-01, 2008-12-31), CREATE TABLE `Patient` ( SSN INTEGER, Name VARCHAR(30), Address VARCHAR(30), Phone VARCHAR(30), InsuranceID INTEGER, PCP INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Patient`: (100000001, John Smith, 42 Foobar Lane, 555-0256, 68476213, 1), (100000002, Grace Ritchie, 37 Snafu Drive, 555-0512, 36546321, 2), (100000003, Random J. Patient, 101 Omgbbq Street, 555-1204, 65465421, 2), CREATE TABLE `Nurse` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), Registered BOOLEAN, SSN INTEGER ); Sample rows from `Nurse`: (101, Carla Espinosa, Head Nurse, 1, 111111110), (102, Laverne Roberts, Nurse, 1, 222222220), (103, Paul Flowers, Nurse, 0, 333333330), CREATE TABLE `Appointment` ( AppointmentID INTEGER, Patient INTEGER REFERENCES Patient(SSN), PrepNurse INTEGER REFERENCES Nurse(EmployeeID), Physician INTEGER REFERENCES Physician(EmployeeID), Start DATETIME, End DATETIME, ExaminationRoom TEXT ); Sample rows from `Appointment`: (13216584, 100000001, 101, 1, 2008-04-24 10:00, 2008-04-24 11:00, A), (26548913, 100000002, 101, 2, 2008-04-24 10:00, 2008-04-24 11:00, B), (36549879, 100000001, 102, 1, 2008-04-25 10:00, 2008-04-25 11:00, A), CREATE TABLE `Medication` ( Code INTEGER, Name VARCHAR(30), Brand VARCHAR(30), Description VARCHAR(30) ); Sample rows from `Medication`: (1, Procrastin-X, X, N/A), (2, Thesisin, Foo Labs, N/A), (3, Awakin, Bar Laboratories, N/A), CREATE TABLE `Prescribes` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Medication INTEGER PRIMARY KEY REFERENCES Medication(Code), Date DATETIME PRIMARY KEY, Appointment INTEGER REFERENCES Appointment(AppointmentID), Dose VARCHAR(30) ); Sample rows from `Prescribes`: (1, 100000001, 1, 2008-04-24 10:47, 13216584, 5), (9, 100000004, 2, 2008-04-27 10:53, 86213939, 10), (9, 100000004, 2, 2008-04-30 16:53, None, 5), CREATE TABLE `Block` ( BlockFloor INTEGER PRIMARY KEY, BlockCode INTEGER PRIMARY KEY ); Sample rows from `Block`: (1, 1), (1, 2), (1, 3), CREATE TABLE `Room` ( RoomNumber INTEGER, RoomType VARCHAR(30), BlockFloor INTEGER REFERENCES Block(BlockFloor), BlockCode INTEGER REFERENCES Block(BlockCode), Unavailable BOOLEAN ); Sample rows from `Room`: (101, Single, 1, 1, 0), (102, Single, 1, 1, 0), (103, Single, 1, 1, 0), CREATE TABLE `On_Call` ( Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID), BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor), BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode), OnCallStart DATETIME PRIMARY KEY, OnCallEnd DATETIME PRIMARY KEY ); Sample rows from `On_Call`: (101, 1, 1, 2008-11-04 11:00, 2008-11-04 19:00), (101, 1, 2, 2008-11-04 11:00, 2008-11-04 19:00), (102, 1, 3, 2008-11-04 11:00, 2008-11-04 19:00), CREATE TABLE `Stay` ( StayID INTEGER, Patient INTEGER REFERENCES Patient(SSN), Room INTEGER REFERENCES Room(RoomNumber), StayStart DATETIME, StayEnd DATETIME ); Sample rows from `Stay`: (3215, 100000001, 111, 2008-05-01, 2008-05-04), (3216, 100000003, 123, 2008-05-03, 2008-05-14), (3217, 100000004, 112, 2008-05-02, 2008-05-03), CREATE TABLE `Undergoes` ( Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code), Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID), DateUndergoes DATETIME PRIMARY KEY, Physician INTEGER REFERENCES Physician(EmployeeID), AssistingNurse INTEGER REFERENCES Nurse(EmployeeID) ); Sample rows from `Undergoes`: (100000001, 6, 3215, 2008-05-02, 3, 101), (100000001, 2, 3215, 2008-05-03, 7, 101), (100000004, 1, 3217, 2008-05-07, 3, 102), ",
        "output": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For each sex, what is the name and sex of the candidate with the oppose rate for their sex? ###filtered_database_schema: CREATE TABLE `candidate` ( Candidate_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Poll_Source TEXT, Date TEXT, Support_rate REAL, Consider_rate REAL, Oppose_rate REAL, Unsure_rate REAL ); Sample rows from `candidate`: (1, 1, WNBC/Marist Poll, Feb 12–15, 2007, 0.25, 0.3, 0.43, 0.2), (2, 3, WNBC/Marist Poll, Feb 12–15, 2007, 0.17, 0.42, 0.32, 0.9), (3, 4, FOX News/Opinion Dynamics Poll, Feb 13–14, 2007, 0.18, 0.34, 0.44, 0.3), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Sex TEXT, Name TEXT, Date_of_Birth TEXT, Height REAL, Weight REAL ); Sample rows from `people`: (1, M, Hubert Henno, 06.10.1976, 188.0, 83.0), (2, M, Dominique Daquin, 10.11.1972, 197.0, 85.0), (3, F, Stéphane Antiga, 03.02.1976, 200.0, 94.0), ",
        "output": "SELECT t1.name ,  t1.sex ,  MIN(oppose_rate) FROM people as t1 JOIN candidate as t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the team and starting year of technicians? ###filtered_database_schema: CREATE TABLE `repair` ( repair_ID INT PRIMARY KEY, name TEXT, Launch_Date TEXT, Notes TEXT ); Sample rows from `repair`: (1, Discoverer, 21 Jan 2009, repair Failed. Failed to achieve orbit), (2, Discoverer 1, 28 Feb 2009, First object in polar orbit), (3, Discoverer 3, 03 Jun 2009, repair failed. Failed to achieve orbit), CREATE TABLE `machine` ( Machine_ID INT PRIMARY KEY, Making_Year INT, Class TEXT, Team TEXT, Machine_series TEXT, value_points REAL, quality_rank INT ); Sample rows from `machine`: (1, 1991, 125cc, Hero Sports TS- Honda, RS125, 105.0, 2), (2, 1992, 125cc, Marlboro Pileri - Honda, RS125, 57.0, 1), (3, 1993, 125cc, Marlboro Pileri - Honda, RS125, 129.0, 4), CREATE TABLE `technician` ( technician_id REAL PRIMARY KEY, Name TEXT, Team TEXT, Starting_Year REAL, Age INT ); Sample rows from `technician`: (1.0, Joe Sewell, NYY, 2012.0, 37), (2.0, John Brown, NYY, 2013.0, 36), (3.0, Tony Sewell, CLE, 2005.0, 43), CREATE TABLE `repair_assignment` ( technician_id INT PRIMARY KEY REFERENCES technician(technician_id), repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID), Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID) ); Sample rows from `repair_assignment`: (1, 1, 1), (2, 2, 2), (3, 3, 3), ",
        "output": "SELECT team ,  starting_year FROM technician"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many addresses are there in country USA? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 4315 Kerluke Canyon Apt. 800, Hertafurt, 740, Nevada, USA), (2, 319 Kozey Highway Suite 973, Edgardoberg, 282, Colorado, USA), (3, 592 Frederique Ridge, Gilbertmouth, 167, Virginia, USA), CREATE TABLE `Products` ( product_id INTEGER, product_type_code VARCHAR(15), product_name VARCHAR(80), product_price DOUBLE ); Sample rows from `Products`: (1, Hardware, Apple, 54753982.574522), (2, Clothes, jcrew, 30590929.528306), (3, Hardware, Apple, 10268.85297069), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method_code VARCHAR(15), customer_number VARCHAR(20), customer_name VARCHAR(80), customer_address VARCHAR(255), customer_phone VARCHAR(80), customer_email VARCHAR(80) ); Sample rows from `Customers`: (1, Credit Card, 456, Kayley, 636 Chanelle Isle Apt. 846, +87(9)5279161988, antonette73@example.com), (2, Credit Card, 553, Sterling, 12174 Boyer Crossroad, 896.685.8228x2786, stroman.chadd@example.net), (3, Credit Card, 951, Buford, 650 Spencer Way Apt. 584, (192)144-4687, pattie.mayer@example.net), CREATE TABLE `Contacts` ( contact_id INTEGER, customer_id INTEGER, gender VARCHAR(1), first_name VARCHAR(80), last_name VARCHAR(50), contact_phone VARCHAR(80) ); Sample rows from `Contacts`: (1, 4, male, Cierra, Collins, +73(2)0854391820), (2, 6, male, Jennifer, Doyle, 482-949-1364x17500), (3, 8, female, Carli, Blick, (608)868-5069x554), CREATE TABLE `Customer_Address_History` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Customer_Address_History`: (12, 7, 2015-07-23 14:37:18, 2018-03-07 12:04:20), (12, 2, 2016-11-06 14:33:12, 2018-03-14 21:36:28), (3, 9, 2011-11-19 12:17:36, 2018-03-22 10:20:16), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_date DATETIME, order_status_code VARCHAR(15) ); Sample rows from `Customer_Orders`: (1, 2, 2009-07-19 13:40:49, Completed), (2, 2, 1976-05-28 15:02:44, Part), (3, 6, 1979-03-29 02:47:13, Completed), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), order_quantity VARCHAR(80) ); Sample rows from `Order_Items`: (1, 9, 15, 3), (2, 8, 12, 7), (3, 11, 9, 9), ",
        "output": "SELECT COUNT(*) FROM addresses WHERE country  =  'USA'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the distinct ids of products ordered between 1975-01-01 and 1976-01-01?? ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_name VARCHAR(80), customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Savannah, rerum), (2, George, est), (3, Alberto, deleniti), CREATE TABLE `Invoices` ( invoice_number INTEGER, invoice_date DATETIME, invoice_details VARCHAR(255) ); Sample rows from `Invoices`: (1, 1989-09-03 16:03:05, vitae), (2, 1989-12-11 16:40:57, magnam), (3, 1995-10-07 14:13:05, et), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(10), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 2, Shipped, 2009-02-21 15:26:19, None), (2, 11, Shipped, 1974-06-24 22:10:26, None), (3, 4, Shipped, 1982-12-29 21:10:11, None), CREATE TABLE `Products` ( product_id INTEGER, product_name VARCHAR(80), product_details VARCHAR(255) ); Sample rows from `Products`: (1, food, None), (2, book, None), (3, food, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, product_id INTEGER REFERENCES Products(product_id), order_id INTEGER REFERENCES Orders(order_id), order_item_status VARCHAR(10), order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 6, Finish, None), (2, 15, 6, Finish, None), (3, 12, 15, Finish, None), CREATE TABLE `Shipments` ( shipment_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), shipment_tracking_number VARCHAR(80), shipment_date DATETIME, other_shipment_details VARCHAR(255) ); Sample rows from `Shipments`: (1, 5, 13, 3452, 1983-08-13 22:34:11, None), (2, 7, 2, 0114, 1977-11-10 12:11:25, None), (3, 10, 5, 478, 2006-01-17 03:08:05, None), CREATE TABLE `Shipment_Items` ( shipment_id INTEGER REFERENCES Shipments(shipment_id), order_item_id INTEGER REFERENCES Order_Items(order_item_id) ); Sample rows from `Shipment_Items`: (11, 12), (10, 15), (10, 12), ",
        "output": "SELECT DISTINCT t2.product_id FROM orders as t1 JOIN order_items as t2 ON t1.order_id = t2.order_id WHERE t1.date_order_placed >= \"1975-01-01\" AND t1.date_order_placed <= \"1976-01-01\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of distinct delegates who are from counties with population above 50000. ###filtered_database_schema: CREATE TABLE `county` ( County_Id INT PRIMARY KEY, County_name TEXT, Population REAL, Zip_code TEXT ); Sample rows from `county`: (1, Howard, 21000.0, D21), (2, Baltimore County, 90000.0, D08), (3, Colony, 79000.0, D02), CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Year REAL, Party TEXT, Governor TEXT, Lieutenant_Governor TEXT, Comptroller TEXT, Attorney_General TEXT, US_Senate TEXT ); Sample rows from `party`: (1, 1998.0, Democratic, Peter Vallone, Sandra Frankel, Carl McCall, Eliot Spitzer, Charles Schumer), (2, 1998.0, Liberal, Betsy McCaughey Ross, Jonathan Reiter, Carl McCall, Eliot Spitzer, Charles Schumer), (3, 2002.0, Democratic, Carl McCall, Dennis Mehiel, Alan Hevesi, Eliot Spitzer, (no election)), CREATE TABLE `election` ( Election_ID INT PRIMARY KEY, Counties_Represented TEXT, District INT REFERENCES county(County_Id), Delegate TEXT, Party INT REFERENCES party(Party_ID), First_Elected REAL, Committee TEXT ); Sample rows from `election`: (1, 09.1 9A, 1, Bates, Gail H. Gail H. Bates, 1, 2002.0, Appropriations), (2, 09.1 9A, 1, Miller, Warren E. Warren E. Miller, 1, 2003.0, Economic Matters), (3, 12.1 12A, 2, DeBoy, Steven J. Sr. Steven J. DeBoy, Sr., 2, 2002.0, Appropriations), ",
        "output": "SELECT COUNT(DISTINCT t2.delegate) FROM county as t1 JOIN election as t2 ON t1.county_id  =  t2.district WHERE t1.population  >  50000"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name and city of the airport that the most routes end at? ###filtered_database_schema: CREATE TABLE `routes` ( rid INTEGER, dst_apid INTEGER REFERENCES airports(apid), dst_ap varchar(4), src_apid bigint REFERENCES airports(apid), src_ap varchar(4), alid bigint REFERENCES airlines(alid), airline varchar(4), codeshare TEXT ); Sample rows from `routes`: (37, 2990, KZ, 2965, AER, 410, 2B, None), (38, 2990, KZ, 2966, ASF, 410, 2B, None), (39, 2962, MRV, 2966, ASF, 410, 2B, None), CREATE TABLE `airports` ( apid INTEGER, name TEXT, city TEXT, country TEXT, x REAL, y REAL, elevation bigint, iata character varchar(3), icao character varchar(4) ); Sample rows from `airports`: (1, Goroka Airport, Goroka, Papua New Guinea, 145.391998291, -6.081689834590001, 5282, GKA, AYGA), (2, Madang Airport, Madang, Papua New Guinea, 145.789001465, -5.20707988739, 20, MAG, AYMD), (3, Mount Hagen Kagamuga Airport, Mount Hagen, Papua New Guinea, 144.29600524902344, -5.826789855957031, 5388, HGU, AYMH), CREATE TABLE `airlines` ( alid INTEGER, name TEXT, iata varchar(2), icao varchar(3), callsign TEXT, country TEXT, active varchar(2) ); Sample rows from `airlines`: (-1, Unknown, -, N/A, None, None, Y), (1, Private flight, -, N/A, , , Y), (2, 135 Airways, , GNL, GENERAL, United States, N), ",
        "output": "SELECT t1.name ,  t1.city ,  t2.dst_apid FROM airports as t1 JOIN routes as t2 ON t1.apid  =  t2.dst_apid GROUP BY t2.dst_apid ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which party has two or more records? ###filtered_database_schema: CREATE TABLE `county` ( County_Id INT PRIMARY KEY, County_name TEXT, Population REAL, Zip_code TEXT ); Sample rows from `county`: (1, Howard, 21000.0, D21), (2, Baltimore County, 90000.0, D08), (3, Colony, 79000.0, D02), CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Year REAL, Party TEXT, Governor TEXT, Lieutenant_Governor TEXT, Comptroller TEXT, Attorney_General TEXT, US_Senate TEXT ); Sample rows from `party`: (1, 1998.0, Democratic, Peter Vallone, Sandra Frankel, Carl McCall, Eliot Spitzer, Charles Schumer), (2, 1998.0, Liberal, Betsy McCaughey Ross, Jonathan Reiter, Carl McCall, Eliot Spitzer, Charles Schumer), (3, 2002.0, Democratic, Carl McCall, Dennis Mehiel, Alan Hevesi, Eliot Spitzer, (no election)), CREATE TABLE `election` ( Election_ID INT PRIMARY KEY, Counties_Represented TEXT, District INT REFERENCES county(County_Id), Delegate TEXT, Party INT REFERENCES party(Party_ID), First_Elected REAL, Committee TEXT ); Sample rows from `election`: (1, 09.1 9A, 1, Bates, Gail H. Gail H. Bates, 1, 2002.0, Appropriations), (2, 09.1 9A, 1, Miller, Warren E. Warren E. Miller, 1, 2003.0, Economic Matters), (3, 12.1 12A, 2, DeBoy, Steven J. Sr. Steven J. DeBoy, Sr., 2, 2002.0, Appropriations), ",
        "output": "SELECT party FROM party GROUP BY party HAVING COUNT(*)  >=  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of customers who have both savings and checking accounts? ###filtered_database_schema: CREATE TABLE `bank` ( branch_ID INT PRIMARY KEY, bname varchar(20), no_of_customers INT, city varchar(10), state varchar(20) ); Sample rows from `bank`: (1, morningside, 203, New York City, New York), (2, downtown, 123, Salt Lake City, Utah), (3, broadway, 453, New York City, New York), CREATE TABLE `customer` ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal INT, no_of_loans INT, credit_score INT, branch_ID INT REFERENCES bank(branch_ID), state varchar(20) ); Sample rows from `customer`: (1, Mary, saving, 2000, 2, 30, 2, Utah), (2, Jack, checking, 1000, 1, 20, 1, Texas), (3, Owen, saving, 800000, 0, 210, 3, New York), CREATE TABLE `loan` ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3) REFERENCES customer(Cust_ID), branch_ID varchar(3) REFERENCES bank(branch_ID), amount INT ); Sample rows from `loan`: (1, Mortgages, 1, 1, 2050), (2, Auto, 1, 2, 3000), (3, Business, 3, 3, 5000), ",
        "output": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: display the average salary of employees for each department who gets a commission percentage. ###filtered_database_schema: CREATE TABLE `regions` ( REGION_ID decimal(5,0) PRIMARY KEY, REGION_NAME varchar(25) ); Sample rows from `regions`: (1, Europe\\r), (2, Americas\\r), (3, Asia\\r), CREATE TABLE `countries` ( COUNTRY_ID varchar(2) PRIMARY KEY, COUNTRY_NAME varchar(40), REGION_ID decimal(10,0) REFERENCES regions(REGION_ID) ); Sample rows from `countries`: (AR, Argentina, 2), (AU, Australia, 3), (BE, Belgium, 1), CREATE TABLE `departments` ( DEPARTMENT_ID decimal(4,0) PRIMARY KEY, DEPARTMENT_NAME varchar(30), MANAGER_ID decimal(6,0), LOCATION_ID decimal(4,0) ); Sample rows from `departments`: (10, Administration, 200, 1700), (20, Marketing, 201, 1800), (30, Purchasing, 114, 1700), CREATE TABLE `jobs` ( JOB_ID varchar(10) PRIMARY KEY, JOB_TITLE varchar(35), MIN_SALARY decimal(6,0), MAX_SALARY decimal(6,0) ); Sample rows from `jobs`: (AD_PRES, President, 20000, 40000), (AD_VP, Administration Vice President, 15000, 30000), (AD_ASST, Administration Assistant, 3000, 6000), CREATE TABLE `employees` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY, FIRST_NAME varchar(20), LAST_NAME varchar(25), EMAIL varchar(25), PHONE_NUMBER varchar(20), HIRE_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), SALARY decimal(8,2), COMMISSION_PCT decimal(2,2), MANAGER_ID decimal(6,0), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `employees`: (100, Steven, King, SKING, 515.123.4567, 1987-06-17, AD_PRES, 24000, 0, 0, 90), (101, Neena, Kochhar, NKOCHHAR, 515.123.4568, 1987-06-18, AD_VP, 17000, 0, 100, 90), (102, Lex, De Haan, LDEHAAN, 515.123.4569, 1987-06-19, AD_VP, 17000, 0, 100, 90), CREATE TABLE `job_history` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY REFERENCES employees(EMPLOYEE_ID), START_DATE date PRIMARY KEY, END_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `job_history`: (102, 1993-01-13, 1998-07-24, IT_PROG, 60), (101, 1989-09-21, 1993-10-27, AC_ACCOUNT, 110), (101, 1993-10-28, 1997-03-15, AC_MGR, 110), CREATE TABLE `locations` ( LOCATION_ID decimal(4,0) PRIMARY KEY, STREET_ADDRESS varchar(40), POSTAL_CODE varchar(12), CITY varchar(30), STATE_PROVINCE varchar(25), COUNTRY_ID varchar(2) REFERENCES countries(COUNTRY_ID) ); Sample rows from `locations`: (1000, 1297 Via Cola di Rie, 989, Roma, , IT), (1100, 93091 Calle della Testa, 10934, Venice, , IT), (1200, 2017 Shinjuku-ku, 1689, Tokyo, Tokyo Prefecture, JP), ",
        "output": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the names of products in the category 'Spices'. ###filtered_database_schema: CREATE TABLE `Ref_Characteristic_Types` ( characteristic_type_code VARCHAR(15) PRIMARY KEY, characteristic_type_description VARCHAR(80) ); Sample rows from `Ref_Characteristic_Types`: (Grade, Grade), (Purity, Purity), CREATE TABLE `Ref_Colors` ( color_code VARCHAR(15) PRIMARY KEY, color_description VARCHAR(80) ); Sample rows from `Ref_Colors`: (9, red), (5, green), (1, yellow), CREATE TABLE `Ref_Product_Categories` ( product_category_code VARCHAR(15) PRIMARY KEY, product_category_description VARCHAR(80), unit_of_measure VARCHAR(20) ); Sample rows from `Ref_Product_Categories`: (Herbs, Herbs, Handful ), (Seeds, Seeds, Weight - pound,kilo.), (Spices, Spices, Weight - pound,kilo.), CREATE TABLE `Characteristics` ( characteristic_id INTEGER, characteristic_type_code VARCHAR(15) REFERENCES Ref_Characteristic_Types(characteristic_type_code), characteristic_data_type VARCHAR(10), characteristic_name VARCHAR(80), other_characteristic_details VARCHAR(255) ); Sample rows from `Characteristics`: (1, Grade, numquam, slow, None), (2, Grade, doloribus, fast, None), (3, Purity, rem, warm, None), CREATE TABLE `Products` ( product_id INTEGER, color_code VARCHAR(15) REFERENCES Ref_Colors(color_code), product_category_code VARCHAR(15) REFERENCES Ref_Product_Categories(product_category_code), product_name VARCHAR(80), typical_buying_price VARCHAR(20), typical_selling_price VARCHAR(20), product_description VARCHAR(255), other_product_details VARCHAR(255) ); Sample rows from `Products`: (1, 4, Spices, cumin, , 2878.3, et, None), (2, 2, Spices, peper, 352447.2874677, 1892070.2803543, rerum, None), (3, 9, Herbs, basil, 503.8431967, 0.1859512, officia, None), CREATE TABLE `Product_Characteristics` ( product_id INTEGER REFERENCES Products(product_id), characteristic_id INTEGER REFERENCES Characteristics(characteristic_id), product_characteristic_value VARCHAR(50) ); Sample rows from `Product_Characteristics`: (13, 13, low), (11, 2, low), (5, 15, low), ",
        "output": "SELECT product_name FROM products WHERE product_category_code  =  \"Spices\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the last name of the professor whose office is located in DRE 102, and when were they hired? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT t1.emp_lname ,  t1.emp_hiredate FROM employee as t1 JOIN professor as t2 ON t1.emp_num  =  t2.emp_num WHERE t2.prof_office  =  'DRE 102'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show all card type codes and the number of customers holding cards in each type. ###filtered_database_schema: CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 6, 338, Regular), (2, 14, 562, VIP), (3, 9, 162, VIP), CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(20), customer_last_name VARCHAR(20), customer_address VARCHAR(255), customer_phone VARCHAR(255), customer_email VARCHAR(255), other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Aniyah, Feest, 55975 Theodore Estates Lake Brody, VT 57078, (673)872-5338, fahey.dorian@example.com, None), (2, Susie, Wiza, 6478 Moen Isle Suite 910 Schimmelmouth, VT 96364-4898, 679-845-8645x94312, idickinson@example.com, None), (3, Marcel, Brekke, 1965 Abernathy Plains Port Lilla, LA 44867, 1-511-656-6664, nichole.rodriguez@example.com, None), CREATE TABLE `Customers_Cards` ( card_id INTEGER, customer_id INTEGER, card_type_code VARCHAR(15), card_number VARCHAR(80), date_valid_from DATETIME, date_valid_to DATETIME, other_card_details VARCHAR(255) ); Sample rows from `Customers_Cards`: (1, 14, Credit, 4560596484842, 2011-04-17 09:05:28, 2018-03-07 17:06:19, 5567915676420343), (2, 9, Credit, 4859448397570735, 2012-05-22 02:05:41, 2018-02-25 15:43:32, 4539333582760), (3, 6, Debit, 348237249146948, 2014-08-01 14:26:45, 2018-03-24 15:29:00, 4916210554814), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, previous_transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), card_id INTEGER REFERENCES Customers_Cards(card_id), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DOUBLE, transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 925, 15, 1, Payment, 2018-03-24 06:41:41, 1701.23, None, None), (2, 494, 3, 2, Refund, 2018-03-24 12:08:55, 1931.76, None, None), (3, 642, 4, 3, Payment, 2018-03-24 09:08:27, 486.56, None, None), ",
        "output": "SELECT card_type_code ,  COUNT(DISTINCT customer_id) FROM customers_cards GROUP BY card_type_code"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the most common nationality of pilots. ###filtered_database_schema: CREATE TABLE `aircraft` ( Aircraft_ID INT PRIMARY KEY, Order_Year INT, Manufacturer TEXT, Model TEXT, Fleet_Series TEXT, Powertrain TEXT, Fuel_Propulsion TEXT ); Sample rows from `aircraft`: (1, 1992, Gillig, Phantom (High Floor), 444-464 (21), DD S50EGR Allison WB-400R, Diesel), (2, 1996, Gillig, Phantom (High Floor), 465-467 (3), DD S50 Allison WB-400R, Diesel), (3, 1998, Gillig, Phantom (High Floor), 468-473 (6), DD S50 Allison WB-400R, Diesel), CREATE TABLE `pilot` ( Pilot_ID INT PRIMARY KEY, Pilot_name TEXT, Rank INT, Age INT, Nationality TEXT, Position TEXT, Join_Year INT, Team TEXT ); Sample rows from `pilot`: (1, Patrick O'Bryant, 13, 33, United States, Center Team, 2009, Bradley), (2, Jermaine O'Neal, 6, 40, United States, Forward-Center Team, 2008, Eau Claire High School), (3, Dan O'Sullivan, 45, 37, United States, Center Team, 1999, Fordham), CREATE TABLE `pilot_record` ( Record_ID INT, Pilot_ID INT PRIMARY KEY REFERENCES pilot(Pilot_ID), Aircraft_ID INT PRIMARY KEY REFERENCES aircraft(Aircraft_ID), Date TEXT PRIMARY KEY ); Sample rows from `pilot_record`: (1, 1, 1, 2003/01/04), (2, 2, 1, 2004/01/04), (3, 1, 4, 2005/01/04), ",
        "output": "SELECT nationality FROM pilot GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What destination has the fewest number of flights? ###filtered_database_schema: CREATE TABLE `flight` ( flno number(4,0) PRIMARY KEY, origin varchar2(20), destination varchar2(20), distance number(6,0), departure_date date, arrival_date date, price number(7,2), aid number(9,0) REFERENCES aircraft(aid) ); Sample rows from `flight`: (99, Los Angeles, Washington D.C., 2308, 04/12/2005 09:30, 04/12/2005 09:40, 235.98, 1), (13, Los Angeles, Chicago, 1749, 04/12/2005 08:45, 04/12/2005 08:45, 220.98, 3), (346, Los Angeles, Dallas, 1251, 04/12/2005 11:50, 04/12/2005 07:05, 182, 2), CREATE TABLE `aircraft` ( aid number(9,0) PRIMARY KEY, name varchar2(30), distance number(6,0) ); Sample rows from `aircraft`: (1, Boeing 747-400, 8430), (2, Boeing 737-800, 3383), (3, Airbus A340-300, 7120), CREATE TABLE `employee` ( eid number(9,0) PRIMARY KEY, name varchar2(30), salary number(10,2) ); Sample rows from `employee`: (242518965, James Smith, 120433), (141582651, Mary Johnson, 178345), (11564812, John Williams, 153972), CREATE TABLE `certificate` ( eid number(9,0) PRIMARY KEY REFERENCES employee(eid), aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid) ); Sample rows from `certificate`: (11564812, 2), (11564812, 10), (90873519, 6), ",
        "output": "SELECT destination FROM flight GROUP BY destination ORDER BY COUNT(*) LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the location of the party with the most hosts? ###filtered_database_schema: CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Party_Theme TEXT, Location TEXT, First_year TEXT, Last_year TEXT, Number_of_hosts INT ); Sample rows from `party`: (1, Spring, Hemkade 48 Zaandam, 2000, 2001, 5), (2, Club Q-BASE, Hemkade 48 Zaandam, 2002, 2002, 23), (3, Hardcore Resurrection, Various locations, 2000, 2003, 4), CREATE TABLE `host` ( Host_ID INT PRIMARY KEY, Name TEXT, Nationality TEXT, Age TEXT ); Sample rows from `host`: (1, Austin Daye, United States, 43), (2, Lloyd Daniels, United States, 37), (3, Kornel David, Hungary, 31), CREATE TABLE `party_host` ( Party_ID INT PRIMARY KEY REFERENCES party(Party_ID), Host_ID INT PRIMARY KEY REFERENCES host(Host_ID), Is_Main_in_Charge bool ); Sample rows from `party_host`: (1, 1, T), (8, 7, T), (6, 10, F), ",
        "output": "SELECT location FROM party ORDER BY number_of_hosts DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the school color of the school that has the largest enrollment. ###filtered_database_schema: CREATE TABLE `school` ( School_ID INT PRIMARY KEY, School TEXT, Location TEXT, Enrollment REAL, Founded REAL, Denomination TEXT, Boys_or_Girls TEXT, Day_or_Boarding TEXT, Year_Entered_Competition REAL, School_Colors TEXT ); Sample rows from `school`: (1, St Aloysius' College, Milsons Point, 1200.0, 1879.0, Catholic, Boys, Day, 1929.0, Royal Blue and Gold), (2, Barker College, Hornsby, 2300.0, 1890.0, Anglican, Boys only to Yr 9 Co-ed Year 10 to 12, Day & Boarding, 1929.0, Red & Blue), (3, Cranbrook School, Bellevue Hill, 1000.0, 1918.0, Anglican, Boys, Day & Boarding, 1929.0, Red, White & Blue), CREATE TABLE `school_details` ( School_ID INT PRIMARY KEY REFERENCES school(School_ID), Nickname TEXT, Colors TEXT, League TEXT, Class TEXT, Division TEXT ); Sample rows from `school_details`: (1, Tigers, Blue and Yellow, DSHA, Flight A, Division 1), (2, Auks, Dark Green and White, DSHA, Flight B, Division 3), (3, Buccaneers, Garnet and White, DSHA, Fight A, Division 1), CREATE TABLE `school_performance` ( School_Id INT PRIMARY KEY REFERENCES school(School_ID), School_Year TEXT PRIMARY KEY, Class_A TEXT, Class_AA TEXT ); Sample rows from `school_performance`: (1, 1987-88, Yantis, Blanco), (1, 1988-89, Happy, Blanco), (1, 1989-90, Skidmore-Tynan, Bishop), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Team TEXT, Age INT, Position TEXT, School_ID INT REFERENCES school(School_ID) ); Sample rows from `player`: (1, Timothy Beckham, Tampa Bay Devil Rays, 15, Shortstop, 1), (2, Pedro Álvarez, Pittsburgh Pirates, 14, Third baseman, 2), (3, Eric Hosmer, Kansas City Royals, 16, First Baseman, 1), ",
        "output": "SELECT school_colors FROM school ORDER BY enrollment DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the number of buildings with a height above the average or a number of floors above the average. ###filtered_database_schema: CREATE TABLE `building` ( building_id TEXT PRIMARY KEY, Name TEXT, Street_address TEXT, Years_as_tallest TEXT, Height_feet INT, Floors INT ); Sample rows from `building`: (0, Citizens Bank Building, 701 North Franklin Street, 1913–1915, 145, 12), (1, Tampa City Hall, 315 John F. Kennedy Boulevard, 1915–1926, 160, 10), (2, Floridan Hotel, 905 Franklin Street, 1926–1966, 204, 17), CREATE TABLE `Institution` ( Institution_id TEXT PRIMARY KEY, Institution TEXT, Location TEXT, Founded REAL, Type TEXT, Enrollment INT, Team TEXT, Primary_Conference TEXT, building_id TEXT REFERENCES building(building_id) ); Sample rows from `Institution`: (0, Ave Maria University, Ave Maria, Florida, 1998.0, Private, 1200, Gyrenes, The Sun, 1), (1, Dakota State University, Madison, South Dakota, 1881.0, Public, 3102, Trojans, none, 1), (2, Edward Waters College, Jacksonville, Florida, 1866.0, Private, 800, Tigers, Gulf Coast (GCAC), 3), CREATE TABLE `protein` ( common_name TEXT PRIMARY KEY, protein_name TEXT, divergence_from_human_lineage REAL, accession_number TEXT, sequence_length REAL, sequence_identity_to_human_protein TEXT, Institution_id TEXT REFERENCES Institution(Institution_id) ); Sample rows from `protein`: (Tropical Clawed Frog, uncharacterized protein C20orf117-like, 371.2, XP_002942331.1, 1584.0, 39%, 1), (purple sea urchin, uncharacterized protein LOC578090, 742.9, XP_783370.2, 1587.0, 47%, 3), (body louse, Centromeric protein E, putative, 782.7, XP_002429877.1, 2086.0, 30%, 5), ",
        "output": "SELECT COUNT(*) FROM building WHERE height_feet  >  (SELECT AVG(height_feet) FROM building) OR floors  >  (SELECT AVG(floors) FROM building)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many papers in ACL 2015 ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(DISTINCT t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"ACL\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: springfield is in what state ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the time of elimination for the wrestler with the most days held? ###filtered_database_schema: CREATE TABLE `wrestler` ( Wrestler_ID INT PRIMARY KEY, Name TEXT, Reign TEXT, Days_held TEXT, Location TEXT, Event TEXT ); Sample rows from `wrestler`: (1, Rey Misterio Sr., 1, 344, Tijuana , Mexico, Live event), (2, Fishman, 1, 113, Tijuana , Mexico, Live event), (3, Villaño IV, 1, 1285, Tijuana , Mexico, Live event), CREATE TABLE `Elimination` ( Elimination_ID TEXT PRIMARY KEY, Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID), Team TEXT, Eliminated_By TEXT, Elimination_Move TEXT, Time TEXT ); Sample rows from `Elimination`: (1, 1, Team Orton, Punk, Go To Sleep, 00:11), (2, 2, Team Batista, Benjamin, Paydirt, 07:38), (3, 4, Team Batista, Orton, Rope hung DDT, 10:45), ",
        "output": "SELECT t1.time FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id ORDER BY t2.days_held DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of actors and the musicals that they are in? ###filtered_database_schema: CREATE TABLE `musical` ( Musical_ID INT PRIMARY KEY, Name TEXT, Year INT, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT ); Sample rows from `musical`: (1, The Phantom of the Opera, 1986, Tony Award, Best Book of a Musical, Bob Fosse, Nominated), (2, Les Misérables, 1986, Tony Award, Best Performance by a Leading Actor in a Musical, Cleavant Derricks, Nominated), (3, Wicked, 1986, Tony Award, Best Direction of a Musical, Bob Fosse, Nominated), CREATE TABLE `actor` ( Actor_ID INT PRIMARY KEY, Name TEXT, Musical_ID INT REFERENCES actor(Actor_ID), Character TEXT, Duration TEXT, age INT ); Sample rows from `actor`: (1, Ray Meagher, 1, Alf Stewart, 1988—, 26), (2, Tom Oliver, 1, Lou Carpenter, 1988, 1992—, 22), (3, Lynne McGranger, 2, Irene Roberts, 1993—, 21), ",
        "output": "SELECT t1.name ,  t2.name FROM actor as t1 JOIN musical as t2 ON t1.musical_id  =  t2.musical_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average gpa of the students enrolled in the course with code ACCT-211? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT AVG(t2.stu_gpa) FROM enroll as t1 JOIN student as t2 ON t1.stu_num  =  t2.stu_num JOIN CLasS as t3 ON t1.class_code  =  t3.class_code WHERE t3.crs_code  =  'ACCT-211'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all the Japanese constructors that have earned more than 5 points? ###filtered_database_schema: CREATE TABLE `circuits` ( circuitId INTEGER, circuitRef TEXT, name TEXT, location TEXT, country TEXT, lat REAL, lng REAL, alt TEXT, url TEXT ); Sample rows from `circuits`: (1, albert_park, Albert Park Grand Prix Circuit, Melbourne, Australia, -37.8497, 144.968, 10, http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit), (2, sepang, Sepang International Circuit, Kuala Lumpur, Malaysia, 2.76083, 101.738, , http://en.wikipedia.org/wiki/Sepang_International_Circuit), (3, bahrain, Bahrain International Circuit, Sakhir, Bahrain, 26.0325, 50.5106, , http://en.wikipedia.org/wiki/Bahrain_International_Circuit), CREATE TABLE `races` ( raceId INTEGER, year INTEGER, round INTEGER, circuitId INTEGER REFERENCES circuits(circuitId), name TEXT, date TEXT, time TEXT, url TEXT ); Sample rows from `races`: (1, 2009, 1, 1, Australian Grand Prix, 2009-03-29, 06:00:00, http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix), (2, 2009, 2, 2, Malaysian Grand Prix, 2009-04-05, 09:00:00, http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix), (3, 2009, 3, 17, Chinese Grand Prix, 2009-04-19, 07:00:00, http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix), CREATE TABLE `drivers` ( driverId INTEGER, driverRef TEXT, number TEXT, code TEXT, forename TEXT, surname TEXT, dob TEXT, nationality TEXT, url TEXT ); Sample rows from `drivers`: (1, hamilton, 44, HAM, Lewis, Hamilton, 07/01/1985, British, http://en.wikipedia.org/wiki/Lewis_Hamilton), (2, heidfeld, , HEI, Nick, Heidfeld, 10/05/1977, German, http://en.wikipedia.org/wiki/Nick_Heidfeld), (3, rosberg, 6, ROS, Nico, Rosberg, 27/06/1985, German, http://en.wikipedia.org/wiki/Nico_Rosberg), CREATE TABLE `status` ( statusId INTEGER, status TEXT ); Sample rows from `status`: (1, Finished), (2, Disqualified), (3, Accident), CREATE TABLE `seasons` ( year INTEGER, url TEXT ); Sample rows from `seasons`: (1950, http://en.wikipedia.org/wiki/1950_Formula_One_season), (1951, http://en.wikipedia.org/wiki/1951_Formula_One_season), (1952, http://en.wikipedia.org/wiki/1952_Formula_One_season), CREATE TABLE `constructors` ( constructorId INTEGER, constructorRef TEXT, name TEXT, nationality TEXT, url TEXT ); Sample rows from `constructors`: (1, mclaren, McLaren, British, http://en.wikipedia.org/wiki/McLaren), (2, bmw_sauber, BMW Sauber, German, http://en.wikipedia.org/wiki/BMW_Sauber), (3, williams, Williams, British, http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering), CREATE TABLE `constructorStandings` ( constructorStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `constructorStandings`: (1, 18, 1, 14.0, 1, 1, 1), (2, 18, 2, 8.0, 3, 3, 0), (3, 18, 3, 9.0, 2, 2, 0), CREATE TABLE `results` ( resultId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, grid INTEGER, position TEXT, positionText TEXT, positionOrder INTEGER, points REAL, laps TEXT, time TEXT, milliseconds TEXT, fastestLap TEXT, rank TEXT, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId INTEGER ); Sample rows from `results`: (1, 18, 1, 1, 22, 1, 1, 1, 1, 10.0, 58, 34:50.6, 5690616, 39, 2, 01:27.5, 218.3, 1), (2, 18, 2, 2, 3, 5, 2, 2, 2, 8.0, 58, 5.478, 5696094, 41, 3, 01:27.7, 217.586, 1), (3, 18, 3, 3, 7, 7, 3, 3, 3, 6.0, 58, 8.163, 5698779, 41, 5, 01:28.1, 216.719, 1), CREATE TABLE `driverStandings` ( driverStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `driverStandings`: (1, 18, 1, 10.0, 1, 1, 1), (2, 18, 2, 8.0, 2, 2, 0), (3, 18, 3, 6.0, 3, 3, 0), CREATE TABLE `constructorResults` ( constructorResultsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, status TEXT ); Sample rows from `constructorResults`: (1, 18, 1, 14.0, NULL), (2, 18, 2, 8.0, NULL), (3, 18, 3, 9.0, NULL), CREATE TABLE `qualifying` ( qualifyId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, position INTEGER, q1 TEXT, q2 TEXT, q3 TEXT ); Sample rows from `qualifying`: (1, 18, 1, 1, 22, 1, 1:26.572, 1:25.187, 1:26.714), (2, 18, 9, 2, 4, 2, 1:26.103, 1:25.315, 1:26.869), (3, 18, 5, 1, 23, 3, 1:25.664, 1:25.452, 1:27.079), CREATE TABLE `pitStops` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), stop INTEGER PRIMARY KEY, lap INTEGER, time TEXT, duration TEXT, milliseconds INTEGER ); CREATE TABLE `lapTimes` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), lap INTEGER PRIMARY KEY, position INTEGER, time TEXT, milliseconds INTEGER ); ",
        "output": "SELECT t1.name FROM constructors as t1 JOIN constructorstandings as t2 ON t1.constructorid = t2.constructorid WHERE t1.nationality = \"Japanese\" AND t2.points > 5"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: When did Peter Mertens and Dina Barbian collaborate ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return names of songs in volumes that are by artists that are at least 32 years old. ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Artist TEXT, Age INT, Famous_Title TEXT, Famous_Release_date TEXT ); Sample rows from `artist`: (1, Gorgoroth, 34, Bergen 1996, November 2007), (2, Ophiolatry, 35, Transmutation, January 21, 2008), (3, Ophiolatry, 22, Antievangelistical Process (re-release), 2009), CREATE TABLE `volume` ( Volume_ID INT PRIMARY KEY, Volume_Issue TEXT, Issue_Date TEXT, Weeks_on_Top REAL, Song TEXT, Artist_ID INT REFERENCES artist(Artist_ID) ); Sample rows from `volume`: (1, 45:14 §, 27 December 1986 - 10 January, 3.0, The Way, 1), (2, 45:15, 17 January, 1.0, Everybody Have Fun Tonight , 2), (3, 45:16, 24 January, 1.0, Walk Like an Egyptian , 1), CREATE TABLE `music_festival` ( ID INT PRIMARY KEY, Music_Festival TEXT, Date_of_ceremony TEXT, Category TEXT, Volume INT REFERENCES volume(Volume_ID), Result TEXT ); Sample rows from `music_festival`: (1, 34th England Academy Prize, 18 February 2011, Best Song, 1, Nominated), (2, 34th Japan Academy Prize, 18 February 2011, Best Lyrics, 2, Nominated), (3, 34th European Academy Prize, 18 February 2011, Best Song, 3, Awarded), ",
        "output": "SELECT t2.song FROM artist as t1 JOIN volume as t2 ON t1.artist_id  =  t2.artist_id WHERE t1.age  >=  32"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the average room count of the apartments that have booking status code \"Provisional\". ###filtered_database_schema: CREATE TABLE `Apartment_Buildings` ( building_id INTEGER PRIMARY KEY, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80) ); Sample rows from `Apartment_Buildings`: (133, Normandie Court, Normandie Court, Studio, 7950 Casper Vista Apt. 176 Marquiseberg, CA 70496, Emma, (948)040-1064x387), (153, Mercedes House, Mercedes House, Studio, 354 Otto Villages Charliefort, VT 71664, Brenden, 915-617-2408x832), (191, The Eugene, The Eugene, Flat, 71537 Gorczany Inlet Wisozkburgh, AL 08256, Melyssa, (609)946-0491), CREATE TABLE `Apartments` ( apt_id INTEGER PRIMARY KEY, building_id INTEGER REFERENCES Apartment_Buildings(building_id), apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5) ); Sample rows from `Apartments`: (1, 808, Flat, Suite 645, 1, 3, 7), (2, 624, Flat, Apt. 585, 2, 4, 5), (3, 225, Studio, Apt. 908, 1, 6, 7), CREATE TABLE `Apartment_Facilities` ( apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id), facility_code CHAR(15) PRIMARY KEY ); Sample rows from `Apartment_Facilities`: (1, Boardband), (2, Boardband), (3, Gym), CREATE TABLE `Guests` ( guest_id INTEGER PRIMARY KEY, gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME ); Sample rows from `Guests`: (1, Male, Kip, DuBuque, 1995-11-04 07:09:57), (2, Unknown, Rebeca, Runolfsdottir, 1974-05-12 21:53:58), (3, Female, Keon, Treutel, 1974-08-20 09:28:05), CREATE TABLE `Apartment_Bookings` ( apt_booking_id INTEGER PRIMARY KEY, apt_id INTEGER REFERENCES Apartments(apt_id), guest_id INTEGER REFERENCES Guests(guest_id), booking_status_code CHAR(15), booking_start_date DATETIME, booking_end_date DATETIME ); Sample rows from `Apartment_Bookings`: (258, 10, 2, Provisional, 2016-09-26 17:13:49, 2017-10-07 11:38:48), (279, 15, 15, Provisional, 2016-04-01 06:28:08, 2017-10-25 11:08:42), (337, 8, 5, Provisional, 2017-03-13 16:20:14, 2018-02-19 16:59:08), CREATE TABLE `View_Unit_Status` ( apt_id INTEGER REFERENCES Apartments(apt_id), apt_booking_id INTEGER REFERENCES Apartment_Bookings(apt_booking_id), status_date DATETIME PRIMARY KEY, available_yn BIT ); Sample rows from `View_Unit_Status`: (11, 920, 1970-09-28 10:24:29, 1), (15, 575, 1972-03-23 22:55:53, 1), (15, 924, 1973-10-28 04:30:14, 1), ",
        "output": "SELECT AVG(room_count) FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  \"Provisional\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List all country and league names. ###filtered_database_schema: CREATE TABLE `Player_Attributes` ( id INTEGER, player_fifa_api_id INTEGER REFERENCES Player(player_fifa_api_id), player_api_id INTEGER REFERENCES Player(player_api_id), date TEXT, overall_rating INTEGER, potential INTEGER, preferred_foot TEXT, attacking_work_rate TEXT, defensive_work_rate TEXT, crossing INTEGER, finishing INTEGER, heading_accuracy INTEGER, short_passing INTEGER, volleys INTEGER, dribbling INTEGER, curve INTEGER, free_kick_accuracy INTEGER, long_passing INTEGER, ball_control INTEGER, acceleration INTEGER, sprint_speed INTEGER, agility INTEGER, reactions INTEGER, balance INTEGER, shot_power INTEGER, jumping INTEGER, stamina INTEGER, strength INTEGER, long_shots INTEGER, aggression INTEGER, interceptions INTEGER, positioning INTEGER, vision INTEGER, penalties INTEGER, marking INTEGER, standing_tackle INTEGER, sliding_tackle INTEGER, gk_diving INTEGER, gk_handling INTEGER, gk_kicking INTEGER, gk_positioning INTEGER, gk_reflexes INTEGER ); Sample rows from `Player_Attributes`: (1, 218353, 505942, 2016-02-18 00:00:00, 67, 71, right, medium, medium, 49, 44, 71, 61, 44, 51, 45, 39, 64, 49, 60, 64, 59, 47, 65, 55, 58, 54, 76, 35, 71, 70, 45, 54, 48, 65, 69, 69, 6, 11, 10, 8, 8), (2, 218353, 505942, 2015-11-19 00:00:00, 67, 71, right, medium, medium, 49, 44, 71, 61, 44, 51, 45, 39, 64, 49, 60, 64, 59, 47, 65, 55, 58, 54, 76, 35, 71, 70, 45, 54, 48, 65, 69, 69, 6, 11, 10, 8, 8), (3, 218353, 505942, 2015-09-21 00:00:00, 62, 66, right, medium, medium, 49, 44, 71, 61, 44, 51, 45, 39, 64, 49, 60, 64, 59, 47, 65, 55, 58, 54, 76, 35, 63, 41, 45, 54, 48, 65, 66, 69, 6, 11, 10, 8, 8), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (Team, 103916), (Country, 51958), (League, 51958), CREATE TABLE `Player` ( id INTEGER, player_api_id INTEGER PRIMARY KEY, player_name TEXT, player_fifa_api_id INTEGER PRIMARY KEY, birthday TEXT, height INTEGER, weight INTEGER ); Sample rows from `Player`: (1, 505942, Aaron Appindangoye, 218353, 1992-02-29 00:00:00, 182.88, 187), (2, 155782, Aaron Cresswell, 189615, 1989-12-15 00:00:00, 170.18, 146), (3, 162549, Aaron Doran, 186170, 1991-05-13 00:00:00, 170.18, 163), CREATE TABLE `League` ( id INTEGER, country_id INTEGER REFERENCES Country(id), name TEXT PRIMARY KEY ); Sample rows from `League`: (1, 1, Belgium Jupiler League), (1729, 1729, England Premier League), (4769, 4769, France Ligue 1), CREATE TABLE `Country` ( id INTEGER, name TEXT PRIMARY KEY ); Sample rows from `Country`: (1, Belgium), (1729, England), (4769, France), CREATE TABLE `Team` ( id INTEGER, team_api_id INTEGER PRIMARY KEY, team_fifa_api_id INTEGER, team_long_name TEXT, team_short_name TEXT ); Sample rows from `Team`: (1, 9987, 673, KRC Genk, GEN), (2, 9993, 675, Beerschot AC, BAC), (3, 10000, 15005, SV Zulte-Waregem, ZUL), CREATE TABLE `Team_Attributes` ( id INTEGER, team_fifa_api_id INTEGER REFERENCES Team(team_fifa_api_id), team_api_id INTEGER REFERENCES Team(team_api_id), date TEXT, buildUpPlaySpeed INTEGER, buildUpPlaySpeedClass TEXT, buildUpPlayDribbling INTEGER, buildUpPlayDribblingClass TEXT, buildUpPlayPassing INTEGER, buildUpPlayPassingClass TEXT, buildUpPlayPositioningClass TEXT, chanceCreationPassing INTEGER, chanceCreationPassingClass TEXT, chanceCreationCrossing INTEGER, chanceCreationCrossingClass TEXT, chanceCreationShooting INTEGER, chanceCreationShootingClass TEXT, chanceCreationPositioningClass TEXT, defencePressure INTEGER, defencePressureClass TEXT, defenceAggression INTEGER, defenceAggressionClass TEXT, defenceTeamWidth INTEGER, defenceTeamWidthClass TEXT, defenceDefenderLineClass TEXT ); Sample rows from `Team_Attributes`: (1, 434, 9930, 2010-02-22 00:00:00, 60, Balanced, None, Little, 50, Mixed, Organised, 60, Normal, 65, Normal, 55, Normal, Organised, 50, Medium, 55, Press, 45, Normal, Cover), (2, 434, 9930, 2014-09-19 00:00:00, 52, Balanced, 48, Normal, 56, Mixed, Organised, 54, Normal, 63, Normal, 64, Normal, Organised, 47, Medium, 44, Press, 54, Normal, Cover), (3, 434, 9930, 2015-09-10 00:00:00, 47, Balanced, 41, Normal, 54, Mixed, Organised, 54, Normal, 63, Normal, 64, Normal, Organised, 47, Medium, 44, Press, 54, Normal, Cover), ",
        "output": "SELECT t1.name ,  t2.name FROM country as t1 JOIN league as t2 ON t1.id  =  t2.country_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: list papers that used Question Answering ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the types of vocals used in the song \"Demon Kitty Rag\"? ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT COUNT(*) FROM vocals as t1 JOIN songs as t2 ON t1.songid  =  t2.songid WHERE title  =  \"Demon Kitty Rag\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What papers were published in acl in 2012 about Parsing ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the personal name, family name, and author ID of the course author who teaches the most courses? ###filtered_database_schema: CREATE TABLE `Course_Authors_and_Tutors` ( author_id INTEGER, author_tutor_ATB VARCHAR(3), login_name VARCHAR(40), password VARCHAR(40), personal_name VARCHAR(80), middle_name VARCHAR(80), family_name VARCHAR(80), gender_mf VARCHAR(1), address_line_1 VARCHAR(80) ); Sample rows from `Course_Authors_and_Tutors`: (1, 331, jmckenzie, c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b, Cathrine, Ruthie, Grant, 0, 756 Monahan Mews Spinkashire, NJ 64230-5098), (2, 975, heidenreich.ara, 24b0ee84063c3b017ab1839e01b7280f47f7c7c2, Retha, Corene, Armstrong, 0, 98623 Huels Manor Jasttown, DE 31611), (3, 349, clementina29, cdaf6c3483f19e2253659a40a3aab786a3390f78, Darius, Ethyl, Reichel, 0, 99296 Keeling Courts North Audreanne, IL 28272), CREATE TABLE `Students` ( student_id INTEGER, date_of_registration DATETIME, date_of_latest_logon DATETIME, login_name VARCHAR(40), password VARCHAR(10), personal_name VARCHAR(40), middle_name VARCHAR(40), family_name VARCHAR(40) ); Sample rows from `Students`: (1, 2015-07-22 13:32:35, 2017-10-17 22:52:26, annamae.hoppe, db8765bb6f, Wilson, Aubrey, Ward), (2, 2015-07-02 00:21:42, 2017-06-24 22:16:27, wmiller, 35faf8182a, Karson, Luella, Jaskolski), (3, 2015-10-11 03:23:27, 2018-03-10 23:22:23, ahartmann, 8e064ec4e6, Mariela, Brandt, Legros), CREATE TABLE `Subjects` ( subject_id INTEGER, subject_name VARCHAR(120) ); Sample rows from `Subjects`: (1, Computer Science), (2, Arts), (3, Language), CREATE TABLE `Courses` ( course_id INTEGER, author_id INTEGER REFERENCES Course_Authors_and_Tutors(author_id), subject_id INTEGER REFERENCES Subjects(subject_id), course_name VARCHAR(120), course_description VARCHAR(255) ); Sample rows from `Courses`: (1, 8, 1, database, database), (2, 6, 1, advanced database, advanced database), (3, 15, 1, operating system, operating system), CREATE TABLE `Student_Course_Enrolment` ( registration_id INTEGER, student_id INTEGER REFERENCES Students(student_id), course_id INTEGER REFERENCES Courses(course_id), date_of_enrolment DATETIME, date_of_completion DATETIME ); Sample rows from `Student_Course_Enrolment`: (1, 11, 2, 2017-10-09 07:09:02, 2018-02-26 07:48:52), (2, 15, 4, 2017-11-13 12:49:33, 2018-03-04 01:24:56), (3, 10, 8, 2017-10-17 13:50:40, 2018-03-22 02:53:01), CREATE TABLE `Student_Tests_Taken` ( registration_id INTEGER REFERENCES Student_Course_Enrolment(registration_id), date_test_taken DATETIME, test_result VARCHAR(255) ); Sample rows from `Student_Tests_Taken`: (12, 2018-03-25 03:27:16, Fail), (10, 2018-03-25 21:50:22, Pass), (7, 2018-03-21 00:32:25, Pass), ",
        "output": "SELECT t1.personal_name ,  t1.family_name ,  t2.author_id FROM course_authors_and_tutors as t1 JOIN courses as t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name of the technician whose team is not 'NYY'? ###filtered_database_schema: CREATE TABLE `repair` ( repair_ID INT PRIMARY KEY, name TEXT, Launch_Date TEXT, Notes TEXT ); Sample rows from `repair`: (1, Discoverer, 21 Jan 2009, repair Failed. Failed to achieve orbit), (2, Discoverer 1, 28 Feb 2009, First object in polar orbit), (3, Discoverer 3, 03 Jun 2009, repair failed. Failed to achieve orbit), CREATE TABLE `machine` ( Machine_ID INT PRIMARY KEY, Making_Year INT, Class TEXT, Team TEXT, Machine_series TEXT, value_points REAL, quality_rank INT ); Sample rows from `machine`: (1, 1991, 125cc, Hero Sports TS- Honda, RS125, 105.0, 2), (2, 1992, 125cc, Marlboro Pileri - Honda, RS125, 57.0, 1), (3, 1993, 125cc, Marlboro Pileri - Honda, RS125, 129.0, 4), CREATE TABLE `technician` ( technician_id REAL PRIMARY KEY, Name TEXT, Team TEXT, Starting_Year REAL, Age INT ); Sample rows from `technician`: (1.0, Joe Sewell, NYY, 2012.0, 37), (2.0, John Brown, NYY, 2013.0, 36), (3.0, Tony Sewell, CLE, 2005.0, 43), CREATE TABLE `repair_assignment` ( technician_id INT PRIMARY KEY REFERENCES technician(technician_id), repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID), Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID) ); Sample rows from `repair_assignment`: (1, 1, 1), (2, 2, 2), (3, 3, 3), ",
        "output": "SELECT name FROM technician WHERE team != \"NYY\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What was the first paper on deep learning written ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year asC;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of the customer that has been involved in the most policies. ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_Details VARCHAR(255) ); Sample rows from `Customers`: (252, America Jaskolski), (263, Ellsworth Paucek), (334, Mrs. Hanna Willms), CREATE TABLE `Staff` ( Staff_ID INTEGER, Staff_Details VARCHAR(255) ); Sample rows from `Staff`: (406, Clifton), (427, Cathryn), (510, Kaci), CREATE TABLE `Policies` ( Policy_ID INTEGER, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Policy_Type_Code CHAR(15), Start_Date DATETIME, End_Date DATETIME ); Sample rows from `Policies`: (125, 808, Deputy, 2018-02-10 08:56:30, 2018-03-18 09:17:26), (151, 380, Jurisdiction, 2017-12-20 06:02:31, 2017-09-16 22:04:13), (287, 334, Jurisdiction, 2017-03-16 18:16:52, 2017-11-24 06:36:51), CREATE TABLE `Claim_Headers` ( Claim_Header_ID INTEGER, Claim_Status_Code CHAR(15), Claim_Type_Code CHAR(15), Policy_ID INTEGER REFERENCES Policies(Policy_ID), Date_of_Claim DATETIME, Date_of_Settlement DATETIME, Amount_Claimed DECIMAL(20,4), Amount_Piad DECIMAL(20,4) ); Sample rows from `Claim_Headers`: (15, Settled, Handphone Subsidy, 518, 2016-05-31 06:07:11, 2018-02-23 03:46:38, 349.15, 582.03), (24, Disputed, Child Birth, 518, 2016-12-30 21:43:21, 2017-10-08 21:43:14, 318.16, 309.2), (27, Disputed, Overtime Meal Subsidy, 518, 2017-05-01 13:34:43, 2017-11-16 04:06:05, 362.71, 132.97), CREATE TABLE `Claims_Documents` ( Claim_ID INTEGER PRIMARY KEY REFERENCES Claim_Headers(Claim_Header_ID), Document_Type_Code CHAR(15) PRIMARY KEY, Created_by_Staff_ID INTEGER REFERENCES Staff(Staff_ID), Created_Date INTEGER ); Sample rows from `Claims_Documents`: (24, Document, 718, 8), (27, Document, 986, 6), (27, Medical, 427, 8), CREATE TABLE `Claims_Processing_Stages` ( Claim_Stage_ID INTEGER, Next_Claim_Stage_ID INTEGER, Claim_Status_Name VARCHAR(255), Claim_Status_Description VARCHAR(255) ); Sample rows from `Claims_Processing_Stages`: (1, 1, Open, Open a new claim), (3, 1, Close, Close a claim), CREATE TABLE `Claims_Processing` ( Claim_Processing_ID INTEGER, Claim_ID INTEGER REFERENCES Claim_Headers(Claim_Header_ID), Claim_Outcome_Code CHAR(15), Claim_Stage_ID INTEGER, Staff_ID INTEGER REFERENCES Staff(Staff_ID) ); Sample rows from `Claims_Processing`: (118, 28, In progress, 1, 771), (145, 62, In progress, 1, 589), (213, 27, In progress, 1, 589), ",
        "output": "SELECT t2.customer_details FROM policies as t1 JOIN customers as t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show name and distance for all aircrafts. ###filtered_database_schema: CREATE TABLE `flight` ( flno number(4,0) PRIMARY KEY, origin varchar2(20), destination varchar2(20), distance number(6,0), departure_date date, arrival_date date, price number(7,2), aid number(9,0) REFERENCES aircraft(aid) ); Sample rows from `flight`: (99, Los Angeles, Washington D.C., 2308, 04/12/2005 09:30, 04/12/2005 09:40, 235.98, 1), (13, Los Angeles, Chicago, 1749, 04/12/2005 08:45, 04/12/2005 08:45, 220.98, 3), (346, Los Angeles, Dallas, 1251, 04/12/2005 11:50, 04/12/2005 07:05, 182, 2), CREATE TABLE `aircraft` ( aid number(9,0) PRIMARY KEY, name varchar2(30), distance number(6,0) ); Sample rows from `aircraft`: (1, Boeing 747-400, 8430), (2, Boeing 737-800, 3383), (3, Airbus A340-300, 7120), CREATE TABLE `employee` ( eid number(9,0) PRIMARY KEY, name varchar2(30), salary number(10,2) ); Sample rows from `employee`: (242518965, James Smith, 120433), (141582651, Mary Johnson, 178345), (11564812, John Williams, 153972), CREATE TABLE `certificate` ( eid number(9,0) PRIMARY KEY REFERENCES employee(eid), aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid) ); Sample rows from `certificate`: (11564812, 2), (11564812, 10), (90873519, 6), ",
        "output": "SELECT name ,  distance FROM aircraft"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What instruments does the the song \"Le Pop\" use? ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT instrument FROM instruments as t1 JOIN songs as t2 ON t1.songid  =  t2.songid WHERE title  =  \"Le Pop\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name and flag of ships that are not steered by any captain with Midshipman rank. ###filtered_database_schema: CREATE TABLE `captain` ( Captain_ID INT PRIMARY KEY, Name TEXT, Ship_ID INT REFERENCES Ship(Ship_ID), age TEXT, Class TEXT, Rank TEXT ); Sample rows from `captain`: (1, Captain Sir Henry Langford, 1, 40, Third-rate ship of the line, Midshipman), (2, Captain Beves Conway, 2, 54, Third-rate ship of the line, Midshipman), (3, Lieutenant Hugh Bolitho, 3, 43, Cutter, Midshipman), CREATE TABLE `Ship` ( Ship_ID INT PRIMARY KEY, Name TEXT, Type TEXT, Built_Year REAL, Class TEXT, Flag TEXT ); Sample rows from `Ship`: (1, HMS Manxman, Panamax, 1997.0, KR, Panama), (2, HMS Gorgon, Panamax, 1998.0, KR, Panama), (3, HM Cutter Avenger, Panamax, 1997.0, KR, Panama), ",
        "output": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the party email that has used party services the greatest number of times. ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), town_city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 25518 Ortiz Centers, West Stacy, 193, NorthCarolina, USA), (2, 033 Stracke Parkways, Lake Meaghan, 227, Colorado, USA), (3, 269 Flatley Port Suite 062, Breanneberg, 527, NewHampshire, USA), CREATE TABLE `Services` ( service_id INTEGER, service_type_code VARCHAR(15), service_name VARCHAR(80), service_descriptio VARCHAR(255) ); Sample rows from `Services`: (1, Education, Education, Education), (2, Welfare, Health, Welfare), (3, Education, Education, Health), CREATE TABLE `Forms` ( form_id INTEGER, form_type_code VARCHAR(15), service_id INTEGER REFERENCES Services(service_id), form_number VARCHAR(50), form_name VARCHAR(80), form_description VARCHAR(255) ); Sample rows from `Forms`: (1, Basic, 13, 8069, SSN Application, Form for SSN Application), (2, Complex, 9, 2675, Marriage Certificate, Marriage Certificate), (3, Complex, 2, 9837, Divorce Certificate, Divorce Certificate), CREATE TABLE `Individuals` ( individual_id INTEGER, individual_first_name VARCHAR(80), individual_middle_name VARCHAR(80), inidividual_phone VARCHAR(80), individual_email VARCHAR(80), individual_address VARCHAR(255), individual_last_name VARCHAR(80) ); Sample rows from `Individuals`: (1, Oscar, Hosea, 1-925-696-5232, amie.okuneva@example.org, 6956 Lia Plaza, Maggio), (2, Geovanny, Antonia, 075.012.6775x409, jamey.effertz@example.net, 69578 Baylee Prairie, Kerluke), (3, Casper, Mitchell, 1-818-062-2837, brandon.hermiston@example.com, 4555 Hane Orchard, Kutch), CREATE TABLE `Organizations` ( organization_id INTEGER, date_formed DATETIME, organization_name VARCHAR(255), uk_vat_number VARCHAR(20) ); Sample rows from `Organizations`: (1, 2016-08-24 23:52:48, Labour Party, 2157), (2, 2016-10-01 12:42:01, Plaid Cymru, 7459), (3, 2016-10-09 07:22:53, Conservative, 1211), CREATE TABLE `Parties` ( party_id INTEGER, payment_method_code VARCHAR(15), party_phone VARCHAR(80), party_email VARCHAR(80) ); Sample rows from `Parties`: (1, Cheque, 05374656172, enrico09@example.com), (2, Credit Card, 1-525-947-7867x51521, brakus.aliya@example.com), (3, Cheque, 1-606-232-3728x3568, frida57@example.org), CREATE TABLE `Organization_Contact_Individuals` ( individual_id INTEGER PRIMARY KEY REFERENCES Individuals(individual_id), organization_id INTEGER PRIMARY KEY REFERENCES Organizations(organization_id), date_contact_from DATETIME, date_contact_to DATETIME ); Sample rows from `Organization_Contact_Individuals`: (13, 1, 2016-08-16 22:09:11, 2018-03-25 10:27:18), (11, 1, 2017-03-02 00:00:16, 2018-03-06 05:39:43), (10, 3, 2016-08-23 03:24:24, 2018-03-12 07:55:28), CREATE TABLE `Party_Addresses` ( party_id INTEGER PRIMARY KEY REFERENCES Parties(party_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_address_from DATETIME, address_type_code VARCHAR(15), date_address_to DATETIME ); Sample rows from `Party_Addresses`: (10, 8, 2016-04-08 22:40:02, Residence, 2018-02-28 23:14:41), (15, 5, 2016-05-20 23:22:06, Billing, 2018-01-29 16:48:01), (4, 4, 2016-05-14 15:13:30, Delivery, 2018-02-25 19:39:16), CREATE TABLE `Party_Forms` ( party_id INTEGER PRIMARY KEY REFERENCES Parties(party_id), form_id INTEGER PRIMARY KEY REFERENCES Forms(form_id), date_completion_started DATETIME, form_status_code VARCHAR(15), date_fully_completed DATETIME ); Sample rows from `Party_Forms`: (2, 4, 2017-12-17 11:29:47, Completed, 2018-02-11 16:46:10), (15, 4, 2017-12-16 15:25:48, Partially Completed, 2018-02-18 16:09:04), (8, 5, 2017-12-09 21:26:11, Partially Completed, 2018-02-05 16:16:58), CREATE TABLE `Party_Services` ( booking_id INTEGER, customer_id INTEGER REFERENCES Parties(party_id), service_id INTEGER REFERENCES Services(service_id), service_datetime DATETIME, booking_made_date DATETIME ); Sample rows from `Party_Services`: (1, 10, 12, 2018-03-10 22:43:12, 2018-03-23 23:56:51), (2, 14, 11, 2018-03-05 15:06:23, 2018-03-25 11:08:29), (3, 4, 7, 2018-03-08 10:39:29, 2018-03-24 11:09:52), ",
        "output": "SELECT t1.party_email FROM parties as t1 JOIN party_services as t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: When did the first staff for the projects started working? ###filtered_database_schema: CREATE TABLE `Document_Types` ( document_type_code VARCHAR(10) PRIMARY KEY, document_description VARCHAR(255) ); Sample rows from `Document_Types`: (APP, Initial Application), (REG, Regular), CREATE TABLE `Documents` ( document_id INTEGER, document_type_code VARCHAR(10) REFERENCES Document_Types(document_type_code), grant_id INTEGER REFERENCES Grants(grant_id), sent_date DATETIME, response_received_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Documents`: (1, APP, 5, 1986-11-30 07:56:35, 1977-12-01 02:18:53, ), (2, APP, 13, 2004-01-23 11:57:08, 1979-12-08 10:38:07, ), (3, REG, 10, 1999-03-03 12:25:58, 1995-09-12 13:13:48, ), CREATE TABLE `Grants` ( grant_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), grant_amount DECIMAL(19,4), grant_start_date DATETIME, grant_end_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Grants`: (1, 10, 4094.542, 2016-11-20 00:18:51, 2004-10-24 09:09:39, et), (2, 3, 281.2446, 1985-10-09 20:08:49, 1985-06-08 00:22:07, occaecati), (3, 14, 4515947.7015, 1970-09-19 22:53:49, 1989-03-16 18:27:16, et), CREATE TABLE `Organisation_Types` ( organisation_type VARCHAR(10) PRIMARY KEY, organisation_type_description VARCHAR(255) ); Sample rows from `Organisation_Types`: (RES, Research), (SPON, Sponsor), CREATE TABLE `Organisations` ( organisation_id INTEGER, organisation_type VARCHAR(10) REFERENCES Organisation_Types(organisation_type), organisation_details VARCHAR(255) ); Sample rows from `Organisations`: (1, RES, et), (2, RES, eius), (3, RES, impedit), CREATE TABLE `Project_Outcomes` ( project_id INTEGER REFERENCES Projects(project_id), outcome_code VARCHAR(10) REFERENCES Research_Outcomes(outcome_code), outcome_details VARCHAR(255) ); Sample rows from `Project_Outcomes`: (4, Paper, None), (3, Patent, None), (9, Paper, None), CREATE TABLE `Project_Staff` ( staff_id DOUBLE PRIMARY KEY, project_id INTEGER REFERENCES Projects(project_id), role_code VARCHAR(10) REFERENCES Staff_Roles(role_code), date_from DATETIME, date_to DATETIME, other_details VARCHAR(255) ); Sample rows from `Project_Staff`: (0.0, 2, leader, 1981-10-04 22:44:50, 1985-05-30 22:26:30, None), (674810.0, 5, leader, 2003-04-19 15:06:20, 2010-12-08 11:55:36, None), (779.0, 2, researcher, 1981-10-09 21:32:53, 2004-12-16 13:03:36, None), CREATE TABLE `Projects` ( project_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), project_details VARCHAR(255) ); Sample rows from `Projects`: (1, 15, porro), (2, 11, et), (3, 7, sint), CREATE TABLE `Research_Outcomes` ( outcome_code VARCHAR(10) PRIMARY KEY, outcome_description VARCHAR(255) ); Sample rows from `Research_Outcomes`: (Paper, Published Research Paper), (Patent, Research Patent), CREATE TABLE `Research_Staff` ( staff_id INTEGER, employer_organisation_id INTEGER REFERENCES Organisations(organisation_id), staff_details VARCHAR(255) ); Sample rows from `Research_Staff`: (1, 1, quo), (2, 4, est), (3, 5, aspernatur), CREATE TABLE `Staff_Roles` ( role_code VARCHAR(10) PRIMARY KEY, role_description VARCHAR(255) ); Sample rows from `Staff_Roles`: (leader, Project Leader), (researcher, Project Researcher), CREATE TABLE `Tasks` ( task_id INTEGER, project_id INTEGER REFERENCES Projects(project_id), task_details VARCHAR(255), eg Agree Objectives VARCHAR(1) ); Sample rows from `Tasks`: (1, 1, a, None), (2, 2, b, None), (3, 3, c, None), ",
        "output": "SELECT date_from FROM project_staff ORDER BY date_from ASC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the total number of companies? ###filtered_database_schema: CREATE TABLE `company` ( Company_ID INT PRIMARY KEY, Rank INT, Company TEXT, Headquarters TEXT, Main_Industry TEXT, Sales_billion REAL, Profits_billion REAL, Assets_billion REAL, Market_Value REAL ); Sample rows from `company`: (1, 1, ExxonMobil, USA, Oil and gas, 433.5, 41.1, 331.1, 407.4), (2, 3, General Electric, USA, Conglomerate, 147.3, 14.2, 717.2, 213.7), (3, 4, Royal Dutch Shell, Netherlands, Oil and gas, 470.2, 30.9, 340.5, 227.6), CREATE TABLE `gas_station` ( Station_ID INT PRIMARY KEY, Open_Year INT, Location TEXT, Manager_Name TEXT, Vice_Manager_Name TEXT, Representative_Name TEXT ); Sample rows from `gas_station`: (1, 1998, Herne Hill, BrianWingrave, Russell Denman, Clive Burr), (2, 1999, Channel Hill, SimonMarloe, Russell Brown, Rob Jefferies ), (3, 2000, Reading North, Simon Cope Derek Marloe, James Colin , Dave Edwards Roger ), CREATE TABLE `station_company` ( Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID), Company_ID INT PRIMARY KEY REFERENCES company(Company_ID), Rank_of_the_Year INT ); Sample rows from `station_company`: (11, 1, 1), (1, 3, 2), (6, 6, 3), ",
        "output": "SELECT COUNT(*) FROM company"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Give the state that has the most customers. ###filtered_database_schema: CREATE TABLE `Staff` ( staff_id INTEGER, gender VARCHAR(1), first_name VARCHAR(80), last_name VARCHAR(80), email_address VARCHAR(255), phone_number VARCHAR(80) ); Sample rows from `Staff`: (114, 0, Ward, Boehm, marcelle.ritchie@example.com, (379)551-0838x146), (115, 1, Lucie, Lowe, ohintz@example.org, 142-311-6503x206), (116, 0, Dagmar, Erdman, wrau@example.com, 345-656-5571), CREATE TABLE `Customers` ( customer_id INTEGER, customer_type_code VARCHAR(20), address_line_1 VARCHAR(80), address_line_2 VARCHAR(80), town_city VARCHAR(80), state VARCHAR(80), email_address VARCHAR(255), phone_number VARCHAR(80) ); Sample rows from `Customers`: (113, Good Credit Rating, 144 Legros Landing, Apt. 551, Maryamport, Kansas, hsteuber@example.org, 06963347450), (114, Good Credit Rating, 039 Jedidiah Estate Suite 537, Apt. 245, Sauerberg, Hawaii, cayla.satterfield@example.net, 470-803-0244), (115, Good Credit Rating, 92189 Gulgowski Ranch Apt. 683, Apt. 828, Tyreekhaven, Tennessee, vida86@example.com, 997.698.4779x882), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, product_category_code VARCHAR(20), date_product_first_available DATETIME, date_product_discontinued DATETIME, product_name VARCHAR(80), product_description VARCHAR(255), product_price DECIMAL(19,4) ); Sample rows from `Products`: (117, 4, Food, 1988-09-29 17:54:50, 1987-12-20 13:46:16, Chocolate, Handmade chocolate, 2.88), (118, 3, Book, 1974-06-25 12:26:47, 1991-08-20 05:22:31, The Great Gatsby, American novel, 35), (119, 8, Hardware, 1994-12-18 15:13:19, 1997-07-02 18:26:16, Keyboard, Designed for games, 109.99), CREATE TABLE `Complaints` ( complaint_id INTEGER, product_id INTEGER REFERENCES Products(product_id), customer_id INTEGER REFERENCES Customers(customer_id), complaint_outcome_code VARCHAR(20), complaint_status_code VARCHAR(20), complaint_type_code VARCHAR(20), date_complaint_raised DATETIME, date_complaint_closed DATETIME, staff_id INTEGER REFERENCES Staff(staff_id) ); Sample rows from `Complaints`: (1, 117, 120, OK, Closed, Product Failure, 2002-07-18 10:59:35, 1976-04-19 11:03:06, 114), (2, 118, 113, OK, New, Product Unusable, 1973-02-10 22:55:56, 2013-09-14 02:59:10, 120), (3, 119, 114, OK, New, Product Unusable, 2006-10-29 07:08:46, 1995-09-11 14:48:46, 115), ",
        "output": "SELECT state FROM customers GROUP BY state ORDER BY COUNT(*) LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of accounts corresponding to each customer id. ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(50), customer_middle_initial VARCHAR(1), customer_last_name VARCHAR(50), gender VARCHAR(1), email_address VARCHAR(255), login_name VARCHAR(80), login_password VARCHAR(20), phone_number VARCHAR(255), town_city VARCHAR(50), state_county_province VARCHAR(50), country VARCHAR(50) ); Sample rows from `Customers`: (1, Dee, A, Larkin, 1, thora.torphy@example.org, xhartmann, 77789d292604ea04406f, 241.796.1219x37862, North Nellie, WestVirginia, USA), (2, Brennon, H, Weimann, 0, roosevelt.collier@example.org, shayne.lesch, ce97a3e4539347daab96, (943)219-4234x415, South Isabell, Oklahoma, USA), (3, Joesph, K, Schaefer, 0, homenick.ambrose@example.net, feeney.lauriane, a6c7a7064c36b038d402, (488)524-5345, New Nikolas, Arkansas, USA), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 12, 2012-06-27 20:49:56, None), (2, 12, 2012-08-25 07:51:54, None), (3, 8, 2017-11-05 15:32:38, None), CREATE TABLE `Invoices` ( invoice_number INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_date DATETIME ); Sample rows from `Invoices`: (1, 9, 2018-03-01 16:40:48), (2, 9, 2018-03-20 00:21:41), (3, 3, 2018-03-05 08:47:33), CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_account_opened DATETIME, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 8, 2016-07-30 22:22:24, 900, Regular), (2, 3, 2017-05-29 16:45:17, 520, VIP), (3, 8, 2012-05-04 18:50:32, 323, Regular), CREATE TABLE `Product_Categories` ( production_type_code VARCHAR(15) PRIMARY KEY, product_type_description VARCHAR(80), vat_rating DECIMAL(19,4) ); Sample rows from `Product_Categories`: (Food, Food, 15.84), (DVDs, Dvd products, 11.4), (Books, Books, 13.95), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, production_type_code VARCHAR(15) REFERENCES Product_Categories(production_type_code), unit_price DECIMAL(19,4), product_name VARCHAR(80), product_color VARCHAR(20), product_size VARCHAR(20) ); Sample rows from `Products`: (1, 4, Food, 617.95, Coffee Bean, Red, Medium), (2, 4, Books, 558.49, Learning French, Yellow, Medium), (3, 8, Electronics, 563.58, Fans, Black, Medium), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DECIMAL(19,4), transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 13, 12, Payment, 2018-03-15 21:13:57, 613.96, None, None), (2, 9, 1, Payment, 2018-03-13 13:27:46, 368.46, None, None), (3, 6, 1, Refund, 2018-03-03 01:50:25, 1598.25, None, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), product_id INTEGER REFERENCES Products(product_id), product_quantity VARCHAR(50), other_order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 4, 6, None), (2, 4, 10, 7, None), (3, 15, 5, 4, None), CREATE TABLE `Invoice_Line_Items` ( order_item_id INTEGER REFERENCES Order_Items(order_item_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), product_id INTEGER REFERENCES Products(product_id), product_title VARCHAR(80), product_quantity VARCHAR(50), product_price DECIMAL(19,4), derived_product_cost DECIMAL(19,4), derived_vat_payable DECIMAL(19,4), derived_total_cost DECIMAL(19,4) ); Sample rows from `Invoice_Line_Items`: (14, 9, 5, prod_name, 4, 742.37, 191.11, None, 69.82), (3, 9, 15, prod_name, 1, 814.87, 176.29, None, 59.56), (4, 10, 15, prod_name, 8, 943.07, 73.14, None, 59.93), ",
        "output": "SELECT COUNT(*) ,  customer_id FROM accounts GROUP BY customer_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many stations are in Mountain View? ###filtered_database_schema: CREATE TABLE `station` ( id INTEGER, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT ); Sample rows from `station`: (2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013), (3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013), (4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013), CREATE TABLE `status` ( station_id INTEGER REFERENCES station(id), bikes_available INTEGER, docks_available INTEGER, time TEXT ); Sample rows from `status`: (3, 12, 3, 2015-06-02 12:46:02), (3, 12, 3, 2015-06-02 12:47:02), (3, 12, 3, 2015-06-02 12:48:02), CREATE TABLE `trip` ( id INTEGER, duration INTEGER, start_date TEXT, start_station_name TEXT, start_station_id INTEGER, end_date TEXT, end_station_name TEXT, end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER ); Sample rows from `trip`: (900504, 384, 8/21/2015 17:03, Howard at 2nd, 63, 8/21/2015 17:10, San Francisco Caltrain 2 (330 Townsend), 69, 454, Subscriber, 94041), (900505, 588, 8/21/2015 17:03, South Van Ness at Market, 66, 8/21/2015 17:13, San Francisco Caltrain 2 (330 Townsend), 69, 574, Subscriber, 95119), (900506, 196, 8/21/2015 17:04, Market at Sansome, 77, 8/21/2015 17:07, Harry Bridges Plaza (Ferry Building), 50, 636, Subscriber, 94925), CREATE TABLE `weather` ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER ); Sample rows from `weather`: (8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107), (8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107), (8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107), ",
        "output": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Who is the director of the movie \" James Bond \" ? ###filtered_database_schema: CREATE TABLE `actor` ( aid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `copyright` ( id INT PRIMARY KEY, msid INT, cid INT ); CREATE TABLE `cast` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), aid INT REFERENCES actor(aid), role INT ); CREATE TABLE `genre` ( gid INT PRIMARY KEY, genre TEXT ); CREATE TABLE `classification` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), gid INT REFERENCES genre(gid) ); CREATE TABLE `company` ( id INT PRIMARY KEY, name TEXT, country_code TEXT ); CREATE TABLE `director` ( did INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `producer` ( pid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `directed_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), did INT REFERENCES director(did) ); CREATE TABLE `keyword` ( id INT PRIMARY KEY, keyword TEXT ); CREATE TABLE `made_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), pid INT REFERENCES producer(pid) ); CREATE TABLE `movie` ( mid INT PRIMARY KEY, title TEXT, release_year INT, title_aka TEXT, budget TEXT ); CREATE TABLE `tags` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), kid INT REFERENCES keyword(kid) ); CREATE TABLE `tv_series` ( sid INT PRIMARY KEY, title TEXT, release_year INT, num_of_seasons INT, num_of_episodes INT, title_aka TEXT, budget TEXT ); CREATE TABLE `writer` ( wid INT PRIMARY KEY, gender TEXT, name INT, nationality INT, num_of_episodes INT, birth_city TEXT, birth_year INT ); CREATE TABLE `written_by` ( id INT, msid INT REFERENCES copyright(msid), wid INT REFERENCES writer(wid) ); ",
        "output": "SELECT t2.name FROM director as t2 JOIN directed_by as t1 ON t2.did  =  t1.did JOIN movie as t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: who is the most cited author at CVPR ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(DISTINCT t4.citingpaperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid JOIN cite as t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT(DISTINCT t4.citingpaperid) DESC;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of scientists who have not been assigned a project? ###filtered_database_schema: CREATE TABLE `Scientists` ( SSN INT PRIMARY KEY, Name Char(30) ); Sample rows from `Scientists`: (123234877, Michael Rogers), (152934485, Anand Manikutty), (222364883, Carol Smith), CREATE TABLE `Projects` ( Code Char(4) PRIMARY KEY, Name Char(50), Hours INT ); Sample rows from `Projects`: (AeH1, Winds: Studying Bernoullis Principle, 156), (AeH2, Aerodynamics and Bridge Design, 189), (AeH3, Aerodynamics and Gas Mileage, 256), CREATE TABLE `AssignedTo` ( Scientist INT PRIMARY KEY REFERENCES Scientists(SSN), Project char(4) PRIMARY KEY REFERENCES Projects(Code) ); Sample rows from `AssignedTo`: (123234877, AeH1), (152934485, AeH3), (222364883, Ast3), ",
        "output": "SELECT name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM assignedto)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of the county that the delegates on \"Appropriations\" committee belong to? ###filtered_database_schema: CREATE TABLE `county` ( County_Id INT PRIMARY KEY, County_name TEXT, Population REAL, Zip_code TEXT ); Sample rows from `county`: (1, Howard, 21000.0, D21), (2, Baltimore County, 90000.0, D08), (3, Colony, 79000.0, D02), CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Year REAL, Party TEXT, Governor TEXT, Lieutenant_Governor TEXT, Comptroller TEXT, Attorney_General TEXT, US_Senate TEXT ); Sample rows from `party`: (1, 1998.0, Democratic, Peter Vallone, Sandra Frankel, Carl McCall, Eliot Spitzer, Charles Schumer), (2, 1998.0, Liberal, Betsy McCaughey Ross, Jonathan Reiter, Carl McCall, Eliot Spitzer, Charles Schumer), (3, 2002.0, Democratic, Carl McCall, Dennis Mehiel, Alan Hevesi, Eliot Spitzer, (no election)), CREATE TABLE `election` ( Election_ID INT PRIMARY KEY, Counties_Represented TEXT, District INT REFERENCES county(County_Id), Delegate TEXT, Party INT REFERENCES party(Party_ID), First_Elected REAL, Committee TEXT ); Sample rows from `election`: (1, 09.1 9A, 1, Bates, Gail H. Gail H. Bates, 1, 2002.0, Appropriations), (2, 09.1 9A, 1, Miller, Warren E. Warren E. Miller, 1, 2003.0, Economic Matters), (3, 12.1 12A, 2, DeBoy, Steven J. Sr. Steven J. DeBoy, Sr., 2, 2002.0, Appropriations), ",
        "output": "SELECT t1.county_name FROM county as t1 JOIN election as t2 ON t1.county_id  =  t2.district WHERE t2.committee  =  \"Appropriations\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all customers, ordered by account balance? ###filtered_database_schema: CREATE TABLE `bank` ( branch_ID INT PRIMARY KEY, bname varchar(20), no_of_customers INT, city varchar(10), state varchar(20) ); Sample rows from `bank`: (1, morningside, 203, New York City, New York), (2, downtown, 123, Salt Lake City, Utah), (3, broadway, 453, New York City, New York), CREATE TABLE `customer` ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal INT, no_of_loans INT, credit_score INT, branch_ID INT REFERENCES bank(branch_ID), state varchar(20) ); Sample rows from `customer`: (1, Mary, saving, 2000, 2, 30, 2, Utah), (2, Jack, checking, 1000, 1, 20, 1, Texas), (3, Owen, saving, 800000, 0, 210, 3, New York), CREATE TABLE `loan` ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3) REFERENCES customer(Cust_ID), branch_ID varchar(3) REFERENCES bank(branch_ID), amount INT ); Sample rows from `loan`: (1, Mortgages, 1, 1, 2050), (2, Auto, 1, 2, 3000), (3, Business, 3, 3, 5000), ",
        "output": "SELECT cust_name FROM customer ORDER BY acc_bal"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the number of papers in \" University of Michigan \" in Databases area . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT COUNT(DISTINCT t4.title) FROM domain_author as t6 JOIN author as t1 ON t6.aid  =  t1.aid JOIN domain as t3 ON t3.did  =  t6.did JOIN domain_publication as t2 ON t3.did  =  t2.did JOIN organization as t5 ON t5.oid  =  t1.oid JOIN publication as t4 ON t4.pid  =  t2.pid WHERE t3.name  =  \"Databases\" AND t5.name  =  \"University of Michigan\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of the person who has friends with age above 40 but not under age 30? ###filtered_database_schema: CREATE TABLE `Person` ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT ); Sample rows from `Person`: (Alice, 25, new york city, female, student), (Bob, 35, salt lake city, male, engineer), (Zach, 45, austin, male, doctor), CREATE TABLE `PersonFriend` ( name varchar(20) REFERENCES Person(name), friend varchar(20) REFERENCES Person(name), year INTEGER ); Sample rows from `PersonFriend`: (Alice, Bob, 10), (Zach, Dan, 12), (Bob, Zach, 5), ",
        "output": "SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  >  40) EXCEPT SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age  <  30)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average price for products? ###filtered_database_schema: CREATE TABLE `Addresses` ( Address_ID INTEGER PRIMARY KEY, address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 465 Emely Bypass West Mafalda, CO 23309), (2, 669 Carter Trafficway Port Delbert, OK 66249), (3, 38247 Ernser Gateway Suite 442 Bogisichland, VT 71460), CREATE TABLE `Locations` ( Location_ID INTEGER, Other_Details VARCHAR(255) ); Sample rows from `Locations`: (1, Rowe PLC), (2, Ebert, Green and Bogisich), (3, Prohaska LLC), CREATE TABLE `Products` ( Product_ID INTEGER PRIMARY KEY, Product_Type_Code CHAR(15), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4) ); Sample rows from `Products`: (1, Books, Business Policy, 1336.26), (3, Food, Special Dinning, 2894.94), (5, Clothes, Men suits, 3298.84), CREATE TABLE `Parties` ( Party_ID INTEGER, Party_Details VARCHAR(255) ); Sample rows from `Parties`: (3, European People's Party), (4, European Free Alliance), (5, European Alliance for Freedom), CREATE TABLE `Assets` ( Asset_ID INTEGER, Other_Details VARCHAR(255) ); Sample rows from `Assets`: (1, Transportation Cars), (2, Meeting Rooms), (3, Dinning Tables), CREATE TABLE `Channels` ( Channel_ID INTEGER, Other_Details VARCHAR(255) ); Sample rows from `Channels`: (1, 145), (2, 348), (3, 933), CREATE TABLE `Finances` ( Finance_ID INTEGER, Other_Details VARCHAR(255) ); Sample rows from `Finances`: (1, Mutual), (2, Good), (3, Bad), CREATE TABLE `Events` ( Event_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Channel_ID INTEGER, Event_Type_Code CHAR(15), Finance_ID INTEGER REFERENCES Finances(Finance_ID), Location_ID INTEGER REFERENCES Locations(Location_ID) ); Sample rows from `Events`: (1, 3, 12, Trade Show, 2, 13), (2, 15, 13, Press Conferenc, 8, 11), (3, 12, 1, Press Conferenc, 12, 6), CREATE TABLE `Products_in_Events` ( Product_in_Event_ID INTEGER, Event_ID INTEGER REFERENCES Events(Event_ID), Product_ID INTEGER REFERENCES Products(Product_ID) ); Sample rows from `Products_in_Events`: (13, 4, 29), (23, 8, 3), (32, 14, 10), CREATE TABLE `Parties_in_Events` ( Party_ID INTEGER PRIMARY KEY REFERENCES Parties(Party_ID), Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID), Role_Code CHAR(15) ); Sample rows from `Parties_in_Events`: (3, 7, Organizer), (3, 8, Participant), (4, 1, Organizer), CREATE TABLE `Agreements` ( Document_ID INTEGER, Event_ID INTEGER REFERENCES Events(Event_ID) ); Sample rows from `Agreements`: (1, 13), (2, 13), (3, 15), CREATE TABLE `Assets_in_Events` ( Asset_ID INTEGER PRIMARY KEY, Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID) REFERENCES Events(Event_ID) ); Sample rows from `Assets_in_Events`: (1, 4), (1, 5), (1, 9), ",
        "output": "SELECT AVG(product_price) FROM products"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the rooms for members of the faculty who are professors and who live in building NEB? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), CREATE TABLE `Department` ( DNO INTEGER, Division VARCHAR(2), DName VARCHAR(25), Room VARCHAR(5), Building VARCHAR(13), DPhone INTEGER ); Sample rows from `Department`: (10, AS, History of Art, 268, Mergenthaler, 7117), (20, AS, Biology, 144, Mudd, 7330), (30, AS, Chemistry, 113, Remsen, 7429), CREATE TABLE `Member_of` ( FacID INTEGER REFERENCES Faculty(FacID), DNO INTEGER REFERENCES Department(DNO), Appt_Type VARCHAR(15) ); Sample rows from `Member_of`: (7792, 600, Primary), (9210, 520, Primary), (9811, 550, Primary), CREATE TABLE `Course` ( CID VARCHAR(7) PRIMARY KEY, CName VARCHAR(40), Credits INTEGER, Instructor INTEGER REFERENCES Faculty(FacID), Days VARCHAR(5), Hours VARCHAR(11), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Course`: (600.101, COMPUTER LITERACY, 3, 6112, MTW, 3, 600), (600.103, INTRODUCTION TO COMPUTER SCIENCE, 1, 4230, Th, 4, 600), (600.107, INTRO TO PROGRAMMING IN JAVA, 3, 1193, MTW, 3, 600), CREATE TABLE `Minor_in` ( StuID INTEGER REFERENCES Student(StuID), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Minor_in`: (1004, 520), (1005, 550), (1006, 50), CREATE TABLE `Enrolled_in` ( StuID INTEGER REFERENCES Student(StuID), CID VARCHAR(7) REFERENCES Course(CID), Grade VARCHAR(2) REFERENCES Gradeconversion(lettergrade) ); Sample rows from `Enrolled_in`: (1001, 550.681, A-), (1001, 600.303, B), (1001, 600.315, B+), CREATE TABLE `Gradeconversion` ( lettergrade VARCHAR(2) PRIMARY KEY, gradepoint FLOAT ); Sample rows from `Gradeconversion`: (A+, 4.0), (A, 4.0), (A-, 3.7), ",
        "output": "SELECT room FROM faculty WHERE rank  =  \"Professor\" AND building  =  \"NEB\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average number of international passengers for an airport? ###filtered_database_schema: CREATE TABLE `pilot` ( Pilot_Id int(11) PRIMARY KEY, Name varchar(50), Age int(11) ); Sample rows from `pilot`: (1, Prof. Zackery Collins, 23), (2, Katheryn Gorczany IV, 20), (3, Mr. Cristian Halvorson II, 23), CREATE TABLE `aircraft` ( Aircraft_ID int(11) PRIMARY KEY, Aircraft varchar(50), Description varchar(50), Max_Gross_Weight varchar(50), Total_disk_area varchar(50), Max_disk_Loading varchar(50) ); Sample rows from `aircraft`: (1, Robinson R-22, Light utility helicopter, 1,370 lb (635 kg), 497 ft² (46.2 m²), 2.6 lb/ft² (14 kg/m²)), (2, Bell 206B3 JetRanger, Turboshaft utility helicopter, 3,200 lb (1,451 kg), 872 ft² (81.1 m²), 3.7 lb/ft² (18 kg/m²)), (3, CH-47D Chinook, Tandem rotor helicopter, 50,000 lb (22,680 kg), 5,655 ft² (526 m²), 8.8 lb/ft² (43 kg/m²)), CREATE TABLE `match` ( Round REAL PRIMARY KEY, Location TEXT, Country TEXT, Date TEXT, Fastest_Qualifying TEXT, Winning_Pilot TEXT REFERENCES pilot(Pilot_Id), Winning_Aircraft TEXT REFERENCES aircraft(Aircraft_ID) ); Sample rows from `match`: (1.0, Mina' Zayid , Abu Dhabi, United Arab Emirates, March 26–27, Hannes Arch, 1, 1), (2.0, Swan River , Perth, Australia, April 17–18, Paul Bonhomme, 4, 1), (3.0, Flamengo Beach , Rio de Janeiro, Brazil, May 8–9, Hannes Arch, 6, 2), CREATE TABLE `airport` ( Airport_ID INT PRIMARY KEY, Airport_Name TEXT, Total_Passengers REAL, %_Change_2007 TEXT, International_Passengers REAL, Domestic_Passengers REAL, Transit_Passengers REAL, Aircraft_Movements REAL, Freight_Metric_Tonnes REAL ); Sample rows from `airport`: (1, London Heathrow, 67054745.0, 1.5%, 61344438.0, 5562516.0, 147791.0, 478693.0, 1397054.0), (2, London Gatwick, 34205887.0, 2.9%, 30431051.0, 3730963.0, 43873.0, 263653.0, 107702.0), (3, London Stansted, 22360364.0, 6.0%, 19996947.0, 2343428.0, 19989.0, 193282.0, 197738.0), CREATE TABLE `airport_aircraft` ( ID INT, Airport_ID INT PRIMARY KEY REFERENCES airport(Airport_ID), Aircraft_ID INT PRIMARY KEY REFERENCES aircraft(Aircraft_ID) ); Sample rows from `airport_aircraft`: (1, 6, 5), (2, 2, 1), (3, 1, 2), ",
        "output": "SELECT AVG(international_passengers) FROM airport"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show all allergies with type food. ###filtered_database_schema: CREATE TABLE `Allergy_Type` ( Allergy VARCHAR(20) PRIMARY KEY, AllergyType VARCHAR(20) ); Sample rows from `Allergy_Type`: (Eggs, food), (Nuts, food), (Milk, food), CREATE TABLE `Has_Allergy` ( StuID INTEGER REFERENCES Student(StuID), Allergy VARCHAR(20) REFERENCES Allergy_Type(Allergy) ); Sample rows from `Has_Allergy`: (1001, Cat), (1002, Shellfish), (1002, Tree Pollen), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), ",
        "output": "SELECT DISTINCT allergy FROM allergy_type WHERE allergytype  =  \"food\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the names of all genres in alphabetical oder, together with its ratings. ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT g_name ,  rating FROM genre ORDER BY g_name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List all the restaurant rated more than 3.5 ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"restaurant\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: list in alphabetic order all course names and their instructors' names in year 2008. ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT t1.title ,  t3.name FROM course as t1 JOIN teaches as t2 ON t1.course_id  =  t2.course_id JOIN instructor as t3 ON t2.id  =  t3.id WHERE year  =  2008 ORDER BY t1.title"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many architects haven't built a mill before year 1850? ###filtered_database_schema: CREATE TABLE `architect` ( id TEXT PRIMARY KEY, name TEXT, nationality TEXT, gender TEXT ); Sample rows from `architect`: (1, Frank Lloyd Wright, American, male), (2, Frank Gehry, Canadian, male), (3, Zaha Hadid, Iraqi, British, female), CREATE TABLE `bridge` ( architect_id INT REFERENCES architect(id), id INT PRIMARY KEY, name TEXT, location TEXT, length_meters REAL, length_feet REAL ); Sample rows from `bridge`: (1, 1, Xian Ren Qiao (Fairy Bridge), Guangxi , China, 121.0, 400.0), (2, 2, Landscape Arch, Arches National Park , Utah , USA, 88.0, 290.0), (3, 3, Kolob Arch, Zion National Park , Utah , USA, 87.0, 287.0), CREATE TABLE `mill` ( architect_id INT REFERENCES architect(id), id INT PRIMARY KEY, location TEXT, name TEXT, type TEXT, built_year INT, notes TEXT ); Sample rows from `mill`: (1, 1, Coswarem, Le Vieux Molen, Grondzeiler, 1840, Molenechos (Dutch)), (1, 2, Donceel, Moulin Bertrand, Grondzeiler, 1890, Molenechos (Dutch)), (2, 3, Fexhe-le-haut-Clocher, Moulin de Fexhe, Grondzeiler, 1843, Molenechos (Dutch)), ",
        "output": "SELECT COUNT(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many books fall into each category? ###filtered_database_schema: CREATE TABLE `book_club` ( book_club_id INT PRIMARY KEY, Year INT, Author_or_Editor TEXT, Book_Title TEXT, Publisher TEXT, Category TEXT, Result TEXT ); Sample rows from `book_club`: (1, 1989, Michael Nava, Goldenboy, Alyson, Gay M/SF, Won [A ]), (2, 1989, Donald Ward, Death Takes the Stage, St. Martin's Press, Gay M/SF, Nom), (3, 1989, Michael Bishop, Unicorn Mountain, William Morrow, Gay M/SF, Nom), CREATE TABLE `movie` ( movie_id INT PRIMARY KEY, Title TEXT, Year INT, Director TEXT, Budget_million REAL, Gross_worldwide INT ); Sample rows from `movie`: (1, The Boondock Saints, 1999, Troy Duffy, 6.0, 30471), (2, The Big Kahuna, 1999, John Swanbeck, 7.0, 3728888), (3, Storm Catcher, 1999, Anthony Hickox, 5.0, 40500), CREATE TABLE `culture_company` ( Company_name TEXT PRIMARY KEY, Type TEXT, Incorporated_in TEXT, Group_Equity_Shareholding REAL, book_club_id TEXT REFERENCES book_club(book_club_id), movie_id TEXT REFERENCES movie(movie_id) ); Sample rows from `culture_company`: (Culture China, Corporate, China, 18.77, 1, 2), (Culture China Cargo, Joint Venture, China, 49.0, 2, 3), (Culture Hong Kong, Joint Venture, Hong Kong, 60.0, 3, 4), ",
        "output": "SELECT category ,  COUNT(*) FROM book_club GROUP BY category"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many different users wrote some reviews? ###filtered_database_schema: CREATE TABLE `item` ( i_id INTEGER, title varchar(20) ); Sample rows from `item`: (0, pear), (1, orange), (2, apple), CREATE TABLE `review` ( a_id INTEGER PRIMARY KEY, u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), i_id INTEGER PRIMARY KEY REFERENCES item(i_id), rating INTEGER, rank INTEGER ); Sample rows from `review`: (1, 1, 1, 10, 1), (2, 2, 1, 5, 2), (3, 1, 4, 7, 3), CREATE TABLE `useracct` ( u_id INTEGER, name varchar(128) ); Sample rows from `useracct`: (1, Helen), (2, Mark), (3, Terry), CREATE TABLE `trust` ( source_u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), target_u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), trust INTEGER ); Sample rows from `trust`: (1, 2, 10), (1, 3, 6), (2, 4, 8), ",
        "output": "SELECT COUNT(DISTINCT u_id) FROM review"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the number of journals which have papers by \" H. V. Jagadish \" . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT COUNT(DISTINCT t2.name) FROM publication as t4 JOIN journal as t2 ON t4.jid  =  t2.jid JOIN writes as t3 ON t3.pid  =  t4.pid JOIN author as t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name of the youngest captain? ###filtered_database_schema: CREATE TABLE `captain` ( Captain_ID INT PRIMARY KEY, Name TEXT, Ship_ID INT REFERENCES Ship(Ship_ID), age TEXT, Class TEXT, Rank TEXT ); Sample rows from `captain`: (1, Captain Sir Henry Langford, 1, 40, Third-rate ship of the line, Midshipman), (2, Captain Beves Conway, 2, 54, Third-rate ship of the line, Midshipman), (3, Lieutenant Hugh Bolitho, 3, 43, Cutter, Midshipman), CREATE TABLE `Ship` ( Ship_ID INT PRIMARY KEY, Name TEXT, Type TEXT, Built_Year REAL, Class TEXT, Flag TEXT ); Sample rows from `Ship`: (1, HMS Manxman, Panamax, 1997.0, KR, Panama), (2, HMS Gorgon, Panamax, 1998.0, KR, Panama), (3, HM Cutter Avenger, Panamax, 1997.0, KR, Panama), ",
        "output": "SELECT name FROM captain ORDER BY age LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the location and name of the winning aircraft? ###filtered_database_schema: CREATE TABLE `pilot` ( Pilot_Id int(11) PRIMARY KEY, Name varchar(50), Age int(11) ); Sample rows from `pilot`: (1, Prof. Zackery Collins, 23), (2, Katheryn Gorczany IV, 20), (3, Mr. Cristian Halvorson II, 23), CREATE TABLE `aircraft` ( Aircraft_ID int(11) PRIMARY KEY, Aircraft varchar(50), Description varchar(50), Max_Gross_Weight varchar(50), Total_disk_area varchar(50), Max_disk_Loading varchar(50) ); Sample rows from `aircraft`: (1, Robinson R-22, Light utility helicopter, 1,370 lb (635 kg), 497 ft² (46.2 m²), 2.6 lb/ft² (14 kg/m²)), (2, Bell 206B3 JetRanger, Turboshaft utility helicopter, 3,200 lb (1,451 kg), 872 ft² (81.1 m²), 3.7 lb/ft² (18 kg/m²)), (3, CH-47D Chinook, Tandem rotor helicopter, 50,000 lb (22,680 kg), 5,655 ft² (526 m²), 8.8 lb/ft² (43 kg/m²)), CREATE TABLE `match` ( Round REAL PRIMARY KEY, Location TEXT, Country TEXT, Date TEXT, Fastest_Qualifying TEXT, Winning_Pilot TEXT REFERENCES pilot(Pilot_Id), Winning_Aircraft TEXT REFERENCES aircraft(Aircraft_ID) ); Sample rows from `match`: (1.0, Mina' Zayid , Abu Dhabi, United Arab Emirates, March 26–27, Hannes Arch, 1, 1), (2.0, Swan River , Perth, Australia, April 17–18, Paul Bonhomme, 4, 1), (3.0, Flamengo Beach , Rio de Janeiro, Brazil, May 8–9, Hannes Arch, 6, 2), CREATE TABLE `airport` ( Airport_ID INT PRIMARY KEY, Airport_Name TEXT, Total_Passengers REAL, %_Change_2007 TEXT, International_Passengers REAL, Domestic_Passengers REAL, Transit_Passengers REAL, Aircraft_Movements REAL, Freight_Metric_Tonnes REAL ); Sample rows from `airport`: (1, London Heathrow, 67054745.0, 1.5%, 61344438.0, 5562516.0, 147791.0, 478693.0, 1397054.0), (2, London Gatwick, 34205887.0, 2.9%, 30431051.0, 3730963.0, 43873.0, 263653.0, 107702.0), (3, London Stansted, 22360364.0, 6.0%, 19996947.0, 2343428.0, 19989.0, 193282.0, 197738.0), CREATE TABLE `airport_aircraft` ( ID INT, Airport_ID INT PRIMARY KEY REFERENCES airport(Airport_ID), Aircraft_ID INT PRIMARY KEY REFERENCES aircraft(Aircraft_ID) ); Sample rows from `airport_aircraft`: (1, 6, 5), (2, 2, 1), (3, 1, 2), ",
        "output": "SELECT t2.location ,  t1.aircraft FROM aircraft as t1 JOIN match as t2 ON t1.aircraft_ID  =  t2.Winning_aircraft"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: papers by Peter Mertens and Dina Barbian ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show each county along with the number of schools and total enrollment in each county. ###filtered_database_schema: CREATE TABLE `School` ( School_id TEXT PRIMARY KEY, School_name TEXT, Location TEXT, Mascot TEXT, Enrollment INT, IHSAA_Class TEXT, IHSAA_Football_Class TEXT, County TEXT ); Sample rows from `School`: (1, Bremen, Bremen, Lions, 495, AA, AA, 50 Marshall), (2, Culver Community, Culver, Cavaliers, 287, A, A, 50 Marshall), (3, Glenn, Walkerton, Falcons, 605, AAA, AAA, 71 St. Joseph), CREATE TABLE `budget` ( School_id INT PRIMARY KEY REFERENCES School(School_id), Year INT PRIMARY KEY, Budgeted INT, total_budget_percent_budgeted REAL, Invested INT, total_budget_percent_invested REAL, Budget_invested_percent TEXT ); Sample rows from `budget`: (2, 1999, 4979, 2.0, 2134, 2.0, 42.9), (2, 2000, 3666, 2.0, 5840, 2.0, 159.3), (2, 2001, 6803, 2.0, 8335, 2.0, 122.5), CREATE TABLE `endowment` ( endowment_id INT PRIMARY KEY, School_id INT REFERENCES School(School_id), donator_name TEXT, amount REAL ); Sample rows from `endowment`: (1, 1, Monte Plata, 9.51), (2, 2, San José de Ocoa, 9.83), (3, 3, Distrito Nacional, 9.55), ",
        "output": "SELECT county ,  COUNT(*) ,  SUM(enrollment) FROM school GROUP BY county"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many papers are presented in nature communications 2015 ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the locations of schools that do not have any player. ###filtered_database_schema: CREATE TABLE `school` ( School_ID INT PRIMARY KEY, School TEXT, Location TEXT, Enrollment REAL, Founded REAL, Denomination TEXT, Boys_or_Girls TEXT, Day_or_Boarding TEXT, Year_Entered_Competition REAL, School_Colors TEXT ); Sample rows from `school`: (1, St Aloysius' College, Milsons Point, 1200.0, 1879.0, Catholic, Boys, Day, 1929.0, Royal Blue and Gold), (2, Barker College, Hornsby, 2300.0, 1890.0, Anglican, Boys only to Yr 9 Co-ed Year 10 to 12, Day & Boarding, 1929.0, Red & Blue), (3, Cranbrook School, Bellevue Hill, 1000.0, 1918.0, Anglican, Boys, Day & Boarding, 1929.0, Red, White & Blue), CREATE TABLE `school_details` ( School_ID INT PRIMARY KEY REFERENCES school(School_ID), Nickname TEXT, Colors TEXT, League TEXT, Class TEXT, Division TEXT ); Sample rows from `school_details`: (1, Tigers, Blue and Yellow, DSHA, Flight A, Division 1), (2, Auks, Dark Green and White, DSHA, Flight B, Division 3), (3, Buccaneers, Garnet and White, DSHA, Fight A, Division 1), CREATE TABLE `school_performance` ( School_Id INT PRIMARY KEY REFERENCES school(School_ID), School_Year TEXT PRIMARY KEY, Class_A TEXT, Class_AA TEXT ); Sample rows from `school_performance`: (1, 1987-88, Yantis, Blanco), (1, 1988-89, Happy, Blanco), (1, 1989-90, Skidmore-Tynan, Bishop), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Team TEXT, Age INT, Position TEXT, School_ID INT REFERENCES school(School_ID) ); Sample rows from `player`: (1, Timothy Beckham, Tampa Bay Devil Rays, 15, Shortstop, 1), (2, Pedro Álvarez, Pittsburgh Pirates, 14, Third baseman, 2), (3, Eric Hosmer, Kansas City Royals, 16, First Baseman, 1), ",
        "output": "SELECT location FROM school WHERE school_id NOT IN (SELECT school_id FROM player)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in. ###filtered_database_schema: CREATE TABLE `Physician` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), SSN INTEGER ); Sample rows from `Physician`: (1, John Dorian, Staff Internist, 111111111), (2, Elliot Reid, Attending Physician, 222222222), (3, Christopher Turk, Surgical Attending Physician, 333333333), CREATE TABLE `Department` ( DepartmentID INTEGER, Name VARCHAR(30), Head INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Department`: (1, General Medicine, 4), (2, Surgery, 7), (3, Psychiatry, 9), CREATE TABLE `Affiliated_With` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID), PrimaryAffiliation BOOLEAN ); Sample rows from `Affiliated_With`: (1, 1, 1), (2, 1, 1), (3, 1, 0), CREATE TABLE `Procedures` ( Code INTEGER, Name VARCHAR(30), Cost REAL ); Sample rows from `Procedures`: (1, Reverse Rhinopodoplasty, 1500.0), (2, Obtuse Pyloric Recombobulation, 3750.0), (3, Folded Demiophtalmectomy, 4500.0), CREATE TABLE `Trained_In` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code), CertificationDate DATETIME, CertificationExpires DATETIME ); Sample rows from `Trained_In`: (3, 1, 2008-01-01, 2008-12-31), (3, 2, 2008-01-01, 2008-12-31), (3, 5, 2008-01-01, 2008-12-31), CREATE TABLE `Patient` ( SSN INTEGER, Name VARCHAR(30), Address VARCHAR(30), Phone VARCHAR(30), InsuranceID INTEGER, PCP INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Patient`: (100000001, John Smith, 42 Foobar Lane, 555-0256, 68476213, 1), (100000002, Grace Ritchie, 37 Snafu Drive, 555-0512, 36546321, 2), (100000003, Random J. Patient, 101 Omgbbq Street, 555-1204, 65465421, 2), CREATE TABLE `Nurse` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), Registered BOOLEAN, SSN INTEGER ); Sample rows from `Nurse`: (101, Carla Espinosa, Head Nurse, 1, 111111110), (102, Laverne Roberts, Nurse, 1, 222222220), (103, Paul Flowers, Nurse, 0, 333333330), CREATE TABLE `Appointment` ( AppointmentID INTEGER, Patient INTEGER REFERENCES Patient(SSN), PrepNurse INTEGER REFERENCES Nurse(EmployeeID), Physician INTEGER REFERENCES Physician(EmployeeID), Start DATETIME, End DATETIME, ExaminationRoom TEXT ); Sample rows from `Appointment`: (13216584, 100000001, 101, 1, 2008-04-24 10:00, 2008-04-24 11:00, A), (26548913, 100000002, 101, 2, 2008-04-24 10:00, 2008-04-24 11:00, B), (36549879, 100000001, 102, 1, 2008-04-25 10:00, 2008-04-25 11:00, A), CREATE TABLE `Medication` ( Code INTEGER, Name VARCHAR(30), Brand VARCHAR(30), Description VARCHAR(30) ); Sample rows from `Medication`: (1, Procrastin-X, X, N/A), (2, Thesisin, Foo Labs, N/A), (3, Awakin, Bar Laboratories, N/A), CREATE TABLE `Prescribes` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Medication INTEGER PRIMARY KEY REFERENCES Medication(Code), Date DATETIME PRIMARY KEY, Appointment INTEGER REFERENCES Appointment(AppointmentID), Dose VARCHAR(30) ); Sample rows from `Prescribes`: (1, 100000001, 1, 2008-04-24 10:47, 13216584, 5), (9, 100000004, 2, 2008-04-27 10:53, 86213939, 10), (9, 100000004, 2, 2008-04-30 16:53, None, 5), CREATE TABLE `Block` ( BlockFloor INTEGER PRIMARY KEY, BlockCode INTEGER PRIMARY KEY ); Sample rows from `Block`: (1, 1), (1, 2), (1, 3), CREATE TABLE `Room` ( RoomNumber INTEGER, RoomType VARCHAR(30), BlockFloor INTEGER REFERENCES Block(BlockFloor), BlockCode INTEGER REFERENCES Block(BlockCode), Unavailable BOOLEAN ); Sample rows from `Room`: (101, Single, 1, 1, 0), (102, Single, 1, 1, 0), (103, Single, 1, 1, 0), CREATE TABLE `On_Call` ( Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID), BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor), BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode), OnCallStart DATETIME PRIMARY KEY, OnCallEnd DATETIME PRIMARY KEY ); Sample rows from `On_Call`: (101, 1, 1, 2008-11-04 11:00, 2008-11-04 19:00), (101, 1, 2, 2008-11-04 11:00, 2008-11-04 19:00), (102, 1, 3, 2008-11-04 11:00, 2008-11-04 19:00), CREATE TABLE `Stay` ( StayID INTEGER, Patient INTEGER REFERENCES Patient(SSN), Room INTEGER REFERENCES Room(RoomNumber), StayStart DATETIME, StayEnd DATETIME ); Sample rows from `Stay`: (3215, 100000001, 111, 2008-05-01, 2008-05-04), (3216, 100000003, 123, 2008-05-03, 2008-05-14), (3217, 100000004, 112, 2008-05-02, 2008-05-03), CREATE TABLE `Undergoes` ( Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code), Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID), DateUndergoes DATETIME PRIMARY KEY, Physician INTEGER REFERENCES Physician(EmployeeID), AssistingNurse INTEGER REFERENCES Nurse(EmployeeID) ); Sample rows from `Undergoes`: (100000001, 6, 3215, 2008-05-02, 3, 101), (100000001, 2, 3215, 2008-05-03, 7, 101), (100000004, 1, 3217, 2008-05-07, 3, 102), ",
        "output": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  \"John Wen\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which assets did not incur any fault log? List the asset model. ###filtered_database_schema: CREATE TABLE `Third_Party_Companies` ( company_id INTEGER, company_type VARCHAR(5), company_name VARCHAR(255), company_address VARCHAR(255), other_company_details VARCHAR(255) ); Sample rows from `Third_Party_Companies`: (1, Maintenance Contractor, Langworth-Funk, 615 Jacobs Mews, Uganda), (2, Maintenance Contractor, McDermott Group, 873 Conrad Creek Apt. 286, China), (3, Maintenance Contractor, Schuppe-Carroll, 066 Bechtelar Ridge, United Arab Emirates), CREATE TABLE `Maintenance_Contracts` ( maintenance_contract_id INTEGER, maintenance_contract_company_id INTEGER REFERENCES Third_Party_Companies(company_id), contract_start_date DATETIME, contract_end_date DATETIME, other_contract_details VARCHAR(255) ); Sample rows from `Maintenance_Contracts`: (1, 15, 2017-09-13 11:51:29, 2018-03-16 21:21:50, None), (2, 9, 2017-12-18 11:43:16, 2018-03-22 06:00:37, None), (3, 11, 2017-05-06 02:32:19, 2018-03-20 14:02:54, None), CREATE TABLE `Parts` ( part_id INTEGER, part_name VARCHAR(255), chargeable_yn VARCHAR(1), chargeable_amount VARCHAR(20), other_part_details VARCHAR(255) ); Sample rows from `Parts`: (1, top, 0, 4, None), (2, middle, 1, 9, None), (3, package, 1, 9, None), CREATE TABLE `Skills` ( skill_id INTEGER, skill_code VARCHAR(20), skill_description VARCHAR(255) ); Sample rows from `Skills`: (1, ELEC, Electrical), (2, MECH, Mechanical), (3, TV, TV, Video), CREATE TABLE `Staff` ( staff_id INTEGER, staff_name VARCHAR(255), gender VARCHAR(1), other_staff_details VARCHAR(255) ); Sample rows from `Staff`: (1, Audreanne, 1, Manager), (2, Berneice, 1, Manager), (3, Helena, 1, None), CREATE TABLE `Assets` ( asset_id INTEGER, maintenance_contract_id INTEGER REFERENCES Maintenance_Contracts(maintenance_contract_id), supplier_company_id INTEGER REFERENCES Third_Party_Companies(company_id), asset_details VARCHAR(255), asset_make VARCHAR(20), asset_model VARCHAR(20), asset_acquired_date DATETIME, asset_disposed_date DATETIME, other_asset_details VARCHAR(255) ); Sample rows from `Assets`: (1, 2, 2, dell laptop1, PT, 58 ub, 2017-12-25 00:31:27, 2018-03-14 10:50:00, None), (2, 14, 1, dell laptop2, IN, 35 xt, 2018-01-27 00:59:46, 2018-03-20 04:24:09, None), (3, 7, 2, dell laptop3, IT, 63 ok, 2017-09-07 08:13:15, 2018-03-08 20:50:40, Bad condition), CREATE TABLE `Asset_Parts` ( asset_id INTEGER REFERENCES Assets(asset_id), part_id INTEGER REFERENCES Parts(part_id) ); Sample rows from `Asset_Parts`: (5, 3), (3, 3), (10, 1), CREATE TABLE `Maintenance_Engineers` ( engineer_id INTEGER, company_id INTEGER REFERENCES Third_Party_Companies(company_id), first_name VARCHAR(50), last_name VARCHAR(50), other_details VARCHAR(255) ); Sample rows from `Maintenance_Engineers`: (1, 14, Etha, Reinger, Skilled), (2, 2, Clemens, Orn, None), (3, 6, Samanta, Hauck, None), CREATE TABLE `Engineer_Skills` ( engineer_id INTEGER REFERENCES Maintenance_Engineers(engineer_id), skill_id INTEGER REFERENCES Skills(skill_id) ); Sample rows from `Engineer_Skills`: (10, 2), (10, 1), (15, 1), CREATE TABLE `Fault_Log` ( fault_log_entry_id INTEGER, asset_id INTEGER REFERENCES Assets(asset_id), recorded_by_staff_id INTEGER REFERENCES Staff(staff_id), fault_log_entry_datetime DATETIME, fault_description VARCHAR(255), other_fault_details VARCHAR(255) ); Sample rows from `Fault_Log`: (1, 3, 14, 2018-03-21 04:25:00, system error, None), (2, 7, 4, 2018-03-13 09:43:05, system error, None), (3, 6, 9, 2018-02-24 09:28:20, system error, None), CREATE TABLE `Engineer_Visits` ( engineer_visit_id INTEGER, contact_staff_id INTEGER REFERENCES Staff(staff_id), engineer_id INTEGER REFERENCES Maintenance_Engineers(engineer_id), fault_log_entry_id INTEGER REFERENCES Fault_Log(fault_log_entry_id), fault_status VARCHAR(10), visit_start_datetime DATETIME, visit_end_datetime DATETIME, other_visit_details VARCHAR(255) ); Sample rows from `Engineer_Visits`: (1, 8, 8, 13, Waiting, 1978-10-12 23:14:40, 1988-01-07 06:41:51, None), (2, 7, 15, 13, Return, 1980-05-02 23:31:18, 1990-08-30 22:44:16, None), (3, 7, 15, 4, Waiting, 2010-02-23 18:16:23, 1982-05-13 02:08:41, None), CREATE TABLE `Part_Faults` ( part_fault_id INTEGER, part_id INTEGER REFERENCES Parts(part_id), fault_short_name VARCHAR(20), fault_description VARCHAR(255), other_fault_details VARCHAR(255) ); Sample rows from `Part_Faults`: (1, 1, PW, Package Wrong, None), (2, 1, PW, Package Wrong, None), (3, 3, TW, Top Parts Wrong, None), CREATE TABLE `Fault_Log_Parts` ( fault_log_entry_id INTEGER REFERENCES Fault_Log(fault_log_entry_id), part_fault_id INTEGER REFERENCES Part_Faults(part_fault_id), fault_status VARCHAR(10) ); Sample rows from `Fault_Log_Parts`: (12, 3, Reported), (7, 4, Reported), (1, 9, Return), CREATE TABLE `Skills_Required_To_Fix` ( part_fault_id INTEGER REFERENCES Part_Faults(part_fault_id), skill_id INTEGER REFERENCES Skills(skill_id) ); Sample rows from `Skills_Required_To_Fix`: (3, 2), (12, 3), (6, 1), ",
        "output": "SELECT asset_model FROM assets WHERE asset_id NOT IN (SELECT asset_id FROM fault_log)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the distinct Famous release dates? ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Artist TEXT, Age INT, Famous_Title TEXT, Famous_Release_date TEXT ); Sample rows from `artist`: (1, Gorgoroth, 34, Bergen 1996, November 2007), (2, Ophiolatry, 35, Transmutation, January 21, 2008), (3, Ophiolatry, 22, Antievangelistical Process (re-release), 2009), CREATE TABLE `volume` ( Volume_ID INT PRIMARY KEY, Volume_Issue TEXT, Issue_Date TEXT, Weeks_on_Top REAL, Song TEXT, Artist_ID INT REFERENCES artist(Artist_ID) ); Sample rows from `volume`: (1, 45:14 §, 27 December 1986 - 10 January, 3.0, The Way, 1), (2, 45:15, 17 January, 1.0, Everybody Have Fun Tonight , 2), (3, 45:16, 24 January, 1.0, Walk Like an Egyptian , 1), CREATE TABLE `music_festival` ( ID INT PRIMARY KEY, Music_Festival TEXT, Date_of_ceremony TEXT, Category TEXT, Volume INT REFERENCES volume(Volume_ID), Result TEXT ); Sample rows from `music_festival`: (1, 34th England Academy Prize, 18 February 2011, Best Song, 1, Nominated), (2, 34th Japan Academy Prize, 18 February 2011, Best Lyrics, 2, Nominated), (3, 34th European Academy Prize, 18 February 2011, Best Song, 3, Awarded), ",
        "output": "SELECT DISTINCT(famous_release_date) FROM artist"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of the swimmers who have no record. ###filtered_database_schema: CREATE TABLE `swimmer` ( ID INT PRIMARY KEY, name TEXT, Nationality TEXT, meter_100 REAL, meter_200 TEXT, meter_300 TEXT, meter_400 TEXT, meter_500 TEXT, meter_600 TEXT, meter_700 TEXT, Time TEXT ); Sample rows from `swimmer`: (7, Przemysław Stańczyk, Poland, 57.31, 1:57.10, 2:56.02, 3:55.36, 4:54.21, 5:52.59, 6:50.91, 7:47.91), (4, Craig Stevens, Australia, 57.35, 1:56.34, 2:55.90, 3:55.72, 4:55.08, 5:54.45, 6:52.69, 7:48.67), (5, Federico Colbertaldo, Italy, 57.66, 1:56.77, 2:56.04, 3:55.37, 4:54.48, 5:53.53, 6:52.58, 7:49.98), CREATE TABLE `stadium` ( ID INT PRIMARY KEY, name TEXT, Capacity INT, City TEXT, Country TEXT, Opening_year INT ); Sample rows from `stadium`: (1, Nou Mestalla, 75000, Valencia, Spain, 2004), (2, Gazprom Arena, 69501, Saint Petersburg, Russia, 2005), (3, Baku Olympic Stadium, 68000, Baku, Azerbaijan, 2005), CREATE TABLE `event` ( ID INT PRIMARY KEY, Name TEXT, Stadium_ID INT REFERENCES stadium(ID), Year TEXT ); Sample rows from `event`: (1, FINA, 1, 2016), (2, Pacific, 10, 2011), (3, World Master, 2, 2012), CREATE TABLE `record` ( ID INT, Result TEXT, Swimmer_ID INT PRIMARY KEY REFERENCES swimmer(ID), Event_ID INT PRIMARY KEY REFERENCES event(ID) ); Sample rows from `record`: (1, NC, 1, 1), (2, Win, 1, 2), (3, Loss, 3, 3), ",
        "output": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names and buildings of the deparments, sorted by budget descending? ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT dept_name ,  building FROM department ORDER BY budget DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For each journal_committee, find the editor name and the journal theme. ###filtered_database_schema: CREATE TABLE `journal` ( Journal_ID INT PRIMARY KEY, Date TEXT, Theme TEXT, Sales INT ); Sample rows from `journal`: (1, September 9, 2001, Miami Dolphins, 798), (2, September 23, 2001, at Jacksonville Jaguars, 994), (4, October 7, 2001, at Baltimore Ravens, 7494), CREATE TABLE `editor` ( Editor_ID INT PRIMARY KEY, Name TEXT, Age REAL ); Sample rows from `editor`: (1, Kamila Porczyk, 34.0), (2, Anna Powierza, 35.0), (3, Marek Siudym, 21.0), CREATE TABLE `journal_committee` ( Editor_ID INT PRIMARY KEY REFERENCES editor(Editor_ID), Journal_ID INT PRIMARY KEY REFERENCES journal(Journal_ID), Work_Type TEXT ); Sample rows from `journal_committee`: (1, 13, Photo), (8, 17, Article), (6, 11, Photo), ",
        "output": "SELECT t2.name ,  t3.theme FROM journal_committee as t1 JOIN editor as t2 ON t1.editor_id  =  t2.editor_id JOIN journal as t3 ON t1.journal_id  =  t3.journal_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010? ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT id FROM teaches WHERE semester  =  'Fall' AND year  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND year  =  2010"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the different ship flags, and how many ships have each? ###filtered_database_schema: CREATE TABLE `captain` ( Captain_ID INT PRIMARY KEY, Name TEXT, Ship_ID INT REFERENCES Ship(Ship_ID), age TEXT, Class TEXT, Rank TEXT ); Sample rows from `captain`: (1, Captain Sir Henry Langford, 1, 40, Third-rate ship of the line, Midshipman), (2, Captain Beves Conway, 2, 54, Third-rate ship of the line, Midshipman), (3, Lieutenant Hugh Bolitho, 3, 43, Cutter, Midshipman), CREATE TABLE `Ship` ( Ship_ID INT PRIMARY KEY, Name TEXT, Type TEXT, Built_Year REAL, Class TEXT, Flag TEXT ); Sample rows from `Ship`: (1, HMS Manxman, Panamax, 1997.0, KR, Panama), (2, HMS Gorgon, Panamax, 1998.0, KR, Panama), (3, HM Cutter Avenger, Panamax, 1997.0, KR, Panama), ",
        "output": "SELECT COUNT(*) ,  flag FROM ship GROUP BY flag"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names and types of the dorms that have a capacity greater than 300 or less than 100? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the number of players who have points less than 30 for each position? ###filtered_database_schema: CREATE TABLE `club` ( Club_ID INT PRIMARY KEY, name TEXT, Region TEXT, Start_year TEXT ); Sample rows from `club`: (1, AIB, USA, 2009), (2, BK Slide, UK, 1998), (3, IFG, China, 2005), CREATE TABLE `club_rank` ( Rank REAL PRIMARY KEY, Club_ID INT PRIMARY KEY REFERENCES club(Club_ID), Gold REAL, Silver REAL, Bronze REAL, Total REAL ); Sample rows from `club_rank`: (1.0, 2, 11.0, 11.0, 9.0, 31.0), (2.0, 3, 8.0, 7.0, 6.0, 21.0), (3.0, 1, 7.0, 4.0, 2.0, 13.0), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, name TEXT, Position TEXT, Club_ID INT REFERENCES club(Club_ID), Apps REAL, Tries REAL, Goals TEXT, Points REAL ); Sample rows from `player`: (1, Michael Platt, Full Back, 1, 20.0, 5.0, 0, 20.0), (2, Dave Halley, Right Wing, 2, 23.0, 9.0, 0, 36.0), (3, James Evans, Right Centre, 1, 30.0, 9.0, 0, 36.0), CREATE TABLE `competition` ( Competition_ID INT PRIMARY KEY, Year REAL, Competition_type TEXT, Country TEXT ); Sample rows from `competition`: (1, 2006.0, Friendly, Italy), (2, 2006.0, Friendly, Spain), (3, 2006.0, Friendly, Australia), CREATE TABLE `competition_result` ( Competition_ID INT PRIMARY KEY REFERENCES competition(Competition_ID), Club_ID_1 INT PRIMARY KEY REFERENCES club(Club_ID), Club_ID_2 INT PRIMARY KEY REFERENCES club(Club_ID), Score TEXT ); Sample rows from `competition_result`: (1, 1, 2, 11:10), (2, 3, 2, 25:2), (10, 4, 2, 13:10), ",
        "output": "SELECT COUNT(*) ,  position FROM player WHERE points  <  30 GROUP BY position"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are all company names that have a corresponding movie directed in the year 1999? ###filtered_database_schema: CREATE TABLE `book_club` ( book_club_id INT PRIMARY KEY, Year INT, Author_or_Editor TEXT, Book_Title TEXT, Publisher TEXT, Category TEXT, Result TEXT ); Sample rows from `book_club`: (1, 1989, Michael Nava, Goldenboy, Alyson, Gay M/SF, Won [A ]), (2, 1989, Donald Ward, Death Takes the Stage, St. Martin's Press, Gay M/SF, Nom), (3, 1989, Michael Bishop, Unicorn Mountain, William Morrow, Gay M/SF, Nom), CREATE TABLE `movie` ( movie_id INT PRIMARY KEY, Title TEXT, Year INT, Director TEXT, Budget_million REAL, Gross_worldwide INT ); Sample rows from `movie`: (1, The Boondock Saints, 1999, Troy Duffy, 6.0, 30471), (2, The Big Kahuna, 1999, John Swanbeck, 7.0, 3728888), (3, Storm Catcher, 1999, Anthony Hickox, 5.0, 40500), CREATE TABLE `culture_company` ( Company_name TEXT PRIMARY KEY, Type TEXT, Incorporated_in TEXT, Group_Equity_Shareholding REAL, book_club_id TEXT REFERENCES book_club(book_club_id), movie_id TEXT REFERENCES movie(movie_id) ); Sample rows from `culture_company`: (Culture China, Corporate, China, 18.77, 1, 2), (Culture China Cargo, Joint Venture, China, 49.0, 2, 3), (Culture Hong Kong, Joint Venture, Hong Kong, 60.0, 3, 4), ",
        "output": "SELECT t2.company_name FROM movie as t1 JOIN culture_company as t2 ON t1.movie_id  =  t2.movie_id WHERE t1.year  =  1999"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Datasets by jitendra malik ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t2.datasetid FROM paper as t3 JOIN paperdataset as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Order denominations in descending order of the count of schools with the denomination. Return each denomination with the count of schools. ###filtered_database_schema: CREATE TABLE `school` ( School_ID INT PRIMARY KEY, School TEXT, Location TEXT, Enrollment REAL, Founded REAL, Denomination TEXT, Boys_or_Girls TEXT, Day_or_Boarding TEXT, Year_Entered_Competition REAL, School_Colors TEXT ); Sample rows from `school`: (1, St Aloysius' College, Milsons Point, 1200.0, 1879.0, Catholic, Boys, Day, 1929.0, Royal Blue and Gold), (2, Barker College, Hornsby, 2300.0, 1890.0, Anglican, Boys only to Yr 9 Co-ed Year 10 to 12, Day & Boarding, 1929.0, Red & Blue), (3, Cranbrook School, Bellevue Hill, 1000.0, 1918.0, Anglican, Boys, Day & Boarding, 1929.0, Red, White & Blue), CREATE TABLE `school_details` ( School_ID INT PRIMARY KEY REFERENCES school(School_ID), Nickname TEXT, Colors TEXT, League TEXT, Class TEXT, Division TEXT ); Sample rows from `school_details`: (1, Tigers, Blue and Yellow, DSHA, Flight A, Division 1), (2, Auks, Dark Green and White, DSHA, Flight B, Division 3), (3, Buccaneers, Garnet and White, DSHA, Fight A, Division 1), CREATE TABLE `school_performance` ( School_Id INT PRIMARY KEY REFERENCES school(School_ID), School_Year TEXT PRIMARY KEY, Class_A TEXT, Class_AA TEXT ); Sample rows from `school_performance`: (1, 1987-88, Yantis, Blanco), (1, 1988-89, Happy, Blanco), (1, 1989-90, Skidmore-Tynan, Bishop), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Team TEXT, Age INT, Position TEXT, School_ID INT REFERENCES school(School_ID) ); Sample rows from `player`: (1, Timothy Beckham, Tampa Bay Devil Rays, 15, Shortstop, 1), (2, Pedro Álvarez, Pittsburgh Pirates, 14, Third baseman, 2), (3, Eric Hosmer, Kansas City Royals, 16, First Baseman, 1), ",
        "output": "SELECT denomination ,  COUNT(*) FROM school GROUP BY denomination ORDER BY COUNT(*) DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the parties associated with the delegates from district 1. Who served as governors of the parties? ###filtered_database_schema: CREATE TABLE `county` ( County_Id INT PRIMARY KEY, County_name TEXT, Population REAL, Zip_code TEXT ); Sample rows from `county`: (1, Howard, 21000.0, D21), (2, Baltimore County, 90000.0, D08), (3, Colony, 79000.0, D02), CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Year REAL, Party TEXT, Governor TEXT, Lieutenant_Governor TEXT, Comptroller TEXT, Attorney_General TEXT, US_Senate TEXT ); Sample rows from `party`: (1, 1998.0, Democratic, Peter Vallone, Sandra Frankel, Carl McCall, Eliot Spitzer, Charles Schumer), (2, 1998.0, Liberal, Betsy McCaughey Ross, Jonathan Reiter, Carl McCall, Eliot Spitzer, Charles Schumer), (3, 2002.0, Democratic, Carl McCall, Dennis Mehiel, Alan Hevesi, Eliot Spitzer, (no election)), CREATE TABLE `election` ( Election_ID INT PRIMARY KEY, Counties_Represented TEXT, District INT REFERENCES county(County_Id), Delegate TEXT, Party INT REFERENCES party(Party_ID), First_Elected REAL, Committee TEXT ); Sample rows from `election`: (1, 09.1 9A, 1, Bates, Gail H. Gail H. Bates, 1, 2002.0, Appropriations), (2, 09.1 9A, 1, Miller, Warren E. Warren E. Miller, 1, 2003.0, Economic Matters), (3, 12.1 12A, 2, DeBoy, Steven J. Sr. Steven J. DeBoy, Sr., 2, 2002.0, Appropriations), ",
        "output": "SELECT t2.governor FROM election as t1 JOIN party as t2 ON t1.party  =  t2.party_ID WHERE t1.district  =  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what datasets do papers at ACL use most ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t1.datasetid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"ACL\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: how many citizens does the biggest city have in the usa ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT population FROM city WHERE population  =  ( SELECT MAX(population) FROM city );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the price ranges of hotels? ###filtered_database_schema: CREATE TABLE `Ref_Hotel_Star_Ratings` ( star_rating_code CHAR(15) PRIMARY KEY, star_rating_description VARCHAR(80) ); Sample rows from `Ref_Hotel_Star_Ratings`: (1, star), (2, star), (3, star), CREATE TABLE `Locations` ( Location_ID INTEGER, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Locations`: (333, Astro Orbiter, 660 Shea Crescent, None), (368, African Animals, 254 Ottilie Junction, None), (417, American Adventure, 53815 Sawayn Tunnel Apt. 297, None), CREATE TABLE `Ref_Attraction_Types` ( Attraction_Type_Code CHAR(15) PRIMARY KEY, Attraction_Type_Description VARCHAR(255) ); Sample rows from `Ref_Attraction_Types`: (2, park), (3, garden), (5, gallery), CREATE TABLE `Visitors` ( Tourist_ID INTEGER PRIMARY KEY, Tourist_Details VARCHAR(255) ); Sample rows from `Visitors`: (164, Toney), (189, Graciela), (204, Vincent), CREATE TABLE `Features` ( Feature_ID INTEGER, Feature_Details VARCHAR(255) ); Sample rows from `Features`: (523, cafe), (528, park), (543, garden), CREATE TABLE `Hotels` ( hotel_id INTEGER, star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code), pets_allowed_yn CHAR(1), price_range REAL, other_hotel_details VARCHAR(255) ); Sample rows from `Hotels`: (123, 5, 1, 2914989.571, None), (144, 4, , , None), (172, 5, , 17012.682586009, None), CREATE TABLE `Tourist_Attractions` ( Tourist_Attraction_ID INTEGER, Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code), Location_ID INTEGER REFERENCES Locations(Location_ID), How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Tourist_Attractions`: (2113, 2, 579, bus, art museum, None, None, None), (2701, 6, 417, walk, UK gallery, None, None, None), (5076, 2, 868, shuttle, flying elephant, None, None, None), CREATE TABLE `Street_Markets` ( Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Market_Details VARCHAR(255) ); Sample rows from `Street_Markets`: (6852, Broadway), (7067, Fish Farm Market), CREATE TABLE `Shops` ( Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Shop_Details VARCHAR(255) ); Sample rows from `Shops`: (8429, soup), (8449, coffee), (8698, Flower), CREATE TABLE `Museums` ( Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Museum_Details VARCHAR(255) ); Sample rows from `Museums`: (2113, Yale Center for British Art), (2701, The Metropolitan Museum of Art), (5076, MoMA), CREATE TABLE `Royal_Family` ( Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Royal_Family_Details VARCHAR(255) ); Sample rows from `Royal_Family`: (9561, None), (9919, None), CREATE TABLE `Theme_Parks` ( Theme_Park_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Theme_Park_Details VARCHAR(255) ); Sample rows from `Theme_Parks`: (5265, Disney), (6476, Sea World), (6523, Universal Studios), CREATE TABLE `Visits` ( Visit_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID), Visit_Date DATETIME, Visit_Details VARCHAR(40) ); Sample rows from `Visits`: (183, 6653, 377, 2004-08-21 03:06:14, ), (268, 5076, 204, 2013-08-06 05:35:51, ), (273, 9360, 211, 2013-10-27 09:56:08, ), CREATE TABLE `Photos` ( Photo_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Photos`: (211, 8449, game1, None, 702, None), (280, 7067, game2, None, 762, None), (303, 5076, game3, None, 392, None), CREATE TABLE `Staff` ( Staff_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(40), Other_Details VARCHAR(255) ); Sample rows from `Staff`: (170, 6476, Whitney, None), (219, 6476, Kaela, None), (237, 7067, Eunice, None), CREATE TABLE `Tourist_Attraction_Features` ( Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID) ); Sample rows from `Tourist_Attraction_Features`: (5076, 528), (5076, 681), (5265, 523), ",
        "output": "SELECT price_range FROM hotels"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the full names of customers who have accounts? ###filtered_database_schema: CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 6, 338, Regular), (2, 14, 562, VIP), (3, 9, 162, VIP), CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(20), customer_last_name VARCHAR(20), customer_address VARCHAR(255), customer_phone VARCHAR(255), customer_email VARCHAR(255), other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Aniyah, Feest, 55975 Theodore Estates Lake Brody, VT 57078, (673)872-5338, fahey.dorian@example.com, None), (2, Susie, Wiza, 6478 Moen Isle Suite 910 Schimmelmouth, VT 96364-4898, 679-845-8645x94312, idickinson@example.com, None), (3, Marcel, Brekke, 1965 Abernathy Plains Port Lilla, LA 44867, 1-511-656-6664, nichole.rodriguez@example.com, None), CREATE TABLE `Customers_Cards` ( card_id INTEGER, customer_id INTEGER, card_type_code VARCHAR(15), card_number VARCHAR(80), date_valid_from DATETIME, date_valid_to DATETIME, other_card_details VARCHAR(255) ); Sample rows from `Customers_Cards`: (1, 14, Credit, 4560596484842, 2011-04-17 09:05:28, 2018-03-07 17:06:19, 5567915676420343), (2, 9, Credit, 4859448397570735, 2012-05-22 02:05:41, 2018-02-25 15:43:32, 4539333582760), (3, 6, Debit, 348237249146948, 2014-08-01 14:26:45, 2018-03-24 15:29:00, 4916210554814), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, previous_transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), card_id INTEGER REFERENCES Customers_Cards(card_id), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DOUBLE, transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 925, 15, 1, Payment, 2018-03-24 06:41:41, 1701.23, None, None), (2, 494, 3, 2, Refund, 2018-03-24 12:08:55, 1931.76, None, None), (3, 642, 4, 3, Payment, 2018-03-24 09:08:27, 486.56, None, None), ",
        "output": "SELECT DISTINCT t1.customer_first_name ,  t1.customer_last_name FROM customers as t1 JOIN accounts as t2 ON t1.customer_id  =  t2.customer_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of schools. ###filtered_database_schema: CREATE TABLE `School` ( School_id TEXT PRIMARY KEY, School_name TEXT, Location TEXT, Mascot TEXT, Enrollment INT, IHSAA_Class TEXT, IHSAA_Football_Class TEXT, County TEXT ); Sample rows from `School`: (1, Bremen, Bremen, Lions, 495, AA, AA, 50 Marshall), (2, Culver Community, Culver, Cavaliers, 287, A, A, 50 Marshall), (3, Glenn, Walkerton, Falcons, 605, AAA, AAA, 71 St. Joseph), CREATE TABLE `budget` ( School_id INT PRIMARY KEY REFERENCES School(School_id), Year INT PRIMARY KEY, Budgeted INT, total_budget_percent_budgeted REAL, Invested INT, total_budget_percent_invested REAL, Budget_invested_percent TEXT ); Sample rows from `budget`: (2, 1999, 4979, 2.0, 2134, 2.0, 42.9), (2, 2000, 3666, 2.0, 5840, 2.0, 159.3), (2, 2001, 6803, 2.0, 8335, 2.0, 122.5), CREATE TABLE `endowment` ( endowment_id INT PRIMARY KEY, School_id INT REFERENCES School(School_id), donator_name TEXT, amount REAL ); Sample rows from `endowment`: (1, 1, Monte Plata, 9.51), (2, 2, San José de Ocoa, 9.83), (3, 3, Distrito Nacional, 9.55), ",
        "output": "SELECT COUNT(*) FROM school"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: In which conferences does Daniella Coelho typically publish ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the different district names in order of descending city area? ###filtered_database_schema: CREATE TABLE `product` ( product_id INT PRIMARY KEY, product TEXT, dimensions TEXT, dpi REAL, pages_per_minute_color REAL, max_page_size TEXT, interface TEXT ); Sample rows from `product`: (1, Fujitsu fi-6130 A4 Series Scanner, 301 x 160 x 158, 600.0, 30.0, A4, USB 2.0), (2, Plustek MobileOffice D28 Corporate, 303 x 94 x 60, 600.0, 28.0, A4, USB 2.0), (3, Xerox Travel Scanner 100, 289 x 51 x 38, 600.0, 4.0, A4, USB 2.0), CREATE TABLE `store` ( Store_ID INT PRIMARY KEY, Store_Name TEXT, Type TEXT, Area_size REAL, Number_of_product_category REAL, Ranking INT ); Sample rows from `store`: (1, Miramichi, City Mall, 179.84, 17811.0, 2), (2, Neguac, Village Store, 26.69, 1678.0, 3), (3, Rogersville, Village Store, 7.23, 1170.0, 1), CREATE TABLE `district` ( District_ID INT PRIMARY KEY, District_name TEXT, Headquartered_City TEXT, City_Population REAL, City_Area REAL ); Sample rows from `district`: (1, Attock District, Attock City, 94620.0, 20.0), (2, Bahawalnagar District, Bahawalnagar City, 134936.0, 13.0), (3, Bahawalpur District, Bahawalpur City, 530438.0, 38.0), CREATE TABLE `store_product` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), Product_ID INT PRIMARY KEY REFERENCES product(Product_ID) ); Sample rows from `store_product`: (1, 1), (1, 2), (1, 3), CREATE TABLE `store_district` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), District_ID INT REFERENCES district(District_ID) ); Sample rows from `store_district`: (1, 15), (2, 15), (3, 11), ",
        "output": "SELECT DISTINCT district_name FROM district ORDER BY city_area DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of shops in ascending order of open year? ###filtered_database_schema: CREATE TABLE `device` ( Device_ID INT PRIMARY KEY, Device TEXT, Carrier TEXT, Package_Version TEXT, Applications TEXT, Software_Platform TEXT ); Sample rows from `device`: (1, BlackBerry Storm 9530, MTS Mobility, 5.0.0.808, 5.0.0.419, Android), (2, Apple, Verizon Wireless, 5.0.0.328, 5.0.0.328, iOS), (3, Huawei, Telus Mobility, 5.0.0.419, 5.0.0.419, Android), CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Shop_Name TEXT, Location TEXT, Open_Date TEXT, Open_Year INT ); Sample rows from `shop`: (1, Dinas Device, Dinas, 1 January, 2014), (2, Best Buy, Cymmer, 15 July, 2006), (3, Ferndale, Blaenllechau, 8 November, 2009), CREATE TABLE `stock` ( Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID), Device_ID INT PRIMARY KEY REFERENCES device(Device_ID), Quantity INT ); Sample rows from `stock`: (1, 6, 100), (2, 6, 110), (3, 6, 134), ",
        "output": "SELECT shop_name FROM shop ORDER BY open_year ASC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the top 10 customers' first and last names by total number of orders and how many orders did they make? ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT t1.first_name ,  t1.last_name ,  COUNT(*) FROM customers as t1 JOIN invoices as t2 ON t2.customer_id  =  t1.id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 10;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all races held between 2009 and 2011? ###filtered_database_schema: CREATE TABLE `circuits` ( circuitId INTEGER, circuitRef TEXT, name TEXT, location TEXT, country TEXT, lat REAL, lng REAL, alt TEXT, url TEXT ); Sample rows from `circuits`: (1, albert_park, Albert Park Grand Prix Circuit, Melbourne, Australia, -37.8497, 144.968, 10, http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit), (2, sepang, Sepang International Circuit, Kuala Lumpur, Malaysia, 2.76083, 101.738, , http://en.wikipedia.org/wiki/Sepang_International_Circuit), (3, bahrain, Bahrain International Circuit, Sakhir, Bahrain, 26.0325, 50.5106, , http://en.wikipedia.org/wiki/Bahrain_International_Circuit), CREATE TABLE `races` ( raceId INTEGER, year INTEGER, round INTEGER, circuitId INTEGER REFERENCES circuits(circuitId), name TEXT, date TEXT, time TEXT, url TEXT ); Sample rows from `races`: (1, 2009, 1, 1, Australian Grand Prix, 2009-03-29, 06:00:00, http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix), (2, 2009, 2, 2, Malaysian Grand Prix, 2009-04-05, 09:00:00, http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix), (3, 2009, 3, 17, Chinese Grand Prix, 2009-04-19, 07:00:00, http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix), CREATE TABLE `drivers` ( driverId INTEGER, driverRef TEXT, number TEXT, code TEXT, forename TEXT, surname TEXT, dob TEXT, nationality TEXT, url TEXT ); Sample rows from `drivers`: (1, hamilton, 44, HAM, Lewis, Hamilton, 07/01/1985, British, http://en.wikipedia.org/wiki/Lewis_Hamilton), (2, heidfeld, , HEI, Nick, Heidfeld, 10/05/1977, German, http://en.wikipedia.org/wiki/Nick_Heidfeld), (3, rosberg, 6, ROS, Nico, Rosberg, 27/06/1985, German, http://en.wikipedia.org/wiki/Nico_Rosberg), CREATE TABLE `status` ( statusId INTEGER, status TEXT ); Sample rows from `status`: (1, Finished), (2, Disqualified), (3, Accident), CREATE TABLE `seasons` ( year INTEGER, url TEXT ); Sample rows from `seasons`: (1950, http://en.wikipedia.org/wiki/1950_Formula_One_season), (1951, http://en.wikipedia.org/wiki/1951_Formula_One_season), (1952, http://en.wikipedia.org/wiki/1952_Formula_One_season), CREATE TABLE `constructors` ( constructorId INTEGER, constructorRef TEXT, name TEXT, nationality TEXT, url TEXT ); Sample rows from `constructors`: (1, mclaren, McLaren, British, http://en.wikipedia.org/wiki/McLaren), (2, bmw_sauber, BMW Sauber, German, http://en.wikipedia.org/wiki/BMW_Sauber), (3, williams, Williams, British, http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering), CREATE TABLE `constructorStandings` ( constructorStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `constructorStandings`: (1, 18, 1, 14.0, 1, 1, 1), (2, 18, 2, 8.0, 3, 3, 0), (3, 18, 3, 9.0, 2, 2, 0), CREATE TABLE `results` ( resultId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, grid INTEGER, position TEXT, positionText TEXT, positionOrder INTEGER, points REAL, laps TEXT, time TEXT, milliseconds TEXT, fastestLap TEXT, rank TEXT, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId INTEGER ); Sample rows from `results`: (1, 18, 1, 1, 22, 1, 1, 1, 1, 10.0, 58, 34:50.6, 5690616, 39, 2, 01:27.5, 218.3, 1), (2, 18, 2, 2, 3, 5, 2, 2, 2, 8.0, 58, 5.478, 5696094, 41, 3, 01:27.7, 217.586, 1), (3, 18, 3, 3, 7, 7, 3, 3, 3, 6.0, 58, 8.163, 5698779, 41, 5, 01:28.1, 216.719, 1), CREATE TABLE `driverStandings` ( driverStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `driverStandings`: (1, 18, 1, 10.0, 1, 1, 1), (2, 18, 2, 8.0, 2, 2, 0), (3, 18, 3, 6.0, 3, 3, 0), CREATE TABLE `constructorResults` ( constructorResultsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, status TEXT ); Sample rows from `constructorResults`: (1, 18, 1, 14.0, NULL), (2, 18, 2, 8.0, NULL), (3, 18, 3, 9.0, NULL), CREATE TABLE `qualifying` ( qualifyId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, position INTEGER, q1 TEXT, q2 TEXT, q3 TEXT ); Sample rows from `qualifying`: (1, 18, 1, 1, 22, 1, 1:26.572, 1:25.187, 1:26.714), (2, 18, 9, 2, 4, 2, 1:26.103, 1:25.315, 1:26.869), (3, 18, 5, 1, 23, 3, 1:25.664, 1:25.452, 1:27.079), CREATE TABLE `pitStops` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), stop INTEGER PRIMARY KEY, lap INTEGER, time TEXT, duration TEXT, milliseconds INTEGER ); CREATE TABLE `lapTimes` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), lap INTEGER PRIMARY KEY, position INTEGER, time TEXT, milliseconds INTEGER ); ",
        "output": "SELECT name FROM races WHERE year BETWEEN 2009 AND 2011"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many distinct official languages are there among countries of players whose positions are defenders. ###filtered_database_schema: CREATE TABLE `country` ( Country_id INT PRIMARY KEY, Country_name TEXT, Capital TEXT, Official_native_language TEXT ); Sample rows from `country`: (1, Indonesia, Jakarta, Bahasa Indonesia), (2, Iran, Tehran, Persian ( Arabic script )), (3, Iraq, Baghdad, Arabic ( Arabic script ) Kurdish), CREATE TABLE `team` ( Team_id INT PRIMARY KEY, Name TEXT ); Sample rows from `team`: (1, Columbus Crew), (2, Evalyn Feil), (3, Anais VonRueden), CREATE TABLE `match_season` ( Season REAL PRIMARY KEY, Player TEXT, Position TEXT, Country INT REFERENCES country(Country_id), Team INT REFERENCES team(Team_id), Draft_Pick_Number INT, Draft_Class TEXT, College TEXT ); Sample rows from `match_season`: (1996.0, Steve Ralston Category:Articles with hCards, Midfielder, 6, 1, 18, 1996 MLS College Draft, Florida International), (1997.0, Mike Duhaney Category:Articles with hCards, Defender, 6, 2, 87, 1996 MLS Inaugural Player Draft, UNLV), (1998.0, Ben Olsen Category:Articles with hCards, Midfielder, 4, 3, 2, Project-40, Virginia), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Years_Played TEXT, Total_WL TEXT, Singles_WL TEXT, Doubles_WL TEXT, Team INT REFERENCES team(Team_id) ); Sample rows from `player`: (1, Cho Soong-Jae (630), 1 (2011), 2–0, 1–0, 1–0, 1), (2, Chung Hong (717), 1 (2011), 0–0, 0–0, 0–0, 1), (3, Im Kyu-tae (492), 8 (2003–2005, 2007–2011), 6–9, 5–7, 1–2, 1), ",
        "output": "SELECT COUNT(DISTINCT t1.official_native_language) FROM country as t1 JOIN match_season as t2 ON t1.country_id  =  t2.country WHERE t2.position  =  \"Defender\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the member names which are in both the party with id 3 and the party with id 1. ###filtered_database_schema: CREATE TABLE `region` ( Region_ID INT PRIMARY KEY, Region_name TEXT, Date TEXT, Label TEXT, Format TEXT, Catalogue TEXT ); Sample rows from `region`: (1, United Kingdom, 1 July 2002, Parlophone, CD, 540 3622), (2, United Kingdom, 1 July 2002, Parlophone, 2× LP, 539 9821), (3, Japan, 3 July 2002, Toshiba-EMI, CD, TOCP-66045), CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Minister TEXT, Took_office TEXT, Left_office TEXT, Region_ID INT REFERENCES region(Region_ID), Party_name TEXT ); Sample rows from `party`: (1, Dr. Kwame Nkrumah (MP), 1957, 1958, 1, Convention Peoples Party), (2, Kojo Botsio (MP), 1958, 1959, 2, Progress Party), (3, Ebenezer Ako-Adjei (MP), 1959, 1960, 3, 3), CREATE TABLE `member` ( Member_ID INT PRIMARY KEY, Member_Name TEXT, Party_ID TEXT REFERENCES party(Party_ID), In_office TEXT ); Sample rows from `member`: (1, Hon Tony Abbott, 3, 1994–present), (2, Hon Dick Adams, 2, 1993–2013), (3, Anthony Albanese, 2, 1996–present), CREATE TABLE `party_events` ( Event_ID INT PRIMARY KEY, Event_Name TEXT, Party_ID INT REFERENCES party(Party_ID), Member_in_charge_ID INT REFERENCES member(Member_ID) ); Sample rows from `party_events`: (1, Annaual Meeting, 1, 4), (2, Conference, 1, 12), (3, Annaual Meeting, 2, 2), ",
        "output": "SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many patents outcomes were listed for all the projects? ###filtered_database_schema: CREATE TABLE `Document_Types` ( document_type_code VARCHAR(10) PRIMARY KEY, document_description VARCHAR(255) ); Sample rows from `Document_Types`: (APP, Initial Application), (REG, Regular), CREATE TABLE `Documents` ( document_id INTEGER, document_type_code VARCHAR(10) REFERENCES Document_Types(document_type_code), grant_id INTEGER REFERENCES Grants(grant_id), sent_date DATETIME, response_received_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Documents`: (1, APP, 5, 1986-11-30 07:56:35, 1977-12-01 02:18:53, ), (2, APP, 13, 2004-01-23 11:57:08, 1979-12-08 10:38:07, ), (3, REG, 10, 1999-03-03 12:25:58, 1995-09-12 13:13:48, ), CREATE TABLE `Grants` ( grant_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), grant_amount DECIMAL(19,4), grant_start_date DATETIME, grant_end_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Grants`: (1, 10, 4094.542, 2016-11-20 00:18:51, 2004-10-24 09:09:39, et), (2, 3, 281.2446, 1985-10-09 20:08:49, 1985-06-08 00:22:07, occaecati), (3, 14, 4515947.7015, 1970-09-19 22:53:49, 1989-03-16 18:27:16, et), CREATE TABLE `Organisation_Types` ( organisation_type VARCHAR(10) PRIMARY KEY, organisation_type_description VARCHAR(255) ); Sample rows from `Organisation_Types`: (RES, Research), (SPON, Sponsor), CREATE TABLE `Organisations` ( organisation_id INTEGER, organisation_type VARCHAR(10) REFERENCES Organisation_Types(organisation_type), organisation_details VARCHAR(255) ); Sample rows from `Organisations`: (1, RES, et), (2, RES, eius), (3, RES, impedit), CREATE TABLE `Project_Outcomes` ( project_id INTEGER REFERENCES Projects(project_id), outcome_code VARCHAR(10) REFERENCES Research_Outcomes(outcome_code), outcome_details VARCHAR(255) ); Sample rows from `Project_Outcomes`: (4, Paper, None), (3, Patent, None), (9, Paper, None), CREATE TABLE `Project_Staff` ( staff_id DOUBLE PRIMARY KEY, project_id INTEGER REFERENCES Projects(project_id), role_code VARCHAR(10) REFERENCES Staff_Roles(role_code), date_from DATETIME, date_to DATETIME, other_details VARCHAR(255) ); Sample rows from `Project_Staff`: (0.0, 2, leader, 1981-10-04 22:44:50, 1985-05-30 22:26:30, None), (674810.0, 5, leader, 2003-04-19 15:06:20, 2010-12-08 11:55:36, None), (779.0, 2, researcher, 1981-10-09 21:32:53, 2004-12-16 13:03:36, None), CREATE TABLE `Projects` ( project_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), project_details VARCHAR(255) ); Sample rows from `Projects`: (1, 15, porro), (2, 11, et), (3, 7, sint), CREATE TABLE `Research_Outcomes` ( outcome_code VARCHAR(10) PRIMARY KEY, outcome_description VARCHAR(255) ); Sample rows from `Research_Outcomes`: (Paper, Published Research Paper), (Patent, Research Patent), CREATE TABLE `Research_Staff` ( staff_id INTEGER, employer_organisation_id INTEGER REFERENCES Organisations(organisation_id), staff_details VARCHAR(255) ); Sample rows from `Research_Staff`: (1, 1, quo), (2, 4, est), (3, 5, aspernatur), CREATE TABLE `Staff_Roles` ( role_code VARCHAR(10) PRIMARY KEY, role_description VARCHAR(255) ); Sample rows from `Staff_Roles`: (leader, Project Leader), (researcher, Project Researcher), CREATE TABLE `Tasks` ( task_id INTEGER, project_id INTEGER REFERENCES Projects(project_id), task_details VARCHAR(255), eg Agree Objectives VARCHAR(1) ); Sample rows from `Tasks`: (1, 1, a, None), (2, 2, b, None), (3, 3, c, None), ",
        "output": "SELECT COUNT(*) FROM project_outcomes WHERE outcome_code  =  'Patent'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the first names and last names of employees who earn more than 30000 in salary. ###filtered_database_schema: CREATE TABLE `works_on` ( Essn INTEGER PRIMARY KEY, Pno INTEGER PRIMARY KEY, Hours REAL ); Sample rows from `works_on`: (123456789, 1, 32.5), (123456789, 2, 7.5), (666884444, 3, 40.0), CREATE TABLE `employee` ( Fname TEXT, Minit TEXT, Lname TEXT, Ssn INTEGER, Bdate TEXT, Address TEXT, Sex TEXT, Salary INTEGER, Super_ssn INTEGER, Dno INTEGER ); Sample rows from `employee`: (Jonh, B, Smith, 123456789, 1965-01-09, 731 Fondren, Houston, TX, M, 30000, 333445555, 5), (Franklin, T, Wong, 333445555, 1955-12-08, 638 Voss, Houston, TX, M, 40000, 888665555, 5), (Joyce, A, English, 453453453, 1972-07-31, 5631 Rice, Houston, TX, F, 25000, 333445555, 5), CREATE TABLE `department` ( Dname TEXT, Dnumber INTEGER, Mgr_ssn INTEGER, Mgr_start_date TEXT ); Sample rows from `department`: (Headquarters, 1, 888665555, 1981-06-19), (Administration, 4, 987654321, 1995-01-01), (Research, 5, 333445555, 1988-05-22), CREATE TABLE `project` ( Pname TEXT, Pnumber INTEGER, Plocation TEXT, Dnum INTEGER ); Sample rows from `project`: (ProductX, 1, Bellaire, 5), (ProductY, 2, Sugarland, 5), (ProductZ, 3, Houston, 5), CREATE TABLE `dependent` ( Essn INTEGER PRIMARY KEY, Dependent_name TEXT PRIMARY KEY, Sex TEXT, Bdate TEXT, Relationship TEXT ); Sample rows from `dependent`: (333445555, Alice, F, 1986-04-05, Daughter), (333445555, Theodore, M, 1983-10-25, Son), (333445555, Joy, F, 1958-05-03, Spouse), CREATE TABLE `dept_locations` ( Dnumber INTEGER PRIMARY KEY, Dlocation TEXT PRIMARY KEY ); Sample rows from `dept_locations`: (1, Houston), (4, Stafford), (5, Bellaire), ",
        "output": "SELECT fname ,  lname FROM employee WHERE salary  >  30000"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are all the distinct payment types? ###filtered_database_schema: CREATE TABLE `Discount_Coupons` ( coupon_id INTEGER, date_issued DATETIME, coupon_amount DECIMAL(19,4) ); Sample rows from `Discount_Coupons`: (1, 2017-09-06 01:33:27, 500), (2, 2018-02-20 09:40:56, 686.25), (3, 2017-09-17 23:31:36, 501.3), CREATE TABLE `Customers` ( customer_id INTEGER, coupon_id INTEGER REFERENCES Discount_Coupons(coupon_id), good_or_bad_customer VARCHAR(4), first_name VARCHAR(80), last_name VARCHAR(80), gender_mf VARCHAR(1), date_became_customer DATETIME, date_last_hire DATETIME ); Sample rows from `Customers`: (1, 12, good, Geovany, Homenick, 0, 2017-10-20 12:13:17, 2018-02-27 18:55:26), (2, 14, good, Jailyn, Gerlach, 0, 2015-04-06 21:18:37, 2018-01-30 04:47:13), (3, 7, good, Rosalee, Kessler, 0, 2016-02-03 16:58:11, 2018-03-04 21:30:23), CREATE TABLE `Bookings` ( booking_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), booking_status_code VARCHAR(10), returned_damaged_yn VARCHAR(40), booking_start_date DATETIME, booking_end_date DATETIME, count_hired VARCHAR(40), amount_payable DECIMAL(19,4), amount_of_discount DECIMAL(19,4), amount_outstanding DECIMAL(19,4), amount_of_refund DECIMAL(19,4) ); Sample rows from `Bookings`: (1, 7, Provisional, 1, 2016-12-07 23:39:17, 2018-02-01 16:39:13, 298, 214.39, 71.45, 28.22, 179.14), (2, 15, Confirmed, 1, 2017-06-16 11:42:31, 2018-02-19 21:53:31, 331, 386.92, 83.82, 57.62, 183.68), (3, 3, Confirmed, 1, 2017-04-04 11:02:43, 2018-02-01 09:30:50, 729, 351.32, 49.26, 66.01, 135.94), CREATE TABLE `Products_for_Hire` ( product_id INTEGER, product_type_code VARCHAR(15), daily_hire_cost DECIMAL(19,4), product_name VARCHAR(80), product_description VARCHAR(255) ); Sample rows from `Products_for_Hire`: (1, Cutlery, 26.15, Book collection C, Anna Karenina), (2, Cutlery, 15.62, Book collection B, War and Peace), (3, Cutlery, 39.73, Book collection A, The Great Gatsby), CREATE TABLE `Payments` ( payment_id INTEGER, booking_id INTEGER REFERENCES Bookings(booking_id), customer_id INTEGER REFERENCES Customers(customer_id), payment_type_code VARCHAR(15), amount_paid_in_full_yn VARCHAR(1), payment_date DATETIME, amount_due DECIMAL(19,4), amount_paid DECIMAL(19,4) ); Sample rows from `Payments`: (1, 6, 15, Check, 1, 2018-03-09 16:28:00, 369.52, 206.27), (2, 9, 12, Cash, 1, 2018-03-03 13:39:44, 278.6, 666.45), (3, 5, 7, Credit Card, 0, 2018-03-22 15:00:23, 840.06, 135.7), CREATE TABLE `Products_Booked` ( booking_id INTEGER PRIMARY KEY REFERENCES Bookings(booking_id), product_id INTEGER PRIMARY KEY REFERENCES Products_for_Hire(product_id), returned_yn VARCHAR(1), returned_late_yn VARCHAR(1), booked_count INTEGER, booked_amount FLOAT ); Sample rows from `Products_Booked`: (4, 1, 1, 1, 5, 309.73), (14, 1, 1, 0, 3, 102.76), (13, 3, 1, 0, 4, 151.68), CREATE TABLE `View_Product_Availability` ( product_id INTEGER REFERENCES Products_for_Hire(product_id), booking_id INTEGER REFERENCES Bookings(booking_id), status_date DATETIME PRIMARY KEY, available_yn VARCHAR(1) ); Sample rows from `View_Product_Availability`: (1, 5, 2018-03-18 05:25:55, 1), (2, 5, 2018-03-21 15:20:32, 0), (3, 11, 2018-03-25 10:20:15, 1), ",
        "output": "SELECT DISTINCT payment_type_code FROM payments"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name of the county with the greatest population? ###filtered_database_schema: CREATE TABLE `county_public_safety` ( County_ID INT PRIMARY KEY, Name TEXT, Population INT, Police_officers INT, Residents_per_officer INT, Case_burden INT, Crime_rate REAL, Police_force TEXT, Location TEXT ); Sample rows from `county_public_safety`: (1, Abbotsford, 128165, 187, 685, 81, 118.0, Abbotsford Police Department, East), (2, Burnaby, 204320, 253, 808, 100, 123.0, RCMP, East), (3, Campbell River, 30810, 40, 770, 137, 178.0, RCMP, West), CREATE TABLE `city` ( City_ID INT PRIMARY KEY, County_ID INT REFERENCES county_public_safety(County_ID), Name TEXT, White REAL, Black REAL, Amerindian REAL, Asian REAL, Multiracial REAL, Hispanic REAL ); Sample rows from `city`: (1, 1, Adjuntas, 93.1, 3.1, 0.3, 0.0, 3.4, 99.6), (2, 1, Aguada, 86.6, 5.3, 0.3, 0.1, 7.7, 99.4), (3, 1, Aguadilla, 83.0, 7.4, 0.3, 0.2, 8.2, 98.5), ",
        "output": "SELECT name FROM county_public_safety ORDER BY population DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many customers have an active value of 1? ###filtered_database_schema: CREATE TABLE `actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), last_update TIMESTAMP ); Sample rows from `actor`: (1, PENELOPE, GUINESS, 2006-02-15 04:34:33), (2, NICK, WAHLBERG, 2006-02-15 04:34:33), (3, ED, CHASE, 2006-02-15 04:34:33), CREATE TABLE `address` ( address_id SMALLINT UNSIGNED PRIMARY KEY, address VARCHAR(50), address2 VARCHAR(50), district VARCHAR(20), city_id SMALLINT UNSIGNED REFERENCES city(city_id), postal_code VARCHAR(10), phone VARCHAR(20), last_update TIMESTAMP ); Sample rows from `address`: (1, 47 MySakila Drive, None, Alberta, 300, , , 2006-02-15 04:45:30), (2, 28 MySQL Boulevard, None, QLD, 576, , , 2006-02-15 04:45:30), (3, 23 Workhaven Lane, None, Alberta, 300, , 14033335568, 2006-02-15 04:45:30), CREATE TABLE `category` ( category_id TINYINT UNSIGNED PRIMARY KEY, name VARCHAR(25), last_update TIMESTAMP ); Sample rows from `category`: (1, Action, 2006-02-15 04:46:27), (2, Animation, 2006-02-15 04:46:27), (3, Children, 2006-02-15 04:46:27), CREATE TABLE `city` ( city_id SMALLINT UNSIGNED PRIMARY KEY, city VARCHAR(50), country_id SMALLINT UNSIGNED REFERENCES country(country_id), last_update TIMESTAMP ); Sample rows from `city`: (1, A Corua (La Corua), 87, 2006-02-15 04:45:25), (2, Abha, 82, 2006-02-15 04:45:25), (3, Abu Dhabi, 101, 2006-02-15 04:45:25), CREATE TABLE `country` ( country_id SMALLINT UNSIGNED PRIMARY KEY, country VARCHAR(50), last_update TIMESTAMP ); Sample rows from `country`: (1, Afghanistan, 2006-02-15 04:44:00), (2, Algeria, 2006-02-15 04:44:00), (3, American Samoa, 2006-02-15 04:44:00), CREATE TABLE `customer` ( customer_id SMALLINT UNSIGNED PRIMARY KEY, store_id TINYINT UNSIGNED REFERENCES store(store_id), first_name VARCHAR(45), last_name VARCHAR(45), email VARCHAR(50), address_id SMALLINT UNSIGNED REFERENCES address(address_id), active BOOLEAN, create_date DATETIME, last_update TIMESTAMP ); Sample rows from `customer`: (1, 1, MARY, SMITH, MARY.SMITH@sakilacustomer.org, 5, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (2, 1, PATRICIA, JOHNSON, PATRICIA.JOHNSON@sakilacustomer.org, 6, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (3, 1, LINDA, WILLIAMS, LINDA.WILLIAMS@sakilacustomer.org, 7, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), CREATE TABLE `film` ( film_id SMALLINT UNSIGNED PRIMARY KEY, title VARCHAR(255), description TEXT, release_year YEAR, language_id TINYINT UNSIGNED REFERENCES language(language_id), original_language_id TINYINT UNSIGNED REFERENCES language(language_id), rental_duration TINYINT UNSIGNED, rental_rate DECIMAL(4,2), length SMALLINT UNSIGNED, replacement_cost DECIMAL(5,2), rating , special_features , last_update TIMESTAMP ); Sample rows from `film`: (1, ACADEMY DINOSAUR, A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies, 2006, 1, None, 6, 0.99, 86, 20.99, PG, Deleted Scenes,Behind the Scenes, 2006-02-15 05:03:42), (2, ACE GOLDFINGER, A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China, 2006, 1, None, 3, 4.99, 48, 12.99, G, Trailers,Deleted Scenes, 2006-02-15 05:03:42), (3, ADAPTATION HOLES, A Astounding Reflection of a Lumberjack And a Car who must Sink a Lumberjack in A Baloon Factory, 2006, 1, None, 7, 2.99, 50, 18.99, NC-17, Trailers,Deleted Scenes, 2006-02-15 05:03:42), CREATE TABLE `film_actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES actor(actor_id), film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), last_update TIMESTAMP ); Sample rows from `film_actor`: (1, 1, 2006-02-15 05:05:03), (1, 23, 2006-02-15 05:05:03), (1, 25, 2006-02-15 05:05:03), CREATE TABLE `film_category` ( film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), category_id TINYINT UNSIGNED PRIMARY KEY REFERENCES category(category_id), last_update TIMESTAMP ); Sample rows from `film_category`: (1, 6, 2006-02-15 05:07:09), (2, 11, 2006-02-15 05:07:09), (3, 6, 2006-02-15 05:07:09), CREATE TABLE `film_text` ( film_id SMALLINT PRIMARY KEY, title VARCHAR(255), description TEXT ); CREATE TABLE `inventory` ( inventory_id MEDIUMINT UNSIGNED PRIMARY KEY, film_id SMALLINT UNSIGNED REFERENCES film(film_id), store_id TINYINT UNSIGNED REFERENCES store(store_id), last_update TIMESTAMP ); Sample rows from `inventory`: (1, 1, 1, 2006-02-15 05:09:17), (2, 1, 1, 2006-02-15 05:09:17), (3, 1, 1, 2006-02-15 05:09:17), CREATE TABLE `language` ( language_id TINYINT UNSIGNED PRIMARY KEY, name CHAR(20), last_update TIMESTAMP ); CREATE TABLE `payment` ( payment_id SMALLINT UNSIGNED PRIMARY KEY, customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), rental_id INT REFERENCES rental(rental_id), amount DECIMAL(5,2), payment_date DATETIME, last_update TIMESTAMP ); Sample rows from `payment`: (1, 1, 1, 76, 2.99, 2005-05-25 11:30:37, 2006-02-15 22:12:30), (2, 1, 1, 573, 0.99, 2005-05-28 10:35:23, 2006-02-15 22:12:30), (3, 1, 1, 1185, 5.99, 2005-06-15 00:54:12, 2006-02-15 22:12:30), CREATE TABLE `rental` ( rental_id INT PRIMARY KEY, rental_date DATETIME, inventory_id MEDIUMINT UNSIGNED REFERENCES inventory(inventory_id), customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), return_date DATETIME, staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), last_update TIMESTAMP ); Sample rows from `rental`: (1, 2005-05-24 22:53:30, 367, 130, 2005-05-26 22:04:30, 1, 2006-02-15 21:30:53), (2, 2005-05-24 22:54:33, 1525, 459, 2005-05-28 19:40:33, 1, 2006-02-15 21:30:53), (3, 2005-05-24 23:03:39, 1711, 408, 2005-06-01 22:12:39, 1, 2006-02-15 21:30:53), CREATE TABLE `staff` ( staff_id TINYINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), address_id SMALLINT UNSIGNED REFERENCES address(address_id), picture BLOB, email VARCHAR(50), store_id TINYINT UNSIGNED, active BOOLEAN, username VARCHAR(16), password VARCHAR(40), last_update TIMESTAMP ); CREATE TABLE `store` ( store_id TINYINT UNSIGNED PRIMARY KEY, manager_staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), address_id SMALLINT UNSIGNED REFERENCES address(address_id), last_update TIMESTAMP ); ",
        "output": "SELECT COUNT(*) FROM customer WHERE active = '1'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the id and name of the stadium where the largest number of injury accidents occurred. ###filtered_database_schema: CREATE TABLE `stadium` ( id INT PRIMARY KEY, name TEXT, Home_Games INT, Average_Attendance REAL, Total_Attendance REAL, Capacity_Percentage REAL ); Sample rows from `stadium`: (1, Cowboys Stadium, 8, 87047.0, 696377.0, 108.8), (2, FedExField, 8, 83172.0, 665380.0, 90.7), (3, New Meadowlands Stadium, 8, 79019.0, 632156.0, 95.8), CREATE TABLE `game` ( stadium_id INT REFERENCES stadium(id), id INT PRIMARY KEY, Season INT, Date TEXT, Home_team TEXT, Away_team TEXT, Score TEXT, Competition TEXT ); Sample rows from `game`: (1, 1, 2007, 18 May 2007, Quruvchi, Pakhtakor, 1–1, League), (2, 2, 2007, 22 September 2007, Pakhtakor, Quruvchi, 0–0, League), (3, 3, 2007, 9 December 2007, Pakhtakor, Quruvchi, 0–0 (7:6), Cup), CREATE TABLE `injury_accident` ( game_id INT REFERENCES game(id), id INT PRIMARY KEY, Player TEXT, Injury TEXT, Number_of_matches TEXT, Source TEXT ); Sample rows from `injury_accident`: (1, 1, Davide Santon, Clean-up surgery on his right knee, 12, inter.it), (2, 2, Maicon, Knee problem, 2, inter.it), (3, 3, Dejan Stanković, Hamstring muscle strain in his left thigh, 2, inter.it), ",
        "output": "SELECT t1.id ,  t1.name FROM stadium as t1 JOIN game as t2 ON t1.id  =  t2.stadium_id JOIN injury_accident as t3 ON t2.id  =  t3.game_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the unit of measure and category code for the 'chervil' product? ###filtered_database_schema: CREATE TABLE `Ref_Characteristic_Types` ( characteristic_type_code VARCHAR(15) PRIMARY KEY, characteristic_type_description VARCHAR(80) ); Sample rows from `Ref_Characteristic_Types`: (Grade, Grade), (Purity, Purity), CREATE TABLE `Ref_Colors` ( color_code VARCHAR(15) PRIMARY KEY, color_description VARCHAR(80) ); Sample rows from `Ref_Colors`: (9, red), (5, green), (1, yellow), CREATE TABLE `Ref_Product_Categories` ( product_category_code VARCHAR(15) PRIMARY KEY, product_category_description VARCHAR(80), unit_of_measure VARCHAR(20) ); Sample rows from `Ref_Product_Categories`: (Herbs, Herbs, Handful ), (Seeds, Seeds, Weight - pound,kilo.), (Spices, Spices, Weight - pound,kilo.), CREATE TABLE `Characteristics` ( characteristic_id INTEGER, characteristic_type_code VARCHAR(15) REFERENCES Ref_Characteristic_Types(characteristic_type_code), characteristic_data_type VARCHAR(10), characteristic_name VARCHAR(80), other_characteristic_details VARCHAR(255) ); Sample rows from `Characteristics`: (1, Grade, numquam, slow, None), (2, Grade, doloribus, fast, None), (3, Purity, rem, warm, None), CREATE TABLE `Products` ( product_id INTEGER, color_code VARCHAR(15) REFERENCES Ref_Colors(color_code), product_category_code VARCHAR(15) REFERENCES Ref_Product_Categories(product_category_code), product_name VARCHAR(80), typical_buying_price VARCHAR(20), typical_selling_price VARCHAR(20), product_description VARCHAR(255), other_product_details VARCHAR(255) ); Sample rows from `Products`: (1, 4, Spices, cumin, , 2878.3, et, None), (2, 2, Spices, peper, 352447.2874677, 1892070.2803543, rerum, None), (3, 9, Herbs, basil, 503.8431967, 0.1859512, officia, None), CREATE TABLE `Product_Characteristics` ( product_id INTEGER REFERENCES Products(product_id), characteristic_id INTEGER REFERENCES Characteristics(characteristic_id), product_characteristic_value VARCHAR(50) ); Sample rows from `Product_Characteristics`: (13, 13, low), (11, 2, low), (5, 15, low), ",
        "output": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products as t1 JOIN ref_product_categories as t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"chervil\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List all the customers in increasing order of IDs. ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_name VARCHAR(40) ); Sample rows from `Customers`: (194, America Jaskolski), (214, Ellsworth Paucek), (256, Mrs. Hanna Willms), CREATE TABLE `Services` ( Service_ID INTEGER, Service_name VARCHAR(40) ); Sample rows from `Services`: (1, New policy application), (4, Close a policy), (6, Change a policy), CREATE TABLE `Available_Policies` ( Policy_ID INTEGER PRIMARY KEY, policy_type_code CHAR(15), Customer_Phone VARCHAR(255) ); Sample rows from `Available_Policies`: (246, Life Insurance, +16(2)5838999222), (257, Property Insurance, 242.763.9214), (300, Property Insurance, 1-416-503-7735x94204), CREATE TABLE `Customers_Policies` ( Customer_ID INTEGER PRIMARY KEY REFERENCES Customers(Customer_ID), Policy_ID INTEGER PRIMARY KEY REFERENCES Available_Policies(Policy_ID), Date_Opened DATE, Date_Closed DATE ); Sample rows from `Customers_Policies`: (214, 257, 2016-11-19, 2018-03-04), (214, 301, 2016-04-12, 2018-02-07), (256, 583, 2016-07-22, 2018-02-20), CREATE TABLE `First_Notification_of_Loss` ( FNOL_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers_Policies(Customer_ID), Policy_ID INTEGER REFERENCES Customers_Policies(Policy_ID), Service_ID INTEGER REFERENCES Services(Service_ID) ); Sample rows from `First_Notification_of_Loss`: (532, 214, 257, 6), (1611, 996, 993, 9), (1722, 996, 879, 6), CREATE TABLE `Claims` ( Claim_ID INTEGER PRIMARY KEY, FNOL_ID INTEGER REFERENCES First_Notification_of_Loss(FNOL_ID), Effective_Date DATE ); Sample rows from `Claims`: (134, 1722, 1973-08-18), (145, 1611, 2014-10-19), (228, 532, 1975-05-07), CREATE TABLE `Settlements` ( Settlement_ID INTEGER PRIMARY KEY, Claim_ID INTEGER REFERENCES Claims(Claim_ID), Effective_Date DATE, Settlement_Amount REAL ); Sample rows from `Settlements`: (161, 717, 2009-11-20, 6451.65), (176, 641, 1971-06-29, 1588.45), (205, 604, 1978-09-09, 9814.39), ",
        "output": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are all the payment methods? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_content VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), other_address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 9443 Boyle Route Suite 857, Lucasville, 416, Colorado, USA, None), (2, 1969 Jabari Port Suite 393, New Sabryna, 721, SouthCarolina, USA, None), (3, 295 Hackett Curve, Reingertown, 255, NewJersey, USA, None), CREATE TABLE `Products` ( product_id INTEGER, product_details VARCHAR(255) ); Sample rows from `Products`: (1, Americano), (2, Dove Chocolate), (3, Latte), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method VARCHAR(15), customer_name VARCHAR(80), date_became_customer DATETIME, other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Cash, Dr. Julia Wuckert MD, 2018-03-01 23:20:10, None), (2, Cheque, Tillman Ernser, 2018-02-28 11:37:44, None), (3, Credit Card, Rodrick Heaney, 2018-03-09 17:41:58, None), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_address_from DATETIME, address_type VARCHAR(15), date_address_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 11, 1985-03-29 20:31:43, Billing, 1993-02-17 17:55:18), (13, 11, 2010-08-25 04:24:35, Billing, 1972-02-17 22:23:38), (2, 14, 2010-12-26 08:52:50, Residential, 1979-07-16 18:22:39), CREATE TABLE `Customer_Contact_Channels` ( customer_id INTEGER REFERENCES Customers(customer_id), channel_code VARCHAR(15), active_from_date DATETIME, active_to_date DATETIME, contact_number VARCHAR(50) ); Sample rows from `Customer_Contact_Channels`: (9, Email, 2017-12-07 18:18:15, 2018-03-23 13:37:14, 940.035.6435x0225), (2, Email, 2017-04-07 04:51:41, 2018-03-23 01:30:52, 189.449.8326x7607), (9, Email, 2017-05-25 16:08:45, 2018-03-13 07:32:25, 958-653-2640), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(15), order_date DATETIME, order_details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 15, Cancelled, 2018-03-21 11:20:46, None), (2, 3, Cancelled, 2018-03-05 06:35:33, None), (3, 5, Delivered, 2018-03-04 07:16:22, Second time), CREATE TABLE `Order_Items` ( order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), order_quantity VARCHAR(15) ); Sample rows from `Order_Items`: (14, 2, 5), (5, 2, 9), (14, 3, 2), ",
        "output": "SELECT DISTINCT payment_method FROM customers"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the camera lens names containing substring \"Digital\". ###filtered_database_schema: CREATE TABLE `mountain` ( id INT PRIMARY KEY, name TEXT, Height REAL, Prominence REAL, Range TEXT, Country TEXT ); Sample rows from `mountain`: (1, Abune Yosef / Guliba Amba, 4260.0, 1909.0, Lasta Massif, Ethiopia), (2, Ioll / Yoll, 4220.0, 350.0, Kollo Massif, Ethiopia), (3, Bada, 4195.0, 1605.0, Arsi Mountains, Ethiopia), CREATE TABLE `camera_lens` ( id INT PRIMARY KEY, brand TEXT, name TEXT, focal_length_mm REAL, max_aperture REAL ); Sample rows from `camera_lens`: (1, Olympus, Olympus 15mm f/8.0 Body Cap, 15.0, 8.0), (2, Olympus, Olympus M.Zuiko Digital ED 45mm f/1.8, 45.0, 1.8), (3, Olympus, Olympus M.Zuiko Digital ED 75mm f/1.8, 75.0, 1.8), CREATE TABLE `photos` ( id INT PRIMARY KEY, camera_lens_id INT REFERENCES camera_lens(id), mountain_id INT REFERENCES mountain(id), color TEXT, name TEXT ); Sample rows from `photos`: (1, 1, 20, RBG, monkey), (2, 10, 2, RBG, rabbits), (3, 10, 1, Black/White, deers), ",
        "output": "SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available? ###filtered_database_schema: CREATE TABLE `station` ( id INTEGER, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT ); Sample rows from `station`: (2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013), (3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013), (4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013), CREATE TABLE `status` ( station_id INTEGER REFERENCES station(id), bikes_available INTEGER, docks_available INTEGER, time TEXT ); Sample rows from `status`: (3, 12, 3, 2015-06-02 12:46:02), (3, 12, 3, 2015-06-02 12:47:02), (3, 12, 3, 2015-06-02 12:48:02), CREATE TABLE `trip` ( id INTEGER, duration INTEGER, start_date TEXT, start_station_name TEXT, start_station_id INTEGER, end_date TEXT, end_station_name TEXT, end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER ); Sample rows from `trip`: (900504, 384, 8/21/2015 17:03, Howard at 2nd, 63, 8/21/2015 17:10, San Francisco Caltrain 2 (330 Townsend), 69, 454, Subscriber, 94041), (900505, 588, 8/21/2015 17:03, South Van Ness at Market, 66, 8/21/2015 17:13, San Francisco Caltrain 2 (330 Townsend), 69, 574, Subscriber, 95119), (900506, 196, 8/21/2015 17:04, Market at Sansome, 77, 8/21/2015 17:07, Harry Bridges Plaza (Ferry Building), 50, 636, Subscriber, 94925), CREATE TABLE `weather` ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER ); Sample rows from `weather`: (8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107), (8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107), (8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107), ",
        "output": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING MIN(bikes_available)  <  7"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of tweets in record. ###filtered_database_schema: CREATE TABLE `follows` ( f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid), f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid) ); Sample rows from `follows`: (1, 2), (2, 3), (7, 1), CREATE TABLE `tweets` ( id bigint(20) PRIMARY KEY, uid int(11) REFERENCES user_profiles(uid), text char(140), createdate datetime ); Sample rows from `tweets`: (1, 1, Hello I'm Tony Stark., 2018-03-09 20:00:14), (2, 3, Today I have went shopping at Laffayette., 2018-03-09 20:01:02), (4, 1, My company is hiring interns., 2018-03-12 02:30:30), CREATE TABLE `user_profiles` ( uid int(11) PRIMARY KEY, name varchar(255), email varchar(255), partitionid int(11), followers int(11) ); Sample rows from `user_profiles`: (1, Iron Man, ts@richest.com, 1, 6662425), (2, Mary, Mary@yale.edu, 2, 890), (3, Black Widow , bw@superhero.com, 23, 35425845), ",
        "output": "SELECT COUNT(*) FROM tweets"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the list of page size which have more than 3 product listed ###filtered_database_schema: CREATE TABLE `product` ( product_id INT PRIMARY KEY, product TEXT, dimensions TEXT, dpi REAL, pages_per_minute_color REAL, max_page_size TEXT, interface TEXT ); Sample rows from `product`: (1, Fujitsu fi-6130 A4 Series Scanner, 301 x 160 x 158, 600.0, 30.0, A4, USB 2.0), (2, Plustek MobileOffice D28 Corporate, 303 x 94 x 60, 600.0, 28.0, A4, USB 2.0), (3, Xerox Travel Scanner 100, 289 x 51 x 38, 600.0, 4.0, A4, USB 2.0), CREATE TABLE `store` ( Store_ID INT PRIMARY KEY, Store_Name TEXT, Type TEXT, Area_size REAL, Number_of_product_category REAL, Ranking INT ); Sample rows from `store`: (1, Miramichi, City Mall, 179.84, 17811.0, 2), (2, Neguac, Village Store, 26.69, 1678.0, 3), (3, Rogersville, Village Store, 7.23, 1170.0, 1), CREATE TABLE `district` ( District_ID INT PRIMARY KEY, District_name TEXT, Headquartered_City TEXT, City_Population REAL, City_Area REAL ); Sample rows from `district`: (1, Attock District, Attock City, 94620.0, 20.0), (2, Bahawalnagar District, Bahawalnagar City, 134936.0, 13.0), (3, Bahawalpur District, Bahawalpur City, 530438.0, 38.0), CREATE TABLE `store_product` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), Product_ID INT PRIMARY KEY REFERENCES product(Product_ID) ); Sample rows from `store_product`: (1, 1), (1, 2), (1, 3), CREATE TABLE `store_district` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), District_ID INT REFERENCES district(District_ID) ); Sample rows from `store_district`: (1, 15), (2, 15), (3, 11), ",
        "output": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING COUNT(*)  >  3"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many students play each sport? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Video_Games` ( GameID INTEGER, GName VARCHAR(40), GType VARCHAR(40) ); Sample rows from `Video_Games`: (1, RNG Stone, Collectible card game), (2, The Vanishing of Eric Calder, Walking Simulator), (3, Grand Term Assignment, Role-playing game), CREATE TABLE `Plays_Games` ( StuID INTEGER REFERENCES Student(StuID), GameID INTEGER REFERENCES Video_Games(GameID), Hours_Played INTEGER ); Sample rows from `Plays_Games`: (1001, 1, 35), (1001, 2, 15), (1001, 5, 1), CREATE TABLE `SportsInfo` ( StuID INTEGER REFERENCES Student(StuID), SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1) ); Sample rows from `SportsInfo`: (1001, Athletics, 2, 5, N), (1002, Football, 7, 20, Y), (1003, Football, 45, 18, Y), ",
        "output": "SELECT sportname ,  COUNT(*) FROM sportsinfo GROUP BY sportname"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the price ranges of five star hotels? ###filtered_database_schema: CREATE TABLE `Ref_Hotel_Star_Ratings` ( star_rating_code CHAR(15) PRIMARY KEY, star_rating_description VARCHAR(80) ); Sample rows from `Ref_Hotel_Star_Ratings`: (1, star), (2, star), (3, star), CREATE TABLE `Locations` ( Location_ID INTEGER, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Locations`: (333, Astro Orbiter, 660 Shea Crescent, None), (368, African Animals, 254 Ottilie Junction, None), (417, American Adventure, 53815 Sawayn Tunnel Apt. 297, None), CREATE TABLE `Ref_Attraction_Types` ( Attraction_Type_Code CHAR(15) PRIMARY KEY, Attraction_Type_Description VARCHAR(255) ); Sample rows from `Ref_Attraction_Types`: (2, park), (3, garden), (5, gallery), CREATE TABLE `Visitors` ( Tourist_ID INTEGER PRIMARY KEY, Tourist_Details VARCHAR(255) ); Sample rows from `Visitors`: (164, Toney), (189, Graciela), (204, Vincent), CREATE TABLE `Features` ( Feature_ID INTEGER, Feature_Details VARCHAR(255) ); Sample rows from `Features`: (523, cafe), (528, park), (543, garden), CREATE TABLE `Hotels` ( hotel_id INTEGER, star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code), pets_allowed_yn CHAR(1), price_range REAL, other_hotel_details VARCHAR(255) ); Sample rows from `Hotels`: (123, 5, 1, 2914989.571, None), (144, 4, , , None), (172, 5, , 17012.682586009, None), CREATE TABLE `Tourist_Attractions` ( Tourist_Attraction_ID INTEGER, Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code), Location_ID INTEGER REFERENCES Locations(Location_ID), How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Tourist_Attractions`: (2113, 2, 579, bus, art museum, None, None, None), (2701, 6, 417, walk, UK gallery, None, None, None), (5076, 2, 868, shuttle, flying elephant, None, None, None), CREATE TABLE `Street_Markets` ( Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Market_Details VARCHAR(255) ); Sample rows from `Street_Markets`: (6852, Broadway), (7067, Fish Farm Market), CREATE TABLE `Shops` ( Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Shop_Details VARCHAR(255) ); Sample rows from `Shops`: (8429, soup), (8449, coffee), (8698, Flower), CREATE TABLE `Museums` ( Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Museum_Details VARCHAR(255) ); Sample rows from `Museums`: (2113, Yale Center for British Art), (2701, The Metropolitan Museum of Art), (5076, MoMA), CREATE TABLE `Royal_Family` ( Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Royal_Family_Details VARCHAR(255) ); Sample rows from `Royal_Family`: (9561, None), (9919, None), CREATE TABLE `Theme_Parks` ( Theme_Park_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Theme_Park_Details VARCHAR(255) ); Sample rows from `Theme_Parks`: (5265, Disney), (6476, Sea World), (6523, Universal Studios), CREATE TABLE `Visits` ( Visit_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID), Visit_Date DATETIME, Visit_Details VARCHAR(40) ); Sample rows from `Visits`: (183, 6653, 377, 2004-08-21 03:06:14, ), (268, 5076, 204, 2013-08-06 05:35:51, ), (273, 9360, 211, 2013-10-27 09:56:08, ), CREATE TABLE `Photos` ( Photo_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Photos`: (211, 8449, game1, None, 702, None), (280, 7067, game2, None, 762, None), (303, 5076, game3, None, 392, None), CREATE TABLE `Staff` ( Staff_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(40), Other_Details VARCHAR(255) ); Sample rows from `Staff`: (170, 6476, Whitney, None), (219, 6476, Kaela, None), (237, 7067, Eunice, None), CREATE TABLE `Tourist_Attraction_Features` ( Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID) ); Sample rows from `Tourist_Attraction_Features`: (5076, 528), (5076, 681), (5265, 523), ",
        "output": "SELECT price_range FROM hotels WHERE star_rating_code  =  \"5\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all instructors in the Comp. Sci. department? ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the total access count of documents that are of the most common document type? ###filtered_database_schema: CREATE TABLE `Roles` ( role_code VARCHAR(15) PRIMARY KEY, role_description VARCHAR(80) ); Sample rows from `Roles`: (DBA, Database Administrator), (PROJ-MGR, Project Manager), CREATE TABLE `Users` ( user_id INTEGER, role_code VARCHAR(15) REFERENCES Roles(role_code), user_name VARCHAR(40), user_login VARCHAR(40), password VARCHAR(40) ); Sample rows from `Users`: (1, PROJ-MGR, dickens.elta, 0, e72b5a2d50b39a8760764a5f7a9d68ca2f076877), (2, DBA, tremblay.raheem, 1, 9bc25a040d5647ced5ec32e1a455e90fafc10bcb), (3, DBA, lynn.haley, 0, 90db8f51449e6c39e2a01f0b649d5a92fe76bbbb), CREATE TABLE `Document_Structures` ( document_structure_code VARCHAR(15) PRIMARY KEY, parent_document_structure_code VARCHAR(15), document_structure_description VARCHAR(80) ); Sample rows from `Document_Structures`: (1, 1, Header), (6, 1, Main section), (8, 1, Bib), CREATE TABLE `Functional_Areas` ( functional_area_code VARCHAR(15) PRIMARY KEY, parent_functional_area_code VARCHAR(15), functional_area_description VARCHAR(80) ); Sample rows from `Functional_Areas`: (8, 8, Signature), (1, 8, Acknowledgement), (9, 8, Keep blank), CREATE TABLE `Images` ( image_id INTEGER, image_alt_text VARCHAR(80), image_name VARCHAR(40), image_url VARCHAR(255) ); Sample rows from `Images`: (1, Lea, top1, http://www.rempelnader.com/1.jpg), (2, Arden, top2, http://connellykertzmann.org/1.jpg), (3, Mohamed, top3, http://www.bernierconnelly.com/1.jpg), CREATE TABLE `Documents` ( document_code VARCHAR(15) PRIMARY KEY, document_structure_code VARCHAR(15) REFERENCES Document_Structures(document_structure_code), document_type_code VARCHAR(15), access_count INTEGER, document_name VARCHAR(80) ); Sample rows from `Documents`: (217, 8, Book, 1864, Learning English), (621, 1, Paper, 8208, Research about Art history), (958, 8, Book, 3769, Learning Database), CREATE TABLE `Document_Functional_Areas` ( document_code VARCHAR(15) REFERENCES Documents(document_code), functional_area_code VARCHAR(15) REFERENCES Functional_Areas(functional_area_code) ); Sample rows from `Document_Functional_Areas`: (675, 9), (930, 1), (217, 1), CREATE TABLE `Document_Sections` ( section_id INTEGER, document_code VARCHAR(15) REFERENCES Documents(document_code), section_sequence INTEGER, section_code VARCHAR(20), section_title VARCHAR(80) ); Sample rows from `Document_Sections`: (12, 714, 6072, 70, after), (15, 217, 4510, 14, after), (19, 675, 7236, 90, after), CREATE TABLE `Document_Sections_Images` ( section_id INTEGER PRIMARY KEY REFERENCES Document_Sections(section_id), image_id INTEGER PRIMARY KEY REFERENCES Images(image_id) ); Sample rows from `Document_Sections_Images`: (93, 6), (86, 2), (27, 3), ",
        "output": "SELECT SUM(access_count) FROM documents GROUP BY document_type_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names and scores of all wines? ###filtered_database_schema: CREATE TABLE `grapes` ( ID INTEGER, Grape TEXT PRIMARY KEY, Color TEXT ); Sample rows from `grapes`: (1, Barbera, Red), (2, Cabernet Franc, Red), (3, Cabernet Sauvingnon, Red), CREATE TABLE `appellations` ( No INTEGER, Appelation TEXT PRIMARY KEY, County TEXT, State TEXT, Area TEXT, isAVA TEXT ); Sample rows from `appellations`: (1, Alexander Valley, Sonoma, California, North Coast, Yes), (2, Amador County, Amador, California, Sierra Foothills, No), (3, Amador-Mendocino-Sonoma Counties, N/A, California, N/A, No), CREATE TABLE `wine` ( No INTEGER, Grape TEXT REFERENCES grapes(Grape), Winery TEXT, Appelation TEXT REFERENCES appellations(Appelation), State TEXT, Name TEXT, Year INTEGER, Price INTEGER, Score INTEGER, Cases INTEGER, Drink TEXT ); Sample rows from `wine`: (1, Zinfandel, Robert Biale, St. Helena, California, Old Kraft Vineyard, 2008, 44, 93, 275, now), (2, Zinfandel, Chiarello Family, Napa Valley, California, Giana, 2008, 35, 93, 480, now), (3, Zinfandel, Robert Biale, Napa Valley, California, Black Chicken, 2008, 40, 91, 2700, 2012), ",
        "output": "SELECT name ,  score FROM wine"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the first name and last name of each male member in club \"Hopkins Student Enterprises\"? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Club` ( ClubID INTEGER, ClubName VARCHAR(40), ClubDesc VARCHAR(1024), ClubLocation VARCHAR(40) ); Sample rows from `Club`: (1, Bootup Baltimore, Refurbish computers; teach kids and adults about computer basics., AKW), (2, Hopkins Student Enterprises, Venture capital fund for student business., AKW), (3, Pen and Paper Gaming, Play pen and paper games on campus., HHH), CREATE TABLE `Member_of_club` ( StuID INTEGER REFERENCES Student(StuID), ClubID INTEGER REFERENCES Club(ClubID), Position VARCHAR(40) ); Sample rows from `Member_of_club`: (1001, 1, President), (1007, 4, Vice-President), (1008, 2, CTO), ",
        "output": "SELECT t3.fname ,  t3.lname FROm club as t1 JOIN member_of_club as t2 ON t1.clubid  =  t2.clubid JOIN student as t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"m\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the product names whose average product price is below 1000000. ###filtered_database_schema: CREATE TABLE `Ref_Payment_Methods` ( payment_method_code CHAR(10) PRIMARY KEY, payment_method_description VARCHAR(80) ); Sample rows from `Ref_Payment_Methods`: (American E, credit), (MasterCard, debit), (Visa, Visa), CREATE TABLE `Ref_Service_Types` ( Service_Type_Code CHAR(15) PRIMARY KEY, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255) ); Sample rows from `Ref_Service_Types`: (1, 1, provide photo service), (2, 1, provide dinning service), (3, 1, provide filming service), CREATE TABLE `Addresses` ( Address_ID VARCHAR(100) PRIMARY KEY, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Addresses`: (110, 4753 Dach Highway, Suite 846, Feliciaberg, Florida, None), (124, 391 Vandervort Fall Apt. 446, Apt. 107, West Sherwoodstad, Indiana, None), (148, 809 Izabella Islands, Suite 271, Schadenville, Ohio, None), CREATE TABLE `Products` ( Product_ID VARCHAR(100) PRIMARY KEY, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Products`: (11, photo, 4448536, None, None), (154, film, 2302, None, None), (156, film, 17622723, None, None), CREATE TABLE `Marketing_Regions` ( Marketing_Region_Code CHAR(15) PRIMARY KEY, Marketing_Region_Name VARCHAR(255), Marketing_Region_Descriptrion VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Marketing_Regions`: (CA, Canada, Our target market, None), (CN, China, Our largest market, None), (ES, Spain, , None), CREATE TABLE `Clients` ( Client_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Clients`: (423, 201, branson94@example.net, Clifford, (042)912-3404x5135, VIP), (426, 383, alba04@example.com, Bettye, (604)849-0214, None), (478, 15, westley30@example.net, Reinhold, 1-048-214-4640x64380, None), CREATE TABLE `Drama_Workshop_Groups` ( Workshop_Group_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Currency_Code CHAR(15), Marketing_Region_Code CHAR(15), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Drama_Workshop_Groups`: (136, 383, EU, FR, Amely Cafe, 122-084-8029, amely.ruecker@example.com, None), (140, 180, EU, DE, Veda Film, 793-966-9311x5303, breitenberg.veda@example.com, None), (176, 286, EU, RU, Queen Art, 492-463-5967, quigley.queen@example.org, Good), CREATE TABLE `Performers` ( Performer_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Performers`: (153, 124, Shawna, 664.495.1939, krogahn@example.com, None), (211, 124, Ashley, 893-536-8857, preston45@example.net, None), (313, 39, Oren, 1-952-052-6685x28082, ferry.carolina@example.net, None), CREATE TABLE `Customers` ( Customer_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Customers`: (240, 286, Harold, 624-096-7791, jerde.harmon@example.com, None), (267, 98, Federico, 914-915-7483, johnson27@example.com, None), (304, 369, Samson, 1-463-121-4086x655, dalton75@example.com, None), CREATE TABLE `Stores` ( Store_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Marketing_Region_Code CHAR(15) REFERENCES Marketing_Regions(Marketing_Region_Code), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Stores`: (150, 286, IN, FJA Filming, +65(1)3590790358, fjacobson@example.com, None), (229, 266, CA, Rob Dinning, 1-327-185-9368, rborer@example.org, 5 stars), (231, 230, ES, Adan Dinning, 896-931-9633x869, adan93@example.com, None), CREATE TABLE `Bookings` ( Booking_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Clients(Client_ID), Workshop_Group_ID VARCHAR(100) REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Status_Code CHAR(15), Store_ID INTEGER, Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Bookings`: (1, 938, 140, good, 8, 2016-12-12 10:43:01, 2013-03-10 18:47:05, 1997-11-21 10:07:40, None), (2, 868, 838, stop, 7, 1976-08-20 00:33:08, 2009-07-09 09:18:38, 1976-01-08 07:19:23, None), (3, 735, 176, good, 9, 1975-11-23 06:28:47, 1989-01-05 19:24:45, 1990-03-16 19:38:47, None), CREATE TABLE `Performers_in_Bookings` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Performer_ID INTEGER PRIMARY KEY REFERENCES Performers(Performer_ID) ); Sample rows from `Performers_in_Bookings`: (1, 153), (1, 341), (2, 466), CREATE TABLE `Customer_Orders` ( Order_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Store_ID INTEGER REFERENCES Stores(Store_ID), Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 516, 231, 1994-08-03 12:34:58, 1977-03-11 03:58:19, 1992-07-21 22:11:11, None), (2, 418, 229, 2014-07-10 10:56:01, 1996-08-26 19:19:59, 1998-08-22 17:57:32, None), (3, 712, 229, 1981-06-20 16:29:43, 1980-12-19 05:49:35, 2011-04-13 07:15:35, None), CREATE TABLE `Order_Items` ( Order_Item_ID INTEGER, Order_ID INTEGER REFERENCES Customer_Orders(Order_ID), Product_ID INTEGER REFERENCES Products(Product_ID), Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 3, 233, 1, None), (2, 15, 300, 2, None), (3, 12, 300, 1, None), CREATE TABLE `Invoices` ( Invoice_ID INTEGER, Order_ID INTEGER REFERENCES Bookings(Booking_ID) REFERENCES Customer_Orders(Order_ID), payment_method_code CHAR(15) REFERENCES Ref_Payment_Methods(payment_method_code), Product_ID INTEGER, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER ); Sample rows from `Invoices`: (128, 14, MasterCard, 4, 2, None, 1), (162, 13, MasterCard, 9, 2, None, 9), (164, 7, Visa, 7, 2, None, 1), CREATE TABLE `Services` ( Service_ID INTEGER PRIMARY KEY, Service_Type_Code CHAR(15) REFERENCES Ref_Service_Types(Service_Type_Code), Workshop_Group_ID INTEGER REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Services`: (191, 1, 415, None, film, 58932775.8822, None), (219, 2, 838, None, film, 2704.4719, None), (220, 1, 708, None, dinning, 6888.8306, None), CREATE TABLE `Bookings_Services` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Product_ID INTEGER PRIMARY KEY REFERENCES Services(Service_ID) ); Sample rows from `Bookings_Services`: (1, 396), (1, 779), (4, 191), CREATE TABLE `Invoice_Items` ( Invoice_Item_ID INTEGER, Invoice_ID INTEGER REFERENCES Invoices(Invoice_ID), Order_ID INTEGER REFERENCES Bookings_Services(Order_ID), Order_Item_ID INTEGER REFERENCES Order_Items(Order_Item_ID), Product_ID INTEGER REFERENCES Bookings_Services(Product_ID), Order_Quantity INTEGER, Other_Item_Details VARCHAR(255) ); Sample rows from `Invoice_Items`: (1, 128, 1, 5, 396, 2, None), (2, 162, 4, 6, 191, 6, Good quality), ",
        "output": "SELECT product_name FROM products GROUP BY product_name HAVING AVG(product_price)  <  1000000"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many students are older than 20 in each dorm? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT COUNT(*) ,  t3.dorm_name FROM student as t1 JOIN lives_in as t2 ON t1.stuid  =  t2.stuid JOIN dorm as t3 ON t3.dormid  =  t2.dormid WHERE t1.age  >  20 GROUP BY t3.dorm_name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the highest mountain in us ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX(mountain_altitude) FROM mountain );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what are some good restaurants on bethel island rd in bethel island ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the author in the \" University of Michigan \" whose papers have more than 5000 total citations . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT t1.name FROM organization as t2 JOIN author as t1 ON t2.oid  =  t1.oid JOIN writes as t3 ON t3.aid  =  t1.aid JOIN publication as t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" GROUP BY t1.name HAVING SUM(t4.citation_num)  >  5000;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the name, time, and service for all trains. ###filtered_database_schema: CREATE TABLE `station` ( Station_ID INT PRIMARY KEY, Name TEXT, Annual_entry_exit REAL, Annual_interchanges REAL, Total_Passengers REAL, Location TEXT, Main_Services TEXT, Number_of_Platforms INT ); Sample rows from `station`: (1, London Waterloo, 94.046, 9.489, 103.534, London, South Western Main Line West of England Main Line, 19), (2, London Victoria, 76.231, 9.157, 85.38, London, Brighton Main Line Chatham Main Line, 19), (3, London Bridge, 52.634, 8.742, 61.376, London, South Eastern Main Line Thameslink, 12), CREATE TABLE `train` ( Train_ID INT PRIMARY KEY, Name TEXT, Time TEXT, Service TEXT ); Sample rows from `train`: (1, Ananthapuri Express, 17:15, Daily), (2, Guruvayur Express, 22:10, Daily), (3, Guruvayur Express, 4:49, Daily), CREATE TABLE `train_station` ( Train_ID INT PRIMARY KEY REFERENCES train(Train_ID), Station_ID INT PRIMARY KEY REFERENCES station(Station_ID) ); Sample rows from `train_station`: (1, 1), (2, 1), (3, 1), ",
        "output": "SELECT name ,  time ,  service FROM train"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names, headquarters and founders of the company with the highest revenue? ###filtered_database_schema: CREATE TABLE `Manufacturers` ( Code INTEGER, Name VARCHAR(255), Headquarter VARCHAR(255), Founder VARCHAR(255), Revenue REAL ); Sample rows from `Manufacturers`: (1, Sony, Tokyo, Andy, 120.0), (2, Creative Labs, Austin, Owen, 100.0), (3, Hewlett-Packard, Los Angeles, James, 50.0), CREATE TABLE `Products` ( Code INTEGER, Name VARCHAR(255), Price DECIMAL, Manufacturer INTEGER REFERENCES Manufacturers(Code) ); Sample rows from `Products`: (1, Hard drive, 240, 5), (2, Memory, 120, 6), (3, ZIP drive, 150, 4), ",
        "output": "SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many faculty members do we have for each faculty rank? ###filtered_database_schema: CREATE TABLE `Activity` ( actid INTEGER, activity_name varchar(25) ); Sample rows from `Activity`: (770, Mountain Climbing), (771, Canoeing), (772, Kayaking), CREATE TABLE `Participates_in` ( stuid INTEGER REFERENCES Student(StuID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Participates_in`: (1001, 770), (1001, 771), (1001, 777), CREATE TABLE `Faculty_Participates_in` ( FacID INTEGER REFERENCES Faculty(FacID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Faculty_Participates_in`: (1082, 784), (1082, 785), (1082, 790), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), ",
        "output": "SELECT rank ,  COUNT(*) FROM faculty GROUP BY rank"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Liwen Xiong publication 2015 ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the distinct last names of the students who have class president votes. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Voting_record` ( StuID INTEGER REFERENCES Student(StuID), Registration_Date VARCHAR(12), Election_Cycle VARCHAR(12), President_Vote INTEGER REFERENCES Student(StuID), Vice_President_Vote INTEGER REFERENCES Student(StuID), Secretary_Vote INTEGER REFERENCES Student(StuID), Treasurer_Vote INTEGER REFERENCES Student(StuID), Class_President_Vote INTEGER REFERENCES Student(StuID), Class_Senator_Vote INTEGER REFERENCES Student(StuID) ); Sample rows from `Voting_record`: (1001, 08/30/2015, Spring, 1004, 1007, 1010, 1035, 1001, 1028), (1002, 08/30/2014, Spring, 1014, 1007, 1020, 1025, 1021, 1028), (1003, 08/30/2013, Spring, 1004, 1017, 1030, 1035, 1031, 1028), ",
        "output": "SELECT DISTINCT t1.lname FROM student as t1 JOIN voting_record as t2 ON t1.stuid  =  t2.CLasS_President_VOTE"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the personal names of students not enrolled in any course. ###filtered_database_schema: CREATE TABLE `Course_Authors_and_Tutors` ( author_id INTEGER, author_tutor_ATB VARCHAR(3), login_name VARCHAR(40), password VARCHAR(40), personal_name VARCHAR(80), middle_name VARCHAR(80), family_name VARCHAR(80), gender_mf VARCHAR(1), address_line_1 VARCHAR(80) ); Sample rows from `Course_Authors_and_Tutors`: (1, 331, jmckenzie, c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b, Cathrine, Ruthie, Grant, 0, 756 Monahan Mews Spinkashire, NJ 64230-5098), (2, 975, heidenreich.ara, 24b0ee84063c3b017ab1839e01b7280f47f7c7c2, Retha, Corene, Armstrong, 0, 98623 Huels Manor Jasttown, DE 31611), (3, 349, clementina29, cdaf6c3483f19e2253659a40a3aab786a3390f78, Darius, Ethyl, Reichel, 0, 99296 Keeling Courts North Audreanne, IL 28272), CREATE TABLE `Students` ( student_id INTEGER, date_of_registration DATETIME, date_of_latest_logon DATETIME, login_name VARCHAR(40), password VARCHAR(10), personal_name VARCHAR(40), middle_name VARCHAR(40), family_name VARCHAR(40) ); Sample rows from `Students`: (1, 2015-07-22 13:32:35, 2017-10-17 22:52:26, annamae.hoppe, db8765bb6f, Wilson, Aubrey, Ward), (2, 2015-07-02 00:21:42, 2017-06-24 22:16:27, wmiller, 35faf8182a, Karson, Luella, Jaskolski), (3, 2015-10-11 03:23:27, 2018-03-10 23:22:23, ahartmann, 8e064ec4e6, Mariela, Brandt, Legros), CREATE TABLE `Subjects` ( subject_id INTEGER, subject_name VARCHAR(120) ); Sample rows from `Subjects`: (1, Computer Science), (2, Arts), (3, Language), CREATE TABLE `Courses` ( course_id INTEGER, author_id INTEGER REFERENCES Course_Authors_and_Tutors(author_id), subject_id INTEGER REFERENCES Subjects(subject_id), course_name VARCHAR(120), course_description VARCHAR(255) ); Sample rows from `Courses`: (1, 8, 1, database, database), (2, 6, 1, advanced database, advanced database), (3, 15, 1, operating system, operating system), CREATE TABLE `Student_Course_Enrolment` ( registration_id INTEGER, student_id INTEGER REFERENCES Students(student_id), course_id INTEGER REFERENCES Courses(course_id), date_of_enrolment DATETIME, date_of_completion DATETIME ); Sample rows from `Student_Course_Enrolment`: (1, 11, 2, 2017-10-09 07:09:02, 2018-02-26 07:48:52), (2, 15, 4, 2017-11-13 12:49:33, 2018-03-04 01:24:56), (3, 10, 8, 2017-10-17 13:50:40, 2018-03-22 02:53:01), CREATE TABLE `Student_Tests_Taken` ( registration_id INTEGER REFERENCES Student_Course_Enrolment(registration_id), date_test_taken DATETIME, test_result VARCHAR(255) ); Sample rows from `Student_Tests_Taken`: (12, 2018-03-25 03:27:16, Fail), (10, 2018-03-25 21:50:22, Pass), (7, 2018-03-21 00:32:25, Pass), ",
        "output": "SELECT personal_name FROM students EXCEPT SELECT t1.personal_name FROM students as t1 JOIN student_course_enrolment as t2 ON t1.student_id  =  t2.student_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: papers by sharon goldwater ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show names of ships involved in a mission launched after 1928. ###filtered_database_schema: CREATE TABLE `mission` ( Mission_ID INT PRIMARY KEY, Ship_ID INT REFERENCES ship(Ship_ID), Code TEXT, Launched_Year INT, Location TEXT, Speed_knots INT, Fate TEXT ); Sample rows from `mission`: (1, 1, VMV-1, 1930, Germany, 25, Decommissioned 1950), (2, 2, VMV-2, 1930, Germany, 25, Decommissioned 1950), (3, 3, VMV-3, 1930, Helsinki , Finland, 23, Lost (burned) 1931), CREATE TABLE `ship` ( Ship_ID INT PRIMARY KEY, Name TEXT, Type TEXT, Nationality TEXT, Tonnage INT ); Sample rows from `ship`: (1, Corbridge, Cargo ship, United Kingdom, 3687), (2, Farringford, Battle ship, United States, 3146), (3, Dromonby, Cargo ship, United Kingdom, 3627), ",
        "output": "SELECT t2.name FROM mission as t1 JOIN ship as t2 ON t1.ship_id  =  t2.ship_id WHERE t1.launched_year  >  1928"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which transportation method is used the most often to get to tourist attractions? ###filtered_database_schema: CREATE TABLE `Ref_Hotel_Star_Ratings` ( star_rating_code CHAR(15) PRIMARY KEY, star_rating_description VARCHAR(80) ); Sample rows from `Ref_Hotel_Star_Ratings`: (1, star), (2, star), (3, star), CREATE TABLE `Locations` ( Location_ID INTEGER, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Locations`: (333, Astro Orbiter, 660 Shea Crescent, None), (368, African Animals, 254 Ottilie Junction, None), (417, American Adventure, 53815 Sawayn Tunnel Apt. 297, None), CREATE TABLE `Ref_Attraction_Types` ( Attraction_Type_Code CHAR(15) PRIMARY KEY, Attraction_Type_Description VARCHAR(255) ); Sample rows from `Ref_Attraction_Types`: (2, park), (3, garden), (5, gallery), CREATE TABLE `Visitors` ( Tourist_ID INTEGER PRIMARY KEY, Tourist_Details VARCHAR(255) ); Sample rows from `Visitors`: (164, Toney), (189, Graciela), (204, Vincent), CREATE TABLE `Features` ( Feature_ID INTEGER, Feature_Details VARCHAR(255) ); Sample rows from `Features`: (523, cafe), (528, park), (543, garden), CREATE TABLE `Hotels` ( hotel_id INTEGER, star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code), pets_allowed_yn CHAR(1), price_range REAL, other_hotel_details VARCHAR(255) ); Sample rows from `Hotels`: (123, 5, 1, 2914989.571, None), (144, 4, , , None), (172, 5, , 17012.682586009, None), CREATE TABLE `Tourist_Attractions` ( Tourist_Attraction_ID INTEGER, Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code), Location_ID INTEGER REFERENCES Locations(Location_ID), How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Tourist_Attractions`: (2113, 2, 579, bus, art museum, None, None, None), (2701, 6, 417, walk, UK gallery, None, None, None), (5076, 2, 868, shuttle, flying elephant, None, None, None), CREATE TABLE `Street_Markets` ( Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Market_Details VARCHAR(255) ); Sample rows from `Street_Markets`: (6852, Broadway), (7067, Fish Farm Market), CREATE TABLE `Shops` ( Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Shop_Details VARCHAR(255) ); Sample rows from `Shops`: (8429, soup), (8449, coffee), (8698, Flower), CREATE TABLE `Museums` ( Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Museum_Details VARCHAR(255) ); Sample rows from `Museums`: (2113, Yale Center for British Art), (2701, The Metropolitan Museum of Art), (5076, MoMA), CREATE TABLE `Royal_Family` ( Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Royal_Family_Details VARCHAR(255) ); Sample rows from `Royal_Family`: (9561, None), (9919, None), CREATE TABLE `Theme_Parks` ( Theme_Park_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Theme_Park_Details VARCHAR(255) ); Sample rows from `Theme_Parks`: (5265, Disney), (6476, Sea World), (6523, Universal Studios), CREATE TABLE `Visits` ( Visit_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID), Visit_Date DATETIME, Visit_Details VARCHAR(40) ); Sample rows from `Visits`: (183, 6653, 377, 2004-08-21 03:06:14, ), (268, 5076, 204, 2013-08-06 05:35:51, ), (273, 9360, 211, 2013-10-27 09:56:08, ), CREATE TABLE `Photos` ( Photo_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Photos`: (211, 8449, game1, None, 702, None), (280, 7067, game2, None, 762, None), (303, 5076, game3, None, 392, None), CREATE TABLE `Staff` ( Staff_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(40), Other_Details VARCHAR(255) ); Sample rows from `Staff`: (170, 6476, Whitney, None), (219, 6476, Kaela, None), (237, 7067, Eunice, None), CREATE TABLE `Tourist_Attraction_Features` ( Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID) ); Sample rows from `Tourist_Attraction_Features`: (5076, 528), (5076, 681), (5265, 523), ",
        "output": "SELECT how_to_get_there FROM tourist_attractions GROUP BY how_to_get_there ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List all the information about course authors and tutors in alphabetical order of the personal name. ###filtered_database_schema: CREATE TABLE `Course_Authors_and_Tutors` ( author_id INTEGER, author_tutor_ATB VARCHAR(3), login_name VARCHAR(40), password VARCHAR(40), personal_name VARCHAR(80), middle_name VARCHAR(80), family_name VARCHAR(80), gender_mf VARCHAR(1), address_line_1 VARCHAR(80) ); Sample rows from `Course_Authors_and_Tutors`: (1, 331, jmckenzie, c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b, Cathrine, Ruthie, Grant, 0, 756 Monahan Mews Spinkashire, NJ 64230-5098), (2, 975, heidenreich.ara, 24b0ee84063c3b017ab1839e01b7280f47f7c7c2, Retha, Corene, Armstrong, 0, 98623 Huels Manor Jasttown, DE 31611), (3, 349, clementina29, cdaf6c3483f19e2253659a40a3aab786a3390f78, Darius, Ethyl, Reichel, 0, 99296 Keeling Courts North Audreanne, IL 28272), CREATE TABLE `Students` ( student_id INTEGER, date_of_registration DATETIME, date_of_latest_logon DATETIME, login_name VARCHAR(40), password VARCHAR(10), personal_name VARCHAR(40), middle_name VARCHAR(40), family_name VARCHAR(40) ); Sample rows from `Students`: (1, 2015-07-22 13:32:35, 2017-10-17 22:52:26, annamae.hoppe, db8765bb6f, Wilson, Aubrey, Ward), (2, 2015-07-02 00:21:42, 2017-06-24 22:16:27, wmiller, 35faf8182a, Karson, Luella, Jaskolski), (3, 2015-10-11 03:23:27, 2018-03-10 23:22:23, ahartmann, 8e064ec4e6, Mariela, Brandt, Legros), CREATE TABLE `Subjects` ( subject_id INTEGER, subject_name VARCHAR(120) ); Sample rows from `Subjects`: (1, Computer Science), (2, Arts), (3, Language), CREATE TABLE `Courses` ( course_id INTEGER, author_id INTEGER REFERENCES Course_Authors_and_Tutors(author_id), subject_id INTEGER REFERENCES Subjects(subject_id), course_name VARCHAR(120), course_description VARCHAR(255) ); Sample rows from `Courses`: (1, 8, 1, database, database), (2, 6, 1, advanced database, advanced database), (3, 15, 1, operating system, operating system), CREATE TABLE `Student_Course_Enrolment` ( registration_id INTEGER, student_id INTEGER REFERENCES Students(student_id), course_id INTEGER REFERENCES Courses(course_id), date_of_enrolment DATETIME, date_of_completion DATETIME ); Sample rows from `Student_Course_Enrolment`: (1, 11, 2, 2017-10-09 07:09:02, 2018-02-26 07:48:52), (2, 15, 4, 2017-11-13 12:49:33, 2018-03-04 01:24:56), (3, 10, 8, 2017-10-17 13:50:40, 2018-03-22 02:53:01), CREATE TABLE `Student_Tests_Taken` ( registration_id INTEGER REFERENCES Student_Course_Enrolment(registration_id), date_test_taken DATETIME, test_result VARCHAR(255) ); Sample rows from `Student_Tests_Taken`: (12, 2018-03-25 03:27:16, Fail), (10, 2018-03-25 21:50:22, Pass), (7, 2018-03-21 00:32:25, Pass), ",
        "output": "SELECT * FROM course_authors_and_tutors ORDER BY personal_name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show all school names in alphabetical order. ###filtered_database_schema: CREATE TABLE `School` ( School_id TEXT PRIMARY KEY, School_name TEXT, Location TEXT, Mascot TEXT, Enrollment INT, IHSAA_Class TEXT, IHSAA_Football_Class TEXT, County TEXT ); Sample rows from `School`: (1, Bremen, Bremen, Lions, 495, AA, AA, 50 Marshall), (2, Culver Community, Culver, Cavaliers, 287, A, A, 50 Marshall), (3, Glenn, Walkerton, Falcons, 605, AAA, AAA, 71 St. Joseph), CREATE TABLE `budget` ( School_id INT PRIMARY KEY REFERENCES School(School_id), Year INT PRIMARY KEY, Budgeted INT, total_budget_percent_budgeted REAL, Invested INT, total_budget_percent_invested REAL, Budget_invested_percent TEXT ); Sample rows from `budget`: (2, 1999, 4979, 2.0, 2134, 2.0, 42.9), (2, 2000, 3666, 2.0, 5840, 2.0, 159.3), (2, 2001, 6803, 2.0, 8335, 2.0, 122.5), CREATE TABLE `endowment` ( endowment_id INT PRIMARY KEY, School_id INT REFERENCES School(School_id), donator_name TEXT, amount REAL ); Sample rows from `endowment`: (1, 1, Monte Plata, 9.51), (2, 2, San José de Ocoa, 9.83), (3, 3, Distrito Nacional, 9.55), ",
        "output": "SELECT school_name FROM school ORDER BY school_name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return all the information for all employees without any department number. ###filtered_database_schema: CREATE TABLE `regions` ( REGION_ID decimal(5,0) PRIMARY KEY, REGION_NAME varchar(25) ); Sample rows from `regions`: (1, Europe\\r), (2, Americas\\r), (3, Asia\\r), CREATE TABLE `countries` ( COUNTRY_ID varchar(2) PRIMARY KEY, COUNTRY_NAME varchar(40), REGION_ID decimal(10,0) REFERENCES regions(REGION_ID) ); Sample rows from `countries`: (AR, Argentina, 2), (AU, Australia, 3), (BE, Belgium, 1), CREATE TABLE `departments` ( DEPARTMENT_ID decimal(4,0) PRIMARY KEY, DEPARTMENT_NAME varchar(30), MANAGER_ID decimal(6,0), LOCATION_ID decimal(4,0) ); Sample rows from `departments`: (10, Administration, 200, 1700), (20, Marketing, 201, 1800), (30, Purchasing, 114, 1700), CREATE TABLE `jobs` ( JOB_ID varchar(10) PRIMARY KEY, JOB_TITLE varchar(35), MIN_SALARY decimal(6,0), MAX_SALARY decimal(6,0) ); Sample rows from `jobs`: (AD_PRES, President, 20000, 40000), (AD_VP, Administration Vice President, 15000, 30000), (AD_ASST, Administration Assistant, 3000, 6000), CREATE TABLE `employees` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY, FIRST_NAME varchar(20), LAST_NAME varchar(25), EMAIL varchar(25), PHONE_NUMBER varchar(20), HIRE_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), SALARY decimal(8,2), COMMISSION_PCT decimal(2,2), MANAGER_ID decimal(6,0), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `employees`: (100, Steven, King, SKING, 515.123.4567, 1987-06-17, AD_PRES, 24000, 0, 0, 90), (101, Neena, Kochhar, NKOCHHAR, 515.123.4568, 1987-06-18, AD_VP, 17000, 0, 100, 90), (102, Lex, De Haan, LDEHAAN, 515.123.4569, 1987-06-19, AD_VP, 17000, 0, 100, 90), CREATE TABLE `job_history` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY REFERENCES employees(EMPLOYEE_ID), START_DATE date PRIMARY KEY, END_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `job_history`: (102, 1993-01-13, 1998-07-24, IT_PROG, 60), (101, 1989-09-21, 1993-10-27, AC_ACCOUNT, 110), (101, 1993-10-28, 1997-03-15, AC_MGR, 110), CREATE TABLE `locations` ( LOCATION_ID decimal(4,0) PRIMARY KEY, STREET_ADDRESS varchar(40), POSTAL_CODE varchar(12), CITY varchar(30), STATE_PROVINCE varchar(25), COUNTRY_ID varchar(2) REFERENCES countries(COUNTRY_ID) ); Sample rows from `locations`: (1000, 1297 Via Cola di Rie, 989, Roma, , IT), (1100, 93091 Calle della Testa, 10934, Venice, , IT), (1200, 2017 Shinjuku-ku, 1689, Tokyo, Tokyo Prefecture, JP), ",
        "output": "SELECT * FROM employees WHERE department_id  =  \"null\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the patient who most recently stayed in room 111. ###filtered_database_schema: CREATE TABLE `Physician` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), SSN INTEGER ); Sample rows from `Physician`: (1, John Dorian, Staff Internist, 111111111), (2, Elliot Reid, Attending Physician, 222222222), (3, Christopher Turk, Surgical Attending Physician, 333333333), CREATE TABLE `Department` ( DepartmentID INTEGER, Name VARCHAR(30), Head INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Department`: (1, General Medicine, 4), (2, Surgery, 7), (3, Psychiatry, 9), CREATE TABLE `Affiliated_With` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID), PrimaryAffiliation BOOLEAN ); Sample rows from `Affiliated_With`: (1, 1, 1), (2, 1, 1), (3, 1, 0), CREATE TABLE `Procedures` ( Code INTEGER, Name VARCHAR(30), Cost REAL ); Sample rows from `Procedures`: (1, Reverse Rhinopodoplasty, 1500.0), (2, Obtuse Pyloric Recombobulation, 3750.0), (3, Folded Demiophtalmectomy, 4500.0), CREATE TABLE `Trained_In` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code), CertificationDate DATETIME, CertificationExpires DATETIME ); Sample rows from `Trained_In`: (3, 1, 2008-01-01, 2008-12-31), (3, 2, 2008-01-01, 2008-12-31), (3, 5, 2008-01-01, 2008-12-31), CREATE TABLE `Patient` ( SSN INTEGER, Name VARCHAR(30), Address VARCHAR(30), Phone VARCHAR(30), InsuranceID INTEGER, PCP INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Patient`: (100000001, John Smith, 42 Foobar Lane, 555-0256, 68476213, 1), (100000002, Grace Ritchie, 37 Snafu Drive, 555-0512, 36546321, 2), (100000003, Random J. Patient, 101 Omgbbq Street, 555-1204, 65465421, 2), CREATE TABLE `Nurse` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), Registered BOOLEAN, SSN INTEGER ); Sample rows from `Nurse`: (101, Carla Espinosa, Head Nurse, 1, 111111110), (102, Laverne Roberts, Nurse, 1, 222222220), (103, Paul Flowers, Nurse, 0, 333333330), CREATE TABLE `Appointment` ( AppointmentID INTEGER, Patient INTEGER REFERENCES Patient(SSN), PrepNurse INTEGER REFERENCES Nurse(EmployeeID), Physician INTEGER REFERENCES Physician(EmployeeID), Start DATETIME, End DATETIME, ExaminationRoom TEXT ); Sample rows from `Appointment`: (13216584, 100000001, 101, 1, 2008-04-24 10:00, 2008-04-24 11:00, A), (26548913, 100000002, 101, 2, 2008-04-24 10:00, 2008-04-24 11:00, B), (36549879, 100000001, 102, 1, 2008-04-25 10:00, 2008-04-25 11:00, A), CREATE TABLE `Medication` ( Code INTEGER, Name VARCHAR(30), Brand VARCHAR(30), Description VARCHAR(30) ); Sample rows from `Medication`: (1, Procrastin-X, X, N/A), (2, Thesisin, Foo Labs, N/A), (3, Awakin, Bar Laboratories, N/A), CREATE TABLE `Prescribes` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Medication INTEGER PRIMARY KEY REFERENCES Medication(Code), Date DATETIME PRIMARY KEY, Appointment INTEGER REFERENCES Appointment(AppointmentID), Dose VARCHAR(30) ); Sample rows from `Prescribes`: (1, 100000001, 1, 2008-04-24 10:47, 13216584, 5), (9, 100000004, 2, 2008-04-27 10:53, 86213939, 10), (9, 100000004, 2, 2008-04-30 16:53, None, 5), CREATE TABLE `Block` ( BlockFloor INTEGER PRIMARY KEY, BlockCode INTEGER PRIMARY KEY ); Sample rows from `Block`: (1, 1), (1, 2), (1, 3), CREATE TABLE `Room` ( RoomNumber INTEGER, RoomType VARCHAR(30), BlockFloor INTEGER REFERENCES Block(BlockFloor), BlockCode INTEGER REFERENCES Block(BlockCode), Unavailable BOOLEAN ); Sample rows from `Room`: (101, Single, 1, 1, 0), (102, Single, 1, 1, 0), (103, Single, 1, 1, 0), CREATE TABLE `On_Call` ( Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID), BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor), BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode), OnCallStart DATETIME PRIMARY KEY, OnCallEnd DATETIME PRIMARY KEY ); Sample rows from `On_Call`: (101, 1, 1, 2008-11-04 11:00, 2008-11-04 19:00), (101, 1, 2, 2008-11-04 11:00, 2008-11-04 19:00), (102, 1, 3, 2008-11-04 11:00, 2008-11-04 19:00), CREATE TABLE `Stay` ( StayID INTEGER, Patient INTEGER REFERENCES Patient(SSN), Room INTEGER REFERENCES Room(RoomNumber), StayStart DATETIME, StayEnd DATETIME ); Sample rows from `Stay`: (3215, 100000001, 111, 2008-05-01, 2008-05-04), (3216, 100000003, 123, 2008-05-03, 2008-05-14), (3217, 100000004, 112, 2008-05-02, 2008-05-03), CREATE TABLE `Undergoes` ( Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code), Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID), DateUndergoes DATETIME PRIMARY KEY, Physician INTEGER REFERENCES Physician(EmployeeID), AssistingNurse INTEGER REFERENCES Nurse(EmployeeID) ); Sample rows from `Undergoes`: (100000001, 6, 3215, 2008-05-02, 3, 101), (100000001, 2, 3215, 2008-05-03, 7, 101), (100000004, 1, 3217, 2008-05-07, 3, 102), ",
        "output": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of customers who have an account. ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(50), customer_middle_initial VARCHAR(1), customer_last_name VARCHAR(50), gender VARCHAR(1), email_address VARCHAR(255), login_name VARCHAR(80), login_password VARCHAR(20), phone_number VARCHAR(255), town_city VARCHAR(50), state_county_province VARCHAR(50), country VARCHAR(50) ); Sample rows from `Customers`: (1, Dee, A, Larkin, 1, thora.torphy@example.org, xhartmann, 77789d292604ea04406f, 241.796.1219x37862, North Nellie, WestVirginia, USA), (2, Brennon, H, Weimann, 0, roosevelt.collier@example.org, shayne.lesch, ce97a3e4539347daab96, (943)219-4234x415, South Isabell, Oklahoma, USA), (3, Joesph, K, Schaefer, 0, homenick.ambrose@example.net, feeney.lauriane, a6c7a7064c36b038d402, (488)524-5345, New Nikolas, Arkansas, USA), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 12, 2012-06-27 20:49:56, None), (2, 12, 2012-08-25 07:51:54, None), (3, 8, 2017-11-05 15:32:38, None), CREATE TABLE `Invoices` ( invoice_number INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_date DATETIME ); Sample rows from `Invoices`: (1, 9, 2018-03-01 16:40:48), (2, 9, 2018-03-20 00:21:41), (3, 3, 2018-03-05 08:47:33), CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_account_opened DATETIME, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 8, 2016-07-30 22:22:24, 900, Regular), (2, 3, 2017-05-29 16:45:17, 520, VIP), (3, 8, 2012-05-04 18:50:32, 323, Regular), CREATE TABLE `Product_Categories` ( production_type_code VARCHAR(15) PRIMARY KEY, product_type_description VARCHAR(80), vat_rating DECIMAL(19,4) ); Sample rows from `Product_Categories`: (Food, Food, 15.84), (DVDs, Dvd products, 11.4), (Books, Books, 13.95), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, production_type_code VARCHAR(15) REFERENCES Product_Categories(production_type_code), unit_price DECIMAL(19,4), product_name VARCHAR(80), product_color VARCHAR(20), product_size VARCHAR(20) ); Sample rows from `Products`: (1, 4, Food, 617.95, Coffee Bean, Red, Medium), (2, 4, Books, 558.49, Learning French, Yellow, Medium), (3, 8, Electronics, 563.58, Fans, Black, Medium), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DECIMAL(19,4), transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 13, 12, Payment, 2018-03-15 21:13:57, 613.96, None, None), (2, 9, 1, Payment, 2018-03-13 13:27:46, 368.46, None, None), (3, 6, 1, Refund, 2018-03-03 01:50:25, 1598.25, None, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), product_id INTEGER REFERENCES Products(product_id), product_quantity VARCHAR(50), other_order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 4, 6, None), (2, 4, 10, 7, None), (3, 15, 5, 4, None), CREATE TABLE `Invoice_Line_Items` ( order_item_id INTEGER REFERENCES Order_Items(order_item_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), product_id INTEGER REFERENCES Products(product_id), product_title VARCHAR(80), product_quantity VARCHAR(50), product_price DECIMAL(19,4), derived_product_cost DECIMAL(19,4), derived_vat_payable DECIMAL(19,4), derived_total_cost DECIMAL(19,4) ); Sample rows from `Invoice_Line_Items`: (14, 9, 5, prod_name, 4, 742.37, 191.11, None, 69.82), (3, 9, 15, prod_name, 1, 814.87, 176.29, None, 59.56), (4, 10, 15, prod_name, 8, 943.07, 73.14, None, 59.93), ",
        "output": "SELECT COUNT(DISTINCT customer_id) FROM accounts"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the checking balance of the accounts whose savings balance is higher than the average savings balance. ###filtered_database_schema: CREATE TABLE `ACCOUNTS` ( custid BIGINT PRIMARY KEY, name VARCHAR(64) ); Sample rows from `ACCOUNTS`: (1, Brown), (2, Wang), (3, O'mahony), CREATE TABLE `SAVINGS` ( custid BIGINT PRIMARY KEY REFERENCES ACCOUNTS(custid), balance FLOAT ); Sample rows from `SAVINGS`: (1, 200000.0), (2, 999999999.0), (3, 230000.0), CREATE TABLE `CHECKING` ( custid BIGINT PRIMARY KEY REFERENCES ACCOUNTS(custid), balance FLOAT ); Sample rows from `CHECKING`: (1, 10000.0), (2, 2000.0), (3, 3000.0), ",
        "output": "SELECT t2.balance FROM accounts as t1 JOIN checking as t2 ON t1.custid  =  t2.custid WHERE t1.name IN (SELECT t1.name FROM accounts as t1 JOIN savings as t2 ON t1.custid  =  t2.custid WHERE t2.balance  >  (SELECT AVG(balance) FROM savings))"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the name and description for location code x? ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CV, CV, ), (BK, Book, ), (PR, Paper, ), CREATE TABLE `Ref_Calendar` ( Calendar_Date DATETIME PRIMARY KEY, Day_Number INTEGER ); Sample rows from `Ref_Calendar`: (1972-03-31 09:47:22, 5), (1976-06-15 03:40:06, 7), (1985-05-13 12:19:43, 7), CREATE TABLE `Ref_Locations` ( Location_Code CHAR(15) PRIMARY KEY, Location_Name VARCHAR(255), Location_Description VARCHAR(255) ); Sample rows from `Ref_Locations`: (b, Brazil, ), (c, Canada, ), (e, Edinburgh, ), CREATE TABLE `Roles` ( Role_Code CHAR(15) PRIMARY KEY, Role_Name VARCHAR(255), Role_Description VARCHAR(255) ); Sample rows from `Roles`: (MG, Manager, Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti.), (ED, Editor, Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos.), (PT, Photo, Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt.), CREATE TABLE `All_Documents` ( Document_ID INTEGER, Date_Stored DATETIME REFERENCES Ref_Calendar(Calendar_Date), Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255) ); Sample rows from `All_Documents`: (7, 1976-06-15 03:40:06, CV, Robin CV, None, None), (11, 1986-10-14 17:53:39, CV, Marry CV, None, None), (25, 2008-06-08 12:45:38, BK, One hundred years of solitude, None, None), CREATE TABLE `Employees` ( Employee_ID INTEGER, Role_Code CHAR(15) REFERENCES Roles(Role_Code), Employee_Name VARCHAR(255), Gender_MFU CHAR(1), Date_of_Birth DATETIME, Other_Details VARCHAR(255) ); Sample rows from `Employees`: (25, HR, Leo, , 1973-02-15 17:16:00, None), (30, MG, Ebba, , 1979-09-20 12:50:15, None), (38, ED, Stephanie, 1, 2012-03-30 23:02:28, None), CREATE TABLE `Document_Locations` ( Document_ID INTEGER PRIMARY KEY REFERENCES All_Documents(Document_ID), Location_Code CHAR(15) PRIMARY KEY REFERENCES Ref_Locations(Location_Code), Date_in_Location_From DATETIME PRIMARY KEY REFERENCES Ref_Calendar(Calendar_Date), Date_in_Locaton_To DATETIME REFERENCES Ref_Calendar(Calendar_Date) ); Sample rows from `Document_Locations`: (7, e, 2017-01-06 23:17:22, 2008-06-08 12:45:38), (11, x, 2017-01-06 23:17:22, 2012-07-03 09:48:46), (81, c, 1972-03-31 09:47:22, 1987-11-05 06:11:22), CREATE TABLE `Documents_to_be_Destroyed` ( Document_ID INTEGER REFERENCES All_Documents(Document_ID), Destruction_Authorised_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Destroyed_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Planned_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Actual_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Other_Details VARCHAR(255) ); Sample rows from `Documents_to_be_Destroyed`: (7, 156, 138, 1988-02-01 14:41:52, 2017-01-06 23:17:22, None), (11, 55, 173, 2010-11-26 19:22:50, 1986-10-14 17:53:39, None), (25, 183, 156, 2009-08-18 03:29:08, 1995-01-01 03:52:11, None), ",
        "output": "SELECT location_name ,  location_description FROM ref_locations WHERE location_code  =  \"x\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What papers have been written by both Peter Mertens and Dina Barbian ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many scientists are there? ###filtered_database_schema: CREATE TABLE `Scientists` ( SSN INT PRIMARY KEY, Name Char(30) ); Sample rows from `Scientists`: (123234877, Michael Rogers), (152934485, Anand Manikutty), (222364883, Carol Smith), CREATE TABLE `Projects` ( Code Char(4) PRIMARY KEY, Name Char(50), Hours INT ); Sample rows from `Projects`: (AeH1, Winds: Studying Bernoullis Principle, 156), (AeH2, Aerodynamics and Bridge Design, 189), (AeH3, Aerodynamics and Gas Mileage, 256), CREATE TABLE `AssignedTo` ( Scientist INT PRIMARY KEY REFERENCES Scientists(SSN), Project char(4) PRIMARY KEY REFERENCES Projects(Code) ); Sample rows from `AssignedTo`: (123234877, AeH1), (152934485, AeH3), (222364883, Ast3), ",
        "output": "SELECT COUNT(*) FROM scientists"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the 3 counties with the smallest population. ###filtered_database_schema: CREATE TABLE `county` ( County_Id INT PRIMARY KEY, County_name TEXT, Population REAL, Zip_code TEXT ); Sample rows from `county`: (1, Howard, 21000.0, D21), (2, Baltimore County, 90000.0, D08), (3, Colony, 79000.0, D02), CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Year REAL, Party TEXT, Governor TEXT, Lieutenant_Governor TEXT, Comptroller TEXT, Attorney_General TEXT, US_Senate TEXT ); Sample rows from `party`: (1, 1998.0, Democratic, Peter Vallone, Sandra Frankel, Carl McCall, Eliot Spitzer, Charles Schumer), (2, 1998.0, Liberal, Betsy McCaughey Ross, Jonathan Reiter, Carl McCall, Eliot Spitzer, Charles Schumer), (3, 2002.0, Democratic, Carl McCall, Dennis Mehiel, Alan Hevesi, Eliot Spitzer, (no election)), CREATE TABLE `election` ( Election_ID INT PRIMARY KEY, Counties_Represented TEXT, District INT REFERENCES county(County_Id), Delegate TEXT, Party INT REFERENCES party(Party_ID), First_Elected REAL, Committee TEXT ); Sample rows from `election`: (1, 09.1 9A, 1, Bates, Gail H. Gail H. Bates, 1, 2002.0, Appropriations), (2, 09.1 9A, 1, Miller, Warren E. Warren E. Miller, 1, 2003.0, Economic Matters), (3, 12.1 12A, 2, DeBoy, Steven J. Sr. Steven J. DeBoy, Sr., 2, 2002.0, Appropriations), ",
        "output": "SELECT county_name FROM county ORDER BY population ASC LIMIT 3"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average ROM size of phones produced by the company named \"Nokia Corporation\"? ###filtered_database_schema: CREATE TABLE `chip_model` ( Model_name TEXT PRIMARY KEY, Launch_year REAL, RAM_MiB REAL, ROM_MiB REAL, Slots TEXT, WiFi TEXT, Bluetooth TEXT ); Sample rows from `chip_model`: (X5, 2002.0, 32.0, 32.0, 1CFII,1SD, No, No), (X5 high end, 2002.0, 64.0, 48.0, 1CFII,1SD, No, No), (X3 Basic, 2003.0, 32.0, 32.0, 1SD, No, No), CREATE TABLE `screen_mode` ( Graphics_mode REAL PRIMARY KEY, Char_cells TEXT, Pixels TEXT, Hardware_colours REAL, used_kb REAL, map TEXT, Type TEXT ); Sample rows from `screen_mode`: (0.0, 80 × 32, 640 × 256, 2.0, 20.0, 3000–7FFF, Graphics), (1.0, 40 × 32, 320 × 256, 4.0, 20.0, 3000–7FFF, Graphics), (2.0, 20 × 32, 160 × 256, 8.0, 20.0, 3000–7FFF, Graphics), CREATE TABLE `phone` ( Company_name TEXT, Hardware_Model_name TEXT PRIMARY KEY, Accreditation_type TEXT, Accreditation_level TEXT, Date TEXT, chip_model TEXT REFERENCES chip_model(Model_name), screen_mode TEXT REFERENCES screen_mode(Graphics_mode) ); Sample rows from `phone`: (Sony Mobile Communications, XPERIA T, XPERIA J, Full, joyn Hot Fixes, Approved (awarded 15.11.12), X5, 1), (LG Electronics, LG-P760, Full, joyn Hot Fixes, Approved (awarded 19.11.12), X51v, 3), (Nokia Corporation, Lumia 920, Lumia 820, Lumia 620, Full, joyn Hot Fixes, Approved (awarded 05.12.12), X5, 4), ",
        "output": "SELECT AVG(t1.rom_mib) FROM chip_model as t1 JOIN phone as t2 ON t1.model_name  =  t2.chip_model WHERE t2.company_name = \"Nokia Corporation\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which contact channel codes were used less than 5 times? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_content VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), other_address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 9443 Boyle Route Suite 857, Lucasville, 416, Colorado, USA, None), (2, 1969 Jabari Port Suite 393, New Sabryna, 721, SouthCarolina, USA, None), (3, 295 Hackett Curve, Reingertown, 255, NewJersey, USA, None), CREATE TABLE `Products` ( product_id INTEGER, product_details VARCHAR(255) ); Sample rows from `Products`: (1, Americano), (2, Dove Chocolate), (3, Latte), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method VARCHAR(15), customer_name VARCHAR(80), date_became_customer DATETIME, other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Cash, Dr. Julia Wuckert MD, 2018-03-01 23:20:10, None), (2, Cheque, Tillman Ernser, 2018-02-28 11:37:44, None), (3, Credit Card, Rodrick Heaney, 2018-03-09 17:41:58, None), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_address_from DATETIME, address_type VARCHAR(15), date_address_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 11, 1985-03-29 20:31:43, Billing, 1993-02-17 17:55:18), (13, 11, 2010-08-25 04:24:35, Billing, 1972-02-17 22:23:38), (2, 14, 2010-12-26 08:52:50, Residential, 1979-07-16 18:22:39), CREATE TABLE `Customer_Contact_Channels` ( customer_id INTEGER REFERENCES Customers(customer_id), channel_code VARCHAR(15), active_from_date DATETIME, active_to_date DATETIME, contact_number VARCHAR(50) ); Sample rows from `Customer_Contact_Channels`: (9, Email, 2017-12-07 18:18:15, 2018-03-23 13:37:14, 940.035.6435x0225), (2, Email, 2017-04-07 04:51:41, 2018-03-23 01:30:52, 189.449.8326x7607), (9, Email, 2017-05-25 16:08:45, 2018-03-13 07:32:25, 958-653-2640), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(15), order_date DATETIME, order_details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 15, Cancelled, 2018-03-21 11:20:46, None), (2, 3, Cancelled, 2018-03-05 06:35:33, None), (3, 5, Delivered, 2018-03-04 07:16:22, Second time), CREATE TABLE `Order_Items` ( order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), order_quantity VARCHAR(15) ); Sample rows from `Order_Items`: (14, 2, 5), (5, 2, 9), (14, 3, 2), ",
        "output": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING COUNT(customer_id)  <  5"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name of department where has the largest number of professors with a Ph.D. degree? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT t2.dept_name ,  t1.dept_code FROM professor as t1 JOIN department as t2 ON t1.dept_code  =  t2.dept_code WHERE t1.prof_high_degree  =  'Ph.D.' GROUP BY t1.dept_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the name of the member who is in charge of the most events. ###filtered_database_schema: CREATE TABLE `region` ( Region_ID INT PRIMARY KEY, Region_name TEXT, Date TEXT, Label TEXT, Format TEXT, Catalogue TEXT ); Sample rows from `region`: (1, United Kingdom, 1 July 2002, Parlophone, CD, 540 3622), (2, United Kingdom, 1 July 2002, Parlophone, 2× LP, 539 9821), (3, Japan, 3 July 2002, Toshiba-EMI, CD, TOCP-66045), CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Minister TEXT, Took_office TEXT, Left_office TEXT, Region_ID INT REFERENCES region(Region_ID), Party_name TEXT ); Sample rows from `party`: (1, Dr. Kwame Nkrumah (MP), 1957, 1958, 1, Convention Peoples Party), (2, Kojo Botsio (MP), 1958, 1959, 2, Progress Party), (3, Ebenezer Ako-Adjei (MP), 1959, 1960, 3, 3), CREATE TABLE `member` ( Member_ID INT PRIMARY KEY, Member_Name TEXT, Party_ID TEXT REFERENCES party(Party_ID), In_office TEXT ); Sample rows from `member`: (1, Hon Tony Abbott, 3, 1994–present), (2, Hon Dick Adams, 2, 1993–2013), (3, Anthony Albanese, 2, 1996–present), CREATE TABLE `party_events` ( Event_ID INT PRIMARY KEY, Event_Name TEXT, Party_ID INT REFERENCES party(Party_ID), Member_in_charge_ID INT REFERENCES member(Member_ID) ); Sample rows from `party_events`: (1, Annaual Meeting, 1, 4), (2, Conference, 1, 12), (3, Annaual Meeting, 2, 2), ",
        "output": "SELECT t1.member_name FROM member as t1 JOIN party_events as t2 ON t1.member_id  =  t2.member_in_charge_id GROUP BY t2.member_in_charge_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the maximum elevation of guadalupe peak ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT highest_elevation FROM highlow WHERE highest_point  =  \"guadalupe peak\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the titles of all items in alphabetic order . ###filtered_database_schema: CREATE TABLE `item` ( i_id INTEGER, title varchar(20) ); Sample rows from `item`: (0, pear), (1, orange), (2, apple), CREATE TABLE `review` ( a_id INTEGER PRIMARY KEY, u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), i_id INTEGER PRIMARY KEY REFERENCES item(i_id), rating INTEGER, rank INTEGER ); Sample rows from `review`: (1, 1, 1, 10, 1), (2, 2, 1, 5, 2), (3, 1, 4, 7, 3), CREATE TABLE `useracct` ( u_id INTEGER, name varchar(128) ); Sample rows from `useracct`: (1, Helen), (2, Mark), (3, Terry), CREATE TABLE `trust` ( source_u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), target_u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), trust INTEGER ); Sample rows from `trust`: (1, 2, 10), (1, 3, 6), (2, 4, 8), ",
        "output": "SELECT title FROM item ORDER BY title"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of distinct projects. ###filtered_database_schema: CREATE TABLE `Scientists` ( SSN INT PRIMARY KEY, Name Char(30) ); Sample rows from `Scientists`: (123234877, Michael Rogers), (152934485, Anand Manikutty), (222364883, Carol Smith), CREATE TABLE `Projects` ( Code Char(4) PRIMARY KEY, Name Char(50), Hours INT ); Sample rows from `Projects`: (AeH1, Winds: Studying Bernoullis Principle, 156), (AeH2, Aerodynamics and Bridge Design, 189), (AeH3, Aerodynamics and Gas Mileage, 256), CREATE TABLE `AssignedTo` ( Scientist INT PRIMARY KEY REFERENCES Scientists(SSN), Project char(4) PRIMARY KEY REFERENCES Projects(Code) ); Sample rows from `AssignedTo`: (123234877, AeH1), (152934485, AeH3), (222364883, Ast3), ",
        "output": "SELECT COUNT(DISTINCT name) FROM projects"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show all game ids and the number of hours played. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Video_Games` ( GameID INTEGER, GName VARCHAR(40), GType VARCHAR(40) ); Sample rows from `Video_Games`: (1, RNG Stone, Collectible card game), (2, The Vanishing of Eric Calder, Walking Simulator), (3, Grand Term Assignment, Role-playing game), CREATE TABLE `Plays_Games` ( StuID INTEGER REFERENCES Student(StuID), GameID INTEGER REFERENCES Video_Games(GameID), Hours_Played INTEGER ); Sample rows from `Plays_Games`: (1001, 1, 35), (1001, 2, 15), (1001, 5, 1), CREATE TABLE `SportsInfo` ( StuID INTEGER REFERENCES Student(StuID), SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1) ); Sample rows from `SportsInfo`: (1001, Athletics, 2, 5, N), (1002, Football, 7, 20, Y), (1003, Football, 45, 18, Y), ",
        "output": "SELECT gameid ,  SUM(hours_played) FROM plays_games GROUP BY gameid"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: how many papers jamie callan published each year ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(t3.paperid)  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many papers are published by the institution \"Tokohu University\"? ###filtered_database_schema: CREATE TABLE `Inst` ( instID INTEGER, name TEXT, country TEXT ); Sample rows from `Inst`: (1000, University of Oxford, UK), (1010, Northeastern University, USA), (1020, Indiana University, USA), CREATE TABLE `Authors` ( authID INTEGER, lname TEXT, fname TEXT ); Sample rows from `Authors`: (50, Gibbons, Jeremy), (51, Hinze, Ralf), (52, James, Daniel W. H.), CREATE TABLE `Papers` ( paperID INTEGER, title TEXT ); Sample rows from `Papers`: (200, Just do it: Simple Monadic Equational Reasoning), (201, Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory), (202, Functional Pearl: Modular Rollback through Control Logging), CREATE TABLE `Authorship` ( authID INTEGER PRIMARY KEY REFERENCES Authors(authID), instID INTEGER PRIMARY KEY REFERENCES Inst(instID), paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID), authOrder INTEGER ); Sample rows from `Authorship`: (50, 1000, 200, 1), (51, 1000, 200, 2), (51, 1000, 201, 1), ",
        "output": "SELECT COUNT(DISTINCT t1.title) FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the location code, the starting date and ending data in that location for all the documents. ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CV, CV, ), (BK, Book, ), (PR, Paper, ), CREATE TABLE `Ref_Calendar` ( Calendar_Date DATETIME PRIMARY KEY, Day_Number INTEGER ); Sample rows from `Ref_Calendar`: (1972-03-31 09:47:22, 5), (1976-06-15 03:40:06, 7), (1985-05-13 12:19:43, 7), CREATE TABLE `Ref_Locations` ( Location_Code CHAR(15) PRIMARY KEY, Location_Name VARCHAR(255), Location_Description VARCHAR(255) ); Sample rows from `Ref_Locations`: (b, Brazil, ), (c, Canada, ), (e, Edinburgh, ), CREATE TABLE `Roles` ( Role_Code CHAR(15) PRIMARY KEY, Role_Name VARCHAR(255), Role_Description VARCHAR(255) ); Sample rows from `Roles`: (MG, Manager, Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti.), (ED, Editor, Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos.), (PT, Photo, Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt.), CREATE TABLE `All_Documents` ( Document_ID INTEGER, Date_Stored DATETIME REFERENCES Ref_Calendar(Calendar_Date), Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255) ); Sample rows from `All_Documents`: (7, 1976-06-15 03:40:06, CV, Robin CV, None, None), (11, 1986-10-14 17:53:39, CV, Marry CV, None, None), (25, 2008-06-08 12:45:38, BK, One hundred years of solitude, None, None), CREATE TABLE `Employees` ( Employee_ID INTEGER, Role_Code CHAR(15) REFERENCES Roles(Role_Code), Employee_Name VARCHAR(255), Gender_MFU CHAR(1), Date_of_Birth DATETIME, Other_Details VARCHAR(255) ); Sample rows from `Employees`: (25, HR, Leo, , 1973-02-15 17:16:00, None), (30, MG, Ebba, , 1979-09-20 12:50:15, None), (38, ED, Stephanie, 1, 2012-03-30 23:02:28, None), CREATE TABLE `Document_Locations` ( Document_ID INTEGER PRIMARY KEY REFERENCES All_Documents(Document_ID), Location_Code CHAR(15) PRIMARY KEY REFERENCES Ref_Locations(Location_Code), Date_in_Location_From DATETIME PRIMARY KEY REFERENCES Ref_Calendar(Calendar_Date), Date_in_Locaton_To DATETIME REFERENCES Ref_Calendar(Calendar_Date) ); Sample rows from `Document_Locations`: (7, e, 2017-01-06 23:17:22, 2008-06-08 12:45:38), (11, x, 2017-01-06 23:17:22, 2012-07-03 09:48:46), (81, c, 1972-03-31 09:47:22, 1987-11-05 06:11:22), CREATE TABLE `Documents_to_be_Destroyed` ( Document_ID INTEGER REFERENCES All_Documents(Document_ID), Destruction_Authorised_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Destroyed_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Planned_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Actual_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Other_Details VARCHAR(255) ); Sample rows from `Documents_to_be_Destroyed`: (7, 156, 138, 1988-02-01 14:41:52, 2017-01-06 23:17:22, None), (11, 55, 173, 2010-11-26 19:22:50, 1986-10-14 17:53:39, None), (25, 183, 156, 2009-08-18 03:29:08, 1995-01-01 03:52:11, None), ",
        "output": "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM document_locations"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the most common mill type, and how many are there? ###filtered_database_schema: CREATE TABLE `architect` ( id TEXT PRIMARY KEY, name TEXT, nationality TEXT, gender TEXT ); Sample rows from `architect`: (1, Frank Lloyd Wright, American, male), (2, Frank Gehry, Canadian, male), (3, Zaha Hadid, Iraqi, British, female), CREATE TABLE `bridge` ( architect_id INT REFERENCES architect(id), id INT PRIMARY KEY, name TEXT, location TEXT, length_meters REAL, length_feet REAL ); Sample rows from `bridge`: (1, 1, Xian Ren Qiao (Fairy Bridge), Guangxi , China, 121.0, 400.0), (2, 2, Landscape Arch, Arches National Park , Utah , USA, 88.0, 290.0), (3, 3, Kolob Arch, Zion National Park , Utah , USA, 87.0, 287.0), CREATE TABLE `mill` ( architect_id INT REFERENCES architect(id), id INT PRIMARY KEY, location TEXT, name TEXT, type TEXT, built_year INT, notes TEXT ); Sample rows from `mill`: (1, 1, Coswarem, Le Vieux Molen, Grondzeiler, 1840, Molenechos (Dutch)), (1, 2, Donceel, Moulin Bertrand, Grondzeiler, 1890, Molenechos (Dutch)), (2, 3, Fexhe-le-haut-Clocher, Moulin de Fexhe, Grondzeiler, 1843, Molenechos (Dutch)), ",
        "output": "SELECT type ,  COUNT(*) FROM mill GROUP BY type ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many editors are there? ###filtered_database_schema: CREATE TABLE `journal` ( Journal_ID INT PRIMARY KEY, Date TEXT, Theme TEXT, Sales INT ); Sample rows from `journal`: (1, September 9, 2001, Miami Dolphins, 798), (2, September 23, 2001, at Jacksonville Jaguars, 994), (4, October 7, 2001, at Baltimore Ravens, 7494), CREATE TABLE `editor` ( Editor_ID INT PRIMARY KEY, Name TEXT, Age REAL ); Sample rows from `editor`: (1, Kamila Porczyk, 34.0), (2, Anna Powierza, 35.0), (3, Marek Siudym, 21.0), CREATE TABLE `journal_committee` ( Editor_ID INT PRIMARY KEY REFERENCES editor(Editor_ID), Journal_ID INT PRIMARY KEY REFERENCES journal(Journal_ID), Work_Type TEXT ); Sample rows from `journal_committee`: (1, 13, Photo), (8, 17, Article), (6, 11, Photo), ",
        "output": "SELECT COUNT(*) FROM editor"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Sort the information about course authors and tutors in alphabetical order of the personal name. ###filtered_database_schema: CREATE TABLE `Course_Authors_and_Tutors` ( author_id INTEGER, author_tutor_ATB VARCHAR(3), login_name VARCHAR(40), password VARCHAR(40), personal_name VARCHAR(80), middle_name VARCHAR(80), family_name VARCHAR(80), gender_mf VARCHAR(1), address_line_1 VARCHAR(80) ); Sample rows from `Course_Authors_and_Tutors`: (1, 331, jmckenzie, c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b, Cathrine, Ruthie, Grant, 0, 756 Monahan Mews Spinkashire, NJ 64230-5098), (2, 975, heidenreich.ara, 24b0ee84063c3b017ab1839e01b7280f47f7c7c2, Retha, Corene, Armstrong, 0, 98623 Huels Manor Jasttown, DE 31611), (3, 349, clementina29, cdaf6c3483f19e2253659a40a3aab786a3390f78, Darius, Ethyl, Reichel, 0, 99296 Keeling Courts North Audreanne, IL 28272), CREATE TABLE `Students` ( student_id INTEGER, date_of_registration DATETIME, date_of_latest_logon DATETIME, login_name VARCHAR(40), password VARCHAR(10), personal_name VARCHAR(40), middle_name VARCHAR(40), family_name VARCHAR(40) ); Sample rows from `Students`: (1, 2015-07-22 13:32:35, 2017-10-17 22:52:26, annamae.hoppe, db8765bb6f, Wilson, Aubrey, Ward), (2, 2015-07-02 00:21:42, 2017-06-24 22:16:27, wmiller, 35faf8182a, Karson, Luella, Jaskolski), (3, 2015-10-11 03:23:27, 2018-03-10 23:22:23, ahartmann, 8e064ec4e6, Mariela, Brandt, Legros), CREATE TABLE `Subjects` ( subject_id INTEGER, subject_name VARCHAR(120) ); Sample rows from `Subjects`: (1, Computer Science), (2, Arts), (3, Language), CREATE TABLE `Courses` ( course_id INTEGER, author_id INTEGER REFERENCES Course_Authors_and_Tutors(author_id), subject_id INTEGER REFERENCES Subjects(subject_id), course_name VARCHAR(120), course_description VARCHAR(255) ); Sample rows from `Courses`: (1, 8, 1, database, database), (2, 6, 1, advanced database, advanced database), (3, 15, 1, operating system, operating system), CREATE TABLE `Student_Course_Enrolment` ( registration_id INTEGER, student_id INTEGER REFERENCES Students(student_id), course_id INTEGER REFERENCES Courses(course_id), date_of_enrolment DATETIME, date_of_completion DATETIME ); Sample rows from `Student_Course_Enrolment`: (1, 11, 2, 2017-10-09 07:09:02, 2018-02-26 07:48:52), (2, 15, 4, 2017-11-13 12:49:33, 2018-03-04 01:24:56), (3, 10, 8, 2017-10-17 13:50:40, 2018-03-22 02:53:01), CREATE TABLE `Student_Tests_Taken` ( registration_id INTEGER REFERENCES Student_Course_Enrolment(registration_id), date_test_taken DATETIME, test_result VARCHAR(255) ); Sample rows from `Student_Tests_Taken`: (12, 2018-03-25 03:27:16, Fail), (10, 2018-03-25 21:50:22, Pass), (7, 2018-03-21 00:32:25, Pass), ",
        "output": "SELECT * FROM course_authors_and_tutors ORDER BY personal_name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the best place in san francisco for french food ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: who are all the co-authors of Noah A Smith ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n ###filtered_database_schema: CREATE TABLE `Customer_Master_Index` ( master_customer_id INTEGER, cmi_details VARCHAR(255) ); Sample rows from `Customer_Master_Index`: (1, Schmitt-Lang), (2, Volkman, Mills and Ferry), (3, Gusikowski PLC), CREATE TABLE `CMI_Cross_References` ( cmi_cross_ref_id INTEGER, master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id), source_system_code CHAR(15) ); Sample rows from `CMI_Cross_References`: (2, 4, Rent), (4, 5, Parking), (8, 1, Rent), CREATE TABLE `Council_Tax` ( council_tax_id INTEGER, cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id) ); Sample rows from `Council_Tax`: (1, 101), (2, 103), (3, 104), CREATE TABLE `Business_Rates` ( business_rates_id INTEGER, cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id) ); Sample rows from `Business_Rates`: (2, 99), (5, 49), (8, 95), CREATE TABLE `Benefits_Overpayments` ( council_tax_id INTEGER, cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id) ); Sample rows from `Benefits_Overpayments`: (3, 65), (6, 41), (7, 83), CREATE TABLE `Parking_Fines` ( council_tax_id INTEGER, cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id) ); Sample rows from `Parking_Fines`: (9, 4), (10, 81), CREATE TABLE `Rent_Arrears` ( council_tax_id INTEGER, cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id) ); Sample rows from `Rent_Arrears`: (1, 100), (2, 8), (6, 59), CREATE TABLE `Electoral_Register` ( electoral_register_id INTEGER, cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id) ); Sample rows from `Electoral_Register`: (2, 83), (3, 65), (4, 100), ",
        "output": "SELECT t2.cmi_cross_ref_id ,  t2.master_customer_id ,  COUNT(*) FROM business_rates as t1 JOIN cmi_cross_references as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id GROUP BY t2.cmi_cross_ref_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the id of the reviewer whose name has substring “Mike”? ###filtered_database_schema: CREATE TABLE `Movie` ( mID INT PRIMARY KEY, title TEXT, year INT, director TEXT ); Sample rows from `Movie`: (101, Gone with the Wind, 1939, Victor Fleming), (102, Star Wars, 1977, George Lucas), (103, The Sound of Music, 1965, Robert Wise), CREATE TABLE `Reviewer` ( rID INT PRIMARY KEY, name TEXT ); Sample rows from `Reviewer`: (201, Sarah Martinez), (202, Daniel Lewis), (203, Brittany Harris), CREATE TABLE `Rating` ( rID INT REFERENCES Reviewer(rID), mID INT REFERENCES Movie(mID), stars INT, ratingDate date ); Sample rows from `Rating`: (201, 101, 2, 2011-01-22), (201, 101, 4, 2011-01-27), (202, 106, 4, None), ",
        "output": "SELECT rid FROM reviewer WHERE name LIKE \"%Mike%\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: when were most NIPS papers published ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(t1.paperid)  ,  t1.year FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT(t1.paperid) DESC;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many architects are female? ###filtered_database_schema: CREATE TABLE `architect` ( id TEXT PRIMARY KEY, name TEXT, nationality TEXT, gender TEXT ); Sample rows from `architect`: (1, Frank Lloyd Wright, American, male), (2, Frank Gehry, Canadian, male), (3, Zaha Hadid, Iraqi, British, female), CREATE TABLE `bridge` ( architect_id INT REFERENCES architect(id), id INT PRIMARY KEY, name TEXT, location TEXT, length_meters REAL, length_feet REAL ); Sample rows from `bridge`: (1, 1, Xian Ren Qiao (Fairy Bridge), Guangxi , China, 121.0, 400.0), (2, 2, Landscape Arch, Arches National Park , Utah , USA, 88.0, 290.0), (3, 3, Kolob Arch, Zion National Park , Utah , USA, 87.0, 287.0), CREATE TABLE `mill` ( architect_id INT REFERENCES architect(id), id INT PRIMARY KEY, location TEXT, name TEXT, type TEXT, built_year INT, notes TEXT ); Sample rows from `mill`: (1, 1, Coswarem, Le Vieux Molen, Grondzeiler, 1840, Molenechos (Dutch)), (1, 2, Donceel, Moulin Bertrand, Grondzeiler, 1890, Molenechos (Dutch)), (2, 3, Fexhe-le-haut-Clocher, Moulin de Fexhe, Grondzeiler, 1843, Molenechos (Dutch)), ",
        "output": "SELECT COUNT(*) FROM architect WHERE gender  =  'female'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the investors that have invested in at least two entrepreneurs? ###filtered_database_schema: CREATE TABLE `entrepreneur` ( Entrepreneur_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Company TEXT, Money_Requested REAL, Investor TEXT ); Sample rows from `entrepreneur`: (1, 1, Umbrolly, 150000.0, Duncan Bannatyne), (2, 2, Grails Ltd, 120000.0, Doug Richard), (3, 3, Le Beanock, 54000.0, Rachel Elnaugh), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Height REAL, Weight REAL, Date_of_Birth TEXT ); Sample rows from `people`: (1, Francesco Postiglione, 1.9, 80.0, 1972-04-29), (2, Leonardo Binchi, 1.86, 57.0, 1975-08-27), (3, Fabrizio Buonocore, 1.83, 45.0, 1977-04-28), ",
        "output": "SELECT investor FROM entrepreneur GROUP BY investor HAVING COUNT(*)  >=  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which author has written the most papers? Find his or her last name. ###filtered_database_schema: CREATE TABLE `Inst` ( instID INTEGER, name TEXT, country TEXT ); Sample rows from `Inst`: (1000, University of Oxford, UK), (1010, Northeastern University, USA), (1020, Indiana University, USA), CREATE TABLE `Authors` ( authID INTEGER, lname TEXT, fname TEXT ); Sample rows from `Authors`: (50, Gibbons, Jeremy), (51, Hinze, Ralf), (52, James, Daniel W. H.), CREATE TABLE `Papers` ( paperID INTEGER, title TEXT ); Sample rows from `Papers`: (200, Just do it: Simple Monadic Equational Reasoning), (201, Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory), (202, Functional Pearl: Modular Rollback through Control Logging), CREATE TABLE `Authorship` ( authID INTEGER PRIMARY KEY REFERENCES Authors(authID), instID INTEGER PRIMARY KEY REFERENCES Inst(instID), paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID), authOrder INTEGER ); Sample rows from `Authorship`: (50, 1000, 200, 1), (51, 1000, 200, 2), (51, 1000, 201, 1), ",
        "output": "SELECT t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: how many citizens live in california ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT population FROM state WHERE state_name  =  \"california\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the cell mobile number of the candidates whose assessment code is \"Fail\"? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1 VARCHAR(80), line_2 VARCHAR(80), city VARCHAR(50), zip_postcode CHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (5, 0900 Roderick Oval New Albina, WA 19200-7914, Suite 096, Linnealand, 862, Montana, USA), (9, 966 Dach Ports Apt. 322 Lake Harmonyhaven, VA 65235, Apt. 163, South Minnie, 716, Texas, USA), (29, 28550 Broderick Underpass Suite 667 Zakaryhaven, WY 22945-1534, Apt. 419, North Trystanborough, 112, Vermont, USA), CREATE TABLE `People` ( person_id INTEGER, first_name VARCHAR(255), middle_name VARCHAR(255), last_name VARCHAR(255), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), login_name VARCHAR(40), password VARCHAR(40) ); Sample rows from `People`: (111, Shannon, Elissa, Senger, 01955267735, javier.trantow@example.net, pgub, 5e4ff49a61b3544da3ad7dc7e2cf28847564c64c), (121, Virginie, Jasmin, Hartmann, (508)319-2970x043, boyer.lonie@example.com, bkkv, b063331ea8116befaa7b84c59c6a22200f5f8caa), (131, Dariana, Hayley, Bednar, (262)347-9364x516, leila14@example.net, zops, b20b6a9f24aadeda70d54e410c3219f61fb063fb), CREATE TABLE `Students` ( student_id INTEGER REFERENCES People(person_id), student_details VARCHAR(255) ); Sample rows from `Students`: (111, Marry), (121, Martin), (131, Barry), CREATE TABLE `Courses` ( course_id VARCHAR(100) PRIMARY KEY, course_name VARCHAR(120), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Courses`: (301, statistics, statistics, None), (302, English, English, None), (303, French, French, None), CREATE TABLE `People_Addresses` ( person_address_id INTEGER, person_id INTEGER REFERENCES People(person_id), address_id INTEGER REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `People_Addresses`: (122, 111, 9, 2012-09-26 13:21:00, 2018-03-21 09:46:30), (257, 121, 5, 2008-07-31 02:17:25, 2018-03-09 02:11:12), (269, 131, 88, 2008-05-26 20:43:41, 2018-03-11 20:26:41), CREATE TABLE `Student_Course_Registrations` ( student_id INTEGER PRIMARY KEY REFERENCES Students(student_id), course_id INTEGER PRIMARY KEY REFERENCES Courses(course_id), registration_date DATETIME ); Sample rows from `Student_Course_Registrations`: (111, 301, 2008-11-04 10:35:13), (121, 301, 2008-10-04 10:35:13), (121, 303, 2008-11-14 10:35:13), CREATE TABLE `Student_Course_Attendance` ( student_id INTEGER PRIMARY KEY REFERENCES Student_Course_Registrations(student_id), course_id INTEGER PRIMARY KEY REFERENCES Student_Course_Registrations(course_id), date_of_attendance DATETIME ); Sample rows from `Student_Course_Attendance`: (111, 301, 2008-11-04 10:35:13), (121, 301, 2012-04-09 11:44:34), (121, 303, 2014-04-09 11:44:34), CREATE TABLE `Candidates` ( candidate_id INTEGER REFERENCES People(person_id), candidate_details VARCHAR(255) ); Sample rows from `Candidates`: (111, Jane), (121, Robert), (131, Alex), CREATE TABLE `Candidate_Assessments` ( candidate_id INTEGER PRIMARY KEY REFERENCES Candidates(candidate_id), qualification CHAR(15) PRIMARY KEY, assessment_date DATETIME, asessment_outcome_code CHAR(15) ); Sample rows from `Candidate_Assessments`: (111, A, 2010-04-07 11:44:34, Pass), (121, B, 2010-04-17 11:44:34, Pass), (131, D, 2010-04-05 11:44:34, Fail), ",
        "output": "SELECT t3.cell_mobile_number FROM candidates as t1 JOIN candidate_assessments as t2 ON t1.candidate_id = t2.candidate_id JOIN people as t3 ON t1.candidate_id = t3.person_id WHERE t2.asessment_outcome_code = \"Fail\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which grade is studying in room 105? ###filtered_database_schema: CREATE TABLE `list` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Grade INTEGER, Classroom INTEGER ); Sample rows from `list`: (CAR, MAUDE, 2, 101), (KRISTENSEN, STORMY, 6, 112), (VANDERWOUDE, SHERWOOD, 3, 107), CREATE TABLE `teachers` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Classroom INTEGER ); Sample rows from `teachers`: (MACROSTIE, MIN, 101), (COVIN, JEROME, 102), (MOYER, OTHA, 103), ",
        "output": "SELECT DISTINCT grade FROM list WHERE classroom  =  105"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which tourist attractions are visited at least twice? Give me their names and ids. ###filtered_database_schema: CREATE TABLE `Ref_Hotel_Star_Ratings` ( star_rating_code CHAR(15) PRIMARY KEY, star_rating_description VARCHAR(80) ); Sample rows from `Ref_Hotel_Star_Ratings`: (1, star), (2, star), (3, star), CREATE TABLE `Locations` ( Location_ID INTEGER, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Locations`: (333, Astro Orbiter, 660 Shea Crescent, None), (368, African Animals, 254 Ottilie Junction, None), (417, American Adventure, 53815 Sawayn Tunnel Apt. 297, None), CREATE TABLE `Ref_Attraction_Types` ( Attraction_Type_Code CHAR(15) PRIMARY KEY, Attraction_Type_Description VARCHAR(255) ); Sample rows from `Ref_Attraction_Types`: (2, park), (3, garden), (5, gallery), CREATE TABLE `Visitors` ( Tourist_ID INTEGER PRIMARY KEY, Tourist_Details VARCHAR(255) ); Sample rows from `Visitors`: (164, Toney), (189, Graciela), (204, Vincent), CREATE TABLE `Features` ( Feature_ID INTEGER, Feature_Details VARCHAR(255) ); Sample rows from `Features`: (523, cafe), (528, park), (543, garden), CREATE TABLE `Hotels` ( hotel_id INTEGER, star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code), pets_allowed_yn CHAR(1), price_range REAL, other_hotel_details VARCHAR(255) ); Sample rows from `Hotels`: (123, 5, 1, 2914989.571, None), (144, 4, , , None), (172, 5, , 17012.682586009, None), CREATE TABLE `Tourist_Attractions` ( Tourist_Attraction_ID INTEGER, Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code), Location_ID INTEGER REFERENCES Locations(Location_ID), How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Tourist_Attractions`: (2113, 2, 579, bus, art museum, None, None, None), (2701, 6, 417, walk, UK gallery, None, None, None), (5076, 2, 868, shuttle, flying elephant, None, None, None), CREATE TABLE `Street_Markets` ( Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Market_Details VARCHAR(255) ); Sample rows from `Street_Markets`: (6852, Broadway), (7067, Fish Farm Market), CREATE TABLE `Shops` ( Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Shop_Details VARCHAR(255) ); Sample rows from `Shops`: (8429, soup), (8449, coffee), (8698, Flower), CREATE TABLE `Museums` ( Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Museum_Details VARCHAR(255) ); Sample rows from `Museums`: (2113, Yale Center for British Art), (2701, The Metropolitan Museum of Art), (5076, MoMA), CREATE TABLE `Royal_Family` ( Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Royal_Family_Details VARCHAR(255) ); Sample rows from `Royal_Family`: (9561, None), (9919, None), CREATE TABLE `Theme_Parks` ( Theme_Park_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Theme_Park_Details VARCHAR(255) ); Sample rows from `Theme_Parks`: (5265, Disney), (6476, Sea World), (6523, Universal Studios), CREATE TABLE `Visits` ( Visit_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID), Visit_Date DATETIME, Visit_Details VARCHAR(40) ); Sample rows from `Visits`: (183, 6653, 377, 2004-08-21 03:06:14, ), (268, 5076, 204, 2013-08-06 05:35:51, ), (273, 9360, 211, 2013-10-27 09:56:08, ), CREATE TABLE `Photos` ( Photo_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Photos`: (211, 8449, game1, None, 702, None), (280, 7067, game2, None, 762, None), (303, 5076, game3, None, 392, None), CREATE TABLE `Staff` ( Staff_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(40), Other_Details VARCHAR(255) ); Sample rows from `Staff`: (170, 6476, Whitney, None), (219, 6476, Kaela, None), (237, 7067, Eunice, None), CREATE TABLE `Tourist_Attraction_Features` ( Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID) ); Sample rows from `Tourist_Attraction_Features`: (5076, 528), (5076, 681), (5265, 523), ",
        "output": "SELECT t1.name ,  t2.tourist_attraction_id FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING COUNT(*)  >=  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the id of the order made most recently. ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_name VARCHAR(80), customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Savannah, rerum), (2, George, est), (3, Alberto, deleniti), CREATE TABLE `Invoices` ( invoice_number INTEGER, invoice_date DATETIME, invoice_details VARCHAR(255) ); Sample rows from `Invoices`: (1, 1989-09-03 16:03:05, vitae), (2, 1989-12-11 16:40:57, magnam), (3, 1995-10-07 14:13:05, et), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(10), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 2, Shipped, 2009-02-21 15:26:19, None), (2, 11, Shipped, 1974-06-24 22:10:26, None), (3, 4, Shipped, 1982-12-29 21:10:11, None), CREATE TABLE `Products` ( product_id INTEGER, product_name VARCHAR(80), product_details VARCHAR(255) ); Sample rows from `Products`: (1, food, None), (2, book, None), (3, food, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, product_id INTEGER REFERENCES Products(product_id), order_id INTEGER REFERENCES Orders(order_id), order_item_status VARCHAR(10), order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 6, Finish, None), (2, 15, 6, Finish, None), (3, 12, 15, Finish, None), CREATE TABLE `Shipments` ( shipment_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), shipment_tracking_number VARCHAR(80), shipment_date DATETIME, other_shipment_details VARCHAR(255) ); Sample rows from `Shipments`: (1, 5, 13, 3452, 1983-08-13 22:34:11, None), (2, 7, 2, 0114, 1977-11-10 12:11:25, None), (3, 10, 5, 478, 2006-01-17 03:08:05, None), CREATE TABLE `Shipment_Items` ( shipment_id INTEGER REFERENCES Shipments(shipment_id), order_item_id INTEGER REFERENCES Order_Items(order_item_id) ); Sample rows from `Shipment_Items`: (11, 12), (10, 15), (10, 12), ",
        "output": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what are the major cities in kansas ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'? ###filtered_database_schema: CREATE TABLE `stadium` ( id INT PRIMARY KEY, name TEXT, Home_Games INT, Average_Attendance REAL, Total_Attendance REAL, Capacity_Percentage REAL ); Sample rows from `stadium`: (1, Cowboys Stadium, 8, 87047.0, 696377.0, 108.8), (2, FedExField, 8, 83172.0, 665380.0, 90.7), (3, New Meadowlands Stadium, 8, 79019.0, 632156.0, 95.8), CREATE TABLE `game` ( stadium_id INT REFERENCES stadium(id), id INT PRIMARY KEY, Season INT, Date TEXT, Home_team TEXT, Away_team TEXT, Score TEXT, Competition TEXT ); Sample rows from `game`: (1, 1, 2007, 18 May 2007, Quruvchi, Pakhtakor, 1–1, League), (2, 2, 2007, 22 September 2007, Pakhtakor, Quruvchi, 0–0, League), (3, 3, 2007, 9 December 2007, Pakhtakor, Quruvchi, 0–0 (7:6), Cup), CREATE TABLE `injury_accident` ( game_id INT REFERENCES game(id), id INT PRIMARY KEY, Player TEXT, Injury TEXT, Number_of_matches TEXT, Source TEXT ); Sample rows from `injury_accident`: (1, 1, Davide Santon, Clean-up surgery on his right knee, 12, inter.it), (2, 2, Maicon, Knee problem, 2, inter.it), (3, 3, Dejan Stanković, Hamstring muscle strain in his left thigh, 2, inter.it), ",
        "output": "SELECT t1.season ,  t2.name FROM game as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.id JOIN injury_accident as t3 ON t1.id  =  t3.game_id WHERE t3.injury  =  'Foot injury' OR t3.injury  =  'Knee problem'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the project details of the projects with the research outcome described with the substring 'Published'. ###filtered_database_schema: CREATE TABLE `Document_Types` ( document_type_code VARCHAR(10) PRIMARY KEY, document_description VARCHAR(255) ); Sample rows from `Document_Types`: (APP, Initial Application), (REG, Regular), CREATE TABLE `Documents` ( document_id INTEGER, document_type_code VARCHAR(10) REFERENCES Document_Types(document_type_code), grant_id INTEGER REFERENCES Grants(grant_id), sent_date DATETIME, response_received_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Documents`: (1, APP, 5, 1986-11-30 07:56:35, 1977-12-01 02:18:53, ), (2, APP, 13, 2004-01-23 11:57:08, 1979-12-08 10:38:07, ), (3, REG, 10, 1999-03-03 12:25:58, 1995-09-12 13:13:48, ), CREATE TABLE `Grants` ( grant_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), grant_amount DECIMAL(19,4), grant_start_date DATETIME, grant_end_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Grants`: (1, 10, 4094.542, 2016-11-20 00:18:51, 2004-10-24 09:09:39, et), (2, 3, 281.2446, 1985-10-09 20:08:49, 1985-06-08 00:22:07, occaecati), (3, 14, 4515947.7015, 1970-09-19 22:53:49, 1989-03-16 18:27:16, et), CREATE TABLE `Organisation_Types` ( organisation_type VARCHAR(10) PRIMARY KEY, organisation_type_description VARCHAR(255) ); Sample rows from `Organisation_Types`: (RES, Research), (SPON, Sponsor), CREATE TABLE `Organisations` ( organisation_id INTEGER, organisation_type VARCHAR(10) REFERENCES Organisation_Types(organisation_type), organisation_details VARCHAR(255) ); Sample rows from `Organisations`: (1, RES, et), (2, RES, eius), (3, RES, impedit), CREATE TABLE `Project_Outcomes` ( project_id INTEGER REFERENCES Projects(project_id), outcome_code VARCHAR(10) REFERENCES Research_Outcomes(outcome_code), outcome_details VARCHAR(255) ); Sample rows from `Project_Outcomes`: (4, Paper, None), (3, Patent, None), (9, Paper, None), CREATE TABLE `Project_Staff` ( staff_id DOUBLE PRIMARY KEY, project_id INTEGER REFERENCES Projects(project_id), role_code VARCHAR(10) REFERENCES Staff_Roles(role_code), date_from DATETIME, date_to DATETIME, other_details VARCHAR(255) ); Sample rows from `Project_Staff`: (0.0, 2, leader, 1981-10-04 22:44:50, 1985-05-30 22:26:30, None), (674810.0, 5, leader, 2003-04-19 15:06:20, 2010-12-08 11:55:36, None), (779.0, 2, researcher, 1981-10-09 21:32:53, 2004-12-16 13:03:36, None), CREATE TABLE `Projects` ( project_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), project_details VARCHAR(255) ); Sample rows from `Projects`: (1, 15, porro), (2, 11, et), (3, 7, sint), CREATE TABLE `Research_Outcomes` ( outcome_code VARCHAR(10) PRIMARY KEY, outcome_description VARCHAR(255) ); Sample rows from `Research_Outcomes`: (Paper, Published Research Paper), (Patent, Research Patent), CREATE TABLE `Research_Staff` ( staff_id INTEGER, employer_organisation_id INTEGER REFERENCES Organisations(organisation_id), staff_details VARCHAR(255) ); Sample rows from `Research_Staff`: (1, 1, quo), (2, 4, est), (3, 5, aspernatur), CREATE TABLE `Staff_Roles` ( role_code VARCHAR(10) PRIMARY KEY, role_description VARCHAR(255) ); Sample rows from `Staff_Roles`: (leader, Project Leader), (researcher, Project Researcher), CREATE TABLE `Tasks` ( task_id INTEGER, project_id INTEGER REFERENCES Projects(project_id), task_details VARCHAR(255), eg Agree Objectives VARCHAR(1) ); Sample rows from `Tasks`: (1, 1, a, None), (2, 2, b, None), (3, 3, c, None), ",
        "output": "SELECT t1.project_details FROM projects as t1 JOIN project_outcomes as t2 ON t1.project_id  =  t2.project_id JOIN research_outcomes as t3 ON t2.outcome_code  =  t3.outcome_code WHERE t3.outcome_description LIKE '%Published%'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the details for all chip models. ###filtered_database_schema: CREATE TABLE `chip_model` ( Model_name TEXT PRIMARY KEY, Launch_year REAL, RAM_MiB REAL, ROM_MiB REAL, Slots TEXT, WiFi TEXT, Bluetooth TEXT ); Sample rows from `chip_model`: (X5, 2002.0, 32.0, 32.0, 1CFII,1SD, No, No), (X5 high end, 2002.0, 64.0, 48.0, 1CFII,1SD, No, No), (X3 Basic, 2003.0, 32.0, 32.0, 1SD, No, No), CREATE TABLE `screen_mode` ( Graphics_mode REAL PRIMARY KEY, Char_cells TEXT, Pixels TEXT, Hardware_colours REAL, used_kb REAL, map TEXT, Type TEXT ); Sample rows from `screen_mode`: (0.0, 80 × 32, 640 × 256, 2.0, 20.0, 3000–7FFF, Graphics), (1.0, 40 × 32, 320 × 256, 4.0, 20.0, 3000–7FFF, Graphics), (2.0, 20 × 32, 160 × 256, 8.0, 20.0, 3000–7FFF, Graphics), CREATE TABLE `phone` ( Company_name TEXT, Hardware_Model_name TEXT PRIMARY KEY, Accreditation_type TEXT, Accreditation_level TEXT, Date TEXT, chip_model TEXT REFERENCES chip_model(Model_name), screen_mode TEXT REFERENCES screen_mode(Graphics_mode) ); Sample rows from `phone`: (Sony Mobile Communications, XPERIA T, XPERIA J, Full, joyn Hot Fixes, Approved (awarded 15.11.12), X5, 1), (LG Electronics, LG-P760, Full, joyn Hot Fixes, Approved (awarded 19.11.12), X51v, 3), (Nokia Corporation, Lumia 920, Lumia 820, Lumia 620, Full, joyn Hot Fixes, Approved (awarded 05.12.12), X5, 4), ",
        "output": "SELECT * FROM chip_model"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the poll resource associated with the most candidates. ###filtered_database_schema: CREATE TABLE `candidate` ( Candidate_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Poll_Source TEXT, Date TEXT, Support_rate REAL, Consider_rate REAL, Oppose_rate REAL, Unsure_rate REAL ); Sample rows from `candidate`: (1, 1, WNBC/Marist Poll, Feb 12–15, 2007, 0.25, 0.3, 0.43, 0.2), (2, 3, WNBC/Marist Poll, Feb 12–15, 2007, 0.17, 0.42, 0.32, 0.9), (3, 4, FOX News/Opinion Dynamics Poll, Feb 13–14, 2007, 0.18, 0.34, 0.44, 0.3), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Sex TEXT, Name TEXT, Date_of_Birth TEXT, Height REAL, Weight REAL ); Sample rows from `people`: (1, M, Hubert Henno, 06.10.1976, 188.0, 83.0), (2, M, Dominique Daquin, 10.11.1972, 197.0, 85.0), (3, F, Stéphane Antiga, 03.02.1976, 200.0, 94.0), ",
        "output": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of reviews. ###filtered_database_schema: CREATE TABLE `item` ( i_id INTEGER, title varchar(20) ); Sample rows from `item`: (0, pear), (1, orange), (2, apple), CREATE TABLE `review` ( a_id INTEGER PRIMARY KEY, u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), i_id INTEGER PRIMARY KEY REFERENCES item(i_id), rating INTEGER, rank INTEGER ); Sample rows from `review`: (1, 1, 1, 10, 1), (2, 2, 1, 5, 2), (3, 1, 4, 7, 3), CREATE TABLE `useracct` ( u_id INTEGER, name varchar(128) ); Sample rows from `useracct`: (1, Helen), (2, Mark), (3, Terry), CREATE TABLE `trust` ( source_u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), target_u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), trust INTEGER ); Sample rows from `trust`: (1, 2, 10), (1, 3, 6), (2, 4, 8), ",
        "output": "SELECT COUNT(*) FROM review"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name and id of the top 3 expensive rooms. ###filtered_database_schema: CREATE TABLE `Rooms` ( RoomId TEXT PRIMARY KEY, roomName TEXT, beds INTEGER, bedType TEXT, maxOccupancy INTEGER, basePrice INTEGER, decor TEXT ); Sample rows from `Rooms`: (RND, Recluse and defiance, 1, King, 2, 150, modern), (IBS, Interim but salutary, 1, King, 2, 150, traditional), (AOB, Abscond or bolster, 2, Queen, 4, 175, traditional), CREATE TABLE `Reservations` ( Code INTEGER, Room TEXT REFERENCES Rooms(RoomId), CheckIn TEXT, CheckOut TEXT, Rate REAL, LastName TEXT, FirstName TEXT, Adults INTEGER, Kids INTEGER ); Sample rows from `Reservations`: (10105, HBB, 23-OCT-10, 25-OCT-10, 100.0, SELBIG, CONRAD, 1, 0), (10183, IBD, 19-SEP-10, 20-SEP-10, 150.0, GABLER, DOLLIE, 2, 0), (10449, RND, 30-SEP-10, 01-OCT-10, 150.0, KLESS, NELSON, 1, 0), ",
        "output": "SELECT roomid ,  roomname FROM rooms ORDER BY baseprice DESC LIMIT 3;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of students that have at least one grade \"B\". ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), CREATE TABLE `Department` ( DNO INTEGER, Division VARCHAR(2), DName VARCHAR(25), Room VARCHAR(5), Building VARCHAR(13), DPhone INTEGER ); Sample rows from `Department`: (10, AS, History of Art, 268, Mergenthaler, 7117), (20, AS, Biology, 144, Mudd, 7330), (30, AS, Chemistry, 113, Remsen, 7429), CREATE TABLE `Member_of` ( FacID INTEGER REFERENCES Faculty(FacID), DNO INTEGER REFERENCES Department(DNO), Appt_Type VARCHAR(15) ); Sample rows from `Member_of`: (7792, 600, Primary), (9210, 520, Primary), (9811, 550, Primary), CREATE TABLE `Course` ( CID VARCHAR(7) PRIMARY KEY, CName VARCHAR(40), Credits INTEGER, Instructor INTEGER REFERENCES Faculty(FacID), Days VARCHAR(5), Hours VARCHAR(11), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Course`: (600.101, COMPUTER LITERACY, 3, 6112, MTW, 3, 600), (600.103, INTRODUCTION TO COMPUTER SCIENCE, 1, 4230, Th, 4, 600), (600.107, INTRO TO PROGRAMMING IN JAVA, 3, 1193, MTW, 3, 600), CREATE TABLE `Minor_in` ( StuID INTEGER REFERENCES Student(StuID), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Minor_in`: (1004, 520), (1005, 550), (1006, 50), CREATE TABLE `Enrolled_in` ( StuID INTEGER REFERENCES Student(StuID), CID VARCHAR(7) REFERENCES Course(CID), Grade VARCHAR(2) REFERENCES Gradeconversion(lettergrade) ); Sample rows from `Enrolled_in`: (1001, 550.681, A-), (1001, 600.303, B), (1001, 600.315, B+), CREATE TABLE `Gradeconversion` ( lettergrade VARCHAR(2) PRIMARY KEY, gradepoint FLOAT ); Sample rows from `Gradeconversion`: (A+, 4.0), (A, 4.0), (A-, 3.7), ",
        "output": "SELECT COUNT(DISTINCT stuid) FROM enrolled_in WHERE grade  =  \"B\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What was the most popular position at tryouts? ###filtered_database_schema: CREATE TABLE `College` ( cName varchar(20) PRIMARY KEY, state varchar(2), enr numeric(5,0) ); Sample rows from `College`: (LSU, LA, 18000), (ASU, AZ, 12000), (OU, OK, 22000), CREATE TABLE `Player` ( pID numeric(5,0) PRIMARY KEY, pName varchar(20), yCard varchar(3), HS numeric(5,0) ); Sample rows from `Player`: (10001, Andrew, no, 1200), (20002, Blake, no, 1600), (30003, Charles, no, 300), CREATE TABLE `Tryout` ( pID numeric(5,0) PRIMARY KEY REFERENCES Player(pID), cName varchar(20) PRIMARY KEY REFERENCES College(cName), pPos varchar(8), decision varchar(3) ); Sample rows from `Tryout`: (10001, LSU, goalie, no), (10001, ASU, goalie, yes), (20002, FSU, striker, yes), ",
        "output": "SELECT ppos FROM tryout GROUP BY ppos ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names and number of works of all artists who have at least one English songs. ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT t1.artist_name ,  COUNT(*) FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.languages  =  \"english\" GROUP BY t2.artist_name HAVING COUNT(*)  >=  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the names of wrestlers with fewer than 100 days held. ###filtered_database_schema: CREATE TABLE `wrestler` ( Wrestler_ID INT PRIMARY KEY, Name TEXT, Reign TEXT, Days_held TEXT, Location TEXT, Event TEXT ); Sample rows from `wrestler`: (1, Rey Misterio Sr., 1, 344, Tijuana , Mexico, Live event), (2, Fishman, 1, 113, Tijuana , Mexico, Live event), (3, Villaño IV, 1, 1285, Tijuana , Mexico, Live event), CREATE TABLE `Elimination` ( Elimination_ID TEXT PRIMARY KEY, Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID), Team TEXT, Eliminated_By TEXT, Elimination_Move TEXT, Time TEXT ); Sample rows from `Elimination`: (1, 1, Team Orton, Punk, Go To Sleep, 00:11), (2, 2, Team Batista, Benjamin, Paydirt, 07:38), (3, 4, Team Batista, Orton, Rope hung DDT, 10:45), ",
        "output": "SELECT name FROM wrestler WHERE days_held  <  100"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Please list the years of film market estimations when the market is in country \"Japan\" in descending order. ###filtered_database_schema: CREATE TABLE `film` ( Film_ID INT PRIMARY KEY, Title TEXT, Studio TEXT, Director TEXT, Gross_in_dollar INT ); Sample rows from `film`: (1, ET the Extra-Terrestrial, Universal, Steven Spielberg, 435110554), (2, Tootsie, Columbia, Sydney Pollack, 177200000), (3, An Officer and a Gentleman, Paramount / Lorimar, Taylor Hackford, 129795554), CREATE TABLE `market` ( Market_ID INT PRIMARY KEY, Country TEXT, Number_cities INT ); Sample rows from `market`: (1, Japan, 209), (2, China, 540), (3, USA, 700), CREATE TABLE `film_market_estimation` ( Estimation_ID INT PRIMARY KEY, Low_Estimate REAL, High_Estimate REAL, Film_ID INT REFERENCES film(Film_ID), Type TEXT, Market_ID INT REFERENCES market(Market_ID), Year INT ); Sample rows from `film_market_estimation`: (1, 80000.0, 80400.0, 1, Mass suicide murder, 1, 1945), (2, 8000.0, 8000.0, 2, Mass suicide, 2, 1944), (3, 3000.0, 80400.0, 3, Mass human sacrifice, 3, 1487), ",
        "output": "SELECT t1.year FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE t2.country  =  \"Japan\" ORDER BY t1.year DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids of all students for courses and what are the names of those courses? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1 VARCHAR(80), line_2 VARCHAR(80), city VARCHAR(50), zip_postcode CHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (5, 0900 Roderick Oval New Albina, WA 19200-7914, Suite 096, Linnealand, 862, Montana, USA), (9, 966 Dach Ports Apt. 322 Lake Harmonyhaven, VA 65235, Apt. 163, South Minnie, 716, Texas, USA), (29, 28550 Broderick Underpass Suite 667 Zakaryhaven, WY 22945-1534, Apt. 419, North Trystanborough, 112, Vermont, USA), CREATE TABLE `People` ( person_id INTEGER, first_name VARCHAR(255), middle_name VARCHAR(255), last_name VARCHAR(255), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), login_name VARCHAR(40), password VARCHAR(40) ); Sample rows from `People`: (111, Shannon, Elissa, Senger, 01955267735, javier.trantow@example.net, pgub, 5e4ff49a61b3544da3ad7dc7e2cf28847564c64c), (121, Virginie, Jasmin, Hartmann, (508)319-2970x043, boyer.lonie@example.com, bkkv, b063331ea8116befaa7b84c59c6a22200f5f8caa), (131, Dariana, Hayley, Bednar, (262)347-9364x516, leila14@example.net, zops, b20b6a9f24aadeda70d54e410c3219f61fb063fb), CREATE TABLE `Students` ( student_id INTEGER REFERENCES People(person_id), student_details VARCHAR(255) ); Sample rows from `Students`: (111, Marry), (121, Martin), (131, Barry), CREATE TABLE `Courses` ( course_id VARCHAR(100) PRIMARY KEY, course_name VARCHAR(120), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Courses`: (301, statistics, statistics, None), (302, English, English, None), (303, French, French, None), CREATE TABLE `People_Addresses` ( person_address_id INTEGER, person_id INTEGER REFERENCES People(person_id), address_id INTEGER REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `People_Addresses`: (122, 111, 9, 2012-09-26 13:21:00, 2018-03-21 09:46:30), (257, 121, 5, 2008-07-31 02:17:25, 2018-03-09 02:11:12), (269, 131, 88, 2008-05-26 20:43:41, 2018-03-11 20:26:41), CREATE TABLE `Student_Course_Registrations` ( student_id INTEGER PRIMARY KEY REFERENCES Students(student_id), course_id INTEGER PRIMARY KEY REFERENCES Courses(course_id), registration_date DATETIME ); Sample rows from `Student_Course_Registrations`: (111, 301, 2008-11-04 10:35:13), (121, 301, 2008-10-04 10:35:13), (121, 303, 2008-11-14 10:35:13), CREATE TABLE `Student_Course_Attendance` ( student_id INTEGER PRIMARY KEY REFERENCES Student_Course_Registrations(student_id), course_id INTEGER PRIMARY KEY REFERENCES Student_Course_Registrations(course_id), date_of_attendance DATETIME ); Sample rows from `Student_Course_Attendance`: (111, 301, 2008-11-04 10:35:13), (121, 301, 2012-04-09 11:44:34), (121, 303, 2014-04-09 11:44:34), CREATE TABLE `Candidates` ( candidate_id INTEGER REFERENCES People(person_id), candidate_details VARCHAR(255) ); Sample rows from `Candidates`: (111, Jane), (121, Robert), (131, Alex), CREATE TABLE `Candidate_Assessments` ( candidate_id INTEGER PRIMARY KEY REFERENCES Candidates(candidate_id), qualification CHAR(15) PRIMARY KEY, assessment_date DATETIME, asessment_outcome_code CHAR(15) ); Sample rows from `Candidate_Assessments`: (111, A, 2010-04-07 11:44:34, Pass), (121, B, 2010-04-17 11:44:34, Pass), (131, D, 2010-04-05 11:44:34, Fail), ",
        "output": "SELECT t1.student_id ,  t2.course_name FROM student_course_registrations as t1 JOIN courses as t2 ON t1.course_id = t2.course_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the abstract of \" Making database systems usable \" . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT abstract FROM publication WHERE title  =  \"Making database systems usable\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers. ###filtered_database_schema: CREATE TABLE `list` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Grade INTEGER, Classroom INTEGER ); Sample rows from `list`: (CAR, MAUDE, 2, 101), (KRISTENSEN, STORMY, 6, 112), (VANDERWOUDE, SHERWOOD, 3, 107), CREATE TABLE `teachers` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Classroom INTEGER ); Sample rows from `teachers`: (MACROSTIE, MIN, 101), (COVIN, JEROME, 102), (MOYER, OTHA, 103), ",
        "output": "SELECT t2.firstname ,  t2.lastname FROM list as t1 JOIN teachers as t2 ON t1.classroom  =  t2.classroom WHERE t1.firstname  =  \"EVELINA\" AND t1.lastname  =  \"BROMLEY\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: datasets used for evaluating semantic parsing ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average number of cities of markets with low film market estimate bigger than 10000? ###filtered_database_schema: CREATE TABLE `film` ( Film_ID INT PRIMARY KEY, Title TEXT, Studio TEXT, Director TEXT, Gross_in_dollar INT ); Sample rows from `film`: (1, ET the Extra-Terrestrial, Universal, Steven Spielberg, 435110554), (2, Tootsie, Columbia, Sydney Pollack, 177200000), (3, An Officer and a Gentleman, Paramount / Lorimar, Taylor Hackford, 129795554), CREATE TABLE `market` ( Market_ID INT PRIMARY KEY, Country TEXT, Number_cities INT ); Sample rows from `market`: (1, Japan, 209), (2, China, 540), (3, USA, 700), CREATE TABLE `film_market_estimation` ( Estimation_ID INT PRIMARY KEY, Low_Estimate REAL, High_Estimate REAL, Film_ID INT REFERENCES film(Film_ID), Type TEXT, Market_ID INT REFERENCES market(Market_ID), Year INT ); Sample rows from `film_market_estimation`: (1, 80000.0, 80400.0, 1, Mass suicide murder, 1, 1945), (2, 8000.0, 8000.0, 2, Mass suicide, 2, 1944), (3, 3000.0, 80400.0, 3, Mass human sacrifice, 3, 1487), ",
        "output": "SELECT AVG(t2.number_cities) FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id WHERE t1.low_estimate  >  10000"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the id of the project with least number of documents? ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (BK, Book, excellent), (CV, CV, excellent), (PT, Presentation, very good), CREATE TABLE `Ref_Budget_Codes` ( Budget_Type_Code CHAR(15) PRIMARY KEY, Budget_Type_Description VARCHAR(255) ); Sample rows from `Ref_Budget_Codes`: (GV, Government), (ORG, Organisation), (SF, Self founded), CREATE TABLE `Projects` ( Project_ID INTEGER, Project_Details VARCHAR(255) ); Sample rows from `Projects`: (30, Society Research project), (35, Internet of Things project), (105, Graph Database project), CREATE TABLE `Documents` ( Document_ID INTEGER, Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Project_ID INTEGER REFERENCES Projects(Project_ID), Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Documents`: (29, CV, 30, 2004-08-28 06:59:19, Review on UK files, None, None), (42, BK, 105, 2012-12-27 19:09:18, Review on Canadian files, None, None), (57, CV, 195, 1980-10-22 14:17:11, Review on French files, None, None), CREATE TABLE `Statements` ( Statement_ID INTEGER REFERENCES Documents(Document_ID), Statement_Details VARCHAR(255) ); Sample rows from `Statements`: (57, Open Project), (192, Private Project), CREATE TABLE `Documents_with_Expenses` ( Document_ID INTEGER REFERENCES Documents(Document_ID), Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code), Document_Details VARCHAR(255) ); Sample rows from `Documents_with_Expenses`: (57, GV, government), (192, GV, government), (226, GV, government), CREATE TABLE `Accounts` ( Account_ID INTEGER, Statement_ID INTEGER REFERENCES Statements(Statement_ID), Account_Details VARCHAR(255) ); Sample rows from `Accounts`: (7, 57, 495.063), (61, 57, 930.14), (98, 57, 6035.84), ",
        "output": "SELECT project_id FROM documents GROUP BY project_id ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: best paper in TACL 2014 ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(DISTINCT t3.citingpaperid)  ,  t1.paperid FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT(DISTINCT t3.citingpaperid) DESC;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For each phone, show its names and total number of stocks. ###filtered_database_schema: CREATE TABLE `phone` ( Name TEXT, Phone_ID INT PRIMARY KEY, Memory_in_G INT, Carrier TEXT, Price REAL ); Sample rows from `phone`: (IPhone 5s, 1, 32, Sprint, 320.0), (IPhone 6, 5, 128, Sprint, 480.0), (IPhone 6s, 2, 128, TMobile, 699.0), CREATE TABLE `market` ( Market_ID INT PRIMARY KEY, District TEXT, Num_of_employees INT, Num_of_shops REAL, Ranking INT ); Sample rows from `market`: (1, Alberta, 1966, 40.0, 1), (2, British Columbia, 1965, 49.0, 21), (3, New Brunswick, 1978, 10.0, 4), CREATE TABLE `phone_market` ( Market_ID INT PRIMARY KEY REFERENCES market(Market_ID), Phone_ID TEXT PRIMARY KEY REFERENCES phone(Phone_ID), Num_of_stock INT ); Sample rows from `phone_market`: (1, 1, 2232), (2, 2, 4324), (1, 4, 874), ",
        "output": "SELECT t2.name ,  SUM(t1.num_of_stock) FROM phone_market as t1 JOIN phone as t2 ON t1.phone_id  =  t2.phone_id GROUP BY t2.name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the average, minimum, and maximum ticket prices for exhibitions that happened prior to 2009? ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Year_Join INT, Age INT ); Sample rows from `artist`: (1, Vijay Singh, Fiji, 1998, 45), (2, John Daly, United States, 1991, 46), (3, Paul Azinger, United States, 1993, 47), CREATE TABLE `exhibition` ( Exhibition_ID INT PRIMARY KEY, Year INT, Theme TEXT, Artist_ID INT REFERENCES artist(Artist_ID), Ticket_Price REAL ); Sample rows from `exhibition`: (1, 2004, Santa Claus, 1, 19.95), (2, 2005, Christmas stocking, 2, 19.95), (3, 2006, Santa Claus and Rudolph the Red-Nosed Reindeer, 4, 14.95), CREATE TABLE `exhibition_record` ( Exhibition_ID INT PRIMARY KEY REFERENCES exhibition(Exhibition_ID), Date TEXT PRIMARY KEY, Attendance INT ); Sample rows from `exhibition_record`: (1, December 2, 965), (1, December 5, 1098), (1, December 7, 2983), ",
        "output": "SELECT AVG(ticket_price) ,  MIN(ticket_price) ,  MAX(ticket_price) FROM exhibition WHERE year  <  2009"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the first and last names of all customers who lived in Lockmanfurt? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 3904 Stroman Passage, Port Melyssa, 14445, Georgia, USA), (2, 053 Quigley Island, Hagenesfurt, 22194, Kentucky, USA), (3, 00704 Zoe Alley, Lake Elaina, 08938, Georgia, USA), CREATE TABLE `Staff` ( staff_id INTEGER, staff_address_id INTEGER REFERENCES Addresses(address_id), nickname VARCHAR(80), first_name VARCHAR(80), middle_name VARCHAR(80), last_name VARCHAR(80), date_of_birth DATETIME, date_joined_staff DATETIME, date_left_staff DATETIME ); Sample rows from `Staff`: (1, 14, thompson.constantin, Janessa, Amara, Sawayn, 2010-12-08 16:55:14, 2017-04-27 03:21:26, 2018-03-23 22:53:12), (2, 3, santos45, Camylle, Icie, Weissnat, 2015-08-01 13:22:43, 2016-06-06 08:54:28, 2018-03-10 15:25:00), (3, 5, ynader, Kaitlin, Stephania, Mertz, 1994-05-17 05:32:11, 2018-01-02 12:24:24, 2018-03-24 10:11:08), CREATE TABLE `Vehicles` ( vehicle_id INTEGER, vehicle_details VARCHAR(255) ); Sample rows from `Vehicles`: (1, Van), (2, Truck), (3, Car), CREATE TABLE `Customers` ( customer_id INTEGER, customer_address_id INTEGER REFERENCES Addresses(address_id), customer_status_code VARCHAR(15), date_became_customer DATETIME, date_of_birth DATETIME, first_name VARCHAR(80), last_name VARCHAR(80), amount_outstanding DOUBLE, email_address VARCHAR(250), phone_number VARCHAR(255), cell_mobile_phone_number VARCHAR(255) ); Sample rows from `Customers`: (1, 13, Bad Customer, 2016-05-11 17:03:48, 1998-12-15 13:24:40, Carole, Bernhard, 255.0, everette.goyette@example.org, 07278206718, 861-638-9797), (2, 10, Bad Customer, 2015-11-16 22:52:14, 1995-07-17 12:13:16, Genevieve, Terry, 7256.0, huel.jana@example.org, +14(5)2351480248, 578-518-4785x612), (3, 10, Good Customer, 2016-04-08 00:28:15, 1994-06-21 01:34:56, Clara, Ortiz, 9443.0, hilario.sporer@example.org, 374-483-2758x85087, 1-197-686-2849x8761), CREATE TABLE `Customer_Payments` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), datetime_payment DATETIME PRIMARY KEY, payment_method_code VARCHAR(10), amount_payment DOUBLE ); Sample rows from `Customer_Payments`: (11, 2018-02-05 18:44:46, Direct Debit, 9570.93), (2, 2018-02-24 10:07:05, Direct Debit, 8180.26), (14, 2018-02-27 20:08:53, Direct Debit, 4610.26), CREATE TABLE `Lessons` ( lesson_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), lesson_status_code VARCHAR(15), staff_id INTEGER REFERENCES Staff(staff_id), vehicle_id INTEGER REFERENCES Vehicles(vehicle_id), lesson_date DATETIME, lesson_time VARCHAR(10), price DOUBLE ); Sample rows from `Lessons`: (1, 6, Cancelled, 8, 3, 2018-02-28 10:55:36, 5, 199.0), (2, 8, Cancelled, 14, 3, 2018-03-07 16:12:36, 6, 167.0), (3, 6, Cancelled, 11, 2, 2018-03-03 15:10:16, 3, 352.0), ",
        "output": "SELECT t1.first_name ,  t1.last_name FROM customers as t1 JOIN addresses as t2 ON t1.customer_address_id = t2.address_id WHERE t2.city = \"Lockmanfurt\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all cities with more than one airport and how many airports do they have? ###filtered_database_schema: CREATE TABLE `routes` ( rid INTEGER, dst_apid INTEGER REFERENCES airports(apid), dst_ap varchar(4), src_apid bigint REFERENCES airports(apid), src_ap varchar(4), alid bigint REFERENCES airlines(alid), airline varchar(4), codeshare TEXT ); Sample rows from `routes`: (37, 2990, KZ, 2965, AER, 410, 2B, None), (38, 2990, KZ, 2966, ASF, 410, 2B, None), (39, 2962, MRV, 2966, ASF, 410, 2B, None), CREATE TABLE `airports` ( apid INTEGER, name TEXT, city TEXT, country TEXT, x REAL, y REAL, elevation bigint, iata character varchar(3), icao character varchar(4) ); Sample rows from `airports`: (1, Goroka Airport, Goroka, Papua New Guinea, 145.391998291, -6.081689834590001, 5282, GKA, AYGA), (2, Madang Airport, Madang, Papua New Guinea, 145.789001465, -5.20707988739, 20, MAG, AYMD), (3, Mount Hagen Kagamuga Airport, Mount Hagen, Papua New Guinea, 144.29600524902344, -5.826789855957031, 5388, HGU, AYMH), CREATE TABLE `airlines` ( alid INTEGER, name TEXT, iata varchar(2), icao varchar(3), callsign TEXT, country TEXT, active varchar(2) ); Sample rows from `airlines`: (-1, Unknown, -, N/A, None, None, Y), (1, Private flight, -, N/A, , , Y), (2, 135 Airways, , GNL, GENERAL, United States, N), ",
        "output": "SELECT city ,  COUNT(*) FROM airports GROUP BY city HAVING COUNT(*)  >  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of clubs for which the student named \"Eric Tai\" is a member. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Club` ( ClubID INTEGER, ClubName VARCHAR(40), ClubDesc VARCHAR(1024), ClubLocation VARCHAR(40) ); Sample rows from `Club`: (1, Bootup Baltimore, Refurbish computers; teach kids and adults about computer basics., AKW), (2, Hopkins Student Enterprises, Venture capital fund for student business., AKW), (3, Pen and Paper Gaming, Play pen and paper games on campus., HHH), CREATE TABLE `Member_of_club` ( StuID INTEGER REFERENCES Student(StuID), ClubID INTEGER REFERENCES Club(ClubID), Position VARCHAR(40) ); Sample rows from `Member_of_club`: (1001, 1, President), (1007, 4, Vice-President), (1008, 2, CTO), ",
        "output": "SELECT COUNT(DISTINCT t1.clubname) FROM club as t1 JOIN member_of_club as t2 ON t1.clubid  =  t2.clubid JOIN student as t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show different locations and the number of performances at each location. ###filtered_database_schema: CREATE TABLE `member` ( Member_ID TEXT PRIMARY KEY, Name TEXT, Nationality TEXT, Role TEXT ); Sample rows from `member`: (1, Wilfredo Ruiz, Uruguay, Prime Violin), (2, Luis González, Argentina, Violin), (3, Héctor Campana, Argentina, Violin), CREATE TABLE `performance` ( Performance_ID REAL PRIMARY KEY, Date TEXT, Host TEXT, Location TEXT, Attendance INT ); Sample rows from `performance`: (1.0, February 2, Boston Bruins, TD Garden, 165), (2.0, February 4, New York Rangers, Madison Square Garden, 1820), (3.0, February 5, Atlanta Thrashers, Verizon Center, 1878), CREATE TABLE `member_attendance` ( Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Performance_ID INT PRIMARY KEY REFERENCES performance(Performance_ID), Num_of_Pieces INT ); Sample rows from `member_attendance`: (11, 3, 2), (7, 2, 3), (4, 6, 4), ",
        "output": "SELECT location ,  COUNT(*) FROM performance GROUP BY location"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the name and age for all male people who don't have a wedding. ###filtered_database_schema: CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Is_Male TEXT, Age INT ); Sample rows from `people`: (1, Mike Weir, Canada, T, 34), (2, Juli Hanson, Sweden, F, 32), (3, Ricky Barnes, United States, T, 30), CREATE TABLE `church` ( Church_ID INT PRIMARY KEY, Name TEXT, Organized_by TEXT, Open_Date INT, Continuation_of TEXT ); Sample rows from `church`: (1, Pure Church of Christ, Wycam Clark, 1831, Church of Christ), (2, Independent Church, – Hoton, 1832, Church of Christ), (3, Church of Christ, Ezra Booth, 1836, Church of the Latter Day Saints), CREATE TABLE `wedding` ( Church_ID INT PRIMARY KEY REFERENCES church(Church_ID), Male_ID INT PRIMARY KEY REFERENCES people(People_ID), Female_ID INT PRIMARY KEY REFERENCES people(People_ID), Year INT ); Sample rows from `wedding`: (1, 1, 2, 2014), (3, 3, 4, 2015), (5, 5, 6, 2016), ",
        "output": "SELECt name ,  age FROM people WHERE is_male  =  't' AND people_id NOt IN (SELECt male_id FROM wedding)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List names of all pilot in descending order of age. ###filtered_database_schema: CREATE TABLE `pilot` ( Pilot_Id int(11) PRIMARY KEY, Name varchar(50), Age int(11) ); Sample rows from `pilot`: (1, Prof. Zackery Collins, 23), (2, Katheryn Gorczany IV, 20), (3, Mr. Cristian Halvorson II, 23), CREATE TABLE `aircraft` ( Aircraft_ID int(11) PRIMARY KEY, Aircraft varchar(50), Description varchar(50), Max_Gross_Weight varchar(50), Total_disk_area varchar(50), Max_disk_Loading varchar(50) ); Sample rows from `aircraft`: (1, Robinson R-22, Light utility helicopter, 1,370 lb (635 kg), 497 ft² (46.2 m²), 2.6 lb/ft² (14 kg/m²)), (2, Bell 206B3 JetRanger, Turboshaft utility helicopter, 3,200 lb (1,451 kg), 872 ft² (81.1 m²), 3.7 lb/ft² (18 kg/m²)), (3, CH-47D Chinook, Tandem rotor helicopter, 50,000 lb (22,680 kg), 5,655 ft² (526 m²), 8.8 lb/ft² (43 kg/m²)), CREATE TABLE `match` ( Round REAL PRIMARY KEY, Location TEXT, Country TEXT, Date TEXT, Fastest_Qualifying TEXT, Winning_Pilot TEXT REFERENCES pilot(Pilot_Id), Winning_Aircraft TEXT REFERENCES aircraft(Aircraft_ID) ); Sample rows from `match`: (1.0, Mina' Zayid , Abu Dhabi, United Arab Emirates, March 26–27, Hannes Arch, 1, 1), (2.0, Swan River , Perth, Australia, April 17–18, Paul Bonhomme, 4, 1), (3.0, Flamengo Beach , Rio de Janeiro, Brazil, May 8–9, Hannes Arch, 6, 2), CREATE TABLE `airport` ( Airport_ID INT PRIMARY KEY, Airport_Name TEXT, Total_Passengers REAL, %_Change_2007 TEXT, International_Passengers REAL, Domestic_Passengers REAL, Transit_Passengers REAL, Aircraft_Movements REAL, Freight_Metric_Tonnes REAL ); Sample rows from `airport`: (1, London Heathrow, 67054745.0, 1.5%, 61344438.0, 5562516.0, 147791.0, 478693.0, 1397054.0), (2, London Gatwick, 34205887.0, 2.9%, 30431051.0, 3730963.0, 43873.0, 263653.0, 107702.0), (3, London Stansted, 22360364.0, 6.0%, 19996947.0, 2343428.0, 19989.0, 193282.0, 197738.0), CREATE TABLE `airport_aircraft` ( ID INT, Airport_ID INT PRIMARY KEY REFERENCES airport(Airport_ID), Aircraft_ID INT PRIMARY KEY REFERENCES aircraft(Aircraft_ID) ); Sample rows from `airport_aircraft`: (1, 6, 5), (2, 2, 1), (3, 1, 2), ",
        "output": "SELECT name FROM pilot ORDER BY age DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the course names, ordered by credits? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), CREATE TABLE `Department` ( DNO INTEGER, Division VARCHAR(2), DName VARCHAR(25), Room VARCHAR(5), Building VARCHAR(13), DPhone INTEGER ); Sample rows from `Department`: (10, AS, History of Art, 268, Mergenthaler, 7117), (20, AS, Biology, 144, Mudd, 7330), (30, AS, Chemistry, 113, Remsen, 7429), CREATE TABLE `Member_of` ( FacID INTEGER REFERENCES Faculty(FacID), DNO INTEGER REFERENCES Department(DNO), Appt_Type VARCHAR(15) ); Sample rows from `Member_of`: (7792, 600, Primary), (9210, 520, Primary), (9811, 550, Primary), CREATE TABLE `Course` ( CID VARCHAR(7) PRIMARY KEY, CName VARCHAR(40), Credits INTEGER, Instructor INTEGER REFERENCES Faculty(FacID), Days VARCHAR(5), Hours VARCHAR(11), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Course`: (600.101, COMPUTER LITERACY, 3, 6112, MTW, 3, 600), (600.103, INTRODUCTION TO COMPUTER SCIENCE, 1, 4230, Th, 4, 600), (600.107, INTRO TO PROGRAMMING IN JAVA, 3, 1193, MTW, 3, 600), CREATE TABLE `Minor_in` ( StuID INTEGER REFERENCES Student(StuID), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Minor_in`: (1004, 520), (1005, 550), (1006, 50), CREATE TABLE `Enrolled_in` ( StuID INTEGER REFERENCES Student(StuID), CID VARCHAR(7) REFERENCES Course(CID), Grade VARCHAR(2) REFERENCES Gradeconversion(lettergrade) ); Sample rows from `Enrolled_in`: (1001, 550.681, A-), (1001, 600.303, B), (1001, 600.315, B+), CREATE TABLE `Gradeconversion` ( lettergrade VARCHAR(2) PRIMARY KEY, gradepoint FLOAT ); Sample rows from `Gradeconversion`: (A+, 4.0), (A, 4.0), (A-, 3.7), ",
        "output": "SELECT cname FROM course ORDER BY credits"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the customer name, customer address city, date from, and date to for each customer address history. ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 4315 Kerluke Canyon Apt. 800, Hertafurt, 740, Nevada, USA), (2, 319 Kozey Highway Suite 973, Edgardoberg, 282, Colorado, USA), (3, 592 Frederique Ridge, Gilbertmouth, 167, Virginia, USA), CREATE TABLE `Products` ( product_id INTEGER, product_type_code VARCHAR(15), product_name VARCHAR(80), product_price DOUBLE ); Sample rows from `Products`: (1, Hardware, Apple, 54753982.574522), (2, Clothes, jcrew, 30590929.528306), (3, Hardware, Apple, 10268.85297069), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method_code VARCHAR(15), customer_number VARCHAR(20), customer_name VARCHAR(80), customer_address VARCHAR(255), customer_phone VARCHAR(80), customer_email VARCHAR(80) ); Sample rows from `Customers`: (1, Credit Card, 456, Kayley, 636 Chanelle Isle Apt. 846, +87(9)5279161988, antonette73@example.com), (2, Credit Card, 553, Sterling, 12174 Boyer Crossroad, 896.685.8228x2786, stroman.chadd@example.net), (3, Credit Card, 951, Buford, 650 Spencer Way Apt. 584, (192)144-4687, pattie.mayer@example.net), CREATE TABLE `Contacts` ( contact_id INTEGER, customer_id INTEGER, gender VARCHAR(1), first_name VARCHAR(80), last_name VARCHAR(50), contact_phone VARCHAR(80) ); Sample rows from `Contacts`: (1, 4, male, Cierra, Collins, +73(2)0854391820), (2, 6, male, Jennifer, Doyle, 482-949-1364x17500), (3, 8, female, Carli, Blick, (608)868-5069x554), CREATE TABLE `Customer_Address_History` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Customer_Address_History`: (12, 7, 2015-07-23 14:37:18, 2018-03-07 12:04:20), (12, 2, 2016-11-06 14:33:12, 2018-03-14 21:36:28), (3, 9, 2011-11-19 12:17:36, 2018-03-22 10:20:16), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_date DATETIME, order_status_code VARCHAR(15) ); Sample rows from `Customer_Orders`: (1, 2, 2009-07-19 13:40:49, Completed), (2, 2, 1976-05-28 15:02:44, Part), (3, 6, 1979-03-29 02:47:13, Completed), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), order_quantity VARCHAR(80) ); Sample rows from `Order_Items`: (1, 9, 15, 3), (2, 8, 12, 7), (3, 11, 9, 9), ",
        "output": "SELECT t2.customer_name ,  t3.city ,  t1.date_from ,  t1.date_to FROM customer_address_history as t1 JOIN customers as t2 ON t1.customer_id  =  t2.customer_id JOIN addresses as t3 ON t1.address_id  =  t3.address_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the venues of all the matches? Sort them in the descending order of match date. ###filtered_database_schema: CREATE TABLE `city` ( City_ID INT PRIMARY KEY, City TEXT, Hanzi TEXT, Hanyu_Pinyin TEXT, Regional_Population INT, GDP REAL ); Sample rows from `city`: (1, Shanghai, 上海, Shànghǎi, 23019148, 1919.57), (2, Nanjing ( Jiangsu ), 南京, Nánjīng, 8004680, 614.55), (3, Hangzhou ( Zhejiang ), 杭州, Hángzhōu, 8700400, 701.18), CREATE TABLE `match` ( Match_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Score TEXT, Result TEXT, Competition TEXT ); Sample rows from `match`: (1, 18 February 1992, Estadio Cuscatlán , San Salvador , El Salvador, 1-0, 2-0, Friendly match), (2, 19 July 1992, Estadio Rigoberto López , Managua , Nicaragua, 3-0, 5-0, 1994 FIFA World Cup qualification), (3, 23 July 1992, Estadio Cuscatlán , San Salvador , El Salvador, 1-0, 5-1, 1994 FIFA World Cup qualification), CREATE TABLE `temperature` ( City_ID INT PRIMARY KEY REFERENCES city(City_ID), Jan REAL, Feb REAL, Mar REAL, Apr REAL, Jun REAL, Jul REAL, Aug REAL, Sep REAL, Oct REAL, Nov REAL, Dec REAL ); Sample rows from `temperature`: (1, 17.8, 17.8, 18.3, 18.9, 20.0, 20.6, 20.6, 20.6, 20.0, 19.4, 18.3), (2, 26.1, 26.1, 26.1, 26.1, 27.8, 27.8, 28.3, 28.3, 28.3, 27.2, 26.7), (3, 18.9, 18.3, 19.4, 20.0, 22.2, 23.3, 23.9, 23.3, 22.8, 21.7, 20.0), CREATE TABLE `hosting_city` ( Year INT PRIMARY KEY, Match_ID INT REFERENCES match(Match_ID), Host_City TEXT REFERENCES city(City_ID) ); Sample rows from `hosting_city`: (2008, 1, 1), (2009, 2, 2), (2010, 3, 2), ",
        "output": "SELECT venue FROM match ORDER BY date DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average bike availability in stations that are not located in Palo Alto? ###filtered_database_schema: CREATE TABLE `station` ( id INTEGER, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT ); Sample rows from `station`: (2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013), (3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013), (4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013), CREATE TABLE `status` ( station_id INTEGER REFERENCES station(id), bikes_available INTEGER, docks_available INTEGER, time TEXT ); Sample rows from `status`: (3, 12, 3, 2015-06-02 12:46:02), (3, 12, 3, 2015-06-02 12:47:02), (3, 12, 3, 2015-06-02 12:48:02), CREATE TABLE `trip` ( id INTEGER, duration INTEGER, start_date TEXT, start_station_name TEXT, start_station_id INTEGER, end_date TEXT, end_station_name TEXT, end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER ); Sample rows from `trip`: (900504, 384, 8/21/2015 17:03, Howard at 2nd, 63, 8/21/2015 17:10, San Francisco Caltrain 2 (330 Townsend), 69, 454, Subscriber, 94041), (900505, 588, 8/21/2015 17:03, South Van Ness at Market, 66, 8/21/2015 17:13, San Francisco Caltrain 2 (330 Townsend), 69, 574, Subscriber, 95119), (900506, 196, 8/21/2015 17:04, Market at Sansome, 77, 8/21/2015 17:07, Harry Bridges Plaza (Ferry Building), 50, 636, Subscriber, 94925), CREATE TABLE `weather` ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER ); Sample rows from `weather`: (8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107), (8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107), (8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107), ",
        "output": "SELECT AVG(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of the districts that have both mall and village store style shops? ###filtered_database_schema: CREATE TABLE `product` ( product_id INT PRIMARY KEY, product TEXT, dimensions TEXT, dpi REAL, pages_per_minute_color REAL, max_page_size TEXT, interface TEXT ); Sample rows from `product`: (1, Fujitsu fi-6130 A4 Series Scanner, 301 x 160 x 158, 600.0, 30.0, A4, USB 2.0), (2, Plustek MobileOffice D28 Corporate, 303 x 94 x 60, 600.0, 28.0, A4, USB 2.0), (3, Xerox Travel Scanner 100, 289 x 51 x 38, 600.0, 4.0, A4, USB 2.0), CREATE TABLE `store` ( Store_ID INT PRIMARY KEY, Store_Name TEXT, Type TEXT, Area_size REAL, Number_of_product_category REAL, Ranking INT ); Sample rows from `store`: (1, Miramichi, City Mall, 179.84, 17811.0, 2), (2, Neguac, Village Store, 26.69, 1678.0, 3), (3, Rogersville, Village Store, 7.23, 1170.0, 1), CREATE TABLE `district` ( District_ID INT PRIMARY KEY, District_name TEXT, Headquartered_City TEXT, City_Population REAL, City_Area REAL ); Sample rows from `district`: (1, Attock District, Attock City, 94620.0, 20.0), (2, Bahawalnagar District, Bahawalnagar City, 134936.0, 13.0), (3, Bahawalpur District, Bahawalpur City, 530438.0, 38.0), CREATE TABLE `store_product` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), Product_ID INT PRIMARY KEY REFERENCES product(Product_ID) ); Sample rows from `store_product`: (1, 1), (1, 2), (1, 3), CREATE TABLE `store_district` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), District_ID INT REFERENCES district(District_ID) ); Sample rows from `store_district`: (1, 15), (2, 15), (3, 11), ",
        "output": "SELECT t3.district_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.type  =  \"City Mall\" INTERSECT SELECT t3.district_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id WHERE t1.type  =  \"Village Store\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of companies with revenue less than the lowest revenue of any manufacturer in Austin? ###filtered_database_schema: CREATE TABLE `Manufacturers` ( Code INTEGER, Name VARCHAR(255), Headquarter VARCHAR(255), Founder VARCHAR(255), Revenue REAL ); Sample rows from `Manufacturers`: (1, Sony, Tokyo, Andy, 120.0), (2, Creative Labs, Austin, Owen, 100.0), (3, Hewlett-Packard, Los Angeles, James, 50.0), CREATE TABLE `Products` ( Code INTEGER, Name VARCHAR(255), Price DECIMAL, Manufacturer INTEGER REFERENCES Manufacturers(Code) ); Sample rows from `Products`: (1, Hard drive, 240, 5), (2, Memory, 120, 6), (3, ZIP drive, 150, 4), ",
        "output": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT MIN(revenue) FROM manufacturers WHERE headquarter  =  'Austin')"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many students live in HKG or CHI? ###filtered_database_schema: CREATE TABLE `Allergy_Type` ( Allergy VARCHAR(20) PRIMARY KEY, AllergyType VARCHAR(20) ); Sample rows from `Allergy_Type`: (Eggs, food), (Nuts, food), (Milk, food), CREATE TABLE `Has_Allergy` ( StuID INTEGER REFERENCES Student(StuID), Allergy VARCHAR(20) REFERENCES Allergy_Type(Allergy) ); Sample rows from `Has_Allergy`: (1001, Cat), (1002, Shellfish), (1002, Tree Pollen), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), ",
        "output": "SELECT COUNT(*) FROM student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which customers have an insurance policy with the type code \"Deputy\" or \"Uniform\"? Return the customer details. ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_Details VARCHAR(255) ); Sample rows from `Customers`: (252, America Jaskolski), (263, Ellsworth Paucek), (334, Mrs. Hanna Willms), CREATE TABLE `Staff` ( Staff_ID INTEGER, Staff_Details VARCHAR(255) ); Sample rows from `Staff`: (406, Clifton), (427, Cathryn), (510, Kaci), CREATE TABLE `Policies` ( Policy_ID INTEGER, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Policy_Type_Code CHAR(15), Start_Date DATETIME, End_Date DATETIME ); Sample rows from `Policies`: (125, 808, Deputy, 2018-02-10 08:56:30, 2018-03-18 09:17:26), (151, 380, Jurisdiction, 2017-12-20 06:02:31, 2017-09-16 22:04:13), (287, 334, Jurisdiction, 2017-03-16 18:16:52, 2017-11-24 06:36:51), CREATE TABLE `Claim_Headers` ( Claim_Header_ID INTEGER, Claim_Status_Code CHAR(15), Claim_Type_Code CHAR(15), Policy_ID INTEGER REFERENCES Policies(Policy_ID), Date_of_Claim DATETIME, Date_of_Settlement DATETIME, Amount_Claimed DECIMAL(20,4), Amount_Piad DECIMAL(20,4) ); Sample rows from `Claim_Headers`: (15, Settled, Handphone Subsidy, 518, 2016-05-31 06:07:11, 2018-02-23 03:46:38, 349.15, 582.03), (24, Disputed, Child Birth, 518, 2016-12-30 21:43:21, 2017-10-08 21:43:14, 318.16, 309.2), (27, Disputed, Overtime Meal Subsidy, 518, 2017-05-01 13:34:43, 2017-11-16 04:06:05, 362.71, 132.97), CREATE TABLE `Claims_Documents` ( Claim_ID INTEGER PRIMARY KEY REFERENCES Claim_Headers(Claim_Header_ID), Document_Type_Code CHAR(15) PRIMARY KEY, Created_by_Staff_ID INTEGER REFERENCES Staff(Staff_ID), Created_Date INTEGER ); Sample rows from `Claims_Documents`: (24, Document, 718, 8), (27, Document, 986, 6), (27, Medical, 427, 8), CREATE TABLE `Claims_Processing_Stages` ( Claim_Stage_ID INTEGER, Next_Claim_Stage_ID INTEGER, Claim_Status_Name VARCHAR(255), Claim_Status_Description VARCHAR(255) ); Sample rows from `Claims_Processing_Stages`: (1, 1, Open, Open a new claim), (3, 1, Close, Close a claim), CREATE TABLE `Claims_Processing` ( Claim_Processing_ID INTEGER, Claim_ID INTEGER REFERENCES Claim_Headers(Claim_Header_ID), Claim_Outcome_Code CHAR(15), Claim_Stage_ID INTEGER, Staff_ID INTEGER REFERENCES Staff(Staff_ID) ); Sample rows from `Claims_Processing`: (118, 28, In progress, 1, 771), (145, 62, In progress, 1, 589), (213, 27, In progress, 1, 589), ",
        "output": "SELECT DISTINCT t2.customer_details FROM policies as t1 JOIN customers as t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show all artist names who didn't have an exhibition in 2004. ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Year_Join INT, Age INT ); Sample rows from `artist`: (1, Vijay Singh, Fiji, 1998, 45), (2, John Daly, United States, 1991, 46), (3, Paul Azinger, United States, 1993, 47), CREATE TABLE `exhibition` ( Exhibition_ID INT PRIMARY KEY, Year INT, Theme TEXT, Artist_ID INT REFERENCES artist(Artist_ID), Ticket_Price REAL ); Sample rows from `exhibition`: (1, 2004, Santa Claus, 1, 19.95), (2, 2005, Christmas stocking, 2, 19.95), (3, 2006, Santa Claus and Rudolph the Red-Nosed Reindeer, 4, 14.95), CREATE TABLE `exhibition_record` ( Exhibition_ID INT PRIMARY KEY REFERENCES exhibition(Exhibition_ID), Date TEXT PRIMARY KEY, Attendance INT ); Sample rows from `exhibition_record`: (1, December 2, 965), (1, December 5, 1098), (1, December 7, 2983), ",
        "output": "SELECT name FROM artist EXCEPT SELECT t2.name FROM exhibition as t1 JOIN artist as t2 ON t1.artist_id  =  t2.artist_id WHERE t1.year  =  2004"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the titles of all movies directed by steven spielberg. ###filtered_database_schema: CREATE TABLE `Movie` ( mID INT PRIMARY KEY, title TEXT, year INT, director TEXT ); Sample rows from `Movie`: (101, Gone with the Wind, 1939, Victor Fleming), (102, Star Wars, 1977, George Lucas), (103, The Sound of Music, 1965, Robert Wise), CREATE TABLE `Reviewer` ( rID INT PRIMARY KEY, name TEXT ); Sample rows from `Reviewer`: (201, Sarah Martinez), (202, Daniel Lewis), (203, Brittany Harris), CREATE TABLE `Rating` ( rID INT REFERENCES Reviewer(rID), mID INT REFERENCES Movie(mID), stars INT, ratingDate date ); Sample rows from `Rating`: (201, 101, 2, 2011-01-22), (201, 101, 4, 2011-01-27), (202, 106, 4, None), ",
        "output": "SELECT title FROM movie WHERE director = 'Steven Spielberg'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the most common status across all cities? ###filtered_database_schema: CREATE TABLE `city` ( City_ID INT PRIMARY KEY, Official_Name TEXT, Status TEXT, Area_km_2 REAL, Population REAL, Census_Ranking TEXT ); Sample rows from `city`: (1, Grand Falls/Grand-Sault, Town, 18.06, 5706.0, 636 of 5008), (2, Perth-Andover, Village, 8.89, 1778.0, 1442 of 5,008), (3, Plaster Rock, Village, 3.09, 1135.0, 1936 of 5,008), CREATE TABLE `farm` ( Farm_ID INT PRIMARY KEY, Year INT, Total_Horses REAL, Working_Horses REAL, Total_Cattle REAL, Oxen REAL, Bulls REAL, Cows REAL, Pigs REAL, Sheep_and_Goats REAL ); Sample rows from `farm`: (1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8), CREATE TABLE `farm_competition` ( Competition_ID INT PRIMARY KEY, Year INT, Theme TEXT, Host_city_ID INT REFERENCES city(City_ID), Hosts TEXT ); Sample rows from `farm_competition`: (1, 2013, Carnival M is back!, 1, Miley Cyrus Jared Leto and Karen Mok), (2, 2006, Codehunters, 2, Leehom Wang and Kelly Rowland), (3, 2005, MTV Asia Aid, 3, Alicia Keys), CREATE TABLE `competition_record` ( Competition_ID INT PRIMARY KEY REFERENCES farm_competition(Competition_ID), Farm_ID INT PRIMARY KEY REFERENCES farm(Farm_ID), Rank INT ); Sample rows from `competition_record`: (1, 8, 1), (1, 2, 2), (1, 3, 3), ",
        "output": "SELECT status FROM city GROUP BY status ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: In what city was \" Kevin Spacey \" born ? ###filtered_database_schema: CREATE TABLE `actor` ( aid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `copyright` ( id INT PRIMARY KEY, msid INT, cid INT ); CREATE TABLE `cast` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), aid INT REFERENCES actor(aid), role INT ); CREATE TABLE `genre` ( gid INT PRIMARY KEY, genre TEXT ); CREATE TABLE `classification` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), gid INT REFERENCES genre(gid) ); CREATE TABLE `company` ( id INT PRIMARY KEY, name TEXT, country_code TEXT ); CREATE TABLE `director` ( did INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `producer` ( pid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `directed_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), did INT REFERENCES director(did) ); CREATE TABLE `keyword` ( id INT PRIMARY KEY, keyword TEXT ); CREATE TABLE `made_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), pid INT REFERENCES producer(pid) ); CREATE TABLE `movie` ( mid INT PRIMARY KEY, title TEXT, release_year INT, title_aka TEXT, budget TEXT ); CREATE TABLE `tags` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), kid INT REFERENCES keyword(kid) ); CREATE TABLE `tv_series` ( sid INT PRIMARY KEY, title TEXT, release_year INT, num_of_seasons INT, num_of_episodes INT, title_aka TEXT, budget TEXT ); CREATE TABLE `writer` ( wid INT PRIMARY KEY, gender TEXT, name INT, nationality INT, num_of_episodes INT, birth_city TEXT, birth_year INT ); CREATE TABLE `written_by` ( id INT, msid INT REFERENCES copyright(msid), wid INT REFERENCES writer(wid) ); ",
        "output": "SELECT birth_city FROM director WHERE name  =  \"director_name0\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the name of every pilot who is at least 25 years old? ###filtered_database_schema: CREATE TABLE `pilot` ( Pilot_Id int(11) PRIMARY KEY, Name varchar(50), Age int(11) ); Sample rows from `pilot`: (1, Prof. Zackery Collins, 23), (2, Katheryn Gorczany IV, 20), (3, Mr. Cristian Halvorson II, 23), CREATE TABLE `aircraft` ( Aircraft_ID int(11) PRIMARY KEY, Aircraft varchar(50), Description varchar(50), Max_Gross_Weight varchar(50), Total_disk_area varchar(50), Max_disk_Loading varchar(50) ); Sample rows from `aircraft`: (1, Robinson R-22, Light utility helicopter, 1,370 lb (635 kg), 497 ft² (46.2 m²), 2.6 lb/ft² (14 kg/m²)), (2, Bell 206B3 JetRanger, Turboshaft utility helicopter, 3,200 lb (1,451 kg), 872 ft² (81.1 m²), 3.7 lb/ft² (18 kg/m²)), (3, CH-47D Chinook, Tandem rotor helicopter, 50,000 lb (22,680 kg), 5,655 ft² (526 m²), 8.8 lb/ft² (43 kg/m²)), CREATE TABLE `match` ( Round REAL PRIMARY KEY, Location TEXT, Country TEXT, Date TEXT, Fastest_Qualifying TEXT, Winning_Pilot TEXT REFERENCES pilot(Pilot_Id), Winning_Aircraft TEXT REFERENCES aircraft(Aircraft_ID) ); Sample rows from `match`: (1.0, Mina' Zayid , Abu Dhabi, United Arab Emirates, March 26–27, Hannes Arch, 1, 1), (2.0, Swan River , Perth, Australia, April 17–18, Paul Bonhomme, 4, 1), (3.0, Flamengo Beach , Rio de Janeiro, Brazil, May 8–9, Hannes Arch, 6, 2), CREATE TABLE `airport` ( Airport_ID INT PRIMARY KEY, Airport_Name TEXT, Total_Passengers REAL, %_Change_2007 TEXT, International_Passengers REAL, Domestic_Passengers REAL, Transit_Passengers REAL, Aircraft_Movements REAL, Freight_Metric_Tonnes REAL ); Sample rows from `airport`: (1, London Heathrow, 67054745.0, 1.5%, 61344438.0, 5562516.0, 147791.0, 478693.0, 1397054.0), (2, London Gatwick, 34205887.0, 2.9%, 30431051.0, 3730963.0, 43873.0, 263653.0, 107702.0), (3, London Stansted, 22360364.0, 6.0%, 19996947.0, 2343428.0, 19989.0, 193282.0, 197738.0), CREATE TABLE `airport_aircraft` ( ID INT, Airport_ID INT PRIMARY KEY REFERENCES airport(Airport_ID), Aircraft_ID INT PRIMARY KEY REFERENCES aircraft(Aircraft_ID) ); Sample rows from `airport_aircraft`: (1, 6, 5), (2, 2, 1), (3, 1, 2), ",
        "output": "SELECT name FROM pilot WHERE age  >=  25"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of bank branch that provided the greatest total amount of loans. ###filtered_database_schema: CREATE TABLE `bank` ( branch_ID INT PRIMARY KEY, bname varchar(20), no_of_customers INT, city varchar(10), state varchar(20) ); Sample rows from `bank`: (1, morningside, 203, New York City, New York), (2, downtown, 123, Salt Lake City, Utah), (3, broadway, 453, New York City, New York), CREATE TABLE `customer` ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal INT, no_of_loans INT, credit_score INT, branch_ID INT REFERENCES bank(branch_ID), state varchar(20) ); Sample rows from `customer`: (1, Mary, saving, 2000, 2, 30, 2, Utah), (2, Jack, checking, 1000, 1, 20, 1, Texas), (3, Owen, saving, 800000, 0, 210, 3, New York), CREATE TABLE `loan` ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3) REFERENCES customer(Cust_ID), branch_ID varchar(3) REFERENCES bank(branch_ID), amount INT ); Sample rows from `loan`: (1, Mortgages, 1, 1, 2050), (2, Auto, 1, 2, 3000), (3, Business, 3, 3, 5000), ",
        "output": "SELECT t1.bname FROM bank as t1 JOIN loan as t2 ON t1.branch_id  =  t2.branch_id GROUP BY t1.bname ORDER BY SUM(t2.amount) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What information is there on albums from 2010? ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT * FROM albums WHERE year  =  2010"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which course author teaches the \"advanced database\" course? Give me his or her login name. ###filtered_database_schema: CREATE TABLE `Course_Authors_and_Tutors` ( author_id INTEGER, author_tutor_ATB VARCHAR(3), login_name VARCHAR(40), password VARCHAR(40), personal_name VARCHAR(80), middle_name VARCHAR(80), family_name VARCHAR(80), gender_mf VARCHAR(1), address_line_1 VARCHAR(80) ); Sample rows from `Course_Authors_and_Tutors`: (1, 331, jmckenzie, c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b, Cathrine, Ruthie, Grant, 0, 756 Monahan Mews Spinkashire, NJ 64230-5098), (2, 975, heidenreich.ara, 24b0ee84063c3b017ab1839e01b7280f47f7c7c2, Retha, Corene, Armstrong, 0, 98623 Huels Manor Jasttown, DE 31611), (3, 349, clementina29, cdaf6c3483f19e2253659a40a3aab786a3390f78, Darius, Ethyl, Reichel, 0, 99296 Keeling Courts North Audreanne, IL 28272), CREATE TABLE `Students` ( student_id INTEGER, date_of_registration DATETIME, date_of_latest_logon DATETIME, login_name VARCHAR(40), password VARCHAR(10), personal_name VARCHAR(40), middle_name VARCHAR(40), family_name VARCHAR(40) ); Sample rows from `Students`: (1, 2015-07-22 13:32:35, 2017-10-17 22:52:26, annamae.hoppe, db8765bb6f, Wilson, Aubrey, Ward), (2, 2015-07-02 00:21:42, 2017-06-24 22:16:27, wmiller, 35faf8182a, Karson, Luella, Jaskolski), (3, 2015-10-11 03:23:27, 2018-03-10 23:22:23, ahartmann, 8e064ec4e6, Mariela, Brandt, Legros), CREATE TABLE `Subjects` ( subject_id INTEGER, subject_name VARCHAR(120) ); Sample rows from `Subjects`: (1, Computer Science), (2, Arts), (3, Language), CREATE TABLE `Courses` ( course_id INTEGER, author_id INTEGER REFERENCES Course_Authors_and_Tutors(author_id), subject_id INTEGER REFERENCES Subjects(subject_id), course_name VARCHAR(120), course_description VARCHAR(255) ); Sample rows from `Courses`: (1, 8, 1, database, database), (2, 6, 1, advanced database, advanced database), (3, 15, 1, operating system, operating system), CREATE TABLE `Student_Course_Enrolment` ( registration_id INTEGER, student_id INTEGER REFERENCES Students(student_id), course_id INTEGER REFERENCES Courses(course_id), date_of_enrolment DATETIME, date_of_completion DATETIME ); Sample rows from `Student_Course_Enrolment`: (1, 11, 2, 2017-10-09 07:09:02, 2018-02-26 07:48:52), (2, 15, 4, 2017-11-13 12:49:33, 2018-03-04 01:24:56), (3, 10, 8, 2017-10-17 13:50:40, 2018-03-22 02:53:01), CREATE TABLE `Student_Tests_Taken` ( registration_id INTEGER REFERENCES Student_Course_Enrolment(registration_id), date_test_taken DATETIME, test_result VARCHAR(255) ); Sample rows from `Student_Tests_Taken`: (12, 2018-03-25 03:27:16, Fail), (10, 2018-03-25 21:50:22, Pass), (7, 2018-03-21 00:32:25, Pass), ",
        "output": "SELECT t1.login_name FROM course_authors_and_tutors as t1 JOIN courses as t2 ON t1.author_id  =  t2.author_id WHERE t2.course_name  =  \"advanced database\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what datasets are used in papers by jitendra malik ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t2.datasetid FROM paper as t3 JOIN paperdataset as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the authors of submissions in ascending order of scores. ###filtered_database_schema: CREATE TABLE `workshop` ( Workshop_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Name TEXT ); Sample rows from `workshop`: (1, August 18, 2007, London UK, ABC 2007), (2, August 21, 2007, London UK, Conference 2007), (3, August 25, 2007, New Jersey USA, Workshop 2007), CREATE TABLE `submission` ( Submission_ID INT PRIMARY KEY, Scores REAL, Author TEXT, College TEXT ); Sample rows from `submission`: (1, 72.0, Steve Niehaus, Notre Dame), (2, 79.0, Sammy Green, Florida), (3, 78.0, Sherman Smith, Miami (OH)), CREATE TABLE `Acceptance` ( Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID), Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID), Result TEXT ); Sample rows from `Acceptance`: (2, 5, Accepted), (2, 3, Rejected), (3, 2, Rejected), ",
        "output": "SELECT author FROM submission ORDER BY scores ASC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List all schools and their nicknames in the order of founded year. ###filtered_database_schema: CREATE TABLE `basketball_match` ( Team_ID INT PRIMARY KEY, School_ID INT REFERENCES university(School_ID), Team_Name TEXT, ACC_Regular_Season TEXT, ACC_Percent TEXT, ACC_Home TEXT, ACC_Road TEXT, All_Games TEXT, All_Games_Percent INT, All_Home TEXT, All_Road TEXT, All_Neutral TEXT ); Sample rows from `basketball_match`: (1, 1, North Carolina, 14–2, .875, 6–2, 8–0, 35–2, 0.946, 14–2, 13–0, 9–1), (2, 2, Duke, 13–3, .813, 7–1, 6–2, 28–6, 0.824, 15–1, 8–2, 5–3), (3, 4, Clemson, 10–6, .625, 7–1, 3–5, 24–10, 0.706, 14–2, 6–5, 4–3), CREATE TABLE `university` ( School_ID INT PRIMARY KEY, School TEXT, Location TEXT, Founded REAL, Affiliation TEXT, Enrollment REAL, Nickname TEXT, Primary_conference TEXT ); Sample rows from `university`: (1, University of Delaware, Newark, DE, 1743.0, Public, 19067.0, Fightin' Blue Hens, Colonial Athletic Association ( D-I )), (2, Lebanon Valley College, Annville, PA, 1866.0, Private/Methodist, 2100.0, Flying Dutchmen, MAC Commonwealth Conference ( D-III )), (3, University of Rhode Island, Kingston, RI, 1892.0, Public, 19095.0, Rams, Atlantic 10 Conference ( D-I )), ",
        "output": "SELECT school ,  nickname FROM university ORDER BY founded"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show ids, customer ids, card type codes, card numbers for all cards. ###filtered_database_schema: CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 6, 338, Regular), (2, 14, 562, VIP), (3, 9, 162, VIP), CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(20), customer_last_name VARCHAR(20), customer_address VARCHAR(255), customer_phone VARCHAR(255), customer_email VARCHAR(255), other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Aniyah, Feest, 55975 Theodore Estates Lake Brody, VT 57078, (673)872-5338, fahey.dorian@example.com, None), (2, Susie, Wiza, 6478 Moen Isle Suite 910 Schimmelmouth, VT 96364-4898, 679-845-8645x94312, idickinson@example.com, None), (3, Marcel, Brekke, 1965 Abernathy Plains Port Lilla, LA 44867, 1-511-656-6664, nichole.rodriguez@example.com, None), CREATE TABLE `Customers_Cards` ( card_id INTEGER, customer_id INTEGER, card_type_code VARCHAR(15), card_number VARCHAR(80), date_valid_from DATETIME, date_valid_to DATETIME, other_card_details VARCHAR(255) ); Sample rows from `Customers_Cards`: (1, 14, Credit, 4560596484842, 2011-04-17 09:05:28, 2018-03-07 17:06:19, 5567915676420343), (2, 9, Credit, 4859448397570735, 2012-05-22 02:05:41, 2018-02-25 15:43:32, 4539333582760), (3, 6, Debit, 348237249146948, 2014-08-01 14:26:45, 2018-03-24 15:29:00, 4916210554814), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, previous_transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), card_id INTEGER REFERENCES Customers_Cards(card_id), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DOUBLE, transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 925, 15, 1, Payment, 2018-03-24 06:41:41, 1701.23, None, None), (2, 494, 3, 2, Refund, 2018-03-24 12:08:55, 1931.76, None, None), (3, 642, 4, 3, Payment, 2018-03-24 09:08:27, 486.56, None, None), ",
        "output": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM customers_cards"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: which rivers do not run through usa ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT river_name FROM river WHERE country_name != \"usa\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names, ages, and jobs of all people who are friends with Alice for the longest amount of time? ###filtered_database_schema: CREATE TABLE `Person` ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT ); Sample rows from `Person`: (Alice, 25, new york city, female, student), (Bob, 35, salt lake city, male, engineer), (Zach, 45, austin, male, doctor), CREATE TABLE `PersonFriend` ( name varchar(20) REFERENCES Person(name), friend varchar(20) REFERENCES Person(name), year INTEGER ); Sample rows from `PersonFriend`: (Alice, Bob, 10), (Zach, Dan, 12), (Bob, Zach, 5), ",
        "output": "SELECT t1.name ,  t1.age ,  t1.job FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend =  'Alice' AND t2.year  =  (SELECT MAX(year) FROM personFriend WHERE friend =  'Alice')"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which county do the delegates on \"Appropriations\" committee belong to? Give me the county names. ###filtered_database_schema: CREATE TABLE `county` ( County_Id INT PRIMARY KEY, County_name TEXT, Population REAL, Zip_code TEXT ); Sample rows from `county`: (1, Howard, 21000.0, D21), (2, Baltimore County, 90000.0, D08), (3, Colony, 79000.0, D02), CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Year REAL, Party TEXT, Governor TEXT, Lieutenant_Governor TEXT, Comptroller TEXT, Attorney_General TEXT, US_Senate TEXT ); Sample rows from `party`: (1, 1998.0, Democratic, Peter Vallone, Sandra Frankel, Carl McCall, Eliot Spitzer, Charles Schumer), (2, 1998.0, Liberal, Betsy McCaughey Ross, Jonathan Reiter, Carl McCall, Eliot Spitzer, Charles Schumer), (3, 2002.0, Democratic, Carl McCall, Dennis Mehiel, Alan Hevesi, Eliot Spitzer, (no election)), CREATE TABLE `election` ( Election_ID INT PRIMARY KEY, Counties_Represented TEXT, District INT REFERENCES county(County_Id), Delegate TEXT, Party INT REFERENCES party(Party_ID), First_Elected REAL, Committee TEXT ); Sample rows from `election`: (1, 09.1 9A, 1, Bates, Gail H. Gail H. Bates, 1, 2002.0, Appropriations), (2, 09.1 9A, 1, Miller, Warren E. Warren E. Miller, 1, 2003.0, Economic Matters), (3, 12.1 12A, 2, DeBoy, Steven J. Sr. Steven J. DeBoy, Sr., 2, 2002.0, Appropriations), ",
        "output": "SELECT t1.county_name FROM county as t1 JOIN election as t2 ON t1.county_id  =  t2.district WHERE t2.committee  =  \"Appropriations\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the total points of gymnasts in descending order. ###filtered_database_schema: CREATE TABLE `gymnast` ( Gymnast_ID INT PRIMARY KEY REFERENCES people(People_ID), Floor_Exercise_Points REAL, Pommel_Horse_Points REAL, Rings_Points REAL, Vault_Points REAL, Parallel_Bars_Points REAL, Horizontal_Bar_Points REAL, Total_Points REAL ); Sample rows from `gymnast`: (1, 9.725, 9.737, 9.512, 9.575, 9.762, 9.75, 58.061), (2, 9.7, 9.625, 9.625, 9.65, 9.587, 9.737, 57.924), (4, 8.987, 9.75, 9.75, 9.65, 9.787, 9.725, 57.649), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Age REAL, Height REAL, Hometown TEXT ); Sample rows from `people`: (1, Paul Hamm, 24.0, 1.71, Santo Domingo), (2, Lorraine Súarez Carmona, 21.0, 1.75, Bonao), (3, Ashley Pérez Cabrera, 19.0, 1.7, Miami), ",
        "output": "SELECT total_points FROM gymnast ORDER BY total_points DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of stations that have latitude lower than 37.5? ###filtered_database_schema: CREATE TABLE `station` ( id INTEGER, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT ); Sample rows from `station`: (2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013), (3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013), (4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013), CREATE TABLE `status` ( station_id INTEGER REFERENCES station(id), bikes_available INTEGER, docks_available INTEGER, time TEXT ); Sample rows from `status`: (3, 12, 3, 2015-06-02 12:46:02), (3, 12, 3, 2015-06-02 12:47:02), (3, 12, 3, 2015-06-02 12:48:02), CREATE TABLE `trip` ( id INTEGER, duration INTEGER, start_date TEXT, start_station_name TEXT, start_station_id INTEGER, end_date TEXT, end_station_name TEXT, end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER ); Sample rows from `trip`: (900504, 384, 8/21/2015 17:03, Howard at 2nd, 63, 8/21/2015 17:10, San Francisco Caltrain 2 (330 Townsend), 69, 454, Subscriber, 94041), (900505, 588, 8/21/2015 17:03, South Van Ness at Market, 66, 8/21/2015 17:13, San Francisco Caltrain 2 (330 Townsend), 69, 574, Subscriber, 95119), (900506, 196, 8/21/2015 17:04, Market at Sansome, 77, 8/21/2015 17:07, Harry Bridges Plaza (Ferry Building), 50, 636, Subscriber, 94925), CREATE TABLE `weather` ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER ); Sample rows from `weather`: (8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107), (8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107), (8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107), ",
        "output": "SELECT name FROM station WHERE lat  <  37.5"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what are some good places in the yosemite and mono lake area for french food ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the different locations of the school with the code BUS? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT COUNT(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Select all the data from the products and each product's manufacturer. ###filtered_database_schema: CREATE TABLE `Manufacturers` ( Code INTEGER, Name VARCHAR(255), Headquarter VARCHAR(255), Founder VARCHAR(255), Revenue REAL ); Sample rows from `Manufacturers`: (1, Sony, Tokyo, Andy, 120.0), (2, Creative Labs, Austin, Owen, 100.0), (3, Hewlett-Packard, Los Angeles, James, 50.0), CREATE TABLE `Products` ( Code INTEGER, Name VARCHAR(255), Price DECIMAL, Manufacturer INTEGER REFERENCES Manufacturers(Code) ); Sample rows from `Products`: (1, Hard drive, 240, 5), (2, Memory, 120, 6), (3, ZIP drive, 150, 4), ",
        "output": "SELECT * FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many dorms are there and what is the total capacity for each gender? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT COUNT(*) ,  SUM(student_capacity) ,  gender FROM dorm GROUP BY gender"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are all the calendar dates and day Numbers? ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CV, CV, ), (BK, Book, ), (PR, Paper, ), CREATE TABLE `Ref_Calendar` ( Calendar_Date DATETIME PRIMARY KEY, Day_Number INTEGER ); Sample rows from `Ref_Calendar`: (1972-03-31 09:47:22, 5), (1976-06-15 03:40:06, 7), (1985-05-13 12:19:43, 7), CREATE TABLE `Ref_Locations` ( Location_Code CHAR(15) PRIMARY KEY, Location_Name VARCHAR(255), Location_Description VARCHAR(255) ); Sample rows from `Ref_Locations`: (b, Brazil, ), (c, Canada, ), (e, Edinburgh, ), CREATE TABLE `Roles` ( Role_Code CHAR(15) PRIMARY KEY, Role_Name VARCHAR(255), Role_Description VARCHAR(255) ); Sample rows from `Roles`: (MG, Manager, Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti.), (ED, Editor, Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos.), (PT, Photo, Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt.), CREATE TABLE `All_Documents` ( Document_ID INTEGER, Date_Stored DATETIME REFERENCES Ref_Calendar(Calendar_Date), Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255) ); Sample rows from `All_Documents`: (7, 1976-06-15 03:40:06, CV, Robin CV, None, None), (11, 1986-10-14 17:53:39, CV, Marry CV, None, None), (25, 2008-06-08 12:45:38, BK, One hundred years of solitude, None, None), CREATE TABLE `Employees` ( Employee_ID INTEGER, Role_Code CHAR(15) REFERENCES Roles(Role_Code), Employee_Name VARCHAR(255), Gender_MFU CHAR(1), Date_of_Birth DATETIME, Other_Details VARCHAR(255) ); Sample rows from `Employees`: (25, HR, Leo, , 1973-02-15 17:16:00, None), (30, MG, Ebba, , 1979-09-20 12:50:15, None), (38, ED, Stephanie, 1, 2012-03-30 23:02:28, None), CREATE TABLE `Document_Locations` ( Document_ID INTEGER PRIMARY KEY REFERENCES All_Documents(Document_ID), Location_Code CHAR(15) PRIMARY KEY REFERENCES Ref_Locations(Location_Code), Date_in_Location_From DATETIME PRIMARY KEY REFERENCES Ref_Calendar(Calendar_Date), Date_in_Locaton_To DATETIME REFERENCES Ref_Calendar(Calendar_Date) ); Sample rows from `Document_Locations`: (7, e, 2017-01-06 23:17:22, 2008-06-08 12:45:38), (11, x, 2017-01-06 23:17:22, 2012-07-03 09:48:46), (81, c, 1972-03-31 09:47:22, 1987-11-05 06:11:22), CREATE TABLE `Documents_to_be_Destroyed` ( Document_ID INTEGER REFERENCES All_Documents(Document_ID), Destruction_Authorised_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Destroyed_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Planned_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Actual_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Other_Details VARCHAR(255) ); Sample rows from `Documents_to_be_Destroyed`: (7, 156, 138, 1988-02-01 14:41:52, 2017-01-06 23:17:22, None), (11, 55, 173, 2010-11-26 19:22:50, 1986-10-14 17:53:39, None), (25, 183, 156, 2009-08-18 03:29:08, 1995-01-01 03:52:11, None), ",
        "output": "SELECT calendar_date ,  day_number FROM ref_calendar"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the dates of ceremony and results for each music festival? ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Artist TEXT, Age INT, Famous_Title TEXT, Famous_Release_date TEXT ); Sample rows from `artist`: (1, Gorgoroth, 34, Bergen 1996, November 2007), (2, Ophiolatry, 35, Transmutation, January 21, 2008), (3, Ophiolatry, 22, Antievangelistical Process (re-release), 2009), CREATE TABLE `volume` ( Volume_ID INT PRIMARY KEY, Volume_Issue TEXT, Issue_Date TEXT, Weeks_on_Top REAL, Song TEXT, Artist_ID INT REFERENCES artist(Artist_ID) ); Sample rows from `volume`: (1, 45:14 §, 27 December 1986 - 10 January, 3.0, The Way, 1), (2, 45:15, 17 January, 1.0, Everybody Have Fun Tonight , 2), (3, 45:16, 24 January, 1.0, Walk Like an Egyptian , 1), CREATE TABLE `music_festival` ( ID INT PRIMARY KEY, Music_Festival TEXT, Date_of_ceremony TEXT, Category TEXT, Volume INT REFERENCES volume(Volume_ID), Result TEXT ); Sample rows from `music_festival`: (1, 34th England Academy Prize, 18 February 2011, Best Song, 1, Nominated), (2, 34th Japan Academy Prize, 18 February 2011, Best Lyrics, 2, Nominated), (3, 34th European Academy Prize, 18 February 2011, Best Song, 3, Awarded), ",
        "output": "SELECT date_of_ceremony ,  result FROM music_festival"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names and location of the wrestlers? ###filtered_database_schema: CREATE TABLE `wrestler` ( Wrestler_ID INT PRIMARY KEY, Name TEXT, Reign TEXT, Days_held TEXT, Location TEXT, Event TEXT ); Sample rows from `wrestler`: (1, Rey Misterio Sr., 1, 344, Tijuana , Mexico, Live event), (2, Fishman, 1, 113, Tijuana , Mexico, Live event), (3, Villaño IV, 1, 1285, Tijuana , Mexico, Live event), CREATE TABLE `Elimination` ( Elimination_ID TEXT PRIMARY KEY, Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID), Team TEXT, Eliminated_By TEXT, Elimination_Move TEXT, Time TEXT ); Sample rows from `Elimination`: (1, 1, Team Orton, Punk, Go To Sleep, 00:11), (2, 2, Team Batista, Benjamin, Paydirt, 07:38), (3, 4, Team Batista, Orton, Rope hung DDT, 10:45), ",
        "output": "SELECT name ,  location FROM wrestler"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the party emails associated with parties that used the party form that is the most common? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), town_city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 25518 Ortiz Centers, West Stacy, 193, NorthCarolina, USA), (2, 033 Stracke Parkways, Lake Meaghan, 227, Colorado, USA), (3, 269 Flatley Port Suite 062, Breanneberg, 527, NewHampshire, USA), CREATE TABLE `Services` ( service_id INTEGER, service_type_code VARCHAR(15), service_name VARCHAR(80), service_descriptio VARCHAR(255) ); Sample rows from `Services`: (1, Education, Education, Education), (2, Welfare, Health, Welfare), (3, Education, Education, Health), CREATE TABLE `Forms` ( form_id INTEGER, form_type_code VARCHAR(15), service_id INTEGER REFERENCES Services(service_id), form_number VARCHAR(50), form_name VARCHAR(80), form_description VARCHAR(255) ); Sample rows from `Forms`: (1, Basic, 13, 8069, SSN Application, Form for SSN Application), (2, Complex, 9, 2675, Marriage Certificate, Marriage Certificate), (3, Complex, 2, 9837, Divorce Certificate, Divorce Certificate), CREATE TABLE `Individuals` ( individual_id INTEGER, individual_first_name VARCHAR(80), individual_middle_name VARCHAR(80), inidividual_phone VARCHAR(80), individual_email VARCHAR(80), individual_address VARCHAR(255), individual_last_name VARCHAR(80) ); Sample rows from `Individuals`: (1, Oscar, Hosea, 1-925-696-5232, amie.okuneva@example.org, 6956 Lia Plaza, Maggio), (2, Geovanny, Antonia, 075.012.6775x409, jamey.effertz@example.net, 69578 Baylee Prairie, Kerluke), (3, Casper, Mitchell, 1-818-062-2837, brandon.hermiston@example.com, 4555 Hane Orchard, Kutch), CREATE TABLE `Organizations` ( organization_id INTEGER, date_formed DATETIME, organization_name VARCHAR(255), uk_vat_number VARCHAR(20) ); Sample rows from `Organizations`: (1, 2016-08-24 23:52:48, Labour Party, 2157), (2, 2016-10-01 12:42:01, Plaid Cymru, 7459), (3, 2016-10-09 07:22:53, Conservative, 1211), CREATE TABLE `Parties` ( party_id INTEGER, payment_method_code VARCHAR(15), party_phone VARCHAR(80), party_email VARCHAR(80) ); Sample rows from `Parties`: (1, Cheque, 05374656172, enrico09@example.com), (2, Credit Card, 1-525-947-7867x51521, brakus.aliya@example.com), (3, Cheque, 1-606-232-3728x3568, frida57@example.org), CREATE TABLE `Organization_Contact_Individuals` ( individual_id INTEGER PRIMARY KEY REFERENCES Individuals(individual_id), organization_id INTEGER PRIMARY KEY REFERENCES Organizations(organization_id), date_contact_from DATETIME, date_contact_to DATETIME ); Sample rows from `Organization_Contact_Individuals`: (13, 1, 2016-08-16 22:09:11, 2018-03-25 10:27:18), (11, 1, 2017-03-02 00:00:16, 2018-03-06 05:39:43), (10, 3, 2016-08-23 03:24:24, 2018-03-12 07:55:28), CREATE TABLE `Party_Addresses` ( party_id INTEGER PRIMARY KEY REFERENCES Parties(party_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_address_from DATETIME, address_type_code VARCHAR(15), date_address_to DATETIME ); Sample rows from `Party_Addresses`: (10, 8, 2016-04-08 22:40:02, Residence, 2018-02-28 23:14:41), (15, 5, 2016-05-20 23:22:06, Billing, 2018-01-29 16:48:01), (4, 4, 2016-05-14 15:13:30, Delivery, 2018-02-25 19:39:16), CREATE TABLE `Party_Forms` ( party_id INTEGER PRIMARY KEY REFERENCES Parties(party_id), form_id INTEGER PRIMARY KEY REFERENCES Forms(form_id), date_completion_started DATETIME, form_status_code VARCHAR(15), date_fully_completed DATETIME ); Sample rows from `Party_Forms`: (2, 4, 2017-12-17 11:29:47, Completed, 2018-02-11 16:46:10), (15, 4, 2017-12-16 15:25:48, Partially Completed, 2018-02-18 16:09:04), (8, 5, 2017-12-09 21:26:11, Partially Completed, 2018-02-05 16:16:58), CREATE TABLE `Party_Services` ( booking_id INTEGER, customer_id INTEGER REFERENCES Parties(party_id), service_id INTEGER REFERENCES Services(service_id), service_datetime DATETIME, booking_made_date DATETIME ); Sample rows from `Party_Services`: (1, 10, 12, 2018-03-10 22:43:12, 2018-03-23 23:56:51), (2, 14, 11, 2018-03-05 15:06:23, 2018-03-25 11:08:29), (3, 4, 7, 2018-03-08 10:39:29, 2018-03-24 11:09:52), ",
        "output": "SELECT t1.party_email FROM parties as t1 JOIN party_forms as t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY COUNT(*) DESC LIMIT 1)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the smallest state through which the longest river runs ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river ) ) ) AND state_name IN ( SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river ) );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the description and code of the type of service that is performed the most often? ###filtered_database_schema: CREATE TABLE `Ref_Payment_Methods` ( payment_method_code CHAR(10) PRIMARY KEY, payment_method_description VARCHAR(80) ); Sample rows from `Ref_Payment_Methods`: (American E, credit), (MasterCard, debit), (Visa, Visa), CREATE TABLE `Ref_Service_Types` ( Service_Type_Code CHAR(15) PRIMARY KEY, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255) ); Sample rows from `Ref_Service_Types`: (1, 1, provide photo service), (2, 1, provide dinning service), (3, 1, provide filming service), CREATE TABLE `Addresses` ( Address_ID VARCHAR(100) PRIMARY KEY, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Addresses`: (110, 4753 Dach Highway, Suite 846, Feliciaberg, Florida, None), (124, 391 Vandervort Fall Apt. 446, Apt. 107, West Sherwoodstad, Indiana, None), (148, 809 Izabella Islands, Suite 271, Schadenville, Ohio, None), CREATE TABLE `Products` ( Product_ID VARCHAR(100) PRIMARY KEY, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Products`: (11, photo, 4448536, None, None), (154, film, 2302, None, None), (156, film, 17622723, None, None), CREATE TABLE `Marketing_Regions` ( Marketing_Region_Code CHAR(15) PRIMARY KEY, Marketing_Region_Name VARCHAR(255), Marketing_Region_Descriptrion VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Marketing_Regions`: (CA, Canada, Our target market, None), (CN, China, Our largest market, None), (ES, Spain, , None), CREATE TABLE `Clients` ( Client_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Clients`: (423, 201, branson94@example.net, Clifford, (042)912-3404x5135, VIP), (426, 383, alba04@example.com, Bettye, (604)849-0214, None), (478, 15, westley30@example.net, Reinhold, 1-048-214-4640x64380, None), CREATE TABLE `Drama_Workshop_Groups` ( Workshop_Group_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Currency_Code CHAR(15), Marketing_Region_Code CHAR(15), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Drama_Workshop_Groups`: (136, 383, EU, FR, Amely Cafe, 122-084-8029, amely.ruecker@example.com, None), (140, 180, EU, DE, Veda Film, 793-966-9311x5303, breitenberg.veda@example.com, None), (176, 286, EU, RU, Queen Art, 492-463-5967, quigley.queen@example.org, Good), CREATE TABLE `Performers` ( Performer_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Performers`: (153, 124, Shawna, 664.495.1939, krogahn@example.com, None), (211, 124, Ashley, 893-536-8857, preston45@example.net, None), (313, 39, Oren, 1-952-052-6685x28082, ferry.carolina@example.net, None), CREATE TABLE `Customers` ( Customer_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Customers`: (240, 286, Harold, 624-096-7791, jerde.harmon@example.com, None), (267, 98, Federico, 914-915-7483, johnson27@example.com, None), (304, 369, Samson, 1-463-121-4086x655, dalton75@example.com, None), CREATE TABLE `Stores` ( Store_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Marketing_Region_Code CHAR(15) REFERENCES Marketing_Regions(Marketing_Region_Code), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Stores`: (150, 286, IN, FJA Filming, +65(1)3590790358, fjacobson@example.com, None), (229, 266, CA, Rob Dinning, 1-327-185-9368, rborer@example.org, 5 stars), (231, 230, ES, Adan Dinning, 896-931-9633x869, adan93@example.com, None), CREATE TABLE `Bookings` ( Booking_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Clients(Client_ID), Workshop_Group_ID VARCHAR(100) REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Status_Code CHAR(15), Store_ID INTEGER, Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Bookings`: (1, 938, 140, good, 8, 2016-12-12 10:43:01, 2013-03-10 18:47:05, 1997-11-21 10:07:40, None), (2, 868, 838, stop, 7, 1976-08-20 00:33:08, 2009-07-09 09:18:38, 1976-01-08 07:19:23, None), (3, 735, 176, good, 9, 1975-11-23 06:28:47, 1989-01-05 19:24:45, 1990-03-16 19:38:47, None), CREATE TABLE `Performers_in_Bookings` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Performer_ID INTEGER PRIMARY KEY REFERENCES Performers(Performer_ID) ); Sample rows from `Performers_in_Bookings`: (1, 153), (1, 341), (2, 466), CREATE TABLE `Customer_Orders` ( Order_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Store_ID INTEGER REFERENCES Stores(Store_ID), Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 516, 231, 1994-08-03 12:34:58, 1977-03-11 03:58:19, 1992-07-21 22:11:11, None), (2, 418, 229, 2014-07-10 10:56:01, 1996-08-26 19:19:59, 1998-08-22 17:57:32, None), (3, 712, 229, 1981-06-20 16:29:43, 1980-12-19 05:49:35, 2011-04-13 07:15:35, None), CREATE TABLE `Order_Items` ( Order_Item_ID INTEGER, Order_ID INTEGER REFERENCES Customer_Orders(Order_ID), Product_ID INTEGER REFERENCES Products(Product_ID), Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 3, 233, 1, None), (2, 15, 300, 2, None), (3, 12, 300, 1, None), CREATE TABLE `Invoices` ( Invoice_ID INTEGER, Order_ID INTEGER REFERENCES Bookings(Booking_ID) REFERENCES Customer_Orders(Order_ID), payment_method_code CHAR(15) REFERENCES Ref_Payment_Methods(payment_method_code), Product_ID INTEGER, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER ); Sample rows from `Invoices`: (128, 14, MasterCard, 4, 2, None, 1), (162, 13, MasterCard, 9, 2, None, 9), (164, 7, Visa, 7, 2, None, 1), CREATE TABLE `Services` ( Service_ID INTEGER PRIMARY KEY, Service_Type_Code CHAR(15) REFERENCES Ref_Service_Types(Service_Type_Code), Workshop_Group_ID INTEGER REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Services`: (191, 1, 415, None, film, 58932775.8822, None), (219, 2, 838, None, film, 2704.4719, None), (220, 1, 708, None, dinning, 6888.8306, None), CREATE TABLE `Bookings_Services` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Product_ID INTEGER PRIMARY KEY REFERENCES Services(Service_ID) ); Sample rows from `Bookings_Services`: (1, 396), (1, 779), (4, 191), CREATE TABLE `Invoice_Items` ( Invoice_Item_ID INTEGER, Invoice_ID INTEGER REFERENCES Invoices(Invoice_ID), Order_ID INTEGER REFERENCES Bookings_Services(Order_ID), Order_Item_ID INTEGER REFERENCES Order_Items(Order_Item_ID), Product_ID INTEGER REFERENCES Bookings_Services(Product_ID), Order_Quantity INTEGER, Other_Item_Details VARCHAR(255) ); Sample rows from `Invoice_Items`: (1, 128, 1, 5, 396, 2, None), (2, 162, 4, 6, 191, 6, Good quality), ",
        "output": "SELECT t1.service_type_description , t1.service_type_code FROM ref_service_types as t1 JOIN services as t2 ON t1.service_type_code  =  t2.service_type_code GROUP BY t1.service_type_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the average prices of wines for different years? ###filtered_database_schema: CREATE TABLE `grapes` ( ID INTEGER, Grape TEXT PRIMARY KEY, Color TEXT ); Sample rows from `grapes`: (1, Barbera, Red), (2, Cabernet Franc, Red), (3, Cabernet Sauvingnon, Red), CREATE TABLE `appellations` ( No INTEGER, Appelation TEXT PRIMARY KEY, County TEXT, State TEXT, Area TEXT, isAVA TEXT ); Sample rows from `appellations`: (1, Alexander Valley, Sonoma, California, North Coast, Yes), (2, Amador County, Amador, California, Sierra Foothills, No), (3, Amador-Mendocino-Sonoma Counties, N/A, California, N/A, No), CREATE TABLE `wine` ( No INTEGER, Grape TEXT REFERENCES grapes(Grape), Winery TEXT, Appelation TEXT REFERENCES appellations(Appelation), State TEXT, Name TEXT, Year INTEGER, Price INTEGER, Score INTEGER, Cases INTEGER, Drink TEXT ); Sample rows from `wine`: (1, Zinfandel, Robert Biale, St. Helena, California, Old Kraft Vineyard, 2008, 44, 93, 275, now), (2, Zinfandel, Chiarello Family, Napa Valley, California, Giana, 2008, 35, 93, 480, now), (3, Zinfandel, Robert Biale, Napa Valley, California, Black Chicken, 2008, 40, 91, 2700, 2012), ",
        "output": "SELECT AVG(price) ,  year FROM wine GROUP BY year"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name. ###filtered_database_schema: CREATE TABLE `chip_model` ( Model_name TEXT PRIMARY KEY, Launch_year REAL, RAM_MiB REAL, ROM_MiB REAL, Slots TEXT, WiFi TEXT, Bluetooth TEXT ); Sample rows from `chip_model`: (X5, 2002.0, 32.0, 32.0, 1CFII,1SD, No, No), (X5 high end, 2002.0, 64.0, 48.0, 1CFII,1SD, No, No), (X3 Basic, 2003.0, 32.0, 32.0, 1SD, No, No), CREATE TABLE `screen_mode` ( Graphics_mode REAL PRIMARY KEY, Char_cells TEXT, Pixels TEXT, Hardware_colours REAL, used_kb REAL, map TEXT, Type TEXT ); Sample rows from `screen_mode`: (0.0, 80 × 32, 640 × 256, 2.0, 20.0, 3000–7FFF, Graphics), (1.0, 40 × 32, 320 × 256, 4.0, 20.0, 3000–7FFF, Graphics), (2.0, 20 × 32, 160 × 256, 8.0, 20.0, 3000–7FFF, Graphics), CREATE TABLE `phone` ( Company_name TEXT, Hardware_Model_name TEXT PRIMARY KEY, Accreditation_type TEXT, Accreditation_level TEXT, Date TEXT, chip_model TEXT REFERENCES chip_model(Model_name), screen_mode TEXT REFERENCES screen_mode(Graphics_mode) ); Sample rows from `phone`: (Sony Mobile Communications, XPERIA T, XPERIA J, Full, joyn Hot Fixes, Approved (awarded 15.11.12), X5, 1), (LG Electronics, LG-P760, Full, joyn Hot Fixes, Approved (awarded 19.11.12), X51v, 3), (Nokia Corporation, Lumia 920, Lumia 820, Lumia 620, Full, joyn Hot Fixes, Approved (awarded 05.12.12), X5, 4), ",
        "output": "SELECT hardware_model_name ,  company_name FROM phone WHERE accreditation_type LIKE 'Full';"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the first and last name of the faculty who has the most students? ###filtered_database_schema: CREATE TABLE `Activity` ( actid INTEGER, activity_name varchar(25) ); Sample rows from `Activity`: (770, Mountain Climbing), (771, Canoeing), (772, Kayaking), CREATE TABLE `Participates_in` ( stuid INTEGER REFERENCES Student(StuID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Participates_in`: (1001, 770), (1001, 771), (1001, 777), CREATE TABLE `Faculty_Participates_in` ( FacID INTEGER REFERENCES Faculty(FacID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Faculty_Participates_in`: (1082, 784), (1082, 785), (1082, 790), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), ",
        "output": "SELECT t1.fname ,  t1.lname FROM faculty as t1 JOIN student as t2 ON t1.facid  =  t2.advisor GROUP BY t1.facid ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the distinct region of clubs in ascending alphabetical order. ###filtered_database_schema: CREATE TABLE `club` ( Club_ID INT PRIMARY KEY, name TEXT, Region TEXT, Start_year TEXT ); Sample rows from `club`: (1, AIB, USA, 2009), (2, BK Slide, UK, 1998), (3, IFG, China, 2005), CREATE TABLE `club_rank` ( Rank REAL PRIMARY KEY, Club_ID INT PRIMARY KEY REFERENCES club(Club_ID), Gold REAL, Silver REAL, Bronze REAL, Total REAL ); Sample rows from `club_rank`: (1.0, 2, 11.0, 11.0, 9.0, 31.0), (2.0, 3, 8.0, 7.0, 6.0, 21.0), (3.0, 1, 7.0, 4.0, 2.0, 13.0), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, name TEXT, Position TEXT, Club_ID INT REFERENCES club(Club_ID), Apps REAL, Tries REAL, Goals TEXT, Points REAL ); Sample rows from `player`: (1, Michael Platt, Full Back, 1, 20.0, 5.0, 0, 20.0), (2, Dave Halley, Right Wing, 2, 23.0, 9.0, 0, 36.0), (3, James Evans, Right Centre, 1, 30.0, 9.0, 0, 36.0), CREATE TABLE `competition` ( Competition_ID INT PRIMARY KEY, Year REAL, Competition_type TEXT, Country TEXT ); Sample rows from `competition`: (1, 2006.0, Friendly, Italy), (2, 2006.0, Friendly, Spain), (3, 2006.0, Friendly, Australia), CREATE TABLE `competition_result` ( Competition_ID INT PRIMARY KEY REFERENCES competition(Competition_ID), Club_ID_1 INT PRIMARY KEY REFERENCES club(Club_ID), Club_ID_2 INT PRIMARY KEY REFERENCES club(Club_ID), Score TEXT ); Sample rows from `competition_result`: (1, 1, 2, 11:10), (2, 3, 2, 25:2), (10, 4, 2, 13:10), ",
        "output": "SELECT DISTINCT region FROM club ORDER BY region ASC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the draft pick numbers and draft classes of players whose positions are defenders. ###filtered_database_schema: CREATE TABLE `country` ( Country_id INT PRIMARY KEY, Country_name TEXT, Capital TEXT, Official_native_language TEXT ); Sample rows from `country`: (1, Indonesia, Jakarta, Bahasa Indonesia), (2, Iran, Tehran, Persian ( Arabic script )), (3, Iraq, Baghdad, Arabic ( Arabic script ) Kurdish), CREATE TABLE `team` ( Team_id INT PRIMARY KEY, Name TEXT ); Sample rows from `team`: (1, Columbus Crew), (2, Evalyn Feil), (3, Anais VonRueden), CREATE TABLE `match_season` ( Season REAL PRIMARY KEY, Player TEXT, Position TEXT, Country INT REFERENCES country(Country_id), Team INT REFERENCES team(Team_id), Draft_Pick_Number INT, Draft_Class TEXT, College TEXT ); Sample rows from `match_season`: (1996.0, Steve Ralston Category:Articles with hCards, Midfielder, 6, 1, 18, 1996 MLS College Draft, Florida International), (1997.0, Mike Duhaney Category:Articles with hCards, Defender, 6, 2, 87, 1996 MLS Inaugural Player Draft, UNLV), (1998.0, Ben Olsen Category:Articles with hCards, Midfielder, 4, 3, 2, Project-40, Virginia), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Years_Played TEXT, Total_WL TEXT, Singles_WL TEXT, Doubles_WL TEXT, Team INT REFERENCES team(Team_id) ); Sample rows from `player`: (1, Cho Soong-Jae (630), 1 (2011), 2–0, 1–0, 1–0, 1), (2, Chung Hong (717), 1 (2011), 0–0, 0–0, 0–0, 1), (3, Im Kyu-tae (492), 8 (2003–2005, 2007–2011), 6–9, 5–7, 1–2, 1), ",
        "output": "SELECT draft_pick_number ,  draft_class FROM match_season WHERE position  =  \"Defender\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the first names and offices of all instructors who have taught some course and also find the course description. ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT t2.emp_fname ,  t4.prof_office ,  t3.crs_description FROM class as t1 JOIN employee as t2 ON t1.prof_num  =  t2.emp_num JOIN course as t3 ON t1.crs_code  =  t3.crs_code JOIN professor as t4 ON t2.emp_num  =  t4.emp_num"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: find the name of driver who is driving the school bus with the longest working history. ###filtered_database_schema: CREATE TABLE `driver` ( Driver_ID INT PRIMARY KEY, Name TEXT, Party TEXT, Home_city TEXT, Age INT ); Sample rows from `driver`: (1, Matthew Ritter, Dem, Hartford, 40), (2, Dan Carter, Rep, Bethel, 30), (3, Minnie Gonzalez, Dem, Hartford, 46), CREATE TABLE `school` ( School_ID INT PRIMARY KEY, Grade TEXT, School TEXT, Location TEXT, Type TEXT ); Sample rows from `school`: (1, Kindergarten, Noelani Elementary School, Honolulu, Hawaii, Public), (2, 1st-3rd grade, St. Francis Assisi, Jakarta, Indonesia, Private Catholic), (3, 4th grade, State Elementary School Menteng 01, Jakarta, Indonesia, Public), CREATE TABLE `school_bus` ( School_ID INT PRIMARY KEY REFERENCES school(School_ID), Driver_ID INT PRIMARY KEY REFERENCES driver(Driver_ID), Years_Working INT, If_full_time bool ); Sample rows from `school_bus`: (1, 10, 10, F), (5, 7, 8, T), (3, 4, 6, T), ",
        "output": "SELECT t1.name FROM driver as t1 JOIN school_bus as t2 ON t1.driver_id  =  t2.driver_id ORDER BY years_working DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ages of the gymnasts, ordered descending by their total points? ###filtered_database_schema: CREATE TABLE `gymnast` ( Gymnast_ID INT PRIMARY KEY REFERENCES people(People_ID), Floor_Exercise_Points REAL, Pommel_Horse_Points REAL, Rings_Points REAL, Vault_Points REAL, Parallel_Bars_Points REAL, Horizontal_Bar_Points REAL, Total_Points REAL ); Sample rows from `gymnast`: (1, 9.725, 9.737, 9.512, 9.575, 9.762, 9.75, 58.061), (2, 9.7, 9.625, 9.625, 9.65, 9.587, 9.737, 57.924), (4, 8.987, 9.75, 9.75, 9.65, 9.787, 9.725, 57.649), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Age REAL, Height REAL, Hometown TEXT ); Sample rows from `people`: (1, Paul Hamm, 24.0, 1.71, Santo Domingo), (2, Lorraine Súarez Carmona, 21.0, 1.75, Bonao), (3, Ashley Pérez Cabrera, 19.0, 1.7, Miami), ",
        "output": "SELECT t2.age FROM gymnast as t1 JOIN people as t2 ON t1.gymnast_id  =  t2.people_id ORDER BY t1.total_points DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of members of club \"Pen and Paper Gaming\". ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Club` ( ClubID INTEGER, ClubName VARCHAR(40), ClubDesc VARCHAR(1024), ClubLocation VARCHAR(40) ); Sample rows from `Club`: (1, Bootup Baltimore, Refurbish computers; teach kids and adults about computer basics., AKW), (2, Hopkins Student Enterprises, Venture capital fund for student business., AKW), (3, Pen and Paper Gaming, Play pen and paper games on campus., HHH), CREATE TABLE `Member_of_club` ( StuID INTEGER REFERENCES Student(StuID), ClubID INTEGER REFERENCES Club(ClubID), Position VARCHAR(40) ); Sample rows from `Member_of_club`: (1001, 1, President), (1007, 4, Vice-President), (1008, 2, CTO), ",
        "output": "SELECT COUNT(*) FROM club as t1 JOIN member_of_club as t2 ON t1.clubid  =  t2.clubid JOIN student as t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the full name (first and last name), and salary for those employees who earn below 6000. ###filtered_database_schema: CREATE TABLE `regions` ( REGION_ID decimal(5,0) PRIMARY KEY, REGION_NAME varchar(25) ); Sample rows from `regions`: (1, Europe\\r), (2, Americas\\r), (3, Asia\\r), CREATE TABLE `countries` ( COUNTRY_ID varchar(2) PRIMARY KEY, COUNTRY_NAME varchar(40), REGION_ID decimal(10,0) REFERENCES regions(REGION_ID) ); Sample rows from `countries`: (AR, Argentina, 2), (AU, Australia, 3), (BE, Belgium, 1), CREATE TABLE `departments` ( DEPARTMENT_ID decimal(4,0) PRIMARY KEY, DEPARTMENT_NAME varchar(30), MANAGER_ID decimal(6,0), LOCATION_ID decimal(4,0) ); Sample rows from `departments`: (10, Administration, 200, 1700), (20, Marketing, 201, 1800), (30, Purchasing, 114, 1700), CREATE TABLE `jobs` ( JOB_ID varchar(10) PRIMARY KEY, JOB_TITLE varchar(35), MIN_SALARY decimal(6,0), MAX_SALARY decimal(6,0) ); Sample rows from `jobs`: (AD_PRES, President, 20000, 40000), (AD_VP, Administration Vice President, 15000, 30000), (AD_ASST, Administration Assistant, 3000, 6000), CREATE TABLE `employees` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY, FIRST_NAME varchar(20), LAST_NAME varchar(25), EMAIL varchar(25), PHONE_NUMBER varchar(20), HIRE_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), SALARY decimal(8,2), COMMISSION_PCT decimal(2,2), MANAGER_ID decimal(6,0), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `employees`: (100, Steven, King, SKING, 515.123.4567, 1987-06-17, AD_PRES, 24000, 0, 0, 90), (101, Neena, Kochhar, NKOCHHAR, 515.123.4568, 1987-06-18, AD_VP, 17000, 0, 100, 90), (102, Lex, De Haan, LDEHAAN, 515.123.4569, 1987-06-19, AD_VP, 17000, 0, 100, 90), CREATE TABLE `job_history` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY REFERENCES employees(EMPLOYEE_ID), START_DATE date PRIMARY KEY, END_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `job_history`: (102, 1993-01-13, 1998-07-24, IT_PROG, 60), (101, 1989-09-21, 1993-10-27, AC_ACCOUNT, 110), (101, 1993-10-28, 1997-03-15, AC_MGR, 110), CREATE TABLE `locations` ( LOCATION_ID decimal(4,0) PRIMARY KEY, STREET_ADDRESS varchar(40), POSTAL_CODE varchar(12), CITY varchar(30), STATE_PROVINCE varchar(25), COUNTRY_ID varchar(2) REFERENCES countries(COUNTRY_ID) ); Sample rows from `locations`: (1000, 1297 Via Cola di Rie, 989, Roma, , IT), (1100, 93091 Calle della Testa, 10934, Venice, , IT), (1200, 2017 Shinjuku-ku, 1689, Tokyo, Tokyo Prefecture, JP), ",
        "output": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is average age for different job title? ###filtered_database_schema: CREATE TABLE `Person` ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT ); Sample rows from `Person`: (Alice, 25, new york city, female, student), (Bob, 35, salt lake city, male, engineer), (Zach, 45, austin, male, doctor), CREATE TABLE `PersonFriend` ( name varchar(20) REFERENCES Person(name), friend varchar(20) REFERENCES Person(name), year INTEGER ); Sample rows from `PersonFriend`: (Alice, Bob, 10), (Zach, Dan, 12), (Bob, Zach, 5), ",
        "output": "SELECT AVG(age) ,  job FROM person GROUP BY job"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List names of all teams in the basketball competition, ordered by all home scores in descending order. ###filtered_database_schema: CREATE TABLE `basketball_match` ( Team_ID INT PRIMARY KEY, School_ID INT REFERENCES university(School_ID), Team_Name TEXT, ACC_Regular_Season TEXT, ACC_Percent TEXT, ACC_Home TEXT, ACC_Road TEXT, All_Games TEXT, All_Games_Percent INT, All_Home TEXT, All_Road TEXT, All_Neutral TEXT ); Sample rows from `basketball_match`: (1, 1, North Carolina, 14–2, .875, 6–2, 8–0, 35–2, 0.946, 14–2, 13–0, 9–1), (2, 2, Duke, 13–3, .813, 7–1, 6–2, 28–6, 0.824, 15–1, 8–2, 5–3), (3, 4, Clemson, 10–6, .625, 7–1, 3–5, 24–10, 0.706, 14–2, 6–5, 4–3), CREATE TABLE `university` ( School_ID INT PRIMARY KEY, School TEXT, Location TEXT, Founded REAL, Affiliation TEXT, Enrollment REAL, Nickname TEXT, Primary_conference TEXT ); Sample rows from `university`: (1, University of Delaware, Newark, DE, 1743.0, Public, 19067.0, Fightin' Blue Hens, Colonial Athletic Association ( D-I )), (2, Lebanon Valley College, Annville, PA, 1866.0, Private/Methodist, 2100.0, Flying Dutchmen, MAC Commonwealth Conference ( D-III )), (3, University of Rhode Island, Kingston, RI, 1892.0, Public, 19095.0, Rams, Atlantic 10 Conference ( D-I )), ",
        "output": "SELECT team_name FROM basketball_match ORDER BY all_home DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona. ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_content VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), other_address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 9443 Boyle Route Suite 857, Lucasville, 416, Colorado, USA, None), (2, 1969 Jabari Port Suite 393, New Sabryna, 721, SouthCarolina, USA, None), (3, 295 Hackett Curve, Reingertown, 255, NewJersey, USA, None), CREATE TABLE `Products` ( product_id INTEGER, product_details VARCHAR(255) ); Sample rows from `Products`: (1, Americano), (2, Dove Chocolate), (3, Latte), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method VARCHAR(15), customer_name VARCHAR(80), date_became_customer DATETIME, other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Cash, Dr. Julia Wuckert MD, 2018-03-01 23:20:10, None), (2, Cheque, Tillman Ernser, 2018-02-28 11:37:44, None), (3, Credit Card, Rodrick Heaney, 2018-03-09 17:41:58, None), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_address_from DATETIME, address_type VARCHAR(15), date_address_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 11, 1985-03-29 20:31:43, Billing, 1993-02-17 17:55:18), (13, 11, 2010-08-25 04:24:35, Billing, 1972-02-17 22:23:38), (2, 14, 2010-12-26 08:52:50, Residential, 1979-07-16 18:22:39), CREATE TABLE `Customer_Contact_Channels` ( customer_id INTEGER REFERENCES Customers(customer_id), channel_code VARCHAR(15), active_from_date DATETIME, active_to_date DATETIME, contact_number VARCHAR(50) ); Sample rows from `Customer_Contact_Channels`: (9, Email, 2017-12-07 18:18:15, 2018-03-23 13:37:14, 940.035.6435x0225), (2, Email, 2017-04-07 04:51:41, 2018-03-23 01:30:52, 189.449.8326x7607), (9, Email, 2017-05-25 16:08:45, 2018-03-13 07:32:25, 958-653-2640), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(15), order_date DATETIME, order_details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 15, Cancelled, 2018-03-21 11:20:46, None), (2, 3, Cancelled, 2018-03-05 06:35:33, None), (3, 5, Delivered, 2018-03-04 07:16:22, Second time), CREATE TABLE `Order_Items` ( order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), order_quantity VARCHAR(15) ); Sample rows from `Order_Items`: (14, 2, 5), (5, 2, 9), (14, 3, 2), ",
        "output": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the number of projects. ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (BK, Book, excellent), (CV, CV, excellent), (PT, Presentation, very good), CREATE TABLE `Ref_Budget_Codes` ( Budget_Type_Code CHAR(15) PRIMARY KEY, Budget_Type_Description VARCHAR(255) ); Sample rows from `Ref_Budget_Codes`: (GV, Government), (ORG, Organisation), (SF, Self founded), CREATE TABLE `Projects` ( Project_ID INTEGER, Project_Details VARCHAR(255) ); Sample rows from `Projects`: (30, Society Research project), (35, Internet of Things project), (105, Graph Database project), CREATE TABLE `Documents` ( Document_ID INTEGER, Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Project_ID INTEGER REFERENCES Projects(Project_ID), Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Documents`: (29, CV, 30, 2004-08-28 06:59:19, Review on UK files, None, None), (42, BK, 105, 2012-12-27 19:09:18, Review on Canadian files, None, None), (57, CV, 195, 1980-10-22 14:17:11, Review on French files, None, None), CREATE TABLE `Statements` ( Statement_ID INTEGER REFERENCES Documents(Document_ID), Statement_Details VARCHAR(255) ); Sample rows from `Statements`: (57, Open Project), (192, Private Project), CREATE TABLE `Documents_with_Expenses` ( Document_ID INTEGER REFERENCES Documents(Document_ID), Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code), Document_Details VARCHAR(255) ); Sample rows from `Documents_with_Expenses`: (57, GV, government), (192, GV, government), (226, GV, government), CREATE TABLE `Accounts` ( Account_ID INTEGER, Statement_ID INTEGER REFERENCES Statements(Statement_ID), Account_Details VARCHAR(255) ); Sample rows from `Accounts`: (7, 57, 495.063), (61, 57, 930.14), (98, 57, 6035.84), ",
        "output": "SELECT COUNT(*) FROM projects"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the names of all distinct products in alphabetical order. ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_name VARCHAR(80), customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Savannah, rerum), (2, George, est), (3, Alberto, deleniti), CREATE TABLE `Invoices` ( invoice_number INTEGER, invoice_date DATETIME, invoice_details VARCHAR(255) ); Sample rows from `Invoices`: (1, 1989-09-03 16:03:05, vitae), (2, 1989-12-11 16:40:57, magnam), (3, 1995-10-07 14:13:05, et), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(10), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 2, Shipped, 2009-02-21 15:26:19, None), (2, 11, Shipped, 1974-06-24 22:10:26, None), (3, 4, Shipped, 1982-12-29 21:10:11, None), CREATE TABLE `Products` ( product_id INTEGER, product_name VARCHAR(80), product_details VARCHAR(255) ); Sample rows from `Products`: (1, food, None), (2, book, None), (3, food, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, product_id INTEGER REFERENCES Products(product_id), order_id INTEGER REFERENCES Orders(order_id), order_item_status VARCHAR(10), order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 6, Finish, None), (2, 15, 6, Finish, None), (3, 12, 15, Finish, None), CREATE TABLE `Shipments` ( shipment_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), shipment_tracking_number VARCHAR(80), shipment_date DATETIME, other_shipment_details VARCHAR(255) ); Sample rows from `Shipments`: (1, 5, 13, 3452, 1983-08-13 22:34:11, None), (2, 7, 2, 0114, 1977-11-10 12:11:25, None), (3, 10, 5, 478, 2006-01-17 03:08:05, None), CREATE TABLE `Shipment_Items` ( shipment_id INTEGER REFERENCES Shipments(shipment_id), order_item_id INTEGER REFERENCES Order_Items(order_item_id) ); Sample rows from `Shipment_Items`: (11, 12), (10, 15), (10, 12), ",
        "output": "SELECT DISTINCT product_name FROM products ORDER BY product_name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: give me some restaurants on bethel island rd in bethel island ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the primary conference of the school that has the lowest acc percent score in the competition? ###filtered_database_schema: CREATE TABLE `basketball_match` ( Team_ID INT PRIMARY KEY, School_ID INT REFERENCES university(School_ID), Team_Name TEXT, ACC_Regular_Season TEXT, ACC_Percent TEXT, ACC_Home TEXT, ACC_Road TEXT, All_Games TEXT, All_Games_Percent INT, All_Home TEXT, All_Road TEXT, All_Neutral TEXT ); Sample rows from `basketball_match`: (1, 1, North Carolina, 14–2, .875, 6–2, 8–0, 35–2, 0.946, 14–2, 13–0, 9–1), (2, 2, Duke, 13–3, .813, 7–1, 6–2, 28–6, 0.824, 15–1, 8–2, 5–3), (3, 4, Clemson, 10–6, .625, 7–1, 3–5, 24–10, 0.706, 14–2, 6–5, 4–3), CREATE TABLE `university` ( School_ID INT PRIMARY KEY, School TEXT, Location TEXT, Founded REAL, Affiliation TEXT, Enrollment REAL, Nickname TEXT, Primary_conference TEXT ); Sample rows from `university`: (1, University of Delaware, Newark, DE, 1743.0, Public, 19067.0, Fightin' Blue Hens, Colonial Athletic Association ( D-I )), (2, Lebanon Valley College, Annville, PA, 1866.0, Private/Methodist, 2100.0, Flying Dutchmen, MAC Commonwealth Conference ( D-III )), (3, University of Rhode Island, Kingston, RI, 1892.0, Public, 19095.0, Rams, Atlantic 10 Conference ( D-I )), ",
        "output": "SELECT t1.primary_conference FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the most populated state bordering oklahoma ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many classes does the professor whose last name is Graztevski teach? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT COUNT(*) FROM employee as t1 JOIN CLasS as t2 ON t1.emp_num  =  t2.prof_num WHERE t1.emp_lname  =  'Graztevski'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what state has the highest population density ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX(density) FROM state );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'? ###filtered_database_schema: CREATE TABLE `actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), last_update TIMESTAMP ); Sample rows from `actor`: (1, PENELOPE, GUINESS, 2006-02-15 04:34:33), (2, NICK, WAHLBERG, 2006-02-15 04:34:33), (3, ED, CHASE, 2006-02-15 04:34:33), CREATE TABLE `address` ( address_id SMALLINT UNSIGNED PRIMARY KEY, address VARCHAR(50), address2 VARCHAR(50), district VARCHAR(20), city_id SMALLINT UNSIGNED REFERENCES city(city_id), postal_code VARCHAR(10), phone VARCHAR(20), last_update TIMESTAMP ); Sample rows from `address`: (1, 47 MySakila Drive, None, Alberta, 300, , , 2006-02-15 04:45:30), (2, 28 MySQL Boulevard, None, QLD, 576, , , 2006-02-15 04:45:30), (3, 23 Workhaven Lane, None, Alberta, 300, , 14033335568, 2006-02-15 04:45:30), CREATE TABLE `category` ( category_id TINYINT UNSIGNED PRIMARY KEY, name VARCHAR(25), last_update TIMESTAMP ); Sample rows from `category`: (1, Action, 2006-02-15 04:46:27), (2, Animation, 2006-02-15 04:46:27), (3, Children, 2006-02-15 04:46:27), CREATE TABLE `city` ( city_id SMALLINT UNSIGNED PRIMARY KEY, city VARCHAR(50), country_id SMALLINT UNSIGNED REFERENCES country(country_id), last_update TIMESTAMP ); Sample rows from `city`: (1, A Corua (La Corua), 87, 2006-02-15 04:45:25), (2, Abha, 82, 2006-02-15 04:45:25), (3, Abu Dhabi, 101, 2006-02-15 04:45:25), CREATE TABLE `country` ( country_id SMALLINT UNSIGNED PRIMARY KEY, country VARCHAR(50), last_update TIMESTAMP ); Sample rows from `country`: (1, Afghanistan, 2006-02-15 04:44:00), (2, Algeria, 2006-02-15 04:44:00), (3, American Samoa, 2006-02-15 04:44:00), CREATE TABLE `customer` ( customer_id SMALLINT UNSIGNED PRIMARY KEY, store_id TINYINT UNSIGNED REFERENCES store(store_id), first_name VARCHAR(45), last_name VARCHAR(45), email VARCHAR(50), address_id SMALLINT UNSIGNED REFERENCES address(address_id), active BOOLEAN, create_date DATETIME, last_update TIMESTAMP ); Sample rows from `customer`: (1, 1, MARY, SMITH, MARY.SMITH@sakilacustomer.org, 5, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (2, 1, PATRICIA, JOHNSON, PATRICIA.JOHNSON@sakilacustomer.org, 6, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (3, 1, LINDA, WILLIAMS, LINDA.WILLIAMS@sakilacustomer.org, 7, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), CREATE TABLE `film` ( film_id SMALLINT UNSIGNED PRIMARY KEY, title VARCHAR(255), description TEXT, release_year YEAR, language_id TINYINT UNSIGNED REFERENCES language(language_id), original_language_id TINYINT UNSIGNED REFERENCES language(language_id), rental_duration TINYINT UNSIGNED, rental_rate DECIMAL(4,2), length SMALLINT UNSIGNED, replacement_cost DECIMAL(5,2), rating , special_features , last_update TIMESTAMP ); Sample rows from `film`: (1, ACADEMY DINOSAUR, A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies, 2006, 1, None, 6, 0.99, 86, 20.99, PG, Deleted Scenes,Behind the Scenes, 2006-02-15 05:03:42), (2, ACE GOLDFINGER, A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China, 2006, 1, None, 3, 4.99, 48, 12.99, G, Trailers,Deleted Scenes, 2006-02-15 05:03:42), (3, ADAPTATION HOLES, A Astounding Reflection of a Lumberjack And a Car who must Sink a Lumberjack in A Baloon Factory, 2006, 1, None, 7, 2.99, 50, 18.99, NC-17, Trailers,Deleted Scenes, 2006-02-15 05:03:42), CREATE TABLE `film_actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES actor(actor_id), film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), last_update TIMESTAMP ); Sample rows from `film_actor`: (1, 1, 2006-02-15 05:05:03), (1, 23, 2006-02-15 05:05:03), (1, 25, 2006-02-15 05:05:03), CREATE TABLE `film_category` ( film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), category_id TINYINT UNSIGNED PRIMARY KEY REFERENCES category(category_id), last_update TIMESTAMP ); Sample rows from `film_category`: (1, 6, 2006-02-15 05:07:09), (2, 11, 2006-02-15 05:07:09), (3, 6, 2006-02-15 05:07:09), CREATE TABLE `film_text` ( film_id SMALLINT PRIMARY KEY, title VARCHAR(255), description TEXT ); CREATE TABLE `inventory` ( inventory_id MEDIUMINT UNSIGNED PRIMARY KEY, film_id SMALLINT UNSIGNED REFERENCES film(film_id), store_id TINYINT UNSIGNED REFERENCES store(store_id), last_update TIMESTAMP ); Sample rows from `inventory`: (1, 1, 1, 2006-02-15 05:09:17), (2, 1, 1, 2006-02-15 05:09:17), (3, 1, 1, 2006-02-15 05:09:17), CREATE TABLE `language` ( language_id TINYINT UNSIGNED PRIMARY KEY, name CHAR(20), last_update TIMESTAMP ); CREATE TABLE `payment` ( payment_id SMALLINT UNSIGNED PRIMARY KEY, customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), rental_id INT REFERENCES rental(rental_id), amount DECIMAL(5,2), payment_date DATETIME, last_update TIMESTAMP ); Sample rows from `payment`: (1, 1, 1, 76, 2.99, 2005-05-25 11:30:37, 2006-02-15 22:12:30), (2, 1, 1, 573, 0.99, 2005-05-28 10:35:23, 2006-02-15 22:12:30), (3, 1, 1, 1185, 5.99, 2005-06-15 00:54:12, 2006-02-15 22:12:30), CREATE TABLE `rental` ( rental_id INT PRIMARY KEY, rental_date DATETIME, inventory_id MEDIUMINT UNSIGNED REFERENCES inventory(inventory_id), customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), return_date DATETIME, staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), last_update TIMESTAMP ); Sample rows from `rental`: (1, 2005-05-24 22:53:30, 367, 130, 2005-05-26 22:04:30, 1, 2006-02-15 21:30:53), (2, 2005-05-24 22:54:33, 1525, 459, 2005-05-28 19:40:33, 1, 2006-02-15 21:30:53), (3, 2005-05-24 23:03:39, 1711, 408, 2005-06-01 22:12:39, 1, 2006-02-15 21:30:53), CREATE TABLE `staff` ( staff_id TINYINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), address_id SMALLINT UNSIGNED REFERENCES address(address_id), picture BLOB, email VARCHAR(50), store_id TINYINT UNSIGNED, active BOOLEAN, username VARCHAR(16), password VARCHAR(40), last_update TIMESTAMP ); CREATE TABLE `store` ( store_id TINYINT UNSIGNED PRIMARY KEY, manager_staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), address_id SMALLINT UNSIGNED REFERENCES address(address_id), last_update TIMESTAMP ); ",
        "output": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of the swimmers who have both \"win\" and \"loss\" results in the record. ###filtered_database_schema: CREATE TABLE `swimmer` ( ID INT PRIMARY KEY, name TEXT, Nationality TEXT, meter_100 REAL, meter_200 TEXT, meter_300 TEXT, meter_400 TEXT, meter_500 TEXT, meter_600 TEXT, meter_700 TEXT, Time TEXT ); Sample rows from `swimmer`: (7, Przemysław Stańczyk, Poland, 57.31, 1:57.10, 2:56.02, 3:55.36, 4:54.21, 5:52.59, 6:50.91, 7:47.91), (4, Craig Stevens, Australia, 57.35, 1:56.34, 2:55.90, 3:55.72, 4:55.08, 5:54.45, 6:52.69, 7:48.67), (5, Federico Colbertaldo, Italy, 57.66, 1:56.77, 2:56.04, 3:55.37, 4:54.48, 5:53.53, 6:52.58, 7:49.98), CREATE TABLE `stadium` ( ID INT PRIMARY KEY, name TEXT, Capacity INT, City TEXT, Country TEXT, Opening_year INT ); Sample rows from `stadium`: (1, Nou Mestalla, 75000, Valencia, Spain, 2004), (2, Gazprom Arena, 69501, Saint Petersburg, Russia, 2005), (3, Baku Olympic Stadium, 68000, Baku, Azerbaijan, 2005), CREATE TABLE `event` ( ID INT PRIMARY KEY, Name TEXT, Stadium_ID INT REFERENCES stadium(ID), Year TEXT ); Sample rows from `event`: (1, FINA, 1, 2016), (2, Pacific, 10, 2011), (3, World Master, 2, 2012), CREATE TABLE `record` ( ID INT, Result TEXT, Swimmer_ID INT PRIMARY KEY REFERENCES swimmer(ID), Event_ID INT PRIMARY KEY REFERENCES event(ID) ); Sample rows from `record`: (1, NC, 1, 1), (2, Win, 1, 2), (3, Loss, 3, 3), ",
        "output": "SELECT t1.name FROM swimmer as t1 JOIN record as t2 ON t1.id  =  t2.swimmer_id WHERE result  =  'Win' INTERSECT SELECT t1.name FROM swimmer as t1 JOIN record as t2 ON t1.id  =  t2.swimmer_id WHERE result  =  'Loss'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the name for regions not affected. ###filtered_database_schema: CREATE TABLE `storm` ( Storm_ID INT PRIMARY KEY, Name TEXT, Dates_active TEXT, Max_speed INT, Damage_millions_USD REAL, Number_Deaths INT ); Sample rows from `storm`: (1, One, May19–May25, 995, 13.0, 0), (2, Two, August3–August10, 972, 10.75, 7), (3, Three, August5–August14, 972, 13.0, 52), CREATE TABLE `region` ( Region_id INT PRIMARY KEY, Region_code TEXT, Region_name TEXT ); Sample rows from `region`: (1, AF, Afghanistan), (2, AL, Albania), (3, DZ, Algeria), CREATE TABLE `affected_region` ( Region_id INT PRIMARY KEY REFERENCES region(Region_id), Storm_ID INT PRIMARY KEY REFERENCES storm(Storm_ID), Number_city_affected REAL ); Sample rows from `affected_region`: (1, 1, 10.0), (2, 1, 15.0), (3, 3, 30.0), ",
        "output": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: When does Michael Stonebraker publish the GIS Database paper ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the male friend of Alice whose job is a doctor? ###filtered_database_schema: CREATE TABLE `Person` ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT ); Sample rows from `Person`: (Alice, 25, new york city, female, student), (Bob, 35, salt lake city, male, engineer), (Zach, 45, austin, male, doctor), CREATE TABLE `PersonFriend` ( name varchar(20) REFERENCES Person(name), friend varchar(20) REFERENCES Person(name), year INTEGER ); Sample rows from `PersonFriend`: (Alice, Bob, 10), (Zach, Dan, 12), (Bob, Zach, 5), ",
        "output": "SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name  =  'Alice' AND t1.gender  =  'male' AND t1.job  =  'doctor'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the full name, hire data, salary and department id for employees without the letter M in their first name, ordered by ascending department id? ###filtered_database_schema: CREATE TABLE `regions` ( REGION_ID decimal(5,0) PRIMARY KEY, REGION_NAME varchar(25) ); Sample rows from `regions`: (1, Europe\\r), (2, Americas\\r), (3, Asia\\r), CREATE TABLE `countries` ( COUNTRY_ID varchar(2) PRIMARY KEY, COUNTRY_NAME varchar(40), REGION_ID decimal(10,0) REFERENCES regions(REGION_ID) ); Sample rows from `countries`: (AR, Argentina, 2), (AU, Australia, 3), (BE, Belgium, 1), CREATE TABLE `departments` ( DEPARTMENT_ID decimal(4,0) PRIMARY KEY, DEPARTMENT_NAME varchar(30), MANAGER_ID decimal(6,0), LOCATION_ID decimal(4,0) ); Sample rows from `departments`: (10, Administration, 200, 1700), (20, Marketing, 201, 1800), (30, Purchasing, 114, 1700), CREATE TABLE `jobs` ( JOB_ID varchar(10) PRIMARY KEY, JOB_TITLE varchar(35), MIN_SALARY decimal(6,0), MAX_SALARY decimal(6,0) ); Sample rows from `jobs`: (AD_PRES, President, 20000, 40000), (AD_VP, Administration Vice President, 15000, 30000), (AD_ASST, Administration Assistant, 3000, 6000), CREATE TABLE `employees` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY, FIRST_NAME varchar(20), LAST_NAME varchar(25), EMAIL varchar(25), PHONE_NUMBER varchar(20), HIRE_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), SALARY decimal(8,2), COMMISSION_PCT decimal(2,2), MANAGER_ID decimal(6,0), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `employees`: (100, Steven, King, SKING, 515.123.4567, 1987-06-17, AD_PRES, 24000, 0, 0, 90), (101, Neena, Kochhar, NKOCHHAR, 515.123.4568, 1987-06-18, AD_VP, 17000, 0, 100, 90), (102, Lex, De Haan, LDEHAAN, 515.123.4569, 1987-06-19, AD_VP, 17000, 0, 100, 90), CREATE TABLE `job_history` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY REFERENCES employees(EMPLOYEE_ID), START_DATE date PRIMARY KEY, END_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `job_history`: (102, 1993-01-13, 1998-07-24, IT_PROG, 60), (101, 1989-09-21, 1993-10-27, AC_ACCOUNT, 110), (101, 1993-10-28, 1997-03-15, AC_MGR, 110), CREATE TABLE `locations` ( LOCATION_ID decimal(4,0) PRIMARY KEY, STREET_ADDRESS varchar(40), POSTAL_CODE varchar(12), CITY varchar(30), STATE_PROVINCE varchar(25), COUNTRY_ID varchar(2) REFERENCES countries(COUNTRY_ID) ); Sample rows from `locations`: (1000, 1297 Via Cola di Rie, 989, Roma, , IT), (1100, 93091 Calle della Testa, 10934, Venice, , IT), (1200, 2017 Shinjuku-ku, 1689, Tokyo, Tokyo Prefecture, JP), ",
        "output": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of regions. ###filtered_database_schema: CREATE TABLE `storm` ( Storm_ID INT PRIMARY KEY, Name TEXT, Dates_active TEXT, Max_speed INT, Damage_millions_USD REAL, Number_Deaths INT ); Sample rows from `storm`: (1, One, May19–May25, 995, 13.0, 0), (2, Two, August3–August10, 972, 10.75, 7), (3, Three, August5–August14, 972, 13.0, 52), CREATE TABLE `region` ( Region_id INT PRIMARY KEY, Region_code TEXT, Region_name TEXT ); Sample rows from `region`: (1, AF, Afghanistan), (2, AL, Albania), (3, DZ, Algeria), CREATE TABLE `affected_region` ( Region_id INT PRIMARY KEY REFERENCES region(Region_id), Storm_ID INT PRIMARY KEY REFERENCES storm(Storm_ID), Number_city_affected REAL ); Sample rows from `affected_region`: (1, 1, 10.0), (2, 1, 15.0), (3, 3, 30.0), ",
        "output": "SELECT COUNT(*) FROM region"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the average prices of hotels grouped by their pet policy. ###filtered_database_schema: CREATE TABLE `Ref_Hotel_Star_Ratings` ( star_rating_code CHAR(15) PRIMARY KEY, star_rating_description VARCHAR(80) ); Sample rows from `Ref_Hotel_Star_Ratings`: (1, star), (2, star), (3, star), CREATE TABLE `Locations` ( Location_ID INTEGER, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Locations`: (333, Astro Orbiter, 660 Shea Crescent, None), (368, African Animals, 254 Ottilie Junction, None), (417, American Adventure, 53815 Sawayn Tunnel Apt. 297, None), CREATE TABLE `Ref_Attraction_Types` ( Attraction_Type_Code CHAR(15) PRIMARY KEY, Attraction_Type_Description VARCHAR(255) ); Sample rows from `Ref_Attraction_Types`: (2, park), (3, garden), (5, gallery), CREATE TABLE `Visitors` ( Tourist_ID INTEGER PRIMARY KEY, Tourist_Details VARCHAR(255) ); Sample rows from `Visitors`: (164, Toney), (189, Graciela), (204, Vincent), CREATE TABLE `Features` ( Feature_ID INTEGER, Feature_Details VARCHAR(255) ); Sample rows from `Features`: (523, cafe), (528, park), (543, garden), CREATE TABLE `Hotels` ( hotel_id INTEGER, star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code), pets_allowed_yn CHAR(1), price_range REAL, other_hotel_details VARCHAR(255) ); Sample rows from `Hotels`: (123, 5, 1, 2914989.571, None), (144, 4, , , None), (172, 5, , 17012.682586009, None), CREATE TABLE `Tourist_Attractions` ( Tourist_Attraction_ID INTEGER, Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code), Location_ID INTEGER REFERENCES Locations(Location_ID), How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Tourist_Attractions`: (2113, 2, 579, bus, art museum, None, None, None), (2701, 6, 417, walk, UK gallery, None, None, None), (5076, 2, 868, shuttle, flying elephant, None, None, None), CREATE TABLE `Street_Markets` ( Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Market_Details VARCHAR(255) ); Sample rows from `Street_Markets`: (6852, Broadway), (7067, Fish Farm Market), CREATE TABLE `Shops` ( Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Shop_Details VARCHAR(255) ); Sample rows from `Shops`: (8429, soup), (8449, coffee), (8698, Flower), CREATE TABLE `Museums` ( Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Museum_Details VARCHAR(255) ); Sample rows from `Museums`: (2113, Yale Center for British Art), (2701, The Metropolitan Museum of Art), (5076, MoMA), CREATE TABLE `Royal_Family` ( Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Royal_Family_Details VARCHAR(255) ); Sample rows from `Royal_Family`: (9561, None), (9919, None), CREATE TABLE `Theme_Parks` ( Theme_Park_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Theme_Park_Details VARCHAR(255) ); Sample rows from `Theme_Parks`: (5265, Disney), (6476, Sea World), (6523, Universal Studios), CREATE TABLE `Visits` ( Visit_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID), Visit_Date DATETIME, Visit_Details VARCHAR(40) ); Sample rows from `Visits`: (183, 6653, 377, 2004-08-21 03:06:14, ), (268, 5076, 204, 2013-08-06 05:35:51, ), (273, 9360, 211, 2013-10-27 09:56:08, ), CREATE TABLE `Photos` ( Photo_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Photos`: (211, 8449, game1, None, 702, None), (280, 7067, game2, None, 762, None), (303, 5076, game3, None, 392, None), CREATE TABLE `Staff` ( Staff_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(40), Other_Details VARCHAR(255) ); Sample rows from `Staff`: (170, 6476, Whitney, None), (219, 6476, Kaela, None), (237, 7067, Eunice, None), CREATE TABLE `Tourist_Attraction_Features` ( Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID) ); Sample rows from `Tourist_Attraction_Features`: (5076, 528), (5076, 681), (5265, 523), ",
        "output": "SELECT pets_allowed_yn ,  AVG(price_range) FROM hotels GROUP BY pets_allowed_yn"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names and locations of all tracks? ###filtered_database_schema: CREATE TABLE `race` ( Race_ID INT PRIMARY KEY, Name TEXT, Class TEXT, Date TEXT, Track_ID TEXT REFERENCES track(Track_ID) ); Sample rows from `race`: (1, Rolex 24 At Daytona, DP/GT, January 26 January 27, 1), (2, Gainsco Grand Prix of Miami, DP/GT, March 29, 2), (3, Mexico City 250, DP/GT, April 19, 2), CREATE TABLE `track` ( Track_ID INT PRIMARY KEY, Name TEXT, Location TEXT, Seating REAL, Year_Opened REAL ); Sample rows from `track`: (1, Auto Club Speedway, Fontana, CA, 92000.0, 1997.0), (2, Chicagoland Speedway, Joliet, IL, 75000.0, 2001.0), (3, Darlington Raceway, Darlington, SC, 63000.0, 1950.0), ",
        "output": "SELECT name ,  location FROM track"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name and budget of departments whose budgets are more than the average budget. ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT AVG(budget) FROM department)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What instrument did the musician with last name \"Heilo\" use in the song \"Badlands\"? ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT t4.instrument FROM performance as t1 JOIN band as t2 ON t1.bandmate  =  t2.id JOIN songs as t3 ON t3.songid  =  t1.songid JOIN instruments as t4 ON t4.songid  =  t3.songid AND t4.bandmateid  =  t2.id WHERE t2.lastname  =  \"Heilo\" AND t3.title  =  \"Badlands\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Please show the results of music festivals and the number of music festivals that have had each, ordered by this count. ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Artist TEXT, Age INT, Famous_Title TEXT, Famous_Release_date TEXT ); Sample rows from `artist`: (1, Gorgoroth, 34, Bergen 1996, November 2007), (2, Ophiolatry, 35, Transmutation, January 21, 2008), (3, Ophiolatry, 22, Antievangelistical Process (re-release), 2009), CREATE TABLE `volume` ( Volume_ID INT PRIMARY KEY, Volume_Issue TEXT, Issue_Date TEXT, Weeks_on_Top REAL, Song TEXT, Artist_ID INT REFERENCES artist(Artist_ID) ); Sample rows from `volume`: (1, 45:14 §, 27 December 1986 - 10 January, 3.0, The Way, 1), (2, 45:15, 17 January, 1.0, Everybody Have Fun Tonight , 2), (3, 45:16, 24 January, 1.0, Walk Like an Egyptian , 1), CREATE TABLE `music_festival` ( ID INT PRIMARY KEY, Music_Festival TEXT, Date_of_ceremony TEXT, Category TEXT, Volume INT REFERENCES volume(Volume_ID), Result TEXT ); Sample rows from `music_festival`: (1, 34th England Academy Prize, 18 February 2011, Best Song, 1, Nominated), (2, 34th Japan Academy Prize, 18 February 2011, Best Lyrics, 2, Nominated), (3, 34th European Academy Prize, 18 February 2011, Best Song, 3, Awarded), ",
        "output": "SELECT result ,  COUNT(*) FROM music_festival GROUP BY result ORDER BY COUNT(*) DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the distinct location names? ###filtered_database_schema: CREATE TABLE `Ref_Hotel_Star_Ratings` ( star_rating_code CHAR(15) PRIMARY KEY, star_rating_description VARCHAR(80) ); Sample rows from `Ref_Hotel_Star_Ratings`: (1, star), (2, star), (3, star), CREATE TABLE `Locations` ( Location_ID INTEGER, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Locations`: (333, Astro Orbiter, 660 Shea Crescent, None), (368, African Animals, 254 Ottilie Junction, None), (417, American Adventure, 53815 Sawayn Tunnel Apt. 297, None), CREATE TABLE `Ref_Attraction_Types` ( Attraction_Type_Code CHAR(15) PRIMARY KEY, Attraction_Type_Description VARCHAR(255) ); Sample rows from `Ref_Attraction_Types`: (2, park), (3, garden), (5, gallery), CREATE TABLE `Visitors` ( Tourist_ID INTEGER PRIMARY KEY, Tourist_Details VARCHAR(255) ); Sample rows from `Visitors`: (164, Toney), (189, Graciela), (204, Vincent), CREATE TABLE `Features` ( Feature_ID INTEGER, Feature_Details VARCHAR(255) ); Sample rows from `Features`: (523, cafe), (528, park), (543, garden), CREATE TABLE `Hotels` ( hotel_id INTEGER, star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code), pets_allowed_yn CHAR(1), price_range REAL, other_hotel_details VARCHAR(255) ); Sample rows from `Hotels`: (123, 5, 1, 2914989.571, None), (144, 4, , , None), (172, 5, , 17012.682586009, None), CREATE TABLE `Tourist_Attractions` ( Tourist_Attraction_ID INTEGER, Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code), Location_ID INTEGER REFERENCES Locations(Location_ID), How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Tourist_Attractions`: (2113, 2, 579, bus, art museum, None, None, None), (2701, 6, 417, walk, UK gallery, None, None, None), (5076, 2, 868, shuttle, flying elephant, None, None, None), CREATE TABLE `Street_Markets` ( Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Market_Details VARCHAR(255) ); Sample rows from `Street_Markets`: (6852, Broadway), (7067, Fish Farm Market), CREATE TABLE `Shops` ( Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Shop_Details VARCHAR(255) ); Sample rows from `Shops`: (8429, soup), (8449, coffee), (8698, Flower), CREATE TABLE `Museums` ( Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Museum_Details VARCHAR(255) ); Sample rows from `Museums`: (2113, Yale Center for British Art), (2701, The Metropolitan Museum of Art), (5076, MoMA), CREATE TABLE `Royal_Family` ( Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Royal_Family_Details VARCHAR(255) ); Sample rows from `Royal_Family`: (9561, None), (9919, None), CREATE TABLE `Theme_Parks` ( Theme_Park_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Theme_Park_Details VARCHAR(255) ); Sample rows from `Theme_Parks`: (5265, Disney), (6476, Sea World), (6523, Universal Studios), CREATE TABLE `Visits` ( Visit_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID), Visit_Date DATETIME, Visit_Details VARCHAR(40) ); Sample rows from `Visits`: (183, 6653, 377, 2004-08-21 03:06:14, ), (268, 5076, 204, 2013-08-06 05:35:51, ), (273, 9360, 211, 2013-10-27 09:56:08, ), CREATE TABLE `Photos` ( Photo_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Photos`: (211, 8449, game1, None, 702, None), (280, 7067, game2, None, 762, None), (303, 5076, game3, None, 392, None), CREATE TABLE `Staff` ( Staff_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(40), Other_Details VARCHAR(255) ); Sample rows from `Staff`: (170, 6476, Whitney, None), (219, 6476, Kaela, None), (237, 7067, Eunice, None), CREATE TABLE `Tourist_Attraction_Features` ( Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID) ); Sample rows from `Tourist_Attraction_Features`: (5076, 528), (5076, 681), (5265, 523), ",
        "output": "SELECT DISTINCT location_name FROM locations"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of the artists who sang the shortest song? ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT t1.artist_name FROM song as t1 JOIN files as t2 ON t1.f_id  =  t2.f_id ORDER BY t2.duration LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of customers that have an email containing \"gmail.com\". ###filtered_database_schema: CREATE TABLE `Album` ( AlbumId INTEGER, Title varchar(160), ArtistId INTEGER PRIMARY KEY REFERENCES Artist(ArtistId) ); Sample rows from `Album`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `Artist` ( ArtistId INTEGER, Name varchar(120) ); Sample rows from `Artist`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `Customer` ( CustomerId INTEGER, FirstName varchar(40), LastName varchar(20), Company varchar(80), Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60), SupportRepId INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId) ); Sample rows from `Customer`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `Employee` ( EmployeeId INTEGER, LastName varchar(20), FirstName varchar(20), Title varchar(30), ReportsTo INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId), BirthDate datetime, HireDate datetime, Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60) ); Sample rows from `Employee`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `Genre` ( GenreId INTEGER, Name varchar(120) ); Sample rows from `Genre`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `Invoice` ( InvoiceId INTEGER, CustomerId INTEGER PRIMARY KEY REFERENCES Customer(CustomerId), InvoiceDate datetime, BillingAddress varchar(70), BillingCity varchar(40), BillingState varchar(40), BillingCountry varchar(40), BillingPostalCode varchar(10), Total decimal(10,2) ); Sample rows from `Invoice`: (1, 2, 2009-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2009-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2009-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `InvoiceLine` ( InvoiceLineId INTEGER, InvoiceId INTEGER PRIMARY KEY REFERENCES Invoice(InvoiceId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId), UnitPrice decimal(10,2), Quantity INTEGER ); Sample rows from `InvoiceLine`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `MediaType` ( MediaTypeId INTEGER, Name varchar(120) ); Sample rows from `MediaType`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `Playlist` ( PlaylistId INTEGER, Name varchar(120) ); Sample rows from `Playlist`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `PlaylistTrack` ( PlaylistId INTEGER PRIMARY KEY REFERENCES Playlist(PlaylistId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId) ); Sample rows from `PlaylistTrack`: (1, 1), (8, 1), (17, 1), CREATE TABLE `Track` ( TrackId INTEGER, Name varchar(200), AlbumId INTEGER PRIMARY KEY REFERENCES Album(AlbumId), MediaTypeId INTEGER PRIMARY KEY REFERENCES MediaType(MediaTypeId), GenreId INTEGER PRIMARY KEY REFERENCES Genre(GenreId), Composer varchar(220), Milliseconds INTEGER, Bytes INTEGER, UnitPrice decimal(10,2) ); Sample rows from `Track`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), ",
        "output": "SELECT COUNT(*) FROM customer WHERE email LIKE \"%gmail.com%\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which parties have hosts of age above 50? Give me the party locations. ###filtered_database_schema: CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Party_Theme TEXT, Location TEXT, First_year TEXT, Last_year TEXT, Number_of_hosts INT ); Sample rows from `party`: (1, Spring, Hemkade 48 Zaandam, 2000, 2001, 5), (2, Club Q-BASE, Hemkade 48 Zaandam, 2002, 2002, 23), (3, Hardcore Resurrection, Various locations, 2000, 2003, 4), CREATE TABLE `host` ( Host_ID INT PRIMARY KEY, Name TEXT, Nationality TEXT, Age TEXT ); Sample rows from `host`: (1, Austin Daye, United States, 43), (2, Lloyd Daniels, United States, 37), (3, Kornel David, Hungary, 31), CREATE TABLE `party_host` ( Party_ID INT PRIMARY KEY REFERENCES party(Party_ID), Host_ID INT PRIMARY KEY REFERENCES host(Host_ID), Is_Main_in_Charge bool ); Sample rows from `party_host`: (1, 1, T), (8, 7, T), (6, 10, F), ",
        "output": "SELECT t3.location FROM party_host as t1 JOIN host as t2 ON t1.host_id  =  t2.host_id JOIN party as t3 ON t1.party_id  =  t3.party_id WHERE t2.age  >  50"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many songs have vocals of type lead? ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT COUNT(DISTINCT title) FROM vocals as t1 JOIN songs as t2 ON t1.songid  =  t2.songid WHERE type  =  \"lead\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in? ###filtered_database_schema: CREATE TABLE `Physician` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), SSN INTEGER ); Sample rows from `Physician`: (1, John Dorian, Staff Internist, 111111111), (2, Elliot Reid, Attending Physician, 222222222), (3, Christopher Turk, Surgical Attending Physician, 333333333), CREATE TABLE `Department` ( DepartmentID INTEGER, Name VARCHAR(30), Head INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Department`: (1, General Medicine, 4), (2, Surgery, 7), (3, Psychiatry, 9), CREATE TABLE `Affiliated_With` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID), PrimaryAffiliation BOOLEAN ); Sample rows from `Affiliated_With`: (1, 1, 1), (2, 1, 1), (3, 1, 0), CREATE TABLE `Procedures` ( Code INTEGER, Name VARCHAR(30), Cost REAL ); Sample rows from `Procedures`: (1, Reverse Rhinopodoplasty, 1500.0), (2, Obtuse Pyloric Recombobulation, 3750.0), (3, Folded Demiophtalmectomy, 4500.0), CREATE TABLE `Trained_In` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code), CertificationDate DATETIME, CertificationExpires DATETIME ); Sample rows from `Trained_In`: (3, 1, 2008-01-01, 2008-12-31), (3, 2, 2008-01-01, 2008-12-31), (3, 5, 2008-01-01, 2008-12-31), CREATE TABLE `Patient` ( SSN INTEGER, Name VARCHAR(30), Address VARCHAR(30), Phone VARCHAR(30), InsuranceID INTEGER, PCP INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Patient`: (100000001, John Smith, 42 Foobar Lane, 555-0256, 68476213, 1), (100000002, Grace Ritchie, 37 Snafu Drive, 555-0512, 36546321, 2), (100000003, Random J. Patient, 101 Omgbbq Street, 555-1204, 65465421, 2), CREATE TABLE `Nurse` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), Registered BOOLEAN, SSN INTEGER ); Sample rows from `Nurse`: (101, Carla Espinosa, Head Nurse, 1, 111111110), (102, Laverne Roberts, Nurse, 1, 222222220), (103, Paul Flowers, Nurse, 0, 333333330), CREATE TABLE `Appointment` ( AppointmentID INTEGER, Patient INTEGER REFERENCES Patient(SSN), PrepNurse INTEGER REFERENCES Nurse(EmployeeID), Physician INTEGER REFERENCES Physician(EmployeeID), Start DATETIME, End DATETIME, ExaminationRoom TEXT ); Sample rows from `Appointment`: (13216584, 100000001, 101, 1, 2008-04-24 10:00, 2008-04-24 11:00, A), (26548913, 100000002, 101, 2, 2008-04-24 10:00, 2008-04-24 11:00, B), (36549879, 100000001, 102, 1, 2008-04-25 10:00, 2008-04-25 11:00, A), CREATE TABLE `Medication` ( Code INTEGER, Name VARCHAR(30), Brand VARCHAR(30), Description VARCHAR(30) ); Sample rows from `Medication`: (1, Procrastin-X, X, N/A), (2, Thesisin, Foo Labs, N/A), (3, Awakin, Bar Laboratories, N/A), CREATE TABLE `Prescribes` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Medication INTEGER PRIMARY KEY REFERENCES Medication(Code), Date DATETIME PRIMARY KEY, Appointment INTEGER REFERENCES Appointment(AppointmentID), Dose VARCHAR(30) ); Sample rows from `Prescribes`: (1, 100000001, 1, 2008-04-24 10:47, 13216584, 5), (9, 100000004, 2, 2008-04-27 10:53, 86213939, 10), (9, 100000004, 2, 2008-04-30 16:53, None, 5), CREATE TABLE `Block` ( BlockFloor INTEGER PRIMARY KEY, BlockCode INTEGER PRIMARY KEY ); Sample rows from `Block`: (1, 1), (1, 2), (1, 3), CREATE TABLE `Room` ( RoomNumber INTEGER, RoomType VARCHAR(30), BlockFloor INTEGER REFERENCES Block(BlockFloor), BlockCode INTEGER REFERENCES Block(BlockCode), Unavailable BOOLEAN ); Sample rows from `Room`: (101, Single, 1, 1, 0), (102, Single, 1, 1, 0), (103, Single, 1, 1, 0), CREATE TABLE `On_Call` ( Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID), BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor), BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode), OnCallStart DATETIME PRIMARY KEY, OnCallEnd DATETIME PRIMARY KEY ); Sample rows from `On_Call`: (101, 1, 1, 2008-11-04 11:00, 2008-11-04 19:00), (101, 1, 2, 2008-11-04 11:00, 2008-11-04 19:00), (102, 1, 3, 2008-11-04 11:00, 2008-11-04 19:00), CREATE TABLE `Stay` ( StayID INTEGER, Patient INTEGER REFERENCES Patient(SSN), Room INTEGER REFERENCES Room(RoomNumber), StayStart DATETIME, StayEnd DATETIME ); Sample rows from `Stay`: (3215, 100000001, 111, 2008-05-01, 2008-05-04), (3216, 100000003, 123, 2008-05-03, 2008-05-14), (3217, 100000004, 112, 2008-05-02, 2008-05-03), CREATE TABLE `Undergoes` ( Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code), Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID), DateUndergoes DATETIME PRIMARY KEY, Physician INTEGER REFERENCES Physician(EmployeeID), AssistingNurse INTEGER REFERENCES Nurse(EmployeeID) ); Sample rows from `Undergoes`: (100000001, 6, 3215, 2008-05-02, 3, 101), (100000001, 2, 3215, 2008-05-03, 7, 101), (100000004, 1, 3217, 2008-05-07, 3, 102), ",
        "output": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  \"John Wen\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For each station, return its longitude and the average duration of trips that started from the station. ###filtered_database_schema: CREATE TABLE `station` ( id INTEGER, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT ); Sample rows from `station`: (2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013), (3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013), (4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013), CREATE TABLE `status` ( station_id INTEGER REFERENCES station(id), bikes_available INTEGER, docks_available INTEGER, time TEXT ); Sample rows from `status`: (3, 12, 3, 2015-06-02 12:46:02), (3, 12, 3, 2015-06-02 12:47:02), (3, 12, 3, 2015-06-02 12:48:02), CREATE TABLE `trip` ( id INTEGER, duration INTEGER, start_date TEXT, start_station_name TEXT, start_station_id INTEGER, end_date TEXT, end_station_name TEXT, end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER ); Sample rows from `trip`: (900504, 384, 8/21/2015 17:03, Howard at 2nd, 63, 8/21/2015 17:10, San Francisco Caltrain 2 (330 Townsend), 69, 454, Subscriber, 94041), (900505, 588, 8/21/2015 17:03, South Van Ness at Market, 66, 8/21/2015 17:13, San Francisco Caltrain 2 (330 Townsend), 69, 574, Subscriber, 95119), (900506, 196, 8/21/2015 17:04, Market at Sansome, 77, 8/21/2015 17:07, Harry Bridges Plaza (Ferry Building), 50, 636, Subscriber, 94925), CREATE TABLE `weather` ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER ); Sample rows from `weather`: (8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107), (8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107), (8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107), ",
        "output": "SELECT t1.name ,  t1.long ,  AVG(t2.duration) FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id GROUP BY t2.start_station_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the largest city in the smallest state in the usa ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many faculty lines are there in \"San Francisco State University\" in year 2004? ###filtered_database_schema: CREATE TABLE `Campuses` ( Id INTEGER, Campus TEXT, Location TEXT, County TEXT, Year INTEGER ); Sample rows from `Campuses`: (1, California State University-Bakersfield, Bakersfield, Kern, 1965), (2, California State University-Channel Islands, Camarillo, Ventura, 2002), (3, California State University-Chico, Chico, Butte, 1887), CREATE TABLE `csu_fees` ( Campus INTEGER REFERENCES Campuses(Id), Year INTEGER, CampusFee INTEGER ); Sample rows from `csu_fees`: (1, 1996, 1951), (2, 2003, 1868), (3, 1996, 2042), CREATE TABLE `degrees` ( Year INTEGER PRIMARY KEY, Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Degrees INTEGER ); Sample rows from `degrees`: (1990, 1, 701), (1991, 1, 681), (1992, 1, 791), CREATE TABLE `discipline_enrollments` ( Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Discipline INTEGER PRIMARY KEY, Year INTEGER, Undergraduate INTEGER, Graduate INTEGER ); Sample rows from `discipline_enrollments`: (1, 4, 2004, 248, 0), (1, 5, 2004, 811, 73), (1, 6, 2004, 199, 0), CREATE TABLE `enrollments` ( Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Year INTEGER PRIMARY KEY, TotalEnrollment_AY INTEGER, FTE_AY INTEGER ); Sample rows from `enrollments`: (1, 1956, 384, 123), (1, 1957, 432, 151), (1, 1958, 422, 178), CREATE TABLE `faculty` ( Campus INTEGER REFERENCES Campuses(Id), Year INTEGER, Faculty REAL ); Sample rows from `faculty`: (1, 2002, 357.1), (2, 2002, 48.4), (3, 2002, 742.8), ",
        "output": "SELECT faculty FROM faculty as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which authors belong to the institution \"Google\"? Show the first names and last names. ###filtered_database_schema: CREATE TABLE `Inst` ( instID INTEGER, name TEXT, country TEXT ); Sample rows from `Inst`: (1000, University of Oxford, UK), (1010, Northeastern University, USA), (1020, Indiana University, USA), CREATE TABLE `Authors` ( authID INTEGER, lname TEXT, fname TEXT ); Sample rows from `Authors`: (50, Gibbons, Jeremy), (51, Hinze, Ralf), (52, James, Daniel W. H.), CREATE TABLE `Papers` ( paperID INTEGER, title TEXT ); Sample rows from `Papers`: (200, Just do it: Simple Monadic Equational Reasoning), (201, Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory), (202, Functional Pearl: Modular Rollback through Control Logging), CREATE TABLE `Authorship` ( authID INTEGER PRIMARY KEY REFERENCES Authors(authID), instID INTEGER PRIMARY KEY REFERENCES Inst(instID), paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID), authOrder INTEGER ); Sample rows from `Authorship`: (50, 1000, 200, 1), (51, 1000, 200, 2), (51, 1000, 201, 1), ",
        "output": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students? ###filtered_database_schema: CREATE TABLE `College` ( cName varchar(20) PRIMARY KEY, state varchar(2), enr numeric(5,0) ); Sample rows from `College`: (LSU, LA, 18000), (ASU, AZ, 12000), (OU, OK, 22000), CREATE TABLE `Player` ( pID numeric(5,0) PRIMARY KEY, pName varchar(20), yCard varchar(3), HS numeric(5,0) ); Sample rows from `Player`: (10001, Andrew, no, 1200), (20002, Blake, no, 1600), (30003, Charles, no, 300), CREATE TABLE `Tryout` ( pID numeric(5,0) PRIMARY KEY REFERENCES Player(pID), cName varchar(20) PRIMARY KEY REFERENCES College(cName), pPos varchar(8), decision varchar(3) ); Sample rows from `Tryout`: (10001, LSU, goalie, no), (10001, ASU, goalie, yes), (20002, FSU, striker, yes), ",
        "output": "SELECT cname FROM college WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cname FROM college WHERE enr  >  15000 AND state = \"LA\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the ids of the nurses who are on call in block floor 1 and block code 1. ###filtered_database_schema: CREATE TABLE `Physician` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), SSN INTEGER ); Sample rows from `Physician`: (1, John Dorian, Staff Internist, 111111111), (2, Elliot Reid, Attending Physician, 222222222), (3, Christopher Turk, Surgical Attending Physician, 333333333), CREATE TABLE `Department` ( DepartmentID INTEGER, Name VARCHAR(30), Head INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Department`: (1, General Medicine, 4), (2, Surgery, 7), (3, Psychiatry, 9), CREATE TABLE `Affiliated_With` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID), PrimaryAffiliation BOOLEAN ); Sample rows from `Affiliated_With`: (1, 1, 1), (2, 1, 1), (3, 1, 0), CREATE TABLE `Procedures` ( Code INTEGER, Name VARCHAR(30), Cost REAL ); Sample rows from `Procedures`: (1, Reverse Rhinopodoplasty, 1500.0), (2, Obtuse Pyloric Recombobulation, 3750.0), (3, Folded Demiophtalmectomy, 4500.0), CREATE TABLE `Trained_In` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code), CertificationDate DATETIME, CertificationExpires DATETIME ); Sample rows from `Trained_In`: (3, 1, 2008-01-01, 2008-12-31), (3, 2, 2008-01-01, 2008-12-31), (3, 5, 2008-01-01, 2008-12-31), CREATE TABLE `Patient` ( SSN INTEGER, Name VARCHAR(30), Address VARCHAR(30), Phone VARCHAR(30), InsuranceID INTEGER, PCP INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Patient`: (100000001, John Smith, 42 Foobar Lane, 555-0256, 68476213, 1), (100000002, Grace Ritchie, 37 Snafu Drive, 555-0512, 36546321, 2), (100000003, Random J. Patient, 101 Omgbbq Street, 555-1204, 65465421, 2), CREATE TABLE `Nurse` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), Registered BOOLEAN, SSN INTEGER ); Sample rows from `Nurse`: (101, Carla Espinosa, Head Nurse, 1, 111111110), (102, Laverne Roberts, Nurse, 1, 222222220), (103, Paul Flowers, Nurse, 0, 333333330), CREATE TABLE `Appointment` ( AppointmentID INTEGER, Patient INTEGER REFERENCES Patient(SSN), PrepNurse INTEGER REFERENCES Nurse(EmployeeID), Physician INTEGER REFERENCES Physician(EmployeeID), Start DATETIME, End DATETIME, ExaminationRoom TEXT ); Sample rows from `Appointment`: (13216584, 100000001, 101, 1, 2008-04-24 10:00, 2008-04-24 11:00, A), (26548913, 100000002, 101, 2, 2008-04-24 10:00, 2008-04-24 11:00, B), (36549879, 100000001, 102, 1, 2008-04-25 10:00, 2008-04-25 11:00, A), CREATE TABLE `Medication` ( Code INTEGER, Name VARCHAR(30), Brand VARCHAR(30), Description VARCHAR(30) ); Sample rows from `Medication`: (1, Procrastin-X, X, N/A), (2, Thesisin, Foo Labs, N/A), (3, Awakin, Bar Laboratories, N/A), CREATE TABLE `Prescribes` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Medication INTEGER PRIMARY KEY REFERENCES Medication(Code), Date DATETIME PRIMARY KEY, Appointment INTEGER REFERENCES Appointment(AppointmentID), Dose VARCHAR(30) ); Sample rows from `Prescribes`: (1, 100000001, 1, 2008-04-24 10:47, 13216584, 5), (9, 100000004, 2, 2008-04-27 10:53, 86213939, 10), (9, 100000004, 2, 2008-04-30 16:53, None, 5), CREATE TABLE `Block` ( BlockFloor INTEGER PRIMARY KEY, BlockCode INTEGER PRIMARY KEY ); Sample rows from `Block`: (1, 1), (1, 2), (1, 3), CREATE TABLE `Room` ( RoomNumber INTEGER, RoomType VARCHAR(30), BlockFloor INTEGER REFERENCES Block(BlockFloor), BlockCode INTEGER REFERENCES Block(BlockCode), Unavailable BOOLEAN ); Sample rows from `Room`: (101, Single, 1, 1, 0), (102, Single, 1, 1, 0), (103, Single, 1, 1, 0), CREATE TABLE `On_Call` ( Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID), BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor), BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode), OnCallStart DATETIME PRIMARY KEY, OnCallEnd DATETIME PRIMARY KEY ); Sample rows from `On_Call`: (101, 1, 1, 2008-11-04 11:00, 2008-11-04 19:00), (101, 1, 2, 2008-11-04 11:00, 2008-11-04 19:00), (102, 1, 3, 2008-11-04 11:00, 2008-11-04 19:00), CREATE TABLE `Stay` ( StayID INTEGER, Patient INTEGER REFERENCES Patient(SSN), Room INTEGER REFERENCES Room(RoomNumber), StayStart DATETIME, StayEnd DATETIME ); Sample rows from `Stay`: (3215, 100000001, 111, 2008-05-01, 2008-05-04), (3216, 100000003, 123, 2008-05-03, 2008-05-14), (3217, 100000004, 112, 2008-05-02, 2008-05-03), CREATE TABLE `Undergoes` ( Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code), Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID), DateUndergoes DATETIME PRIMARY KEY, Physician INTEGER REFERENCES Physician(EmployeeID), AssistingNurse INTEGER REFERENCES Nurse(EmployeeID) ); Sample rows from `Undergoes`: (100000001, 6, 3215, 2008-05-02, 3, 101), (100000001, 2, 3215, 2008-05-03, 7, 101), (100000004, 1, 3217, 2008-05-07, 3, 102), ",
        "output": "SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the distinct names and nationalities of the architects who have ever built a mill? ###filtered_database_schema: CREATE TABLE `architect` ( id TEXT PRIMARY KEY, name TEXT, nationality TEXT, gender TEXT ); Sample rows from `architect`: (1, Frank Lloyd Wright, American, male), (2, Frank Gehry, Canadian, male), (3, Zaha Hadid, Iraqi, British, female), CREATE TABLE `bridge` ( architect_id INT REFERENCES architect(id), id INT PRIMARY KEY, name TEXT, location TEXT, length_meters REAL, length_feet REAL ); Sample rows from `bridge`: (1, 1, Xian Ren Qiao (Fairy Bridge), Guangxi , China, 121.0, 400.0), (2, 2, Landscape Arch, Arches National Park , Utah , USA, 88.0, 290.0), (3, 3, Kolob Arch, Zion National Park , Utah , USA, 87.0, 287.0), CREATE TABLE `mill` ( architect_id INT REFERENCES architect(id), id INT PRIMARY KEY, location TEXT, name TEXT, type TEXT, built_year INT, notes TEXT ); Sample rows from `mill`: (1, 1, Coswarem, Le Vieux Molen, Grondzeiler, 1840, Molenechos (Dutch)), (1, 2, Donceel, Moulin Bertrand, Grondzeiler, 1890, Molenechos (Dutch)), (2, 3, Fexhe-le-haut-Clocher, Moulin de Fexhe, Grondzeiler, 1843, Molenechos (Dutch)), ",
        "output": "SELECT DISTINCT t1.name ,  t1.nationality FROM architect as t1 JOIN mill as t2 ON t1.id  =  t2.architect_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the name, location, mascot for all schools. ###filtered_database_schema: CREATE TABLE `School` ( School_id TEXT PRIMARY KEY, School_name TEXT, Location TEXT, Mascot TEXT, Enrollment INT, IHSAA_Class TEXT, IHSAA_Football_Class TEXT, County TEXT ); Sample rows from `School`: (1, Bremen, Bremen, Lions, 495, AA, AA, 50 Marshall), (2, Culver Community, Culver, Cavaliers, 287, A, A, 50 Marshall), (3, Glenn, Walkerton, Falcons, 605, AAA, AAA, 71 St. Joseph), CREATE TABLE `budget` ( School_id INT PRIMARY KEY REFERENCES School(School_id), Year INT PRIMARY KEY, Budgeted INT, total_budget_percent_budgeted REAL, Invested INT, total_budget_percent_invested REAL, Budget_invested_percent TEXT ); Sample rows from `budget`: (2, 1999, 4979, 2.0, 2134, 2.0, 42.9), (2, 2000, 3666, 2.0, 5840, 2.0, 159.3), (2, 2001, 6803, 2.0, 8335, 2.0, 122.5), CREATE TABLE `endowment` ( endowment_id INT PRIMARY KEY, School_id INT REFERENCES School(School_id), donator_name TEXT, amount REAL ); Sample rows from `endowment`: (1, 1, Monte Plata, 9.51), (2, 2, San José de Ocoa, 9.83), (3, 3, Distrito Nacional, 9.55), ",
        "output": "SELECT school_name ,  location ,  mascot FROM school"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many tips has Michelle written in April ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN tip as t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  \"April\" AND t2.name  =  \"Michelle\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many songs, on average, are sung by a female artist? ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT AVG(t2.rating) FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t1.gender  =  \"Female\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which status code is the most common of all the bookings? ###filtered_database_schema: CREATE TABLE `Ref_Payment_Methods` ( payment_method_code CHAR(10) PRIMARY KEY, payment_method_description VARCHAR(80) ); Sample rows from `Ref_Payment_Methods`: (American E, credit), (MasterCard, debit), (Visa, Visa), CREATE TABLE `Ref_Service_Types` ( Service_Type_Code CHAR(15) PRIMARY KEY, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255) ); Sample rows from `Ref_Service_Types`: (1, 1, provide photo service), (2, 1, provide dinning service), (3, 1, provide filming service), CREATE TABLE `Addresses` ( Address_ID VARCHAR(100) PRIMARY KEY, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Addresses`: (110, 4753 Dach Highway, Suite 846, Feliciaberg, Florida, None), (124, 391 Vandervort Fall Apt. 446, Apt. 107, West Sherwoodstad, Indiana, None), (148, 809 Izabella Islands, Suite 271, Schadenville, Ohio, None), CREATE TABLE `Products` ( Product_ID VARCHAR(100) PRIMARY KEY, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Products`: (11, photo, 4448536, None, None), (154, film, 2302, None, None), (156, film, 17622723, None, None), CREATE TABLE `Marketing_Regions` ( Marketing_Region_Code CHAR(15) PRIMARY KEY, Marketing_Region_Name VARCHAR(255), Marketing_Region_Descriptrion VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Marketing_Regions`: (CA, Canada, Our target market, None), (CN, China, Our largest market, None), (ES, Spain, , None), CREATE TABLE `Clients` ( Client_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Clients`: (423, 201, branson94@example.net, Clifford, (042)912-3404x5135, VIP), (426, 383, alba04@example.com, Bettye, (604)849-0214, None), (478, 15, westley30@example.net, Reinhold, 1-048-214-4640x64380, None), CREATE TABLE `Drama_Workshop_Groups` ( Workshop_Group_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Currency_Code CHAR(15), Marketing_Region_Code CHAR(15), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Drama_Workshop_Groups`: (136, 383, EU, FR, Amely Cafe, 122-084-8029, amely.ruecker@example.com, None), (140, 180, EU, DE, Veda Film, 793-966-9311x5303, breitenberg.veda@example.com, None), (176, 286, EU, RU, Queen Art, 492-463-5967, quigley.queen@example.org, Good), CREATE TABLE `Performers` ( Performer_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Performers`: (153, 124, Shawna, 664.495.1939, krogahn@example.com, None), (211, 124, Ashley, 893-536-8857, preston45@example.net, None), (313, 39, Oren, 1-952-052-6685x28082, ferry.carolina@example.net, None), CREATE TABLE `Customers` ( Customer_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Customers`: (240, 286, Harold, 624-096-7791, jerde.harmon@example.com, None), (267, 98, Federico, 914-915-7483, johnson27@example.com, None), (304, 369, Samson, 1-463-121-4086x655, dalton75@example.com, None), CREATE TABLE `Stores` ( Store_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Marketing_Region_Code CHAR(15) REFERENCES Marketing_Regions(Marketing_Region_Code), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Stores`: (150, 286, IN, FJA Filming, +65(1)3590790358, fjacobson@example.com, None), (229, 266, CA, Rob Dinning, 1-327-185-9368, rborer@example.org, 5 stars), (231, 230, ES, Adan Dinning, 896-931-9633x869, adan93@example.com, None), CREATE TABLE `Bookings` ( Booking_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Clients(Client_ID), Workshop_Group_ID VARCHAR(100) REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Status_Code CHAR(15), Store_ID INTEGER, Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Bookings`: (1, 938, 140, good, 8, 2016-12-12 10:43:01, 2013-03-10 18:47:05, 1997-11-21 10:07:40, None), (2, 868, 838, stop, 7, 1976-08-20 00:33:08, 2009-07-09 09:18:38, 1976-01-08 07:19:23, None), (3, 735, 176, good, 9, 1975-11-23 06:28:47, 1989-01-05 19:24:45, 1990-03-16 19:38:47, None), CREATE TABLE `Performers_in_Bookings` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Performer_ID INTEGER PRIMARY KEY REFERENCES Performers(Performer_ID) ); Sample rows from `Performers_in_Bookings`: (1, 153), (1, 341), (2, 466), CREATE TABLE `Customer_Orders` ( Order_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Store_ID INTEGER REFERENCES Stores(Store_ID), Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 516, 231, 1994-08-03 12:34:58, 1977-03-11 03:58:19, 1992-07-21 22:11:11, None), (2, 418, 229, 2014-07-10 10:56:01, 1996-08-26 19:19:59, 1998-08-22 17:57:32, None), (3, 712, 229, 1981-06-20 16:29:43, 1980-12-19 05:49:35, 2011-04-13 07:15:35, None), CREATE TABLE `Order_Items` ( Order_Item_ID INTEGER, Order_ID INTEGER REFERENCES Customer_Orders(Order_ID), Product_ID INTEGER REFERENCES Products(Product_ID), Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 3, 233, 1, None), (2, 15, 300, 2, None), (3, 12, 300, 1, None), CREATE TABLE `Invoices` ( Invoice_ID INTEGER, Order_ID INTEGER REFERENCES Bookings(Booking_ID) REFERENCES Customer_Orders(Order_ID), payment_method_code CHAR(15) REFERENCES Ref_Payment_Methods(payment_method_code), Product_ID INTEGER, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER ); Sample rows from `Invoices`: (128, 14, MasterCard, 4, 2, None, 1), (162, 13, MasterCard, 9, 2, None, 9), (164, 7, Visa, 7, 2, None, 1), CREATE TABLE `Services` ( Service_ID INTEGER PRIMARY KEY, Service_Type_Code CHAR(15) REFERENCES Ref_Service_Types(Service_Type_Code), Workshop_Group_ID INTEGER REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Services`: (191, 1, 415, None, film, 58932775.8822, None), (219, 2, 838, None, film, 2704.4719, None), (220, 1, 708, None, dinning, 6888.8306, None), CREATE TABLE `Bookings_Services` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Product_ID INTEGER PRIMARY KEY REFERENCES Services(Service_ID) ); Sample rows from `Bookings_Services`: (1, 396), (1, 779), (4, 191), CREATE TABLE `Invoice_Items` ( Invoice_Item_ID INTEGER, Invoice_ID INTEGER REFERENCES Invoices(Invoice_ID), Order_ID INTEGER REFERENCES Bookings_Services(Order_ID), Order_Item_ID INTEGER REFERENCES Order_Items(Order_Item_ID), Product_ID INTEGER REFERENCES Bookings_Services(Product_ID), Order_Quantity INTEGER, Other_Item_Details VARCHAR(255) ); Sample rows from `Invoice_Items`: (1, 128, 1, 5, 396, 2, None), (2, 162, 4, 6, 191, 6, Good quality), ",
        "output": "SELECT status_code FROM bookings GROUP BY status_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the employee ids and job ids for employees who make less than the lowest earning employee with title MK_MAN? ###filtered_database_schema: CREATE TABLE `regions` ( REGION_ID decimal(5,0) PRIMARY KEY, REGION_NAME varchar(25) ); Sample rows from `regions`: (1, Europe\\r), (2, Americas\\r), (3, Asia\\r), CREATE TABLE `countries` ( COUNTRY_ID varchar(2) PRIMARY KEY, COUNTRY_NAME varchar(40), REGION_ID decimal(10,0) REFERENCES regions(REGION_ID) ); Sample rows from `countries`: (AR, Argentina, 2), (AU, Australia, 3), (BE, Belgium, 1), CREATE TABLE `departments` ( DEPARTMENT_ID decimal(4,0) PRIMARY KEY, DEPARTMENT_NAME varchar(30), MANAGER_ID decimal(6,0), LOCATION_ID decimal(4,0) ); Sample rows from `departments`: (10, Administration, 200, 1700), (20, Marketing, 201, 1800), (30, Purchasing, 114, 1700), CREATE TABLE `jobs` ( JOB_ID varchar(10) PRIMARY KEY, JOB_TITLE varchar(35), MIN_SALARY decimal(6,0), MAX_SALARY decimal(6,0) ); Sample rows from `jobs`: (AD_PRES, President, 20000, 40000), (AD_VP, Administration Vice President, 15000, 30000), (AD_ASST, Administration Assistant, 3000, 6000), CREATE TABLE `employees` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY, FIRST_NAME varchar(20), LAST_NAME varchar(25), EMAIL varchar(25), PHONE_NUMBER varchar(20), HIRE_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), SALARY decimal(8,2), COMMISSION_PCT decimal(2,2), MANAGER_ID decimal(6,0), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `employees`: (100, Steven, King, SKING, 515.123.4567, 1987-06-17, AD_PRES, 24000, 0, 0, 90), (101, Neena, Kochhar, NKOCHHAR, 515.123.4568, 1987-06-18, AD_VP, 17000, 0, 100, 90), (102, Lex, De Haan, LDEHAAN, 515.123.4569, 1987-06-19, AD_VP, 17000, 0, 100, 90), CREATE TABLE `job_history` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY REFERENCES employees(EMPLOYEE_ID), START_DATE date PRIMARY KEY, END_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `job_history`: (102, 1993-01-13, 1998-07-24, IT_PROG, 60), (101, 1989-09-21, 1993-10-27, AC_ACCOUNT, 110), (101, 1993-10-28, 1997-03-15, AC_MGR, 110), CREATE TABLE `locations` ( LOCATION_ID decimal(4,0) PRIMARY KEY, STREET_ADDRESS varchar(40), POSTAL_CODE varchar(12), CITY varchar(30), STATE_PROVINCE varchar(25), COUNTRY_ID varchar(2) REFERENCES countries(COUNTRY_ID) ); Sample rows from `locations`: (1000, 1297 Via Cola di Rie, 989, Roma, , IT), (1100, 93091 Calle della Testa, 10934, Venice, , IT), (1200, 2017 Shinjuku-ku, 1689, Tokyo, Tokyo Prefecture, JP), ",
        "output": "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT MIN(salary) FROM employees WHERE job_id  =  'MK_MAN' )"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of budget codes. ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (BK, Book, excellent), (CV, CV, excellent), (PT, Presentation, very good), CREATE TABLE `Ref_Budget_Codes` ( Budget_Type_Code CHAR(15) PRIMARY KEY, Budget_Type_Description VARCHAR(255) ); Sample rows from `Ref_Budget_Codes`: (GV, Government), (ORG, Organisation), (SF, Self founded), CREATE TABLE `Projects` ( Project_ID INTEGER, Project_Details VARCHAR(255) ); Sample rows from `Projects`: (30, Society Research project), (35, Internet of Things project), (105, Graph Database project), CREATE TABLE `Documents` ( Document_ID INTEGER, Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Project_ID INTEGER REFERENCES Projects(Project_ID), Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Documents`: (29, CV, 30, 2004-08-28 06:59:19, Review on UK files, None, None), (42, BK, 105, 2012-12-27 19:09:18, Review on Canadian files, None, None), (57, CV, 195, 1980-10-22 14:17:11, Review on French files, None, None), CREATE TABLE `Statements` ( Statement_ID INTEGER REFERENCES Documents(Document_ID), Statement_Details VARCHAR(255) ); Sample rows from `Statements`: (57, Open Project), (192, Private Project), CREATE TABLE `Documents_with_Expenses` ( Document_ID INTEGER REFERENCES Documents(Document_ID), Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code), Document_Details VARCHAR(255) ); Sample rows from `Documents_with_Expenses`: (57, GV, government), (192, GV, government), (226, GV, government), CREATE TABLE `Accounts` ( Account_ID INTEGER, Statement_ID INTEGER REFERENCES Statements(Statement_ID), Account_Details VARCHAR(255) ); Sample rows from `Accounts`: (7, 57, 495.063), (61, 57, 930.14), (98, 57, 6035.84), ",
        "output": "SELECT COUNT(*) FROM ref_budget_codes"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the result that is most frequent at music festivals. ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Artist TEXT, Age INT, Famous_Title TEXT, Famous_Release_date TEXT ); Sample rows from `artist`: (1, Gorgoroth, 34, Bergen 1996, November 2007), (2, Ophiolatry, 35, Transmutation, January 21, 2008), (3, Ophiolatry, 22, Antievangelistical Process (re-release), 2009), CREATE TABLE `volume` ( Volume_ID INT PRIMARY KEY, Volume_Issue TEXT, Issue_Date TEXT, Weeks_on_Top REAL, Song TEXT, Artist_ID INT REFERENCES artist(Artist_ID) ); Sample rows from `volume`: (1, 45:14 §, 27 December 1986 - 10 January, 3.0, The Way, 1), (2, 45:15, 17 January, 1.0, Everybody Have Fun Tonight , 2), (3, 45:16, 24 January, 1.0, Walk Like an Egyptian , 1), CREATE TABLE `music_festival` ( ID INT PRIMARY KEY, Music_Festival TEXT, Date_of_ceremony TEXT, Category TEXT, Volume INT REFERENCES volume(Volume_ID), Result TEXT ); Sample rows from `music_festival`: (1, 34th England Academy Prize, 18 February 2011, Best Song, 1, Nominated), (2, 34th Japan Academy Prize, 18 February 2011, Best Lyrics, 2, Nominated), (3, 34th European Academy Prize, 18 February 2011, Best Song, 3, Awarded), ",
        "output": "SELECT result FROM music_festival GROUP BY result ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the names of all distinct medications, ordered in an alphabetical order. ###filtered_database_schema: CREATE TABLE `Physician` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), SSN INTEGER ); Sample rows from `Physician`: (1, John Dorian, Staff Internist, 111111111), (2, Elliot Reid, Attending Physician, 222222222), (3, Christopher Turk, Surgical Attending Physician, 333333333), CREATE TABLE `Department` ( DepartmentID INTEGER, Name VARCHAR(30), Head INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Department`: (1, General Medicine, 4), (2, Surgery, 7), (3, Psychiatry, 9), CREATE TABLE `Affiliated_With` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID), PrimaryAffiliation BOOLEAN ); Sample rows from `Affiliated_With`: (1, 1, 1), (2, 1, 1), (3, 1, 0), CREATE TABLE `Procedures` ( Code INTEGER, Name VARCHAR(30), Cost REAL ); Sample rows from `Procedures`: (1, Reverse Rhinopodoplasty, 1500.0), (2, Obtuse Pyloric Recombobulation, 3750.0), (3, Folded Demiophtalmectomy, 4500.0), CREATE TABLE `Trained_In` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code), CertificationDate DATETIME, CertificationExpires DATETIME ); Sample rows from `Trained_In`: (3, 1, 2008-01-01, 2008-12-31), (3, 2, 2008-01-01, 2008-12-31), (3, 5, 2008-01-01, 2008-12-31), CREATE TABLE `Patient` ( SSN INTEGER, Name VARCHAR(30), Address VARCHAR(30), Phone VARCHAR(30), InsuranceID INTEGER, PCP INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Patient`: (100000001, John Smith, 42 Foobar Lane, 555-0256, 68476213, 1), (100000002, Grace Ritchie, 37 Snafu Drive, 555-0512, 36546321, 2), (100000003, Random J. Patient, 101 Omgbbq Street, 555-1204, 65465421, 2), CREATE TABLE `Nurse` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), Registered BOOLEAN, SSN INTEGER ); Sample rows from `Nurse`: (101, Carla Espinosa, Head Nurse, 1, 111111110), (102, Laverne Roberts, Nurse, 1, 222222220), (103, Paul Flowers, Nurse, 0, 333333330), CREATE TABLE `Appointment` ( AppointmentID INTEGER, Patient INTEGER REFERENCES Patient(SSN), PrepNurse INTEGER REFERENCES Nurse(EmployeeID), Physician INTEGER REFERENCES Physician(EmployeeID), Start DATETIME, End DATETIME, ExaminationRoom TEXT ); Sample rows from `Appointment`: (13216584, 100000001, 101, 1, 2008-04-24 10:00, 2008-04-24 11:00, A), (26548913, 100000002, 101, 2, 2008-04-24 10:00, 2008-04-24 11:00, B), (36549879, 100000001, 102, 1, 2008-04-25 10:00, 2008-04-25 11:00, A), CREATE TABLE `Medication` ( Code INTEGER, Name VARCHAR(30), Brand VARCHAR(30), Description VARCHAR(30) ); Sample rows from `Medication`: (1, Procrastin-X, X, N/A), (2, Thesisin, Foo Labs, N/A), (3, Awakin, Bar Laboratories, N/A), CREATE TABLE `Prescribes` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Medication INTEGER PRIMARY KEY REFERENCES Medication(Code), Date DATETIME PRIMARY KEY, Appointment INTEGER REFERENCES Appointment(AppointmentID), Dose VARCHAR(30) ); Sample rows from `Prescribes`: (1, 100000001, 1, 2008-04-24 10:47, 13216584, 5), (9, 100000004, 2, 2008-04-27 10:53, 86213939, 10), (9, 100000004, 2, 2008-04-30 16:53, None, 5), CREATE TABLE `Block` ( BlockFloor INTEGER PRIMARY KEY, BlockCode INTEGER PRIMARY KEY ); Sample rows from `Block`: (1, 1), (1, 2), (1, 3), CREATE TABLE `Room` ( RoomNumber INTEGER, RoomType VARCHAR(30), BlockFloor INTEGER REFERENCES Block(BlockFloor), BlockCode INTEGER REFERENCES Block(BlockCode), Unavailable BOOLEAN ); Sample rows from `Room`: (101, Single, 1, 1, 0), (102, Single, 1, 1, 0), (103, Single, 1, 1, 0), CREATE TABLE `On_Call` ( Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID), BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor), BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode), OnCallStart DATETIME PRIMARY KEY, OnCallEnd DATETIME PRIMARY KEY ); Sample rows from `On_Call`: (101, 1, 1, 2008-11-04 11:00, 2008-11-04 19:00), (101, 1, 2, 2008-11-04 11:00, 2008-11-04 19:00), (102, 1, 3, 2008-11-04 11:00, 2008-11-04 19:00), CREATE TABLE `Stay` ( StayID INTEGER, Patient INTEGER REFERENCES Patient(SSN), Room INTEGER REFERENCES Room(RoomNumber), StayStart DATETIME, StayEnd DATETIME ); Sample rows from `Stay`: (3215, 100000001, 111, 2008-05-01, 2008-05-04), (3216, 100000003, 123, 2008-05-03, 2008-05-14), (3217, 100000004, 112, 2008-05-02, 2008-05-03), CREATE TABLE `Undergoes` ( Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code), Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID), DateUndergoes DATETIME PRIMARY KEY, Physician INTEGER REFERENCES Physician(EmployeeID), AssistingNurse INTEGER REFERENCES Nurse(EmployeeID) ); Sample rows from `Undergoes`: (100000001, 6, 3215, 2008-05-02, 3, 101), (100000001, 2, 3215, 2008-05-03, 7, 101), (100000004, 1, 3217, 2008-05-07, 3, 102), ",
        "output": "SELECT DISTINCT name FROM medication ORDER BY name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: how many rivers in idaho ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT COUNT(river_name) FROM river WHERE traverse  =  \"idaho\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the description of the color for most products? ###filtered_database_schema: CREATE TABLE `Ref_Characteristic_Types` ( characteristic_type_code VARCHAR(15) PRIMARY KEY, characteristic_type_description VARCHAR(80) ); Sample rows from `Ref_Characteristic_Types`: (Grade, Grade), (Purity, Purity), CREATE TABLE `Ref_Colors` ( color_code VARCHAR(15) PRIMARY KEY, color_description VARCHAR(80) ); Sample rows from `Ref_Colors`: (9, red), (5, green), (1, yellow), CREATE TABLE `Ref_Product_Categories` ( product_category_code VARCHAR(15) PRIMARY KEY, product_category_description VARCHAR(80), unit_of_measure VARCHAR(20) ); Sample rows from `Ref_Product_Categories`: (Herbs, Herbs, Handful ), (Seeds, Seeds, Weight - pound,kilo.), (Spices, Spices, Weight - pound,kilo.), CREATE TABLE `Characteristics` ( characteristic_id INTEGER, characteristic_type_code VARCHAR(15) REFERENCES Ref_Characteristic_Types(characteristic_type_code), characteristic_data_type VARCHAR(10), characteristic_name VARCHAR(80), other_characteristic_details VARCHAR(255) ); Sample rows from `Characteristics`: (1, Grade, numquam, slow, None), (2, Grade, doloribus, fast, None), (3, Purity, rem, warm, None), CREATE TABLE `Products` ( product_id INTEGER, color_code VARCHAR(15) REFERENCES Ref_Colors(color_code), product_category_code VARCHAR(15) REFERENCES Ref_Product_Categories(product_category_code), product_name VARCHAR(80), typical_buying_price VARCHAR(20), typical_selling_price VARCHAR(20), product_description VARCHAR(255), other_product_details VARCHAR(255) ); Sample rows from `Products`: (1, 4, Spices, cumin, , 2878.3, et, None), (2, 2, Spices, peper, 352447.2874677, 1892070.2803543, rerum, None), (3, 9, Herbs, basil, 503.8431967, 0.1859512, officia, None), CREATE TABLE `Product_Characteristics` ( product_id INTEGER REFERENCES Products(product_id), characteristic_id INTEGER REFERENCES Characteristics(characteristic_id), product_characteristic_value VARCHAR(50) ); Sample rows from `Product_Characteristics`: (13, 13, low), (11, 2, low), (5, 15, low), ",
        "output": "SELECT t2.color_description FROM products as t1 JOIN ref_colors as t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What city does the employee who helps the customer with postal code 70174 live in? ###filtered_database_schema: CREATE TABLE `Album` ( AlbumId INTEGER, Title varchar(160), ArtistId INTEGER PRIMARY KEY REFERENCES Artist(ArtistId) ); Sample rows from `Album`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `Artist` ( ArtistId INTEGER, Name varchar(120) ); Sample rows from `Artist`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `Customer` ( CustomerId INTEGER, FirstName varchar(40), LastName varchar(20), Company varchar(80), Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60), SupportRepId INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId) ); Sample rows from `Customer`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `Employee` ( EmployeeId INTEGER, LastName varchar(20), FirstName varchar(20), Title varchar(30), ReportsTo INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId), BirthDate datetime, HireDate datetime, Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60) ); Sample rows from `Employee`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `Genre` ( GenreId INTEGER, Name varchar(120) ); Sample rows from `Genre`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `Invoice` ( InvoiceId INTEGER, CustomerId INTEGER PRIMARY KEY REFERENCES Customer(CustomerId), InvoiceDate datetime, BillingAddress varchar(70), BillingCity varchar(40), BillingState varchar(40), BillingCountry varchar(40), BillingPostalCode varchar(10), Total decimal(10,2) ); Sample rows from `Invoice`: (1, 2, 2009-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2009-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2009-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `InvoiceLine` ( InvoiceLineId INTEGER, InvoiceId INTEGER PRIMARY KEY REFERENCES Invoice(InvoiceId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId), UnitPrice decimal(10,2), Quantity INTEGER ); Sample rows from `InvoiceLine`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `MediaType` ( MediaTypeId INTEGER, Name varchar(120) ); Sample rows from `MediaType`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `Playlist` ( PlaylistId INTEGER, Name varchar(120) ); Sample rows from `Playlist`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `PlaylistTrack` ( PlaylistId INTEGER PRIMARY KEY REFERENCES Playlist(PlaylistId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId) ); Sample rows from `PlaylistTrack`: (1, 1), (8, 1), (17, 1), CREATE TABLE `Track` ( TrackId INTEGER, Name varchar(200), AlbumId INTEGER PRIMARY KEY REFERENCES Album(AlbumId), MediaTypeId INTEGER PRIMARY KEY REFERENCES MediaType(MediaTypeId), GenreId INTEGER PRIMARY KEY REFERENCES Genre(GenreId), Composer varchar(220), Milliseconds INTEGER, Bytes INTEGER, UnitPrice decimal(10,2) ); Sample rows from `Track`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), ",
        "output": "SELECT t2.city FROM customer as t1 JOIN employee as t2 ON t1.supportrepid  =  t2.employeeid WHERE t1.postalcode  =  \"70174\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all the stores in the largest district by population? ###filtered_database_schema: CREATE TABLE `product` ( product_id INT PRIMARY KEY, product TEXT, dimensions TEXT, dpi REAL, pages_per_minute_color REAL, max_page_size TEXT, interface TEXT ); Sample rows from `product`: (1, Fujitsu fi-6130 A4 Series Scanner, 301 x 160 x 158, 600.0, 30.0, A4, USB 2.0), (2, Plustek MobileOffice D28 Corporate, 303 x 94 x 60, 600.0, 28.0, A4, USB 2.0), (3, Xerox Travel Scanner 100, 289 x 51 x 38, 600.0, 4.0, A4, USB 2.0), CREATE TABLE `store` ( Store_ID INT PRIMARY KEY, Store_Name TEXT, Type TEXT, Area_size REAL, Number_of_product_category REAL, Ranking INT ); Sample rows from `store`: (1, Miramichi, City Mall, 179.84, 17811.0, 2), (2, Neguac, Village Store, 26.69, 1678.0, 3), (3, Rogersville, Village Store, 7.23, 1170.0, 1), CREATE TABLE `district` ( District_ID INT PRIMARY KEY, District_name TEXT, Headquartered_City TEXT, City_Population REAL, City_Area REAL ); Sample rows from `district`: (1, Attock District, Attock City, 94620.0, 20.0), (2, Bahawalnagar District, Bahawalnagar City, 134936.0, 13.0), (3, Bahawalpur District, Bahawalpur City, 530438.0, 38.0), CREATE TABLE `store_product` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), Product_ID INT PRIMARY KEY REFERENCES product(Product_ID) ); Sample rows from `store_product`: (1, 1), (1, 2), (1, 3), CREATE TABLE `store_district` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), District_ID INT REFERENCES district(District_ID) ); Sample rows from `store_district`: (1, 15), (2, 15), (3, 11), ",
        "output": "SELECT t1.store_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List prominent scholars in syntactic parsing ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: give me a good restaurant in the bay area ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the course title of the prerequisite of course Mobile Computing? ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT title FROM course WHERE course_id IN (SELECT t1.prereq_id FROM prereq as t1 JOIN course as t2 ON t1.course_id  =  t2.course_id WHERE t2.title  =  'Mobile Computing')"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are all the distinct asset models? ###filtered_database_schema: CREATE TABLE `Third_Party_Companies` ( company_id INTEGER, company_type VARCHAR(5), company_name VARCHAR(255), company_address VARCHAR(255), other_company_details VARCHAR(255) ); Sample rows from `Third_Party_Companies`: (1, Maintenance Contractor, Langworth-Funk, 615 Jacobs Mews, Uganda), (2, Maintenance Contractor, McDermott Group, 873 Conrad Creek Apt. 286, China), (3, Maintenance Contractor, Schuppe-Carroll, 066 Bechtelar Ridge, United Arab Emirates), CREATE TABLE `Maintenance_Contracts` ( maintenance_contract_id INTEGER, maintenance_contract_company_id INTEGER REFERENCES Third_Party_Companies(company_id), contract_start_date DATETIME, contract_end_date DATETIME, other_contract_details VARCHAR(255) ); Sample rows from `Maintenance_Contracts`: (1, 15, 2017-09-13 11:51:29, 2018-03-16 21:21:50, None), (2, 9, 2017-12-18 11:43:16, 2018-03-22 06:00:37, None), (3, 11, 2017-05-06 02:32:19, 2018-03-20 14:02:54, None), CREATE TABLE `Parts` ( part_id INTEGER, part_name VARCHAR(255), chargeable_yn VARCHAR(1), chargeable_amount VARCHAR(20), other_part_details VARCHAR(255) ); Sample rows from `Parts`: (1, top, 0, 4, None), (2, middle, 1, 9, None), (3, package, 1, 9, None), CREATE TABLE `Skills` ( skill_id INTEGER, skill_code VARCHAR(20), skill_description VARCHAR(255) ); Sample rows from `Skills`: (1, ELEC, Electrical), (2, MECH, Mechanical), (3, TV, TV, Video), CREATE TABLE `Staff` ( staff_id INTEGER, staff_name VARCHAR(255), gender VARCHAR(1), other_staff_details VARCHAR(255) ); Sample rows from `Staff`: (1, Audreanne, 1, Manager), (2, Berneice, 1, Manager), (3, Helena, 1, None), CREATE TABLE `Assets` ( asset_id INTEGER, maintenance_contract_id INTEGER REFERENCES Maintenance_Contracts(maintenance_contract_id), supplier_company_id INTEGER REFERENCES Third_Party_Companies(company_id), asset_details VARCHAR(255), asset_make VARCHAR(20), asset_model VARCHAR(20), asset_acquired_date DATETIME, asset_disposed_date DATETIME, other_asset_details VARCHAR(255) ); Sample rows from `Assets`: (1, 2, 2, dell laptop1, PT, 58 ub, 2017-12-25 00:31:27, 2018-03-14 10:50:00, None), (2, 14, 1, dell laptop2, IN, 35 xt, 2018-01-27 00:59:46, 2018-03-20 04:24:09, None), (3, 7, 2, dell laptop3, IT, 63 ok, 2017-09-07 08:13:15, 2018-03-08 20:50:40, Bad condition), CREATE TABLE `Asset_Parts` ( asset_id INTEGER REFERENCES Assets(asset_id), part_id INTEGER REFERENCES Parts(part_id) ); Sample rows from `Asset_Parts`: (5, 3), (3, 3), (10, 1), CREATE TABLE `Maintenance_Engineers` ( engineer_id INTEGER, company_id INTEGER REFERENCES Third_Party_Companies(company_id), first_name VARCHAR(50), last_name VARCHAR(50), other_details VARCHAR(255) ); Sample rows from `Maintenance_Engineers`: (1, 14, Etha, Reinger, Skilled), (2, 2, Clemens, Orn, None), (3, 6, Samanta, Hauck, None), CREATE TABLE `Engineer_Skills` ( engineer_id INTEGER REFERENCES Maintenance_Engineers(engineer_id), skill_id INTEGER REFERENCES Skills(skill_id) ); Sample rows from `Engineer_Skills`: (10, 2), (10, 1), (15, 1), CREATE TABLE `Fault_Log` ( fault_log_entry_id INTEGER, asset_id INTEGER REFERENCES Assets(asset_id), recorded_by_staff_id INTEGER REFERENCES Staff(staff_id), fault_log_entry_datetime DATETIME, fault_description VARCHAR(255), other_fault_details VARCHAR(255) ); Sample rows from `Fault_Log`: (1, 3, 14, 2018-03-21 04:25:00, system error, None), (2, 7, 4, 2018-03-13 09:43:05, system error, None), (3, 6, 9, 2018-02-24 09:28:20, system error, None), CREATE TABLE `Engineer_Visits` ( engineer_visit_id INTEGER, contact_staff_id INTEGER REFERENCES Staff(staff_id), engineer_id INTEGER REFERENCES Maintenance_Engineers(engineer_id), fault_log_entry_id INTEGER REFERENCES Fault_Log(fault_log_entry_id), fault_status VARCHAR(10), visit_start_datetime DATETIME, visit_end_datetime DATETIME, other_visit_details VARCHAR(255) ); Sample rows from `Engineer_Visits`: (1, 8, 8, 13, Waiting, 1978-10-12 23:14:40, 1988-01-07 06:41:51, None), (2, 7, 15, 13, Return, 1980-05-02 23:31:18, 1990-08-30 22:44:16, None), (3, 7, 15, 4, Waiting, 2010-02-23 18:16:23, 1982-05-13 02:08:41, None), CREATE TABLE `Part_Faults` ( part_fault_id INTEGER, part_id INTEGER REFERENCES Parts(part_id), fault_short_name VARCHAR(20), fault_description VARCHAR(255), other_fault_details VARCHAR(255) ); Sample rows from `Part_Faults`: (1, 1, PW, Package Wrong, None), (2, 1, PW, Package Wrong, None), (3, 3, TW, Top Parts Wrong, None), CREATE TABLE `Fault_Log_Parts` ( fault_log_entry_id INTEGER REFERENCES Fault_Log(fault_log_entry_id), part_fault_id INTEGER REFERENCES Part_Faults(part_fault_id), fault_status VARCHAR(10) ); Sample rows from `Fault_Log_Parts`: (12, 3, Reported), (7, 4, Reported), (1, 9, Return), CREATE TABLE `Skills_Required_To_Fix` ( part_fault_id INTEGER REFERENCES Part_Faults(part_fault_id), skill_id INTEGER REFERENCES Skills(skill_id) ); Sample rows from `Skills_Required_To_Fix`: (3, 2), (12, 3), (6, 1), ",
        "output": "SELECT DISTINCT asset_model FROM assets"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name and category of the most expensive product. ###filtered_database_schema: CREATE TABLE `Staff` ( staff_id INTEGER, gender VARCHAR(1), first_name VARCHAR(80), last_name VARCHAR(80), email_address VARCHAR(255), phone_number VARCHAR(80) ); Sample rows from `Staff`: (114, 0, Ward, Boehm, marcelle.ritchie@example.com, (379)551-0838x146), (115, 1, Lucie, Lowe, ohintz@example.org, 142-311-6503x206), (116, 0, Dagmar, Erdman, wrau@example.com, 345-656-5571), CREATE TABLE `Customers` ( customer_id INTEGER, customer_type_code VARCHAR(20), address_line_1 VARCHAR(80), address_line_2 VARCHAR(80), town_city VARCHAR(80), state VARCHAR(80), email_address VARCHAR(255), phone_number VARCHAR(80) ); Sample rows from `Customers`: (113, Good Credit Rating, 144 Legros Landing, Apt. 551, Maryamport, Kansas, hsteuber@example.org, 06963347450), (114, Good Credit Rating, 039 Jedidiah Estate Suite 537, Apt. 245, Sauerberg, Hawaii, cayla.satterfield@example.net, 470-803-0244), (115, Good Credit Rating, 92189 Gulgowski Ranch Apt. 683, Apt. 828, Tyreekhaven, Tennessee, vida86@example.com, 997.698.4779x882), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, product_category_code VARCHAR(20), date_product_first_available DATETIME, date_product_discontinued DATETIME, product_name VARCHAR(80), product_description VARCHAR(255), product_price DECIMAL(19,4) ); Sample rows from `Products`: (117, 4, Food, 1988-09-29 17:54:50, 1987-12-20 13:46:16, Chocolate, Handmade chocolate, 2.88), (118, 3, Book, 1974-06-25 12:26:47, 1991-08-20 05:22:31, The Great Gatsby, American novel, 35), (119, 8, Hardware, 1994-12-18 15:13:19, 1997-07-02 18:26:16, Keyboard, Designed for games, 109.99), CREATE TABLE `Complaints` ( complaint_id INTEGER, product_id INTEGER REFERENCES Products(product_id), customer_id INTEGER REFERENCES Customers(customer_id), complaint_outcome_code VARCHAR(20), complaint_status_code VARCHAR(20), complaint_type_code VARCHAR(20), date_complaint_raised DATETIME, date_complaint_closed DATETIME, staff_id INTEGER REFERENCES Staff(staff_id) ); Sample rows from `Complaints`: (1, 117, 120, OK, Closed, Product Failure, 2002-07-18 10:59:35, 1976-04-19 11:03:06, 114), (2, 118, 113, OK, New, Product Unusable, 1973-02-10 22:55:56, 2013-09-14 02:59:10, 120), (3, 119, 114, OK, New, Product Unusable, 2006-10-29 07:08:46, 1995-09-11 14:48:46, 115), ",
        "output": "SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the titles of all albums that start with A in alphabetical order? ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the maximum and minimum resolution of all songs that are approximately 3 minutes long? ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT MAX(t2.resolution) ,  MIN(t2.resolution) FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id WHERE t1.duration LIKE \"3:%\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which tourist attraction is associated with the photo \"game1\"? Return its name. ###filtered_database_schema: CREATE TABLE `Ref_Hotel_Star_Ratings` ( star_rating_code CHAR(15) PRIMARY KEY, star_rating_description VARCHAR(80) ); Sample rows from `Ref_Hotel_Star_Ratings`: (1, star), (2, star), (3, star), CREATE TABLE `Locations` ( Location_ID INTEGER, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Locations`: (333, Astro Orbiter, 660 Shea Crescent, None), (368, African Animals, 254 Ottilie Junction, None), (417, American Adventure, 53815 Sawayn Tunnel Apt. 297, None), CREATE TABLE `Ref_Attraction_Types` ( Attraction_Type_Code CHAR(15) PRIMARY KEY, Attraction_Type_Description VARCHAR(255) ); Sample rows from `Ref_Attraction_Types`: (2, park), (3, garden), (5, gallery), CREATE TABLE `Visitors` ( Tourist_ID INTEGER PRIMARY KEY, Tourist_Details VARCHAR(255) ); Sample rows from `Visitors`: (164, Toney), (189, Graciela), (204, Vincent), CREATE TABLE `Features` ( Feature_ID INTEGER, Feature_Details VARCHAR(255) ); Sample rows from `Features`: (523, cafe), (528, park), (543, garden), CREATE TABLE `Hotels` ( hotel_id INTEGER, star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code), pets_allowed_yn CHAR(1), price_range REAL, other_hotel_details VARCHAR(255) ); Sample rows from `Hotels`: (123, 5, 1, 2914989.571, None), (144, 4, , , None), (172, 5, , 17012.682586009, None), CREATE TABLE `Tourist_Attractions` ( Tourist_Attraction_ID INTEGER, Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code), Location_ID INTEGER REFERENCES Locations(Location_ID), How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Tourist_Attractions`: (2113, 2, 579, bus, art museum, None, None, None), (2701, 6, 417, walk, UK gallery, None, None, None), (5076, 2, 868, shuttle, flying elephant, None, None, None), CREATE TABLE `Street_Markets` ( Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Market_Details VARCHAR(255) ); Sample rows from `Street_Markets`: (6852, Broadway), (7067, Fish Farm Market), CREATE TABLE `Shops` ( Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Shop_Details VARCHAR(255) ); Sample rows from `Shops`: (8429, soup), (8449, coffee), (8698, Flower), CREATE TABLE `Museums` ( Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Museum_Details VARCHAR(255) ); Sample rows from `Museums`: (2113, Yale Center for British Art), (2701, The Metropolitan Museum of Art), (5076, MoMA), CREATE TABLE `Royal_Family` ( Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Royal_Family_Details VARCHAR(255) ); Sample rows from `Royal_Family`: (9561, None), (9919, None), CREATE TABLE `Theme_Parks` ( Theme_Park_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Theme_Park_Details VARCHAR(255) ); Sample rows from `Theme_Parks`: (5265, Disney), (6476, Sea World), (6523, Universal Studios), CREATE TABLE `Visits` ( Visit_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID), Visit_Date DATETIME, Visit_Details VARCHAR(40) ); Sample rows from `Visits`: (183, 6653, 377, 2004-08-21 03:06:14, ), (268, 5076, 204, 2013-08-06 05:35:51, ), (273, 9360, 211, 2013-10-27 09:56:08, ), CREATE TABLE `Photos` ( Photo_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Photos`: (211, 8449, game1, None, 702, None), (280, 7067, game2, None, 762, None), (303, 5076, game3, None, 392, None), CREATE TABLE `Staff` ( Staff_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(40), Other_Details VARCHAR(255) ); Sample rows from `Staff`: (170, 6476, Whitney, None), (219, 6476, Kaela, None), (237, 7067, Eunice, None), CREATE TABLE `Tourist_Attraction_Features` ( Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID) ); Sample rows from `Tourist_Attraction_Features`: (5076, 528), (5076, 681), (5265, 523), ",
        "output": "SELECT t2.name FROM photos as t1 JOIN tourist_attractions as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id WHERE t1.name  =  \"game1\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number and averaged salary of all instructors who are in the department with the highest budget. ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT AVG(t1.salary) ,  COUNT(*) FROM instructor as t1 JOIN department as t2 ON t1.dept_name  =  t2.dept_name ORDER BY t2.budget DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the phones and emails of workshop groups in which services are performed? ###filtered_database_schema: CREATE TABLE `Ref_Payment_Methods` ( payment_method_code CHAR(10) PRIMARY KEY, payment_method_description VARCHAR(80) ); Sample rows from `Ref_Payment_Methods`: (American E, credit), (MasterCard, debit), (Visa, Visa), CREATE TABLE `Ref_Service_Types` ( Service_Type_Code CHAR(15) PRIMARY KEY, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255) ); Sample rows from `Ref_Service_Types`: (1, 1, provide photo service), (2, 1, provide dinning service), (3, 1, provide filming service), CREATE TABLE `Addresses` ( Address_ID VARCHAR(100) PRIMARY KEY, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Addresses`: (110, 4753 Dach Highway, Suite 846, Feliciaberg, Florida, None), (124, 391 Vandervort Fall Apt. 446, Apt. 107, West Sherwoodstad, Indiana, None), (148, 809 Izabella Islands, Suite 271, Schadenville, Ohio, None), CREATE TABLE `Products` ( Product_ID VARCHAR(100) PRIMARY KEY, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Products`: (11, photo, 4448536, None, None), (154, film, 2302, None, None), (156, film, 17622723, None, None), CREATE TABLE `Marketing_Regions` ( Marketing_Region_Code CHAR(15) PRIMARY KEY, Marketing_Region_Name VARCHAR(255), Marketing_Region_Descriptrion VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Marketing_Regions`: (CA, Canada, Our target market, None), (CN, China, Our largest market, None), (ES, Spain, , None), CREATE TABLE `Clients` ( Client_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Clients`: (423, 201, branson94@example.net, Clifford, (042)912-3404x5135, VIP), (426, 383, alba04@example.com, Bettye, (604)849-0214, None), (478, 15, westley30@example.net, Reinhold, 1-048-214-4640x64380, None), CREATE TABLE `Drama_Workshop_Groups` ( Workshop_Group_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Currency_Code CHAR(15), Marketing_Region_Code CHAR(15), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Drama_Workshop_Groups`: (136, 383, EU, FR, Amely Cafe, 122-084-8029, amely.ruecker@example.com, None), (140, 180, EU, DE, Veda Film, 793-966-9311x5303, breitenberg.veda@example.com, None), (176, 286, EU, RU, Queen Art, 492-463-5967, quigley.queen@example.org, Good), CREATE TABLE `Performers` ( Performer_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Performers`: (153, 124, Shawna, 664.495.1939, krogahn@example.com, None), (211, 124, Ashley, 893-536-8857, preston45@example.net, None), (313, 39, Oren, 1-952-052-6685x28082, ferry.carolina@example.net, None), CREATE TABLE `Customers` ( Customer_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Customers`: (240, 286, Harold, 624-096-7791, jerde.harmon@example.com, None), (267, 98, Federico, 914-915-7483, johnson27@example.com, None), (304, 369, Samson, 1-463-121-4086x655, dalton75@example.com, None), CREATE TABLE `Stores` ( Store_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Marketing_Region_Code CHAR(15) REFERENCES Marketing_Regions(Marketing_Region_Code), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Stores`: (150, 286, IN, FJA Filming, +65(1)3590790358, fjacobson@example.com, None), (229, 266, CA, Rob Dinning, 1-327-185-9368, rborer@example.org, 5 stars), (231, 230, ES, Adan Dinning, 896-931-9633x869, adan93@example.com, None), CREATE TABLE `Bookings` ( Booking_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Clients(Client_ID), Workshop_Group_ID VARCHAR(100) REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Status_Code CHAR(15), Store_ID INTEGER, Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Bookings`: (1, 938, 140, good, 8, 2016-12-12 10:43:01, 2013-03-10 18:47:05, 1997-11-21 10:07:40, None), (2, 868, 838, stop, 7, 1976-08-20 00:33:08, 2009-07-09 09:18:38, 1976-01-08 07:19:23, None), (3, 735, 176, good, 9, 1975-11-23 06:28:47, 1989-01-05 19:24:45, 1990-03-16 19:38:47, None), CREATE TABLE `Performers_in_Bookings` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Performer_ID INTEGER PRIMARY KEY REFERENCES Performers(Performer_ID) ); Sample rows from `Performers_in_Bookings`: (1, 153), (1, 341), (2, 466), CREATE TABLE `Customer_Orders` ( Order_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Store_ID INTEGER REFERENCES Stores(Store_ID), Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 516, 231, 1994-08-03 12:34:58, 1977-03-11 03:58:19, 1992-07-21 22:11:11, None), (2, 418, 229, 2014-07-10 10:56:01, 1996-08-26 19:19:59, 1998-08-22 17:57:32, None), (3, 712, 229, 1981-06-20 16:29:43, 1980-12-19 05:49:35, 2011-04-13 07:15:35, None), CREATE TABLE `Order_Items` ( Order_Item_ID INTEGER, Order_ID INTEGER REFERENCES Customer_Orders(Order_ID), Product_ID INTEGER REFERENCES Products(Product_ID), Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 3, 233, 1, None), (2, 15, 300, 2, None), (3, 12, 300, 1, None), CREATE TABLE `Invoices` ( Invoice_ID INTEGER, Order_ID INTEGER REFERENCES Bookings(Booking_ID) REFERENCES Customer_Orders(Order_ID), payment_method_code CHAR(15) REFERENCES Ref_Payment_Methods(payment_method_code), Product_ID INTEGER, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER ); Sample rows from `Invoices`: (128, 14, MasterCard, 4, 2, None, 1), (162, 13, MasterCard, 9, 2, None, 9), (164, 7, Visa, 7, 2, None, 1), CREATE TABLE `Services` ( Service_ID INTEGER PRIMARY KEY, Service_Type_Code CHAR(15) REFERENCES Ref_Service_Types(Service_Type_Code), Workshop_Group_ID INTEGER REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Services`: (191, 1, 415, None, film, 58932775.8822, None), (219, 2, 838, None, film, 2704.4719, None), (220, 1, 708, None, dinning, 6888.8306, None), CREATE TABLE `Bookings_Services` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Product_ID INTEGER PRIMARY KEY REFERENCES Services(Service_ID) ); Sample rows from `Bookings_Services`: (1, 396), (1, 779), (4, 191), CREATE TABLE `Invoice_Items` ( Invoice_Item_ID INTEGER, Invoice_ID INTEGER REFERENCES Invoices(Invoice_ID), Order_ID INTEGER REFERENCES Bookings_Services(Order_ID), Order_Item_ID INTEGER REFERENCES Order_Items(Order_Item_ID), Product_ID INTEGER REFERENCES Bookings_Services(Product_ID), Order_Quantity INTEGER, Other_Item_Details VARCHAR(255) ); Sample rows from `Invoice_Items`: (1, 128, 1, 5, 396, 2, None), (2, 162, 4, 6, 191, 6, Good quality), ",
        "output": "SELECT t1.store_phone ,  t1.store_email_address FROM drama_workshop_groups as t1 JOIN services as t2 ON t1.workshop_group_id  =  t2.workshop_group_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the distinct name of customers whose order status is Pending, in the order of customer id. ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 28481 Crist Circle East Burdettestad, IA 21232), (2, 0292 Mitchel Pike Port Abefurt, IA 84402-4249), (3, 4062 Mante Place West Lindsey, DE 76199-8015), CREATE TABLE `Staff` ( staff_id INTEGER, staff_gender VARCHAR(1), staff_name VARCHAR(80) ); Sample rows from `Staff`: (1, 1, Tom), (2, 1, Malika), (3, 1, Katelynn), CREATE TABLE `Suppliers` ( supplier_id INTEGER, supplier_name VARCHAR(80), supplier_phone VARCHAR(80) ); Sample rows from `Suppliers`: (1, Lidl, (692)009-5928), (2, AB Store, 1-483-283-4742), (3, Tesco, 287-071-1153x254), CREATE TABLE `Department_Store_Chain` ( dept_store_chain_id INTEGER, dept_store_chain_name VARCHAR(80) ); Sample rows from `Department_Store_Chain`: (1, South), (2, West), (3, East), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method_code VARCHAR(10), customer_code VARCHAR(20), customer_name VARCHAR(80), customer_address VARCHAR(255), customer_phone VARCHAR(80), customer_email VARCHAR(80) ); Sample rows from `Customers`: (1, Credit Card, 401, Ahmed, 75099 Tremblay Port Apt. 163 South Norrisland, SC 80546, 254-072-4068x33935, margarett.vonrueden@example.com), (2, Credit Card, 665, Chauncey, 8408 Lindsay Court East Dasiabury, IL 72656-3552, +41(8)1897032009, stiedemann.sigrid@example.com), (3, Direct Debit, 844, Lukas, 7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871, 197-417-3557, joelle.monahan@example.com), CREATE TABLE `Products` ( product_id INTEGER, product_type_code VARCHAR(10), product_name VARCHAR(80), product_price DECIMAL(19,4) ); Sample rows from `Products`: (1, Clothes, red jeans, 734.73), (2, Clothes, yellow jeans, 687.23), (3, Clothes, black jeans, 695.16), CREATE TABLE `Supplier_Addresses` ( supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Supplier_Addresses`: (4, 5, 2016-09-22 16:41:31, 2018-03-14 20:06:37), (3, 9, 2014-11-07 19:18:49, 2018-03-16 16:39:58), (3, 2, 2008-11-22 12:01:25, 2018-03-02 19:50:22), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 9, 2017-12-11 05:00:22, 2018-03-20 20:52:34), (1, 6, 2017-10-07 23:00:26, 2018-02-28 14:53:52), (10, 8, 2017-04-04 20:00:27, 2018-02-27 20:08:33), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status_code VARCHAR(10), order_date DATETIME ); Sample rows from `Customer_Orders`: (1, 12, Completed, 2018-02-10 15:44:48), (2, 4, New, 2018-01-31 17:49:18), (3, 1, PartFilled, 2018-02-26 12:39:33), CREATE TABLE `Department_Stores` ( dept_store_id INTEGER, dept_store_chain_id INTEGER REFERENCES Department_Store_Chain(dept_store_chain_id), store_name VARCHAR(80), store_address VARCHAR(255), store_phone VARCHAR(80), store_email VARCHAR(80) ); Sample rows from `Department_Stores`: (1, 1, store_name, 01290 Jeremie Parkway Suite 753 North Arielle, MS 51249, (948)944-5099x2027, bmaggio@example.com), (2, 3, store_name, 082 Purdy Expressway O'Connellshire, IL 31732, 877-917-5029, larissa10@example.org), (3, 4, store_name, 994 Travis Plains North Wadeton, WV 27575-3951, 1-216-312-0375, alexandro.mcclure@example.net), CREATE TABLE `Departments` ( department_id INTEGER, dept_store_id INTEGER REFERENCES Department_Stores(dept_store_id), department_name VARCHAR(80) ); Sample rows from `Departments`: (1, 5, human resource), (2, 11, purchasing), (3, 4, marketing), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id) ); Sample rows from `Order_Items`: (1, 9, 7), (2, 1, 3), (3, 5, 2), CREATE TABLE `Product_Suppliers` ( product_id INTEGER PRIMARY KEY REFERENCES Products(product_id), supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), date_supplied_from DATETIME, date_supplied_to DATETIME, total_amount_purchased VARCHAR(80), total_value_purchased DECIMAL(19,4) ); Sample rows from `Product_Suppliers`: (4, 3, 2017-06-19 00:49:05, 2018-03-24 19:29:18, 89366.05, 36014.6), (8, 4, 2017-07-02 00:35:12, 2018-03-25 07:30:49, 25085.57, 36274.56), (3, 3, 2017-10-14 19:15:37, 2018-03-24 02:29:44, 15752.45, 7273.74), CREATE TABLE `Staff_Department_Assignments` ( staff_id INTEGER PRIMARY KEY REFERENCES Staff(staff_id), department_id INTEGER PRIMARY KEY REFERENCES Departments(department_id), date_assigned_from DATETIME, job_title_code VARCHAR(10), date_assigned_to DATETIME ); Sample rows from `Staff_Department_Assignments`: (5, 4, 2017-06-11 22:55:20, Department Manager, 2018-03-23 21:59:11), (10, 5, 2017-12-18 19:12:15, Sales Person, 2018-03-23 20:25:24), (1, 5, 2018-02-14 03:15:29, Clerical Staff, 2018-03-24 19:57:56), ",
        "output": "SELECT DISTINCT t1.customer_name FROM customers as t1 JOIN customer_orders as t2 ON t1.customer_id  =  t2.customer_id WHERE t2.order_status_code  =  \"Pending\" ORDER BY t2.customer_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find name of the project that needs the least amount of time to finish and the name of scientists who worked on it. ###filtered_database_schema: CREATE TABLE `Scientists` ( SSN INT PRIMARY KEY, Name Char(30) ); Sample rows from `Scientists`: (123234877, Michael Rogers), (152934485, Anand Manikutty), (222364883, Carol Smith), CREATE TABLE `Projects` ( Code Char(4) PRIMARY KEY, Name Char(50), Hours INT ); Sample rows from `Projects`: (AeH1, Winds: Studying Bernoullis Principle, 156), (AeH2, Aerodynamics and Bridge Design, 189), (AeH3, Aerodynamics and Gas Mileage, 256), CREATE TABLE `AssignedTo` ( Scientist INT PRIMARY KEY REFERENCES Scientists(SSN), Project char(4) PRIMARY KEY REFERENCES Projects(Code) ); Sample rows from `AssignedTo`: (123234877, AeH1), (152934485, AeH3), (222364883, Ast3), ",
        "output": "SELECT t2.name ,  t3.name FROM assignedto as t1 JOIN projects as t2 ON t1.project  =  t2.code JOIN scientists as t3 ON t1.scientist  =  t3.ssn WHERE t2.hours  =  (SELECT MIN(hours) FROM projects)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: In what year was \" Benedict Cumberbatch \" born ###filtered_database_schema: CREATE TABLE `actor` ( aid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `copyright` ( id INT PRIMARY KEY, msid INT, cid INT ); CREATE TABLE `cast` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), aid INT REFERENCES actor(aid), role INT ); CREATE TABLE `genre` ( gid INT PRIMARY KEY, genre TEXT ); CREATE TABLE `classification` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), gid INT REFERENCES genre(gid) ); CREATE TABLE `company` ( id INT PRIMARY KEY, name TEXT, country_code TEXT ); CREATE TABLE `director` ( did INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `producer` ( pid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `directed_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), did INT REFERENCES director(did) ); CREATE TABLE `keyword` ( id INT PRIMARY KEY, keyword TEXT ); CREATE TABLE `made_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), pid INT REFERENCES producer(pid) ); CREATE TABLE `movie` ( mid INT PRIMARY KEY, title TEXT, release_year INT, title_aka TEXT, budget TEXT ); CREATE TABLE `tags` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), kid INT REFERENCES keyword(kid) ); CREATE TABLE `tv_series` ( sid INT PRIMARY KEY, title TEXT, release_year INT, num_of_seasons INT, num_of_episodes INT, title_aka TEXT, budget TEXT ); CREATE TABLE `writer` ( wid INT PRIMARY KEY, gender TEXT, name INT, nationality INT, num_of_episodes INT, birth_city TEXT, birth_year INT ); CREATE TABLE `written_by` ( id INT, msid INT REFERENCES copyright(msid), wid INT REFERENCES writer(wid) ); ",
        "output": "SELECT birth_year FROM actor WHERE name  =  \"Benedict Cumberbatch\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment. ###filtered_database_schema: CREATE TABLE `building` ( building_id TEXT PRIMARY KEY, Name TEXT, Street_address TEXT, Years_as_tallest TEXT, Height_feet INT, Floors INT ); Sample rows from `building`: (0, Citizens Bank Building, 701 North Franklin Street, 1913–1915, 145, 12), (1, Tampa City Hall, 315 John F. Kennedy Boulevard, 1915–1926, 160, 10), (2, Floridan Hotel, 905 Franklin Street, 1926–1966, 204, 17), CREATE TABLE `Institution` ( Institution_id TEXT PRIMARY KEY, Institution TEXT, Location TEXT, Founded REAL, Type TEXT, Enrollment INT, Team TEXT, Primary_Conference TEXT, building_id TEXT REFERENCES building(building_id) ); Sample rows from `Institution`: (0, Ave Maria University, Ave Maria, Florida, 1998.0, Private, 1200, Gyrenes, The Sun, 1), (1, Dakota State University, Madison, South Dakota, 1881.0, Public, 3102, Trojans, none, 1), (2, Edward Waters College, Jacksonville, Florida, 1866.0, Private, 800, Tigers, Gulf Coast (GCAC), 3), CREATE TABLE `protein` ( common_name TEXT PRIMARY KEY, protein_name TEXT, divergence_from_human_lineage REAL, accession_number TEXT, sequence_length REAL, sequence_identity_to_human_protein TEXT, Institution_id TEXT REFERENCES Institution(Institution_id) ); Sample rows from `protein`: (Tropical Clawed Frog, uncharacterized protein C20orf117-like, 371.2, XP_002942331.1, 1584.0, 39%, 1), (purple sea urchin, uncharacterized protein LOC578090, 742.9, XP_783370.2, 1587.0, 47%, 3), (body louse, Centromeric protein E, putative, 782.7, XP_002429877.1, 2086.0, 30%, 5), ",
        "output": "SELECT type FROM institution WHERE founded  >  1990 AND enrollment  >=  1000"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: which states does the ohio river pass through ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Who are all the directors? ###filtered_database_schema: CREATE TABLE `film` ( Film_ID INT PRIMARY KEY, Rank_in_series INT, Number_in_season INT, Title TEXT, Directed_by TEXT, Original_air_date TEXT, Production_code TEXT ); Sample rows from `film`: (1, 26, 1, The Case of the Mystery Weekend, Bill Schreiner, September 21–25, 1992, 50021–50025), (2, 27, 2, The Case of the Smart Dummy, Bill Schreiner, September 28–October 2, 1992, 50231–50235), (3, 28, 3, The Case: Off the Record, Bill Schreiner, October 5–9, 1992, 50011–50015), CREATE TABLE `cinema` ( Cinema_ID INT PRIMARY KEY, Name TEXT, Openning_year INT, Capacity INT, Location TEXT ); Sample rows from `cinema`: (1, Codling, 2010, 1100, County Wicklow), (2, Carrowleagh, 2012, 368, County Cork), (3, Dublin Array, 2015, 364, County Dublin), CREATE TABLE `schedule` ( Cinema_ID INT PRIMARY KEY REFERENCES cinema(Cinema_ID), Film_ID INT PRIMARY KEY REFERENCES film(Film_ID), Date TEXT, Show_times_per_day INT, Price float ); Sample rows from `schedule`: (1, 1, 21 May, 5, 12.99), (1, 2, 21 May, 3, 12.99), (1, 3, 21 Jun, 2, 8.99), ",
        "output": "SELECT DISTINCT directed_by FROM film"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many different instruments are used in the song \"Le Pop\"? ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT COUNT(DISTINCT instrument) FROM instruments as t1 JOIN songs as t2 ON t1.songid  =  t2.songid WHERE title  =  \"Le Pop\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name, address, number of students in the departments that have the top 3 highest number of students. ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT t2.dept_name ,  t2.dept_address ,  COUNT(*) FROM student as t1 JOIN department as t2 ON t1.dept_code  =  t2.dept_code GROUP BY t1.dept_code ORDER BY COUNT(*) DESC LIMIT 3"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many papers run experiments on ImageNet ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities. ###filtered_database_schema: CREATE TABLE `city` ( City_ID INT PRIMARY KEY, City TEXT, Hanzi TEXT, Hanyu_Pinyin TEXT, Regional_Population INT, GDP REAL ); Sample rows from `city`: (1, Shanghai, 上海, Shànghǎi, 23019148, 1919.57), (2, Nanjing ( Jiangsu ), 南京, Nánjīng, 8004680, 614.55), (3, Hangzhou ( Zhejiang ), 杭州, Hángzhōu, 8700400, 701.18), CREATE TABLE `match` ( Match_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Score TEXT, Result TEXT, Competition TEXT ); Sample rows from `match`: (1, 18 February 1992, Estadio Cuscatlán , San Salvador , El Salvador, 1-0, 2-0, Friendly match), (2, 19 July 1992, Estadio Rigoberto López , Managua , Nicaragua, 3-0, 5-0, 1994 FIFA World Cup qualification), (3, 23 July 1992, Estadio Cuscatlán , San Salvador , El Salvador, 1-0, 5-1, 1994 FIFA World Cup qualification), CREATE TABLE `temperature` ( City_ID INT PRIMARY KEY REFERENCES city(City_ID), Jan REAL, Feb REAL, Mar REAL, Apr REAL, Jun REAL, Jul REAL, Aug REAL, Sep REAL, Oct REAL, Nov REAL, Dec REAL ); Sample rows from `temperature`: (1, 17.8, 17.8, 18.3, 18.9, 20.0, 20.6, 20.6, 20.6, 20.0, 19.4, 18.3), (2, 26.1, 26.1, 26.1, 26.1, 27.8, 27.8, 28.3, 28.3, 28.3, 27.2, 26.7), (3, 18.9, 18.3, 19.4, 20.0, 22.2, 23.3, 23.9, 23.3, 22.8, 21.7, 20.0), CREATE TABLE `hosting_city` ( Year INT PRIMARY KEY, Match_ID INT REFERENCES match(Match_ID), Host_City TEXT REFERENCES city(City_ID) ); Sample rows from `hosting_city`: (2008, 1, 1), (2009, 2, 2), (2010, 3, 2), ",
        "output": "SELECT t1.city FROM city as t1 JOIN temperature as t2 ON t1.city_id  =  t2.city_id WHERE t2.mar  <  t2.dec EXCEPT SELECT t3.city FROM city as t3 JOIN hosting_city as t4 ON t3.city_id  =  t4.host_city"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the total access count of all documents in the most popular document type. ###filtered_database_schema: CREATE TABLE `Roles` ( role_code VARCHAR(15) PRIMARY KEY, role_description VARCHAR(80) ); Sample rows from `Roles`: (DBA, Database Administrator), (PROJ-MGR, Project Manager), CREATE TABLE `Users` ( user_id INTEGER, role_code VARCHAR(15) REFERENCES Roles(role_code), user_name VARCHAR(40), user_login VARCHAR(40), password VARCHAR(40) ); Sample rows from `Users`: (1, PROJ-MGR, dickens.elta, 0, e72b5a2d50b39a8760764a5f7a9d68ca2f076877), (2, DBA, tremblay.raheem, 1, 9bc25a040d5647ced5ec32e1a455e90fafc10bcb), (3, DBA, lynn.haley, 0, 90db8f51449e6c39e2a01f0b649d5a92fe76bbbb), CREATE TABLE `Document_Structures` ( document_structure_code VARCHAR(15) PRIMARY KEY, parent_document_structure_code VARCHAR(15), document_structure_description VARCHAR(80) ); Sample rows from `Document_Structures`: (1, 1, Header), (6, 1, Main section), (8, 1, Bib), CREATE TABLE `Functional_Areas` ( functional_area_code VARCHAR(15) PRIMARY KEY, parent_functional_area_code VARCHAR(15), functional_area_description VARCHAR(80) ); Sample rows from `Functional_Areas`: (8, 8, Signature), (1, 8, Acknowledgement), (9, 8, Keep blank), CREATE TABLE `Images` ( image_id INTEGER, image_alt_text VARCHAR(80), image_name VARCHAR(40), image_url VARCHAR(255) ); Sample rows from `Images`: (1, Lea, top1, http://www.rempelnader.com/1.jpg), (2, Arden, top2, http://connellykertzmann.org/1.jpg), (3, Mohamed, top3, http://www.bernierconnelly.com/1.jpg), CREATE TABLE `Documents` ( document_code VARCHAR(15) PRIMARY KEY, document_structure_code VARCHAR(15) REFERENCES Document_Structures(document_structure_code), document_type_code VARCHAR(15), access_count INTEGER, document_name VARCHAR(80) ); Sample rows from `Documents`: (217, 8, Book, 1864, Learning English), (621, 1, Paper, 8208, Research about Art history), (958, 8, Book, 3769, Learning Database), CREATE TABLE `Document_Functional_Areas` ( document_code VARCHAR(15) REFERENCES Documents(document_code), functional_area_code VARCHAR(15) REFERENCES Functional_Areas(functional_area_code) ); Sample rows from `Document_Functional_Areas`: (675, 9), (930, 1), (217, 1), CREATE TABLE `Document_Sections` ( section_id INTEGER, document_code VARCHAR(15) REFERENCES Documents(document_code), section_sequence INTEGER, section_code VARCHAR(20), section_title VARCHAR(80) ); Sample rows from `Document_Sections`: (12, 714, 6072, 70, after), (15, 217, 4510, 14, after), (19, 675, 7236, 90, after), CREATE TABLE `Document_Sections_Images` ( section_id INTEGER PRIMARY KEY REFERENCES Document_Sections(section_id), image_id INTEGER PRIMARY KEY REFERENCES Images(image_id) ); Sample rows from `Document_Sections_Images`: (93, 6), (86, 2), (27, 3), ",
        "output": "SELECT SUM(access_count) FROM documents GROUP BY document_type_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: When did the staff member Janessa Sawayn leave the company? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 3904 Stroman Passage, Port Melyssa, 14445, Georgia, USA), (2, 053 Quigley Island, Hagenesfurt, 22194, Kentucky, USA), (3, 00704 Zoe Alley, Lake Elaina, 08938, Georgia, USA), CREATE TABLE `Staff` ( staff_id INTEGER, staff_address_id INTEGER REFERENCES Addresses(address_id), nickname VARCHAR(80), first_name VARCHAR(80), middle_name VARCHAR(80), last_name VARCHAR(80), date_of_birth DATETIME, date_joined_staff DATETIME, date_left_staff DATETIME ); Sample rows from `Staff`: (1, 14, thompson.constantin, Janessa, Amara, Sawayn, 2010-12-08 16:55:14, 2017-04-27 03:21:26, 2018-03-23 22:53:12), (2, 3, santos45, Camylle, Icie, Weissnat, 2015-08-01 13:22:43, 2016-06-06 08:54:28, 2018-03-10 15:25:00), (3, 5, ynader, Kaitlin, Stephania, Mertz, 1994-05-17 05:32:11, 2018-01-02 12:24:24, 2018-03-24 10:11:08), CREATE TABLE `Vehicles` ( vehicle_id INTEGER, vehicle_details VARCHAR(255) ); Sample rows from `Vehicles`: (1, Van), (2, Truck), (3, Car), CREATE TABLE `Customers` ( customer_id INTEGER, customer_address_id INTEGER REFERENCES Addresses(address_id), customer_status_code VARCHAR(15), date_became_customer DATETIME, date_of_birth DATETIME, first_name VARCHAR(80), last_name VARCHAR(80), amount_outstanding DOUBLE, email_address VARCHAR(250), phone_number VARCHAR(255), cell_mobile_phone_number VARCHAR(255) ); Sample rows from `Customers`: (1, 13, Bad Customer, 2016-05-11 17:03:48, 1998-12-15 13:24:40, Carole, Bernhard, 255.0, everette.goyette@example.org, 07278206718, 861-638-9797), (2, 10, Bad Customer, 2015-11-16 22:52:14, 1995-07-17 12:13:16, Genevieve, Terry, 7256.0, huel.jana@example.org, +14(5)2351480248, 578-518-4785x612), (3, 10, Good Customer, 2016-04-08 00:28:15, 1994-06-21 01:34:56, Clara, Ortiz, 9443.0, hilario.sporer@example.org, 374-483-2758x85087, 1-197-686-2849x8761), CREATE TABLE `Customer_Payments` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), datetime_payment DATETIME PRIMARY KEY, payment_method_code VARCHAR(10), amount_payment DOUBLE ); Sample rows from `Customer_Payments`: (11, 2018-02-05 18:44:46, Direct Debit, 9570.93), (2, 2018-02-24 10:07:05, Direct Debit, 8180.26), (14, 2018-02-27 20:08:53, Direct Debit, 4610.26), CREATE TABLE `Lessons` ( lesson_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), lesson_status_code VARCHAR(15), staff_id INTEGER REFERENCES Staff(staff_id), vehicle_id INTEGER REFERENCES Vehicles(vehicle_id), lesson_date DATETIME, lesson_time VARCHAR(10), price DOUBLE ); Sample rows from `Lessons`: (1, 6, Cancelled, 8, 3, 2018-02-28 10:55:36, 5, 199.0), (2, 8, Cancelled, 14, 3, 2018-03-07 16:12:36, 6, 167.0), (3, 6, Cancelled, 11, 2, 2018-03-03 15:10:16, 3, 352.0), ",
        "output": "SELECT date_left_staff FROM staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: papers of ali farhadi in eccv 2016 ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which institution does \"Katsuhiro Ueno\" belong to? ###filtered_database_schema: CREATE TABLE `Inst` ( instID INTEGER, name TEXT, country TEXT ); Sample rows from `Inst`: (1000, University of Oxford, UK), (1010, Northeastern University, USA), (1020, Indiana University, USA), CREATE TABLE `Authors` ( authID INTEGER, lname TEXT, fname TEXT ); Sample rows from `Authors`: (50, Gibbons, Jeremy), (51, Hinze, Ralf), (52, James, Daniel W. H.), CREATE TABLE `Papers` ( paperID INTEGER, title TEXT ); Sample rows from `Papers`: (200, Just do it: Simple Monadic Equational Reasoning), (201, Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory), (202, Functional Pearl: Modular Rollback through Control Logging), CREATE TABLE `Authorship` ( authID INTEGER PRIMARY KEY REFERENCES Authors(authID), instID INTEGER PRIMARY KEY REFERENCES Inst(instID), paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID), authOrder INTEGER ); Sample rows from `Authorship`: (50, 1000, 200, 1), (51, 1000, 200, 2), (51, 1000, 201, 1), ",
        "output": "SELECT DISTINCT t3.name FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many video games have type Massively multiplayer online game? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Video_Games` ( GameID INTEGER, GName VARCHAR(40), GType VARCHAR(40) ); Sample rows from `Video_Games`: (1, RNG Stone, Collectible card game), (2, The Vanishing of Eric Calder, Walking Simulator), (3, Grand Term Assignment, Role-playing game), CREATE TABLE `Plays_Games` ( StuID INTEGER REFERENCES Student(StuID), GameID INTEGER REFERENCES Video_Games(GameID), Hours_Played INTEGER ); Sample rows from `Plays_Games`: (1001, 1, 35), (1001, 2, 15), (1001, 5, 1), CREATE TABLE `SportsInfo` ( StuID INTEGER REFERENCES Student(StuID), SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1) ); Sample rows from `SportsInfo`: (1001, Athletics, 2, 5, N), (1002, Football, 7, 20, Y), (1003, Football, 45, 18, Y), ",
        "output": "SELECT COUNT(*) FROM video_games WHERE gtype  =  \"Massively multiplayer online game\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List all tips for \" Cafe Zinho \" in Pennsylvania in 2010 . ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT t2.text FROM tip as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Pennsylvania\" AND t2.year  =  2010;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the list of school locations sorted in ascending order of school enrollment? ###filtered_database_schema: CREATE TABLE `school` ( School_ID INT PRIMARY KEY, School TEXT, Location TEXT, Enrollment REAL, Founded REAL, Denomination TEXT, Boys_or_Girls TEXT, Day_or_Boarding TEXT, Year_Entered_Competition REAL, School_Colors TEXT ); Sample rows from `school`: (1, St Aloysius' College, Milsons Point, 1200.0, 1879.0, Catholic, Boys, Day, 1929.0, Royal Blue and Gold), (2, Barker College, Hornsby, 2300.0, 1890.0, Anglican, Boys only to Yr 9 Co-ed Year 10 to 12, Day & Boarding, 1929.0, Red & Blue), (3, Cranbrook School, Bellevue Hill, 1000.0, 1918.0, Anglican, Boys, Day & Boarding, 1929.0, Red, White & Blue), CREATE TABLE `school_details` ( School_ID INT PRIMARY KEY REFERENCES school(School_ID), Nickname TEXT, Colors TEXT, League TEXT, Class TEXT, Division TEXT ); Sample rows from `school_details`: (1, Tigers, Blue and Yellow, DSHA, Flight A, Division 1), (2, Auks, Dark Green and White, DSHA, Flight B, Division 3), (3, Buccaneers, Garnet and White, DSHA, Fight A, Division 1), CREATE TABLE `school_performance` ( School_Id INT PRIMARY KEY REFERENCES school(School_ID), School_Year TEXT PRIMARY KEY, Class_A TEXT, Class_AA TEXT ); Sample rows from `school_performance`: (1, 1987-88, Yantis, Blanco), (1, 1988-89, Happy, Blanco), (1, 1989-90, Skidmore-Tynan, Bishop), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Team TEXT, Age INT, Position TEXT, School_ID INT REFERENCES school(School_ID) ); Sample rows from `player`: (1, Timothy Beckham, Tampa Bay Devil Rays, 15, Shortstop, 1), (2, Pedro Álvarez, Pittsburgh Pirates, 14, Third baseman, 2), (3, Eric Hosmer, Kansas City Royals, 16, First Baseman, 1), ",
        "output": "SELECT location FROM school ORDER BY enrollment ASC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: chi papers ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all races that occurred after 12:00:00 or before 09:00:00? ###filtered_database_schema: CREATE TABLE `circuits` ( circuitId INTEGER, circuitRef TEXT, name TEXT, location TEXT, country TEXT, lat REAL, lng REAL, alt TEXT, url TEXT ); Sample rows from `circuits`: (1, albert_park, Albert Park Grand Prix Circuit, Melbourne, Australia, -37.8497, 144.968, 10, http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit), (2, sepang, Sepang International Circuit, Kuala Lumpur, Malaysia, 2.76083, 101.738, , http://en.wikipedia.org/wiki/Sepang_International_Circuit), (3, bahrain, Bahrain International Circuit, Sakhir, Bahrain, 26.0325, 50.5106, , http://en.wikipedia.org/wiki/Bahrain_International_Circuit), CREATE TABLE `races` ( raceId INTEGER, year INTEGER, round INTEGER, circuitId INTEGER REFERENCES circuits(circuitId), name TEXT, date TEXT, time TEXT, url TEXT ); Sample rows from `races`: (1, 2009, 1, 1, Australian Grand Prix, 2009-03-29, 06:00:00, http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix), (2, 2009, 2, 2, Malaysian Grand Prix, 2009-04-05, 09:00:00, http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix), (3, 2009, 3, 17, Chinese Grand Prix, 2009-04-19, 07:00:00, http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix), CREATE TABLE `drivers` ( driverId INTEGER, driverRef TEXT, number TEXT, code TEXT, forename TEXT, surname TEXT, dob TEXT, nationality TEXT, url TEXT ); Sample rows from `drivers`: (1, hamilton, 44, HAM, Lewis, Hamilton, 07/01/1985, British, http://en.wikipedia.org/wiki/Lewis_Hamilton), (2, heidfeld, , HEI, Nick, Heidfeld, 10/05/1977, German, http://en.wikipedia.org/wiki/Nick_Heidfeld), (3, rosberg, 6, ROS, Nico, Rosberg, 27/06/1985, German, http://en.wikipedia.org/wiki/Nico_Rosberg), CREATE TABLE `status` ( statusId INTEGER, status TEXT ); Sample rows from `status`: (1, Finished), (2, Disqualified), (3, Accident), CREATE TABLE `seasons` ( year INTEGER, url TEXT ); Sample rows from `seasons`: (1950, http://en.wikipedia.org/wiki/1950_Formula_One_season), (1951, http://en.wikipedia.org/wiki/1951_Formula_One_season), (1952, http://en.wikipedia.org/wiki/1952_Formula_One_season), CREATE TABLE `constructors` ( constructorId INTEGER, constructorRef TEXT, name TEXT, nationality TEXT, url TEXT ); Sample rows from `constructors`: (1, mclaren, McLaren, British, http://en.wikipedia.org/wiki/McLaren), (2, bmw_sauber, BMW Sauber, German, http://en.wikipedia.org/wiki/BMW_Sauber), (3, williams, Williams, British, http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering), CREATE TABLE `constructorStandings` ( constructorStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `constructorStandings`: (1, 18, 1, 14.0, 1, 1, 1), (2, 18, 2, 8.0, 3, 3, 0), (3, 18, 3, 9.0, 2, 2, 0), CREATE TABLE `results` ( resultId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, grid INTEGER, position TEXT, positionText TEXT, positionOrder INTEGER, points REAL, laps TEXT, time TEXT, milliseconds TEXT, fastestLap TEXT, rank TEXT, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId INTEGER ); Sample rows from `results`: (1, 18, 1, 1, 22, 1, 1, 1, 1, 10.0, 58, 34:50.6, 5690616, 39, 2, 01:27.5, 218.3, 1), (2, 18, 2, 2, 3, 5, 2, 2, 2, 8.0, 58, 5.478, 5696094, 41, 3, 01:27.7, 217.586, 1), (3, 18, 3, 3, 7, 7, 3, 3, 3, 6.0, 58, 8.163, 5698779, 41, 5, 01:28.1, 216.719, 1), CREATE TABLE `driverStandings` ( driverStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `driverStandings`: (1, 18, 1, 10.0, 1, 1, 1), (2, 18, 2, 8.0, 2, 2, 0), (3, 18, 3, 6.0, 3, 3, 0), CREATE TABLE `constructorResults` ( constructorResultsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, status TEXT ); Sample rows from `constructorResults`: (1, 18, 1, 14.0, NULL), (2, 18, 2, 8.0, NULL), (3, 18, 3, 9.0, NULL), CREATE TABLE `qualifying` ( qualifyId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, position INTEGER, q1 TEXT, q2 TEXT, q3 TEXT ); Sample rows from `qualifying`: (1, 18, 1, 1, 22, 1, 1:26.572, 1:25.187, 1:26.714), (2, 18, 9, 2, 4, 2, 1:26.103, 1:25.315, 1:26.869), (3, 18, 5, 1, 23, 3, 1:25.664, 1:25.452, 1:27.079), CREATE TABLE `pitStops` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), stop INTEGER PRIMARY KEY, lap INTEGER, time TEXT, duration TEXT, milliseconds INTEGER ); CREATE TABLE `lapTimes` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), lap INTEGER PRIMARY KEY, position INTEGER, time TEXT, milliseconds INTEGER ); ",
        "output": "SELECT name FROM races WHERE time > \"12:00:00\" OR time < \"09:00:00\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what states does the ohio river go through ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the famous titles for artists that have volumes that lasted more than 2 weeks on top. ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Artist TEXT, Age INT, Famous_Title TEXT, Famous_Release_date TEXT ); Sample rows from `artist`: (1, Gorgoroth, 34, Bergen 1996, November 2007), (2, Ophiolatry, 35, Transmutation, January 21, 2008), (3, Ophiolatry, 22, Antievangelistical Process (re-release), 2009), CREATE TABLE `volume` ( Volume_ID INT PRIMARY KEY, Volume_Issue TEXT, Issue_Date TEXT, Weeks_on_Top REAL, Song TEXT, Artist_ID INT REFERENCES artist(Artist_ID) ); Sample rows from `volume`: (1, 45:14 §, 27 December 1986 - 10 January, 3.0, The Way, 1), (2, 45:15, 17 January, 1.0, Everybody Have Fun Tonight , 2), (3, 45:16, 24 January, 1.0, Walk Like an Egyptian , 1), CREATE TABLE `music_festival` ( ID INT PRIMARY KEY, Music_Festival TEXT, Date_of_ceremony TEXT, Category TEXT, Volume INT REFERENCES volume(Volume_ID), Result TEXT ); Sample rows from `music_festival`: (1, 34th England Academy Prize, 18 February 2011, Best Song, 1, Nominated), (2, 34th Japan Academy Prize, 18 February 2011, Best Lyrics, 2, Nominated), (3, 34th European Academy Prize, 18 February 2011, Best Song, 3, Awarded), ",
        "output": "SELECT t1.famous_title FROM artist as t1 JOIN volume as t2 ON t1.artist_id  =  t2.artist_id WHERE t2.weeks_on_top  >  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the title and director for the movie with highest worldwide gross in the year 2000 or before? ###filtered_database_schema: CREATE TABLE `book_club` ( book_club_id INT PRIMARY KEY, Year INT, Author_or_Editor TEXT, Book_Title TEXT, Publisher TEXT, Category TEXT, Result TEXT ); Sample rows from `book_club`: (1, 1989, Michael Nava, Goldenboy, Alyson, Gay M/SF, Won [A ]), (2, 1989, Donald Ward, Death Takes the Stage, St. Martin's Press, Gay M/SF, Nom), (3, 1989, Michael Bishop, Unicorn Mountain, William Morrow, Gay M/SF, Nom), CREATE TABLE `movie` ( movie_id INT PRIMARY KEY, Title TEXT, Year INT, Director TEXT, Budget_million REAL, Gross_worldwide INT ); Sample rows from `movie`: (1, The Boondock Saints, 1999, Troy Duffy, 6.0, 30471), (2, The Big Kahuna, 1999, John Swanbeck, 7.0, 3728888), (3, Storm Catcher, 1999, Anthony Hickox, 5.0, 40500), CREATE TABLE `culture_company` ( Company_name TEXT PRIMARY KEY, Type TEXT, Incorporated_in TEXT, Group_Equity_Shareholding REAL, book_club_id TEXT REFERENCES book_club(book_club_id), movie_id TEXT REFERENCES movie(movie_id) ); Sample rows from `culture_company`: (Culture China, Corporate, China, 18.77, 1, 2), (Culture China Cargo, Joint Venture, China, 49.0, 2, 3), (Culture Hong Kong, Joint Venture, Hong Kong, 60.0, 3, 4), ",
        "output": "SELECT title ,  director FROM movie WHERE year  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is minimum age for different job title? ###filtered_database_schema: CREATE TABLE `Person` ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT ); Sample rows from `Person`: (Alice, 25, new york city, female, student), (Bob, 35, salt lake city, male, engineer), (Zach, 45, austin, male, doctor), CREATE TABLE `PersonFriend` ( name varchar(20) REFERENCES Person(name), friend varchar(20) REFERENCES Person(name), year INTEGER ); Sample rows from `PersonFriend`: (Alice, Bob, 10), (Zach, Dan, 12), (Bob, Zach, 5), ",
        "output": "SELECT MIN(age) ,  job FROM person GROUP BY job"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of different colleges involved in the tryout in alphabetical order. ###filtered_database_schema: CREATE TABLE `College` ( cName varchar(20) PRIMARY KEY, state varchar(2), enr numeric(5,0) ); Sample rows from `College`: (LSU, LA, 18000), (ASU, AZ, 12000), (OU, OK, 22000), CREATE TABLE `Player` ( pID numeric(5,0) PRIMARY KEY, pName varchar(20), yCard varchar(3), HS numeric(5,0) ); Sample rows from `Player`: (10001, Andrew, no, 1200), (20002, Blake, no, 1600), (30003, Charles, no, 300), CREATE TABLE `Tryout` ( pID numeric(5,0) PRIMARY KEY REFERENCES Player(pID), cName varchar(20) PRIMARY KEY REFERENCES College(cName), pPos varchar(8), decision varchar(3) ); Sample rows from `Tryout`: (10001, LSU, goalie, no), (10001, ASU, goalie, yes), (20002, FSU, striker, yes), ",
        "output": "SELECT DISTINCT cname FROM tryout ORDER BY cname"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of the person who has no student friends. ###filtered_database_schema: CREATE TABLE `Person` ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT ); Sample rows from `Person`: (Alice, 25, new york city, female, student), (Bob, 35, salt lake city, male, engineer), (Zach, 45, austin, male, doctor), CREATE TABLE `PersonFriend` ( name varchar(20) REFERENCES Person(name), friend varchar(20) REFERENCES Person(name), year INTEGER ); Sample rows from `PersonFriend`: (Alice, Bob, 10), (Zach, Dan, 12), (Bob, Zach, 5), ",
        "output": "SELECT name FROM person EXCEPT SELECT t2.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t1.job  =  'student'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: When did ameet soni publish ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(t3.paperid)  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"ameet soni\" GROUP BY t3.year ORDER BY t3.year;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the most common company type, and how many are there? ###filtered_database_schema: CREATE TABLE `airport` ( id INT PRIMARY KEY, City TEXT, Country TEXT, IATA TEXT, ICAO TEXT, name TEXT ); Sample rows from `airport`: (1, Akureyri, Iceland, AEY, BIAR, Akureyri Airport), (2, Amsterdam, Netherlands, AMS, EHAM, Schiphol Airport), (3, Anchorage, United States, ANC, PANC, Ted Stevens Airport), CREATE TABLE `operate_company` ( id INT PRIMARY KEY, name TEXT, Type TEXT, Principal_activities TEXT, Incorporated_in TEXT, Group_Equity_Shareholding REAL ); Sample rows from `operate_company`: (1, Air China, Corporate, Airline, China, 18.77), (2, Air China Cargo, Joint Venture, Cargo airline, China, 49.0), (3, Air Hong Kong, Joint Venture, Cargo airline, Hong Kong, 60.0), CREATE TABLE `flight` ( id INT PRIMARY KEY, Vehicle_Flight_number TEXT, Date TEXT, Pilot TEXT, Velocity REAL, Altitude REAL, airport_id INT REFERENCES airport(id), company_id INT REFERENCES operate_company(id) ); Sample rows from `flight`: (1, M2-F1 #0, March 1, 1963, Thompson, 135.0, 0.0, 1, 2), (2, M2-F1 #1, August 16, 1963, Thompson, 240.0, 3650.0, 2, 3), (3, M2-F1 #6, September 3, 1963, Thompson, 240.0, 3650.0, 2, 4), ",
        "output": "SELECT type ,  COUNT(*) FROM operate_company GROUP BY type ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: through which states does the ohio run ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the longest river in the united states ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the latest movie by \" Jim Jarmusch \" ###filtered_database_schema: CREATE TABLE `actor` ( aid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `copyright` ( id INT PRIMARY KEY, msid INT, cid INT ); CREATE TABLE `cast` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), aid INT REFERENCES actor(aid), role INT ); CREATE TABLE `genre` ( gid INT PRIMARY KEY, genre TEXT ); CREATE TABLE `classification` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), gid INT REFERENCES genre(gid) ); CREATE TABLE `company` ( id INT PRIMARY KEY, name TEXT, country_code TEXT ); CREATE TABLE `director` ( did INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `producer` ( pid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `directed_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), did INT REFERENCES director(did) ); CREATE TABLE `keyword` ( id INT PRIMARY KEY, keyword TEXT ); CREATE TABLE `made_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), pid INT REFERENCES producer(pid) ); CREATE TABLE `movie` ( mid INT PRIMARY KEY, title TEXT, release_year INT, title_aka TEXT, budget TEXT ); CREATE TABLE `tags` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), kid INT REFERENCES keyword(kid) ); CREATE TABLE `tv_series` ( sid INT PRIMARY KEY, title TEXT, release_year INT, num_of_seasons INT, num_of_episodes INT, title_aka TEXT, budget TEXT ); CREATE TABLE `writer` ( wid INT PRIMARY KEY, gender TEXT, name INT, nationality INT, num_of_episodes INT, birth_city TEXT, birth_year INT ); CREATE TABLE `written_by` ( id INT, msid INT REFERENCES copyright(msid), wid INT REFERENCES writer(wid) ); ",
        "output": "SELECT t3.title FROM director as t2 JOIN directed_by as t1 ON t2.did  =  t1.did JOIN movie as t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Jim Jarmusch\" ORDER BY t3.release_year DESC LIMIT 1;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later. ###filtered_database_schema: CREATE TABLE `film` ( Film_ID INT PRIMARY KEY, Rank_in_series INT, Number_in_season INT, Title TEXT, Directed_by TEXT, Original_air_date TEXT, Production_code TEXT ); Sample rows from `film`: (1, 26, 1, The Case of the Mystery Weekend, Bill Schreiner, September 21–25, 1992, 50021–50025), (2, 27, 2, The Case of the Smart Dummy, Bill Schreiner, September 28–October 2, 1992, 50231–50235), (3, 28, 3, The Case: Off the Record, Bill Schreiner, October 5–9, 1992, 50011–50015), CREATE TABLE `cinema` ( Cinema_ID INT PRIMARY KEY, Name TEXT, Openning_year INT, Capacity INT, Location TEXT ); Sample rows from `cinema`: (1, Codling, 2010, 1100, County Wicklow), (2, Carrowleagh, 2012, 368, County Cork), (3, Dublin Array, 2015, 364, County Dublin), CREATE TABLE `schedule` ( Cinema_ID INT PRIMARY KEY REFERENCES cinema(Cinema_ID), Film_ID INT PRIMARY KEY REFERENCES film(Film_ID), Date TEXT, Show_times_per_day INT, Price float ); Sample rows from `schedule`: (1, 1, 21 May, 5, 12.99), (1, 2, 21 May, 3, 12.99), (1, 3, 21 Jun, 2, 8.99), ",
        "output": "SELECT AVG(capacity) ,  MIN(capacity) ,  MAX(capacity) FROM cinema WHERE openning_year  >=  2011"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of customers who do not have an saving account. ###filtered_database_schema: CREATE TABLE `bank` ( branch_ID INT PRIMARY KEY, bname varchar(20), no_of_customers INT, city varchar(10), state varchar(20) ); Sample rows from `bank`: (1, morningside, 203, New York City, New York), (2, downtown, 123, Salt Lake City, Utah), (3, broadway, 453, New York City, New York), CREATE TABLE `customer` ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal INT, no_of_loans INT, credit_score INT, branch_ID INT REFERENCES bank(branch_ID), state varchar(20) ); Sample rows from `customer`: (1, Mary, saving, 2000, 2, 30, 2, Utah), (2, Jack, checking, 1000, 1, 20, 1, Texas), (3, Owen, saving, 800000, 0, 210, 3, New York), CREATE TABLE `loan` ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3) REFERENCES customer(Cust_ID), branch_ID varchar(3) REFERENCES bank(branch_ID), amount INT ); Sample rows from `loan`: (1, Mortgages, 1, 1, 2050), (2, Auto, 1, 2, 3000), (3, Business, 3, 3, 5000), ",
        "output": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name of the department with an instructure who has a name like 'Soisalon'? ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the main industries of the companies without gas stations and what are the companies? ###filtered_database_schema: CREATE TABLE `company` ( Company_ID INT PRIMARY KEY, Rank INT, Company TEXT, Headquarters TEXT, Main_Industry TEXT, Sales_billion REAL, Profits_billion REAL, Assets_billion REAL, Market_Value REAL ); Sample rows from `company`: (1, 1, ExxonMobil, USA, Oil and gas, 433.5, 41.1, 331.1, 407.4), (2, 3, General Electric, USA, Conglomerate, 147.3, 14.2, 717.2, 213.7), (3, 4, Royal Dutch Shell, Netherlands, Oil and gas, 470.2, 30.9, 340.5, 227.6), CREATE TABLE `gas_station` ( Station_ID INT PRIMARY KEY, Open_Year INT, Location TEXT, Manager_Name TEXT, Vice_Manager_Name TEXT, Representative_Name TEXT ); Sample rows from `gas_station`: (1, 1998, Herne Hill, BrianWingrave, Russell Denman, Clive Burr), (2, 1999, Channel Hill, SimonMarloe, Russell Brown, Rob Jefferies ), (3, 2000, Reading North, Simon Cope Derek Marloe, James Colin , Dave Edwards Roger ), CREATE TABLE `station_company` ( Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID), Company_ID INT PRIMARY KEY REFERENCES company(Company_ID), Rank_of_the_Year INT ); Sample rows from `station_company`: (11, 1, 1), (1, 3, 2), (6, 6, 3), ",
        "output": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the country of the airlines whose name starts with 'Orbit'. ###filtered_database_schema: CREATE TABLE `routes` ( rid INTEGER, dst_apid INTEGER REFERENCES airports(apid), dst_ap varchar(4), src_apid bigint REFERENCES airports(apid), src_ap varchar(4), alid bigint REFERENCES airlines(alid), airline varchar(4), codeshare TEXT ); Sample rows from `routes`: (37, 2990, KZ, 2965, AER, 410, 2B, None), (38, 2990, KZ, 2966, ASF, 410, 2B, None), (39, 2962, MRV, 2966, ASF, 410, 2B, None), CREATE TABLE `airports` ( apid INTEGER, name TEXT, city TEXT, country TEXT, x REAL, y REAL, elevation bigint, iata character varchar(3), icao character varchar(4) ); Sample rows from `airports`: (1, Goroka Airport, Goroka, Papua New Guinea, 145.391998291, -6.081689834590001, 5282, GKA, AYGA), (2, Madang Airport, Madang, Papua New Guinea, 145.789001465, -5.20707988739, 20, MAG, AYMD), (3, Mount Hagen Kagamuga Airport, Mount Hagen, Papua New Guinea, 144.29600524902344, -5.826789855957031, 5388, HGU, AYMH), CREATE TABLE `airlines` ( alid INTEGER, name TEXT, iata varchar(2), icao varchar(3), callsign TEXT, country TEXT, active varchar(2) ); Sample rows from `airlines`: (-1, Unknown, -, N/A, None, None, Y), (1, Private flight, -, N/A, , , Y), (2, 135 Airways, , GNL, GENERAL, United States, N), ",
        "output": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: From which hometowns did no gymnasts come from? ###filtered_database_schema: CREATE TABLE `gymnast` ( Gymnast_ID INT PRIMARY KEY REFERENCES people(People_ID), Floor_Exercise_Points REAL, Pommel_Horse_Points REAL, Rings_Points REAL, Vault_Points REAL, Parallel_Bars_Points REAL, Horizontal_Bar_Points REAL, Total_Points REAL ); Sample rows from `gymnast`: (1, 9.725, 9.737, 9.512, 9.575, 9.762, 9.75, 58.061), (2, 9.7, 9.625, 9.625, 9.65, 9.587, 9.737, 57.924), (4, 8.987, 9.75, 9.75, 9.65, 9.787, 9.725, 57.649), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Age REAL, Height REAL, Hometown TEXT ); Sample rows from `people`: (1, Paul Hamm, 24.0, 1.71, Santo Domingo), (2, Lorraine Súarez Carmona, 21.0, 1.75, Bonao), (3, Ashley Pérez Cabrera, 19.0, 1.7, Miami), ",
        "output": "SELECT DISTINCT hometown FROM people EXCEPT SELECT DISTINCT t2.hometown FROM gymnast as t1 JOIN people as t2 ON t1.gymnast_id  =  t2.people_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of phones for each accreditation type. ###filtered_database_schema: CREATE TABLE `chip_model` ( Model_name TEXT PRIMARY KEY, Launch_year REAL, RAM_MiB REAL, ROM_MiB REAL, Slots TEXT, WiFi TEXT, Bluetooth TEXT ); Sample rows from `chip_model`: (X5, 2002.0, 32.0, 32.0, 1CFII,1SD, No, No), (X5 high end, 2002.0, 64.0, 48.0, 1CFII,1SD, No, No), (X3 Basic, 2003.0, 32.0, 32.0, 1SD, No, No), CREATE TABLE `screen_mode` ( Graphics_mode REAL PRIMARY KEY, Char_cells TEXT, Pixels TEXT, Hardware_colours REAL, used_kb REAL, map TEXT, Type TEXT ); Sample rows from `screen_mode`: (0.0, 80 × 32, 640 × 256, 2.0, 20.0, 3000–7FFF, Graphics), (1.0, 40 × 32, 320 × 256, 4.0, 20.0, 3000–7FFF, Graphics), (2.0, 20 × 32, 160 × 256, 8.0, 20.0, 3000–7FFF, Graphics), CREATE TABLE `phone` ( Company_name TEXT, Hardware_Model_name TEXT PRIMARY KEY, Accreditation_type TEXT, Accreditation_level TEXT, Date TEXT, chip_model TEXT REFERENCES chip_model(Model_name), screen_mode TEXT REFERENCES screen_mode(Graphics_mode) ); Sample rows from `phone`: (Sony Mobile Communications, XPERIA T, XPERIA J, Full, joyn Hot Fixes, Approved (awarded 15.11.12), X5, 1), (LG Electronics, LG-P760, Full, joyn Hot Fixes, Approved (awarded 19.11.12), X51v, 3), (Nokia Corporation, Lumia 920, Lumia 820, Lumia 620, Full, joyn Hot Fixes, Approved (awarded 05.12.12), X5, 4), ",
        "output": "SELECT accreditation_type ,  COUNT(*) FROM phone GROUP BY accreditation_type"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what are all the rivers in illinois ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what are some good restaurants in mountain view for arabic food ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of musicals with nominee \"Bob Fosse\"? ###filtered_database_schema: CREATE TABLE `musical` ( Musical_ID INT PRIMARY KEY, Name TEXT, Year INT, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT ); Sample rows from `musical`: (1, The Phantom of the Opera, 1986, Tony Award, Best Book of a Musical, Bob Fosse, Nominated), (2, Les Misérables, 1986, Tony Award, Best Performance by a Leading Actor in a Musical, Cleavant Derricks, Nominated), (3, Wicked, 1986, Tony Award, Best Direction of a Musical, Bob Fosse, Nominated), CREATE TABLE `actor` ( Actor_ID INT PRIMARY KEY, Name TEXT, Musical_ID INT REFERENCES actor(Actor_ID), Character TEXT, Duration TEXT, age INT ); Sample rows from `actor`: (1, Ray Meagher, 1, Alf Stewart, 1988—, 26), (2, Tom Oliver, 1, Lou Carpenter, 1988, 1992—, 22), (3, Lynne McGranger, 2, Irene Roberts, 1993—, 21), ",
        "output": "SELECT name FROM musical WHERE nominee  =  \"Bob Fosse\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show all church names that have hosted least two weddings. ###filtered_database_schema: CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Is_Male TEXT, Age INT ); Sample rows from `people`: (1, Mike Weir, Canada, T, 34), (2, Juli Hanson, Sweden, F, 32), (3, Ricky Barnes, United States, T, 30), CREATE TABLE `church` ( Church_ID INT PRIMARY KEY, Name TEXT, Organized_by TEXT, Open_Date INT, Continuation_of TEXT ); Sample rows from `church`: (1, Pure Church of Christ, Wycam Clark, 1831, Church of Christ), (2, Independent Church, – Hoton, 1832, Church of Christ), (3, Church of Christ, Ezra Booth, 1836, Church of the Latter Day Saints), CREATE TABLE `wedding` ( Church_ID INT PRIMARY KEY REFERENCES church(Church_ID), Male_ID INT PRIMARY KEY REFERENCES people(People_ID), Female_ID INT PRIMARY KEY REFERENCES people(People_ID), Year INT ); Sample rows from `wedding`: (1, 1, 2, 2014), (3, 3, 4, 2015), (5, 5, 6, 2016), ",
        "output": "SELECT t1.name FROM church as t1 JOIN wedding as t2 ON t1.church_id  =  t2.church_id GROUP BY t1.church_id HAVING COUNT(*)  >=  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the description of the product called \"Chocolate\". ###filtered_database_schema: CREATE TABLE `Staff` ( staff_id INTEGER, gender VARCHAR(1), first_name VARCHAR(80), last_name VARCHAR(80), email_address VARCHAR(255), phone_number VARCHAR(80) ); Sample rows from `Staff`: (114, 0, Ward, Boehm, marcelle.ritchie@example.com, (379)551-0838x146), (115, 1, Lucie, Lowe, ohintz@example.org, 142-311-6503x206), (116, 0, Dagmar, Erdman, wrau@example.com, 345-656-5571), CREATE TABLE `Customers` ( customer_id INTEGER, customer_type_code VARCHAR(20), address_line_1 VARCHAR(80), address_line_2 VARCHAR(80), town_city VARCHAR(80), state VARCHAR(80), email_address VARCHAR(255), phone_number VARCHAR(80) ); Sample rows from `Customers`: (113, Good Credit Rating, 144 Legros Landing, Apt. 551, Maryamport, Kansas, hsteuber@example.org, 06963347450), (114, Good Credit Rating, 039 Jedidiah Estate Suite 537, Apt. 245, Sauerberg, Hawaii, cayla.satterfield@example.net, 470-803-0244), (115, Good Credit Rating, 92189 Gulgowski Ranch Apt. 683, Apt. 828, Tyreekhaven, Tennessee, vida86@example.com, 997.698.4779x882), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, product_category_code VARCHAR(20), date_product_first_available DATETIME, date_product_discontinued DATETIME, product_name VARCHAR(80), product_description VARCHAR(255), product_price DECIMAL(19,4) ); Sample rows from `Products`: (117, 4, Food, 1988-09-29 17:54:50, 1987-12-20 13:46:16, Chocolate, Handmade chocolate, 2.88), (118, 3, Book, 1974-06-25 12:26:47, 1991-08-20 05:22:31, The Great Gatsby, American novel, 35), (119, 8, Hardware, 1994-12-18 15:13:19, 1997-07-02 18:26:16, Keyboard, Designed for games, 109.99), CREATE TABLE `Complaints` ( complaint_id INTEGER, product_id INTEGER REFERENCES Products(product_id), customer_id INTEGER REFERENCES Customers(customer_id), complaint_outcome_code VARCHAR(20), complaint_status_code VARCHAR(20), complaint_type_code VARCHAR(20), date_complaint_raised DATETIME, date_complaint_closed DATETIME, staff_id INTEGER REFERENCES Staff(staff_id) ); Sample rows from `Complaints`: (1, 117, 120, OK, Closed, Product Failure, 2002-07-18 10:59:35, 1976-04-19 11:03:06, 114), (2, 118, 113, OK, New, Product Unusable, 1973-02-10 22:55:56, 2013-09-14 02:59:10, 120), (3, 119, 114, OK, New, Product Unusable, 2006-10-29 07:08:46, 1995-09-11 14:48:46, 115), ",
        "output": "SELECT product_description FROM products WHERE product_name  =  \"Chocolate\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average rating and resolution of all bangla songs? ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT AVG(rating) ,  AVG(resolution) FROM song WHERE languages  =  \"bangla\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the papers on TAIL that were published in NIPS ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the information of all instructors ordered by their salary in ascending order. ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT * FROM instructor ORDER BY salary"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the full name and phone of the customer who has card number 4560596484842. ###filtered_database_schema: CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 6, 338, Regular), (2, 14, 562, VIP), (3, 9, 162, VIP), CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(20), customer_last_name VARCHAR(20), customer_address VARCHAR(255), customer_phone VARCHAR(255), customer_email VARCHAR(255), other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Aniyah, Feest, 55975 Theodore Estates Lake Brody, VT 57078, (673)872-5338, fahey.dorian@example.com, None), (2, Susie, Wiza, 6478 Moen Isle Suite 910 Schimmelmouth, VT 96364-4898, 679-845-8645x94312, idickinson@example.com, None), (3, Marcel, Brekke, 1965 Abernathy Plains Port Lilla, LA 44867, 1-511-656-6664, nichole.rodriguez@example.com, None), CREATE TABLE `Customers_Cards` ( card_id INTEGER, customer_id INTEGER, card_type_code VARCHAR(15), card_number VARCHAR(80), date_valid_from DATETIME, date_valid_to DATETIME, other_card_details VARCHAR(255) ); Sample rows from `Customers_Cards`: (1, 14, Credit, 4560596484842, 2011-04-17 09:05:28, 2018-03-07 17:06:19, 5567915676420343), (2, 9, Credit, 4859448397570735, 2012-05-22 02:05:41, 2018-02-25 15:43:32, 4539333582760), (3, 6, Debit, 348237249146948, 2014-08-01 14:26:45, 2018-03-24 15:29:00, 4916210554814), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, previous_transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), card_id INTEGER REFERENCES Customers_Cards(card_id), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DOUBLE, transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 925, 15, 1, Payment, 2018-03-24 06:41:41, 1701.23, None, None), (2, 494, 3, 2, Refund, 2018-03-24 12:08:55, 1931.76, None, None), (3, 642, 4, 3, Payment, 2018-03-24 09:08:27, 486.56, None, None), ",
        "output": "SELECT t2.customer_first_name ,  t2.customer_last_name ,  t2.customer_phone FROM customers_cards as t1 JOIN customers as t2 ON t1.customer_id  =  t2.customer_id WHERE t1.card_number  =  \"4560596484842\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of vocal types used in song \"Demon Kitty Rag\"? ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT COUNT(*) FROM vocals as t1 JOIN songs as t2 ON t1.songid  =  t2.songid WHERE title  =  \"Demon Kitty Rag\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the maximum and minimum number of silver medals for clubs. ###filtered_database_schema: CREATE TABLE `club` ( Club_ID INT PRIMARY KEY, name TEXT, Region TEXT, Start_year TEXT ); Sample rows from `club`: (1, AIB, USA, 2009), (2, BK Slide, UK, 1998), (3, IFG, China, 2005), CREATE TABLE `club_rank` ( Rank REAL PRIMARY KEY, Club_ID INT PRIMARY KEY REFERENCES club(Club_ID), Gold REAL, Silver REAL, Bronze REAL, Total REAL ); Sample rows from `club_rank`: (1.0, 2, 11.0, 11.0, 9.0, 31.0), (2.0, 3, 8.0, 7.0, 6.0, 21.0), (3.0, 1, 7.0, 4.0, 2.0, 13.0), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, name TEXT, Position TEXT, Club_ID INT REFERENCES club(Club_ID), Apps REAL, Tries REAL, Goals TEXT, Points REAL ); Sample rows from `player`: (1, Michael Platt, Full Back, 1, 20.0, 5.0, 0, 20.0), (2, Dave Halley, Right Wing, 2, 23.0, 9.0, 0, 36.0), (3, James Evans, Right Centre, 1, 30.0, 9.0, 0, 36.0), CREATE TABLE `competition` ( Competition_ID INT PRIMARY KEY, Year REAL, Competition_type TEXT, Country TEXT ); Sample rows from `competition`: (1, 2006.0, Friendly, Italy), (2, 2006.0, Friendly, Spain), (3, 2006.0, Friendly, Australia), CREATE TABLE `competition_result` ( Competition_ID INT PRIMARY KEY REFERENCES competition(Competition_ID), Club_ID_1 INT PRIMARY KEY REFERENCES club(Club_ID), Club_ID_2 INT PRIMARY KEY REFERENCES club(Club_ID), Score TEXT ); Sample rows from `competition_result`: (1, 1, 2, 11:10), (2, 3, 2, 25:2), (10, 4, 2, 13:10), ",
        "output": "SELECT MAX(silver) ,  MIN(silver) FROM club_rank"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the name and position of the head whose department has least number of employees? ###filtered_database_schema: CREATE TABLE `Physician` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), SSN INTEGER ); Sample rows from `Physician`: (1, John Dorian, Staff Internist, 111111111), (2, Elliot Reid, Attending Physician, 222222222), (3, Christopher Turk, Surgical Attending Physician, 333333333), CREATE TABLE `Department` ( DepartmentID INTEGER, Name VARCHAR(30), Head INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Department`: (1, General Medicine, 4), (2, Surgery, 7), (3, Psychiatry, 9), CREATE TABLE `Affiliated_With` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID), PrimaryAffiliation BOOLEAN ); Sample rows from `Affiliated_With`: (1, 1, 1), (2, 1, 1), (3, 1, 0), CREATE TABLE `Procedures` ( Code INTEGER, Name VARCHAR(30), Cost REAL ); Sample rows from `Procedures`: (1, Reverse Rhinopodoplasty, 1500.0), (2, Obtuse Pyloric Recombobulation, 3750.0), (3, Folded Demiophtalmectomy, 4500.0), CREATE TABLE `Trained_In` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code), CertificationDate DATETIME, CertificationExpires DATETIME ); Sample rows from `Trained_In`: (3, 1, 2008-01-01, 2008-12-31), (3, 2, 2008-01-01, 2008-12-31), (3, 5, 2008-01-01, 2008-12-31), CREATE TABLE `Patient` ( SSN INTEGER, Name VARCHAR(30), Address VARCHAR(30), Phone VARCHAR(30), InsuranceID INTEGER, PCP INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Patient`: (100000001, John Smith, 42 Foobar Lane, 555-0256, 68476213, 1), (100000002, Grace Ritchie, 37 Snafu Drive, 555-0512, 36546321, 2), (100000003, Random J. Patient, 101 Omgbbq Street, 555-1204, 65465421, 2), CREATE TABLE `Nurse` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), Registered BOOLEAN, SSN INTEGER ); Sample rows from `Nurse`: (101, Carla Espinosa, Head Nurse, 1, 111111110), (102, Laverne Roberts, Nurse, 1, 222222220), (103, Paul Flowers, Nurse, 0, 333333330), CREATE TABLE `Appointment` ( AppointmentID INTEGER, Patient INTEGER REFERENCES Patient(SSN), PrepNurse INTEGER REFERENCES Nurse(EmployeeID), Physician INTEGER REFERENCES Physician(EmployeeID), Start DATETIME, End DATETIME, ExaminationRoom TEXT ); Sample rows from `Appointment`: (13216584, 100000001, 101, 1, 2008-04-24 10:00, 2008-04-24 11:00, A), (26548913, 100000002, 101, 2, 2008-04-24 10:00, 2008-04-24 11:00, B), (36549879, 100000001, 102, 1, 2008-04-25 10:00, 2008-04-25 11:00, A), CREATE TABLE `Medication` ( Code INTEGER, Name VARCHAR(30), Brand VARCHAR(30), Description VARCHAR(30) ); Sample rows from `Medication`: (1, Procrastin-X, X, N/A), (2, Thesisin, Foo Labs, N/A), (3, Awakin, Bar Laboratories, N/A), CREATE TABLE `Prescribes` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Medication INTEGER PRIMARY KEY REFERENCES Medication(Code), Date DATETIME PRIMARY KEY, Appointment INTEGER REFERENCES Appointment(AppointmentID), Dose VARCHAR(30) ); Sample rows from `Prescribes`: (1, 100000001, 1, 2008-04-24 10:47, 13216584, 5), (9, 100000004, 2, 2008-04-27 10:53, 86213939, 10), (9, 100000004, 2, 2008-04-30 16:53, None, 5), CREATE TABLE `Block` ( BlockFloor INTEGER PRIMARY KEY, BlockCode INTEGER PRIMARY KEY ); Sample rows from `Block`: (1, 1), (1, 2), (1, 3), CREATE TABLE `Room` ( RoomNumber INTEGER, RoomType VARCHAR(30), BlockFloor INTEGER REFERENCES Block(BlockFloor), BlockCode INTEGER REFERENCES Block(BlockCode), Unavailable BOOLEAN ); Sample rows from `Room`: (101, Single, 1, 1, 0), (102, Single, 1, 1, 0), (103, Single, 1, 1, 0), CREATE TABLE `On_Call` ( Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID), BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor), BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode), OnCallStart DATETIME PRIMARY KEY, OnCallEnd DATETIME PRIMARY KEY ); Sample rows from `On_Call`: (101, 1, 1, 2008-11-04 11:00, 2008-11-04 19:00), (101, 1, 2, 2008-11-04 11:00, 2008-11-04 19:00), (102, 1, 3, 2008-11-04 11:00, 2008-11-04 19:00), CREATE TABLE `Stay` ( StayID INTEGER, Patient INTEGER REFERENCES Patient(SSN), Room INTEGER REFERENCES Room(RoomNumber), StayStart DATETIME, StayEnd DATETIME ); Sample rows from `Stay`: (3215, 100000001, 111, 2008-05-01, 2008-05-04), (3216, 100000003, 123, 2008-05-03, 2008-05-14), (3217, 100000004, 112, 2008-05-02, 2008-05-03), CREATE TABLE `Undergoes` ( Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code), Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID), DateUndergoes DATETIME PRIMARY KEY, Physician INTEGER REFERENCES Physician(EmployeeID), AssistingNurse INTEGER REFERENCES Nurse(EmployeeID) ); Sample rows from `Undergoes`: (100000001, 6, 3215, 2008-05-02, 3, 101), (100000001, 2, 3215, 2008-05-03, 7, 101), (100000004, 1, 3217, 2008-05-07, 3, 102), ",
        "output": "SELECT t2.name ,  t2.position FROM department as t1 JOIN physician as t2 ON t1.head  =  t2.employeeid GROUP BY departmentid ORDER BY COUNT(departmentid) LIMIT 1;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the code of city where most of students are living in. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT city_code FROM student GROUP BY city_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the titles of films that are either longer than 100 minutes or rated PG other than those that cost more than 200 to replace? ###filtered_database_schema: CREATE TABLE `actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), last_update TIMESTAMP ); Sample rows from `actor`: (1, PENELOPE, GUINESS, 2006-02-15 04:34:33), (2, NICK, WAHLBERG, 2006-02-15 04:34:33), (3, ED, CHASE, 2006-02-15 04:34:33), CREATE TABLE `address` ( address_id SMALLINT UNSIGNED PRIMARY KEY, address VARCHAR(50), address2 VARCHAR(50), district VARCHAR(20), city_id SMALLINT UNSIGNED REFERENCES city(city_id), postal_code VARCHAR(10), phone VARCHAR(20), last_update TIMESTAMP ); Sample rows from `address`: (1, 47 MySakila Drive, None, Alberta, 300, , , 2006-02-15 04:45:30), (2, 28 MySQL Boulevard, None, QLD, 576, , , 2006-02-15 04:45:30), (3, 23 Workhaven Lane, None, Alberta, 300, , 14033335568, 2006-02-15 04:45:30), CREATE TABLE `category` ( category_id TINYINT UNSIGNED PRIMARY KEY, name VARCHAR(25), last_update TIMESTAMP ); Sample rows from `category`: (1, Action, 2006-02-15 04:46:27), (2, Animation, 2006-02-15 04:46:27), (3, Children, 2006-02-15 04:46:27), CREATE TABLE `city` ( city_id SMALLINT UNSIGNED PRIMARY KEY, city VARCHAR(50), country_id SMALLINT UNSIGNED REFERENCES country(country_id), last_update TIMESTAMP ); Sample rows from `city`: (1, A Corua (La Corua), 87, 2006-02-15 04:45:25), (2, Abha, 82, 2006-02-15 04:45:25), (3, Abu Dhabi, 101, 2006-02-15 04:45:25), CREATE TABLE `country` ( country_id SMALLINT UNSIGNED PRIMARY KEY, country VARCHAR(50), last_update TIMESTAMP ); Sample rows from `country`: (1, Afghanistan, 2006-02-15 04:44:00), (2, Algeria, 2006-02-15 04:44:00), (3, American Samoa, 2006-02-15 04:44:00), CREATE TABLE `customer` ( customer_id SMALLINT UNSIGNED PRIMARY KEY, store_id TINYINT UNSIGNED REFERENCES store(store_id), first_name VARCHAR(45), last_name VARCHAR(45), email VARCHAR(50), address_id SMALLINT UNSIGNED REFERENCES address(address_id), active BOOLEAN, create_date DATETIME, last_update TIMESTAMP ); Sample rows from `customer`: (1, 1, MARY, SMITH, MARY.SMITH@sakilacustomer.org, 5, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (2, 1, PATRICIA, JOHNSON, PATRICIA.JOHNSON@sakilacustomer.org, 6, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (3, 1, LINDA, WILLIAMS, LINDA.WILLIAMS@sakilacustomer.org, 7, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), CREATE TABLE `film` ( film_id SMALLINT UNSIGNED PRIMARY KEY, title VARCHAR(255), description TEXT, release_year YEAR, language_id TINYINT UNSIGNED REFERENCES language(language_id), original_language_id TINYINT UNSIGNED REFERENCES language(language_id), rental_duration TINYINT UNSIGNED, rental_rate DECIMAL(4,2), length SMALLINT UNSIGNED, replacement_cost DECIMAL(5,2), rating , special_features , last_update TIMESTAMP ); Sample rows from `film`: (1, ACADEMY DINOSAUR, A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies, 2006, 1, None, 6, 0.99, 86, 20.99, PG, Deleted Scenes,Behind the Scenes, 2006-02-15 05:03:42), (2, ACE GOLDFINGER, A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China, 2006, 1, None, 3, 4.99, 48, 12.99, G, Trailers,Deleted Scenes, 2006-02-15 05:03:42), (3, ADAPTATION HOLES, A Astounding Reflection of a Lumberjack And a Car who must Sink a Lumberjack in A Baloon Factory, 2006, 1, None, 7, 2.99, 50, 18.99, NC-17, Trailers,Deleted Scenes, 2006-02-15 05:03:42), CREATE TABLE `film_actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES actor(actor_id), film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), last_update TIMESTAMP ); Sample rows from `film_actor`: (1, 1, 2006-02-15 05:05:03), (1, 23, 2006-02-15 05:05:03), (1, 25, 2006-02-15 05:05:03), CREATE TABLE `film_category` ( film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), category_id TINYINT UNSIGNED PRIMARY KEY REFERENCES category(category_id), last_update TIMESTAMP ); Sample rows from `film_category`: (1, 6, 2006-02-15 05:07:09), (2, 11, 2006-02-15 05:07:09), (3, 6, 2006-02-15 05:07:09), CREATE TABLE `film_text` ( film_id SMALLINT PRIMARY KEY, title VARCHAR(255), description TEXT ); CREATE TABLE `inventory` ( inventory_id MEDIUMINT UNSIGNED PRIMARY KEY, film_id SMALLINT UNSIGNED REFERENCES film(film_id), store_id TINYINT UNSIGNED REFERENCES store(store_id), last_update TIMESTAMP ); Sample rows from `inventory`: (1, 1, 1, 2006-02-15 05:09:17), (2, 1, 1, 2006-02-15 05:09:17), (3, 1, 1, 2006-02-15 05:09:17), CREATE TABLE `language` ( language_id TINYINT UNSIGNED PRIMARY KEY, name CHAR(20), last_update TIMESTAMP ); CREATE TABLE `payment` ( payment_id SMALLINT UNSIGNED PRIMARY KEY, customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), rental_id INT REFERENCES rental(rental_id), amount DECIMAL(5,2), payment_date DATETIME, last_update TIMESTAMP ); Sample rows from `payment`: (1, 1, 1, 76, 2.99, 2005-05-25 11:30:37, 2006-02-15 22:12:30), (2, 1, 1, 573, 0.99, 2005-05-28 10:35:23, 2006-02-15 22:12:30), (3, 1, 1, 1185, 5.99, 2005-06-15 00:54:12, 2006-02-15 22:12:30), CREATE TABLE `rental` ( rental_id INT PRIMARY KEY, rental_date DATETIME, inventory_id MEDIUMINT UNSIGNED REFERENCES inventory(inventory_id), customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), return_date DATETIME, staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), last_update TIMESTAMP ); Sample rows from `rental`: (1, 2005-05-24 22:53:30, 367, 130, 2005-05-26 22:04:30, 1, 2006-02-15 21:30:53), (2, 2005-05-24 22:54:33, 1525, 459, 2005-05-28 19:40:33, 1, 2006-02-15 21:30:53), (3, 2005-05-24 23:03:39, 1711, 408, 2005-06-01 22:12:39, 1, 2006-02-15 21:30:53), CREATE TABLE `staff` ( staff_id TINYINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), address_id SMALLINT UNSIGNED REFERENCES address(address_id), picture BLOB, email VARCHAR(50), store_id TINYINT UNSIGNED, active BOOLEAN, username VARCHAR(16), password VARCHAR(40), last_update TIMESTAMP ); CREATE TABLE `store` ( store_id TINYINT UNSIGNED PRIMARY KEY, manager_staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), address_id SMALLINT UNSIGNED REFERENCES address(address_id), last_update TIMESTAMP ); ",
        "output": "SELECT title FROM film WHERE length  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the capacity and gender type of the dorm whose name has substring ‘Donor’. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of users who posted some tweets. ###filtered_database_schema: CREATE TABLE `follows` ( f1 int(11) PRIMARY KEY REFERENCES user_profiles(uid), f2 int(11) PRIMARY KEY REFERENCES user_profiles(uid) ); Sample rows from `follows`: (1, 2), (2, 3), (7, 1), CREATE TABLE `tweets` ( id bigint(20) PRIMARY KEY, uid int(11) REFERENCES user_profiles(uid), text char(140), createdate datetime ); Sample rows from `tweets`: (1, 1, Hello I'm Tony Stark., 2018-03-09 20:00:14), (2, 3, Today I have went shopping at Laffayette., 2018-03-09 20:01:02), (4, 1, My company is hiring interns., 2018-03-12 02:30:30), CREATE TABLE `user_profiles` ( uid int(11) PRIMARY KEY, name varchar(255), email varchar(255), partitionid int(11), followers int(11) ); Sample rows from `user_profiles`: (1, Iron Man, ts@richest.com, 1, 6662425), (2, Mary, Mary@yale.edu, 2, 890), (3, Black Widow , bw@superhero.com, 23, 35425845), ",
        "output": "SELECT COUNT(DISTINCT uid) FROM tweets"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the most common type code across products. ###filtered_database_schema: CREATE TABLE `Addresses` ( Address_ID INTEGER PRIMARY KEY, address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 465 Emely Bypass West Mafalda, CO 23309), (2, 669 Carter Trafficway Port Delbert, OK 66249), (3, 38247 Ernser Gateway Suite 442 Bogisichland, VT 71460), CREATE TABLE `Locations` ( Location_ID INTEGER, Other_Details VARCHAR(255) ); Sample rows from `Locations`: (1, Rowe PLC), (2, Ebert, Green and Bogisich), (3, Prohaska LLC), CREATE TABLE `Products` ( Product_ID INTEGER PRIMARY KEY, Product_Type_Code CHAR(15), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4) ); Sample rows from `Products`: (1, Books, Business Policy, 1336.26), (3, Food, Special Dinning, 2894.94), (5, Clothes, Men suits, 3298.84), CREATE TABLE `Parties` ( Party_ID INTEGER, Party_Details VARCHAR(255) ); Sample rows from `Parties`: (3, European People's Party), (4, European Free Alliance), (5, European Alliance for Freedom), CREATE TABLE `Assets` ( Asset_ID INTEGER, Other_Details VARCHAR(255) ); Sample rows from `Assets`: (1, Transportation Cars), (2, Meeting Rooms), (3, Dinning Tables), CREATE TABLE `Channels` ( Channel_ID INTEGER, Other_Details VARCHAR(255) ); Sample rows from `Channels`: (1, 145), (2, 348), (3, 933), CREATE TABLE `Finances` ( Finance_ID INTEGER, Other_Details VARCHAR(255) ); Sample rows from `Finances`: (1, Mutual), (2, Good), (3, Bad), CREATE TABLE `Events` ( Event_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Channel_ID INTEGER, Event_Type_Code CHAR(15), Finance_ID INTEGER REFERENCES Finances(Finance_ID), Location_ID INTEGER REFERENCES Locations(Location_ID) ); Sample rows from `Events`: (1, 3, 12, Trade Show, 2, 13), (2, 15, 13, Press Conferenc, 8, 11), (3, 12, 1, Press Conferenc, 12, 6), CREATE TABLE `Products_in_Events` ( Product_in_Event_ID INTEGER, Event_ID INTEGER REFERENCES Events(Event_ID), Product_ID INTEGER REFERENCES Products(Product_ID) ); Sample rows from `Products_in_Events`: (13, 4, 29), (23, 8, 3), (32, 14, 10), CREATE TABLE `Parties_in_Events` ( Party_ID INTEGER PRIMARY KEY REFERENCES Parties(Party_ID), Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID), Role_Code CHAR(15) ); Sample rows from `Parties_in_Events`: (3, 7, Organizer), (3, 8, Participant), (4, 1, Organizer), CREATE TABLE `Agreements` ( Document_ID INTEGER, Event_ID INTEGER REFERENCES Events(Event_ID) ); Sample rows from `Agreements`: (1, 13), (2, 13), (3, 15), CREATE TABLE `Assets_in_Events` ( Asset_ID INTEGER PRIMARY KEY, Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID) REFERENCES Events(Event_ID) ); Sample rows from `Assets_in_Events`: (1, 4), (1, 5), (1, 9), ",
        "output": "SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT t1.amenity_name FROM dorm_amenity as t1 JOIN has_amenity as t2 ON t2.amenid  =  t1.amenid JOIN dorm as t3 ON t2.dormid  =  t3.dormid WHERE t3.dorm_name  =  'Anonymous Donor Hall' ORDER BY t1.amenity_name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the maximum and minimum product prices for each product type? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 28481 Crist Circle East Burdettestad, IA 21232), (2, 0292 Mitchel Pike Port Abefurt, IA 84402-4249), (3, 4062 Mante Place West Lindsey, DE 76199-8015), CREATE TABLE `Staff` ( staff_id INTEGER, staff_gender VARCHAR(1), staff_name VARCHAR(80) ); Sample rows from `Staff`: (1, 1, Tom), (2, 1, Malika), (3, 1, Katelynn), CREATE TABLE `Suppliers` ( supplier_id INTEGER, supplier_name VARCHAR(80), supplier_phone VARCHAR(80) ); Sample rows from `Suppliers`: (1, Lidl, (692)009-5928), (2, AB Store, 1-483-283-4742), (3, Tesco, 287-071-1153x254), CREATE TABLE `Department_Store_Chain` ( dept_store_chain_id INTEGER, dept_store_chain_name VARCHAR(80) ); Sample rows from `Department_Store_Chain`: (1, South), (2, West), (3, East), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method_code VARCHAR(10), customer_code VARCHAR(20), customer_name VARCHAR(80), customer_address VARCHAR(255), customer_phone VARCHAR(80), customer_email VARCHAR(80) ); Sample rows from `Customers`: (1, Credit Card, 401, Ahmed, 75099 Tremblay Port Apt. 163 South Norrisland, SC 80546, 254-072-4068x33935, margarett.vonrueden@example.com), (2, Credit Card, 665, Chauncey, 8408 Lindsay Court East Dasiabury, IL 72656-3552, +41(8)1897032009, stiedemann.sigrid@example.com), (3, Direct Debit, 844, Lukas, 7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871, 197-417-3557, joelle.monahan@example.com), CREATE TABLE `Products` ( product_id INTEGER, product_type_code VARCHAR(10), product_name VARCHAR(80), product_price DECIMAL(19,4) ); Sample rows from `Products`: (1, Clothes, red jeans, 734.73), (2, Clothes, yellow jeans, 687.23), (3, Clothes, black jeans, 695.16), CREATE TABLE `Supplier_Addresses` ( supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Supplier_Addresses`: (4, 5, 2016-09-22 16:41:31, 2018-03-14 20:06:37), (3, 9, 2014-11-07 19:18:49, 2018-03-16 16:39:58), (3, 2, 2008-11-22 12:01:25, 2018-03-02 19:50:22), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 9, 2017-12-11 05:00:22, 2018-03-20 20:52:34), (1, 6, 2017-10-07 23:00:26, 2018-02-28 14:53:52), (10, 8, 2017-04-04 20:00:27, 2018-02-27 20:08:33), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status_code VARCHAR(10), order_date DATETIME ); Sample rows from `Customer_Orders`: (1, 12, Completed, 2018-02-10 15:44:48), (2, 4, New, 2018-01-31 17:49:18), (3, 1, PartFilled, 2018-02-26 12:39:33), CREATE TABLE `Department_Stores` ( dept_store_id INTEGER, dept_store_chain_id INTEGER REFERENCES Department_Store_Chain(dept_store_chain_id), store_name VARCHAR(80), store_address VARCHAR(255), store_phone VARCHAR(80), store_email VARCHAR(80) ); Sample rows from `Department_Stores`: (1, 1, store_name, 01290 Jeremie Parkway Suite 753 North Arielle, MS 51249, (948)944-5099x2027, bmaggio@example.com), (2, 3, store_name, 082 Purdy Expressway O'Connellshire, IL 31732, 877-917-5029, larissa10@example.org), (3, 4, store_name, 994 Travis Plains North Wadeton, WV 27575-3951, 1-216-312-0375, alexandro.mcclure@example.net), CREATE TABLE `Departments` ( department_id INTEGER, dept_store_id INTEGER REFERENCES Department_Stores(dept_store_id), department_name VARCHAR(80) ); Sample rows from `Departments`: (1, 5, human resource), (2, 11, purchasing), (3, 4, marketing), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id) ); Sample rows from `Order_Items`: (1, 9, 7), (2, 1, 3), (3, 5, 2), CREATE TABLE `Product_Suppliers` ( product_id INTEGER PRIMARY KEY REFERENCES Products(product_id), supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), date_supplied_from DATETIME, date_supplied_to DATETIME, total_amount_purchased VARCHAR(80), total_value_purchased DECIMAL(19,4) ); Sample rows from `Product_Suppliers`: (4, 3, 2017-06-19 00:49:05, 2018-03-24 19:29:18, 89366.05, 36014.6), (8, 4, 2017-07-02 00:35:12, 2018-03-25 07:30:49, 25085.57, 36274.56), (3, 3, 2017-10-14 19:15:37, 2018-03-24 02:29:44, 15752.45, 7273.74), CREATE TABLE `Staff_Department_Assignments` ( staff_id INTEGER PRIMARY KEY REFERENCES Staff(staff_id), department_id INTEGER PRIMARY KEY REFERENCES Departments(department_id), date_assigned_from DATETIME, job_title_code VARCHAR(10), date_assigned_to DATETIME ); Sample rows from `Staff_Department_Assignments`: (5, 4, 2017-06-11 22:55:20, Department Manager, 2018-03-23 21:59:11), (10, 5, 2017-12-18 19:12:15, Sales Person, 2018-03-23 20:25:24), (1, 5, 2018-02-14 03:15:29, Clerical Staff, 2018-03-24 19:57:56), ",
        "output": "SELECT product_type_code ,  MAX(product_price) ,  MIN(product_price) FROM products GROUP BY product_type_code"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components. ###filtered_database_schema: CREATE TABLE `manufacturer` ( Manufacturer_ID INT PRIMARY KEY, Open_Year REAL, Name TEXT, Num_of_Factories INT, Num_of_Shops INT ); Sample rows from `manufacturer`: (1, 1980.0, Chevrolet House, 36, 8), (2, 1990.0, IKEA, 21, 19), (3, 1991.0, Ford Make, 12, 2), CREATE TABLE `furniture` ( Furniture_ID INT PRIMARY KEY, Name TEXT, Num_of_Component INT, Market_Rate REAL ); Sample rows from `furniture`: (1, Billiard table, 14, 52.5), (2, Chabudai, 4, 40.0), (3, Bookcase, 6, 1.0), CREATE TABLE `furniture_manufacte` ( Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID), Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID), Price_in_Dollar REAL ); Sample rows from `furniture_manufacte`: (1, 3, 239.0), (4, 2, 450.0), (7, 7, 2124.0), ",
        "output": "SELECT t3.name FROM furniture as t1 JOIN furniture_manufacte as t2 ON t1.furniture_id  =  t2.furniture_id JOIN manufacturer as t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture as t1 JOIN furniture_manufacte as t2 ON t1.furniture_id  =  t2.furniture_id JOIN manufacturer as t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: keyphrases used by Christof Dallermassl in 2000 ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t2.keyphraseid FROM paper as t3 JOIN paperkeyphrase as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Give the ids of documents with expenses that have the budget code 'SF'. ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (BK, Book, excellent), (CV, CV, excellent), (PT, Presentation, very good), CREATE TABLE `Ref_Budget_Codes` ( Budget_Type_Code CHAR(15) PRIMARY KEY, Budget_Type_Description VARCHAR(255) ); Sample rows from `Ref_Budget_Codes`: (GV, Government), (ORG, Organisation), (SF, Self founded), CREATE TABLE `Projects` ( Project_ID INTEGER, Project_Details VARCHAR(255) ); Sample rows from `Projects`: (30, Society Research project), (35, Internet of Things project), (105, Graph Database project), CREATE TABLE `Documents` ( Document_ID INTEGER, Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Project_ID INTEGER REFERENCES Projects(Project_ID), Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Documents`: (29, CV, 30, 2004-08-28 06:59:19, Review on UK files, None, None), (42, BK, 105, 2012-12-27 19:09:18, Review on Canadian files, None, None), (57, CV, 195, 1980-10-22 14:17:11, Review on French files, None, None), CREATE TABLE `Statements` ( Statement_ID INTEGER REFERENCES Documents(Document_ID), Statement_Details VARCHAR(255) ); Sample rows from `Statements`: (57, Open Project), (192, Private Project), CREATE TABLE `Documents_with_Expenses` ( Document_ID INTEGER REFERENCES Documents(Document_ID), Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code), Document_Details VARCHAR(255) ); Sample rows from `Documents_with_Expenses`: (57, GV, government), (192, GV, government), (226, GV, government), CREATE TABLE `Accounts` ( Account_ID INTEGER, Statement_ID INTEGER REFERENCES Statements(Statement_ID), Account_Details VARCHAR(255) ); Sample rows from `Accounts`: (7, 57, 495.063), (61, 57, 930.14), (98, 57, 6035.84), ",
        "output": "SELECT document_id FROM documents_with_expenses WHERE budget_type_code  =  'SF'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what are the names and classes of the ships that do not have any captain yet? ###filtered_database_schema: CREATE TABLE `captain` ( Captain_ID INT PRIMARY KEY, Name TEXT, Ship_ID INT REFERENCES Ship(Ship_ID), age TEXT, Class TEXT, Rank TEXT ); Sample rows from `captain`: (1, Captain Sir Henry Langford, 1, 40, Third-rate ship of the line, Midshipman), (2, Captain Beves Conway, 2, 54, Third-rate ship of the line, Midshipman), (3, Lieutenant Hugh Bolitho, 3, 43, Cutter, Midshipman), CREATE TABLE `Ship` ( Ship_ID INT PRIMARY KEY, Name TEXT, Type TEXT, Built_Year REAL, Class TEXT, Flag TEXT ); Sample rows from `Ship`: (1, HMS Manxman, Panamax, 1997.0, KR, Panama), (2, HMS Gorgon, Panamax, 1998.0, KR, Panama), (3, HM Cutter Avenger, Panamax, 1997.0, KR, Panama), ",
        "output": "SELECT name ,  class FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: people working on sensor fusion ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t1.authorname FROM paperkeyphrase as t2 JOIN keyphrase as t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes as t3 ON t3.paperid  =  t2.paperid JOIN author as t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List all channel names ordered by their rating in percent from big to small. ###filtered_database_schema: CREATE TABLE `program` ( Program_ID INT PRIMARY KEY, Name TEXT, Origin TEXT, Launch REAL, Owner TEXT ); Sample rows from `program`: (1, Aniworld, Hunan, 2005.0, Hunan Broadcasting System (HBS)), (2, Kaku, Beijing, 2004.0, Beijing Television (BTV)), (3, Toonmax, Shanghai, 2005.0, Shanghai Media Group (SMG)), CREATE TABLE `channel` ( Channel_ID INT PRIMARY KEY, Name TEXT, Owner TEXT, Share_in_percent REAL, Rating_in_percent REAL ); Sample rows from `channel`: (1, CCTV-1, CCTV, 4.9, 0.54), (2, Hunan Satellite TV, HBS, 4.81, 0.53), (3, CCTV-8, CCTV, 3.76, 0.41), CREATE TABLE `broadcast` ( Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID), Program_ID INT PRIMARY KEY REFERENCES program(Program_ID), Time_of_day TEXT ); Sample rows from `broadcast`: (1, 1, Morning), (2, 1, Night), (3, 2, Morning), CREATE TABLE `broadcast_share` ( Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID), Program_ID INT PRIMARY KEY REFERENCES program(Program_ID), Date TEXT, Share_in_percent REAL ); Sample rows from `broadcast_share`: (1, 1, 01,May, 3.1), (2, 1, 02,May, 1.8), (3, 2, 03,May, 2.8), ",
        "output": "SELECT name FROM channel ORDER BY rating_in_percent DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of artists that do not have any albums. ###filtered_database_schema: CREATE TABLE `Album` ( AlbumId INTEGER, Title varchar(160), ArtistId INTEGER PRIMARY KEY REFERENCES Artist(ArtistId) ); Sample rows from `Album`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `Artist` ( ArtistId INTEGER, Name varchar(120) ); Sample rows from `Artist`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `Customer` ( CustomerId INTEGER, FirstName varchar(40), LastName varchar(20), Company varchar(80), Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60), SupportRepId INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId) ); Sample rows from `Customer`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `Employee` ( EmployeeId INTEGER, LastName varchar(20), FirstName varchar(20), Title varchar(30), ReportsTo INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId), BirthDate datetime, HireDate datetime, Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60) ); Sample rows from `Employee`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `Genre` ( GenreId INTEGER, Name varchar(120) ); Sample rows from `Genre`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `Invoice` ( InvoiceId INTEGER, CustomerId INTEGER PRIMARY KEY REFERENCES Customer(CustomerId), InvoiceDate datetime, BillingAddress varchar(70), BillingCity varchar(40), BillingState varchar(40), BillingCountry varchar(40), BillingPostalCode varchar(10), Total decimal(10,2) ); Sample rows from `Invoice`: (1, 2, 2009-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2009-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2009-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `InvoiceLine` ( InvoiceLineId INTEGER, InvoiceId INTEGER PRIMARY KEY REFERENCES Invoice(InvoiceId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId), UnitPrice decimal(10,2), Quantity INTEGER ); Sample rows from `InvoiceLine`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `MediaType` ( MediaTypeId INTEGER, Name varchar(120) ); Sample rows from `MediaType`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `Playlist` ( PlaylistId INTEGER, Name varchar(120) ); Sample rows from `Playlist`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `PlaylistTrack` ( PlaylistId INTEGER PRIMARY KEY REFERENCES Playlist(PlaylistId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId) ); Sample rows from `PlaylistTrack`: (1, 1), (8, 1), (17, 1), CREATE TABLE `Track` ( TrackId INTEGER, Name varchar(200), AlbumId INTEGER PRIMARY KEY REFERENCES Album(AlbumId), MediaTypeId INTEGER PRIMARY KEY REFERENCES MediaType(MediaTypeId), GenreId INTEGER PRIMARY KEY REFERENCES Genre(GenreId), Composer varchar(220), Milliseconds INTEGER, Bytes INTEGER, UnitPrice decimal(10,2) ); Sample rows from `Track`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), ",
        "output": "SELECT name FROM artist EXCEPT SELECT t2.name FROM album as t1 JOIN artist as t2 ON t1.artistid  =  t2.artistid"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of shops that have more than a single kind of device in stock? ###filtered_database_schema: CREATE TABLE `device` ( Device_ID INT PRIMARY KEY, Device TEXT, Carrier TEXT, Package_Version TEXT, Applications TEXT, Software_Platform TEXT ); Sample rows from `device`: (1, BlackBerry Storm 9530, MTS Mobility, 5.0.0.808, 5.0.0.419, Android), (2, Apple, Verizon Wireless, 5.0.0.328, 5.0.0.328, iOS), (3, Huawei, Telus Mobility, 5.0.0.419, 5.0.0.419, Android), CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Shop_Name TEXT, Location TEXT, Open_Date TEXT, Open_Year INT ); Sample rows from `shop`: (1, Dinas Device, Dinas, 1 January, 2014), (2, Best Buy, Cymmer, 15 July, 2006), (3, Ferndale, Blaenllechau, 8 November, 2009), CREATE TABLE `stock` ( Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID), Device_ID INT PRIMARY KEY REFERENCES device(Device_ID), Quantity INT ); Sample rows from `stock`: (1, 6, 100), (2, 6, 110), (3, 6, 134), ",
        "output": "SELECT t2.shop_name FROM stock as t1 JOIN shop as t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id HAVING COUNT(*)  >  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what major rivers run through illinois ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT river_name FROM river WHERE length  >  750 AND traverse  =  \"illinois\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the top 5 countries by number of invoices and how many do they have? ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY COUNT(*) DESC LIMIT 5;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the number of invoices and the invoice total from California. ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the songs in volumes with more than 1 week on top? ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Artist TEXT, Age INT, Famous_Title TEXT, Famous_Release_date TEXT ); Sample rows from `artist`: (1, Gorgoroth, 34, Bergen 1996, November 2007), (2, Ophiolatry, 35, Transmutation, January 21, 2008), (3, Ophiolatry, 22, Antievangelistical Process (re-release), 2009), CREATE TABLE `volume` ( Volume_ID INT PRIMARY KEY, Volume_Issue TEXT, Issue_Date TEXT, Weeks_on_Top REAL, Song TEXT, Artist_ID INT REFERENCES artist(Artist_ID) ); Sample rows from `volume`: (1, 45:14 §, 27 December 1986 - 10 January, 3.0, The Way, 1), (2, 45:15, 17 January, 1.0, Everybody Have Fun Tonight , 2), (3, 45:16, 24 January, 1.0, Walk Like an Egyptian , 1), CREATE TABLE `music_festival` ( ID INT PRIMARY KEY, Music_Festival TEXT, Date_of_ceremony TEXT, Category TEXT, Volume INT REFERENCES volume(Volume_ID), Result TEXT ); Sample rows from `music_festival`: (1, 34th England Academy Prize, 18 February 2011, Best Song, 1, Nominated), (2, 34th Japan Academy Prize, 18 February 2011, Best Lyrics, 2, Nominated), (3, 34th European Academy Prize, 18 February 2011, Best Song, 3, Awarded), ",
        "output": "SELECT song FROM volume WHERE weeks_on_top  >  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of tourist attraction that Alison visited but Rosalind did not visit? ###filtered_database_schema: CREATE TABLE `Ref_Hotel_Star_Ratings` ( star_rating_code CHAR(15) PRIMARY KEY, star_rating_description VARCHAR(80) ); Sample rows from `Ref_Hotel_Star_Ratings`: (1, star), (2, star), (3, star), CREATE TABLE `Locations` ( Location_ID INTEGER, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Locations`: (333, Astro Orbiter, 660 Shea Crescent, None), (368, African Animals, 254 Ottilie Junction, None), (417, American Adventure, 53815 Sawayn Tunnel Apt. 297, None), CREATE TABLE `Ref_Attraction_Types` ( Attraction_Type_Code CHAR(15) PRIMARY KEY, Attraction_Type_Description VARCHAR(255) ); Sample rows from `Ref_Attraction_Types`: (2, park), (3, garden), (5, gallery), CREATE TABLE `Visitors` ( Tourist_ID INTEGER PRIMARY KEY, Tourist_Details VARCHAR(255) ); Sample rows from `Visitors`: (164, Toney), (189, Graciela), (204, Vincent), CREATE TABLE `Features` ( Feature_ID INTEGER, Feature_Details VARCHAR(255) ); Sample rows from `Features`: (523, cafe), (528, park), (543, garden), CREATE TABLE `Hotels` ( hotel_id INTEGER, star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code), pets_allowed_yn CHAR(1), price_range REAL, other_hotel_details VARCHAR(255) ); Sample rows from `Hotels`: (123, 5, 1, 2914989.571, None), (144, 4, , , None), (172, 5, , 17012.682586009, None), CREATE TABLE `Tourist_Attractions` ( Tourist_Attraction_ID INTEGER, Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code), Location_ID INTEGER REFERENCES Locations(Location_ID), How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Tourist_Attractions`: (2113, 2, 579, bus, art museum, None, None, None), (2701, 6, 417, walk, UK gallery, None, None, None), (5076, 2, 868, shuttle, flying elephant, None, None, None), CREATE TABLE `Street_Markets` ( Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Market_Details VARCHAR(255) ); Sample rows from `Street_Markets`: (6852, Broadway), (7067, Fish Farm Market), CREATE TABLE `Shops` ( Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Shop_Details VARCHAR(255) ); Sample rows from `Shops`: (8429, soup), (8449, coffee), (8698, Flower), CREATE TABLE `Museums` ( Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Museum_Details VARCHAR(255) ); Sample rows from `Museums`: (2113, Yale Center for British Art), (2701, The Metropolitan Museum of Art), (5076, MoMA), CREATE TABLE `Royal_Family` ( Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Royal_Family_Details VARCHAR(255) ); Sample rows from `Royal_Family`: (9561, None), (9919, None), CREATE TABLE `Theme_Parks` ( Theme_Park_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Theme_Park_Details VARCHAR(255) ); Sample rows from `Theme_Parks`: (5265, Disney), (6476, Sea World), (6523, Universal Studios), CREATE TABLE `Visits` ( Visit_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID), Visit_Date DATETIME, Visit_Details VARCHAR(40) ); Sample rows from `Visits`: (183, 6653, 377, 2004-08-21 03:06:14, ), (268, 5076, 204, 2013-08-06 05:35:51, ), (273, 9360, 211, 2013-10-27 09:56:08, ), CREATE TABLE `Photos` ( Photo_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Photos`: (211, 8449, game1, None, 702, None), (280, 7067, game2, None, 762, None), (303, 5076, game3, None, 392, None), CREATE TABLE `Staff` ( Staff_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(40), Other_Details VARCHAR(255) ); Sample rows from `Staff`: (170, 6476, Whitney, None), (219, 6476, Kaela, None), (237, 7067, Eunice, None), CREATE TABLE `Tourist_Attraction_Features` ( Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID) ); Sample rows from `Tourist_Attraction_Features`: (5076, 528), (5076, 681), (5265, 523), ",
        "output": "SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Alison\" EXCEPT SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Rosalind\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which countries do not have a stadium that was opened after 2006? ###filtered_database_schema: CREATE TABLE `swimmer` ( ID INT PRIMARY KEY, name TEXT, Nationality TEXT, meter_100 REAL, meter_200 TEXT, meter_300 TEXT, meter_400 TEXT, meter_500 TEXT, meter_600 TEXT, meter_700 TEXT, Time TEXT ); Sample rows from `swimmer`: (7, Przemysław Stańczyk, Poland, 57.31, 1:57.10, 2:56.02, 3:55.36, 4:54.21, 5:52.59, 6:50.91, 7:47.91), (4, Craig Stevens, Australia, 57.35, 1:56.34, 2:55.90, 3:55.72, 4:55.08, 5:54.45, 6:52.69, 7:48.67), (5, Federico Colbertaldo, Italy, 57.66, 1:56.77, 2:56.04, 3:55.37, 4:54.48, 5:53.53, 6:52.58, 7:49.98), CREATE TABLE `stadium` ( ID INT PRIMARY KEY, name TEXT, Capacity INT, City TEXT, Country TEXT, Opening_year INT ); Sample rows from `stadium`: (1, Nou Mestalla, 75000, Valencia, Spain, 2004), (2, Gazprom Arena, 69501, Saint Petersburg, Russia, 2005), (3, Baku Olympic Stadium, 68000, Baku, Azerbaijan, 2005), CREATE TABLE `event` ( ID INT PRIMARY KEY, Name TEXT, Stadium_ID INT REFERENCES stadium(ID), Year TEXT ); Sample rows from `event`: (1, FINA, 1, 2016), (2, Pacific, 10, 2011), (3, World Master, 2, 2012), CREATE TABLE `record` ( ID INT, Result TEXT, Swimmer_ID INT PRIMARY KEY REFERENCES swimmer(ID), Event_ID INT PRIMARY KEY REFERENCES event(ID) ); Sample rows from `record`: (1, NC, 1, 1), (2, Win, 1, 2), (3, Loss, 3, 3), ",
        "output": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year  >  2006"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department? ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT AVG(salary) FROM instructor WHERE dept_name  =  'Physics')"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the name of the mountain with the greatest height. ###filtered_database_schema: CREATE TABLE `mountain` ( Mountain_ID INT PRIMARY KEY, Name TEXT, Height REAL, Prominence REAL, Range TEXT, Country TEXT ); Sample rows from `mountain`: (1, Kibo (Uhuru Pk), 5895.0, 5885.0, Kilimanjaro, Tanzania), (2, Mount Kenya (Batian), 5199.0, 3825.0, Mount Kenya, Kenya), (3, Mawenzi (Hans Meyer Pk), 5148.0, 850.0, Kilimanjaro, Tanzania), CREATE TABLE `climber` ( Climber_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Time TEXT, Points REAL, Mountain_ID INT REFERENCES mountain(Mountain_ID) ); Sample rows from `climber`: (1, Klaus Enders, West Germany, 1:13.05.6, 15.0, 1), (2, Siegfried Schauzu, West Germany, 1:14.56.4, 12.0, 1), (3, Hans Luthringhauser, West Germany, 1:16.58.0, 10.0, 2), ",
        "output": "SELECT name FROM mountain ORDER BY height DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the largest state that borders the state with the highest population ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state WHERE state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state ) ) ) ) AND state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state ) ) );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the number of professors for different school? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT COUNT(*) ,  t1.school_code FROM department as t1 JOIN professor as t2 ON t1.dept_code  =  t2.dept_code GROUP BY t1.school_code"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which part has the least chargeable amount? List the part id and amount. ###filtered_database_schema: CREATE TABLE `Third_Party_Companies` ( company_id INTEGER, company_type VARCHAR(5), company_name VARCHAR(255), company_address VARCHAR(255), other_company_details VARCHAR(255) ); Sample rows from `Third_Party_Companies`: (1, Maintenance Contractor, Langworth-Funk, 615 Jacobs Mews, Uganda), (2, Maintenance Contractor, McDermott Group, 873 Conrad Creek Apt. 286, China), (3, Maintenance Contractor, Schuppe-Carroll, 066 Bechtelar Ridge, United Arab Emirates), CREATE TABLE `Maintenance_Contracts` ( maintenance_contract_id INTEGER, maintenance_contract_company_id INTEGER REFERENCES Third_Party_Companies(company_id), contract_start_date DATETIME, contract_end_date DATETIME, other_contract_details VARCHAR(255) ); Sample rows from `Maintenance_Contracts`: (1, 15, 2017-09-13 11:51:29, 2018-03-16 21:21:50, None), (2, 9, 2017-12-18 11:43:16, 2018-03-22 06:00:37, None), (3, 11, 2017-05-06 02:32:19, 2018-03-20 14:02:54, None), CREATE TABLE `Parts` ( part_id INTEGER, part_name VARCHAR(255), chargeable_yn VARCHAR(1), chargeable_amount VARCHAR(20), other_part_details VARCHAR(255) ); Sample rows from `Parts`: (1, top, 0, 4, None), (2, middle, 1, 9, None), (3, package, 1, 9, None), CREATE TABLE `Skills` ( skill_id INTEGER, skill_code VARCHAR(20), skill_description VARCHAR(255) ); Sample rows from `Skills`: (1, ELEC, Electrical), (2, MECH, Mechanical), (3, TV, TV, Video), CREATE TABLE `Staff` ( staff_id INTEGER, staff_name VARCHAR(255), gender VARCHAR(1), other_staff_details VARCHAR(255) ); Sample rows from `Staff`: (1, Audreanne, 1, Manager), (2, Berneice, 1, Manager), (3, Helena, 1, None), CREATE TABLE `Assets` ( asset_id INTEGER, maintenance_contract_id INTEGER REFERENCES Maintenance_Contracts(maintenance_contract_id), supplier_company_id INTEGER REFERENCES Third_Party_Companies(company_id), asset_details VARCHAR(255), asset_make VARCHAR(20), asset_model VARCHAR(20), asset_acquired_date DATETIME, asset_disposed_date DATETIME, other_asset_details VARCHAR(255) ); Sample rows from `Assets`: (1, 2, 2, dell laptop1, PT, 58 ub, 2017-12-25 00:31:27, 2018-03-14 10:50:00, None), (2, 14, 1, dell laptop2, IN, 35 xt, 2018-01-27 00:59:46, 2018-03-20 04:24:09, None), (3, 7, 2, dell laptop3, IT, 63 ok, 2017-09-07 08:13:15, 2018-03-08 20:50:40, Bad condition), CREATE TABLE `Asset_Parts` ( asset_id INTEGER REFERENCES Assets(asset_id), part_id INTEGER REFERENCES Parts(part_id) ); Sample rows from `Asset_Parts`: (5, 3), (3, 3), (10, 1), CREATE TABLE `Maintenance_Engineers` ( engineer_id INTEGER, company_id INTEGER REFERENCES Third_Party_Companies(company_id), first_name VARCHAR(50), last_name VARCHAR(50), other_details VARCHAR(255) ); Sample rows from `Maintenance_Engineers`: (1, 14, Etha, Reinger, Skilled), (2, 2, Clemens, Orn, None), (3, 6, Samanta, Hauck, None), CREATE TABLE `Engineer_Skills` ( engineer_id INTEGER REFERENCES Maintenance_Engineers(engineer_id), skill_id INTEGER REFERENCES Skills(skill_id) ); Sample rows from `Engineer_Skills`: (10, 2), (10, 1), (15, 1), CREATE TABLE `Fault_Log` ( fault_log_entry_id INTEGER, asset_id INTEGER REFERENCES Assets(asset_id), recorded_by_staff_id INTEGER REFERENCES Staff(staff_id), fault_log_entry_datetime DATETIME, fault_description VARCHAR(255), other_fault_details VARCHAR(255) ); Sample rows from `Fault_Log`: (1, 3, 14, 2018-03-21 04:25:00, system error, None), (2, 7, 4, 2018-03-13 09:43:05, system error, None), (3, 6, 9, 2018-02-24 09:28:20, system error, None), CREATE TABLE `Engineer_Visits` ( engineer_visit_id INTEGER, contact_staff_id INTEGER REFERENCES Staff(staff_id), engineer_id INTEGER REFERENCES Maintenance_Engineers(engineer_id), fault_log_entry_id INTEGER REFERENCES Fault_Log(fault_log_entry_id), fault_status VARCHAR(10), visit_start_datetime DATETIME, visit_end_datetime DATETIME, other_visit_details VARCHAR(255) ); Sample rows from `Engineer_Visits`: (1, 8, 8, 13, Waiting, 1978-10-12 23:14:40, 1988-01-07 06:41:51, None), (2, 7, 15, 13, Return, 1980-05-02 23:31:18, 1990-08-30 22:44:16, None), (3, 7, 15, 4, Waiting, 2010-02-23 18:16:23, 1982-05-13 02:08:41, None), CREATE TABLE `Part_Faults` ( part_fault_id INTEGER, part_id INTEGER REFERENCES Parts(part_id), fault_short_name VARCHAR(20), fault_description VARCHAR(255), other_fault_details VARCHAR(255) ); Sample rows from `Part_Faults`: (1, 1, PW, Package Wrong, None), (2, 1, PW, Package Wrong, None), (3, 3, TW, Top Parts Wrong, None), CREATE TABLE `Fault_Log_Parts` ( fault_log_entry_id INTEGER REFERENCES Fault_Log(fault_log_entry_id), part_fault_id INTEGER REFERENCES Part_Faults(part_fault_id), fault_status VARCHAR(10) ); Sample rows from `Fault_Log_Parts`: (12, 3, Reported), (7, 4, Reported), (1, 9, Return), CREATE TABLE `Skills_Required_To_Fix` ( part_fault_id INTEGER REFERENCES Part_Faults(part_fault_id), skill_id INTEGER REFERENCES Skills(skill_id) ); Sample rows from `Skills_Required_To_Fix`: (3, 2), (12, 3), (6, 1), ",
        "output": "SELECT part_id ,  chargeable_amount FROM parts ORDER BY chargeable_amount ASC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of schools with the top 3 largest size? ###filtered_database_schema: CREATE TABLE `College` ( cName varchar(20) PRIMARY KEY, state varchar(2), enr numeric(5,0) ); Sample rows from `College`: (LSU, LA, 18000), (ASU, AZ, 12000), (OU, OK, 22000), CREATE TABLE `Player` ( pID numeric(5,0) PRIMARY KEY, pName varchar(20), yCard varchar(3), HS numeric(5,0) ); Sample rows from `Player`: (10001, Andrew, no, 1200), (20002, Blake, no, 1600), (30003, Charles, no, 300), CREATE TABLE `Tryout` ( pID numeric(5,0) PRIMARY KEY REFERENCES Player(pID), cName varchar(20) PRIMARY KEY REFERENCES College(cName), pPos varchar(8), decision varchar(3) ); Sample rows from `Tryout`: (10001, LSU, goalie, no), (10001, ASU, goalie, yes), (20002, FSU, striker, yes), ",
        "output": "SELECT cname FROM college ORDER BY enr DESC LIMIT 3"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the distinct ranges of the mountains with the top 3 prominence. ###filtered_database_schema: CREATE TABLE `mountain` ( Mountain_ID INT PRIMARY KEY, Name TEXT, Height REAL, Prominence REAL, Range TEXT, Country TEXT ); Sample rows from `mountain`: (1, Kibo (Uhuru Pk), 5895.0, 5885.0, Kilimanjaro, Tanzania), (2, Mount Kenya (Batian), 5199.0, 3825.0, Mount Kenya, Kenya), (3, Mawenzi (Hans Meyer Pk), 5148.0, 850.0, Kilimanjaro, Tanzania), CREATE TABLE `climber` ( Climber_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Time TEXT, Points REAL, Mountain_ID INT REFERENCES mountain(Mountain_ID) ); Sample rows from `climber`: (1, Klaus Enders, West Germany, 1:13.05.6, 15.0, 1), (2, Siegfried Schauzu, West Germany, 1:14.56.4, 12.0, 1), (3, Hans Luthringhauser, West Germany, 1:16.58.0, 10.0, 2), ",
        "output": "SELECT DISTINCT range FROM mountain ORDER BY prominence DESC LIMIT 3"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the products with the maximum page size A4 that also have a pages per minute color smaller than 5? ###filtered_database_schema: CREATE TABLE `product` ( product_id INT PRIMARY KEY, product TEXT, dimensions TEXT, dpi REAL, pages_per_minute_color REAL, max_page_size TEXT, interface TEXT ); Sample rows from `product`: (1, Fujitsu fi-6130 A4 Series Scanner, 301 x 160 x 158, 600.0, 30.0, A4, USB 2.0), (2, Plustek MobileOffice D28 Corporate, 303 x 94 x 60, 600.0, 28.0, A4, USB 2.0), (3, Xerox Travel Scanner 100, 289 x 51 x 38, 600.0, 4.0, A4, USB 2.0), CREATE TABLE `store` ( Store_ID INT PRIMARY KEY, Store_Name TEXT, Type TEXT, Area_size REAL, Number_of_product_category REAL, Ranking INT ); Sample rows from `store`: (1, Miramichi, City Mall, 179.84, 17811.0, 2), (2, Neguac, Village Store, 26.69, 1678.0, 3), (3, Rogersville, Village Store, 7.23, 1170.0, 1), CREATE TABLE `district` ( District_ID INT PRIMARY KEY, District_name TEXT, Headquartered_City TEXT, City_Population REAL, City_Area REAL ); Sample rows from `district`: (1, Attock District, Attock City, 94620.0, 20.0), (2, Bahawalnagar District, Bahawalnagar City, 134936.0, 13.0), (3, Bahawalpur District, Bahawalpur City, 530438.0, 38.0), CREATE TABLE `store_product` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), Product_ID INT PRIMARY KEY REFERENCES product(Product_ID) ); Sample rows from `store_product`: (1, 1), (1, 2), (1, 3), CREATE TABLE `store_district` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), District_ID INT REFERENCES district(District_ID) ); Sample rows from `store_district`: (1, 15), (2, 15), (3, 11), ",
        "output": "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of members in club \"Bootup Baltimore\" whose age is above 18. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Club` ( ClubID INTEGER, ClubName VARCHAR(40), ClubDesc VARCHAR(1024), ClubLocation VARCHAR(40) ); Sample rows from `Club`: (1, Bootup Baltimore, Refurbish computers; teach kids and adults about computer basics., AKW), (2, Hopkins Student Enterprises, Venture capital fund for student business., AKW), (3, Pen and Paper Gaming, Play pen and paper games on campus., HHH), CREATE TABLE `Member_of_club` ( StuID INTEGER REFERENCES Student(StuID), ClubID INTEGER REFERENCES Club(ClubID), Position VARCHAR(40) ); Sample rows from `Member_of_club`: (1001, 1, President), (1007, 4, Vice-President), (1008, 2, CTO), ",
        "output": "SELECT COUNT(*) FROM club as t1 JOIN member_of_club as t2 ON t1.clubid  =  t2.clubid JOIN student as t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the distinct names of customers who have purchased a keyboard? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 28481 Crist Circle East Burdettestad, IA 21232), (2, 0292 Mitchel Pike Port Abefurt, IA 84402-4249), (3, 4062 Mante Place West Lindsey, DE 76199-8015), CREATE TABLE `Staff` ( staff_id INTEGER, staff_gender VARCHAR(1), staff_name VARCHAR(80) ); Sample rows from `Staff`: (1, 1, Tom), (2, 1, Malika), (3, 1, Katelynn), CREATE TABLE `Suppliers` ( supplier_id INTEGER, supplier_name VARCHAR(80), supplier_phone VARCHAR(80) ); Sample rows from `Suppliers`: (1, Lidl, (692)009-5928), (2, AB Store, 1-483-283-4742), (3, Tesco, 287-071-1153x254), CREATE TABLE `Department_Store_Chain` ( dept_store_chain_id INTEGER, dept_store_chain_name VARCHAR(80) ); Sample rows from `Department_Store_Chain`: (1, South), (2, West), (3, East), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method_code VARCHAR(10), customer_code VARCHAR(20), customer_name VARCHAR(80), customer_address VARCHAR(255), customer_phone VARCHAR(80), customer_email VARCHAR(80) ); Sample rows from `Customers`: (1, Credit Card, 401, Ahmed, 75099 Tremblay Port Apt. 163 South Norrisland, SC 80546, 254-072-4068x33935, margarett.vonrueden@example.com), (2, Credit Card, 665, Chauncey, 8408 Lindsay Court East Dasiabury, IL 72656-3552, +41(8)1897032009, stiedemann.sigrid@example.com), (3, Direct Debit, 844, Lukas, 7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871, 197-417-3557, joelle.monahan@example.com), CREATE TABLE `Products` ( product_id INTEGER, product_type_code VARCHAR(10), product_name VARCHAR(80), product_price DECIMAL(19,4) ); Sample rows from `Products`: (1, Clothes, red jeans, 734.73), (2, Clothes, yellow jeans, 687.23), (3, Clothes, black jeans, 695.16), CREATE TABLE `Supplier_Addresses` ( supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Supplier_Addresses`: (4, 5, 2016-09-22 16:41:31, 2018-03-14 20:06:37), (3, 9, 2014-11-07 19:18:49, 2018-03-16 16:39:58), (3, 2, 2008-11-22 12:01:25, 2018-03-02 19:50:22), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 9, 2017-12-11 05:00:22, 2018-03-20 20:52:34), (1, 6, 2017-10-07 23:00:26, 2018-02-28 14:53:52), (10, 8, 2017-04-04 20:00:27, 2018-02-27 20:08:33), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status_code VARCHAR(10), order_date DATETIME ); Sample rows from `Customer_Orders`: (1, 12, Completed, 2018-02-10 15:44:48), (2, 4, New, 2018-01-31 17:49:18), (3, 1, PartFilled, 2018-02-26 12:39:33), CREATE TABLE `Department_Stores` ( dept_store_id INTEGER, dept_store_chain_id INTEGER REFERENCES Department_Store_Chain(dept_store_chain_id), store_name VARCHAR(80), store_address VARCHAR(255), store_phone VARCHAR(80), store_email VARCHAR(80) ); Sample rows from `Department_Stores`: (1, 1, store_name, 01290 Jeremie Parkway Suite 753 North Arielle, MS 51249, (948)944-5099x2027, bmaggio@example.com), (2, 3, store_name, 082 Purdy Expressway O'Connellshire, IL 31732, 877-917-5029, larissa10@example.org), (3, 4, store_name, 994 Travis Plains North Wadeton, WV 27575-3951, 1-216-312-0375, alexandro.mcclure@example.net), CREATE TABLE `Departments` ( department_id INTEGER, dept_store_id INTEGER REFERENCES Department_Stores(dept_store_id), department_name VARCHAR(80) ); Sample rows from `Departments`: (1, 5, human resource), (2, 11, purchasing), (3, 4, marketing), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id) ); Sample rows from `Order_Items`: (1, 9, 7), (2, 1, 3), (3, 5, 2), CREATE TABLE `Product_Suppliers` ( product_id INTEGER PRIMARY KEY REFERENCES Products(product_id), supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), date_supplied_from DATETIME, date_supplied_to DATETIME, total_amount_purchased VARCHAR(80), total_value_purchased DECIMAL(19,4) ); Sample rows from `Product_Suppliers`: (4, 3, 2017-06-19 00:49:05, 2018-03-24 19:29:18, 89366.05, 36014.6), (8, 4, 2017-07-02 00:35:12, 2018-03-25 07:30:49, 25085.57, 36274.56), (3, 3, 2017-10-14 19:15:37, 2018-03-24 02:29:44, 15752.45, 7273.74), CREATE TABLE `Staff_Department_Assignments` ( staff_id INTEGER PRIMARY KEY REFERENCES Staff(staff_id), department_id INTEGER PRIMARY KEY REFERENCES Departments(department_id), date_assigned_from DATETIME, job_title_code VARCHAR(10), date_assigned_to DATETIME ); Sample rows from `Staff_Department_Assignments`: (5, 4, 2017-06-11 22:55:20, Department Manager, 2018-03-23 21:59:11), (10, 5, 2017-12-18 19:12:15, Sales Person, 2018-03-23 20:25:24), (1, 5, 2018-02-14 03:15:29, Clerical Staff, 2018-03-24 19:57:56), ",
        "output": "SELECT DISTINCT t1.customer_name FROM customers as t1 JOIN customer_orders as t2 ON t1.customer_id  =  t2.customer_id JOIN order_items as t3 ON t2.order_id  =  t3.order_id JOIN products as t4 ON t3.product_id  =  t4.product_id WHERE t4.product_name  =  \"keyboard\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the characters of actors in descending order of age? ###filtered_database_schema: CREATE TABLE `musical` ( Musical_ID INT PRIMARY KEY, Name TEXT, Year INT, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT ); Sample rows from `musical`: (1, The Phantom of the Opera, 1986, Tony Award, Best Book of a Musical, Bob Fosse, Nominated), (2, Les Misérables, 1986, Tony Award, Best Performance by a Leading Actor in a Musical, Cleavant Derricks, Nominated), (3, Wicked, 1986, Tony Award, Best Direction of a Musical, Bob Fosse, Nominated), CREATE TABLE `actor` ( Actor_ID INT PRIMARY KEY, Name TEXT, Musical_ID INT REFERENCES actor(Actor_ID), Character TEXT, Duration TEXT, age INT ); Sample rows from `actor`: (1, Ray Meagher, 1, Alf Stewart, 1988—, 26), (2, Tom Oliver, 1, Lou Carpenter, 1988, 1992—, 22), (3, Lynne McGranger, 2, Irene Roberts, 1993—, 21), ",
        "output": "SELECT character FROM actor ORDER BY age DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Report the number of students in each classroom. ###filtered_database_schema: CREATE TABLE `list` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Grade INTEGER, Classroom INTEGER ); Sample rows from `list`: (CAR, MAUDE, 2, 101), (KRISTENSEN, STORMY, 6, 112), (VANDERWOUDE, SHERWOOD, 3, 107), CREATE TABLE `teachers` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Classroom INTEGER ); Sample rows from `teachers`: (MACROSTIE, MIN, 101), (COVIN, JEROME, 102), (MOYER, OTHA, 103), ",
        "output": "SELECT classroom ,  COUNT(*) FROM list GROUP BY classroom"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return all reviewer names and movie names together in a single list. ###filtered_database_schema: CREATE TABLE `Movie` ( mID INT PRIMARY KEY, title TEXT, year INT, director TEXT ); Sample rows from `Movie`: (101, Gone with the Wind, 1939, Victor Fleming), (102, Star Wars, 1977, George Lucas), (103, The Sound of Music, 1965, Robert Wise), CREATE TABLE `Reviewer` ( rID INT PRIMARY KEY, name TEXT ); Sample rows from `Reviewer`: (201, Sarah Martinez), (202, Daniel Lewis), (203, Brittany Harris), CREATE TABLE `Rating` ( rID INT REFERENCES Reviewer(rID), mID INT REFERENCES Movie(mID), stars INT, ratingDate date ); Sample rows from `Rating`: (201, 101, 2, 2011-01-22), (201, 101, 4, 2011-01-27), (202, 106, 4, None), ",
        "output": "SELECT name FROM reviewer UNION SELECT title FROM movie"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of wrestlers who have never been eliminated? ###filtered_database_schema: CREATE TABLE `wrestler` ( Wrestler_ID INT PRIMARY KEY, Name TEXT, Reign TEXT, Days_held TEXT, Location TEXT, Event TEXT ); Sample rows from `wrestler`: (1, Rey Misterio Sr., 1, 344, Tijuana , Mexico, Live event), (2, Fishman, 1, 113, Tijuana , Mexico, Live event), (3, Villaño IV, 1, 1285, Tijuana , Mexico, Live event), CREATE TABLE `Elimination` ( Elimination_ID TEXT PRIMARY KEY, Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID), Team TEXT, Eliminated_By TEXT, Elimination_Move TEXT, Time TEXT ); Sample rows from `Elimination`: (1, 1, Team Orton, Punk, Go To Sleep, 00:11), (2, 2, Team Batista, Benjamin, Paydirt, 07:38), (3, 4, Team Batista, Orton, Rope hung DDT, 10:45), ",
        "output": "SELECT name FROM wrestler WHERE wrestler_id NOT IN (SELECT wrestler_id FROM elimination)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what are the major cities of the united states ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT city_name FROM city WHERE population  >  150000;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the description of all aircrafts. ###filtered_database_schema: CREATE TABLE `pilot` ( Pilot_Id int(11) PRIMARY KEY, Name varchar(50), Age int(11) ); Sample rows from `pilot`: (1, Prof. Zackery Collins, 23), (2, Katheryn Gorczany IV, 20), (3, Mr. Cristian Halvorson II, 23), CREATE TABLE `aircraft` ( Aircraft_ID int(11) PRIMARY KEY, Aircraft varchar(50), Description varchar(50), Max_Gross_Weight varchar(50), Total_disk_area varchar(50), Max_disk_Loading varchar(50) ); Sample rows from `aircraft`: (1, Robinson R-22, Light utility helicopter, 1,370 lb (635 kg), 497 ft² (46.2 m²), 2.6 lb/ft² (14 kg/m²)), (2, Bell 206B3 JetRanger, Turboshaft utility helicopter, 3,200 lb (1,451 kg), 872 ft² (81.1 m²), 3.7 lb/ft² (18 kg/m²)), (3, CH-47D Chinook, Tandem rotor helicopter, 50,000 lb (22,680 kg), 5,655 ft² (526 m²), 8.8 lb/ft² (43 kg/m²)), CREATE TABLE `match` ( Round REAL PRIMARY KEY, Location TEXT, Country TEXT, Date TEXT, Fastest_Qualifying TEXT, Winning_Pilot TEXT REFERENCES pilot(Pilot_Id), Winning_Aircraft TEXT REFERENCES aircraft(Aircraft_ID) ); Sample rows from `match`: (1.0, Mina' Zayid , Abu Dhabi, United Arab Emirates, March 26–27, Hannes Arch, 1, 1), (2.0, Swan River , Perth, Australia, April 17–18, Paul Bonhomme, 4, 1), (3.0, Flamengo Beach , Rio de Janeiro, Brazil, May 8–9, Hannes Arch, 6, 2), CREATE TABLE `airport` ( Airport_ID INT PRIMARY KEY, Airport_Name TEXT, Total_Passengers REAL, %_Change_2007 TEXT, International_Passengers REAL, Domestic_Passengers REAL, Transit_Passengers REAL, Aircraft_Movements REAL, Freight_Metric_Tonnes REAL ); Sample rows from `airport`: (1, London Heathrow, 67054745.0, 1.5%, 61344438.0, 5562516.0, 147791.0, 478693.0, 1397054.0), (2, London Gatwick, 34205887.0, 2.9%, 30431051.0, 3730963.0, 43873.0, 263653.0, 107702.0), (3, London Stansted, 22360364.0, 6.0%, 19996947.0, 2343428.0, 19989.0, 193282.0, 197738.0), CREATE TABLE `airport_aircraft` ( ID INT, Airport_ID INT PRIMARY KEY REFERENCES airport(Airport_ID), Aircraft_ID INT PRIMARY KEY REFERENCES aircraft(Aircraft_ID) ); Sample rows from `airport_aircraft`: (1, 6, 5), (2, 2, 1), (3, 1, 2), ",
        "output": "SELECT description FROM aircraft"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show all video games with type Collectible card game. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Video_Games` ( GameID INTEGER, GName VARCHAR(40), GType VARCHAR(40) ); Sample rows from `Video_Games`: (1, RNG Stone, Collectible card game), (2, The Vanishing of Eric Calder, Walking Simulator), (3, Grand Term Assignment, Role-playing game), CREATE TABLE `Plays_Games` ( StuID INTEGER REFERENCES Student(StuID), GameID INTEGER REFERENCES Video_Games(GameID), Hours_Played INTEGER ); Sample rows from `Plays_Games`: (1001, 1, 35), (1001, 2, 15), (1001, 5, 1), CREATE TABLE `SportsInfo` ( StuID INTEGER REFERENCES Student(StuID), SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1) ); Sample rows from `SportsInfo`: (1001, Athletics, 2, 5, N), (1002, Football, 7, 20, Y), (1003, Football, 45, 18, Y), ",
        "output": "SELECT gname FROM video_games WHERE gtype  =  \"Collectible card game\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the team of each player and sort them in ascending alphabetical order. ###filtered_database_schema: CREATE TABLE `school` ( School_ID INT PRIMARY KEY, School TEXT, Location TEXT, Enrollment REAL, Founded REAL, Denomination TEXT, Boys_or_Girls TEXT, Day_or_Boarding TEXT, Year_Entered_Competition REAL, School_Colors TEXT ); Sample rows from `school`: (1, St Aloysius' College, Milsons Point, 1200.0, 1879.0, Catholic, Boys, Day, 1929.0, Royal Blue and Gold), (2, Barker College, Hornsby, 2300.0, 1890.0, Anglican, Boys only to Yr 9 Co-ed Year 10 to 12, Day & Boarding, 1929.0, Red & Blue), (3, Cranbrook School, Bellevue Hill, 1000.0, 1918.0, Anglican, Boys, Day & Boarding, 1929.0, Red, White & Blue), CREATE TABLE `school_details` ( School_ID INT PRIMARY KEY REFERENCES school(School_ID), Nickname TEXT, Colors TEXT, League TEXT, Class TEXT, Division TEXT ); Sample rows from `school_details`: (1, Tigers, Blue and Yellow, DSHA, Flight A, Division 1), (2, Auks, Dark Green and White, DSHA, Flight B, Division 3), (3, Buccaneers, Garnet and White, DSHA, Fight A, Division 1), CREATE TABLE `school_performance` ( School_Id INT PRIMARY KEY REFERENCES school(School_ID), School_Year TEXT PRIMARY KEY, Class_A TEXT, Class_AA TEXT ); Sample rows from `school_performance`: (1, 1987-88, Yantis, Blanco), (1, 1988-89, Happy, Blanco), (1, 1989-90, Skidmore-Tynan, Bishop), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Team TEXT, Age INT, Position TEXT, School_ID INT REFERENCES school(School_ID) ); Sample rows from `player`: (1, Timothy Beckham, Tampa Bay Devil Rays, 15, Shortstop, 1), (2, Pedro Álvarez, Pittsburgh Pirates, 14, Third baseman, 2), (3, Eric Hosmer, Kansas City Royals, 16, First Baseman, 1), ",
        "output": "SELECT team FROM player ORDER BY team ASC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the student ID and login name of the student with the most course enrollments ###filtered_database_schema: CREATE TABLE `Course_Authors_and_Tutors` ( author_id INTEGER, author_tutor_ATB VARCHAR(3), login_name VARCHAR(40), password VARCHAR(40), personal_name VARCHAR(80), middle_name VARCHAR(80), family_name VARCHAR(80), gender_mf VARCHAR(1), address_line_1 VARCHAR(80) ); Sample rows from `Course_Authors_and_Tutors`: (1, 331, jmckenzie, c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b, Cathrine, Ruthie, Grant, 0, 756 Monahan Mews Spinkashire, NJ 64230-5098), (2, 975, heidenreich.ara, 24b0ee84063c3b017ab1839e01b7280f47f7c7c2, Retha, Corene, Armstrong, 0, 98623 Huels Manor Jasttown, DE 31611), (3, 349, clementina29, cdaf6c3483f19e2253659a40a3aab786a3390f78, Darius, Ethyl, Reichel, 0, 99296 Keeling Courts North Audreanne, IL 28272), CREATE TABLE `Students` ( student_id INTEGER, date_of_registration DATETIME, date_of_latest_logon DATETIME, login_name VARCHAR(40), password VARCHAR(10), personal_name VARCHAR(40), middle_name VARCHAR(40), family_name VARCHAR(40) ); Sample rows from `Students`: (1, 2015-07-22 13:32:35, 2017-10-17 22:52:26, annamae.hoppe, db8765bb6f, Wilson, Aubrey, Ward), (2, 2015-07-02 00:21:42, 2017-06-24 22:16:27, wmiller, 35faf8182a, Karson, Luella, Jaskolski), (3, 2015-10-11 03:23:27, 2018-03-10 23:22:23, ahartmann, 8e064ec4e6, Mariela, Brandt, Legros), CREATE TABLE `Subjects` ( subject_id INTEGER, subject_name VARCHAR(120) ); Sample rows from `Subjects`: (1, Computer Science), (2, Arts), (3, Language), CREATE TABLE `Courses` ( course_id INTEGER, author_id INTEGER REFERENCES Course_Authors_and_Tutors(author_id), subject_id INTEGER REFERENCES Subjects(subject_id), course_name VARCHAR(120), course_description VARCHAR(255) ); Sample rows from `Courses`: (1, 8, 1, database, database), (2, 6, 1, advanced database, advanced database), (3, 15, 1, operating system, operating system), CREATE TABLE `Student_Course_Enrolment` ( registration_id INTEGER, student_id INTEGER REFERENCES Students(student_id), course_id INTEGER REFERENCES Courses(course_id), date_of_enrolment DATETIME, date_of_completion DATETIME ); Sample rows from `Student_Course_Enrolment`: (1, 11, 2, 2017-10-09 07:09:02, 2018-02-26 07:48:52), (2, 15, 4, 2017-11-13 12:49:33, 2018-03-04 01:24:56), (3, 10, 8, 2017-10-17 13:50:40, 2018-03-22 02:53:01), CREATE TABLE `Student_Tests_Taken` ( registration_id INTEGER REFERENCES Student_Course_Enrolment(registration_id), date_test_taken DATETIME, test_result VARCHAR(255) ); Sample rows from `Student_Tests_Taken`: (12, 2018-03-25 03:27:16, Fail), (10, 2018-03-25 21:50:22, Pass), (7, 2018-03-21 00:32:25, Pass), ",
        "output": "SELECT t1.student_id ,  t2.login_name FROM student_course_enrolment as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id GROUP BY t1.student_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the different types of vocals? ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT DISTINCT type FROM vocals"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the distinct ages of students who have secretary votes in the fall election cycle. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Voting_record` ( StuID INTEGER REFERENCES Student(StuID), Registration_Date VARCHAR(12), Election_Cycle VARCHAR(12), President_Vote INTEGER REFERENCES Student(StuID), Vice_President_Vote INTEGER REFERENCES Student(StuID), Secretary_Vote INTEGER REFERENCES Student(StuID), Treasurer_Vote INTEGER REFERENCES Student(StuID), Class_President_Vote INTEGER REFERENCES Student(StuID), Class_Senator_Vote INTEGER REFERENCES Student(StuID) ); Sample rows from `Voting_record`: (1001, 08/30/2015, Spring, 1004, 1007, 1010, 1035, 1001, 1028), (1002, 08/30/2014, Spring, 1014, 1007, 1020, 1025, 1021, 1028), (1003, 08/30/2013, Spring, 1004, 1017, 1030, 1035, 1031, 1028), ",
        "output": "SELECT DISTINCT t1.age FROM student as t1 JOIN voting_record as t2 ON t1.stuid  =  t2.secretary_vote WHERE t2.election_cycle  =  \"Fall\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of trips that did not end in San Francisco city. ###filtered_database_schema: CREATE TABLE `station` ( id INTEGER, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT ); Sample rows from `station`: (2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013), (3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013), (4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013), CREATE TABLE `status` ( station_id INTEGER REFERENCES station(id), bikes_available INTEGER, docks_available INTEGER, time TEXT ); Sample rows from `status`: (3, 12, 3, 2015-06-02 12:46:02), (3, 12, 3, 2015-06-02 12:47:02), (3, 12, 3, 2015-06-02 12:48:02), CREATE TABLE `trip` ( id INTEGER, duration INTEGER, start_date TEXT, start_station_name TEXT, start_station_id INTEGER, end_date TEXT, end_station_name TEXT, end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER ); Sample rows from `trip`: (900504, 384, 8/21/2015 17:03, Howard at 2nd, 63, 8/21/2015 17:10, San Francisco Caltrain 2 (330 Townsend), 69, 454, Subscriber, 94041), (900505, 588, 8/21/2015 17:03, South Van Ness at Market, 66, 8/21/2015 17:13, San Francisco Caltrain 2 (330 Townsend), 69, 574, Subscriber, 95119), (900506, 196, 8/21/2015 17:04, Market at Sansome, 77, 8/21/2015 17:07, Harry Bridges Plaza (Ferry Building), 50, 636, Subscriber, 94925), CREATE TABLE `weather` ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER ); Sample rows from `weather`: (8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107), (8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107), (8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107), ",
        "output": "SELECT COUNT(*) FROM trip as t1 JOIN station as t2 ON t1.end_station_id  =  t2.id WHERE t2.city !=  \"San Francisco\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the dates in which the mean sea level pressure was between 30.3 and 31? ###filtered_database_schema: CREATE TABLE `station` ( id INTEGER, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT ); Sample rows from `station`: (2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013), (3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013), (4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013), CREATE TABLE `status` ( station_id INTEGER REFERENCES station(id), bikes_available INTEGER, docks_available INTEGER, time TEXT ); Sample rows from `status`: (3, 12, 3, 2015-06-02 12:46:02), (3, 12, 3, 2015-06-02 12:47:02), (3, 12, 3, 2015-06-02 12:48:02), CREATE TABLE `trip` ( id INTEGER, duration INTEGER, start_date TEXT, start_station_name TEXT, start_station_id INTEGER, end_date TEXT, end_station_name TEXT, end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER ); Sample rows from `trip`: (900504, 384, 8/21/2015 17:03, Howard at 2nd, 63, 8/21/2015 17:10, San Francisco Caltrain 2 (330 Townsend), 69, 454, Subscriber, 94041), (900505, 588, 8/21/2015 17:03, South Van Ness at Market, 66, 8/21/2015 17:13, San Francisco Caltrain 2 (330 Townsend), 69, 574, Subscriber, 95119), (900506, 196, 8/21/2015 17:04, Market at Sansome, 77, 8/21/2015 17:07, Harry Bridges Plaza (Ferry Building), 50, 636, Subscriber, 94925), CREATE TABLE `weather` ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER ); Sample rows from `weather`: (8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107), (8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107), (8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107), ",
        "output": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the region names affected by the storm with a number of deaths of least 10? ###filtered_database_schema: CREATE TABLE `storm` ( Storm_ID INT PRIMARY KEY, Name TEXT, Dates_active TEXT, Max_speed INT, Damage_millions_USD REAL, Number_Deaths INT ); Sample rows from `storm`: (1, One, May19–May25, 995, 13.0, 0), (2, Two, August3–August10, 972, 10.75, 7), (3, Three, August5–August14, 972, 13.0, 52), CREATE TABLE `region` ( Region_id INT PRIMARY KEY, Region_code TEXT, Region_name TEXT ); Sample rows from `region`: (1, AF, Afghanistan), (2, AL, Albania), (3, DZ, Algeria), CREATE TABLE `affected_region` ( Region_id INT PRIMARY KEY REFERENCES region(Region_id), Storm_ID INT PRIMARY KEY REFERENCES storm(Storm_ID), Number_city_affected REAL ); Sample rows from `affected_region`: (1, 1, 10.0), (2, 1, 15.0), (3, 3, 30.0), ",
        "output": "SELECT t2.region_name FROM affected_region as t1 JOIN region as t2 ON t1.region_id  =  t2.region_id JOIN storm as t3 ON t1.storm_id  =  t3.storm_id WHERE t3.number_deaths  >=  10"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the number of the papers of \" H. V. Jagadish \" containing keyword \" User Study \" . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT COUNT(DISTINCT t5.title) FROM publication_keyword as t3 JOIN keyword as t1 ON t3.kid  =  t1.kid JOIN publication as t5 ON t5.pid  =  t3.pid JOIN writes as t4 ON t4.pid  =  t5.pid JOIN author as t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.keyword  =  \"User Study\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of different hometowns of these people. ###filtered_database_schema: CREATE TABLE `gymnast` ( Gymnast_ID INT PRIMARY KEY REFERENCES people(People_ID), Floor_Exercise_Points REAL, Pommel_Horse_Points REAL, Rings_Points REAL, Vault_Points REAL, Parallel_Bars_Points REAL, Horizontal_Bar_Points REAL, Total_Points REAL ); Sample rows from `gymnast`: (1, 9.725, 9.737, 9.512, 9.575, 9.762, 9.75, 58.061), (2, 9.7, 9.625, 9.625, 9.65, 9.587, 9.737, 57.924), (4, 8.987, 9.75, 9.75, 9.65, 9.787, 9.725, 57.649), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Age REAL, Height REAL, Hometown TEXT ); Sample rows from `people`: (1, Paul Hamm, 24.0, 1.71, Santo Domingo), (2, Lorraine Súarez Carmona, 21.0, 1.75, Bonao), (3, Ashley Pérez Cabrera, 19.0, 1.7, Miami), ",
        "output": "SELECT COUNT(DISTINCT hometown) FROM people"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the average and minimum weights for people of each sex? ###filtered_database_schema: CREATE TABLE `candidate` ( Candidate_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Poll_Source TEXT, Date TEXT, Support_rate REAL, Consider_rate REAL, Oppose_rate REAL, Unsure_rate REAL ); Sample rows from `candidate`: (1, 1, WNBC/Marist Poll, Feb 12–15, 2007, 0.25, 0.3, 0.43, 0.2), (2, 3, WNBC/Marist Poll, Feb 12–15, 2007, 0.17, 0.42, 0.32, 0.9), (3, 4, FOX News/Opinion Dynamics Poll, Feb 13–14, 2007, 0.18, 0.34, 0.44, 0.3), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Sex TEXT, Name TEXT, Date_of_Birth TEXT, Height REAL, Weight REAL ); Sample rows from `people`: (1, M, Hubert Henno, 06.10.1976, 188.0, 83.0), (2, M, Dominique Daquin, 10.11.1972, 197.0, 85.0), (3, F, Stéphane Antiga, 03.02.1976, 200.0, 94.0), ",
        "output": "SELECT AVG(weight) ,  MIN(weight) ,  sex FROM people GROUP BY sex"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the papers of \" H. V. Jagadish \" containing keyword \" User Study \" . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT t5.title FROM publication_keyword as t3 JOIN keyword as t1 ON t3.kid  =  t1.kid JOIN publication as t5 ON t5.pid  =  t3.pid JOIN writes as t4 ON t4.pid  =  t5.pid JOIN author as t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.keyword  =  \"User Study\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: who wrote the most papers on syntactic parsing ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of films. ###filtered_database_schema: CREATE TABLE `film` ( Film_ID INT PRIMARY KEY, Title TEXT, Studio TEXT, Director TEXT, Gross_in_dollar INT ); Sample rows from `film`: (1, ET the Extra-Terrestrial, Universal, Steven Spielberg, 435110554), (2, Tootsie, Columbia, Sydney Pollack, 177200000), (3, An Officer and a Gentleman, Paramount / Lorimar, Taylor Hackford, 129795554), CREATE TABLE `market` ( Market_ID INT PRIMARY KEY, Country TEXT, Number_cities INT ); Sample rows from `market`: (1, Japan, 209), (2, China, 540), (3, USA, 700), CREATE TABLE `film_market_estimation` ( Estimation_ID INT PRIMARY KEY, Low_Estimate REAL, High_Estimate REAL, Film_ID INT REFERENCES film(Film_ID), Type TEXT, Market_ID INT REFERENCES market(Market_ID), Year INT ); Sample rows from `film_market_estimation`: (1, 80000.0, 80400.0, 1, Mass suicide murder, 1, 1945), (2, 8000.0, 8000.0, 2, Mass suicide, 2, 1944), (3, 3000.0, 80400.0, 3, Mass human sacrifice, 3, 1487), ",
        "output": "SELECT COUNT(*) FROM film"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the year of \" Making database systems usable \" ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT year FROM publication WHERE title  =  \"Making database systems usable\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of the directors who made exactly one movie excluding director NULL? ###filtered_database_schema: CREATE TABLE `Movie` ( mID INT PRIMARY KEY, title TEXT, year INT, director TEXT ); Sample rows from `Movie`: (101, Gone with the Wind, 1939, Victor Fleming), (102, Star Wars, 1977, George Lucas), (103, The Sound of Music, 1965, Robert Wise), CREATE TABLE `Reviewer` ( rID INT PRIMARY KEY, name TEXT ); Sample rows from `Reviewer`: (201, Sarah Martinez), (202, Daniel Lewis), (203, Brittany Harris), CREATE TABLE `Rating` ( rID INT REFERENCES Reviewer(rID), mID INT REFERENCES Movie(mID), stars INT, ratingDate date ); Sample rows from `Rating`: (201, 101, 2, 2011-01-22), (201, 101, 4, 2011-01-27), (202, 106, 4, None), ",
        "output": "SELECT director FROM movie WHERE director != \"null\" GROUP BY director HAVING COUNT(*)  =  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the major that is studied by the largest number of students. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Voting_record` ( StuID INTEGER REFERENCES Student(StuID), Registration_Date VARCHAR(12), Election_Cycle VARCHAR(12), President_Vote INTEGER REFERENCES Student(StuID), Vice_President_Vote INTEGER REFERENCES Student(StuID), Secretary_Vote INTEGER REFERENCES Student(StuID), Treasurer_Vote INTEGER REFERENCES Student(StuID), Class_President_Vote INTEGER REFERENCES Student(StuID), Class_Senator_Vote INTEGER REFERENCES Student(StuID) ); Sample rows from `Voting_record`: (1001, 08/30/2015, Spring, 1004, 1007, 1010, 1035, 1001, 1028), (1002, 08/30/2014, Spring, 1014, 1007, 1020, 1025, 1021, 1028), (1003, 08/30/2013, Spring, 1004, 1017, 1030, 1035, 1031, 1028), ",
        "output": "SELECT major FROM student GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the maximum and minimum number of transit passengers of all aiports. ###filtered_database_schema: CREATE TABLE `pilot` ( Pilot_Id int(11) PRIMARY KEY, Name varchar(50), Age int(11) ); Sample rows from `pilot`: (1, Prof. Zackery Collins, 23), (2, Katheryn Gorczany IV, 20), (3, Mr. Cristian Halvorson II, 23), CREATE TABLE `aircraft` ( Aircraft_ID int(11) PRIMARY KEY, Aircraft varchar(50), Description varchar(50), Max_Gross_Weight varchar(50), Total_disk_area varchar(50), Max_disk_Loading varchar(50) ); Sample rows from `aircraft`: (1, Robinson R-22, Light utility helicopter, 1,370 lb (635 kg), 497 ft² (46.2 m²), 2.6 lb/ft² (14 kg/m²)), (2, Bell 206B3 JetRanger, Turboshaft utility helicopter, 3,200 lb (1,451 kg), 872 ft² (81.1 m²), 3.7 lb/ft² (18 kg/m²)), (3, CH-47D Chinook, Tandem rotor helicopter, 50,000 lb (22,680 kg), 5,655 ft² (526 m²), 8.8 lb/ft² (43 kg/m²)), CREATE TABLE `match` ( Round REAL PRIMARY KEY, Location TEXT, Country TEXT, Date TEXT, Fastest_Qualifying TEXT, Winning_Pilot TEXT REFERENCES pilot(Pilot_Id), Winning_Aircraft TEXT REFERENCES aircraft(Aircraft_ID) ); Sample rows from `match`: (1.0, Mina' Zayid , Abu Dhabi, United Arab Emirates, March 26–27, Hannes Arch, 1, 1), (2.0, Swan River , Perth, Australia, April 17–18, Paul Bonhomme, 4, 1), (3.0, Flamengo Beach , Rio de Janeiro, Brazil, May 8–9, Hannes Arch, 6, 2), CREATE TABLE `airport` ( Airport_ID INT PRIMARY KEY, Airport_Name TEXT, Total_Passengers REAL, %_Change_2007 TEXT, International_Passengers REAL, Domestic_Passengers REAL, Transit_Passengers REAL, Aircraft_Movements REAL, Freight_Metric_Tonnes REAL ); Sample rows from `airport`: (1, London Heathrow, 67054745.0, 1.5%, 61344438.0, 5562516.0, 147791.0, 478693.0, 1397054.0), (2, London Gatwick, 34205887.0, 2.9%, 30431051.0, 3730963.0, 43873.0, 263653.0, 107702.0), (3, London Stansted, 22360364.0, 6.0%, 19996947.0, 2343428.0, 19989.0, 193282.0, 197738.0), CREATE TABLE `airport_aircraft` ( ID INT, Airport_ID INT PRIMARY KEY REFERENCES airport(Airport_ID), Aircraft_ID INT PRIMARY KEY REFERENCES aircraft(Aircraft_ID) ); Sample rows from `airport_aircraft`: (1, 6, 5), (2, 2, 1), (3, 1, 2), ",
        "output": "SELECT MAX(transit_passengers) ,  MIN(transit_passengers) FROM airport"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the number of invoices and total money billed in them from CA? ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the employee ids for each employee and final dates of employment at their last job? ###filtered_database_schema: CREATE TABLE `regions` ( REGION_ID decimal(5,0) PRIMARY KEY, REGION_NAME varchar(25) ); Sample rows from `regions`: (1, Europe\\r), (2, Americas\\r), (3, Asia\\r), CREATE TABLE `countries` ( COUNTRY_ID varchar(2) PRIMARY KEY, COUNTRY_NAME varchar(40), REGION_ID decimal(10,0) REFERENCES regions(REGION_ID) ); Sample rows from `countries`: (AR, Argentina, 2), (AU, Australia, 3), (BE, Belgium, 1), CREATE TABLE `departments` ( DEPARTMENT_ID decimal(4,0) PRIMARY KEY, DEPARTMENT_NAME varchar(30), MANAGER_ID decimal(6,0), LOCATION_ID decimal(4,0) ); Sample rows from `departments`: (10, Administration, 200, 1700), (20, Marketing, 201, 1800), (30, Purchasing, 114, 1700), CREATE TABLE `jobs` ( JOB_ID varchar(10) PRIMARY KEY, JOB_TITLE varchar(35), MIN_SALARY decimal(6,0), MAX_SALARY decimal(6,0) ); Sample rows from `jobs`: (AD_PRES, President, 20000, 40000), (AD_VP, Administration Vice President, 15000, 30000), (AD_ASST, Administration Assistant, 3000, 6000), CREATE TABLE `employees` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY, FIRST_NAME varchar(20), LAST_NAME varchar(25), EMAIL varchar(25), PHONE_NUMBER varchar(20), HIRE_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), SALARY decimal(8,2), COMMISSION_PCT decimal(2,2), MANAGER_ID decimal(6,0), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `employees`: (100, Steven, King, SKING, 515.123.4567, 1987-06-17, AD_PRES, 24000, 0, 0, 90), (101, Neena, Kochhar, NKOCHHAR, 515.123.4568, 1987-06-18, AD_VP, 17000, 0, 100, 90), (102, Lex, De Haan, LDEHAAN, 515.123.4569, 1987-06-19, AD_VP, 17000, 0, 100, 90), CREATE TABLE `job_history` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY REFERENCES employees(EMPLOYEE_ID), START_DATE date PRIMARY KEY, END_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `job_history`: (102, 1993-01-13, 1998-07-24, IT_PROG, 60), (101, 1989-09-21, 1993-10-27, AC_ACCOUNT, 110), (101, 1993-10-28, 1997-03-15, AC_MGR, 110), CREATE TABLE `locations` ( LOCATION_ID decimal(4,0) PRIMARY KEY, STREET_ADDRESS varchar(40), POSTAL_CODE varchar(12), CITY varchar(30), STATE_PROVINCE varchar(25), COUNTRY_ID varchar(2) REFERENCES countries(COUNTRY_ID) ); Sample rows from `locations`: (1000, 1297 Via Cola di Rie, 989, Roma, , IT), (1100, 93091 Calle della Testa, 10934, Venice, , IT), (1200, 2017 Shinjuku-ku, 1689, Tokyo, Tokyo Prefecture, JP), ",
        "output": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings. ###filtered_database_schema: CREATE TABLE `Apartment_Buildings` ( building_id INTEGER PRIMARY KEY, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80) ); Sample rows from `Apartment_Buildings`: (133, Normandie Court, Normandie Court, Studio, 7950 Casper Vista Apt. 176 Marquiseberg, CA 70496, Emma, (948)040-1064x387), (153, Mercedes House, Mercedes House, Studio, 354 Otto Villages Charliefort, VT 71664, Brenden, 915-617-2408x832), (191, The Eugene, The Eugene, Flat, 71537 Gorczany Inlet Wisozkburgh, AL 08256, Melyssa, (609)946-0491), CREATE TABLE `Apartments` ( apt_id INTEGER PRIMARY KEY, building_id INTEGER REFERENCES Apartment_Buildings(building_id), apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5) ); Sample rows from `Apartments`: (1, 808, Flat, Suite 645, 1, 3, 7), (2, 624, Flat, Apt. 585, 2, 4, 5), (3, 225, Studio, Apt. 908, 1, 6, 7), CREATE TABLE `Apartment_Facilities` ( apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id), facility_code CHAR(15) PRIMARY KEY ); Sample rows from `Apartment_Facilities`: (1, Boardband), (2, Boardband), (3, Gym), CREATE TABLE `Guests` ( guest_id INTEGER PRIMARY KEY, gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME ); Sample rows from `Guests`: (1, Male, Kip, DuBuque, 1995-11-04 07:09:57), (2, Unknown, Rebeca, Runolfsdottir, 1974-05-12 21:53:58), (3, Female, Keon, Treutel, 1974-08-20 09:28:05), CREATE TABLE `Apartment_Bookings` ( apt_booking_id INTEGER PRIMARY KEY, apt_id INTEGER REFERENCES Apartments(apt_id), guest_id INTEGER REFERENCES Guests(guest_id), booking_status_code CHAR(15), booking_start_date DATETIME, booking_end_date DATETIME ); Sample rows from `Apartment_Bookings`: (258, 10, 2, Provisional, 2016-09-26 17:13:49, 2017-10-07 11:38:48), (279, 15, 15, Provisional, 2016-04-01 06:28:08, 2017-10-25 11:08:42), (337, 8, 5, Provisional, 2017-03-13 16:20:14, 2018-02-19 16:59:08), CREATE TABLE `View_Unit_Status` ( apt_id INTEGER REFERENCES Apartments(apt_id), apt_booking_id INTEGER REFERENCES Apartment_Bookings(apt_booking_id), status_date DATETIME PRIMARY KEY, available_yn BIT ); Sample rows from `View_Unit_Status`: (11, 920, 1970-09-28 10:24:29, 1), (15, 575, 1972-03-23 22:55:53, 1), (15, 924, 1973-10-28 04:30:14, 1), ",
        "output": "SELECT t1.building_address FROM apartment_buildings as t1 JOIN apartments as t2 ON t1.building_id  =  t2.building_id WHERE t2.bathroom_count  >  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the state names and the number of customers living in each state. ###filtered_database_schema: CREATE TABLE `Products` ( product_id INTEGER, product_name VARCHAR(20), product_price DECIMAL(19,4), product_description VARCHAR(255) ); Sample rows from `Products`: (1, dvds, 1322.78, good condition), (2, cloth, 6402.09, good condition), (3, electronics, 2511.29, great condition), CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 92283 Lora Forges Suite 322, Mohrville, 271, Nebraska, USA), (2, 17135 Jaida Fork Suite 798, East Brody, 940, Colorado, USA), (3, 41099 Crist Prairie Suite 507, Evelinebury, 003, Idaho, USA), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method VARCHAR(10), customer_name VARCHAR(80), customer_phone VARCHAR(80), customer_email VARCHAR(80), date_became_customer DATETIME ); Sample rows from `Customers`: (1, Visa, Ron Emard, 1-382-503-5179x53639, shaniya45@example.net, 2011-04-25 22:20:35), (2, MasterCard, Gabe Schroeder, 1-728-537-4293x0885, alexandra91@example.net, 2011-10-17 16:08:25), (3, Discover, Candace Schneider, 940.575.3682x7959, tkassulke@example.com, 2012-01-11 21:17:01), CREATE TABLE `Regular_Orders` ( regular_order_id INTEGER, distributer_id INTEGER REFERENCES Customers(customer_id) ); Sample rows from `Regular_Orders`: (1, 12), (2, 15), (3, 6), CREATE TABLE `Regular_Order_Products` ( regular_order_id INTEGER REFERENCES Regular_Orders(regular_order_id), product_id INTEGER REFERENCES Products(product_id) ); Sample rows from `Regular_Order_Products`: (5, 3), (2, 3), (10, 1), CREATE TABLE `Actual_Orders` ( actual_order_id INTEGER, order_status_code VARCHAR(10), regular_order_id INTEGER REFERENCES Regular_Orders(regular_order_id), actual_order_date DATETIME ); Sample rows from `Actual_Orders`: (1, Success, 8, 2018-03-02 23:26:19), (2, Cancel, 15, 2018-03-02 08:33:39), (3, Cancel, 4, 2018-02-25 10:13:36), CREATE TABLE `Actual_Order_Products` ( actual_order_id INTEGER REFERENCES Actual_Orders(actual_order_id), product_id INTEGER REFERENCES Products(product_id) ); Sample rows from `Actual_Order_Products`: (2, 1), (14, 5), (13, 6), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_from DATETIME, address_type VARCHAR(10), date_to DATETIME ); Sample rows from `Customer_Addresses`: (5, 6, 2016-09-06 19:23:46, House, 2018-02-25 15:34:58), (14, 5, 2016-12-21 03:49:54, House, 2018-03-13 21:20:21), (2, 2, 2014-06-09 06:31:49, Flat, 2018-03-02 21:56:40), CREATE TABLE `Delivery_Routes` ( route_id INTEGER, route_name VARCHAR(50), other_route_details VARCHAR(255) ); Sample rows from `Delivery_Routes`: (1, Torphy Ltd, 16893 Wilderman Terrace Port Lucasburgh, ND 55978-5550), (2, Heidenreich Group, 6534 Cheyenne Trace Suite 242 Koryburgh, PA 21391-9164), (3, Gerhold Inc, 70469 Unique Crest Katherynville, IA 92263-4974), CREATE TABLE `Delivery_Route_Locations` ( location_code VARCHAR(10) PRIMARY KEY, route_id INTEGER REFERENCES Delivery_Routes(route_id), location_address_id INTEGER REFERENCES Addresses(address_id), location_name VARCHAR(50) ); Sample rows from `Delivery_Route_Locations`: (27 City Rd, 11, 5, Labadie-Crooks), (30 Sam Rd, 7, 13, VonRueden, Schmeler and Fay), (67 LV Rd, 11, 6, Carter, Pfannerstill and Rutherford), CREATE TABLE `Trucks` ( truck_id INTEGER, truck_licence_number VARCHAR(20), truck_details VARCHAR(255) ); Sample rows from `Trucks`: (1, 58110, Frida), (2, 33822, Randy), (3, 17106, Laverna), CREATE TABLE `Employees` ( employee_id INTEGER, employee_address_id INTEGER REFERENCES Addresses(address_id), employee_name VARCHAR(80), employee_phone VARCHAR(80) ); Sample rows from `Employees`: (1, 4, Kacie, 716-650-2081), (2, 12, Dejuan, 211.289.9042), (3, 1, Leonie, 816-890-2580), CREATE TABLE `Order_Deliveries` ( location_code VARCHAR(10) REFERENCES Delivery_Route_Locations(location_code), actual_order_id INTEGER REFERENCES Actual_Orders(actual_order_id), delivery_status_code VARCHAR(10), driver_employee_id INTEGER REFERENCES Employees(employee_id), truck_id INTEGER REFERENCES Trucks(truck_id), delivery_date DATETIME ); Sample rows from `Order_Deliveries`: (27 City Rd, 11, Ready, 6, 11, 2018-03-21 00:57:22), (27 City Rd, 1, On Road, 4, 10, 2018-02-26 01:32:49), (27 City Rd, 3, Ready, 1, 2, 2018-03-08 17:17:12), ",
        "output": "SELECT t2.state_province_county ,  COUNT(*) FROM customer_addresses as t1 JOIN addresses as t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the city and name of bank branches that provide business loans. ###filtered_database_schema: CREATE TABLE `bank` ( branch_ID INT PRIMARY KEY, bname varchar(20), no_of_customers INT, city varchar(10), state varchar(20) ); Sample rows from `bank`: (1, morningside, 203, New York City, New York), (2, downtown, 123, Salt Lake City, Utah), (3, broadway, 453, New York City, New York), CREATE TABLE `customer` ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal INT, no_of_loans INT, credit_score INT, branch_ID INT REFERENCES bank(branch_ID), state varchar(20) ); Sample rows from `customer`: (1, Mary, saving, 2000, 2, 30, 2, Utah), (2, Jack, checking, 1000, 1, 20, 1, Texas), (3, Owen, saving, 800000, 0, 210, 3, New York), CREATE TABLE `loan` ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3) REFERENCES customer(Cust_ID), branch_ID varchar(3) REFERENCES bank(branch_ID), amount INT ); Sample rows from `loan`: (1, Mortgages, 1, 1, 2050), (2, Auto, 1, 2, 3000), (3, Business, 3, 3, 5000), ",
        "output": "SELECT t1.bname ,  t1.city FROM bank as t1 JOIN loan as t2 ON t1.branch_id  =  t2.branch_id WHERE t2.loan_type  =  'Business'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the number of customers. ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(50), customer_middle_initial VARCHAR(1), customer_last_name VARCHAR(50), gender VARCHAR(1), email_address VARCHAR(255), login_name VARCHAR(80), login_password VARCHAR(20), phone_number VARCHAR(255), town_city VARCHAR(50), state_county_province VARCHAR(50), country VARCHAR(50) ); Sample rows from `Customers`: (1, Dee, A, Larkin, 1, thora.torphy@example.org, xhartmann, 77789d292604ea04406f, 241.796.1219x37862, North Nellie, WestVirginia, USA), (2, Brennon, H, Weimann, 0, roosevelt.collier@example.org, shayne.lesch, ce97a3e4539347daab96, (943)219-4234x415, South Isabell, Oklahoma, USA), (3, Joesph, K, Schaefer, 0, homenick.ambrose@example.net, feeney.lauriane, a6c7a7064c36b038d402, (488)524-5345, New Nikolas, Arkansas, USA), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 12, 2012-06-27 20:49:56, None), (2, 12, 2012-08-25 07:51:54, None), (3, 8, 2017-11-05 15:32:38, None), CREATE TABLE `Invoices` ( invoice_number INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_date DATETIME ); Sample rows from `Invoices`: (1, 9, 2018-03-01 16:40:48), (2, 9, 2018-03-20 00:21:41), (3, 3, 2018-03-05 08:47:33), CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_account_opened DATETIME, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 8, 2016-07-30 22:22:24, 900, Regular), (2, 3, 2017-05-29 16:45:17, 520, VIP), (3, 8, 2012-05-04 18:50:32, 323, Regular), CREATE TABLE `Product_Categories` ( production_type_code VARCHAR(15) PRIMARY KEY, product_type_description VARCHAR(80), vat_rating DECIMAL(19,4) ); Sample rows from `Product_Categories`: (Food, Food, 15.84), (DVDs, Dvd products, 11.4), (Books, Books, 13.95), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, production_type_code VARCHAR(15) REFERENCES Product_Categories(production_type_code), unit_price DECIMAL(19,4), product_name VARCHAR(80), product_color VARCHAR(20), product_size VARCHAR(20) ); Sample rows from `Products`: (1, 4, Food, 617.95, Coffee Bean, Red, Medium), (2, 4, Books, 558.49, Learning French, Yellow, Medium), (3, 8, Electronics, 563.58, Fans, Black, Medium), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DECIMAL(19,4), transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 13, 12, Payment, 2018-03-15 21:13:57, 613.96, None, None), (2, 9, 1, Payment, 2018-03-13 13:27:46, 368.46, None, None), (3, 6, 1, Refund, 2018-03-03 01:50:25, 1598.25, None, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), product_id INTEGER REFERENCES Products(product_id), product_quantity VARCHAR(50), other_order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 4, 6, None), (2, 4, 10, 7, None), (3, 15, 5, 4, None), CREATE TABLE `Invoice_Line_Items` ( order_item_id INTEGER REFERENCES Order_Items(order_item_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), product_id INTEGER REFERENCES Products(product_id), product_title VARCHAR(80), product_quantity VARCHAR(50), product_price DECIMAL(19,4), derived_product_cost DECIMAL(19,4), derived_vat_payable DECIMAL(19,4), derived_total_cost DECIMAL(19,4) ); Sample rows from `Invoice_Line_Items`: (14, 9, 5, prod_name, 4, 742.37, 191.11, None, 69.82), (3, 9, 15, prod_name, 1, 814.87, 176.29, None, 59.56), (4, 10, 15, prod_name, 8, 943.07, 73.14, None, 59.93), ",
        "output": "SELECT COUNT(*) FROM customers"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of credit cards that the customer with first name Blanche and last name Huels has. ###filtered_database_schema: CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 6, 338, Regular), (2, 14, 562, VIP), (3, 9, 162, VIP), CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(20), customer_last_name VARCHAR(20), customer_address VARCHAR(255), customer_phone VARCHAR(255), customer_email VARCHAR(255), other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Aniyah, Feest, 55975 Theodore Estates Lake Brody, VT 57078, (673)872-5338, fahey.dorian@example.com, None), (2, Susie, Wiza, 6478 Moen Isle Suite 910 Schimmelmouth, VT 96364-4898, 679-845-8645x94312, idickinson@example.com, None), (3, Marcel, Brekke, 1965 Abernathy Plains Port Lilla, LA 44867, 1-511-656-6664, nichole.rodriguez@example.com, None), CREATE TABLE `Customers_Cards` ( card_id INTEGER, customer_id INTEGER, card_type_code VARCHAR(15), card_number VARCHAR(80), date_valid_from DATETIME, date_valid_to DATETIME, other_card_details VARCHAR(255) ); Sample rows from `Customers_Cards`: (1, 14, Credit, 4560596484842, 2011-04-17 09:05:28, 2018-03-07 17:06:19, 5567915676420343), (2, 9, Credit, 4859448397570735, 2012-05-22 02:05:41, 2018-02-25 15:43:32, 4539333582760), (3, 6, Debit, 348237249146948, 2014-08-01 14:26:45, 2018-03-24 15:29:00, 4916210554814), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, previous_transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), card_id INTEGER REFERENCES Customers_Cards(card_id), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DOUBLE, transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 925, 15, 1, Payment, 2018-03-24 06:41:41, 1701.23, None, None), (2, 494, 3, 2, Refund, 2018-03-24 12:08:55, 1931.76, None, None), (3, 642, 4, 3, Payment, 2018-03-24 09:08:27, 486.56, None, None), ",
        "output": "SELECT COUNT(*) FROM customers_cards as t1 JOIN customers as t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_first_name  =  \"Blanche\" AND t2.customer_last_name  =  \"Huels\" AND t1.card_type_code  =  \"Credit\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many schools are there? ###filtered_database_schema: CREATE TABLE `school` ( School_ID INT PRIMARY KEY, School TEXT, Location TEXT, Enrollment REAL, Founded REAL, Denomination TEXT, Boys_or_Girls TEXT, Day_or_Boarding TEXT, Year_Entered_Competition REAL, School_Colors TEXT ); Sample rows from `school`: (1, St Aloysius' College, Milsons Point, 1200.0, 1879.0, Catholic, Boys, Day, 1929.0, Royal Blue and Gold), (2, Barker College, Hornsby, 2300.0, 1890.0, Anglican, Boys only to Yr 9 Co-ed Year 10 to 12, Day & Boarding, 1929.0, Red & Blue), (3, Cranbrook School, Bellevue Hill, 1000.0, 1918.0, Anglican, Boys, Day & Boarding, 1929.0, Red, White & Blue), CREATE TABLE `school_details` ( School_ID INT PRIMARY KEY REFERENCES school(School_ID), Nickname TEXT, Colors TEXT, League TEXT, Class TEXT, Division TEXT ); Sample rows from `school_details`: (1, Tigers, Blue and Yellow, DSHA, Flight A, Division 1), (2, Auks, Dark Green and White, DSHA, Flight B, Division 3), (3, Buccaneers, Garnet and White, DSHA, Fight A, Division 1), CREATE TABLE `school_performance` ( School_Id INT PRIMARY KEY REFERENCES school(School_ID), School_Year TEXT PRIMARY KEY, Class_A TEXT, Class_AA TEXT ); Sample rows from `school_performance`: (1, 1987-88, Yantis, Blanco), (1, 1988-89, Happy, Blanco), (1, 1989-90, Skidmore-Tynan, Bishop), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Team TEXT, Age INT, Position TEXT, School_ID INT REFERENCES school(School_ID) ); Sample rows from `player`: (1, Timothy Beckham, Tampa Bay Devil Rays, 15, Shortstop, 1), (2, Pedro Álvarez, Pittsburgh Pirates, 14, Third baseman, 2), (3, Eric Hosmer, Kansas City Royals, 16, First Baseman, 1), ",
        "output": "SELECT COUNT(*) FROM school"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name and capacity of products with price greater than 700 (in USD). ###filtered_database_schema: CREATE TABLE `Attribute_Definitions` ( attribute_id INTEGER, attribute_name VARCHAR(30), attribute_data_type VARCHAR(10) ); Sample rows from `Attribute_Definitions`: (1, Green, Bool), (2, Black, Bool), (3, Yellow, Bool), CREATE TABLE `Catalogs` ( catalog_id INTEGER, catalog_name VARCHAR(50), catalog_publisher VARCHAR(80), date_of_publication DATETIME, date_of_latest_revision DATETIME ); Sample rows from `Catalogs`: (1, Chocolate, Koepp-Rutherford handmade chocolate store, 2013-03-15 05:09:17, 2017-09-26 12:10:36), (2, Coffee Bean, Murray Coffee shop, 2012-04-13 06:37:09, 2017-10-26 01:16:51), (3, Lemonade, Russel-Gislason Lemon shop, 2012-11-27 19:29:22, 2017-12-04 06:48:13), CREATE TABLE `Catalog_Structure` ( catalog_level_number INTEGER, catalog_id INTEGER REFERENCES Catalogs(catalog_id), catalog_level_name VARCHAR(50) ); Sample rows from `Catalog_Structure`: (1, 1, Category), (8, 2, Sub-Category), (9, 8, Product), CREATE TABLE `Catalog_Contents` ( catalog_entry_id INTEGER, catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number), parent_entry_id INTEGER, previous_entry_id INTEGER, next_entry_id INTEGER, catalog_entry_name VARCHAR(80), product_stock_number VARCHAR(50), price_in_dollars DOUBLE, price_in_euros DOUBLE, price_in_pounds DOUBLE, capacity VARCHAR(20), length VARCHAR(20), height VARCHAR(20), width VARCHAR(20) ); Sample rows from `Catalog_Contents`: (1, 1, 5, 9, 7, Cola, 89 cp, 200.78, 159.84, 172.17, 1, 3, 9, 5), (2, 8, 6, 9, 8, Root beer, 37 hq, 687.59, 590.11, 471.78, 8, 6, 5, 6), (3, 8, 6, 6, 1, Cream Soda, 52 ee, 360.5, 202.32, 110.32, 5, 9, 7, 8), CREATE TABLE `Catalog_Contents_Additional_Attributes` ( catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id), catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number), attribute_id INTEGER, attribute_value VARCHAR(255) ); Sample rows from `Catalog_Contents_Additional_Attributes`: (5, 8, 4, 1), (15, 9, 3, 0), (11, 1, 2, 0), ",
        "output": "SELECT catalog_entry_name ,  capacity FROM catalog_contents WHERE price_in_dollars  >  700"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the name, origin and owner of each program? ###filtered_database_schema: CREATE TABLE `program` ( Program_ID INT PRIMARY KEY, Name TEXT, Origin TEXT, Launch REAL, Owner TEXT ); Sample rows from `program`: (1, Aniworld, Hunan, 2005.0, Hunan Broadcasting System (HBS)), (2, Kaku, Beijing, 2004.0, Beijing Television (BTV)), (3, Toonmax, Shanghai, 2005.0, Shanghai Media Group (SMG)), CREATE TABLE `channel` ( Channel_ID INT PRIMARY KEY, Name TEXT, Owner TEXT, Share_in_percent REAL, Rating_in_percent REAL ); Sample rows from `channel`: (1, CCTV-1, CCTV, 4.9, 0.54), (2, Hunan Satellite TV, HBS, 4.81, 0.53), (3, CCTV-8, CCTV, 3.76, 0.41), CREATE TABLE `broadcast` ( Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID), Program_ID INT PRIMARY KEY REFERENCES program(Program_ID), Time_of_day TEXT ); Sample rows from `broadcast`: (1, 1, Morning), (2, 1, Night), (3, 2, Morning), CREATE TABLE `broadcast_share` ( Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID), Program_ID INT PRIMARY KEY REFERENCES program(Program_ID), Date TEXT, Share_in_percent REAL ); Sample rows from `broadcast_share`: (1, 1, 01,May, 3.1), (2, 1, 02,May, 1.8), (3, 2, 03,May, 2.8), ",
        "output": "SELECT name ,  origin ,  owner FROM program"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the entry name of the most expensive catalog (in USD)? ###filtered_database_schema: CREATE TABLE `Attribute_Definitions` ( attribute_id INTEGER, attribute_name VARCHAR(30), attribute_data_type VARCHAR(10) ); Sample rows from `Attribute_Definitions`: (1, Green, Bool), (2, Black, Bool), (3, Yellow, Bool), CREATE TABLE `Catalogs` ( catalog_id INTEGER, catalog_name VARCHAR(50), catalog_publisher VARCHAR(80), date_of_publication DATETIME, date_of_latest_revision DATETIME ); Sample rows from `Catalogs`: (1, Chocolate, Koepp-Rutherford handmade chocolate store, 2013-03-15 05:09:17, 2017-09-26 12:10:36), (2, Coffee Bean, Murray Coffee shop, 2012-04-13 06:37:09, 2017-10-26 01:16:51), (3, Lemonade, Russel-Gislason Lemon shop, 2012-11-27 19:29:22, 2017-12-04 06:48:13), CREATE TABLE `Catalog_Structure` ( catalog_level_number INTEGER, catalog_id INTEGER REFERENCES Catalogs(catalog_id), catalog_level_name VARCHAR(50) ); Sample rows from `Catalog_Structure`: (1, 1, Category), (8, 2, Sub-Category), (9, 8, Product), CREATE TABLE `Catalog_Contents` ( catalog_entry_id INTEGER, catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number), parent_entry_id INTEGER, previous_entry_id INTEGER, next_entry_id INTEGER, catalog_entry_name VARCHAR(80), product_stock_number VARCHAR(50), price_in_dollars DOUBLE, price_in_euros DOUBLE, price_in_pounds DOUBLE, capacity VARCHAR(20), length VARCHAR(20), height VARCHAR(20), width VARCHAR(20) ); Sample rows from `Catalog_Contents`: (1, 1, 5, 9, 7, Cola, 89 cp, 200.78, 159.84, 172.17, 1, 3, 9, 5), (2, 8, 6, 9, 8, Root beer, 37 hq, 687.59, 590.11, 471.78, 8, 6, 5, 6), (3, 8, 6, 6, 1, Cream Soda, 52 ee, 360.5, 202.32, 110.32, 5, 9, 7, 8), CREATE TABLE `Catalog_Contents_Additional_Attributes` ( catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id), catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number), attribute_id INTEGER, attribute_value VARCHAR(255) ); Sample rows from `Catalog_Contents_Additional_Attributes`: (5, 8, 4, 1), (15, 9, 3, 0), (11, 1, 2, 0), ",
        "output": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name and hours for the project which has the most scientists assigned to it? ###filtered_database_schema: CREATE TABLE `Scientists` ( SSN INT PRIMARY KEY, Name Char(30) ); Sample rows from `Scientists`: (123234877, Michael Rogers), (152934485, Anand Manikutty), (222364883, Carol Smith), CREATE TABLE `Projects` ( Code Char(4) PRIMARY KEY, Name Char(50), Hours INT ); Sample rows from `Projects`: (AeH1, Winds: Studying Bernoullis Principle, 156), (AeH2, Aerodynamics and Bridge Design, 189), (AeH3, Aerodynamics and Gas Mileage, 256), CREATE TABLE `AssignedTo` ( Scientist INT PRIMARY KEY REFERENCES Scientists(SSN), Project char(4) PRIMARY KEY REFERENCES Projects(Code) ); Sample rows from `AssignedTo`: (123234877, AeH1), (152934485, AeH3), (222364883, Ast3), ",
        "output": "SELECT t1.name ,  t1.hours FROM projects as t1 JOIN assignedto as t2 ON t1.code  =  t2.project GROUP BY t2.project ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For each type, how many ships are there? ###filtered_database_schema: CREATE TABLE `mission` ( Mission_ID INT PRIMARY KEY, Ship_ID INT REFERENCES ship(Ship_ID), Code TEXT, Launched_Year INT, Location TEXT, Speed_knots INT, Fate TEXT ); Sample rows from `mission`: (1, 1, VMV-1, 1930, Germany, 25, Decommissioned 1950), (2, 2, VMV-2, 1930, Germany, 25, Decommissioned 1950), (3, 3, VMV-3, 1930, Helsinki , Finland, 23, Lost (burned) 1931), CREATE TABLE `ship` ( Ship_ID INT PRIMARY KEY, Name TEXT, Type TEXT, Nationality TEXT, Tonnage INT ); Sample rows from `ship`: (1, Corbridge, Cargo ship, United Kingdom, 3687), (2, Farringford, Battle ship, United States, 3146), (3, Dromonby, Cargo ship, United Kingdom, 3627), ",
        "output": "SELECT type ,  COUNT(*) FROM ship GROUP BY type"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name all districts with city area greater than 10 or population larger than 100000 ###filtered_database_schema: CREATE TABLE `product` ( product_id INT PRIMARY KEY, product TEXT, dimensions TEXT, dpi REAL, pages_per_minute_color REAL, max_page_size TEXT, interface TEXT ); Sample rows from `product`: (1, Fujitsu fi-6130 A4 Series Scanner, 301 x 160 x 158, 600.0, 30.0, A4, USB 2.0), (2, Plustek MobileOffice D28 Corporate, 303 x 94 x 60, 600.0, 28.0, A4, USB 2.0), (3, Xerox Travel Scanner 100, 289 x 51 x 38, 600.0, 4.0, A4, USB 2.0), CREATE TABLE `store` ( Store_ID INT PRIMARY KEY, Store_Name TEXT, Type TEXT, Area_size REAL, Number_of_product_category REAL, Ranking INT ); Sample rows from `store`: (1, Miramichi, City Mall, 179.84, 17811.0, 2), (2, Neguac, Village Store, 26.69, 1678.0, 3), (3, Rogersville, Village Store, 7.23, 1170.0, 1), CREATE TABLE `district` ( District_ID INT PRIMARY KEY, District_name TEXT, Headquartered_City TEXT, City_Population REAL, City_Area REAL ); Sample rows from `district`: (1, Attock District, Attock City, 94620.0, 20.0), (2, Bahawalnagar District, Bahawalnagar City, 134936.0, 13.0), (3, Bahawalpur District, Bahawalpur City, 530438.0, 38.0), CREATE TABLE `store_product` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), Product_ID INT PRIMARY KEY REFERENCES product(Product_ID) ); Sample rows from `store_product`: (1, 1), (1, 2), (1, 3), CREATE TABLE `store_district` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), District_ID INT REFERENCES district(District_ID) ); Sample rows from `store_district`: (1, 15), (2, 15), (3, 11), ",
        "output": "SELECT district_name FROM district WHERE city_area  >  10 OR city_population  >  100000"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names and number of works for all artists who have sung at least one song in English? ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT t1.artist_name ,  COUNT(*) FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.languages  =  \"english\" GROUP BY t2.artist_name HAVING COUNT(*)  >=  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which countries have more than two members? ###filtered_database_schema: CREATE TABLE `college` ( College_ID INT PRIMARY KEY, Name TEXT, Leader_Name TEXT, College_Location TEXT ); Sample rows from `college`: (1, Saskatchewan School, Ousame Tounkara, Ottawa), (2, B.C. School, Ryan Thelwell, Minnesota), (3, Calgary School, Andre Arlain, St. Francis Xavier), CREATE TABLE `member` ( Member_ID INT PRIMARY KEY, Name TEXT, Country TEXT, College_ID INT REFERENCES college(College_ID) ); Sample rows from `member`: (1, Jack Nicklaus, United States, 1), (2, Billy Casper, United States, 1), (3, Arnold Palmer, Canada, 4), CREATE TABLE `round` ( Round_ID INT PRIMARY KEY, Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Decoration_Theme TEXT, Rank_in_Round INT ); Sample rows from `round`: (1, 1, Walk on the Moon, 1), (1, 2, Soft Dream, 2), (1, 10, Dark Nights, 4), ",
        "output": "SELECT country FROM member GROUP BY country HAVING COUNT(*)  >  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the players whose names contain letter 'a'. ###filtered_database_schema: CREATE TABLE `College` ( cName varchar(20) PRIMARY KEY, state varchar(2), enr numeric(5,0) ); Sample rows from `College`: (LSU, LA, 18000), (ASU, AZ, 12000), (OU, OK, 22000), CREATE TABLE `Player` ( pID numeric(5,0) PRIMARY KEY, pName varchar(20), yCard varchar(3), HS numeric(5,0) ); Sample rows from `Player`: (10001, Andrew, no, 1200), (20002, Blake, no, 1600), (30003, Charles, no, 300), CREATE TABLE `Tryout` ( pID numeric(5,0) PRIMARY KEY REFERENCES Player(pID), cName varchar(20) PRIMARY KEY REFERENCES College(cName), pPos varchar(8), decision varchar(3) ); Sample rows from `Tryout`: (10001, LSU, goalie, no), (10001, ASU, goalie, yes), (20002, FSU, striker, yes), ",
        "output": "SELECT DISTINCT pname FROM player WHERE pname LIKE '%a%'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the latitude, longitude, and city of the station from which the trip with smallest duration started? ###filtered_database_schema: CREATE TABLE `station` ( id INTEGER, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT ); Sample rows from `station`: (2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013), (3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013), (4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013), CREATE TABLE `status` ( station_id INTEGER REFERENCES station(id), bikes_available INTEGER, docks_available INTEGER, time TEXT ); Sample rows from `status`: (3, 12, 3, 2015-06-02 12:46:02), (3, 12, 3, 2015-06-02 12:47:02), (3, 12, 3, 2015-06-02 12:48:02), CREATE TABLE `trip` ( id INTEGER, duration INTEGER, start_date TEXT, start_station_name TEXT, start_station_id INTEGER, end_date TEXT, end_station_name TEXT, end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER ); Sample rows from `trip`: (900504, 384, 8/21/2015 17:03, Howard at 2nd, 63, 8/21/2015 17:10, San Francisco Caltrain 2 (330 Townsend), 69, 454, Subscriber, 94041), (900505, 588, 8/21/2015 17:03, South Van Ness at Market, 66, 8/21/2015 17:13, San Francisco Caltrain 2 (330 Townsend), 69, 574, Subscriber, 95119), (900506, 196, 8/21/2015 17:04, Market at Sansome, 77, 8/21/2015 17:07, Harry Bridges Plaza (Ferry Building), 50, 636, Subscriber, 94925), CREATE TABLE `weather` ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER ); Sample rows from `weather`: (8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107), (8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107), (8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107), ",
        "output": "SELECT t1.lat ,  t1.long ,  t1.city FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id ORDER BY t2.duration LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many female students (sex is F) whose age is below 25? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT COUNT(*) fROM student WHERE sex  =  'f' AND age  <  25"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: how long is the rio grande river ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT length FROM river WHERE river_name  =  \"rio grande\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of festivals held in year 2007? ###filtered_database_schema: CREATE TABLE `festival_detail` ( Festival_ID INT PRIMARY KEY, Festival_Name TEXT, Chair_Name TEXT, Location TEXT, Year INT, Num_of_Audience INT ); Sample rows from `festival_detail`: (1, Panasonic Awards, Raymond Floyd, United States, 2006, 152), (2, Flower Awards, Charles Coody, United States, 2007, 155), (3, Cherry Awards, Doug Ford, United States, 2007, 160), CREATE TABLE `artwork` ( Artwork_ID INT PRIMARY KEY, Type TEXT, Name TEXT ); Sample rows from `artwork`: (1, Program Music/Variety Show, Indonesian Idol), (2, Program Music/Variety Show, I Know), (3, Presenter Music/Variety Show, Loving you), CREATE TABLE `nomination` ( Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID), Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID), Result TEXT ); Sample rows from `nomination`: (1, 2, Nominated), (2, 2, Won), (3, 1, Nominated), ",
        "output": "SELECT festival_name FROM festival_detail WHERE year  =  2007"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of trains for each station, as well as the station network name and services. ###filtered_database_schema: CREATE TABLE `train` ( id INT PRIMARY KEY, train_number INT, name TEXT, origin TEXT, destination TEXT, time TEXT, interval TEXT ); Sample rows from `train`: (1, 16724, Ananthapuri Express, Trivandrum, Chennai, 17:15, Daily), (2, 16127, Guruvayur Express, Chennai, Guruvayur, 22:10, Daily), (3, 16128, Guruvayur Express, Guruvayur, Chennai, 4:49, Daily), CREATE TABLE `station` ( id INT PRIMARY KEY, network_name TEXT, services TEXT, local_authority TEXT ); Sample rows from `station`: (1, Amersham, Metropolitan line and Chiltern Railways, Chiltern), (2, Bushey, London Overground and London Midland, Watford), (3, Brentwood, Greater Anglia, Brentwood), CREATE TABLE `route` ( train_id INT PRIMARY KEY REFERENCES train(id), station_id INT PRIMARY KEY REFERENCES station(id) ); Sample rows from `route`: (1, 1), (1, 2), (1, 3), CREATE TABLE `weekly_weather` ( station_id INT PRIMARY KEY REFERENCES station(id), day_of_week TEXT PRIMARY KEY, high_temperature INT, low_temperature INT, precipitation REAL, wind_speed_mph INT ); Sample rows from `weekly_weather`: (1, Monday, 59, 54, 90.0, 13), (1, Tuesday, 66, 55, 20.0, 12), (1, Wednesday, 60, 52, 10.0, 14), ",
        "output": "SELECT COUNT(*) ,  t1.network_name ,  t1.services FROM station as t1 JOIN route as t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what states are next to the ohio ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds? ###filtered_database_schema: CREATE TABLE `circuits` ( circuitId INTEGER, circuitRef TEXT, name TEXT, location TEXT, country TEXT, lat REAL, lng REAL, alt TEXT, url TEXT ); Sample rows from `circuits`: (1, albert_park, Albert Park Grand Prix Circuit, Melbourne, Australia, -37.8497, 144.968, 10, http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit), (2, sepang, Sepang International Circuit, Kuala Lumpur, Malaysia, 2.76083, 101.738, , http://en.wikipedia.org/wiki/Sepang_International_Circuit), (3, bahrain, Bahrain International Circuit, Sakhir, Bahrain, 26.0325, 50.5106, , http://en.wikipedia.org/wiki/Bahrain_International_Circuit), CREATE TABLE `races` ( raceId INTEGER, year INTEGER, round INTEGER, circuitId INTEGER REFERENCES circuits(circuitId), name TEXT, date TEXT, time TEXT, url TEXT ); Sample rows from `races`: (1, 2009, 1, 1, Australian Grand Prix, 2009-03-29, 06:00:00, http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix), (2, 2009, 2, 2, Malaysian Grand Prix, 2009-04-05, 09:00:00, http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix), (3, 2009, 3, 17, Chinese Grand Prix, 2009-04-19, 07:00:00, http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix), CREATE TABLE `drivers` ( driverId INTEGER, driverRef TEXT, number TEXT, code TEXT, forename TEXT, surname TEXT, dob TEXT, nationality TEXT, url TEXT ); Sample rows from `drivers`: (1, hamilton, 44, HAM, Lewis, Hamilton, 07/01/1985, British, http://en.wikipedia.org/wiki/Lewis_Hamilton), (2, heidfeld, , HEI, Nick, Heidfeld, 10/05/1977, German, http://en.wikipedia.org/wiki/Nick_Heidfeld), (3, rosberg, 6, ROS, Nico, Rosberg, 27/06/1985, German, http://en.wikipedia.org/wiki/Nico_Rosberg), CREATE TABLE `status` ( statusId INTEGER, status TEXT ); Sample rows from `status`: (1, Finished), (2, Disqualified), (3, Accident), CREATE TABLE `seasons` ( year INTEGER, url TEXT ); Sample rows from `seasons`: (1950, http://en.wikipedia.org/wiki/1950_Formula_One_season), (1951, http://en.wikipedia.org/wiki/1951_Formula_One_season), (1952, http://en.wikipedia.org/wiki/1952_Formula_One_season), CREATE TABLE `constructors` ( constructorId INTEGER, constructorRef TEXT, name TEXT, nationality TEXT, url TEXT ); Sample rows from `constructors`: (1, mclaren, McLaren, British, http://en.wikipedia.org/wiki/McLaren), (2, bmw_sauber, BMW Sauber, German, http://en.wikipedia.org/wiki/BMW_Sauber), (3, williams, Williams, British, http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering), CREATE TABLE `constructorStandings` ( constructorStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `constructorStandings`: (1, 18, 1, 14.0, 1, 1, 1), (2, 18, 2, 8.0, 3, 3, 0), (3, 18, 3, 9.0, 2, 2, 0), CREATE TABLE `results` ( resultId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, grid INTEGER, position TEXT, positionText TEXT, positionOrder INTEGER, points REAL, laps TEXT, time TEXT, milliseconds TEXT, fastestLap TEXT, rank TEXT, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId INTEGER ); Sample rows from `results`: (1, 18, 1, 1, 22, 1, 1, 1, 1, 10.0, 58, 34:50.6, 5690616, 39, 2, 01:27.5, 218.3, 1), (2, 18, 2, 2, 3, 5, 2, 2, 2, 8.0, 58, 5.478, 5696094, 41, 3, 01:27.7, 217.586, 1), (3, 18, 3, 3, 7, 7, 3, 3, 3, 6.0, 58, 8.163, 5698779, 41, 5, 01:28.1, 216.719, 1), CREATE TABLE `driverStandings` ( driverStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `driverStandings`: (1, 18, 1, 10.0, 1, 1, 1), (2, 18, 2, 8.0, 2, 2, 0), (3, 18, 3, 6.0, 3, 3, 0), CREATE TABLE `constructorResults` ( constructorResultsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, status TEXT ); Sample rows from `constructorResults`: (1, 18, 1, 14.0, NULL), (2, 18, 2, 8.0, NULL), (3, 18, 3, 9.0, NULL), CREATE TABLE `qualifying` ( qualifyId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, position INTEGER, q1 TEXT, q2 TEXT, q3 TEXT ); Sample rows from `qualifying`: (1, 18, 1, 1, 22, 1, 1:26.572, 1:25.187, 1:26.714), (2, 18, 9, 2, 4, 2, 1:26.103, 1:25.315, 1:26.869), (3, 18, 5, 1, 23, 3, 1:25.664, 1:25.452, 1:27.079), CREATE TABLE `pitStops` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), stop INTEGER PRIMARY KEY, lap INTEGER, time TEXT, duration TEXT, milliseconds INTEGER ); CREATE TABLE `lapTimes` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), lap INTEGER PRIMARY KEY, position INTEGER, time TEXT, milliseconds INTEGER ); ",
        "output": "SELECT DISTINCT t1.forename ,  t1.surname FROM drivers as t1 JOIN laptimes as t2 ON t1.driverid = t2.driverid WHERE t2.milliseconds < 93000"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: who published papers in CVPR 2007 ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT(t2.paperid) DESC;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are teh names of the different products, as well as the number of customers who have ordered each product. ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(50), customer_middle_initial VARCHAR(1), customer_last_name VARCHAR(50), gender VARCHAR(1), email_address VARCHAR(255), login_name VARCHAR(80), login_password VARCHAR(20), phone_number VARCHAR(255), town_city VARCHAR(50), state_county_province VARCHAR(50), country VARCHAR(50) ); Sample rows from `Customers`: (1, Dee, A, Larkin, 1, thora.torphy@example.org, xhartmann, 77789d292604ea04406f, 241.796.1219x37862, North Nellie, WestVirginia, USA), (2, Brennon, H, Weimann, 0, roosevelt.collier@example.org, shayne.lesch, ce97a3e4539347daab96, (943)219-4234x415, South Isabell, Oklahoma, USA), (3, Joesph, K, Schaefer, 0, homenick.ambrose@example.net, feeney.lauriane, a6c7a7064c36b038d402, (488)524-5345, New Nikolas, Arkansas, USA), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 12, 2012-06-27 20:49:56, None), (2, 12, 2012-08-25 07:51:54, None), (3, 8, 2017-11-05 15:32:38, None), CREATE TABLE `Invoices` ( invoice_number INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_date DATETIME ); Sample rows from `Invoices`: (1, 9, 2018-03-01 16:40:48), (2, 9, 2018-03-20 00:21:41), (3, 3, 2018-03-05 08:47:33), CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_account_opened DATETIME, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 8, 2016-07-30 22:22:24, 900, Regular), (2, 3, 2017-05-29 16:45:17, 520, VIP), (3, 8, 2012-05-04 18:50:32, 323, Regular), CREATE TABLE `Product_Categories` ( production_type_code VARCHAR(15) PRIMARY KEY, product_type_description VARCHAR(80), vat_rating DECIMAL(19,4) ); Sample rows from `Product_Categories`: (Food, Food, 15.84), (DVDs, Dvd products, 11.4), (Books, Books, 13.95), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, production_type_code VARCHAR(15) REFERENCES Product_Categories(production_type_code), unit_price DECIMAL(19,4), product_name VARCHAR(80), product_color VARCHAR(20), product_size VARCHAR(20) ); Sample rows from `Products`: (1, 4, Food, 617.95, Coffee Bean, Red, Medium), (2, 4, Books, 558.49, Learning French, Yellow, Medium), (3, 8, Electronics, 563.58, Fans, Black, Medium), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DECIMAL(19,4), transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 13, 12, Payment, 2018-03-15 21:13:57, 613.96, None, None), (2, 9, 1, Payment, 2018-03-13 13:27:46, 368.46, None, None), (3, 6, 1, Refund, 2018-03-03 01:50:25, 1598.25, None, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), product_id INTEGER REFERENCES Products(product_id), product_quantity VARCHAR(50), other_order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 4, 6, None), (2, 4, 10, 7, None), (3, 15, 5, 4, None), CREATE TABLE `Invoice_Line_Items` ( order_item_id INTEGER REFERENCES Order_Items(order_item_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), product_id INTEGER REFERENCES Products(product_id), product_title VARCHAR(80), product_quantity VARCHAR(50), product_price DECIMAL(19,4), derived_product_cost DECIMAL(19,4), derived_vat_payable DECIMAL(19,4), derived_total_cost DECIMAL(19,4) ); Sample rows from `Invoice_Line_Items`: (14, 9, 5, prod_name, 4, 742.37, 191.11, None, 69.82), (3, 9, 15, prod_name, 1, 814.87, 176.29, None, 59.56), (4, 10, 15, prod_name, 8, 943.07, 73.14, None, 59.93), ",
        "output": "SELECT t2.product_name ,  COUNT(*) FROM order_items as t1 JOIN products as t2 ON t1.product_id  =  t2.product_id JOIN orders as t3 ON t3.order_id  =  t1.order_id GROUP BY t2.product_name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Who are the different players and how many years has each played? ###filtered_database_schema: CREATE TABLE `country` ( Country_id INT PRIMARY KEY, Country_name TEXT, Capital TEXT, Official_native_language TEXT ); Sample rows from `country`: (1, Indonesia, Jakarta, Bahasa Indonesia), (2, Iran, Tehran, Persian ( Arabic script )), (3, Iraq, Baghdad, Arabic ( Arabic script ) Kurdish), CREATE TABLE `team` ( Team_id INT PRIMARY KEY, Name TEXT ); Sample rows from `team`: (1, Columbus Crew), (2, Evalyn Feil), (3, Anais VonRueden), CREATE TABLE `match_season` ( Season REAL PRIMARY KEY, Player TEXT, Position TEXT, Country INT REFERENCES country(Country_id), Team INT REFERENCES team(Team_id), Draft_Pick_Number INT, Draft_Class TEXT, College TEXT ); Sample rows from `match_season`: (1996.0, Steve Ralston Category:Articles with hCards, Midfielder, 6, 1, 18, 1996 MLS College Draft, Florida International), (1997.0, Mike Duhaney Category:Articles with hCards, Defender, 6, 2, 87, 1996 MLS Inaugural Player Draft, UNLV), (1998.0, Ben Olsen Category:Articles with hCards, Midfielder, 4, 3, 2, Project-40, Virginia), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Years_Played TEXT, Total_WL TEXT, Singles_WL TEXT, Doubles_WL TEXT, Team INT REFERENCES team(Team_id) ); Sample rows from `player`: (1, Cho Soong-Jae (630), 1 (2011), 2–0, 1–0, 1–0, 1), (2, Chung Hong (717), 1 (2011), 0–0, 0–0, 0–0, 1), (3, Im Kyu-tae (492), 8 (2003–2005, 2007–2011), 6–9, 5–7, 1–2, 1), ",
        "output": "SELECT player ,  years_played FROM player"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of teachers who teach the student called CHRISSY NABOZNY. ###filtered_database_schema: CREATE TABLE `list` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Grade INTEGER, Classroom INTEGER ); Sample rows from `list`: (CAR, MAUDE, 2, 101), (KRISTENSEN, STORMY, 6, 112), (VANDERWOUDE, SHERWOOD, 3, 107), CREATE TABLE `teachers` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Classroom INTEGER ); Sample rows from `teachers`: (MACROSTIE, MIN, 101), (COVIN, JEROME, 102), (MOYER, OTHA, 103), ",
        "output": "SELECT COUNT(*) FROM list as t1 JOIN teachers as t2 ON t1.classroom  =  t2.classroom WHERE t1.firstname  =  \"CHRISSY\" AND t1.lastname  =  \"NABOZNY\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which employees have either destroyed a document or made an authorization to do so? Return their employee ids. ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CV, CV, ), (BK, Book, ), (PR, Paper, ), CREATE TABLE `Ref_Calendar` ( Calendar_Date DATETIME PRIMARY KEY, Day_Number INTEGER ); Sample rows from `Ref_Calendar`: (1972-03-31 09:47:22, 5), (1976-06-15 03:40:06, 7), (1985-05-13 12:19:43, 7), CREATE TABLE `Ref_Locations` ( Location_Code CHAR(15) PRIMARY KEY, Location_Name VARCHAR(255), Location_Description VARCHAR(255) ); Sample rows from `Ref_Locations`: (b, Brazil, ), (c, Canada, ), (e, Edinburgh, ), CREATE TABLE `Roles` ( Role_Code CHAR(15) PRIMARY KEY, Role_Name VARCHAR(255), Role_Description VARCHAR(255) ); Sample rows from `Roles`: (MG, Manager, Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti.), (ED, Editor, Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos.), (PT, Photo, Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt.), CREATE TABLE `All_Documents` ( Document_ID INTEGER, Date_Stored DATETIME REFERENCES Ref_Calendar(Calendar_Date), Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255) ); Sample rows from `All_Documents`: (7, 1976-06-15 03:40:06, CV, Robin CV, None, None), (11, 1986-10-14 17:53:39, CV, Marry CV, None, None), (25, 2008-06-08 12:45:38, BK, One hundred years of solitude, None, None), CREATE TABLE `Employees` ( Employee_ID INTEGER, Role_Code CHAR(15) REFERENCES Roles(Role_Code), Employee_Name VARCHAR(255), Gender_MFU CHAR(1), Date_of_Birth DATETIME, Other_Details VARCHAR(255) ); Sample rows from `Employees`: (25, HR, Leo, , 1973-02-15 17:16:00, None), (30, MG, Ebba, , 1979-09-20 12:50:15, None), (38, ED, Stephanie, 1, 2012-03-30 23:02:28, None), CREATE TABLE `Document_Locations` ( Document_ID INTEGER PRIMARY KEY REFERENCES All_Documents(Document_ID), Location_Code CHAR(15) PRIMARY KEY REFERENCES Ref_Locations(Location_Code), Date_in_Location_From DATETIME PRIMARY KEY REFERENCES Ref_Calendar(Calendar_Date), Date_in_Locaton_To DATETIME REFERENCES Ref_Calendar(Calendar_Date) ); Sample rows from `Document_Locations`: (7, e, 2017-01-06 23:17:22, 2008-06-08 12:45:38), (11, x, 2017-01-06 23:17:22, 2012-07-03 09:48:46), (81, c, 1972-03-31 09:47:22, 1987-11-05 06:11:22), CREATE TABLE `Documents_to_be_Destroyed` ( Document_ID INTEGER REFERENCES All_Documents(Document_ID), Destruction_Authorised_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Destroyed_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Planned_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Actual_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Other_Details VARCHAR(255) ); Sample rows from `Documents_to_be_Destroyed`: (7, 156, 138, 1988-02-01 14:41:52, 2017-01-06 23:17:22, None), (11, 55, 173, 2010-11-26 19:22:50, 1986-10-14 17:53:39, None), (25, 183, 156, 2009-08-18 03:29:08, 1995-01-01 03:52:11, None), ",
        "output": "SELECT destroyed_by_employee_id FROM documents_to_be_destroyed UNION SELECT destruction_authorised_by_employee_id FROM documents_to_be_destroyed"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the customer event id and the corresponding move in date and property id. ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_details VARCHAR(255) ); Sample rows from `Customers`: (4, Mr. Raul Prosacco), (5, Esteban Senger), (16, Tyrique Durgan II), CREATE TABLE `Properties` ( property_id INTEGER, property_type_code CHAR(15), property_address VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Properties`: (24, apartment, 85456 Annie Lodge Suite 449, USA), (107, house, 2580 Yundt Plains, USA), (108, house, 5983 Fleta Throughway, USA), CREATE TABLE `Residents` ( resident_id INTEGER PRIMARY KEY, property_id INTEGER PRIMARY KEY REFERENCES Properties(property_id), date_moved_in DATETIME PRIMARY KEY, date_moved_out DATETIME, other_details VARCHAR(255) ); Sample rows from `Residents`: (6, 954, 2017-06-17 15:43:33, 2017-12-18 03:46:04, Anderson Batz), (10, 605, 2015-03-27 12:00:00, 2018-03-17 07:48:09, Miss Naomie Osinski), (23, 879, 2015-03-27 12:00:00, 2017-11-14 06:28:48, Jess Wyman), CREATE TABLE `Organizations` ( organization_id INTEGER, parent_organization_id INTEGER, organization_details VARCHAR(255) ); Sample rows from `Organizations`: (7, 7, Reinger, Hudson and Nolan Group), (8, 7, Denesik and Sons Party), (10, 8, Robel-Schulist Group), CREATE TABLE `Services` ( service_id INTEGER, organization_id INTEGER REFERENCES Organizations(organization_id), service_type_code CHAR(15), service_details VARCHAR(255) ); Sample rows from `Services`: (10, 10, Cleanning, Satisfied), (11, 7, Check, Satisfied), (13, 8, Moving Out, Satisfied), CREATE TABLE `Residents_Services` ( resident_id INTEGER PRIMARY KEY REFERENCES Residents(resident_id), service_id INTEGER PRIMARY KEY REFERENCES Services(service_id), date_moved_in DATETIME REFERENCES Residents(date_moved_in), property_id INTEGER REFERENCES Residents(property_id), date_requested DATETIME, date_provided DATETIME, other_details VARCHAR(255) ); Sample rows from `Residents_Services`: (6, 49, 2017-06-17 15:43:33, 954, 2016-07-25 01:32:23, 2018-02-26 00:27:11, Satisfied), (23, 41, 2015-03-27 12:00:00, 879, 2016-10-10 21:42:21, 2017-08-21 06:23:06, Unsatisfied), (28, 11, 2015-03-27 12:00:00, 629, 2017-07-14 19:03:47, 2017-08-28 03:43:56, Unsatisfied), CREATE TABLE `Things` ( thing_id INTEGER, organization_id INTEGER REFERENCES Organizations(organization_id), Type_of_Thing_Code CHAR(15), service_type_code CHAR(10), service_details VARCHAR(255) ); Sample rows from `Things`: (1, 8, Electronics, Check, Unsatisfied), (2, 8, Electronics, Cleanning, Satisfied), (10, 8, Commen, Check, Satisfied), CREATE TABLE `Customer_Events` ( Customer_Event_ID INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_moved_in DATETIME REFERENCES Residents(date_moved_in), property_id INTEGER REFERENCES Residents(property_id), resident_id INTEGER REFERENCES Residents(resident_id), thing_id INTEGER REFERENCES Things(thing_id) ); Sample rows from `Customer_Events`: (70, 19, 2015-03-27 12:00:00, 605, 10, 1), (160, 5, 2015-03-27 12:00:00, 879, 23, 80), (166, 16, 2015-03-27 12:00:00, 629, 28, 14), CREATE TABLE `Customer_Event_Notes` ( Customer_Event_Note_ID INTEGER, Customer_Event_ID INTEGER REFERENCES Customer_Events(Customer_Event_ID), service_type_code CHAR(15), resident_id INTEGER, property_id INTEGER, date_moved_in DATETIME ); Sample rows from `Customer_Event_Notes`: (18, 70, Cleanning, 58, 107, 2016-08-04 01:06:05), (21, 428, Check, 87, 445, 2016-12-11 01:05:14), (32, 70, Check, 37, 669, 2016-07-10 04:09:56), CREATE TABLE `Timed_Status_of_Things` ( thing_id INTEGER PRIMARY KEY REFERENCES Things(thing_id), Date_and_Date DATETIME PRIMARY KEY, Status_of_Thing_Code CHAR(15) PRIMARY KEY ); Sample rows from `Timed_Status_of_Things`: (2, 2016-05-27 23:33:34, Open), (2, 2016-07-17 08:35:27, Close), (2, 2017-06-19 02:59:21, In Progress), CREATE TABLE `Timed_Locations_of_Things` ( thing_id INTEGER PRIMARY KEY REFERENCES Things(thing_id), Date_and_Time DATETIME PRIMARY KEY, Location_Code CHAR(15) PRIMARY KEY ); Sample rows from `Timed_Locations_of_Things`: (2, 2016-10-12 12:03:07, 064 Charles Mou), (10, 2016-12-29 00:39:19, 288 Lang Ferry), (10, 2017-10-21 04:21:54, 854 Keeling Sho), ",
        "output": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: where is a good restaurant in the yosemite and mono lake area for french food ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: find the total checkins in Moroccan restaurant in \" Los Angeles \" per day ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT t4.day  ,  SUM(t4.count) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id JOIN checkin as t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\" GROUP BY t4.day;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the email and phone number of Astrid Gruber the customer? ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'? ###filtered_database_schema: CREATE TABLE `Ref_Characteristic_Types` ( characteristic_type_code VARCHAR(15) PRIMARY KEY, characteristic_type_description VARCHAR(80) ); Sample rows from `Ref_Characteristic_Types`: (Grade, Grade), (Purity, Purity), CREATE TABLE `Ref_Colors` ( color_code VARCHAR(15) PRIMARY KEY, color_description VARCHAR(80) ); Sample rows from `Ref_Colors`: (9, red), (5, green), (1, yellow), CREATE TABLE `Ref_Product_Categories` ( product_category_code VARCHAR(15) PRIMARY KEY, product_category_description VARCHAR(80), unit_of_measure VARCHAR(20) ); Sample rows from `Ref_Product_Categories`: (Herbs, Herbs, Handful ), (Seeds, Seeds, Weight - pound,kilo.), (Spices, Spices, Weight - pound,kilo.), CREATE TABLE `Characteristics` ( characteristic_id INTEGER, characteristic_type_code VARCHAR(15) REFERENCES Ref_Characteristic_Types(characteristic_type_code), characteristic_data_type VARCHAR(10), characteristic_name VARCHAR(80), other_characteristic_details VARCHAR(255) ); Sample rows from `Characteristics`: (1, Grade, numquam, slow, None), (2, Grade, doloribus, fast, None), (3, Purity, rem, warm, None), CREATE TABLE `Products` ( product_id INTEGER, color_code VARCHAR(15) REFERENCES Ref_Colors(color_code), product_category_code VARCHAR(15) REFERENCES Ref_Product_Categories(product_category_code), product_name VARCHAR(80), typical_buying_price VARCHAR(20), typical_selling_price VARCHAR(20), product_description VARCHAR(255), other_product_details VARCHAR(255) ); Sample rows from `Products`: (1, 4, Spices, cumin, , 2878.3, et, None), (2, 2, Spices, peper, 352447.2874677, 1892070.2803543, rerum, None), (3, 9, Herbs, basil, 503.8431967, 0.1859512, officia, None), CREATE TABLE `Product_Characteristics` ( product_id INTEGER REFERENCES Products(product_id), characteristic_id INTEGER REFERENCES Characteristics(characteristic_id), product_characteristic_value VARCHAR(50) ); Sample rows from `Product_Characteristics`: (13, 13, low), (11, 2, low), (5, 15, low), ",
        "output": "SELECT t1.product_name FROM products as t1 JOIN ref_product_categories as t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors as t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which locations are shared by more than two wrestlers? ###filtered_database_schema: CREATE TABLE `wrestler` ( Wrestler_ID INT PRIMARY KEY, Name TEXT, Reign TEXT, Days_held TEXT, Location TEXT, Event TEXT ); Sample rows from `wrestler`: (1, Rey Misterio Sr., 1, 344, Tijuana , Mexico, Live event), (2, Fishman, 1, 113, Tijuana , Mexico, Live event), (3, Villaño IV, 1, 1285, Tijuana , Mexico, Live event), CREATE TABLE `Elimination` ( Elimination_ID TEXT PRIMARY KEY, Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID), Team TEXT, Eliminated_By TEXT, Elimination_Move TEXT, Time TEXT ); Sample rows from `Elimination`: (1, 1, Team Orton, Punk, Go To Sleep, 00:11), (2, 2, Team Batista, Benjamin, Paydirt, 07:38), (3, 4, Team Batista, Orton, Rope hung DDT, 10:45), ",
        "output": "SELECT location FROM wrestler GROUP BY location HAVING COUNT(*)  >  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the total account balances for each customer from Utah or Texas? ###filtered_database_schema: CREATE TABLE `bank` ( branch_ID INT PRIMARY KEY, bname varchar(20), no_of_customers INT, city varchar(10), state varchar(20) ); Sample rows from `bank`: (1, morningside, 203, New York City, New York), (2, downtown, 123, Salt Lake City, Utah), (3, broadway, 453, New York City, New York), CREATE TABLE `customer` ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal INT, no_of_loans INT, credit_score INT, branch_ID INT REFERENCES bank(branch_ID), state varchar(20) ); Sample rows from `customer`: (1, Mary, saving, 2000, 2, 30, 2, Utah), (2, Jack, checking, 1000, 1, 20, 1, Texas), (3, Owen, saving, 800000, 0, 210, 3, New York), CREATE TABLE `loan` ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3) REFERENCES customer(Cust_ID), branch_ID varchar(3) REFERENCES bank(branch_ID), amount INT ); Sample rows from `loan`: (1, Mortgages, 1, 1, 2050), (2, Auto, 1, 2, 3000), (3, Business, 3, 3, 5000), ",
        "output": "SELECT SUM(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many lessons did the customer with the first name Ray take? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 3904 Stroman Passage, Port Melyssa, 14445, Georgia, USA), (2, 053 Quigley Island, Hagenesfurt, 22194, Kentucky, USA), (3, 00704 Zoe Alley, Lake Elaina, 08938, Georgia, USA), CREATE TABLE `Staff` ( staff_id INTEGER, staff_address_id INTEGER REFERENCES Addresses(address_id), nickname VARCHAR(80), first_name VARCHAR(80), middle_name VARCHAR(80), last_name VARCHAR(80), date_of_birth DATETIME, date_joined_staff DATETIME, date_left_staff DATETIME ); Sample rows from `Staff`: (1, 14, thompson.constantin, Janessa, Amara, Sawayn, 2010-12-08 16:55:14, 2017-04-27 03:21:26, 2018-03-23 22:53:12), (2, 3, santos45, Camylle, Icie, Weissnat, 2015-08-01 13:22:43, 2016-06-06 08:54:28, 2018-03-10 15:25:00), (3, 5, ynader, Kaitlin, Stephania, Mertz, 1994-05-17 05:32:11, 2018-01-02 12:24:24, 2018-03-24 10:11:08), CREATE TABLE `Vehicles` ( vehicle_id INTEGER, vehicle_details VARCHAR(255) ); Sample rows from `Vehicles`: (1, Van), (2, Truck), (3, Car), CREATE TABLE `Customers` ( customer_id INTEGER, customer_address_id INTEGER REFERENCES Addresses(address_id), customer_status_code VARCHAR(15), date_became_customer DATETIME, date_of_birth DATETIME, first_name VARCHAR(80), last_name VARCHAR(80), amount_outstanding DOUBLE, email_address VARCHAR(250), phone_number VARCHAR(255), cell_mobile_phone_number VARCHAR(255) ); Sample rows from `Customers`: (1, 13, Bad Customer, 2016-05-11 17:03:48, 1998-12-15 13:24:40, Carole, Bernhard, 255.0, everette.goyette@example.org, 07278206718, 861-638-9797), (2, 10, Bad Customer, 2015-11-16 22:52:14, 1995-07-17 12:13:16, Genevieve, Terry, 7256.0, huel.jana@example.org, +14(5)2351480248, 578-518-4785x612), (3, 10, Good Customer, 2016-04-08 00:28:15, 1994-06-21 01:34:56, Clara, Ortiz, 9443.0, hilario.sporer@example.org, 374-483-2758x85087, 1-197-686-2849x8761), CREATE TABLE `Customer_Payments` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), datetime_payment DATETIME PRIMARY KEY, payment_method_code VARCHAR(10), amount_payment DOUBLE ); Sample rows from `Customer_Payments`: (11, 2018-02-05 18:44:46, Direct Debit, 9570.93), (2, 2018-02-24 10:07:05, Direct Debit, 8180.26), (14, 2018-02-27 20:08:53, Direct Debit, 4610.26), CREATE TABLE `Lessons` ( lesson_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), lesson_status_code VARCHAR(15), staff_id INTEGER REFERENCES Staff(staff_id), vehicle_id INTEGER REFERENCES Vehicles(vehicle_id), lesson_date DATETIME, lesson_time VARCHAR(10), price DOUBLE ); Sample rows from `Lessons`: (1, 6, Cancelled, 8, 3, 2018-02-28 10:55:36, 5, 199.0), (2, 8, Cancelled, 14, 3, 2018-03-07 16:12:36, 6, 167.0), (3, 6, Cancelled, 11, 2, 2018-03-03 15:10:16, 3, 352.0), ",
        "output": "SELECT COUNT(*) FROM lessons as t1 JOIN customers as t2 ON t1.customer_id  = t2.customer_id WHERE t2.first_name = \"Ray\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For each race name, What is the maximum fastest lap speed for races after 2004 ordered by year? ###filtered_database_schema: CREATE TABLE `circuits` ( circuitId INTEGER, circuitRef TEXT, name TEXT, location TEXT, country TEXT, lat REAL, lng REAL, alt TEXT, url TEXT ); Sample rows from `circuits`: (1, albert_park, Albert Park Grand Prix Circuit, Melbourne, Australia, -37.8497, 144.968, 10, http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit), (2, sepang, Sepang International Circuit, Kuala Lumpur, Malaysia, 2.76083, 101.738, , http://en.wikipedia.org/wiki/Sepang_International_Circuit), (3, bahrain, Bahrain International Circuit, Sakhir, Bahrain, 26.0325, 50.5106, , http://en.wikipedia.org/wiki/Bahrain_International_Circuit), CREATE TABLE `races` ( raceId INTEGER, year INTEGER, round INTEGER, circuitId INTEGER REFERENCES circuits(circuitId), name TEXT, date TEXT, time TEXT, url TEXT ); Sample rows from `races`: (1, 2009, 1, 1, Australian Grand Prix, 2009-03-29, 06:00:00, http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix), (2, 2009, 2, 2, Malaysian Grand Prix, 2009-04-05, 09:00:00, http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix), (3, 2009, 3, 17, Chinese Grand Prix, 2009-04-19, 07:00:00, http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix), CREATE TABLE `drivers` ( driverId INTEGER, driverRef TEXT, number TEXT, code TEXT, forename TEXT, surname TEXT, dob TEXT, nationality TEXT, url TEXT ); Sample rows from `drivers`: (1, hamilton, 44, HAM, Lewis, Hamilton, 07/01/1985, British, http://en.wikipedia.org/wiki/Lewis_Hamilton), (2, heidfeld, , HEI, Nick, Heidfeld, 10/05/1977, German, http://en.wikipedia.org/wiki/Nick_Heidfeld), (3, rosberg, 6, ROS, Nico, Rosberg, 27/06/1985, German, http://en.wikipedia.org/wiki/Nico_Rosberg), CREATE TABLE `status` ( statusId INTEGER, status TEXT ); Sample rows from `status`: (1, Finished), (2, Disqualified), (3, Accident), CREATE TABLE `seasons` ( year INTEGER, url TEXT ); Sample rows from `seasons`: (1950, http://en.wikipedia.org/wiki/1950_Formula_One_season), (1951, http://en.wikipedia.org/wiki/1951_Formula_One_season), (1952, http://en.wikipedia.org/wiki/1952_Formula_One_season), CREATE TABLE `constructors` ( constructorId INTEGER, constructorRef TEXT, name TEXT, nationality TEXT, url TEXT ); Sample rows from `constructors`: (1, mclaren, McLaren, British, http://en.wikipedia.org/wiki/McLaren), (2, bmw_sauber, BMW Sauber, German, http://en.wikipedia.org/wiki/BMW_Sauber), (3, williams, Williams, British, http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering), CREATE TABLE `constructorStandings` ( constructorStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `constructorStandings`: (1, 18, 1, 14.0, 1, 1, 1), (2, 18, 2, 8.0, 3, 3, 0), (3, 18, 3, 9.0, 2, 2, 0), CREATE TABLE `results` ( resultId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, grid INTEGER, position TEXT, positionText TEXT, positionOrder INTEGER, points REAL, laps TEXT, time TEXT, milliseconds TEXT, fastestLap TEXT, rank TEXT, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId INTEGER ); Sample rows from `results`: (1, 18, 1, 1, 22, 1, 1, 1, 1, 10.0, 58, 34:50.6, 5690616, 39, 2, 01:27.5, 218.3, 1), (2, 18, 2, 2, 3, 5, 2, 2, 2, 8.0, 58, 5.478, 5696094, 41, 3, 01:27.7, 217.586, 1), (3, 18, 3, 3, 7, 7, 3, 3, 3, 6.0, 58, 8.163, 5698779, 41, 5, 01:28.1, 216.719, 1), CREATE TABLE `driverStandings` ( driverStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `driverStandings`: (1, 18, 1, 10.0, 1, 1, 1), (2, 18, 2, 8.0, 2, 2, 0), (3, 18, 3, 6.0, 3, 3, 0), CREATE TABLE `constructorResults` ( constructorResultsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, status TEXT ); Sample rows from `constructorResults`: (1, 18, 1, 14.0, NULL), (2, 18, 2, 8.0, NULL), (3, 18, 3, 9.0, NULL), CREATE TABLE `qualifying` ( qualifyId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, position INTEGER, q1 TEXT, q2 TEXT, q3 TEXT ); Sample rows from `qualifying`: (1, 18, 1, 1, 22, 1, 1:26.572, 1:25.187, 1:26.714), (2, 18, 9, 2, 4, 2, 1:26.103, 1:25.315, 1:26.869), (3, 18, 5, 1, 23, 3, 1:25.664, 1:25.452, 1:27.079), CREATE TABLE `pitStops` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), stop INTEGER PRIMARY KEY, lap INTEGER, time TEXT, duration TEXT, milliseconds INTEGER ); CREATE TABLE `lapTimes` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), lap INTEGER PRIMARY KEY, position INTEGER, time TEXT, milliseconds INTEGER ); ",
        "output": "SELECT MAX(t2.fastestlapspeed) ,  t1.name ,  t1.year FROM races as t1 JOIN results as t2 ON t1.raceid = t2.raceid WHERE t1.year > 2014 GROUP BY t1.name ORDER BY t1.year"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the average and minimum ages across artists from the United States. ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Year_Join INT, Age INT ); Sample rows from `artist`: (1, Vijay Singh, Fiji, 1998, 45), (2, John Daly, United States, 1991, 46), (3, Paul Azinger, United States, 1993, 47), CREATE TABLE `exhibition` ( Exhibition_ID INT PRIMARY KEY, Year INT, Theme TEXT, Artist_ID INT REFERENCES artist(Artist_ID), Ticket_Price REAL ); Sample rows from `exhibition`: (1, 2004, Santa Claus, 1, 19.95), (2, 2005, Christmas stocking, 2, 19.95), (3, 2006, Santa Claus and Rudolph the Red-Nosed Reindeer, 4, 14.95), CREATE TABLE `exhibition_record` ( Exhibition_ID INT PRIMARY KEY REFERENCES exhibition(Exhibition_ID), Date TEXT PRIMARY KEY, Attendance INT ); Sample rows from `exhibition_record`: (1, December 2, 965), (1, December 5, 1098), (1, December 7, 2983), ",
        "output": "SELECT AVG(age) ,  MIN(age) FROM artist WHERE country  =  'United States'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: which states does the ohio river run through ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: find the number of different programs that are broadcast during night time. ###filtered_database_schema: CREATE TABLE `program` ( Program_ID INT PRIMARY KEY, Name TEXT, Origin TEXT, Launch REAL, Owner TEXT ); Sample rows from `program`: (1, Aniworld, Hunan, 2005.0, Hunan Broadcasting System (HBS)), (2, Kaku, Beijing, 2004.0, Beijing Television (BTV)), (3, Toonmax, Shanghai, 2005.0, Shanghai Media Group (SMG)), CREATE TABLE `channel` ( Channel_ID INT PRIMARY KEY, Name TEXT, Owner TEXT, Share_in_percent REAL, Rating_in_percent REAL ); Sample rows from `channel`: (1, CCTV-1, CCTV, 4.9, 0.54), (2, Hunan Satellite TV, HBS, 4.81, 0.53), (3, CCTV-8, CCTV, 3.76, 0.41), CREATE TABLE `broadcast` ( Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID), Program_ID INT PRIMARY KEY REFERENCES program(Program_ID), Time_of_day TEXT ); Sample rows from `broadcast`: (1, 1, Morning), (2, 1, Night), (3, 2, Morning), CREATE TABLE `broadcast_share` ( Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID), Program_ID INT PRIMARY KEY REFERENCES program(Program_ID), Date TEXT, Share_in_percent REAL ); Sample rows from `broadcast_share`: (1, 1, 01,May, 3.1), (2, 1, 02,May, 1.8), (3, 2, 03,May, 2.8), ",
        "output": "SELECT COUNT(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the department name that is in Building \"Mergenthaler\". ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), CREATE TABLE `Department` ( DNO INTEGER, Division VARCHAR(2), DName VARCHAR(25), Room VARCHAR(5), Building VARCHAR(13), DPhone INTEGER ); Sample rows from `Department`: (10, AS, History of Art, 268, Mergenthaler, 7117), (20, AS, Biology, 144, Mudd, 7330), (30, AS, Chemistry, 113, Remsen, 7429), CREATE TABLE `Member_of` ( FacID INTEGER REFERENCES Faculty(FacID), DNO INTEGER REFERENCES Department(DNO), Appt_Type VARCHAR(15) ); Sample rows from `Member_of`: (7792, 600, Primary), (9210, 520, Primary), (9811, 550, Primary), CREATE TABLE `Course` ( CID VARCHAR(7) PRIMARY KEY, CName VARCHAR(40), Credits INTEGER, Instructor INTEGER REFERENCES Faculty(FacID), Days VARCHAR(5), Hours VARCHAR(11), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Course`: (600.101, COMPUTER LITERACY, 3, 6112, MTW, 3, 600), (600.103, INTRODUCTION TO COMPUTER SCIENCE, 1, 4230, Th, 4, 600), (600.107, INTRO TO PROGRAMMING IN JAVA, 3, 1193, MTW, 3, 600), CREATE TABLE `Minor_in` ( StuID INTEGER REFERENCES Student(StuID), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Minor_in`: (1004, 520), (1005, 550), (1006, 50), CREATE TABLE `Enrolled_in` ( StuID INTEGER REFERENCES Student(StuID), CID VARCHAR(7) REFERENCES Course(CID), Grade VARCHAR(2) REFERENCES Gradeconversion(lettergrade) ); Sample rows from `Enrolled_in`: (1001, 550.681, A-), (1001, 600.303, B), (1001, 600.315, B+), CREATE TABLE `Gradeconversion` ( lettergrade VARCHAR(2) PRIMARY KEY, gradepoint FLOAT ); Sample rows from `Gradeconversion`: (A+, 4.0), (A, 4.0), (A-, 3.7), ",
        "output": "SELECT dname FROM department WHERE building  =  \"Mergenthaler\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the denomination of the school that has the most players. ###filtered_database_schema: CREATE TABLE `school` ( School_ID INT PRIMARY KEY, School TEXT, Location TEXT, Enrollment REAL, Founded REAL, Denomination TEXT, Boys_or_Girls TEXT, Day_or_Boarding TEXT, Year_Entered_Competition REAL, School_Colors TEXT ); Sample rows from `school`: (1, St Aloysius' College, Milsons Point, 1200.0, 1879.0, Catholic, Boys, Day, 1929.0, Royal Blue and Gold), (2, Barker College, Hornsby, 2300.0, 1890.0, Anglican, Boys only to Yr 9 Co-ed Year 10 to 12, Day & Boarding, 1929.0, Red & Blue), (3, Cranbrook School, Bellevue Hill, 1000.0, 1918.0, Anglican, Boys, Day & Boarding, 1929.0, Red, White & Blue), CREATE TABLE `school_details` ( School_ID INT PRIMARY KEY REFERENCES school(School_ID), Nickname TEXT, Colors TEXT, League TEXT, Class TEXT, Division TEXT ); Sample rows from `school_details`: (1, Tigers, Blue and Yellow, DSHA, Flight A, Division 1), (2, Auks, Dark Green and White, DSHA, Flight B, Division 3), (3, Buccaneers, Garnet and White, DSHA, Fight A, Division 1), CREATE TABLE `school_performance` ( School_Id INT PRIMARY KEY REFERENCES school(School_ID), School_Year TEXT PRIMARY KEY, Class_A TEXT, Class_AA TEXT ); Sample rows from `school_performance`: (1, 1987-88, Yantis, Blanco), (1, 1988-89, Happy, Blanco), (1, 1989-90, Skidmore-Tynan, Bishop), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Team TEXT, Age INT, Position TEXT, School_ID INT REFERENCES school(School_ID) ); Sample rows from `player`: (1, Timothy Beckham, Tampa Bay Devil Rays, 15, Shortstop, 1), (2, Pedro Álvarez, Pittsburgh Pirates, 14, Third baseman, 2), (3, Eric Hosmer, Kansas City Royals, 16, First Baseman, 1), ",
        "output": "SELECT t2.denomination FROM player as t1 JOIN school as t2 ON t1.school_id  =  t2.school_id GROUP BY t1.school_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What papers were published at CVPR '16 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"RGB-D Object Dataset\" AND t3.title  =  \"Class consistent multi-modal fusion with binary features\" AND t3.year  =  2016 AND t4.venuename  =  \"CVPR\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the average, minimum, and maximum age for different majors. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Video_Games` ( GameID INTEGER, GName VARCHAR(40), GType VARCHAR(40) ); Sample rows from `Video_Games`: (1, RNG Stone, Collectible card game), (2, The Vanishing of Eric Calder, Walking Simulator), (3, Grand Term Assignment, Role-playing game), CREATE TABLE `Plays_Games` ( StuID INTEGER REFERENCES Student(StuID), GameID INTEGER REFERENCES Video_Games(GameID), Hours_Played INTEGER ); Sample rows from `Plays_Games`: (1001, 1, 35), (1001, 2, 15), (1001, 5, 1), CREATE TABLE `SportsInfo` ( StuID INTEGER REFERENCES Student(StuID), SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1) ); Sample rows from `SportsInfo`: (1001, Athletics, 2, 5, N), (1002, Football, 7, 20, Y), (1003, Football, 45, 18, Y), ",
        "output": "SELECT major ,  AVG(age) ,  MIN(age) ,  MAX(age) FROM student GROUP BY major"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the login name of the course author that teaches the course with name \"advanced database\". ###filtered_database_schema: CREATE TABLE `Course_Authors_and_Tutors` ( author_id INTEGER, author_tutor_ATB VARCHAR(3), login_name VARCHAR(40), password VARCHAR(40), personal_name VARCHAR(80), middle_name VARCHAR(80), family_name VARCHAR(80), gender_mf VARCHAR(1), address_line_1 VARCHAR(80) ); Sample rows from `Course_Authors_and_Tutors`: (1, 331, jmckenzie, c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b, Cathrine, Ruthie, Grant, 0, 756 Monahan Mews Spinkashire, NJ 64230-5098), (2, 975, heidenreich.ara, 24b0ee84063c3b017ab1839e01b7280f47f7c7c2, Retha, Corene, Armstrong, 0, 98623 Huels Manor Jasttown, DE 31611), (3, 349, clementina29, cdaf6c3483f19e2253659a40a3aab786a3390f78, Darius, Ethyl, Reichel, 0, 99296 Keeling Courts North Audreanne, IL 28272), CREATE TABLE `Students` ( student_id INTEGER, date_of_registration DATETIME, date_of_latest_logon DATETIME, login_name VARCHAR(40), password VARCHAR(10), personal_name VARCHAR(40), middle_name VARCHAR(40), family_name VARCHAR(40) ); Sample rows from `Students`: (1, 2015-07-22 13:32:35, 2017-10-17 22:52:26, annamae.hoppe, db8765bb6f, Wilson, Aubrey, Ward), (2, 2015-07-02 00:21:42, 2017-06-24 22:16:27, wmiller, 35faf8182a, Karson, Luella, Jaskolski), (3, 2015-10-11 03:23:27, 2018-03-10 23:22:23, ahartmann, 8e064ec4e6, Mariela, Brandt, Legros), CREATE TABLE `Subjects` ( subject_id INTEGER, subject_name VARCHAR(120) ); Sample rows from `Subjects`: (1, Computer Science), (2, Arts), (3, Language), CREATE TABLE `Courses` ( course_id INTEGER, author_id INTEGER REFERENCES Course_Authors_and_Tutors(author_id), subject_id INTEGER REFERENCES Subjects(subject_id), course_name VARCHAR(120), course_description VARCHAR(255) ); Sample rows from `Courses`: (1, 8, 1, database, database), (2, 6, 1, advanced database, advanced database), (3, 15, 1, operating system, operating system), CREATE TABLE `Student_Course_Enrolment` ( registration_id INTEGER, student_id INTEGER REFERENCES Students(student_id), course_id INTEGER REFERENCES Courses(course_id), date_of_enrolment DATETIME, date_of_completion DATETIME ); Sample rows from `Student_Course_Enrolment`: (1, 11, 2, 2017-10-09 07:09:02, 2018-02-26 07:48:52), (2, 15, 4, 2017-11-13 12:49:33, 2018-03-04 01:24:56), (3, 10, 8, 2017-10-17 13:50:40, 2018-03-22 02:53:01), CREATE TABLE `Student_Tests_Taken` ( registration_id INTEGER REFERENCES Student_Course_Enrolment(registration_id), date_test_taken DATETIME, test_result VARCHAR(255) ); Sample rows from `Student_Tests_Taken`: (12, 2018-03-25 03:27:16, Fail), (10, 2018-03-25 21:50:22, Pass), (7, 2018-03-21 00:32:25, Pass), ",
        "output": "SELECT t1.login_name FROM course_authors_and_tutors as t1 JOIN courses as t2 ON t1.author_id  =  t2.author_id WHERE t2.course_name  =  \"advanced database\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: who publishes papers about sensor fusion ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t1.authorname FROM paperkeyphrase as t2 JOIN keyphrase as t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes as t3 ON t3.paperid  =  t2.paperid JOIN author as t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the maximum duration and resolution of songs grouped and ordered by languages? ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT MAX(t1.duration) ,  MAX(t2.resolution) ,  t2.languages FROM files as t1 JOIN song as t2 ON t1.f_id  =  t2.f_id GROUP BY t2.languages ORDER BY t2.languages"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: give me the longest river that passes through the us ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the total number of the audiences who visited any of the festivals? ###filtered_database_schema: CREATE TABLE `festival_detail` ( Festival_ID INT PRIMARY KEY, Festival_Name TEXT, Chair_Name TEXT, Location TEXT, Year INT, Num_of_Audience INT ); Sample rows from `festival_detail`: (1, Panasonic Awards, Raymond Floyd, United States, 2006, 152), (2, Flower Awards, Charles Coody, United States, 2007, 155), (3, Cherry Awards, Doug Ford, United States, 2007, 160), CREATE TABLE `artwork` ( Artwork_ID INT PRIMARY KEY, Type TEXT, Name TEXT ); Sample rows from `artwork`: (1, Program Music/Variety Show, Indonesian Idol), (2, Program Music/Variety Show, I Know), (3, Presenter Music/Variety Show, Loving you), CREATE TABLE `nomination` ( Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID), Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID), Result TEXT ); Sample rows from `nomination`: (1, 2, Nominated), (2, 2, Won), (3, 1, Nominated), ",
        "output": "SELECT SUM(num_of_audience) FROM festival_detail"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the distinct last names of the students who have class president votes? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Voting_record` ( StuID INTEGER REFERENCES Student(StuID), Registration_Date VARCHAR(12), Election_Cycle VARCHAR(12), President_Vote INTEGER REFERENCES Student(StuID), Vice_President_Vote INTEGER REFERENCES Student(StuID), Secretary_Vote INTEGER REFERENCES Student(StuID), Treasurer_Vote INTEGER REFERENCES Student(StuID), Class_President_Vote INTEGER REFERENCES Student(StuID), Class_Senator_Vote INTEGER REFERENCES Student(StuID) ); Sample rows from `Voting_record`: (1001, 08/30/2015, Spring, 1004, 1007, 1010, 1035, 1001, 1028), (1002, 08/30/2014, Spring, 1014, 1007, 1020, 1025, 1021, 1028), (1003, 08/30/2013, Spring, 1004, 1017, 1030, 1035, 1031, 1028), ",
        "output": "SELECT DISTINCT t1.lname FROM student as t1 JOIN voting_record as t2 ON t1.stuid  =  t2.CLasS_President_VOTE"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many papers were at nature communications 2015 ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(t1.paperid) FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids, date opened, name, and other details for all accounts? ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(50), customer_middle_initial VARCHAR(1), customer_last_name VARCHAR(50), gender VARCHAR(1), email_address VARCHAR(255), login_name VARCHAR(80), login_password VARCHAR(20), phone_number VARCHAR(255), town_city VARCHAR(50), state_county_province VARCHAR(50), country VARCHAR(50) ); Sample rows from `Customers`: (1, Dee, A, Larkin, 1, thora.torphy@example.org, xhartmann, 77789d292604ea04406f, 241.796.1219x37862, North Nellie, WestVirginia, USA), (2, Brennon, H, Weimann, 0, roosevelt.collier@example.org, shayne.lesch, ce97a3e4539347daab96, (943)219-4234x415, South Isabell, Oklahoma, USA), (3, Joesph, K, Schaefer, 0, homenick.ambrose@example.net, feeney.lauriane, a6c7a7064c36b038d402, (488)524-5345, New Nikolas, Arkansas, USA), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 12, 2012-06-27 20:49:56, None), (2, 12, 2012-08-25 07:51:54, None), (3, 8, 2017-11-05 15:32:38, None), CREATE TABLE `Invoices` ( invoice_number INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_date DATETIME ); Sample rows from `Invoices`: (1, 9, 2018-03-01 16:40:48), (2, 9, 2018-03-20 00:21:41), (3, 3, 2018-03-05 08:47:33), CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_account_opened DATETIME, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 8, 2016-07-30 22:22:24, 900, Regular), (2, 3, 2017-05-29 16:45:17, 520, VIP), (3, 8, 2012-05-04 18:50:32, 323, Regular), CREATE TABLE `Product_Categories` ( production_type_code VARCHAR(15) PRIMARY KEY, product_type_description VARCHAR(80), vat_rating DECIMAL(19,4) ); Sample rows from `Product_Categories`: (Food, Food, 15.84), (DVDs, Dvd products, 11.4), (Books, Books, 13.95), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, production_type_code VARCHAR(15) REFERENCES Product_Categories(production_type_code), unit_price DECIMAL(19,4), product_name VARCHAR(80), product_color VARCHAR(20), product_size VARCHAR(20) ); Sample rows from `Products`: (1, 4, Food, 617.95, Coffee Bean, Red, Medium), (2, 4, Books, 558.49, Learning French, Yellow, Medium), (3, 8, Electronics, 563.58, Fans, Black, Medium), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DECIMAL(19,4), transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 13, 12, Payment, 2018-03-15 21:13:57, 613.96, None, None), (2, 9, 1, Payment, 2018-03-13 13:27:46, 368.46, None, None), (3, 6, 1, Refund, 2018-03-03 01:50:25, 1598.25, None, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), product_id INTEGER REFERENCES Products(product_id), product_quantity VARCHAR(50), other_order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 4, 6, None), (2, 4, 10, 7, None), (3, 15, 5, 4, None), CREATE TABLE `Invoice_Line_Items` ( order_item_id INTEGER REFERENCES Order_Items(order_item_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), product_id INTEGER REFERENCES Products(product_id), product_title VARCHAR(80), product_quantity VARCHAR(50), product_price DECIMAL(19,4), derived_product_cost DECIMAL(19,4), derived_vat_payable DECIMAL(19,4), derived_total_cost DECIMAL(19,4) ); Sample rows from `Invoice_Line_Items`: (14, 9, 5, prod_name, 4, 742.37, 191.11, None, 69.82), (3, 9, 15, prod_name, 1, 814.87, 176.29, None, 59.56), (4, 10, 15, prod_name, 8, 943.07, 73.14, None, 59.93), ",
        "output": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM accounts"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many invoices correspond to each order id? ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(50), customer_middle_initial VARCHAR(1), customer_last_name VARCHAR(50), gender VARCHAR(1), email_address VARCHAR(255), login_name VARCHAR(80), login_password VARCHAR(20), phone_number VARCHAR(255), town_city VARCHAR(50), state_county_province VARCHAR(50), country VARCHAR(50) ); Sample rows from `Customers`: (1, Dee, A, Larkin, 1, thora.torphy@example.org, xhartmann, 77789d292604ea04406f, 241.796.1219x37862, North Nellie, WestVirginia, USA), (2, Brennon, H, Weimann, 0, roosevelt.collier@example.org, shayne.lesch, ce97a3e4539347daab96, (943)219-4234x415, South Isabell, Oklahoma, USA), (3, Joesph, K, Schaefer, 0, homenick.ambrose@example.net, feeney.lauriane, a6c7a7064c36b038d402, (488)524-5345, New Nikolas, Arkansas, USA), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 12, 2012-06-27 20:49:56, None), (2, 12, 2012-08-25 07:51:54, None), (3, 8, 2017-11-05 15:32:38, None), CREATE TABLE `Invoices` ( invoice_number INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_date DATETIME ); Sample rows from `Invoices`: (1, 9, 2018-03-01 16:40:48), (2, 9, 2018-03-20 00:21:41), (3, 3, 2018-03-05 08:47:33), CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_account_opened DATETIME, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 8, 2016-07-30 22:22:24, 900, Regular), (2, 3, 2017-05-29 16:45:17, 520, VIP), (3, 8, 2012-05-04 18:50:32, 323, Regular), CREATE TABLE `Product_Categories` ( production_type_code VARCHAR(15) PRIMARY KEY, product_type_description VARCHAR(80), vat_rating DECIMAL(19,4) ); Sample rows from `Product_Categories`: (Food, Food, 15.84), (DVDs, Dvd products, 11.4), (Books, Books, 13.95), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, production_type_code VARCHAR(15) REFERENCES Product_Categories(production_type_code), unit_price DECIMAL(19,4), product_name VARCHAR(80), product_color VARCHAR(20), product_size VARCHAR(20) ); Sample rows from `Products`: (1, 4, Food, 617.95, Coffee Bean, Red, Medium), (2, 4, Books, 558.49, Learning French, Yellow, Medium), (3, 8, Electronics, 563.58, Fans, Black, Medium), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DECIMAL(19,4), transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 13, 12, Payment, 2018-03-15 21:13:57, 613.96, None, None), (2, 9, 1, Payment, 2018-03-13 13:27:46, 368.46, None, None), (3, 6, 1, Refund, 2018-03-03 01:50:25, 1598.25, None, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), product_id INTEGER REFERENCES Products(product_id), product_quantity VARCHAR(50), other_order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 4, 6, None), (2, 4, 10, 7, None), (3, 15, 5, 4, None), CREATE TABLE `Invoice_Line_Items` ( order_item_id INTEGER REFERENCES Order_Items(order_item_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), product_id INTEGER REFERENCES Products(product_id), product_title VARCHAR(80), product_quantity VARCHAR(50), product_price DECIMAL(19,4), derived_product_cost DECIMAL(19,4), derived_vat_payable DECIMAL(19,4), derived_total_cost DECIMAL(19,4) ); Sample rows from `Invoice_Line_Items`: (14, 9, 5, prod_name, 4, 742.37, 191.11, None, 69.82), (3, 9, 15, prod_name, 1, 814.87, 176.29, None, 59.56), (4, 10, 15, prod_name, 8, 943.07, 73.14, None, 59.93), ",
        "output": "SELECT order_id ,  COUNT(*) FROM invoices GROUP BY order_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the department ids, full names, and salaries for employees who make the most in their departments? ###filtered_database_schema: CREATE TABLE `regions` ( REGION_ID decimal(5,0) PRIMARY KEY, REGION_NAME varchar(25) ); Sample rows from `regions`: (1, Europe\\r), (2, Americas\\r), (3, Asia\\r), CREATE TABLE `countries` ( COUNTRY_ID varchar(2) PRIMARY KEY, COUNTRY_NAME varchar(40), REGION_ID decimal(10,0) REFERENCES regions(REGION_ID) ); Sample rows from `countries`: (AR, Argentina, 2), (AU, Australia, 3), (BE, Belgium, 1), CREATE TABLE `departments` ( DEPARTMENT_ID decimal(4,0) PRIMARY KEY, DEPARTMENT_NAME varchar(30), MANAGER_ID decimal(6,0), LOCATION_ID decimal(4,0) ); Sample rows from `departments`: (10, Administration, 200, 1700), (20, Marketing, 201, 1800), (30, Purchasing, 114, 1700), CREATE TABLE `jobs` ( JOB_ID varchar(10) PRIMARY KEY, JOB_TITLE varchar(35), MIN_SALARY decimal(6,0), MAX_SALARY decimal(6,0) ); Sample rows from `jobs`: (AD_PRES, President, 20000, 40000), (AD_VP, Administration Vice President, 15000, 30000), (AD_ASST, Administration Assistant, 3000, 6000), CREATE TABLE `employees` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY, FIRST_NAME varchar(20), LAST_NAME varchar(25), EMAIL varchar(25), PHONE_NUMBER varchar(20), HIRE_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), SALARY decimal(8,2), COMMISSION_PCT decimal(2,2), MANAGER_ID decimal(6,0), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `employees`: (100, Steven, King, SKING, 515.123.4567, 1987-06-17, AD_PRES, 24000, 0, 0, 90), (101, Neena, Kochhar, NKOCHHAR, 515.123.4568, 1987-06-18, AD_VP, 17000, 0, 100, 90), (102, Lex, De Haan, LDEHAAN, 515.123.4569, 1987-06-19, AD_VP, 17000, 0, 100, 90), CREATE TABLE `job_history` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY REFERENCES employees(EMPLOYEE_ID), START_DATE date PRIMARY KEY, END_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `job_history`: (102, 1993-01-13, 1998-07-24, IT_PROG, 60), (101, 1989-09-21, 1993-10-27, AC_ACCOUNT, 110), (101, 1993-10-28, 1997-03-15, AC_MGR, 110), CREATE TABLE `locations` ( LOCATION_ID decimal(4,0) PRIMARY KEY, STREET_ADDRESS varchar(40), POSTAL_CODE varchar(12), CITY varchar(30), STATE_PROVINCE varchar(25), COUNTRY_ID varchar(2) REFERENCES countries(COUNTRY_ID) ); Sample rows from `locations`: (1000, 1297 Via Cola di Rie, 989, Roma, , IT), (1100, 93091 Calle della Testa, 10934, Venice, , IT), (1200, 2017 Shinjuku-ku, 1689, Tokyo, Tokyo Prefecture, JP), ",
        "output": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the age of the person with the greatest height. ###filtered_database_schema: CREATE TABLE `gymnast` ( Gymnast_ID INT PRIMARY KEY REFERENCES people(People_ID), Floor_Exercise_Points REAL, Pommel_Horse_Points REAL, Rings_Points REAL, Vault_Points REAL, Parallel_Bars_Points REAL, Horizontal_Bar_Points REAL, Total_Points REAL ); Sample rows from `gymnast`: (1, 9.725, 9.737, 9.512, 9.575, 9.762, 9.75, 58.061), (2, 9.7, 9.625, 9.625, 9.65, 9.587, 9.737, 57.924), (4, 8.987, 9.75, 9.75, 9.65, 9.787, 9.725, 57.649), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Age REAL, Height REAL, Hometown TEXT ); Sample rows from `people`: (1, Paul Hamm, 24.0, 1.71, Santo Domingo), (2, Lorraine Súarez Carmona, 21.0, 1.75, Bonao), (3, Ashley Pérez Cabrera, 19.0, 1.7, Miami), ",
        "output": "SELECT age FROM people ORDER BY height DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For each classroom, report the classroom number and the number of grades using it. ###filtered_database_schema: CREATE TABLE `list` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Grade INTEGER, Classroom INTEGER ); Sample rows from `list`: (CAR, MAUDE, 2, 101), (KRISTENSEN, STORMY, 6, 112), (VANDERWOUDE, SHERWOOD, 3, 107), CREATE TABLE `teachers` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Classroom INTEGER ); Sample rows from `teachers`: (MACROSTIE, MIN, 101), (COVIN, JEROME, 102), (MOYER, OTHA, 103), ",
        "output": "SELECT classroom ,  COUNT(DISTINCT grade) FROM list GROUP BY classroom"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show name and salary for all employees sorted by salary. ###filtered_database_schema: CREATE TABLE `flight` ( flno number(4,0) PRIMARY KEY, origin varchar2(20), destination varchar2(20), distance number(6,0), departure_date date, arrival_date date, price number(7,2), aid number(9,0) REFERENCES aircraft(aid) ); Sample rows from `flight`: (99, Los Angeles, Washington D.C., 2308, 04/12/2005 09:30, 04/12/2005 09:40, 235.98, 1), (13, Los Angeles, Chicago, 1749, 04/12/2005 08:45, 04/12/2005 08:45, 220.98, 3), (346, Los Angeles, Dallas, 1251, 04/12/2005 11:50, 04/12/2005 07:05, 182, 2), CREATE TABLE `aircraft` ( aid number(9,0) PRIMARY KEY, name varchar2(30), distance number(6,0) ); Sample rows from `aircraft`: (1, Boeing 747-400, 8430), (2, Boeing 737-800, 3383), (3, Airbus A340-300, 7120), CREATE TABLE `employee` ( eid number(9,0) PRIMARY KEY, name varchar2(30), salary number(10,2) ); Sample rows from `employee`: (242518965, James Smith, 120433), (141582651, Mary Johnson, 178345), (11564812, John Williams, 153972), CREATE TABLE `certificate` ( eid number(9,0) PRIMARY KEY REFERENCES employee(eid), aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid) ); Sample rows from `certificate`: (11564812, 2), (11564812, 10), (90873519, 6), ",
        "output": "SELECT name ,  salary FROM employee ORDER BY salary"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average credit score for customers who have taken a loan? ###filtered_database_schema: CREATE TABLE `bank` ( branch_ID INT PRIMARY KEY, bname varchar(20), no_of_customers INT, city varchar(10), state varchar(20) ); Sample rows from `bank`: (1, morningside, 203, New York City, New York), (2, downtown, 123, Salt Lake City, Utah), (3, broadway, 453, New York City, New York), CREATE TABLE `customer` ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal INT, no_of_loans INT, credit_score INT, branch_ID INT REFERENCES bank(branch_ID), state varchar(20) ); Sample rows from `customer`: (1, Mary, saving, 2000, 2, 30, 2, Utah), (2, Jack, checking, 1000, 1, 20, 1, Texas), (3, Owen, saving, 800000, 0, 210, 3, New York), CREATE TABLE `loan` ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3) REFERENCES customer(Cust_ID), branch_ID varchar(3) REFERENCES bank(branch_ID), amount INT ); Sample rows from `loan`: (1, Mortgages, 1, 1, 2050), (2, Auto, 1, 2, 3000), (3, Business, 3, 3, 5000), ",
        "output": "SELECT AVG(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is allergy type of a cat allergy? ###filtered_database_schema: CREATE TABLE `Allergy_Type` ( Allergy VARCHAR(20) PRIMARY KEY, AllergyType VARCHAR(20) ); Sample rows from `Allergy_Type`: (Eggs, food), (Nuts, food), (Milk, food), CREATE TABLE `Has_Allergy` ( StuID INTEGER REFERENCES Student(StuID), Allergy VARCHAR(20) REFERENCES Allergy_Type(Allergy) ); Sample rows from `Has_Allergy`: (1001, Cat), (1002, Shellfish), (1002, Tree Pollen), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), ",
        "output": "SELECT allergytype FROM allergy_type WHERE allergy  =  \"Cat\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the name of all playlist. ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT name FROM playlists;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many games are played for all football games by students on scholarship? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Video_Games` ( GameID INTEGER, GName VARCHAR(40), GType VARCHAR(40) ); Sample rows from `Video_Games`: (1, RNG Stone, Collectible card game), (2, The Vanishing of Eric Calder, Walking Simulator), (3, Grand Term Assignment, Role-playing game), CREATE TABLE `Plays_Games` ( StuID INTEGER REFERENCES Student(StuID), GameID INTEGER REFERENCES Video_Games(GameID), Hours_Played INTEGER ); Sample rows from `Plays_Games`: (1001, 1, 35), (1001, 2, 15), (1001, 5, 1), CREATE TABLE `SportsInfo` ( StuID INTEGER REFERENCES Student(StuID), SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1) ); Sample rows from `SportsInfo`: (1001, Athletics, 2, 5, N), (1002, Football, 7, 20, Y), (1003, Football, 45, 18, Y), ",
        "output": "SELECT SUM(gamesplayed) FROM sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names and ids of artists with 3 or more albums, listed in alphabetical order? ###filtered_database_schema: CREATE TABLE `Album` ( AlbumId INTEGER, Title varchar(160), ArtistId INTEGER PRIMARY KEY REFERENCES Artist(ArtistId) ); Sample rows from `Album`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `Artist` ( ArtistId INTEGER, Name varchar(120) ); Sample rows from `Artist`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `Customer` ( CustomerId INTEGER, FirstName varchar(40), LastName varchar(20), Company varchar(80), Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60), SupportRepId INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId) ); Sample rows from `Customer`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `Employee` ( EmployeeId INTEGER, LastName varchar(20), FirstName varchar(20), Title varchar(30), ReportsTo INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId), BirthDate datetime, HireDate datetime, Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60) ); Sample rows from `Employee`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `Genre` ( GenreId INTEGER, Name varchar(120) ); Sample rows from `Genre`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `Invoice` ( InvoiceId INTEGER, CustomerId INTEGER PRIMARY KEY REFERENCES Customer(CustomerId), InvoiceDate datetime, BillingAddress varchar(70), BillingCity varchar(40), BillingState varchar(40), BillingCountry varchar(40), BillingPostalCode varchar(10), Total decimal(10,2) ); Sample rows from `Invoice`: (1, 2, 2009-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2009-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2009-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `InvoiceLine` ( InvoiceLineId INTEGER, InvoiceId INTEGER PRIMARY KEY REFERENCES Invoice(InvoiceId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId), UnitPrice decimal(10,2), Quantity INTEGER ); Sample rows from `InvoiceLine`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `MediaType` ( MediaTypeId INTEGER, Name varchar(120) ); Sample rows from `MediaType`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `Playlist` ( PlaylistId INTEGER, Name varchar(120) ); Sample rows from `Playlist`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `PlaylistTrack` ( PlaylistId INTEGER PRIMARY KEY REFERENCES Playlist(PlaylistId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId) ); Sample rows from `PlaylistTrack`: (1, 1), (8, 1), (17, 1), CREATE TABLE `Track` ( TrackId INTEGER, Name varchar(200), AlbumId INTEGER PRIMARY KEY REFERENCES Album(AlbumId), MediaTypeId INTEGER PRIMARY KEY REFERENCES MediaType(MediaTypeId), GenreId INTEGER PRIMARY KEY REFERENCES Genre(GenreId), Composer varchar(220), Milliseconds INTEGER, Bytes INTEGER, UnitPrice decimal(10,2) ); Sample rows from `Track`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), ",
        "output": "SELECT t2.name ,  t1.artistid FROM album as t1 JOIN artist as t2 ON t1.artistid  =  t2.artistid GROUP BY t1.artistid HAVING COUNT(*)  >=  3 ORDER BY t2.name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Given the titles of all courses, in order of titles and credits. ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT title FROM course ORDER BY title ,  credits"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco? ###filtered_database_schema: CREATE TABLE `Campuses` ( Id INTEGER, Campus TEXT, Location TEXT, County TEXT, Year INTEGER ); Sample rows from `Campuses`: (1, California State University-Bakersfield, Bakersfield, Kern, 1965), (2, California State University-Channel Islands, Camarillo, Ventura, 2002), (3, California State University-Chico, Chico, Butte, 1887), CREATE TABLE `csu_fees` ( Campus INTEGER REFERENCES Campuses(Id), Year INTEGER, CampusFee INTEGER ); Sample rows from `csu_fees`: (1, 1996, 1951), (2, 2003, 1868), (3, 1996, 2042), CREATE TABLE `degrees` ( Year INTEGER PRIMARY KEY, Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Degrees INTEGER ); Sample rows from `degrees`: (1990, 1, 701), (1991, 1, 681), (1992, 1, 791), CREATE TABLE `discipline_enrollments` ( Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Discipline INTEGER PRIMARY KEY, Year INTEGER, Undergraduate INTEGER, Graduate INTEGER ); Sample rows from `discipline_enrollments`: (1, 4, 2004, 248, 0), (1, 5, 2004, 811, 73), (1, 6, 2004, 199, 0), CREATE TABLE `enrollments` ( Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Year INTEGER PRIMARY KEY, TotalEnrollment_AY INTEGER, FTE_AY INTEGER ); Sample rows from `enrollments`: (1, 1956, 384, 123), (1, 1957, 432, 151), (1, 1958, 422, 178), CREATE TABLE `faculty` ( Campus INTEGER REFERENCES Campuses(Id), Year INTEGER, Faculty REAL ); Sample rows from `faculty`: (1, 2002, 357.1), (2, 2002, 48.4), (3, 2002, 742.8), ",
        "output": "SELECT campus FROM campuses WHERE location  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE location  =  \"San Francisco\" AND county  =  \"San Francisco\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the names of companies and the number of employees they have ###filtered_database_schema: CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Age INT, Name TEXT, Nationality TEXT, Graduation_College TEXT ); Sample rows from `people`: (1, 27, Reggie Lewis, United States, Northeastern), (2, 25, Brad Lohaus, United States, Iowa), (3, 37, Tom Sheehey, United Kindom, Virginia), CREATE TABLE `company` ( Company_ID REAL PRIMARY KEY, Name TEXT, Headquarters TEXT, Industry TEXT, Sales_in_Billion REAL, Profits_in_Billion REAL, Assets_in_Billion REAL, Market_Value_in_Billion REAL ); Sample rows from `company`: (1.0, ExxonMobil, USA, Oil and gas, 433.5, 41.1, 331.1, 407.4), (2.0, JPMorgan Chase, USA, Banking, 110.8, 19.0, 2265.8, 170.1), (3.0, General Electric, USA, Conglomerate, 147.3, 14.2, 717.2, 213.7), CREATE TABLE `employment` ( Company_ID INT PRIMARY KEY REFERENCES company(Company_ID), People_ID INT PRIMARY KEY REFERENCES people(People_ID), Year_working INT ); Sample rows from `employment`: (11, 3, 2), (13, 2, 3), (17, 7, 4), ",
        "output": "SELECT t3.name ,  COUNT(*) FROM employment as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id JOIN company as t3 ON t1.company_id  =  t3.company_id GROUP BY t3.name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Please list all songs in volumes in ascending alphabetical order. ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Artist TEXT, Age INT, Famous_Title TEXT, Famous_Release_date TEXT ); Sample rows from `artist`: (1, Gorgoroth, 34, Bergen 1996, November 2007), (2, Ophiolatry, 35, Transmutation, January 21, 2008), (3, Ophiolatry, 22, Antievangelistical Process (re-release), 2009), CREATE TABLE `volume` ( Volume_ID INT PRIMARY KEY, Volume_Issue TEXT, Issue_Date TEXT, Weeks_on_Top REAL, Song TEXT, Artist_ID INT REFERENCES artist(Artist_ID) ); Sample rows from `volume`: (1, 45:14 §, 27 December 1986 - 10 January, 3.0, The Way, 1), (2, 45:15, 17 January, 1.0, Everybody Have Fun Tonight , 2), (3, 45:16, 24 January, 1.0, Walk Like an Egyptian , 1), CREATE TABLE `music_festival` ( ID INT PRIMARY KEY, Music_Festival TEXT, Date_of_ceremony TEXT, Category TEXT, Volume INT REFERENCES volume(Volume_ID), Result TEXT ); Sample rows from `music_festival`: (1, 34th England Academy Prize, 18 February 2011, Best Song, 1, Nominated), (2, 34th Japan Academy Prize, 18 February 2011, Best Lyrics, 2, Nominated), (3, 34th European Academy Prize, 18 February 2011, Best Song, 3, Awarded), ",
        "output": "SELECT song FROM volume ORDER BY song"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds? ###filtered_database_schema: CREATE TABLE `circuits` ( circuitId INTEGER, circuitRef TEXT, name TEXT, location TEXT, country TEXT, lat REAL, lng REAL, alt TEXT, url TEXT ); Sample rows from `circuits`: (1, albert_park, Albert Park Grand Prix Circuit, Melbourne, Australia, -37.8497, 144.968, 10, http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit), (2, sepang, Sepang International Circuit, Kuala Lumpur, Malaysia, 2.76083, 101.738, , http://en.wikipedia.org/wiki/Sepang_International_Circuit), (3, bahrain, Bahrain International Circuit, Sakhir, Bahrain, 26.0325, 50.5106, , http://en.wikipedia.org/wiki/Bahrain_International_Circuit), CREATE TABLE `races` ( raceId INTEGER, year INTEGER, round INTEGER, circuitId INTEGER REFERENCES circuits(circuitId), name TEXT, date TEXT, time TEXT, url TEXT ); Sample rows from `races`: (1, 2009, 1, 1, Australian Grand Prix, 2009-03-29, 06:00:00, http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix), (2, 2009, 2, 2, Malaysian Grand Prix, 2009-04-05, 09:00:00, http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix), (3, 2009, 3, 17, Chinese Grand Prix, 2009-04-19, 07:00:00, http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix), CREATE TABLE `drivers` ( driverId INTEGER, driverRef TEXT, number TEXT, code TEXT, forename TEXT, surname TEXT, dob TEXT, nationality TEXT, url TEXT ); Sample rows from `drivers`: (1, hamilton, 44, HAM, Lewis, Hamilton, 07/01/1985, British, http://en.wikipedia.org/wiki/Lewis_Hamilton), (2, heidfeld, , HEI, Nick, Heidfeld, 10/05/1977, German, http://en.wikipedia.org/wiki/Nick_Heidfeld), (3, rosberg, 6, ROS, Nico, Rosberg, 27/06/1985, German, http://en.wikipedia.org/wiki/Nico_Rosberg), CREATE TABLE `status` ( statusId INTEGER, status TEXT ); Sample rows from `status`: (1, Finished), (2, Disqualified), (3, Accident), CREATE TABLE `seasons` ( year INTEGER, url TEXT ); Sample rows from `seasons`: (1950, http://en.wikipedia.org/wiki/1950_Formula_One_season), (1951, http://en.wikipedia.org/wiki/1951_Formula_One_season), (1952, http://en.wikipedia.org/wiki/1952_Formula_One_season), CREATE TABLE `constructors` ( constructorId INTEGER, constructorRef TEXT, name TEXT, nationality TEXT, url TEXT ); Sample rows from `constructors`: (1, mclaren, McLaren, British, http://en.wikipedia.org/wiki/McLaren), (2, bmw_sauber, BMW Sauber, German, http://en.wikipedia.org/wiki/BMW_Sauber), (3, williams, Williams, British, http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering), CREATE TABLE `constructorStandings` ( constructorStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `constructorStandings`: (1, 18, 1, 14.0, 1, 1, 1), (2, 18, 2, 8.0, 3, 3, 0), (3, 18, 3, 9.0, 2, 2, 0), CREATE TABLE `results` ( resultId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, grid INTEGER, position TEXT, positionText TEXT, positionOrder INTEGER, points REAL, laps TEXT, time TEXT, milliseconds TEXT, fastestLap TEXT, rank TEXT, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId INTEGER ); Sample rows from `results`: (1, 18, 1, 1, 22, 1, 1, 1, 1, 10.0, 58, 34:50.6, 5690616, 39, 2, 01:27.5, 218.3, 1), (2, 18, 2, 2, 3, 5, 2, 2, 2, 8.0, 58, 5.478, 5696094, 41, 3, 01:27.7, 217.586, 1), (3, 18, 3, 3, 7, 7, 3, 3, 3, 6.0, 58, 8.163, 5698779, 41, 5, 01:28.1, 216.719, 1), CREATE TABLE `driverStandings` ( driverStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `driverStandings`: (1, 18, 1, 10.0, 1, 1, 1), (2, 18, 2, 8.0, 2, 2, 0), (3, 18, 3, 6.0, 3, 3, 0), CREATE TABLE `constructorResults` ( constructorResultsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, status TEXT ); Sample rows from `constructorResults`: (1, 18, 1, 14.0, NULL), (2, 18, 2, 8.0, NULL), (3, 18, 3, 9.0, NULL), CREATE TABLE `qualifying` ( qualifyId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, position INTEGER, q1 TEXT, q2 TEXT, q3 TEXT ); Sample rows from `qualifying`: (1, 18, 1, 1, 22, 1, 1:26.572, 1:25.187, 1:26.714), (2, 18, 9, 2, 4, 2, 1:26.103, 1:25.315, 1:26.869), (3, 18, 5, 1, 23, 3, 1:25.664, 1:25.452, 1:27.079), CREATE TABLE `pitStops` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), stop INTEGER PRIMARY KEY, lap INTEGER, time TEXT, duration TEXT, milliseconds INTEGER ); CREATE TABLE `lapTimes` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), lap INTEGER PRIMARY KEY, position INTEGER, time TEXT, milliseconds INTEGER ); ",
        "output": "SELECT DISTINCT t1.driverid ,  t1.nationality FROM drivers as t1 JOIN laptimes as t2 ON t1.driverid = t2.driverid WHERE t2.milliseconds >  100000"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the most common birth place of people? ###filtered_database_schema: CREATE TABLE `body_builder` ( Body_Builder_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Snatch REAL, Clean_Jerk REAL, Total REAL ); Sample rows from `body_builder`: (1, 1, 142.5, 175.0, 317.5), (2, 2, 137.5, 177.5, 315.0), (3, 3, 140.0, 175.0, 315.0), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Height REAL, Weight REAL, Birth_Date TEXT, Birth_Place TEXT ); Sample rows from `people`: (1, Jack Campbell, 182.0, 80.0, January 1, 1992, Port Huron, Michigan), (2, Ty Conklin, 192.0, 90.0, March 30, 1976, Anchorage, Alaska), (3, Al Montoya, 195.0, 100.0, February 13, 1985, Glenview, Illinois), ",
        "output": "SELECT birth_place FROM people GROUP BY birth_place ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show all storm names affecting region \"Denmark\". ###filtered_database_schema: CREATE TABLE `storm` ( Storm_ID INT PRIMARY KEY, Name TEXT, Dates_active TEXT, Max_speed INT, Damage_millions_USD REAL, Number_Deaths INT ); Sample rows from `storm`: (1, One, May19–May25, 995, 13.0, 0), (2, Two, August3–August10, 972, 10.75, 7), (3, Three, August5–August14, 972, 13.0, 52), CREATE TABLE `region` ( Region_id INT PRIMARY KEY, Region_code TEXT, Region_name TEXT ); Sample rows from `region`: (1, AF, Afghanistan), (2, AL, Albania), (3, DZ, Algeria), CREATE TABLE `affected_region` ( Region_id INT PRIMARY KEY REFERENCES region(Region_id), Storm_ID INT PRIMARY KEY REFERENCES storm(Storm_ID), Number_city_affected REAL ); Sample rows from `affected_region`: (1, 1, 10.0), (2, 1, 15.0), (3, 3, 30.0), ",
        "output": "SELECT t3.name FROM affected_region as t1 JOIN region as t2 ON t1.region_id  =  t2.region_id JOIN storm as t3 ON t1.storm_id  =  t3.storm_id WHERE t2.region_name  =  'Denmark'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Datasets with semantic parsing information ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many customers does Steve Johnson support? ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT COUNT(*) FROM employees as t1 JOIN customers as t2 ON t2.support_rep_id = t1.id WHERE t1.first_name = \"Steve\" AND t1.last_name = \"Johnson\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: papers published in 2015 by Liwen Xiong ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many airports' names have the word Interanation in them? ###filtered_database_schema: CREATE TABLE `routes` ( rid INTEGER, dst_apid INTEGER REFERENCES airports(apid), dst_ap varchar(4), src_apid bigint REFERENCES airports(apid), src_ap varchar(4), alid bigint REFERENCES airlines(alid), airline varchar(4), codeshare TEXT ); Sample rows from `routes`: (37, 2990, KZ, 2965, AER, 410, 2B, None), (38, 2990, KZ, 2966, ASF, 410, 2B, None), (39, 2962, MRV, 2966, ASF, 410, 2B, None), CREATE TABLE `airports` ( apid INTEGER, name TEXT, city TEXT, country TEXT, x REAL, y REAL, elevation bigint, iata character varchar(3), icao character varchar(4) ); Sample rows from `airports`: (1, Goroka Airport, Goroka, Papua New Guinea, 145.391998291, -6.081689834590001, 5282, GKA, AYGA), (2, Madang Airport, Madang, Papua New Guinea, 145.789001465, -5.20707988739, 20, MAG, AYMD), (3, Mount Hagen Kagamuga Airport, Mount Hagen, Papua New Guinea, 144.29600524902344, -5.826789855957031, 5388, HGU, AYMH), CREATE TABLE `airlines` ( alid INTEGER, name TEXT, iata varchar(2), icao varchar(3), callsign TEXT, country TEXT, active varchar(2) ); Sample rows from `airlines`: (-1, Unknown, -, N/A, None, None, Y), (1, Private flight, -, N/A, , , Y), (2, 135 Airways, , GNL, GENERAL, United States, N), ",
        "output": "SELECT COUNT(*) FROM airports WHERE name LIKE '%International%'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the id of the song that lasts the longest. ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: where can i eat french food in mountain view ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"french\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the states where have some college students in tryout. ###filtered_database_schema: CREATE TABLE `College` ( cName varchar(20) PRIMARY KEY, state varchar(2), enr numeric(5,0) ); Sample rows from `College`: (LSU, LA, 18000), (ASU, AZ, 12000), (OU, OK, 22000), CREATE TABLE `Player` ( pID numeric(5,0) PRIMARY KEY, pName varchar(20), yCard varchar(3), HS numeric(5,0) ); Sample rows from `Player`: (10001, Andrew, no, 1200), (20002, Blake, no, 1600), (30003, Charles, no, 300), CREATE TABLE `Tryout` ( pID numeric(5,0) PRIMARY KEY REFERENCES Player(pID), cName varchar(20) PRIMARY KEY REFERENCES College(cName), pPos varchar(8), decision varchar(3) ); Sample rows from `Tryout`: (10001, LSU, goalie, no), (10001, ASU, goalie, yes), (20002, FSU, striker, yes), ",
        "output": "SELECT DISTINCT state FROM college as t1 JOIN tryout as t2 ON t1.cname  =  t2.cname"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the id and address of the shops which have a happy hour in May? ###filtered_database_schema: CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Address TEXT, Num_of_staff TEXT, Score REAL, Open_Year TEXT ); Sample rows from `shop`: (1, 1200 Main Street, 13, 42.0, 2010), (2, 1111 Main Street, 19, 38.0, 2008), (3, 1330 Baltimore Street, 42, 36.0, 2010), CREATE TABLE `member` ( Member_ID INT PRIMARY KEY, Name TEXT, Membership_card TEXT, Age INT, Time_of_purchase INT, Level_of_membership INT, Address TEXT ); Sample rows from `member`: (1, Ashby, Lazale, Black, 29, 18, 5, Hartford), (2, Breton, Robert, White, 67, 41, 4, Waterbury), (3, Campbell, Jessie, Black, 34, 20, 6, Hartford), CREATE TABLE `happy_hour` ( HH_ID INT PRIMARY KEY, Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID), Month TEXT PRIMARY KEY, Num_of_shaff_in_charge INT ); Sample rows from `happy_hour`: (1, 1, May, 10), (2, 1, April, 12), (3, 10, June, 15), CREATE TABLE `happy_hour_member` ( HH_ID INT PRIMARY KEY, Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Total_amount REAL ); Sample rows from `happy_hour_member`: (1, 3, 20.9), (4, 3, 20.92), (7, 9, 4.9), ",
        "output": "SELECT t1.address ,  t1.shop_id FROM shop as t1 JOIN happy_hour as t2 ON t1.shop_id  =  t2.shop_id WHERE month  =  'May'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all the media types? ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT name FROM media_types;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many reviews does \" Acacia Cafe \" have ? ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT review_count FROM business WHERE name  =  \"Acacia Cafe\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the phone and email for customer with first name Aniyah and last name Feest? ###filtered_database_schema: CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 6, 338, Regular), (2, 14, 562, VIP), (3, 9, 162, VIP), CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(20), customer_last_name VARCHAR(20), customer_address VARCHAR(255), customer_phone VARCHAR(255), customer_email VARCHAR(255), other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Aniyah, Feest, 55975 Theodore Estates Lake Brody, VT 57078, (673)872-5338, fahey.dorian@example.com, None), (2, Susie, Wiza, 6478 Moen Isle Suite 910 Schimmelmouth, VT 96364-4898, 679-845-8645x94312, idickinson@example.com, None), (3, Marcel, Brekke, 1965 Abernathy Plains Port Lilla, LA 44867, 1-511-656-6664, nichole.rodriguez@example.com, None), CREATE TABLE `Customers_Cards` ( card_id INTEGER, customer_id INTEGER, card_type_code VARCHAR(15), card_number VARCHAR(80), date_valid_from DATETIME, date_valid_to DATETIME, other_card_details VARCHAR(255) ); Sample rows from `Customers_Cards`: (1, 14, Credit, 4560596484842, 2011-04-17 09:05:28, 2018-03-07 17:06:19, 5567915676420343), (2, 9, Credit, 4859448397570735, 2012-05-22 02:05:41, 2018-02-25 15:43:32, 4539333582760), (3, 6, Debit, 348237249146948, 2014-08-01 14:26:45, 2018-03-24 15:29:00, 4916210554814), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, previous_transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), card_id INTEGER REFERENCES Customers_Cards(card_id), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DOUBLE, transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 925, 15, 1, Payment, 2018-03-24 06:41:41, 1701.23, None, None), (2, 494, 3, 2, Refund, 2018-03-24 12:08:55, 1931.76, None, None), (3, 642, 4, 3, Payment, 2018-03-24 09:08:27, 486.56, None, None), ",
        "output": "SELECT customer_phone ,  customer_email FROM customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the date and venue of each workshop in ascending alphabetical order of the venue. ###filtered_database_schema: CREATE TABLE `workshop` ( Workshop_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Name TEXT ); Sample rows from `workshop`: (1, August 18, 2007, London UK, ABC 2007), (2, August 21, 2007, London UK, Conference 2007), (3, August 25, 2007, New Jersey USA, Workshop 2007), CREATE TABLE `submission` ( Submission_ID INT PRIMARY KEY, Scores REAL, Author TEXT, College TEXT ); Sample rows from `submission`: (1, 72.0, Steve Niehaus, Notre Dame), (2, 79.0, Sammy Green, Florida), (3, 78.0, Sherman Smith, Miami (OH)), CREATE TABLE `Acceptance` ( Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID), Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID), Result TEXT ); Sample rows from `Acceptance`: (2, 5, Accepted), (2, 3, Rejected), (3, 2, Rejected), ",
        "output": "SELECT date ,  venue FROM workshop ORDER BY venue"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the first names of all students who got a grade C in a class? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELEcT DISTINcT stu_fname FROM student as t1 JOIN enroll as t2 ON t1.stu_num  =  t2.stu_num WHERE enroll_grade  =  'c'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the name and the nationality of the host of the highest age? ###filtered_database_schema: CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Party_Theme TEXT, Location TEXT, First_year TEXT, Last_year TEXT, Number_of_hosts INT ); Sample rows from `party`: (1, Spring, Hemkade 48 Zaandam, 2000, 2001, 5), (2, Club Q-BASE, Hemkade 48 Zaandam, 2002, 2002, 23), (3, Hardcore Resurrection, Various locations, 2000, 2003, 4), CREATE TABLE `host` ( Host_ID INT PRIMARY KEY, Name TEXT, Nationality TEXT, Age TEXT ); Sample rows from `host`: (1, Austin Daye, United States, 43), (2, Lloyd Daniels, United States, 37), (3, Kornel David, Hungary, 31), CREATE TABLE `party_host` ( Party_ID INT PRIMARY KEY REFERENCES party(Party_ID), Host_ID INT PRIMARY KEY REFERENCES host(Host_ID), Is_Main_in_Charge bool ); Sample rows from `party_host`: (1, 1, T), (8, 7, T), (6, 10, F), ",
        "output": "SELECT name ,  nationality FROM host ORDER BY age DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the SSN and name of scientists who are assigned to the project with the longest hours. ###filtered_database_schema: CREATE TABLE `Scientists` ( SSN INT PRIMARY KEY, Name Char(30) ); Sample rows from `Scientists`: (123234877, Michael Rogers), (152934485, Anand Manikutty), (222364883, Carol Smith), CREATE TABLE `Projects` ( Code Char(4) PRIMARY KEY, Name Char(50), Hours INT ); Sample rows from `Projects`: (AeH1, Winds: Studying Bernoullis Principle, 156), (AeH2, Aerodynamics and Bridge Design, 189), (AeH3, Aerodynamics and Gas Mileage, 256), CREATE TABLE `AssignedTo` ( Scientist INT PRIMARY KEY REFERENCES Scientists(SSN), Project char(4) PRIMARY KEY REFERENCES Projects(Code) ); Sample rows from `AssignedTo`: (123234877, AeH1), (152934485, AeH3), (222364883, Ast3), ",
        "output": "SELECT t3.ssn ,  t3.name FROM assignedto as t1 JOIN projects as t2 ON t1.project  =  t2.code JOIN scientists as t3 ON t1.scientist  =  t3.ssn WHERE t2.hours  =  (SELECT MAX(hours) FROM projects)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities. ###filtered_database_schema: CREATE TABLE `Attribute_Definitions` ( attribute_id INTEGER, attribute_name VARCHAR(30), attribute_data_type VARCHAR(10) ); Sample rows from `Attribute_Definitions`: (1, Green, Bool), (2, Black, Bool), (3, Yellow, Bool), CREATE TABLE `Catalogs` ( catalog_id INTEGER, catalog_name VARCHAR(50), catalog_publisher VARCHAR(80), date_of_publication DATETIME, date_of_latest_revision DATETIME ); Sample rows from `Catalogs`: (1, Chocolate, Koepp-Rutherford handmade chocolate store, 2013-03-15 05:09:17, 2017-09-26 12:10:36), (2, Coffee Bean, Murray Coffee shop, 2012-04-13 06:37:09, 2017-10-26 01:16:51), (3, Lemonade, Russel-Gislason Lemon shop, 2012-11-27 19:29:22, 2017-12-04 06:48:13), CREATE TABLE `Catalog_Structure` ( catalog_level_number INTEGER, catalog_id INTEGER REFERENCES Catalogs(catalog_id), catalog_level_name VARCHAR(50) ); Sample rows from `Catalog_Structure`: (1, 1, Category), (8, 2, Sub-Category), (9, 8, Product), CREATE TABLE `Catalog_Contents` ( catalog_entry_id INTEGER, catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number), parent_entry_id INTEGER, previous_entry_id INTEGER, next_entry_id INTEGER, catalog_entry_name VARCHAR(80), product_stock_number VARCHAR(50), price_in_dollars DOUBLE, price_in_euros DOUBLE, price_in_pounds DOUBLE, capacity VARCHAR(20), length VARCHAR(20), height VARCHAR(20), width VARCHAR(20) ); Sample rows from `Catalog_Contents`: (1, 1, 5, 9, 7, Cola, 89 cp, 200.78, 159.84, 172.17, 1, 3, 9, 5), (2, 8, 6, 9, 8, Root beer, 37 hq, 687.59, 590.11, 471.78, 8, 6, 5, 6), (3, 8, 6, 6, 1, Cream Soda, 52 ee, 360.5, 202.32, 110.32, 5, 9, 7, 8), CREATE TABLE `Catalog_Contents_Additional_Attributes` ( catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id), catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number), attribute_id INTEGER, attribute_value VARCHAR(255) ); Sample rows from `Catalog_Contents_Additional_Attributes`: (5, 8, 4, 1), (15, 9, 3, 0), (11, 1, 2, 0), ",
        "output": "SELECT catalog_entry_name ,  capacity FROM catalog_contents WHERE price_in_dollars  >  700"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What paper did Michael Armstrong wrote in the 90s ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.year  ,  t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Michael Armstrong\" AND t3.year LIKE \"199\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List all role codes, role names, and role descriptions. ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CV, CV, ), (BK, Book, ), (PR, Paper, ), CREATE TABLE `Ref_Calendar` ( Calendar_Date DATETIME PRIMARY KEY, Day_Number INTEGER ); Sample rows from `Ref_Calendar`: (1972-03-31 09:47:22, 5), (1976-06-15 03:40:06, 7), (1985-05-13 12:19:43, 7), CREATE TABLE `Ref_Locations` ( Location_Code CHAR(15) PRIMARY KEY, Location_Name VARCHAR(255), Location_Description VARCHAR(255) ); Sample rows from `Ref_Locations`: (b, Brazil, ), (c, Canada, ), (e, Edinburgh, ), CREATE TABLE `Roles` ( Role_Code CHAR(15) PRIMARY KEY, Role_Name VARCHAR(255), Role_Description VARCHAR(255) ); Sample rows from `Roles`: (MG, Manager, Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti.), (ED, Editor, Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos.), (PT, Photo, Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt.), CREATE TABLE `All_Documents` ( Document_ID INTEGER, Date_Stored DATETIME REFERENCES Ref_Calendar(Calendar_Date), Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255) ); Sample rows from `All_Documents`: (7, 1976-06-15 03:40:06, CV, Robin CV, None, None), (11, 1986-10-14 17:53:39, CV, Marry CV, None, None), (25, 2008-06-08 12:45:38, BK, One hundred years of solitude, None, None), CREATE TABLE `Employees` ( Employee_ID INTEGER, Role_Code CHAR(15) REFERENCES Roles(Role_Code), Employee_Name VARCHAR(255), Gender_MFU CHAR(1), Date_of_Birth DATETIME, Other_Details VARCHAR(255) ); Sample rows from `Employees`: (25, HR, Leo, , 1973-02-15 17:16:00, None), (30, MG, Ebba, , 1979-09-20 12:50:15, None), (38, ED, Stephanie, 1, 2012-03-30 23:02:28, None), CREATE TABLE `Document_Locations` ( Document_ID INTEGER PRIMARY KEY REFERENCES All_Documents(Document_ID), Location_Code CHAR(15) PRIMARY KEY REFERENCES Ref_Locations(Location_Code), Date_in_Location_From DATETIME PRIMARY KEY REFERENCES Ref_Calendar(Calendar_Date), Date_in_Locaton_To DATETIME REFERENCES Ref_Calendar(Calendar_Date) ); Sample rows from `Document_Locations`: (7, e, 2017-01-06 23:17:22, 2008-06-08 12:45:38), (11, x, 2017-01-06 23:17:22, 2012-07-03 09:48:46), (81, c, 1972-03-31 09:47:22, 1987-11-05 06:11:22), CREATE TABLE `Documents_to_be_Destroyed` ( Document_ID INTEGER REFERENCES All_Documents(Document_ID), Destruction_Authorised_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Destroyed_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Planned_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Actual_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Other_Details VARCHAR(255) ); Sample rows from `Documents_to_be_Destroyed`: (7, 156, 138, 1988-02-01 14:41:52, 2017-01-06 23:17:22, None), (11, 55, 173, 2010-11-26 19:22:50, 1986-10-14 17:53:39, None), (25, 183, 156, 2009-08-18 03:29:08, 1995-01-01 03:52:11, None), ",
        "output": "SELECT role_code ,  role_name ,  role_description FROM roles"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is largest capital ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the order id and customer id associated with the oldest order. ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_name VARCHAR(80), customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Savannah, rerum), (2, George, est), (3, Alberto, deleniti), CREATE TABLE `Invoices` ( invoice_number INTEGER, invoice_date DATETIME, invoice_details VARCHAR(255) ); Sample rows from `Invoices`: (1, 1989-09-03 16:03:05, vitae), (2, 1989-12-11 16:40:57, magnam), (3, 1995-10-07 14:13:05, et), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(10), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 2, Shipped, 2009-02-21 15:26:19, None), (2, 11, Shipped, 1974-06-24 22:10:26, None), (3, 4, Shipped, 1982-12-29 21:10:11, None), CREATE TABLE `Products` ( product_id INTEGER, product_name VARCHAR(80), product_details VARCHAR(255) ); Sample rows from `Products`: (1, food, None), (2, book, None), (3, food, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, product_id INTEGER REFERENCES Products(product_id), order_id INTEGER REFERENCES Orders(order_id), order_item_status VARCHAR(10), order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 6, Finish, None), (2, 15, 6, Finish, None), (3, 12, 15, Finish, None), CREATE TABLE `Shipments` ( shipment_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), shipment_tracking_number VARCHAR(80), shipment_date DATETIME, other_shipment_details VARCHAR(255) ); Sample rows from `Shipments`: (1, 5, 13, 3452, 1983-08-13 22:34:11, None), (2, 7, 2, 0114, 1977-11-10 12:11:25, None), (3, 10, 5, 478, 2006-01-17 03:08:05, None), CREATE TABLE `Shipment_Items` ( shipment_id INTEGER REFERENCES Shipments(shipment_id), order_item_id INTEGER REFERENCES Order_Items(order_item_id) ); Sample rows from `Shipment_Items`: (11, 12), (10, 15), (10, 12), ",
        "output": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the names of climbers whose country is not Switzerland. ###filtered_database_schema: CREATE TABLE `mountain` ( Mountain_ID INT PRIMARY KEY, Name TEXT, Height REAL, Prominence REAL, Range TEXT, Country TEXT ); Sample rows from `mountain`: (1, Kibo (Uhuru Pk), 5895.0, 5885.0, Kilimanjaro, Tanzania), (2, Mount Kenya (Batian), 5199.0, 3825.0, Mount Kenya, Kenya), (3, Mawenzi (Hans Meyer Pk), 5148.0, 850.0, Kilimanjaro, Tanzania), CREATE TABLE `climber` ( Climber_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Time TEXT, Points REAL, Mountain_ID INT REFERENCES mountain(Mountain_ID) ); Sample rows from `climber`: (1, Klaus Enders, West Germany, 1:13.05.6, 15.0, 1), (2, Siegfried Schauzu, West Germany, 1:14.56.4, 12.0, 1), (3, Hans Luthringhauser, West Germany, 1:16.58.0, 10.0, 2), ",
        "output": "SELECT name FROM climber WHERE country != \"Switzerland\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the flight number and its distance for the one with the maximum price? ###filtered_database_schema: CREATE TABLE `flight` ( flno number(4,0) PRIMARY KEY, origin varchar2(20), destination varchar2(20), distance number(6,0), departure_date date, arrival_date date, price number(7,2), aid number(9,0) REFERENCES aircraft(aid) ); Sample rows from `flight`: (99, Los Angeles, Washington D.C., 2308, 04/12/2005 09:30, 04/12/2005 09:40, 235.98, 1), (13, Los Angeles, Chicago, 1749, 04/12/2005 08:45, 04/12/2005 08:45, 220.98, 3), (346, Los Angeles, Dallas, 1251, 04/12/2005 11:50, 04/12/2005 07:05, 182, 2), CREATE TABLE `aircraft` ( aid number(9,0) PRIMARY KEY, name varchar2(30), distance number(6,0) ); Sample rows from `aircraft`: (1, Boeing 747-400, 8430), (2, Boeing 737-800, 3383), (3, Airbus A340-300, 7120), CREATE TABLE `employee` ( eid number(9,0) PRIMARY KEY, name varchar2(30), salary number(10,2) ); Sample rows from `employee`: (242518965, James Smith, 120433), (141582651, Mary Johnson, 178345), (11564812, John Williams, 153972), CREATE TABLE `certificate` ( eid number(9,0) PRIMARY KEY REFERENCES employee(eid), aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid) ); Sample rows from `certificate`: (11564812, 2), (11564812, 10), (90873519, 6), ",
        "output": "SELECT flno ,  distance FROM flight ORDER BY price DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: datasets used by semantic parsing papers ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: On which days more than one revisions were made on catalogs. ###filtered_database_schema: CREATE TABLE `Attribute_Definitions` ( attribute_id INTEGER, attribute_name VARCHAR(30), attribute_data_type VARCHAR(10) ); Sample rows from `Attribute_Definitions`: (1, Green, Bool), (2, Black, Bool), (3, Yellow, Bool), CREATE TABLE `Catalogs` ( catalog_id INTEGER, catalog_name VARCHAR(50), catalog_publisher VARCHAR(80), date_of_publication DATETIME, date_of_latest_revision DATETIME ); Sample rows from `Catalogs`: (1, Chocolate, Koepp-Rutherford handmade chocolate store, 2013-03-15 05:09:17, 2017-09-26 12:10:36), (2, Coffee Bean, Murray Coffee shop, 2012-04-13 06:37:09, 2017-10-26 01:16:51), (3, Lemonade, Russel-Gislason Lemon shop, 2012-11-27 19:29:22, 2017-12-04 06:48:13), CREATE TABLE `Catalog_Structure` ( catalog_level_number INTEGER, catalog_id INTEGER REFERENCES Catalogs(catalog_id), catalog_level_name VARCHAR(50) ); Sample rows from `Catalog_Structure`: (1, 1, Category), (8, 2, Sub-Category), (9, 8, Product), CREATE TABLE `Catalog_Contents` ( catalog_entry_id INTEGER, catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number), parent_entry_id INTEGER, previous_entry_id INTEGER, next_entry_id INTEGER, catalog_entry_name VARCHAR(80), product_stock_number VARCHAR(50), price_in_dollars DOUBLE, price_in_euros DOUBLE, price_in_pounds DOUBLE, capacity VARCHAR(20), length VARCHAR(20), height VARCHAR(20), width VARCHAR(20) ); Sample rows from `Catalog_Contents`: (1, 1, 5, 9, 7, Cola, 89 cp, 200.78, 159.84, 172.17, 1, 3, 9, 5), (2, 8, 6, 9, 8, Root beer, 37 hq, 687.59, 590.11, 471.78, 8, 6, 5, 6), (3, 8, 6, 6, 1, Cream Soda, 52 ee, 360.5, 202.32, 110.32, 5, 9, 7, 8), CREATE TABLE `Catalog_Contents_Additional_Attributes` ( catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id), catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number), attribute_id INTEGER, attribute_value VARCHAR(255) ); Sample rows from `Catalog_Contents_Additional_Attributes`: (5, 8, 4, 1), (15, 9, 3, 0), (11, 1, 2, 0), ",
        "output": "SELECT date_of_latest_revision FROM catalogs GROUP BY date_of_latest_revision HAVING COUNT(*)  >  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name and date of the race that occurred most recently? ###filtered_database_schema: CREATE TABLE `circuits` ( circuitId INTEGER, circuitRef TEXT, name TEXT, location TEXT, country TEXT, lat REAL, lng REAL, alt TEXT, url TEXT ); Sample rows from `circuits`: (1, albert_park, Albert Park Grand Prix Circuit, Melbourne, Australia, -37.8497, 144.968, 10, http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit), (2, sepang, Sepang International Circuit, Kuala Lumpur, Malaysia, 2.76083, 101.738, , http://en.wikipedia.org/wiki/Sepang_International_Circuit), (3, bahrain, Bahrain International Circuit, Sakhir, Bahrain, 26.0325, 50.5106, , http://en.wikipedia.org/wiki/Bahrain_International_Circuit), CREATE TABLE `races` ( raceId INTEGER, year INTEGER, round INTEGER, circuitId INTEGER REFERENCES circuits(circuitId), name TEXT, date TEXT, time TEXT, url TEXT ); Sample rows from `races`: (1, 2009, 1, 1, Australian Grand Prix, 2009-03-29, 06:00:00, http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix), (2, 2009, 2, 2, Malaysian Grand Prix, 2009-04-05, 09:00:00, http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix), (3, 2009, 3, 17, Chinese Grand Prix, 2009-04-19, 07:00:00, http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix), CREATE TABLE `drivers` ( driverId INTEGER, driverRef TEXT, number TEXT, code TEXT, forename TEXT, surname TEXT, dob TEXT, nationality TEXT, url TEXT ); Sample rows from `drivers`: (1, hamilton, 44, HAM, Lewis, Hamilton, 07/01/1985, British, http://en.wikipedia.org/wiki/Lewis_Hamilton), (2, heidfeld, , HEI, Nick, Heidfeld, 10/05/1977, German, http://en.wikipedia.org/wiki/Nick_Heidfeld), (3, rosberg, 6, ROS, Nico, Rosberg, 27/06/1985, German, http://en.wikipedia.org/wiki/Nico_Rosberg), CREATE TABLE `status` ( statusId INTEGER, status TEXT ); Sample rows from `status`: (1, Finished), (2, Disqualified), (3, Accident), CREATE TABLE `seasons` ( year INTEGER, url TEXT ); Sample rows from `seasons`: (1950, http://en.wikipedia.org/wiki/1950_Formula_One_season), (1951, http://en.wikipedia.org/wiki/1951_Formula_One_season), (1952, http://en.wikipedia.org/wiki/1952_Formula_One_season), CREATE TABLE `constructors` ( constructorId INTEGER, constructorRef TEXT, name TEXT, nationality TEXT, url TEXT ); Sample rows from `constructors`: (1, mclaren, McLaren, British, http://en.wikipedia.org/wiki/McLaren), (2, bmw_sauber, BMW Sauber, German, http://en.wikipedia.org/wiki/BMW_Sauber), (3, williams, Williams, British, http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering), CREATE TABLE `constructorStandings` ( constructorStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `constructorStandings`: (1, 18, 1, 14.0, 1, 1, 1), (2, 18, 2, 8.0, 3, 3, 0), (3, 18, 3, 9.0, 2, 2, 0), CREATE TABLE `results` ( resultId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, grid INTEGER, position TEXT, positionText TEXT, positionOrder INTEGER, points REAL, laps TEXT, time TEXT, milliseconds TEXT, fastestLap TEXT, rank TEXT, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId INTEGER ); Sample rows from `results`: (1, 18, 1, 1, 22, 1, 1, 1, 1, 10.0, 58, 34:50.6, 5690616, 39, 2, 01:27.5, 218.3, 1), (2, 18, 2, 2, 3, 5, 2, 2, 2, 8.0, 58, 5.478, 5696094, 41, 3, 01:27.7, 217.586, 1), (3, 18, 3, 3, 7, 7, 3, 3, 3, 6.0, 58, 8.163, 5698779, 41, 5, 01:28.1, 216.719, 1), CREATE TABLE `driverStandings` ( driverStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `driverStandings`: (1, 18, 1, 10.0, 1, 1, 1), (2, 18, 2, 8.0, 2, 2, 0), (3, 18, 3, 6.0, 3, 3, 0), CREATE TABLE `constructorResults` ( constructorResultsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, status TEXT ); Sample rows from `constructorResults`: (1, 18, 1, 14.0, NULL), (2, 18, 2, 8.0, NULL), (3, 18, 3, 9.0, NULL), CREATE TABLE `qualifying` ( qualifyId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, position INTEGER, q1 TEXT, q2 TEXT, q3 TEXT ); Sample rows from `qualifying`: (1, 18, 1, 1, 22, 1, 1:26.572, 1:25.187, 1:26.714), (2, 18, 9, 2, 4, 2, 1:26.103, 1:25.315, 1:26.869), (3, 18, 5, 1, 23, 3, 1:25.664, 1:25.452, 1:27.079), CREATE TABLE `pitStops` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), stop INTEGER PRIMARY KEY, lap INTEGER, time TEXT, duration TEXT, milliseconds INTEGER ); CREATE TABLE `lapTimes` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), lap INTEGER PRIMARY KEY, position INTEGER, time TEXT, milliseconds INTEGER ); ",
        "output": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'? ###filtered_database_schema: CREATE TABLE `medicine` ( id INT PRIMARY KEY, name TEXT, Trade_Name TEXT, FDA_approved TEXT ); Sample rows from `medicine`: (1, Amisulpride, Solian, No), (2, Aripiprazole, Abilify, Yes), (3, Asenapine, Saphris, Yes), CREATE TABLE `enzyme` ( id INT PRIMARY KEY, name TEXT, Location TEXT, Product TEXT, Chromosome TEXT, OMIM INT, Porphyria TEXT ); Sample rows from `enzyme`: (1, ALA synthase, Mitochondrion, δ-Aminolevulinic acid, 3p21.1, 125290, none), (2, ALA dehydratase, Cytosol, Porphobilinogen, 9q34, 125270, ALA-Dehydratase deficiency), (3, PBG deaminase, Cytosol, Hydroxymethyl bilane, 11q23.3, 176000, acute intermittent porphyria), CREATE TABLE `medicine_enzyme_interaction` ( enzyme_id INT PRIMARY KEY REFERENCES enzyme(id), medicine_id INT PRIMARY KEY REFERENCES medicine(id), interaction_type TEXT ); Sample rows from `medicine_enzyme_interaction`: (1, 1, inhibitor), (1, 2, inhibitor), (1, 3, inhibitor), ",
        "output": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT t1.name ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id JOIN enzyme as t3 ON t3.id  =  t2.enzyme_id WHERE t3.product  =  'Protoporphyrinogen IX'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of different countries that climbers are from. ###filtered_database_schema: CREATE TABLE `mountain` ( Mountain_ID INT PRIMARY KEY, Name TEXT, Height REAL, Prominence REAL, Range TEXT, Country TEXT ); Sample rows from `mountain`: (1, Kibo (Uhuru Pk), 5895.0, 5885.0, Kilimanjaro, Tanzania), (2, Mount Kenya (Batian), 5199.0, 3825.0, Mount Kenya, Kenya), (3, Mawenzi (Hans Meyer Pk), 5148.0, 850.0, Kilimanjaro, Tanzania), CREATE TABLE `climber` ( Climber_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Time TEXT, Points REAL, Mountain_ID INT REFERENCES mountain(Mountain_ID) ); Sample rows from `climber`: (1, Klaus Enders, West Germany, 1:13.05.6, 15.0, 1), (2, Siegfried Schauzu, West Germany, 1:14.56.4, 12.0, 1), (3, Hans Luthringhauser, West Germany, 1:16.58.0, 10.0, 2), ",
        "output": "SELECT COUNT(DISTINCT country) FROM climber"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the date and venue of each debate? ###filtered_database_schema: CREATE TABLE `people` ( People_ID INT PRIMARY KEY, District TEXT, Name TEXT, Party TEXT, Age INT ); Sample rows from `people`: (1, New York 1, Luther C. Carter, Republican, 35), (2, New York 2, James Humphrey, Republican, 38), (3, New York 3, Daniel Sickles, Democratic, 46), CREATE TABLE `debate` ( Debate_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Num_of_Audience INT ); Sample rows from `debate`: (1, October 21, 2011, Manama , Bahrain, 342), (2, December 17, 2014, Doha , Qatar, 134), (3, August 3, 2015, Manama , Bahrain, 90), CREATE TABLE `debate_people` ( Debate_ID INT PRIMARY KEY REFERENCES debate(Debate_ID), Affirmative INT PRIMARY KEY REFERENCES people(People_ID), Negative INT PRIMARY KEY REFERENCES people(People_ID), If_Affirmative_Win bool ); Sample rows from `debate_people`: (1, 1, 10, F), (5, 2, 8, F), (3, 4, 7, T), ",
        "output": "SELECT date ,  venue FROM debate"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average and oldest age for each gender of student? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT AVG(age) ,  MAX(age) ,  sex FROM student GROUP BY sex"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many eliminations did each team have? ###filtered_database_schema: CREATE TABLE `wrestler` ( Wrestler_ID INT PRIMARY KEY, Name TEXT, Reign TEXT, Days_held TEXT, Location TEXT, Event TEXT ); Sample rows from `wrestler`: (1, Rey Misterio Sr., 1, 344, Tijuana , Mexico, Live event), (2, Fishman, 1, 113, Tijuana , Mexico, Live event), (3, Villaño IV, 1, 1285, Tijuana , Mexico, Live event), CREATE TABLE `Elimination` ( Elimination_ID TEXT PRIMARY KEY, Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID), Team TEXT, Eliminated_By TEXT, Elimination_Move TEXT, Time TEXT ); Sample rows from `Elimination`: (1, 1, Team Orton, Punk, Go To Sleep, 00:11), (2, 2, Team Batista, Benjamin, Paydirt, 07:38), (3, 4, Team Batista, Orton, Rope hung DDT, 10:45), ",
        "output": "SELECT team ,  COUNT(*) FROM elimination GROUP BY team"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: papers cited by at least 5 papers ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t2.citingpaperid FROM paper as t1 JOIN cite as t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT(DISTINCT t2.citedpaperid)  >=  5;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the population of boulder ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT population FROM city WHERE city_name  =  \"boulder\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show white percentages of cities and the crime rates of counties they are in. ###filtered_database_schema: CREATE TABLE `county_public_safety` ( County_ID INT PRIMARY KEY, Name TEXT, Population INT, Police_officers INT, Residents_per_officer INT, Case_burden INT, Crime_rate REAL, Police_force TEXT, Location TEXT ); Sample rows from `county_public_safety`: (1, Abbotsford, 128165, 187, 685, 81, 118.0, Abbotsford Police Department, East), (2, Burnaby, 204320, 253, 808, 100, 123.0, RCMP, East), (3, Campbell River, 30810, 40, 770, 137, 178.0, RCMP, West), CREATE TABLE `city` ( City_ID INT PRIMARY KEY, County_ID INT REFERENCES county_public_safety(County_ID), Name TEXT, White REAL, Black REAL, Amerindian REAL, Asian REAL, Multiracial REAL, Hispanic REAL ); Sample rows from `city`: (1, 1, Adjuntas, 93.1, 3.1, 0.3, 0.0, 3.4, 99.6), (2, 1, Aguada, 86.6, 5.3, 0.3, 0.1, 7.7, 99.4), (3, 1, Aguadilla, 83.0, 7.4, 0.3, 0.2, 8.2, 98.5), ",
        "output": "SELECT t1.white ,  t2.crime_rate FROM city as t1 JOIN county_public_safety as t2 ON t1.county_id  =  t2.county_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show project ids and the number of documents in each project. ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (BK, Book, excellent), (CV, CV, excellent), (PT, Presentation, very good), CREATE TABLE `Ref_Budget_Codes` ( Budget_Type_Code CHAR(15) PRIMARY KEY, Budget_Type_Description VARCHAR(255) ); Sample rows from `Ref_Budget_Codes`: (GV, Government), (ORG, Organisation), (SF, Self founded), CREATE TABLE `Projects` ( Project_ID INTEGER, Project_Details VARCHAR(255) ); Sample rows from `Projects`: (30, Society Research project), (35, Internet of Things project), (105, Graph Database project), CREATE TABLE `Documents` ( Document_ID INTEGER, Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Project_ID INTEGER REFERENCES Projects(Project_ID), Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Documents`: (29, CV, 30, 2004-08-28 06:59:19, Review on UK files, None, None), (42, BK, 105, 2012-12-27 19:09:18, Review on Canadian files, None, None), (57, CV, 195, 1980-10-22 14:17:11, Review on French files, None, None), CREATE TABLE `Statements` ( Statement_ID INTEGER REFERENCES Documents(Document_ID), Statement_Details VARCHAR(255) ); Sample rows from `Statements`: (57, Open Project), (192, Private Project), CREATE TABLE `Documents_with_Expenses` ( Document_ID INTEGER REFERENCES Documents(Document_ID), Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code), Document_Details VARCHAR(255) ); Sample rows from `Documents_with_Expenses`: (57, GV, government), (192, GV, government), (226, GV, government), CREATE TABLE `Accounts` ( Account_ID INTEGER, Statement_ID INTEGER REFERENCES Statements(Statement_ID), Account_Details VARCHAR(255) ); Sample rows from `Accounts`: (7, 57, 495.063), (61, 57, 930.14), (98, 57, 6035.84), ",
        "output": "SELECT project_id ,  COUNT(*) FROM documents GROUP BY project_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many distinct countries are the climbers from? ###filtered_database_schema: CREATE TABLE `mountain` ( Mountain_ID INT PRIMARY KEY, Name TEXT, Height REAL, Prominence REAL, Range TEXT, Country TEXT ); Sample rows from `mountain`: (1, Kibo (Uhuru Pk), 5895.0, 5885.0, Kilimanjaro, Tanzania), (2, Mount Kenya (Batian), 5199.0, 3825.0, Mount Kenya, Kenya), (3, Mawenzi (Hans Meyer Pk), 5148.0, 850.0, Kilimanjaro, Tanzania), CREATE TABLE `climber` ( Climber_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Time TEXT, Points REAL, Mountain_ID INT REFERENCES mountain(Mountain_ID) ); Sample rows from `climber`: (1, Klaus Enders, West Germany, 1:13.05.6, 15.0, 1), (2, Siegfried Schauzu, West Germany, 1:14.56.4, 12.0, 1), (3, Hans Luthringhauser, West Germany, 1:16.58.0, 10.0, 2), ",
        "output": "SELECT COUNT(DISTINCT country) FROM climber"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the issue dates of volumes associated with the artist \"Gorgoroth\"? ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Artist TEXT, Age INT, Famous_Title TEXT, Famous_Release_date TEXT ); Sample rows from `artist`: (1, Gorgoroth, 34, Bergen 1996, November 2007), (2, Ophiolatry, 35, Transmutation, January 21, 2008), (3, Ophiolatry, 22, Antievangelistical Process (re-release), 2009), CREATE TABLE `volume` ( Volume_ID INT PRIMARY KEY, Volume_Issue TEXT, Issue_Date TEXT, Weeks_on_Top REAL, Song TEXT, Artist_ID INT REFERENCES artist(Artist_ID) ); Sample rows from `volume`: (1, 45:14 §, 27 December 1986 - 10 January, 3.0, The Way, 1), (2, 45:15, 17 January, 1.0, Everybody Have Fun Tonight , 2), (3, 45:16, 24 January, 1.0, Walk Like an Egyptian , 1), CREATE TABLE `music_festival` ( ID INT PRIMARY KEY, Music_Festival TEXT, Date_of_ceremony TEXT, Category TEXT, Volume INT REFERENCES volume(Volume_ID), Result TEXT ); Sample rows from `music_festival`: (1, 34th England Academy Prize, 18 February 2011, Best Song, 1, Nominated), (2, 34th Japan Academy Prize, 18 February 2011, Best Lyrics, 2, Nominated), (3, 34th European Academy Prize, 18 February 2011, Best Song, 3, Awarded), ",
        "output": "SELECT t2.issue_date FROM artist as t1 JOIN volume as t2 ON t1.artist_id  =  t2.artist_id WHERE t1.artist  =  \"Gorgoroth\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of documents that have both one of the three most common types and one of three most common structures? ###filtered_database_schema: CREATE TABLE `Roles` ( role_code VARCHAR(15) PRIMARY KEY, role_description VARCHAR(80) ); Sample rows from `Roles`: (DBA, Database Administrator), (PROJ-MGR, Project Manager), CREATE TABLE `Users` ( user_id INTEGER, role_code VARCHAR(15) REFERENCES Roles(role_code), user_name VARCHAR(40), user_login VARCHAR(40), password VARCHAR(40) ); Sample rows from `Users`: (1, PROJ-MGR, dickens.elta, 0, e72b5a2d50b39a8760764a5f7a9d68ca2f076877), (2, DBA, tremblay.raheem, 1, 9bc25a040d5647ced5ec32e1a455e90fafc10bcb), (3, DBA, lynn.haley, 0, 90db8f51449e6c39e2a01f0b649d5a92fe76bbbb), CREATE TABLE `Document_Structures` ( document_structure_code VARCHAR(15) PRIMARY KEY, parent_document_structure_code VARCHAR(15), document_structure_description VARCHAR(80) ); Sample rows from `Document_Structures`: (1, 1, Header), (6, 1, Main section), (8, 1, Bib), CREATE TABLE `Functional_Areas` ( functional_area_code VARCHAR(15) PRIMARY KEY, parent_functional_area_code VARCHAR(15), functional_area_description VARCHAR(80) ); Sample rows from `Functional_Areas`: (8, 8, Signature), (1, 8, Acknowledgement), (9, 8, Keep blank), CREATE TABLE `Images` ( image_id INTEGER, image_alt_text VARCHAR(80), image_name VARCHAR(40), image_url VARCHAR(255) ); Sample rows from `Images`: (1, Lea, top1, http://www.rempelnader.com/1.jpg), (2, Arden, top2, http://connellykertzmann.org/1.jpg), (3, Mohamed, top3, http://www.bernierconnelly.com/1.jpg), CREATE TABLE `Documents` ( document_code VARCHAR(15) PRIMARY KEY, document_structure_code VARCHAR(15) REFERENCES Document_Structures(document_structure_code), document_type_code VARCHAR(15), access_count INTEGER, document_name VARCHAR(80) ); Sample rows from `Documents`: (217, 8, Book, 1864, Learning English), (621, 1, Paper, 8208, Research about Art history), (958, 8, Book, 3769, Learning Database), CREATE TABLE `Document_Functional_Areas` ( document_code VARCHAR(15) REFERENCES Documents(document_code), functional_area_code VARCHAR(15) REFERENCES Functional_Areas(functional_area_code) ); Sample rows from `Document_Functional_Areas`: (675, 9), (930, 1), (217, 1), CREATE TABLE `Document_Sections` ( section_id INTEGER, document_code VARCHAR(15) REFERENCES Documents(document_code), section_sequence INTEGER, section_code VARCHAR(20), section_title VARCHAR(80) ); Sample rows from `Document_Sections`: (12, 714, 6072, 70, after), (15, 217, 4510, 14, after), (19, 675, 7236, 90, after), CREATE TABLE `Document_Sections_Images` ( section_id INTEGER PRIMARY KEY REFERENCES Document_Sections(section_id), image_id INTEGER PRIMARY KEY REFERENCES Images(image_id) ); Sample rows from `Document_Sections_Images`: (93, 6), (86, 2), (27, 3), ",
        "output": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY COUNT(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY COUNT(*) DESC LIMIT 3"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what state borders kentucky ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the campuses that had between 600 and 1000 faculty members in 2004? ###filtered_database_schema: CREATE TABLE `Campuses` ( Id INTEGER, Campus TEXT, Location TEXT, County TEXT, Year INTEGER ); Sample rows from `Campuses`: (1, California State University-Bakersfield, Bakersfield, Kern, 1965), (2, California State University-Channel Islands, Camarillo, Ventura, 2002), (3, California State University-Chico, Chico, Butte, 1887), CREATE TABLE `csu_fees` ( Campus INTEGER REFERENCES Campuses(Id), Year INTEGER, CampusFee INTEGER ); Sample rows from `csu_fees`: (1, 1996, 1951), (2, 2003, 1868), (3, 1996, 2042), CREATE TABLE `degrees` ( Year INTEGER PRIMARY KEY, Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Degrees INTEGER ); Sample rows from `degrees`: (1990, 1, 701), (1991, 1, 681), (1992, 1, 791), CREATE TABLE `discipline_enrollments` ( Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Discipline INTEGER PRIMARY KEY, Year INTEGER, Undergraduate INTEGER, Graduate INTEGER ); Sample rows from `discipline_enrollments`: (1, 4, 2004, 248, 0), (1, 5, 2004, 811, 73), (1, 6, 2004, 199, 0), CREATE TABLE `enrollments` ( Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Year INTEGER PRIMARY KEY, TotalEnrollment_AY INTEGER, FTE_AY INTEGER ); Sample rows from `enrollments`: (1, 1956, 384, 123), (1, 1957, 432, 151), (1, 1958, 422, 178), CREATE TABLE `faculty` ( Campus INTEGER REFERENCES Campuses(Id), Year INTEGER, Faculty REAL ); Sample rows from `faculty`: (1, 2002, 357.1), (2, 2002, 48.4), (3, 2002, 742.8), ",
        "output": "SELECT t1.campus FROM campuses as t1 JOIN faculty as t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND t1.year  =  2004"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name and category code of the product with the highest price? ###filtered_database_schema: CREATE TABLE `Staff` ( staff_id INTEGER, gender VARCHAR(1), first_name VARCHAR(80), last_name VARCHAR(80), email_address VARCHAR(255), phone_number VARCHAR(80) ); Sample rows from `Staff`: (114, 0, Ward, Boehm, marcelle.ritchie@example.com, (379)551-0838x146), (115, 1, Lucie, Lowe, ohintz@example.org, 142-311-6503x206), (116, 0, Dagmar, Erdman, wrau@example.com, 345-656-5571), CREATE TABLE `Customers` ( customer_id INTEGER, customer_type_code VARCHAR(20), address_line_1 VARCHAR(80), address_line_2 VARCHAR(80), town_city VARCHAR(80), state VARCHAR(80), email_address VARCHAR(255), phone_number VARCHAR(80) ); Sample rows from `Customers`: (113, Good Credit Rating, 144 Legros Landing, Apt. 551, Maryamport, Kansas, hsteuber@example.org, 06963347450), (114, Good Credit Rating, 039 Jedidiah Estate Suite 537, Apt. 245, Sauerberg, Hawaii, cayla.satterfield@example.net, 470-803-0244), (115, Good Credit Rating, 92189 Gulgowski Ranch Apt. 683, Apt. 828, Tyreekhaven, Tennessee, vida86@example.com, 997.698.4779x882), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, product_category_code VARCHAR(20), date_product_first_available DATETIME, date_product_discontinued DATETIME, product_name VARCHAR(80), product_description VARCHAR(255), product_price DECIMAL(19,4) ); Sample rows from `Products`: (117, 4, Food, 1988-09-29 17:54:50, 1987-12-20 13:46:16, Chocolate, Handmade chocolate, 2.88), (118, 3, Book, 1974-06-25 12:26:47, 1991-08-20 05:22:31, The Great Gatsby, American novel, 35), (119, 8, Hardware, 1994-12-18 15:13:19, 1997-07-02 18:26:16, Keyboard, Designed for games, 109.99), CREATE TABLE `Complaints` ( complaint_id INTEGER, product_id INTEGER REFERENCES Products(product_id), customer_id INTEGER REFERENCES Customers(customer_id), complaint_outcome_code VARCHAR(20), complaint_status_code VARCHAR(20), complaint_type_code VARCHAR(20), date_complaint_raised DATETIME, date_complaint_closed DATETIME, staff_id INTEGER REFERENCES Staff(staff_id) ); Sample rows from `Complaints`: (1, 117, 120, OK, Closed, Product Failure, 2002-07-18 10:59:35, 1976-04-19 11:03:06, 114), (2, 118, 113, OK, New, Product Unusable, 1973-02-10 22:55:56, 2013-09-14 02:59:10, 120), (3, 119, 114, OK, New, Product Unusable, 2006-10-29 07:08:46, 1995-09-11 14:48:46, 115), ",
        "output": "SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many lessons were in cancelled state? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 3904 Stroman Passage, Port Melyssa, 14445, Georgia, USA), (2, 053 Quigley Island, Hagenesfurt, 22194, Kentucky, USA), (3, 00704 Zoe Alley, Lake Elaina, 08938, Georgia, USA), CREATE TABLE `Staff` ( staff_id INTEGER, staff_address_id INTEGER REFERENCES Addresses(address_id), nickname VARCHAR(80), first_name VARCHAR(80), middle_name VARCHAR(80), last_name VARCHAR(80), date_of_birth DATETIME, date_joined_staff DATETIME, date_left_staff DATETIME ); Sample rows from `Staff`: (1, 14, thompson.constantin, Janessa, Amara, Sawayn, 2010-12-08 16:55:14, 2017-04-27 03:21:26, 2018-03-23 22:53:12), (2, 3, santos45, Camylle, Icie, Weissnat, 2015-08-01 13:22:43, 2016-06-06 08:54:28, 2018-03-10 15:25:00), (3, 5, ynader, Kaitlin, Stephania, Mertz, 1994-05-17 05:32:11, 2018-01-02 12:24:24, 2018-03-24 10:11:08), CREATE TABLE `Vehicles` ( vehicle_id INTEGER, vehicle_details VARCHAR(255) ); Sample rows from `Vehicles`: (1, Van), (2, Truck), (3, Car), CREATE TABLE `Customers` ( customer_id INTEGER, customer_address_id INTEGER REFERENCES Addresses(address_id), customer_status_code VARCHAR(15), date_became_customer DATETIME, date_of_birth DATETIME, first_name VARCHAR(80), last_name VARCHAR(80), amount_outstanding DOUBLE, email_address VARCHAR(250), phone_number VARCHAR(255), cell_mobile_phone_number VARCHAR(255) ); Sample rows from `Customers`: (1, 13, Bad Customer, 2016-05-11 17:03:48, 1998-12-15 13:24:40, Carole, Bernhard, 255.0, everette.goyette@example.org, 07278206718, 861-638-9797), (2, 10, Bad Customer, 2015-11-16 22:52:14, 1995-07-17 12:13:16, Genevieve, Terry, 7256.0, huel.jana@example.org, +14(5)2351480248, 578-518-4785x612), (3, 10, Good Customer, 2016-04-08 00:28:15, 1994-06-21 01:34:56, Clara, Ortiz, 9443.0, hilario.sporer@example.org, 374-483-2758x85087, 1-197-686-2849x8761), CREATE TABLE `Customer_Payments` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), datetime_payment DATETIME PRIMARY KEY, payment_method_code VARCHAR(10), amount_payment DOUBLE ); Sample rows from `Customer_Payments`: (11, 2018-02-05 18:44:46, Direct Debit, 9570.93), (2, 2018-02-24 10:07:05, Direct Debit, 8180.26), (14, 2018-02-27 20:08:53, Direct Debit, 4610.26), CREATE TABLE `Lessons` ( lesson_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), lesson_status_code VARCHAR(15), staff_id INTEGER REFERENCES Staff(staff_id), vehicle_id INTEGER REFERENCES Vehicles(vehicle_id), lesson_date DATETIME, lesson_time VARCHAR(10), price DOUBLE ); Sample rows from `Lessons`: (1, 6, Cancelled, 8, 3, 2018-02-28 10:55:36, 5, 199.0), (2, 8, Cancelled, 14, 3, 2018-03-07 16:12:36, 6, 167.0), (3, 6, Cancelled, 11, 2, 2018-03-03 15:10:16, 3, 352.0), ",
        "output": "SELECT COUNT(*) FROM lessons WHERE lesson_status_code = \"Cancelled\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show id and location of railways that are associated with more than one train. ###filtered_database_schema: CREATE TABLE `railway` ( Railway_ID INT PRIMARY KEY, Railway TEXT, Builder TEXT, Built TEXT, Wheels TEXT, Location TEXT, ObjectNumber TEXT ); Sample rows from `railway`: (1, SECR, SECR Ashford, 1901, 4-4-0, York, 1975-7006), (2, MR, MR Derby, 1902 Midland Railway 1000 was rebuilt in 1914., 4-4-0, Bo'ness, 1975-7018), (3, GNRD, GNR Doncaster, 1902, 4-4-2, Barrow Hill, 1975-7005), CREATE TABLE `train` ( Train_ID INT PRIMARY KEY, Train_Num TEXT, Name TEXT, From TEXT, Arrival TEXT, Railway_ID INT REFERENCES railway(Railway_ID) ); Sample rows from `train`: (1, 51195, Wardha-Ballarshah Pass, Wardha, 08:54, 1), (2, 12139, Sewagram Exp, Mumbai CST, 09:08, 1), (3, 12140, Ballarshah-Mumbai Pass, Ballarshah, 09:48, 2), CREATE TABLE `manager` ( Manager_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Working_year_starts TEXT, Age INT, Level INT ); Sample rows from `manager`: (1, Ben Curtis, United States, 2003, 45, 5), (2, Todd Hamilton, United States, 2004, 55, 5), (3, Tiger Woods, United States, 2006, 46, 5), CREATE TABLE `railway_manage` ( Railway_ID INT PRIMARY KEY REFERENCES railway(Railway_ID), Manager_ID INT PRIMARY KEY REFERENCES manager(Manager_ID), From_Year TEXT ); Sample rows from `railway_manage`: (8, 1, 2010), (9, 2, 2011), (7, 3, 2012), ",
        "output": "SELECT t2.railway_id ,  t1.location FROM railway as t1 JOIN train as t2 ON t1.railway_id  =  t2.railway_id GROUP BY t2.railway_id HAVING COUNT(*)  >  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many addresses are in the district of California? ###filtered_database_schema: CREATE TABLE `actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), last_update TIMESTAMP ); Sample rows from `actor`: (1, PENELOPE, GUINESS, 2006-02-15 04:34:33), (2, NICK, WAHLBERG, 2006-02-15 04:34:33), (3, ED, CHASE, 2006-02-15 04:34:33), CREATE TABLE `address` ( address_id SMALLINT UNSIGNED PRIMARY KEY, address VARCHAR(50), address2 VARCHAR(50), district VARCHAR(20), city_id SMALLINT UNSIGNED REFERENCES city(city_id), postal_code VARCHAR(10), phone VARCHAR(20), last_update TIMESTAMP ); Sample rows from `address`: (1, 47 MySakila Drive, None, Alberta, 300, , , 2006-02-15 04:45:30), (2, 28 MySQL Boulevard, None, QLD, 576, , , 2006-02-15 04:45:30), (3, 23 Workhaven Lane, None, Alberta, 300, , 14033335568, 2006-02-15 04:45:30), CREATE TABLE `category` ( category_id TINYINT UNSIGNED PRIMARY KEY, name VARCHAR(25), last_update TIMESTAMP ); Sample rows from `category`: (1, Action, 2006-02-15 04:46:27), (2, Animation, 2006-02-15 04:46:27), (3, Children, 2006-02-15 04:46:27), CREATE TABLE `city` ( city_id SMALLINT UNSIGNED PRIMARY KEY, city VARCHAR(50), country_id SMALLINT UNSIGNED REFERENCES country(country_id), last_update TIMESTAMP ); Sample rows from `city`: (1, A Corua (La Corua), 87, 2006-02-15 04:45:25), (2, Abha, 82, 2006-02-15 04:45:25), (3, Abu Dhabi, 101, 2006-02-15 04:45:25), CREATE TABLE `country` ( country_id SMALLINT UNSIGNED PRIMARY KEY, country VARCHAR(50), last_update TIMESTAMP ); Sample rows from `country`: (1, Afghanistan, 2006-02-15 04:44:00), (2, Algeria, 2006-02-15 04:44:00), (3, American Samoa, 2006-02-15 04:44:00), CREATE TABLE `customer` ( customer_id SMALLINT UNSIGNED PRIMARY KEY, store_id TINYINT UNSIGNED REFERENCES store(store_id), first_name VARCHAR(45), last_name VARCHAR(45), email VARCHAR(50), address_id SMALLINT UNSIGNED REFERENCES address(address_id), active BOOLEAN, create_date DATETIME, last_update TIMESTAMP ); Sample rows from `customer`: (1, 1, MARY, SMITH, MARY.SMITH@sakilacustomer.org, 5, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (2, 1, PATRICIA, JOHNSON, PATRICIA.JOHNSON@sakilacustomer.org, 6, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (3, 1, LINDA, WILLIAMS, LINDA.WILLIAMS@sakilacustomer.org, 7, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), CREATE TABLE `film` ( film_id SMALLINT UNSIGNED PRIMARY KEY, title VARCHAR(255), description TEXT, release_year YEAR, language_id TINYINT UNSIGNED REFERENCES language(language_id), original_language_id TINYINT UNSIGNED REFERENCES language(language_id), rental_duration TINYINT UNSIGNED, rental_rate DECIMAL(4,2), length SMALLINT UNSIGNED, replacement_cost DECIMAL(5,2), rating , special_features , last_update TIMESTAMP ); Sample rows from `film`: (1, ACADEMY DINOSAUR, A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies, 2006, 1, None, 6, 0.99, 86, 20.99, PG, Deleted Scenes,Behind the Scenes, 2006-02-15 05:03:42), (2, ACE GOLDFINGER, A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China, 2006, 1, None, 3, 4.99, 48, 12.99, G, Trailers,Deleted Scenes, 2006-02-15 05:03:42), (3, ADAPTATION HOLES, A Astounding Reflection of a Lumberjack And a Car who must Sink a Lumberjack in A Baloon Factory, 2006, 1, None, 7, 2.99, 50, 18.99, NC-17, Trailers,Deleted Scenes, 2006-02-15 05:03:42), CREATE TABLE `film_actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES actor(actor_id), film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), last_update TIMESTAMP ); Sample rows from `film_actor`: (1, 1, 2006-02-15 05:05:03), (1, 23, 2006-02-15 05:05:03), (1, 25, 2006-02-15 05:05:03), CREATE TABLE `film_category` ( film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), category_id TINYINT UNSIGNED PRIMARY KEY REFERENCES category(category_id), last_update TIMESTAMP ); Sample rows from `film_category`: (1, 6, 2006-02-15 05:07:09), (2, 11, 2006-02-15 05:07:09), (3, 6, 2006-02-15 05:07:09), CREATE TABLE `film_text` ( film_id SMALLINT PRIMARY KEY, title VARCHAR(255), description TEXT ); CREATE TABLE `inventory` ( inventory_id MEDIUMINT UNSIGNED PRIMARY KEY, film_id SMALLINT UNSIGNED REFERENCES film(film_id), store_id TINYINT UNSIGNED REFERENCES store(store_id), last_update TIMESTAMP ); Sample rows from `inventory`: (1, 1, 1, 2006-02-15 05:09:17), (2, 1, 1, 2006-02-15 05:09:17), (3, 1, 1, 2006-02-15 05:09:17), CREATE TABLE `language` ( language_id TINYINT UNSIGNED PRIMARY KEY, name CHAR(20), last_update TIMESTAMP ); CREATE TABLE `payment` ( payment_id SMALLINT UNSIGNED PRIMARY KEY, customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), rental_id INT REFERENCES rental(rental_id), amount DECIMAL(5,2), payment_date DATETIME, last_update TIMESTAMP ); Sample rows from `payment`: (1, 1, 1, 76, 2.99, 2005-05-25 11:30:37, 2006-02-15 22:12:30), (2, 1, 1, 573, 0.99, 2005-05-28 10:35:23, 2006-02-15 22:12:30), (3, 1, 1, 1185, 5.99, 2005-06-15 00:54:12, 2006-02-15 22:12:30), CREATE TABLE `rental` ( rental_id INT PRIMARY KEY, rental_date DATETIME, inventory_id MEDIUMINT UNSIGNED REFERENCES inventory(inventory_id), customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), return_date DATETIME, staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), last_update TIMESTAMP ); Sample rows from `rental`: (1, 2005-05-24 22:53:30, 367, 130, 2005-05-26 22:04:30, 1, 2006-02-15 21:30:53), (2, 2005-05-24 22:54:33, 1525, 459, 2005-05-28 19:40:33, 1, 2006-02-15 21:30:53), (3, 2005-05-24 23:03:39, 1711, 408, 2005-06-01 22:12:39, 1, 2006-02-15 21:30:53), CREATE TABLE `staff` ( staff_id TINYINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), address_id SMALLINT UNSIGNED REFERENCES address(address_id), picture BLOB, email VARCHAR(50), store_id TINYINT UNSIGNED, active BOOLEAN, username VARCHAR(16), password VARCHAR(40), last_update TIMESTAMP ); CREATE TABLE `store` ( store_id TINYINT UNSIGNED PRIMARY KEY, manager_staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), address_id SMALLINT UNSIGNED REFERENCES address(address_id), last_update TIMESTAMP ); ",
        "output": "SELECT COUNT(*) FROM address WHERE district  =  'California'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: where is a restaurant in mountain view that serves good arabic food ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many proteins are associated with an institution in a building with at least 20 floors? ###filtered_database_schema: CREATE TABLE `building` ( building_id TEXT PRIMARY KEY, Name TEXT, Street_address TEXT, Years_as_tallest TEXT, Height_feet INT, Floors INT ); Sample rows from `building`: (0, Citizens Bank Building, 701 North Franklin Street, 1913–1915, 145, 12), (1, Tampa City Hall, 315 John F. Kennedy Boulevard, 1915–1926, 160, 10), (2, Floridan Hotel, 905 Franklin Street, 1926–1966, 204, 17), CREATE TABLE `Institution` ( Institution_id TEXT PRIMARY KEY, Institution TEXT, Location TEXT, Founded REAL, Type TEXT, Enrollment INT, Team TEXT, Primary_Conference TEXT, building_id TEXT REFERENCES building(building_id) ); Sample rows from `Institution`: (0, Ave Maria University, Ave Maria, Florida, 1998.0, Private, 1200, Gyrenes, The Sun, 1), (1, Dakota State University, Madison, South Dakota, 1881.0, Public, 3102, Trojans, none, 1), (2, Edward Waters College, Jacksonville, Florida, 1866.0, Private, 800, Tigers, Gulf Coast (GCAC), 3), CREATE TABLE `protein` ( common_name TEXT PRIMARY KEY, protein_name TEXT, divergence_from_human_lineage REAL, accession_number TEXT, sequence_length REAL, sequence_identity_to_human_protein TEXT, Institution_id TEXT REFERENCES Institution(Institution_id) ); Sample rows from `protein`: (Tropical Clawed Frog, uncharacterized protein C20orf117-like, 371.2, XP_002942331.1, 1584.0, 39%, 1), (purple sea urchin, uncharacterized protein LOC578090, 742.9, XP_783370.2, 1587.0, 47%, 3), (body louse, Centromeric protein E, putative, 782.7, XP_002429877.1, 2086.0, 30%, 5), ",
        "output": "SELECT COUNT(*) FROM institution as t1 JOIN protein as t2 ON t1.institution_id  =  t2.institution_id JOIN building as t3 ON t3.building_id  =  t1.building_id WHERE t3.floors  >=  20"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which city has the most customers living in? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_content VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), other_address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 9443 Boyle Route Suite 857, Lucasville, 416, Colorado, USA, None), (2, 1969 Jabari Port Suite 393, New Sabryna, 721, SouthCarolina, USA, None), (3, 295 Hackett Curve, Reingertown, 255, NewJersey, USA, None), CREATE TABLE `Products` ( product_id INTEGER, product_details VARCHAR(255) ); Sample rows from `Products`: (1, Americano), (2, Dove Chocolate), (3, Latte), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method VARCHAR(15), customer_name VARCHAR(80), date_became_customer DATETIME, other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Cash, Dr. Julia Wuckert MD, 2018-03-01 23:20:10, None), (2, Cheque, Tillman Ernser, 2018-02-28 11:37:44, None), (3, Credit Card, Rodrick Heaney, 2018-03-09 17:41:58, None), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_address_from DATETIME, address_type VARCHAR(15), date_address_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 11, 1985-03-29 20:31:43, Billing, 1993-02-17 17:55:18), (13, 11, 2010-08-25 04:24:35, Billing, 1972-02-17 22:23:38), (2, 14, 2010-12-26 08:52:50, Residential, 1979-07-16 18:22:39), CREATE TABLE `Customer_Contact_Channels` ( customer_id INTEGER REFERENCES Customers(customer_id), channel_code VARCHAR(15), active_from_date DATETIME, active_to_date DATETIME, contact_number VARCHAR(50) ); Sample rows from `Customer_Contact_Channels`: (9, Email, 2017-12-07 18:18:15, 2018-03-23 13:37:14, 940.035.6435x0225), (2, Email, 2017-04-07 04:51:41, 2018-03-23 01:30:52, 189.449.8326x7607), (9, Email, 2017-05-25 16:08:45, 2018-03-13 07:32:25, 958-653-2640), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(15), order_date DATETIME, order_details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 15, Cancelled, 2018-03-21 11:20:46, None), (2, 3, Cancelled, 2018-03-05 06:35:33, None), (3, 5, Delivered, 2018-03-04 07:16:22, Second time), CREATE TABLE `Order_Items` ( order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), order_quantity VARCHAR(15) ); Sample rows from `Order_Items`: (14, 2, 5), (5, 2, 9), (14, 3, 2), ",
        "output": "SELECT t3.city FROM customers as t1 JOIN customer_addresses as t2 ON t1.customer_id  =  t2.customer_id JOIN addresses as t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what state has the largest population density ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX(density) FROM state );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of distinct player positions. ###filtered_database_schema: CREATE TABLE `school` ( School_ID INT PRIMARY KEY, School TEXT, Location TEXT, Enrollment REAL, Founded REAL, Denomination TEXT, Boys_or_Girls TEXT, Day_or_Boarding TEXT, Year_Entered_Competition REAL, School_Colors TEXT ); Sample rows from `school`: (1, St Aloysius' College, Milsons Point, 1200.0, 1879.0, Catholic, Boys, Day, 1929.0, Royal Blue and Gold), (2, Barker College, Hornsby, 2300.0, 1890.0, Anglican, Boys only to Yr 9 Co-ed Year 10 to 12, Day & Boarding, 1929.0, Red & Blue), (3, Cranbrook School, Bellevue Hill, 1000.0, 1918.0, Anglican, Boys, Day & Boarding, 1929.0, Red, White & Blue), CREATE TABLE `school_details` ( School_ID INT PRIMARY KEY REFERENCES school(School_ID), Nickname TEXT, Colors TEXT, League TEXT, Class TEXT, Division TEXT ); Sample rows from `school_details`: (1, Tigers, Blue and Yellow, DSHA, Flight A, Division 1), (2, Auks, Dark Green and White, DSHA, Flight B, Division 3), (3, Buccaneers, Garnet and White, DSHA, Fight A, Division 1), CREATE TABLE `school_performance` ( School_Id INT PRIMARY KEY REFERENCES school(School_ID), School_Year TEXT PRIMARY KEY, Class_A TEXT, Class_AA TEXT ); Sample rows from `school_performance`: (1, 1987-88, Yantis, Blanco), (1, 1988-89, Happy, Blanco), (1, 1989-90, Skidmore-Tynan, Bishop), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Team TEXT, Age INT, Position TEXT, School_ID INT REFERENCES school(School_ID) ); Sample rows from `player`: (1, Timothy Beckham, Tampa Bay Devil Rays, 15, Shortstop, 1), (2, Pedro Álvarez, Pittsburgh Pirates, 14, Third baseman, 2), (3, Eric Hosmer, Kansas City Royals, 16, First Baseman, 1), ",
        "output": "SELECT COUNT(DISTINCT position) FROM player"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: ACL papers by author ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t2.paperid  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of departments that are either in division AS or in division EN and in Building NEB. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), CREATE TABLE `Department` ( DNO INTEGER, Division VARCHAR(2), DName VARCHAR(25), Room VARCHAR(5), Building VARCHAR(13), DPhone INTEGER ); Sample rows from `Department`: (10, AS, History of Art, 268, Mergenthaler, 7117), (20, AS, Biology, 144, Mudd, 7330), (30, AS, Chemistry, 113, Remsen, 7429), CREATE TABLE `Member_of` ( FacID INTEGER REFERENCES Faculty(FacID), DNO INTEGER REFERENCES Department(DNO), Appt_Type VARCHAR(15) ); Sample rows from `Member_of`: (7792, 600, Primary), (9210, 520, Primary), (9811, 550, Primary), CREATE TABLE `Course` ( CID VARCHAR(7) PRIMARY KEY, CName VARCHAR(40), Credits INTEGER, Instructor INTEGER REFERENCES Faculty(FacID), Days VARCHAR(5), Hours VARCHAR(11), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Course`: (600.101, COMPUTER LITERACY, 3, 6112, MTW, 3, 600), (600.103, INTRODUCTION TO COMPUTER SCIENCE, 1, 4230, Th, 4, 600), (600.107, INTRO TO PROGRAMMING IN JAVA, 3, 1193, MTW, 3, 600), CREATE TABLE `Minor_in` ( StuID INTEGER REFERENCES Student(StuID), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Minor_in`: (1004, 520), (1005, 550), (1006, 50), CREATE TABLE `Enrolled_in` ( StuID INTEGER REFERENCES Student(StuID), CID VARCHAR(7) REFERENCES Course(CID), Grade VARCHAR(2) REFERENCES Gradeconversion(lettergrade) ); Sample rows from `Enrolled_in`: (1001, 550.681, A-), (1001, 600.303, B), (1001, 600.315, B+), CREATE TABLE `Gradeconversion` ( lettergrade VARCHAR(2) PRIMARY KEY, gradepoint FLOAT ); Sample rows from `Gradeconversion`: (A+, 4.0), (A, 4.0), (A-, 3.7), ",
        "output": "SELECT dname FROM department WHERE division  =  \"AS\" UNION SELECT dname FROM department WHERE division  =  \"EN\" AND building  =  \"NEB\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the different product names for products that have the 'warm' characteristic:? ###filtered_database_schema: CREATE TABLE `Ref_Characteristic_Types` ( characteristic_type_code VARCHAR(15) PRIMARY KEY, characteristic_type_description VARCHAR(80) ); Sample rows from `Ref_Characteristic_Types`: (Grade, Grade), (Purity, Purity), CREATE TABLE `Ref_Colors` ( color_code VARCHAR(15) PRIMARY KEY, color_description VARCHAR(80) ); Sample rows from `Ref_Colors`: (9, red), (5, green), (1, yellow), CREATE TABLE `Ref_Product_Categories` ( product_category_code VARCHAR(15) PRIMARY KEY, product_category_description VARCHAR(80), unit_of_measure VARCHAR(20) ); Sample rows from `Ref_Product_Categories`: (Herbs, Herbs, Handful ), (Seeds, Seeds, Weight - pound,kilo.), (Spices, Spices, Weight - pound,kilo.), CREATE TABLE `Characteristics` ( characteristic_id INTEGER, characteristic_type_code VARCHAR(15) REFERENCES Ref_Characteristic_Types(characteristic_type_code), characteristic_data_type VARCHAR(10), characteristic_name VARCHAR(80), other_characteristic_details VARCHAR(255) ); Sample rows from `Characteristics`: (1, Grade, numquam, slow, None), (2, Grade, doloribus, fast, None), (3, Purity, rem, warm, None), CREATE TABLE `Products` ( product_id INTEGER, color_code VARCHAR(15) REFERENCES Ref_Colors(color_code), product_category_code VARCHAR(15) REFERENCES Ref_Product_Categories(product_category_code), product_name VARCHAR(80), typical_buying_price VARCHAR(20), typical_selling_price VARCHAR(20), product_description VARCHAR(255), other_product_details VARCHAR(255) ); Sample rows from `Products`: (1, 4, Spices, cumin, , 2878.3, et, None), (2, 2, Spices, peper, 352447.2874677, 1892070.2803543, rerum, None), (3, 9, Herbs, basil, 503.8431967, 0.1859512, officia, None), CREATE TABLE `Product_Characteristics` ( product_id INTEGER REFERENCES Products(product_id), characteristic_id INTEGER REFERENCES Characteristics(characteristic_id), product_characteristic_value VARCHAR(50) ); Sample rows from `Product_Characteristics`: (13, 13, low), (11, 2, low), (5, 15, low), ",
        "output": "SELECT DISTINCT t1.product_name FROM products as t1 JOIN product_characteristics as t2 ON t1.product_id  =  t2.product_id JOIN characteristics as t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the party that has the most people. ###filtered_database_schema: CREATE TABLE `people` ( People_ID INT PRIMARY KEY, District TEXT, Name TEXT, Party TEXT, Age INT ); Sample rows from `people`: (1, New York 1, Luther C. Carter, Republican, 35), (2, New York 2, James Humphrey, Republican, 38), (3, New York 3, Daniel Sickles, Democratic, 46), CREATE TABLE `debate` ( Debate_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Num_of_Audience INT ); Sample rows from `debate`: (1, October 21, 2011, Manama , Bahrain, 342), (2, December 17, 2014, Doha , Qatar, 134), (3, August 3, 2015, Manama , Bahrain, 90), CREATE TABLE `debate_people` ( Debate_ID INT PRIMARY KEY REFERENCES debate(Debate_ID), Affirmative INT PRIMARY KEY REFERENCES people(People_ID), Negative INT PRIMARY KEY REFERENCES people(People_ID), If_Affirmative_Win bool ); Sample rows from `debate_people`: (1, 1, 10, F), (5, 2, 8, F), (3, 4, 7, T), ",
        "output": "SELECT party FROM people GROUP BY party ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code. ###filtered_database_schema: CREATE TABLE `Customer_Master_Index` ( master_customer_id INTEGER, cmi_details VARCHAR(255) ); Sample rows from `Customer_Master_Index`: (1, Schmitt-Lang), (2, Volkman, Mills and Ferry), (3, Gusikowski PLC), CREATE TABLE `CMI_Cross_References` ( cmi_cross_ref_id INTEGER, master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id), source_system_code CHAR(15) ); Sample rows from `CMI_Cross_References`: (2, 4, Rent), (4, 5, Parking), (8, 1, Rent), CREATE TABLE `Council_Tax` ( council_tax_id INTEGER, cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id) ); Sample rows from `Council_Tax`: (1, 101), (2, 103), (3, 104), CREATE TABLE `Business_Rates` ( business_rates_id INTEGER, cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id) ); Sample rows from `Business_Rates`: (2, 99), (5, 49), (8, 95), CREATE TABLE `Benefits_Overpayments` ( council_tax_id INTEGER, cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id) ); Sample rows from `Benefits_Overpayments`: (3, 65), (6, 41), (7, 83), CREATE TABLE `Parking_Fines` ( council_tax_id INTEGER, cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id) ); Sample rows from `Parking_Fines`: (9, 4), (10, 81), CREATE TABLE `Rent_Arrears` ( council_tax_id INTEGER, cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id) ); Sample rows from `Rent_Arrears`: (1, 100), (2, 8), (6, 59), CREATE TABLE `Electoral_Register` ( electoral_register_id INTEGER, cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id) ); Sample rows from `Electoral_Register`: (2, 83), (3, 65), (4, 100), ",
        "output": "SELECT t1.cmi_cross_ref_id ,  t1.source_system_code FROM cmi_cross_references as t1 JOIN council_tax as t2 ON t1.cmi_cross_ref_id  =  t2.cmi_cross_ref_id GROUP BY t1.cmi_cross_ref_id HAVING COUNT(*)  >=  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the minimum, maximum, and average age for all people. ###filtered_database_schema: CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Is_Male TEXT, Age INT ); Sample rows from `people`: (1, Mike Weir, Canada, T, 34), (2, Juli Hanson, Sweden, F, 32), (3, Ricky Barnes, United States, T, 30), CREATE TABLE `church` ( Church_ID INT PRIMARY KEY, Name TEXT, Organized_by TEXT, Open_Date INT, Continuation_of TEXT ); Sample rows from `church`: (1, Pure Church of Christ, Wycam Clark, 1831, Church of Christ), (2, Independent Church, – Hoton, 1832, Church of Christ), (3, Church of Christ, Ezra Booth, 1836, Church of the Latter Day Saints), CREATE TABLE `wedding` ( Church_ID INT PRIMARY KEY REFERENCES church(Church_ID), Male_ID INT PRIMARY KEY REFERENCES people(People_ID), Female_ID INT PRIMARY KEY REFERENCES people(People_ID), Year INT ); Sample rows from `wedding`: (1, 1, 2, 2014), (3, 3, 4, 2015), (5, 5, 6, 2016), ",
        "output": "SELECT MIN(age) ,  MAX(age) ,  AVG(age) FROM people"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the ids of the problems reported after 1978-06-26. ###filtered_database_schema: CREATE TABLE `Problem_Category_Codes` ( problem_category_code VARCHAR(20) PRIMARY KEY, problem_category_description VARCHAR(80) ); Sample rows from `Problem_Category_Codes`: (Datatabase, Database design or contents.), (GUI, User Interface.), (Middleware, Infrastructrure and Architecture), CREATE TABLE `Problem_Log` ( problem_log_id INTEGER, assigned_to_staff_id INTEGER REFERENCES Staff(staff_id), problem_id INTEGER REFERENCES Problems(problem_id), problem_category_code VARCHAR(20) REFERENCES Problem_Category_Codes(problem_category_code), problem_status_code VARCHAR(20) REFERENCES Problem_Status_Codes(problem_status_code), log_entry_date DATETIME, log_entry_description VARCHAR(255), log_entry_fix VARCHAR(255), other_log_details VARCHAR(255) ); Sample rows from `Problem_Log`: (1, 11, 11, Middleware, Solved, 2011-03-13 13:11:57, t, k, p), (2, 11, 8, GUI, Solved, 1976-03-31 14:03:02, a, k, s), (3, 12, 1, GUI, Solved, 1974-12-11 01:06:22, b, j, e), CREATE TABLE `Problem_Status_Codes` ( problem_status_code VARCHAR(20) PRIMARY KEY, problem_status_description VARCHAR(80) ); Sample rows from `Problem_Status_Codes`: (Reported, Reported), (Solved, Solved), CREATE TABLE `Product` ( product_id INTEGER, product_name VARCHAR(80), product_details VARCHAR(255) ); Sample rows from `Product`: (1, rose, k), (2, yellow, q), (3, chat, e), CREATE TABLE `Staff` ( staff_id INTEGER, staff_first_name VARCHAR(80), staff_last_name VARCHAR(80), other_staff_details VARCHAR(255) ); Sample rows from `Staff`: (1, Lacey, Bosco, m), (2, Dameon, Frami, x), (3, Ashley, Medhurst, w), CREATE TABLE `Problems` ( problem_id INTEGER, product_id INTEGER REFERENCES Product(product_id), closure_authorised_by_staff_id INTEGER REFERENCES Staff(staff_id), reported_by_staff_id INTEGER REFERENCES Staff(staff_id), date_problem_reported DATETIME, date_problem_closed DATETIME, problem_description VARCHAR(255), other_problem_details VARCHAR(255) ); Sample rows from `Problems`: (1, 4, 4, 2, 1978-06-26 19:10:17, 2012-07-22 19:24:26, x, p), (2, 8, 3, 10, 1988-11-07 16:09:31, 1973-06-07 04:13:51, w, p), (3, 1, 4, 1, 1995-05-14 08:32:56, 1997-02-26 05:06:15, r, i), ",
        "output": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: which country did participated in the most number of Tournament competitions? ###filtered_database_schema: CREATE TABLE `club` ( Club_ID INT PRIMARY KEY, name TEXT, Region TEXT, Start_year TEXT ); Sample rows from `club`: (1, AIB, USA, 2009), (2, BK Slide, UK, 1998), (3, IFG, China, 2005), CREATE TABLE `club_rank` ( Rank REAL PRIMARY KEY, Club_ID INT PRIMARY KEY REFERENCES club(Club_ID), Gold REAL, Silver REAL, Bronze REAL, Total REAL ); Sample rows from `club_rank`: (1.0, 2, 11.0, 11.0, 9.0, 31.0), (2.0, 3, 8.0, 7.0, 6.0, 21.0), (3.0, 1, 7.0, 4.0, 2.0, 13.0), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, name TEXT, Position TEXT, Club_ID INT REFERENCES club(Club_ID), Apps REAL, Tries REAL, Goals TEXT, Points REAL ); Sample rows from `player`: (1, Michael Platt, Full Back, 1, 20.0, 5.0, 0, 20.0), (2, Dave Halley, Right Wing, 2, 23.0, 9.0, 0, 36.0), (3, James Evans, Right Centre, 1, 30.0, 9.0, 0, 36.0), CREATE TABLE `competition` ( Competition_ID INT PRIMARY KEY, Year REAL, Competition_type TEXT, Country TEXT ); Sample rows from `competition`: (1, 2006.0, Friendly, Italy), (2, 2006.0, Friendly, Spain), (3, 2006.0, Friendly, Australia), CREATE TABLE `competition_result` ( Competition_ID INT PRIMARY KEY REFERENCES competition(Competition_ID), Club_ID_1 INT PRIMARY KEY REFERENCES club(Club_ID), Club_ID_2 INT PRIMARY KEY REFERENCES club(Club_ID), Score TEXT ); Sample rows from `competition_result`: (1, 1, 2, 11:10), (2, 3, 2, 25:2), (10, 4, 2, 13:10), ",
        "output": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find all Apple Store in \" Los Angeles \" ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT business_id FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Apple Store\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the ids of all distinct orders ordered by placed date. ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_name VARCHAR(80), customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Savannah, rerum), (2, George, est), (3, Alberto, deleniti), CREATE TABLE `Invoices` ( invoice_number INTEGER, invoice_date DATETIME, invoice_details VARCHAR(255) ); Sample rows from `Invoices`: (1, 1989-09-03 16:03:05, vitae), (2, 1989-12-11 16:40:57, magnam), (3, 1995-10-07 14:13:05, et), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(10), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 2, Shipped, 2009-02-21 15:26:19, None), (2, 11, Shipped, 1974-06-24 22:10:26, None), (3, 4, Shipped, 1982-12-29 21:10:11, None), CREATE TABLE `Products` ( product_id INTEGER, product_name VARCHAR(80), product_details VARCHAR(255) ); Sample rows from `Products`: (1, food, None), (2, book, None), (3, food, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, product_id INTEGER REFERENCES Products(product_id), order_id INTEGER REFERENCES Orders(order_id), order_item_status VARCHAR(10), order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 6, Finish, None), (2, 15, 6, Finish, None), (3, 12, 15, Finish, None), CREATE TABLE `Shipments` ( shipment_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), shipment_tracking_number VARCHAR(80), shipment_date DATETIME, other_shipment_details VARCHAR(255) ); Sample rows from `Shipments`: (1, 5, 13, 3452, 1983-08-13 22:34:11, None), (2, 7, 2, 0114, 1977-11-10 12:11:25, None), (3, 10, 5, 478, 2006-01-17 03:08:05, None), CREATE TABLE `Shipment_Items` ( shipment_id INTEGER REFERENCES Shipments(shipment_id), order_item_id INTEGER REFERENCES Order_Items(order_item_id) ); Sample rows from `Shipment_Items`: (11, 12), (10, 15), (10, 12), ",
        "output": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems. ###filtered_database_schema: CREATE TABLE `Problem_Category_Codes` ( problem_category_code VARCHAR(20) PRIMARY KEY, problem_category_description VARCHAR(80) ); Sample rows from `Problem_Category_Codes`: (Datatabase, Database design or contents.), (GUI, User Interface.), (Middleware, Infrastructrure and Architecture), CREATE TABLE `Problem_Log` ( problem_log_id INTEGER, assigned_to_staff_id INTEGER REFERENCES Staff(staff_id), problem_id INTEGER REFERENCES Problems(problem_id), problem_category_code VARCHAR(20) REFERENCES Problem_Category_Codes(problem_category_code), problem_status_code VARCHAR(20) REFERENCES Problem_Status_Codes(problem_status_code), log_entry_date DATETIME, log_entry_description VARCHAR(255), log_entry_fix VARCHAR(255), other_log_details VARCHAR(255) ); Sample rows from `Problem_Log`: (1, 11, 11, Middleware, Solved, 2011-03-13 13:11:57, t, k, p), (2, 11, 8, GUI, Solved, 1976-03-31 14:03:02, a, k, s), (3, 12, 1, GUI, Solved, 1974-12-11 01:06:22, b, j, e), CREATE TABLE `Problem_Status_Codes` ( problem_status_code VARCHAR(20) PRIMARY KEY, problem_status_description VARCHAR(80) ); Sample rows from `Problem_Status_Codes`: (Reported, Reported), (Solved, Solved), CREATE TABLE `Product` ( product_id INTEGER, product_name VARCHAR(80), product_details VARCHAR(255) ); Sample rows from `Product`: (1, rose, k), (2, yellow, q), (3, chat, e), CREATE TABLE `Staff` ( staff_id INTEGER, staff_first_name VARCHAR(80), staff_last_name VARCHAR(80), other_staff_details VARCHAR(255) ); Sample rows from `Staff`: (1, Lacey, Bosco, m), (2, Dameon, Frami, x), (3, Ashley, Medhurst, w), CREATE TABLE `Problems` ( problem_id INTEGER, product_id INTEGER REFERENCES Product(product_id), closure_authorised_by_staff_id INTEGER REFERENCES Staff(staff_id), reported_by_staff_id INTEGER REFERENCES Staff(staff_id), date_problem_reported DATETIME, date_problem_closed DATETIME, problem_description VARCHAR(255), other_problem_details VARCHAR(255) ); Sample rows from `Problems`: (1, 4, 4, 2, 1978-06-26 19:10:17, 2012-07-22 19:24:26, x, p), (2, 8, 3, 10, 1988-11-07 16:09:31, 1973-06-07 04:13:51, w, p), (3, 1, 4, 1, 1995-05-14 08:32:56, 1997-02-26 05:06:15, r, i), ",
        "output": "SELECT product_id FROM problems as t1 JOIN staff as t2 ON t1.reported_by_staff_id = t2.staff_id WHERE t2.staff_first_name = \"Dameon\" AND t2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems as t1 JOIN staff as t2 ON t1.reported_by_staff_id = t2.staff_id WHERE t2.staff_first_name = \"Jolie\" AND t2.staff_last_name = \"Weber\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List all public schools and their locations. ###filtered_database_schema: CREATE TABLE `basketball_match` ( Team_ID INT PRIMARY KEY, School_ID INT REFERENCES university(School_ID), Team_Name TEXT, ACC_Regular_Season TEXT, ACC_Percent TEXT, ACC_Home TEXT, ACC_Road TEXT, All_Games TEXT, All_Games_Percent INT, All_Home TEXT, All_Road TEXT, All_Neutral TEXT ); Sample rows from `basketball_match`: (1, 1, North Carolina, 14–2, .875, 6–2, 8–0, 35–2, 0.946, 14–2, 13–0, 9–1), (2, 2, Duke, 13–3, .813, 7–1, 6–2, 28–6, 0.824, 15–1, 8–2, 5–3), (3, 4, Clemson, 10–6, .625, 7–1, 3–5, 24–10, 0.706, 14–2, 6–5, 4–3), CREATE TABLE `university` ( School_ID INT PRIMARY KEY, School TEXT, Location TEXT, Founded REAL, Affiliation TEXT, Enrollment REAL, Nickname TEXT, Primary_conference TEXT ); Sample rows from `university`: (1, University of Delaware, Newark, DE, 1743.0, Public, 19067.0, Fightin' Blue Hens, Colonial Athletic Association ( D-I )), (2, Lebanon Valley College, Annville, PA, 1866.0, Private/Methodist, 2100.0, Flying Dutchmen, MAC Commonwealth Conference ( D-III )), (3, University of Rhode Island, Kingston, RI, 1892.0, Public, 19095.0, Rams, Atlantic 10 Conference ( D-I )), ",
        "output": "SELECT school ,  location FROM university WHERE affiliation  =  'Public'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the distinct billing countries of the invoices? ###filtered_database_schema: CREATE TABLE `Album` ( AlbumId INTEGER, Title varchar(160), ArtistId INTEGER PRIMARY KEY REFERENCES Artist(ArtistId) ); Sample rows from `Album`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `Artist` ( ArtistId INTEGER, Name varchar(120) ); Sample rows from `Artist`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `Customer` ( CustomerId INTEGER, FirstName varchar(40), LastName varchar(20), Company varchar(80), Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60), SupportRepId INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId) ); Sample rows from `Customer`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `Employee` ( EmployeeId INTEGER, LastName varchar(20), FirstName varchar(20), Title varchar(30), ReportsTo INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId), BirthDate datetime, HireDate datetime, Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60) ); Sample rows from `Employee`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `Genre` ( GenreId INTEGER, Name varchar(120) ); Sample rows from `Genre`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `Invoice` ( InvoiceId INTEGER, CustomerId INTEGER PRIMARY KEY REFERENCES Customer(CustomerId), InvoiceDate datetime, BillingAddress varchar(70), BillingCity varchar(40), BillingState varchar(40), BillingCountry varchar(40), BillingPostalCode varchar(10), Total decimal(10,2) ); Sample rows from `Invoice`: (1, 2, 2009-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2009-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2009-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `InvoiceLine` ( InvoiceLineId INTEGER, InvoiceId INTEGER PRIMARY KEY REFERENCES Invoice(InvoiceId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId), UnitPrice decimal(10,2), Quantity INTEGER ); Sample rows from `InvoiceLine`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `MediaType` ( MediaTypeId INTEGER, Name varchar(120) ); Sample rows from `MediaType`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `Playlist` ( PlaylistId INTEGER, Name varchar(120) ); Sample rows from `Playlist`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `PlaylistTrack` ( PlaylistId INTEGER PRIMARY KEY REFERENCES Playlist(PlaylistId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId) ); Sample rows from `PlaylistTrack`: (1, 1), (8, 1), (17, 1), CREATE TABLE `Track` ( TrackId INTEGER, Name varchar(200), AlbumId INTEGER PRIMARY KEY REFERENCES Album(AlbumId), MediaTypeId INTEGER PRIMARY KEY REFERENCES MediaType(MediaTypeId), GenreId INTEGER PRIMARY KEY REFERENCES Genre(GenreId), Composer varchar(220), Milliseconds INTEGER, Bytes INTEGER, UnitPrice decimal(10,2) ); Sample rows from `Track`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), ",
        "output": "SELECT DISTINCT(billingcountry) FROM invoice"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the name of technicians whose team is not \"NYY\". ###filtered_database_schema: CREATE TABLE `repair` ( repair_ID INT PRIMARY KEY, name TEXT, Launch_Date TEXT, Notes TEXT ); Sample rows from `repair`: (1, Discoverer, 21 Jan 2009, repair Failed. Failed to achieve orbit), (2, Discoverer 1, 28 Feb 2009, First object in polar orbit), (3, Discoverer 3, 03 Jun 2009, repair failed. Failed to achieve orbit), CREATE TABLE `machine` ( Machine_ID INT PRIMARY KEY, Making_Year INT, Class TEXT, Team TEXT, Machine_series TEXT, value_points REAL, quality_rank INT ); Sample rows from `machine`: (1, 1991, 125cc, Hero Sports TS- Honda, RS125, 105.0, 2), (2, 1992, 125cc, Marlboro Pileri - Honda, RS125, 57.0, 1), (3, 1993, 125cc, Marlboro Pileri - Honda, RS125, 129.0, 4), CREATE TABLE `technician` ( technician_id REAL PRIMARY KEY, Name TEXT, Team TEXT, Starting_Year REAL, Age INT ); Sample rows from `technician`: (1.0, Joe Sewell, NYY, 2012.0, 37), (2.0, John Brown, NYY, 2013.0, 36), (3.0, Tony Sewell, CLE, 2005.0, 43), CREATE TABLE `repair_assignment` ( technician_id INT PRIMARY KEY REFERENCES technician(technician_id), repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID), Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID) ); Sample rows from `repair_assignment`: (1, 1, 1), (2, 2, 2), (3, 3, 3), ",
        "output": "SELECT name FROM technician WHERE team != \"NYY\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: give me the best american in the bay area ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which student are enrolled in at least two courses? Give me the student ID and personal name. ###filtered_database_schema: CREATE TABLE `Course_Authors_and_Tutors` ( author_id INTEGER, author_tutor_ATB VARCHAR(3), login_name VARCHAR(40), password VARCHAR(40), personal_name VARCHAR(80), middle_name VARCHAR(80), family_name VARCHAR(80), gender_mf VARCHAR(1), address_line_1 VARCHAR(80) ); Sample rows from `Course_Authors_and_Tutors`: (1, 331, jmckenzie, c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b, Cathrine, Ruthie, Grant, 0, 756 Monahan Mews Spinkashire, NJ 64230-5098), (2, 975, heidenreich.ara, 24b0ee84063c3b017ab1839e01b7280f47f7c7c2, Retha, Corene, Armstrong, 0, 98623 Huels Manor Jasttown, DE 31611), (3, 349, clementina29, cdaf6c3483f19e2253659a40a3aab786a3390f78, Darius, Ethyl, Reichel, 0, 99296 Keeling Courts North Audreanne, IL 28272), CREATE TABLE `Students` ( student_id INTEGER, date_of_registration DATETIME, date_of_latest_logon DATETIME, login_name VARCHAR(40), password VARCHAR(10), personal_name VARCHAR(40), middle_name VARCHAR(40), family_name VARCHAR(40) ); Sample rows from `Students`: (1, 2015-07-22 13:32:35, 2017-10-17 22:52:26, annamae.hoppe, db8765bb6f, Wilson, Aubrey, Ward), (2, 2015-07-02 00:21:42, 2017-06-24 22:16:27, wmiller, 35faf8182a, Karson, Luella, Jaskolski), (3, 2015-10-11 03:23:27, 2018-03-10 23:22:23, ahartmann, 8e064ec4e6, Mariela, Brandt, Legros), CREATE TABLE `Subjects` ( subject_id INTEGER, subject_name VARCHAR(120) ); Sample rows from `Subjects`: (1, Computer Science), (2, Arts), (3, Language), CREATE TABLE `Courses` ( course_id INTEGER, author_id INTEGER REFERENCES Course_Authors_and_Tutors(author_id), subject_id INTEGER REFERENCES Subjects(subject_id), course_name VARCHAR(120), course_description VARCHAR(255) ); Sample rows from `Courses`: (1, 8, 1, database, database), (2, 6, 1, advanced database, advanced database), (3, 15, 1, operating system, operating system), CREATE TABLE `Student_Course_Enrolment` ( registration_id INTEGER, student_id INTEGER REFERENCES Students(student_id), course_id INTEGER REFERENCES Courses(course_id), date_of_enrolment DATETIME, date_of_completion DATETIME ); Sample rows from `Student_Course_Enrolment`: (1, 11, 2, 2017-10-09 07:09:02, 2018-02-26 07:48:52), (2, 15, 4, 2017-11-13 12:49:33, 2018-03-04 01:24:56), (3, 10, 8, 2017-10-17 13:50:40, 2018-03-22 02:53:01), CREATE TABLE `Student_Tests_Taken` ( registration_id INTEGER REFERENCES Student_Course_Enrolment(registration_id), date_test_taken DATETIME, test_result VARCHAR(255) ); Sample rows from `Student_Tests_Taken`: (12, 2018-03-25 03:27:16, Fail), (10, 2018-03-25 21:50:22, Pass), (7, 2018-03-21 00:32:25, Pass), ",
        "output": "SELECT t1.student_id ,  t2.personal_name FROM student_course_enrolment as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id GROUP BY t1.student_id HAVING COUNT(*)  >=  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the login names used both by some course authors and some students? ###filtered_database_schema: CREATE TABLE `Course_Authors_and_Tutors` ( author_id INTEGER, author_tutor_ATB VARCHAR(3), login_name VARCHAR(40), password VARCHAR(40), personal_name VARCHAR(80), middle_name VARCHAR(80), family_name VARCHAR(80), gender_mf VARCHAR(1), address_line_1 VARCHAR(80) ); Sample rows from `Course_Authors_and_Tutors`: (1, 331, jmckenzie, c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b, Cathrine, Ruthie, Grant, 0, 756 Monahan Mews Spinkashire, NJ 64230-5098), (2, 975, heidenreich.ara, 24b0ee84063c3b017ab1839e01b7280f47f7c7c2, Retha, Corene, Armstrong, 0, 98623 Huels Manor Jasttown, DE 31611), (3, 349, clementina29, cdaf6c3483f19e2253659a40a3aab786a3390f78, Darius, Ethyl, Reichel, 0, 99296 Keeling Courts North Audreanne, IL 28272), CREATE TABLE `Students` ( student_id INTEGER, date_of_registration DATETIME, date_of_latest_logon DATETIME, login_name VARCHAR(40), password VARCHAR(10), personal_name VARCHAR(40), middle_name VARCHAR(40), family_name VARCHAR(40) ); Sample rows from `Students`: (1, 2015-07-22 13:32:35, 2017-10-17 22:52:26, annamae.hoppe, db8765bb6f, Wilson, Aubrey, Ward), (2, 2015-07-02 00:21:42, 2017-06-24 22:16:27, wmiller, 35faf8182a, Karson, Luella, Jaskolski), (3, 2015-10-11 03:23:27, 2018-03-10 23:22:23, ahartmann, 8e064ec4e6, Mariela, Brandt, Legros), CREATE TABLE `Subjects` ( subject_id INTEGER, subject_name VARCHAR(120) ); Sample rows from `Subjects`: (1, Computer Science), (2, Arts), (3, Language), CREATE TABLE `Courses` ( course_id INTEGER, author_id INTEGER REFERENCES Course_Authors_and_Tutors(author_id), subject_id INTEGER REFERENCES Subjects(subject_id), course_name VARCHAR(120), course_description VARCHAR(255) ); Sample rows from `Courses`: (1, 8, 1, database, database), (2, 6, 1, advanced database, advanced database), (3, 15, 1, operating system, operating system), CREATE TABLE `Student_Course_Enrolment` ( registration_id INTEGER, student_id INTEGER REFERENCES Students(student_id), course_id INTEGER REFERENCES Courses(course_id), date_of_enrolment DATETIME, date_of_completion DATETIME ); Sample rows from `Student_Course_Enrolment`: (1, 11, 2, 2017-10-09 07:09:02, 2018-02-26 07:48:52), (2, 15, 4, 2017-11-13 12:49:33, 2018-03-04 01:24:56), (3, 10, 8, 2017-10-17 13:50:40, 2018-03-22 02:53:01), CREATE TABLE `Student_Tests_Taken` ( registration_id INTEGER REFERENCES Student_Course_Enrolment(registration_id), date_test_taken DATETIME, test_result VARCHAR(255) ); Sample rows from `Student_Tests_Taken`: (12, 2018-03-25 03:27:16, Fail), (10, 2018-03-25 21:50:22, Pass), (7, 2018-03-21 00:32:25, Pass), ",
        "output": "SELECT login_name FROM course_authors_and_tutors INTERSECT SELECT login_name FROM students"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find all the stores in the district with the most population. ###filtered_database_schema: CREATE TABLE `product` ( product_id INT PRIMARY KEY, product TEXT, dimensions TEXT, dpi REAL, pages_per_minute_color REAL, max_page_size TEXT, interface TEXT ); Sample rows from `product`: (1, Fujitsu fi-6130 A4 Series Scanner, 301 x 160 x 158, 600.0, 30.0, A4, USB 2.0), (2, Plustek MobileOffice D28 Corporate, 303 x 94 x 60, 600.0, 28.0, A4, USB 2.0), (3, Xerox Travel Scanner 100, 289 x 51 x 38, 600.0, 4.0, A4, USB 2.0), CREATE TABLE `store` ( Store_ID INT PRIMARY KEY, Store_Name TEXT, Type TEXT, Area_size REAL, Number_of_product_category REAL, Ranking INT ); Sample rows from `store`: (1, Miramichi, City Mall, 179.84, 17811.0, 2), (2, Neguac, Village Store, 26.69, 1678.0, 3), (3, Rogersville, Village Store, 7.23, 1170.0, 1), CREATE TABLE `district` ( District_ID INT PRIMARY KEY, District_name TEXT, Headquartered_City TEXT, City_Population REAL, City_Area REAL ); Sample rows from `district`: (1, Attock District, Attock City, 94620.0, 20.0), (2, Bahawalnagar District, Bahawalnagar City, 134936.0, 13.0), (3, Bahawalpur District, Bahawalpur City, 530438.0, 38.0), CREATE TABLE `store_product` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), Product_ID INT PRIMARY KEY REFERENCES product(Product_ID) ); Sample rows from `store_product`: (1, 1), (1, 2), (1, 3), CREATE TABLE `store_district` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), District_ID INT REFERENCES district(District_ID) ); Sample rows from `store_district`: (1, 15), (2, 15), (3, 11), ",
        "output": "SELECT t1.store_name FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show all ages and corresponding number of students. ###filtered_database_schema: CREATE TABLE `Allergy_Type` ( Allergy VARCHAR(20) PRIMARY KEY, AllergyType VARCHAR(20) ); Sample rows from `Allergy_Type`: (Eggs, food), (Nuts, food), (Milk, food), CREATE TABLE `Has_Allergy` ( StuID INTEGER REFERENCES Student(StuID), Allergy VARCHAR(20) REFERENCES Allergy_Type(Allergy) ); Sample rows from `Has_Allergy`: (1001, Cat), (1002, Shellfish), (1002, Tree Pollen), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), ",
        "output": "SELECT age ,  COUNT(*) FROM student GROUP BY age"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many trains have 'Express' in their names? ###filtered_database_schema: CREATE TABLE `train` ( id INT PRIMARY KEY, train_number INT, name TEXT, origin TEXT, destination TEXT, time TEXT, interval TEXT ); Sample rows from `train`: (1, 16724, Ananthapuri Express, Trivandrum, Chennai, 17:15, Daily), (2, 16127, Guruvayur Express, Chennai, Guruvayur, 22:10, Daily), (3, 16128, Guruvayur Express, Guruvayur, Chennai, 4:49, Daily), CREATE TABLE `station` ( id INT PRIMARY KEY, network_name TEXT, services TEXT, local_authority TEXT ); Sample rows from `station`: (1, Amersham, Metropolitan line and Chiltern Railways, Chiltern), (2, Bushey, London Overground and London Midland, Watford), (3, Brentwood, Greater Anglia, Brentwood), CREATE TABLE `route` ( train_id INT PRIMARY KEY REFERENCES train(id), station_id INT PRIMARY KEY REFERENCES station(id) ); Sample rows from `route`: (1, 1), (1, 2), (1, 3), CREATE TABLE `weekly_weather` ( station_id INT PRIMARY KEY REFERENCES station(id), day_of_week TEXT PRIMARY KEY, high_temperature INT, low_temperature INT, precipitation REAL, wind_speed_mph INT ); Sample rows from `weekly_weather`: (1, Monday, 59, 54, 90.0, 13), (1, Tuesday, 66, 55, 20.0, 12), (1, Wednesday, 60, 52, 10.0, 14), ",
        "output": "SELECT COUNT(*) FROM train WHERE name LIKE \"%Express%\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the 3 counties that have the smallest population? Give me the county names. ###filtered_database_schema: CREATE TABLE `county` ( County_Id INT PRIMARY KEY, County_name TEXT, Population REAL, Zip_code TEXT ); Sample rows from `county`: (1, Howard, 21000.0, D21), (2, Baltimore County, 90000.0, D08), (3, Colony, 79000.0, D02), CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Year REAL, Party TEXT, Governor TEXT, Lieutenant_Governor TEXT, Comptroller TEXT, Attorney_General TEXT, US_Senate TEXT ); Sample rows from `party`: (1, 1998.0, Democratic, Peter Vallone, Sandra Frankel, Carl McCall, Eliot Spitzer, Charles Schumer), (2, 1998.0, Liberal, Betsy McCaughey Ross, Jonathan Reiter, Carl McCall, Eliot Spitzer, Charles Schumer), (3, 2002.0, Democratic, Carl McCall, Dennis Mehiel, Alan Hevesi, Eliot Spitzer, (no election)), CREATE TABLE `election` ( Election_ID INT PRIMARY KEY, Counties_Represented TEXT, District INT REFERENCES county(County_Id), Delegate TEXT, Party INT REFERENCES party(Party_ID), First_Elected REAL, Committee TEXT ); Sample rows from `election`: (1, 09.1 9A, 1, Bates, Gail H. Gail H. Bates, 1, 2002.0, Appropriations), (2, 09.1 9A, 1, Miller, Warren E. Warren E. Miller, 1, 2003.0, Economic Matters), (3, 12.1 12A, 2, DeBoy, Steven J. Sr. Steven J. DeBoy, Sr., 2, 2002.0, Appropriations), ",
        "output": "SELECT county_name FROM county ORDER BY population ASC LIMIT 3"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the grape, winery and year of the wines whose price is bigger than 100 ordered by year. ###filtered_database_schema: CREATE TABLE `grapes` ( ID INTEGER, Grape TEXT PRIMARY KEY, Color TEXT ); Sample rows from `grapes`: (1, Barbera, Red), (2, Cabernet Franc, Red), (3, Cabernet Sauvingnon, Red), CREATE TABLE `appellations` ( No INTEGER, Appelation TEXT PRIMARY KEY, County TEXT, State TEXT, Area TEXT, isAVA TEXT ); Sample rows from `appellations`: (1, Alexander Valley, Sonoma, California, North Coast, Yes), (2, Amador County, Amador, California, Sierra Foothills, No), (3, Amador-Mendocino-Sonoma Counties, N/A, California, N/A, No), CREATE TABLE `wine` ( No INTEGER, Grape TEXT REFERENCES grapes(Grape), Winery TEXT, Appelation TEXT REFERENCES appellations(Appelation), State TEXT, Name TEXT, Year INTEGER, Price INTEGER, Score INTEGER, Cases INTEGER, Drink TEXT ); Sample rows from `wine`: (1, Zinfandel, Robert Biale, St. Helena, California, Old Kraft Vineyard, 2008, 44, 93, 275, now), (2, Zinfandel, Chiarello Family, Napa Valley, California, Giana, 2008, 35, 93, 480, now), (3, Zinfandel, Robert Biale, Napa Valley, California, Black Chicken, 2008, 40, 91, 2700, 2012), ",
        "output": "SELECT grape ,  winery ,  year FROM wine WHERE price  >   100 ORDER BY year"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the city in wyoming with the largest population ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of distinct claim outcome codes. ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_Details VARCHAR(255) ); Sample rows from `Customers`: (252, America Jaskolski), (263, Ellsworth Paucek), (334, Mrs. Hanna Willms), CREATE TABLE `Staff` ( Staff_ID INTEGER, Staff_Details VARCHAR(255) ); Sample rows from `Staff`: (406, Clifton), (427, Cathryn), (510, Kaci), CREATE TABLE `Policies` ( Policy_ID INTEGER, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Policy_Type_Code CHAR(15), Start_Date DATETIME, End_Date DATETIME ); Sample rows from `Policies`: (125, 808, Deputy, 2018-02-10 08:56:30, 2018-03-18 09:17:26), (151, 380, Jurisdiction, 2017-12-20 06:02:31, 2017-09-16 22:04:13), (287, 334, Jurisdiction, 2017-03-16 18:16:52, 2017-11-24 06:36:51), CREATE TABLE `Claim_Headers` ( Claim_Header_ID INTEGER, Claim_Status_Code CHAR(15), Claim_Type_Code CHAR(15), Policy_ID INTEGER REFERENCES Policies(Policy_ID), Date_of_Claim DATETIME, Date_of_Settlement DATETIME, Amount_Claimed DECIMAL(20,4), Amount_Piad DECIMAL(20,4) ); Sample rows from `Claim_Headers`: (15, Settled, Handphone Subsidy, 518, 2016-05-31 06:07:11, 2018-02-23 03:46:38, 349.15, 582.03), (24, Disputed, Child Birth, 518, 2016-12-30 21:43:21, 2017-10-08 21:43:14, 318.16, 309.2), (27, Disputed, Overtime Meal Subsidy, 518, 2017-05-01 13:34:43, 2017-11-16 04:06:05, 362.71, 132.97), CREATE TABLE `Claims_Documents` ( Claim_ID INTEGER PRIMARY KEY REFERENCES Claim_Headers(Claim_Header_ID), Document_Type_Code CHAR(15) PRIMARY KEY, Created_by_Staff_ID INTEGER REFERENCES Staff(Staff_ID), Created_Date INTEGER ); Sample rows from `Claims_Documents`: (24, Document, 718, 8), (27, Document, 986, 6), (27, Medical, 427, 8), CREATE TABLE `Claims_Processing_Stages` ( Claim_Stage_ID INTEGER, Next_Claim_Stage_ID INTEGER, Claim_Status_Name VARCHAR(255), Claim_Status_Description VARCHAR(255) ); Sample rows from `Claims_Processing_Stages`: (1, 1, Open, Open a new claim), (3, 1, Close, Close a claim), CREATE TABLE `Claims_Processing` ( Claim_Processing_ID INTEGER, Claim_ID INTEGER REFERENCES Claim_Headers(Claim_Header_ID), Claim_Outcome_Code CHAR(15), Claim_Stage_ID INTEGER, Staff_ID INTEGER REFERENCES Staff(Staff_ID) ); Sample rows from `Claims_Processing`: (118, 28, In progress, 1, 771), (145, 62, In progress, 1, 589), (213, 27, In progress, 1, 589), ",
        "output": "SELECT COUNT(DISTINCT claim_outcome_code) FROM claims_processing"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many accounts are there in total? ###filtered_database_schema: CREATE TABLE `ACCOUNTS` ( custid BIGINT PRIMARY KEY, name VARCHAR(64) ); Sample rows from `ACCOUNTS`: (1, Brown), (2, Wang), (3, O'mahony), CREATE TABLE `SAVINGS` ( custid BIGINT PRIMARY KEY REFERENCES ACCOUNTS(custid), balance FLOAT ); Sample rows from `SAVINGS`: (1, 200000.0), (2, 999999999.0), (3, 230000.0), CREATE TABLE `CHECKING` ( custid BIGINT PRIMARY KEY REFERENCES ACCOUNTS(custid), balance FLOAT ); Sample rows from `CHECKING`: (1, 10000.0), (2, 2000.0), (3, 3000.0), ",
        "output": "SELECT COUNT(*) FROM accounts"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name and country for the artist with most number of exhibitions? ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Year_Join INT, Age INT ); Sample rows from `artist`: (1, Vijay Singh, Fiji, 1998, 45), (2, John Daly, United States, 1991, 46), (3, Paul Azinger, United States, 1993, 47), CREATE TABLE `exhibition` ( Exhibition_ID INT PRIMARY KEY, Year INT, Theme TEXT, Artist_ID INT REFERENCES artist(Artist_ID), Ticket_Price REAL ); Sample rows from `exhibition`: (1, 2004, Santa Claus, 1, 19.95), (2, 2005, Christmas stocking, 2, 19.95), (3, 2006, Santa Claus and Rudolph the Red-Nosed Reindeer, 4, 14.95), CREATE TABLE `exhibition_record` ( Exhibition_ID INT PRIMARY KEY REFERENCES exhibition(Exhibition_ID), Date TEXT PRIMARY KEY, Attendance INT ); Sample rows from `exhibition_record`: (1, December 2, 965), (1, December 5, 1098), (1, December 7, 2983), ",
        "output": "SELECT t2.name , t2.country FROM exhibition as t1 JOIN artist as t2 ON t1.artist_id  =  t2.artist_id GROUP BY t1.artist_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the distinct publishers of publications with price higher than 5000000? ###filtered_database_schema: CREATE TABLE `publication` ( Publication_ID INT PRIMARY KEY, Book_ID INT REFERENCES book(Book_ID), Publisher TEXT, Publication_Date TEXT, Price REAL ); Sample rows from `publication`: (1, 1, Pearson, August 2008, 15000000.0), (2, 3, Thomson Reuters, March 2008, 6000000.0), (3, 4, Wiley, June 2006, 4100000.0), CREATE TABLE `book` ( Book_ID INT PRIMARY KEY, Title TEXT, Issues REAL, Writer TEXT ); Sample rows from `book`: (1, The Black Lamb, 6.0, Timothy Truman), (2, Bloody Mary, 4.0, Garth Ennis), (3, Bloody Mary : Lady Liberty, 4.0, Garth Ennis), ",
        "output": "SELECT DISTINCT publisher FROM publication WHERE price  >  5000000"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the different statuses of cities, ascending by frequency. ###filtered_database_schema: CREATE TABLE `city` ( City_ID INT PRIMARY KEY, Official_Name TEXT, Status TEXT, Area_km_2 REAL, Population REAL, Census_Ranking TEXT ); Sample rows from `city`: (1, Grand Falls/Grand-Sault, Town, 18.06, 5706.0, 636 of 5008), (2, Perth-Andover, Village, 8.89, 1778.0, 1442 of 5,008), (3, Plaster Rock, Village, 3.09, 1135.0, 1936 of 5,008), CREATE TABLE `farm` ( Farm_ID INT PRIMARY KEY, Year INT, Total_Horses REAL, Working_Horses REAL, Total_Cattle REAL, Oxen REAL, Bulls REAL, Cows REAL, Pigs REAL, Sheep_and_Goats REAL ); Sample rows from `farm`: (1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8), CREATE TABLE `farm_competition` ( Competition_ID INT PRIMARY KEY, Year INT, Theme TEXT, Host_city_ID INT REFERENCES city(City_ID), Hosts TEXT ); Sample rows from `farm_competition`: (1, 2013, Carnival M is back!, 1, Miley Cyrus Jared Leto and Karen Mok), (2, 2006, Codehunters, 2, Leehom Wang and Kelly Rowland), (3, 2005, MTV Asia Aid, 3, Alicia Keys), CREATE TABLE `competition_record` ( Competition_ID INT PRIMARY KEY REFERENCES farm_competition(Competition_ID), Farm_ID INT PRIMARY KEY REFERENCES farm(Farm_ID), Rank INT ); Sample rows from `competition_record`: (1, 8, 1), (1, 2, 2), (1, 3, 3), ",
        "output": "SELECT status FROM city GROUP BY status ORDER BY COUNT(*) ASC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the publisher of the publication with the highest price. ###filtered_database_schema: CREATE TABLE `publication` ( Publication_ID INT PRIMARY KEY, Book_ID INT REFERENCES book(Book_ID), Publisher TEXT, Publication_Date TEXT, Price REAL ); Sample rows from `publication`: (1, 1, Pearson, August 2008, 15000000.0), (2, 3, Thomson Reuters, March 2008, 6000000.0), (3, 4, Wiley, June 2006, 4100000.0), CREATE TABLE `book` ( Book_ID INT PRIMARY KEY, Title TEXT, Issues REAL, Writer TEXT ); Sample rows from `book`: (1, The Black Lamb, 6.0, Timothy Truman), (2, Bloody Mary, 4.0, Garth Ennis), (3, Bloody Mary : Lady Liberty, 4.0, Garth Ennis), ",
        "output": "SELECT publisher FROM publication ORDER BY price DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average enrollment number? ###filtered_database_schema: CREATE TABLE `College` ( cName varchar(20) PRIMARY KEY, state varchar(2), enr numeric(5,0) ); Sample rows from `College`: (LSU, LA, 18000), (ASU, AZ, 12000), (OU, OK, 22000), CREATE TABLE `Player` ( pID numeric(5,0) PRIMARY KEY, pName varchar(20), yCard varchar(3), HS numeric(5,0) ); Sample rows from `Player`: (10001, Andrew, no, 1200), (20002, Blake, no, 1600), (30003, Charles, no, 300), CREATE TABLE `Tryout` ( pID numeric(5,0) PRIMARY KEY REFERENCES Player(pID), cName varchar(20) PRIMARY KEY REFERENCES College(cName), pPos varchar(8), decision varchar(3) ); Sample rows from `Tryout`: (10001, LSU, goalie, no), (10001, ASU, goalie, yes), (20002, FSU, striker, yes), ",
        "output": "SELECT AVG(enr) FROM college"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: papers where sharon goldwater is an author ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the phone number and email address of customer \"Harold\". ###filtered_database_schema: CREATE TABLE `Ref_Payment_Methods` ( payment_method_code CHAR(10) PRIMARY KEY, payment_method_description VARCHAR(80) ); Sample rows from `Ref_Payment_Methods`: (American E, credit), (MasterCard, debit), (Visa, Visa), CREATE TABLE `Ref_Service_Types` ( Service_Type_Code CHAR(15) PRIMARY KEY, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255) ); Sample rows from `Ref_Service_Types`: (1, 1, provide photo service), (2, 1, provide dinning service), (3, 1, provide filming service), CREATE TABLE `Addresses` ( Address_ID VARCHAR(100) PRIMARY KEY, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Addresses`: (110, 4753 Dach Highway, Suite 846, Feliciaberg, Florida, None), (124, 391 Vandervort Fall Apt. 446, Apt. 107, West Sherwoodstad, Indiana, None), (148, 809 Izabella Islands, Suite 271, Schadenville, Ohio, None), CREATE TABLE `Products` ( Product_ID VARCHAR(100) PRIMARY KEY, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Products`: (11, photo, 4448536, None, None), (154, film, 2302, None, None), (156, film, 17622723, None, None), CREATE TABLE `Marketing_Regions` ( Marketing_Region_Code CHAR(15) PRIMARY KEY, Marketing_Region_Name VARCHAR(255), Marketing_Region_Descriptrion VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Marketing_Regions`: (CA, Canada, Our target market, None), (CN, China, Our largest market, None), (ES, Spain, , None), CREATE TABLE `Clients` ( Client_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Clients`: (423, 201, branson94@example.net, Clifford, (042)912-3404x5135, VIP), (426, 383, alba04@example.com, Bettye, (604)849-0214, None), (478, 15, westley30@example.net, Reinhold, 1-048-214-4640x64380, None), CREATE TABLE `Drama_Workshop_Groups` ( Workshop_Group_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Currency_Code CHAR(15), Marketing_Region_Code CHAR(15), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Drama_Workshop_Groups`: (136, 383, EU, FR, Amely Cafe, 122-084-8029, amely.ruecker@example.com, None), (140, 180, EU, DE, Veda Film, 793-966-9311x5303, breitenberg.veda@example.com, None), (176, 286, EU, RU, Queen Art, 492-463-5967, quigley.queen@example.org, Good), CREATE TABLE `Performers` ( Performer_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Performers`: (153, 124, Shawna, 664.495.1939, krogahn@example.com, None), (211, 124, Ashley, 893-536-8857, preston45@example.net, None), (313, 39, Oren, 1-952-052-6685x28082, ferry.carolina@example.net, None), CREATE TABLE `Customers` ( Customer_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Customers`: (240, 286, Harold, 624-096-7791, jerde.harmon@example.com, None), (267, 98, Federico, 914-915-7483, johnson27@example.com, None), (304, 369, Samson, 1-463-121-4086x655, dalton75@example.com, None), CREATE TABLE `Stores` ( Store_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Marketing_Region_Code CHAR(15) REFERENCES Marketing_Regions(Marketing_Region_Code), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Stores`: (150, 286, IN, FJA Filming, +65(1)3590790358, fjacobson@example.com, None), (229, 266, CA, Rob Dinning, 1-327-185-9368, rborer@example.org, 5 stars), (231, 230, ES, Adan Dinning, 896-931-9633x869, adan93@example.com, None), CREATE TABLE `Bookings` ( Booking_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Clients(Client_ID), Workshop_Group_ID VARCHAR(100) REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Status_Code CHAR(15), Store_ID INTEGER, Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Bookings`: (1, 938, 140, good, 8, 2016-12-12 10:43:01, 2013-03-10 18:47:05, 1997-11-21 10:07:40, None), (2, 868, 838, stop, 7, 1976-08-20 00:33:08, 2009-07-09 09:18:38, 1976-01-08 07:19:23, None), (3, 735, 176, good, 9, 1975-11-23 06:28:47, 1989-01-05 19:24:45, 1990-03-16 19:38:47, None), CREATE TABLE `Performers_in_Bookings` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Performer_ID INTEGER PRIMARY KEY REFERENCES Performers(Performer_ID) ); Sample rows from `Performers_in_Bookings`: (1, 153), (1, 341), (2, 466), CREATE TABLE `Customer_Orders` ( Order_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Store_ID INTEGER REFERENCES Stores(Store_ID), Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 516, 231, 1994-08-03 12:34:58, 1977-03-11 03:58:19, 1992-07-21 22:11:11, None), (2, 418, 229, 2014-07-10 10:56:01, 1996-08-26 19:19:59, 1998-08-22 17:57:32, None), (3, 712, 229, 1981-06-20 16:29:43, 1980-12-19 05:49:35, 2011-04-13 07:15:35, None), CREATE TABLE `Order_Items` ( Order_Item_ID INTEGER, Order_ID INTEGER REFERENCES Customer_Orders(Order_ID), Product_ID INTEGER REFERENCES Products(Product_ID), Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 3, 233, 1, None), (2, 15, 300, 2, None), (3, 12, 300, 1, None), CREATE TABLE `Invoices` ( Invoice_ID INTEGER, Order_ID INTEGER REFERENCES Bookings(Booking_ID) REFERENCES Customer_Orders(Order_ID), payment_method_code CHAR(15) REFERENCES Ref_Payment_Methods(payment_method_code), Product_ID INTEGER, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER ); Sample rows from `Invoices`: (128, 14, MasterCard, 4, 2, None, 1), (162, 13, MasterCard, 9, 2, None, 9), (164, 7, Visa, 7, 2, None, 1), CREATE TABLE `Services` ( Service_ID INTEGER PRIMARY KEY, Service_Type_Code CHAR(15) REFERENCES Ref_Service_Types(Service_Type_Code), Workshop_Group_ID INTEGER REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Services`: (191, 1, 415, None, film, 58932775.8822, None), (219, 2, 838, None, film, 2704.4719, None), (220, 1, 708, None, dinning, 6888.8306, None), CREATE TABLE `Bookings_Services` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Product_ID INTEGER PRIMARY KEY REFERENCES Services(Service_ID) ); Sample rows from `Bookings_Services`: (1, 396), (1, 779), (4, 191), CREATE TABLE `Invoice_Items` ( Invoice_Item_ID INTEGER, Invoice_ID INTEGER REFERENCES Invoices(Invoice_ID), Order_ID INTEGER REFERENCES Bookings_Services(Order_ID), Order_Item_ID INTEGER REFERENCES Order_Items(Order_Item_ID), Product_ID INTEGER REFERENCES Bookings_Services(Product_ID), Order_Quantity INTEGER, Other_Item_Details VARCHAR(255) ); Sample rows from `Invoice_Items`: (1, 128, 1, 5, 396, 2, None), (2, 162, 4, 6, 191, 6, Good quality), ",
        "output": "SELECT customer_phone ,  customer_email_address FROM customers WHERE customer_name  =  \"Harold\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance? ###filtered_database_schema: CREATE TABLE `ACCOUNTS` ( custid BIGINT PRIMARY KEY, name VARCHAR(64) ); Sample rows from `ACCOUNTS`: (1, Brown), (2, Wang), (3, O'mahony), CREATE TABLE `SAVINGS` ( custid BIGINT PRIMARY KEY REFERENCES ACCOUNTS(custid), balance FLOAT ); Sample rows from `SAVINGS`: (1, 200000.0), (2, 999999999.0), (3, 230000.0), CREATE TABLE `CHECKING` ( custid BIGINT PRIMARY KEY REFERENCES ACCOUNTS(custid), balance FLOAT ); Sample rows from `CHECKING`: (1, 10000.0), (2, 2000.0), (3, 3000.0), ",
        "output": "SELECT t1.custid ,  t1.name FROM accounts as t1 JOIN checking as t2 ON t1.custid  =  t2.custid WHERE t2.balance  <  (SELECT MAX(balance) FROM checking)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show names for all regions except for Denmark. ###filtered_database_schema: CREATE TABLE `storm` ( Storm_ID INT PRIMARY KEY, Name TEXT, Dates_active TEXT, Max_speed INT, Damage_millions_USD REAL, Number_Deaths INT ); Sample rows from `storm`: (1, One, May19–May25, 995, 13.0, 0), (2, Two, August3–August10, 972, 10.75, 7), (3, Three, August5–August14, 972, 13.0, 52), CREATE TABLE `region` ( Region_id INT PRIMARY KEY, Region_code TEXT, Region_name TEXT ); Sample rows from `region`: (1, AF, Afghanistan), (2, AL, Albania), (3, DZ, Algeria), CREATE TABLE `affected_region` ( Region_id INT PRIMARY KEY REFERENCES region(Region_id), Storm_ID INT PRIMARY KEY REFERENCES storm(Storm_ID), Number_city_affected REAL ); Sample rows from `affected_region`: (1, 1, 10.0), (2, 1, 15.0), (3, 3, 30.0), ",
        "output": "SELECT region_name FROM region WHERE region_name != 'Denmark'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the details of the shops that can be accessed by walk? ###filtered_database_schema: CREATE TABLE `Ref_Hotel_Star_Ratings` ( star_rating_code CHAR(15) PRIMARY KEY, star_rating_description VARCHAR(80) ); Sample rows from `Ref_Hotel_Star_Ratings`: (1, star), (2, star), (3, star), CREATE TABLE `Locations` ( Location_ID INTEGER, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Locations`: (333, Astro Orbiter, 660 Shea Crescent, None), (368, African Animals, 254 Ottilie Junction, None), (417, American Adventure, 53815 Sawayn Tunnel Apt. 297, None), CREATE TABLE `Ref_Attraction_Types` ( Attraction_Type_Code CHAR(15) PRIMARY KEY, Attraction_Type_Description VARCHAR(255) ); Sample rows from `Ref_Attraction_Types`: (2, park), (3, garden), (5, gallery), CREATE TABLE `Visitors` ( Tourist_ID INTEGER PRIMARY KEY, Tourist_Details VARCHAR(255) ); Sample rows from `Visitors`: (164, Toney), (189, Graciela), (204, Vincent), CREATE TABLE `Features` ( Feature_ID INTEGER, Feature_Details VARCHAR(255) ); Sample rows from `Features`: (523, cafe), (528, park), (543, garden), CREATE TABLE `Hotels` ( hotel_id INTEGER, star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code), pets_allowed_yn CHAR(1), price_range REAL, other_hotel_details VARCHAR(255) ); Sample rows from `Hotels`: (123, 5, 1, 2914989.571, None), (144, 4, , , None), (172, 5, , 17012.682586009, None), CREATE TABLE `Tourist_Attractions` ( Tourist_Attraction_ID INTEGER, Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code), Location_ID INTEGER REFERENCES Locations(Location_ID), How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Tourist_Attractions`: (2113, 2, 579, bus, art museum, None, None, None), (2701, 6, 417, walk, UK gallery, None, None, None), (5076, 2, 868, shuttle, flying elephant, None, None, None), CREATE TABLE `Street_Markets` ( Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Market_Details VARCHAR(255) ); Sample rows from `Street_Markets`: (6852, Broadway), (7067, Fish Farm Market), CREATE TABLE `Shops` ( Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Shop_Details VARCHAR(255) ); Sample rows from `Shops`: (8429, soup), (8449, coffee), (8698, Flower), CREATE TABLE `Museums` ( Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Museum_Details VARCHAR(255) ); Sample rows from `Museums`: (2113, Yale Center for British Art), (2701, The Metropolitan Museum of Art), (5076, MoMA), CREATE TABLE `Royal_Family` ( Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Royal_Family_Details VARCHAR(255) ); Sample rows from `Royal_Family`: (9561, None), (9919, None), CREATE TABLE `Theme_Parks` ( Theme_Park_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Theme_Park_Details VARCHAR(255) ); Sample rows from `Theme_Parks`: (5265, Disney), (6476, Sea World), (6523, Universal Studios), CREATE TABLE `Visits` ( Visit_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID), Visit_Date DATETIME, Visit_Details VARCHAR(40) ); Sample rows from `Visits`: (183, 6653, 377, 2004-08-21 03:06:14, ), (268, 5076, 204, 2013-08-06 05:35:51, ), (273, 9360, 211, 2013-10-27 09:56:08, ), CREATE TABLE `Photos` ( Photo_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Photos`: (211, 8449, game1, None, 702, None), (280, 7067, game2, None, 762, None), (303, 5076, game3, None, 392, None), CREATE TABLE `Staff` ( Staff_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(40), Other_Details VARCHAR(255) ); Sample rows from `Staff`: (170, 6476, Whitney, None), (219, 6476, Kaela, None), (237, 7067, Eunice, None), CREATE TABLE `Tourist_Attraction_Features` ( Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID) ); Sample rows from `Tourist_Attraction_Features`: (5076, 528), (5076, 681), (5265, 523), ",
        "output": "SELECT t1.shop_details FROM shops as t1 JOIN tourist_attractions as t2 ON t1.shop_id  =  t2.tourist_attraction_id WHERE t2.how_to_get_there  =  \"walk\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the number of all customers without an account. ###filtered_database_schema: CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 6, 338, Regular), (2, 14, 562, VIP), (3, 9, 162, VIP), CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(20), customer_last_name VARCHAR(20), customer_address VARCHAR(255), customer_phone VARCHAR(255), customer_email VARCHAR(255), other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Aniyah, Feest, 55975 Theodore Estates Lake Brody, VT 57078, (673)872-5338, fahey.dorian@example.com, None), (2, Susie, Wiza, 6478 Moen Isle Suite 910 Schimmelmouth, VT 96364-4898, 679-845-8645x94312, idickinson@example.com, None), (3, Marcel, Brekke, 1965 Abernathy Plains Port Lilla, LA 44867, 1-511-656-6664, nichole.rodriguez@example.com, None), CREATE TABLE `Customers_Cards` ( card_id INTEGER, customer_id INTEGER, card_type_code VARCHAR(15), card_number VARCHAR(80), date_valid_from DATETIME, date_valid_to DATETIME, other_card_details VARCHAR(255) ); Sample rows from `Customers_Cards`: (1, 14, Credit, 4560596484842, 2011-04-17 09:05:28, 2018-03-07 17:06:19, 5567915676420343), (2, 9, Credit, 4859448397570735, 2012-05-22 02:05:41, 2018-02-25 15:43:32, 4539333582760), (3, 6, Debit, 348237249146948, 2014-08-01 14:26:45, 2018-03-24 15:29:00, 4916210554814), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, previous_transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), card_id INTEGER REFERENCES Customers_Cards(card_id), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DOUBLE, transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 925, 15, 1, Payment, 2018-03-24 06:41:41, 1701.23, None, None), (2, 494, 3, 2, Refund, 2018-03-24 12:08:55, 1931.76, None, None), (3, 642, 4, 3, Payment, 2018-03-24 09:08:27, 486.56, None, None), ",
        "output": "SELECT COUNT(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM accounts)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For how many clubs is \"Tracy Kim\" a member? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Club` ( ClubID INTEGER, ClubName VARCHAR(40), ClubDesc VARCHAR(1024), ClubLocation VARCHAR(40) ); Sample rows from `Club`: (1, Bootup Baltimore, Refurbish computers; teach kids and adults about computer basics., AKW), (2, Hopkins Student Enterprises, Venture capital fund for student business., AKW), (3, Pen and Paper Gaming, Play pen and paper games on campus., HHH), CREATE TABLE `Member_of_club` ( StuID INTEGER REFERENCES Student(StuID), ClubID INTEGER REFERENCES Club(ClubID), Position VARCHAR(40) ); Sample rows from `Member_of_club`: (1001, 1, President), (1007, 4, Vice-President), (1008, 2, CTO), ",
        "output": "SELECT COUNT(*) FROM club as t1 JOIN member_of_club as t2 ON t1.clubid  =  t2.clubid JOIN student as t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show total hours per week and number of games played for student David Shieber. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Video_Games` ( GameID INTEGER, GName VARCHAR(40), GType VARCHAR(40) ); Sample rows from `Video_Games`: (1, RNG Stone, Collectible card game), (2, The Vanishing of Eric Calder, Walking Simulator), (3, Grand Term Assignment, Role-playing game), CREATE TABLE `Plays_Games` ( StuID INTEGER REFERENCES Student(StuID), GameID INTEGER REFERENCES Video_Games(GameID), Hours_Played INTEGER ); Sample rows from `Plays_Games`: (1001, 1, 35), (1001, 2, 15), (1001, 5, 1), CREATE TABLE `SportsInfo` ( StuID INTEGER REFERENCES Student(StuID), SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1) ); Sample rows from `SportsInfo`: (1001, Athletics, 2, 5, N), (1002, Football, 7, 20, Y), (1003, Football, 45, 18, Y), ",
        "output": "SELECT SUM(hoursperweek) ,  SUM(gamesplayed) FROM sportsinfo as t1 JOIN student as t2 ON t1.stuid  =  t2.stuid WHERE t2.fname  =  \"David\" AND t2.lname  =  \"Shieber\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the market shares and names of furnitures which no any company is producing in our records. ###filtered_database_schema: CREATE TABLE `manufacturer` ( Manufacturer_ID INT PRIMARY KEY, Open_Year REAL, Name TEXT, Num_of_Factories INT, Num_of_Shops INT ); Sample rows from `manufacturer`: (1, 1980.0, Chevrolet House, 36, 8), (2, 1990.0, IKEA, 21, 19), (3, 1991.0, Ford Make, 12, 2), CREATE TABLE `furniture` ( Furniture_ID INT PRIMARY KEY, Name TEXT, Num_of_Component INT, Market_Rate REAL ); Sample rows from `furniture`: (1, Billiard table, 14, 52.5), (2, Chabudai, 4, 40.0), (3, Bookcase, 6, 1.0), CREATE TABLE `furniture_manufacte` ( Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID), Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID), Price_in_Dollar REAL ); Sample rows from `furniture_manufacte`: (1, 3, 239.0), (4, 2, 450.0), (7, 7, 2124.0), ",
        "output": "SELECT market_rate ,  name FROM furniture WHERE furniture_id NOT IN (SELECT furniture_id FROM furniture_manufacte)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of users who did not leave any review. ###filtered_database_schema: CREATE TABLE `item` ( i_id INTEGER, title varchar(20) ); Sample rows from `item`: (0, pear), (1, orange), (2, apple), CREATE TABLE `review` ( a_id INTEGER PRIMARY KEY, u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), i_id INTEGER PRIMARY KEY REFERENCES item(i_id), rating INTEGER, rank INTEGER ); Sample rows from `review`: (1, 1, 1, 10, 1), (2, 2, 1, 5, 2), (3, 1, 4, 7, 3), CREATE TABLE `useracct` ( u_id INTEGER, name varchar(128) ); Sample rows from `useracct`: (1, Helen), (2, Mark), (3, Terry), CREATE TABLE `trust` ( source_u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), target_u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), trust INTEGER ); Sample rows from `trust`: (1, 2, 10), (1, 3, 6), (2, 4, 8), ",
        "output": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the most common first name among all actors. ###filtered_database_schema: CREATE TABLE `actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), last_update TIMESTAMP ); Sample rows from `actor`: (1, PENELOPE, GUINESS, 2006-02-15 04:34:33), (2, NICK, WAHLBERG, 2006-02-15 04:34:33), (3, ED, CHASE, 2006-02-15 04:34:33), CREATE TABLE `address` ( address_id SMALLINT UNSIGNED PRIMARY KEY, address VARCHAR(50), address2 VARCHAR(50), district VARCHAR(20), city_id SMALLINT UNSIGNED REFERENCES city(city_id), postal_code VARCHAR(10), phone VARCHAR(20), last_update TIMESTAMP ); Sample rows from `address`: (1, 47 MySakila Drive, None, Alberta, 300, , , 2006-02-15 04:45:30), (2, 28 MySQL Boulevard, None, QLD, 576, , , 2006-02-15 04:45:30), (3, 23 Workhaven Lane, None, Alberta, 300, , 14033335568, 2006-02-15 04:45:30), CREATE TABLE `category` ( category_id TINYINT UNSIGNED PRIMARY KEY, name VARCHAR(25), last_update TIMESTAMP ); Sample rows from `category`: (1, Action, 2006-02-15 04:46:27), (2, Animation, 2006-02-15 04:46:27), (3, Children, 2006-02-15 04:46:27), CREATE TABLE `city` ( city_id SMALLINT UNSIGNED PRIMARY KEY, city VARCHAR(50), country_id SMALLINT UNSIGNED REFERENCES country(country_id), last_update TIMESTAMP ); Sample rows from `city`: (1, A Corua (La Corua), 87, 2006-02-15 04:45:25), (2, Abha, 82, 2006-02-15 04:45:25), (3, Abu Dhabi, 101, 2006-02-15 04:45:25), CREATE TABLE `country` ( country_id SMALLINT UNSIGNED PRIMARY KEY, country VARCHAR(50), last_update TIMESTAMP ); Sample rows from `country`: (1, Afghanistan, 2006-02-15 04:44:00), (2, Algeria, 2006-02-15 04:44:00), (3, American Samoa, 2006-02-15 04:44:00), CREATE TABLE `customer` ( customer_id SMALLINT UNSIGNED PRIMARY KEY, store_id TINYINT UNSIGNED REFERENCES store(store_id), first_name VARCHAR(45), last_name VARCHAR(45), email VARCHAR(50), address_id SMALLINT UNSIGNED REFERENCES address(address_id), active BOOLEAN, create_date DATETIME, last_update TIMESTAMP ); Sample rows from `customer`: (1, 1, MARY, SMITH, MARY.SMITH@sakilacustomer.org, 5, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (2, 1, PATRICIA, JOHNSON, PATRICIA.JOHNSON@sakilacustomer.org, 6, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (3, 1, LINDA, WILLIAMS, LINDA.WILLIAMS@sakilacustomer.org, 7, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), CREATE TABLE `film` ( film_id SMALLINT UNSIGNED PRIMARY KEY, title VARCHAR(255), description TEXT, release_year YEAR, language_id TINYINT UNSIGNED REFERENCES language(language_id), original_language_id TINYINT UNSIGNED REFERENCES language(language_id), rental_duration TINYINT UNSIGNED, rental_rate DECIMAL(4,2), length SMALLINT UNSIGNED, replacement_cost DECIMAL(5,2), rating , special_features , last_update TIMESTAMP ); Sample rows from `film`: (1, ACADEMY DINOSAUR, A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies, 2006, 1, None, 6, 0.99, 86, 20.99, PG, Deleted Scenes,Behind the Scenes, 2006-02-15 05:03:42), (2, ACE GOLDFINGER, A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China, 2006, 1, None, 3, 4.99, 48, 12.99, G, Trailers,Deleted Scenes, 2006-02-15 05:03:42), (3, ADAPTATION HOLES, A Astounding Reflection of a Lumberjack And a Car who must Sink a Lumberjack in A Baloon Factory, 2006, 1, None, 7, 2.99, 50, 18.99, NC-17, Trailers,Deleted Scenes, 2006-02-15 05:03:42), CREATE TABLE `film_actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES actor(actor_id), film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), last_update TIMESTAMP ); Sample rows from `film_actor`: (1, 1, 2006-02-15 05:05:03), (1, 23, 2006-02-15 05:05:03), (1, 25, 2006-02-15 05:05:03), CREATE TABLE `film_category` ( film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), category_id TINYINT UNSIGNED PRIMARY KEY REFERENCES category(category_id), last_update TIMESTAMP ); Sample rows from `film_category`: (1, 6, 2006-02-15 05:07:09), (2, 11, 2006-02-15 05:07:09), (3, 6, 2006-02-15 05:07:09), CREATE TABLE `film_text` ( film_id SMALLINT PRIMARY KEY, title VARCHAR(255), description TEXT ); CREATE TABLE `inventory` ( inventory_id MEDIUMINT UNSIGNED PRIMARY KEY, film_id SMALLINT UNSIGNED REFERENCES film(film_id), store_id TINYINT UNSIGNED REFERENCES store(store_id), last_update TIMESTAMP ); Sample rows from `inventory`: (1, 1, 1, 2006-02-15 05:09:17), (2, 1, 1, 2006-02-15 05:09:17), (3, 1, 1, 2006-02-15 05:09:17), CREATE TABLE `language` ( language_id TINYINT UNSIGNED PRIMARY KEY, name CHAR(20), last_update TIMESTAMP ); CREATE TABLE `payment` ( payment_id SMALLINT UNSIGNED PRIMARY KEY, customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), rental_id INT REFERENCES rental(rental_id), amount DECIMAL(5,2), payment_date DATETIME, last_update TIMESTAMP ); Sample rows from `payment`: (1, 1, 1, 76, 2.99, 2005-05-25 11:30:37, 2006-02-15 22:12:30), (2, 1, 1, 573, 0.99, 2005-05-28 10:35:23, 2006-02-15 22:12:30), (3, 1, 1, 1185, 5.99, 2005-06-15 00:54:12, 2006-02-15 22:12:30), CREATE TABLE `rental` ( rental_id INT PRIMARY KEY, rental_date DATETIME, inventory_id MEDIUMINT UNSIGNED REFERENCES inventory(inventory_id), customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), return_date DATETIME, staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), last_update TIMESTAMP ); Sample rows from `rental`: (1, 2005-05-24 22:53:30, 367, 130, 2005-05-26 22:04:30, 1, 2006-02-15 21:30:53), (2, 2005-05-24 22:54:33, 1525, 459, 2005-05-28 19:40:33, 1, 2006-02-15 21:30:53), (3, 2005-05-24 23:03:39, 1711, 408, 2005-06-01 22:12:39, 1, 2006-02-15 21:30:53), CREATE TABLE `staff` ( staff_id TINYINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), address_id SMALLINT UNSIGNED REFERENCES address(address_id), picture BLOB, email VARCHAR(50), store_id TINYINT UNSIGNED, active BOOLEAN, username VARCHAR(16), password VARCHAR(40), last_update TIMESTAMP ); CREATE TABLE `store` ( store_id TINYINT UNSIGNED PRIMARY KEY, manager_staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), address_id SMALLINT UNSIGNED REFERENCES address(address_id), last_update TIMESTAMP ); ",
        "output": "SELECT first_name FROM actor GROUP BY first_name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the song in the volume that has spent the most weeks on top? ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Artist TEXT, Age INT, Famous_Title TEXT, Famous_Release_date TEXT ); Sample rows from `artist`: (1, Gorgoroth, 34, Bergen 1996, November 2007), (2, Ophiolatry, 35, Transmutation, January 21, 2008), (3, Ophiolatry, 22, Antievangelistical Process (re-release), 2009), CREATE TABLE `volume` ( Volume_ID INT PRIMARY KEY, Volume_Issue TEXT, Issue_Date TEXT, Weeks_on_Top REAL, Song TEXT, Artist_ID INT REFERENCES artist(Artist_ID) ); Sample rows from `volume`: (1, 45:14 §, 27 December 1986 - 10 January, 3.0, The Way, 1), (2, 45:15, 17 January, 1.0, Everybody Have Fun Tonight , 2), (3, 45:16, 24 January, 1.0, Walk Like an Egyptian , 1), CREATE TABLE `music_festival` ( ID INT PRIMARY KEY, Music_Festival TEXT, Date_of_ceremony TEXT, Category TEXT, Volume INT REFERENCES volume(Volume_ID), Result TEXT ); Sample rows from `music_festival`: (1, 34th England Academy Prize, 18 February 2011, Best Song, 1, Nominated), (2, 34th Japan Academy Prize, 18 February 2011, Best Lyrics, 2, Nominated), (3, 34th European Academy Prize, 18 February 2011, Best Song, 3, Awarded), ",
        "output": "SELECT song FROM volume ORDER BY weeks_on_top DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the names of players coached by the rank 1 coach. ###filtered_database_schema: CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Sponsor_name TEXT, Player_name TEXT, Gender TEXT, Residence TEXT, Occupation TEXT, Votes INT, Rank TEXT ); Sample rows from `player`: (1, Brandon—Souris, Jean Luc Bouché, M, Brandon, Locomotive Engineer, 6055, 2nd), (2, Charleswood—St. James—Assiniboia, Fiona Shiells, F, Winnipeg, Ministerial Assistant, 7190, 3rd), (3, Churchill, Niki Ashton, F, Thompson, Researcher, 8734, 1st), CREATE TABLE `club` ( Club_ID INT PRIMARY KEY, Club_name TEXT, Region TEXT, Start_year INT ); Sample rows from `club`: (1, AIK, USA, 2009), (2, BK Häcken, UK, 1998), (3, Djurgårdens IF, USA, 2005), CREATE TABLE `coach` ( Coach_ID INT PRIMARY KEY, Coach_name TEXT, Gender TEXT, Club_ID INT REFERENCES club(Club_ID), Rank INT ); Sample rows from `coach`: (1, Jameson Tomas, M, 1, 1), (2, Joe Fabbri, F, 1, 2), (3, Robert Chen, M, 3, 3), CREATE TABLE `player_coach` ( Player_ID INT PRIMARY KEY REFERENCES player(Player_ID), Coach_ID INT PRIMARY KEY REFERENCES coach(Coach_ID), Starting_year INT ); Sample rows from `player_coach`: (1, 1, 2010), (2, 1, 2011), (3, 1, 2012), CREATE TABLE `match_result` ( Rank INT PRIMARY KEY, Club_ID INT PRIMARY KEY REFERENCES club(Club_ID), Gold INT, Big_Silver INT, Small_Silver INT, Bronze INT, Points INT ); Sample rows from `match_result`: (1, 1, 20, 14, 9, 8, 168), (2, 2, 13, 11, 16, 9, 139), (3, 3, 12, 9, 4, 7, 102), ",
        "output": "SELECT t3.player_name FROM player_coach as t1 JOIN coach as t2 ON t1.coach_id  =  t2.coach_id JOIN player as t3 ON t1.player_id  =  t3.player_id WHERE t2.rank  =  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products. ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 28481 Crist Circle East Burdettestad, IA 21232), (2, 0292 Mitchel Pike Port Abefurt, IA 84402-4249), (3, 4062 Mante Place West Lindsey, DE 76199-8015), CREATE TABLE `Staff` ( staff_id INTEGER, staff_gender VARCHAR(1), staff_name VARCHAR(80) ); Sample rows from `Staff`: (1, 1, Tom), (2, 1, Malika), (3, 1, Katelynn), CREATE TABLE `Suppliers` ( supplier_id INTEGER, supplier_name VARCHAR(80), supplier_phone VARCHAR(80) ); Sample rows from `Suppliers`: (1, Lidl, (692)009-5928), (2, AB Store, 1-483-283-4742), (3, Tesco, 287-071-1153x254), CREATE TABLE `Department_Store_Chain` ( dept_store_chain_id INTEGER, dept_store_chain_name VARCHAR(80) ); Sample rows from `Department_Store_Chain`: (1, South), (2, West), (3, East), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method_code VARCHAR(10), customer_code VARCHAR(20), customer_name VARCHAR(80), customer_address VARCHAR(255), customer_phone VARCHAR(80), customer_email VARCHAR(80) ); Sample rows from `Customers`: (1, Credit Card, 401, Ahmed, 75099 Tremblay Port Apt. 163 South Norrisland, SC 80546, 254-072-4068x33935, margarett.vonrueden@example.com), (2, Credit Card, 665, Chauncey, 8408 Lindsay Court East Dasiabury, IL 72656-3552, +41(8)1897032009, stiedemann.sigrid@example.com), (3, Direct Debit, 844, Lukas, 7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871, 197-417-3557, joelle.monahan@example.com), CREATE TABLE `Products` ( product_id INTEGER, product_type_code VARCHAR(10), product_name VARCHAR(80), product_price DECIMAL(19,4) ); Sample rows from `Products`: (1, Clothes, red jeans, 734.73), (2, Clothes, yellow jeans, 687.23), (3, Clothes, black jeans, 695.16), CREATE TABLE `Supplier_Addresses` ( supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Supplier_Addresses`: (4, 5, 2016-09-22 16:41:31, 2018-03-14 20:06:37), (3, 9, 2014-11-07 19:18:49, 2018-03-16 16:39:58), (3, 2, 2008-11-22 12:01:25, 2018-03-02 19:50:22), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 9, 2017-12-11 05:00:22, 2018-03-20 20:52:34), (1, 6, 2017-10-07 23:00:26, 2018-02-28 14:53:52), (10, 8, 2017-04-04 20:00:27, 2018-02-27 20:08:33), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status_code VARCHAR(10), order_date DATETIME ); Sample rows from `Customer_Orders`: (1, 12, Completed, 2018-02-10 15:44:48), (2, 4, New, 2018-01-31 17:49:18), (3, 1, PartFilled, 2018-02-26 12:39:33), CREATE TABLE `Department_Stores` ( dept_store_id INTEGER, dept_store_chain_id INTEGER REFERENCES Department_Store_Chain(dept_store_chain_id), store_name VARCHAR(80), store_address VARCHAR(255), store_phone VARCHAR(80), store_email VARCHAR(80) ); Sample rows from `Department_Stores`: (1, 1, store_name, 01290 Jeremie Parkway Suite 753 North Arielle, MS 51249, (948)944-5099x2027, bmaggio@example.com), (2, 3, store_name, 082 Purdy Expressway O'Connellshire, IL 31732, 877-917-5029, larissa10@example.org), (3, 4, store_name, 994 Travis Plains North Wadeton, WV 27575-3951, 1-216-312-0375, alexandro.mcclure@example.net), CREATE TABLE `Departments` ( department_id INTEGER, dept_store_id INTEGER REFERENCES Department_Stores(dept_store_id), department_name VARCHAR(80) ); Sample rows from `Departments`: (1, 5, human resource), (2, 11, purchasing), (3, 4, marketing), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id) ); Sample rows from `Order_Items`: (1, 9, 7), (2, 1, 3), (3, 5, 2), CREATE TABLE `Product_Suppliers` ( product_id INTEGER PRIMARY KEY REFERENCES Products(product_id), supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), date_supplied_from DATETIME, date_supplied_to DATETIME, total_amount_purchased VARCHAR(80), total_value_purchased DECIMAL(19,4) ); Sample rows from `Product_Suppliers`: (4, 3, 2017-06-19 00:49:05, 2018-03-24 19:29:18, 89366.05, 36014.6), (8, 4, 2017-07-02 00:35:12, 2018-03-25 07:30:49, 25085.57, 36274.56), (3, 3, 2017-10-14 19:15:37, 2018-03-24 02:29:44, 15752.45, 7273.74), CREATE TABLE `Staff_Department_Assignments` ( staff_id INTEGER PRIMARY KEY REFERENCES Staff(staff_id), department_id INTEGER PRIMARY KEY REFERENCES Departments(department_id), date_assigned_from DATETIME, job_title_code VARCHAR(10), date_assigned_to DATETIME ); Sample rows from `Staff_Department_Assignments`: (5, 4, 2017-06-11 22:55:20, Department Manager, 2018-03-23 21:59:11), (10, 5, 2017-12-18 19:12:15, Sales Person, 2018-03-23 20:25:24), (1, 5, 2018-02-14 03:15:29, Clerical Staff, 2018-03-24 19:57:56), ",
        "output": "SELECT t1.product_id FROM product_suppliers as t1 JOIN products as t2 ON t1.product_id  =  t2.product_id WHERE t1.supplier_id  =  2 AND t2.product_price  >  (SELECT AVG(product_price) FROM products)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are all the distinct premise types? ###filtered_database_schema: CREATE TABLE `Premises` ( premise_id INTEGER, premises_type VARCHAR(15), premise_details VARCHAR(255) ); Sample rows from `Premises`: (1, Warehouse, 036 Lueilwitz Harbor), (2, Warehouse, 676 Kelly Spur), (3, Residence, 27839 Carissa Tunnel Suite 048), CREATE TABLE `Products` ( product_id INTEGER, product_category VARCHAR(15), product_name VARCHAR(80) ); Sample rows from `Products`: (1, Food, Coffee Bean), (2, Electronics, Keyboard), (3, Books, Four Seasons), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method VARCHAR(15), customer_name VARCHAR(80), customer_phone VARCHAR(80), customer_email VARCHAR(80), customer_address VARCHAR(255), customer_login VARCHAR(80), customer_password VARCHAR(10) ); Sample rows from `Customers`: (1, Credit Card, Wendell, (773)971-9411x759, rodriguez.nathanael@example.net, 618 Webster Stream Apt. 161, None, b4459ad261), (2, Direct Debit, Gage, (402)890-2603x6005, stark.elna@example.net, 0260 Walker Trace, None, 7905d7f1b1), (3, Direct Debit, Elvera, 1-878-600-7193x8180, madyson.mclaughlin@example.org, 280 Landen Lake, None, 0b9f651030), CREATE TABLE `Mailshot_Campaigns` ( mailshot_id INTEGER, product_category VARCHAR(15), mailshot_name VARCHAR(80), mailshot_start_date DATETIME, mailshot_end_date DATETIME ); Sample rows from `Mailshot_Campaigns`: (1, food, US, 2018-02-15 09:52:17, 2018-03-08 14:40:20), (2, clothes, US, 2017-09-14 12:05:30, 2018-03-15 01:06:16), (3, food, FED, 2017-06-16 11:18:45, 2018-03-13 14:42:26), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER REFERENCES Customers(customer_id), premise_id INTEGER REFERENCES Premises(premise_id), date_address_from DATETIME, address_type_code VARCHAR(15), date_address_to DATETIME ); Sample rows from `Customer_Addresses`: (15, 1, 1992-08-23 21:17:38, Billing, 2018-02-28 20:54:58), (2, 2, 2010-02-23 02:49:50, Billing, 2018-03-15 18:34:41), (1, 1, 1975-12-24 10:01:37, Shipping, 2018-03-08 08:03:51), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status_code VARCHAR(15), shipping_method_code VARCHAR(15), order_placed_datetime DATETIME, order_delivered_datetime DATETIME, order_shipping_charges VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 2, Cancelled, Unspecified, 2015-06-15 18:19:26, 2018-03-20 12:00:00, 85.79), (2, 8, Cancelled, Unspecified, 2009-07-05 20:02:55, 2018-03-20 12:00:00, 98.4), (3, 9, Cancelled, FedEx, 2008-11-15 12:22:36, 2018-03-20 12:00:00, 36.87), CREATE TABLE `Mailshot_Customers` ( mailshot_id INTEGER REFERENCES Mailshot_Campaigns(mailshot_id), customer_id INTEGER REFERENCES Customers(customer_id), outcome_code VARCHAR(15), mailshot_customer_date DATETIME ); Sample rows from `Mailshot_Customers`: (4, 3, Order, 2018-03-15 15:43:14), (10, 1, No Response, 2018-03-04 13:06:55), (15, 9, No Response, 2018-03-11 11:32:20), CREATE TABLE `Order_Items` ( item_id INTEGER, order_item_status_code VARCHAR(15), order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), item_status_code VARCHAR(15), item_delivered_datetime DATETIME, item_order_quantity VARCHAR(80) ); Sample rows from `Order_Items`: (1, Delivered, 10, 13, good, 2018-02-25 18:22:10, 6), (2, Paid, 6, 7, good, 2018-02-27 18:04:55, 7), (3, Cancelled, 8, 1, good, 2018-03-16 15:58:27, 4), ",
        "output": "SELECT DISTINCT premises_type FROM premises"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name, headquarter and founder of the manufacturer that has the highest revenue. ###filtered_database_schema: CREATE TABLE `Manufacturers` ( Code INTEGER, Name VARCHAR(255), Headquarter VARCHAR(255), Founder VARCHAR(255), Revenue REAL ); Sample rows from `Manufacturers`: (1, Sony, Tokyo, Andy, 120.0), (2, Creative Labs, Austin, Owen, 100.0), (3, Hewlett-Packard, Los Angeles, James, 50.0), CREATE TABLE `Products` ( Code INTEGER, Name VARCHAR(255), Price DECIMAL, Manufacturer INTEGER REFERENCES Manufacturers(Code) ); Sample rows from `Products`: (1, Hard drive, 240, 5), (2, Memory, 120, 6), (3, ZIP drive, 150, 4), ",
        "output": "SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the latitude, longitude, city of the station from which the shortest trip started? ###filtered_database_schema: CREATE TABLE `station` ( id INTEGER, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT ); Sample rows from `station`: (2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013), (3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013), (4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013), CREATE TABLE `status` ( station_id INTEGER REFERENCES station(id), bikes_available INTEGER, docks_available INTEGER, time TEXT ); Sample rows from `status`: (3, 12, 3, 2015-06-02 12:46:02), (3, 12, 3, 2015-06-02 12:47:02), (3, 12, 3, 2015-06-02 12:48:02), CREATE TABLE `trip` ( id INTEGER, duration INTEGER, start_date TEXT, start_station_name TEXT, start_station_id INTEGER, end_date TEXT, end_station_name TEXT, end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER ); Sample rows from `trip`: (900504, 384, 8/21/2015 17:03, Howard at 2nd, 63, 8/21/2015 17:10, San Francisco Caltrain 2 (330 Townsend), 69, 454, Subscriber, 94041), (900505, 588, 8/21/2015 17:03, South Van Ness at Market, 66, 8/21/2015 17:13, San Francisco Caltrain 2 (330 Townsend), 69, 574, Subscriber, 95119), (900506, 196, 8/21/2015 17:04, Market at Sansome, 77, 8/21/2015 17:07, Harry Bridges Plaza (Ferry Building), 50, 636, Subscriber, 94925), CREATE TABLE `weather` ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER ); Sample rows from `weather`: (8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107), (8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107), (8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107), ",
        "output": "SELECT t1.lat ,  t1.long ,  t1.city FROM station as t1 JOIN trip as t2 ON t1.id  =  t2.start_station_id ORDER BY t2.duration LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the different names of mountains ascended by climbers from the country of West Germany? ###filtered_database_schema: CREATE TABLE `mountain` ( Mountain_ID INT PRIMARY KEY, Name TEXT, Height REAL, Prominence REAL, Range TEXT, Country TEXT ); Sample rows from `mountain`: (1, Kibo (Uhuru Pk), 5895.0, 5885.0, Kilimanjaro, Tanzania), (2, Mount Kenya (Batian), 5199.0, 3825.0, Mount Kenya, Kenya), (3, Mawenzi (Hans Meyer Pk), 5148.0, 850.0, Kilimanjaro, Tanzania), CREATE TABLE `climber` ( Climber_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Time TEXT, Points REAL, Mountain_ID INT REFERENCES mountain(Mountain_ID) ); Sample rows from `climber`: (1, Klaus Enders, West Germany, 1:13.05.6, 15.0, 1), (2, Siegfried Schauzu, West Germany, 1:14.56.4, 12.0, 1), (3, Hans Luthringhauser, West Germany, 1:16.58.0, 10.0, 2), ",
        "output": "SELECT DISTINCT t2.name FROM climber as t1 JOIN mountain as t2 ON t1.mountain_id  =  t2.mountain_id WHERE t1.country  =  \"West Germany\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the id of the store with the most customers. ###filtered_database_schema: CREATE TABLE `actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), last_update TIMESTAMP ); Sample rows from `actor`: (1, PENELOPE, GUINESS, 2006-02-15 04:34:33), (2, NICK, WAHLBERG, 2006-02-15 04:34:33), (3, ED, CHASE, 2006-02-15 04:34:33), CREATE TABLE `address` ( address_id SMALLINT UNSIGNED PRIMARY KEY, address VARCHAR(50), address2 VARCHAR(50), district VARCHAR(20), city_id SMALLINT UNSIGNED REFERENCES city(city_id), postal_code VARCHAR(10), phone VARCHAR(20), last_update TIMESTAMP ); Sample rows from `address`: (1, 47 MySakila Drive, None, Alberta, 300, , , 2006-02-15 04:45:30), (2, 28 MySQL Boulevard, None, QLD, 576, , , 2006-02-15 04:45:30), (3, 23 Workhaven Lane, None, Alberta, 300, , 14033335568, 2006-02-15 04:45:30), CREATE TABLE `category` ( category_id TINYINT UNSIGNED PRIMARY KEY, name VARCHAR(25), last_update TIMESTAMP ); Sample rows from `category`: (1, Action, 2006-02-15 04:46:27), (2, Animation, 2006-02-15 04:46:27), (3, Children, 2006-02-15 04:46:27), CREATE TABLE `city` ( city_id SMALLINT UNSIGNED PRIMARY KEY, city VARCHAR(50), country_id SMALLINT UNSIGNED REFERENCES country(country_id), last_update TIMESTAMP ); Sample rows from `city`: (1, A Corua (La Corua), 87, 2006-02-15 04:45:25), (2, Abha, 82, 2006-02-15 04:45:25), (3, Abu Dhabi, 101, 2006-02-15 04:45:25), CREATE TABLE `country` ( country_id SMALLINT UNSIGNED PRIMARY KEY, country VARCHAR(50), last_update TIMESTAMP ); Sample rows from `country`: (1, Afghanistan, 2006-02-15 04:44:00), (2, Algeria, 2006-02-15 04:44:00), (3, American Samoa, 2006-02-15 04:44:00), CREATE TABLE `customer` ( customer_id SMALLINT UNSIGNED PRIMARY KEY, store_id TINYINT UNSIGNED REFERENCES store(store_id), first_name VARCHAR(45), last_name VARCHAR(45), email VARCHAR(50), address_id SMALLINT UNSIGNED REFERENCES address(address_id), active BOOLEAN, create_date DATETIME, last_update TIMESTAMP ); Sample rows from `customer`: (1, 1, MARY, SMITH, MARY.SMITH@sakilacustomer.org, 5, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (2, 1, PATRICIA, JOHNSON, PATRICIA.JOHNSON@sakilacustomer.org, 6, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (3, 1, LINDA, WILLIAMS, LINDA.WILLIAMS@sakilacustomer.org, 7, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), CREATE TABLE `film` ( film_id SMALLINT UNSIGNED PRIMARY KEY, title VARCHAR(255), description TEXT, release_year YEAR, language_id TINYINT UNSIGNED REFERENCES language(language_id), original_language_id TINYINT UNSIGNED REFERENCES language(language_id), rental_duration TINYINT UNSIGNED, rental_rate DECIMAL(4,2), length SMALLINT UNSIGNED, replacement_cost DECIMAL(5,2), rating , special_features , last_update TIMESTAMP ); Sample rows from `film`: (1, ACADEMY DINOSAUR, A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies, 2006, 1, None, 6, 0.99, 86, 20.99, PG, Deleted Scenes,Behind the Scenes, 2006-02-15 05:03:42), (2, ACE GOLDFINGER, A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China, 2006, 1, None, 3, 4.99, 48, 12.99, G, Trailers,Deleted Scenes, 2006-02-15 05:03:42), (3, ADAPTATION HOLES, A Astounding Reflection of a Lumberjack And a Car who must Sink a Lumberjack in A Baloon Factory, 2006, 1, None, 7, 2.99, 50, 18.99, NC-17, Trailers,Deleted Scenes, 2006-02-15 05:03:42), CREATE TABLE `film_actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES actor(actor_id), film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), last_update TIMESTAMP ); Sample rows from `film_actor`: (1, 1, 2006-02-15 05:05:03), (1, 23, 2006-02-15 05:05:03), (1, 25, 2006-02-15 05:05:03), CREATE TABLE `film_category` ( film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), category_id TINYINT UNSIGNED PRIMARY KEY REFERENCES category(category_id), last_update TIMESTAMP ); Sample rows from `film_category`: (1, 6, 2006-02-15 05:07:09), (2, 11, 2006-02-15 05:07:09), (3, 6, 2006-02-15 05:07:09), CREATE TABLE `film_text` ( film_id SMALLINT PRIMARY KEY, title VARCHAR(255), description TEXT ); CREATE TABLE `inventory` ( inventory_id MEDIUMINT UNSIGNED PRIMARY KEY, film_id SMALLINT UNSIGNED REFERENCES film(film_id), store_id TINYINT UNSIGNED REFERENCES store(store_id), last_update TIMESTAMP ); Sample rows from `inventory`: (1, 1, 1, 2006-02-15 05:09:17), (2, 1, 1, 2006-02-15 05:09:17), (3, 1, 1, 2006-02-15 05:09:17), CREATE TABLE `language` ( language_id TINYINT UNSIGNED PRIMARY KEY, name CHAR(20), last_update TIMESTAMP ); CREATE TABLE `payment` ( payment_id SMALLINT UNSIGNED PRIMARY KEY, customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), rental_id INT REFERENCES rental(rental_id), amount DECIMAL(5,2), payment_date DATETIME, last_update TIMESTAMP ); Sample rows from `payment`: (1, 1, 1, 76, 2.99, 2005-05-25 11:30:37, 2006-02-15 22:12:30), (2, 1, 1, 573, 0.99, 2005-05-28 10:35:23, 2006-02-15 22:12:30), (3, 1, 1, 1185, 5.99, 2005-06-15 00:54:12, 2006-02-15 22:12:30), CREATE TABLE `rental` ( rental_id INT PRIMARY KEY, rental_date DATETIME, inventory_id MEDIUMINT UNSIGNED REFERENCES inventory(inventory_id), customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), return_date DATETIME, staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), last_update TIMESTAMP ); Sample rows from `rental`: (1, 2005-05-24 22:53:30, 367, 130, 2005-05-26 22:04:30, 1, 2006-02-15 21:30:53), (2, 2005-05-24 22:54:33, 1525, 459, 2005-05-28 19:40:33, 1, 2006-02-15 21:30:53), (3, 2005-05-24 23:03:39, 1711, 408, 2005-06-01 22:12:39, 1, 2006-02-15 21:30:53), CREATE TABLE `staff` ( staff_id TINYINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), address_id SMALLINT UNSIGNED REFERENCES address(address_id), picture BLOB, email VARCHAR(50), store_id TINYINT UNSIGNED, active BOOLEAN, username VARCHAR(16), password VARCHAR(40), last_update TIMESTAMP ); CREATE TABLE `store` ( store_id TINYINT UNSIGNED PRIMARY KEY, manager_staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), address_id SMALLINT UNSIGNED REFERENCES address(address_id), last_update TIMESTAMP ); ",
        "output": "SELECT store_id FROM customer GROUP BY store_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of distinct bed types available in this inn. ###filtered_database_schema: CREATE TABLE `Rooms` ( RoomId TEXT PRIMARY KEY, roomName TEXT, beds INTEGER, bedType TEXT, maxOccupancy INTEGER, basePrice INTEGER, decor TEXT ); Sample rows from `Rooms`: (RND, Recluse and defiance, 1, King, 2, 150, modern), (IBS, Interim but salutary, 1, King, 2, 150, traditional), (AOB, Abscond or bolster, 2, Queen, 4, 175, traditional), CREATE TABLE `Reservations` ( Code INTEGER, Room TEXT REFERENCES Rooms(RoomId), CheckIn TEXT, CheckOut TEXT, Rate REAL, LastName TEXT, FirstName TEXT, Adults INTEGER, Kids INTEGER ); Sample rows from `Reservations`: (10105, HBB, 23-OCT-10, 25-OCT-10, 100.0, SELBIG, CONRAD, 1, 0), (10183, IBD, 19-SEP-10, 20-SEP-10, 150.0, GABLER, DOLLIE, 2, 0), (10449, RND, 30-SEP-10, 01-OCT-10, 150.0, KLESS, NELSON, 1, 0), ",
        "output": "SELECT COUNT(DISTINCT bedtype) FROM rooms;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the dates on which more than one revisions were made. ###filtered_database_schema: CREATE TABLE `Attribute_Definitions` ( attribute_id INTEGER, attribute_name VARCHAR(30), attribute_data_type VARCHAR(10) ); Sample rows from `Attribute_Definitions`: (1, Green, Bool), (2, Black, Bool), (3, Yellow, Bool), CREATE TABLE `Catalogs` ( catalog_id INTEGER, catalog_name VARCHAR(50), catalog_publisher VARCHAR(80), date_of_publication DATETIME, date_of_latest_revision DATETIME ); Sample rows from `Catalogs`: (1, Chocolate, Koepp-Rutherford handmade chocolate store, 2013-03-15 05:09:17, 2017-09-26 12:10:36), (2, Coffee Bean, Murray Coffee shop, 2012-04-13 06:37:09, 2017-10-26 01:16:51), (3, Lemonade, Russel-Gislason Lemon shop, 2012-11-27 19:29:22, 2017-12-04 06:48:13), CREATE TABLE `Catalog_Structure` ( catalog_level_number INTEGER, catalog_id INTEGER REFERENCES Catalogs(catalog_id), catalog_level_name VARCHAR(50) ); Sample rows from `Catalog_Structure`: (1, 1, Category), (8, 2, Sub-Category), (9, 8, Product), CREATE TABLE `Catalog_Contents` ( catalog_entry_id INTEGER, catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number), parent_entry_id INTEGER, previous_entry_id INTEGER, next_entry_id INTEGER, catalog_entry_name VARCHAR(80), product_stock_number VARCHAR(50), price_in_dollars DOUBLE, price_in_euros DOUBLE, price_in_pounds DOUBLE, capacity VARCHAR(20), length VARCHAR(20), height VARCHAR(20), width VARCHAR(20) ); Sample rows from `Catalog_Contents`: (1, 1, 5, 9, 7, Cola, 89 cp, 200.78, 159.84, 172.17, 1, 3, 9, 5), (2, 8, 6, 9, 8, Root beer, 37 hq, 687.59, 590.11, 471.78, 8, 6, 5, 6), (3, 8, 6, 6, 1, Cream Soda, 52 ee, 360.5, 202.32, 110.32, 5, 9, 7, 8), CREATE TABLE `Catalog_Contents_Additional_Attributes` ( catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id), catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number), attribute_id INTEGER, attribute_value VARCHAR(255) ); Sample rows from `Catalog_Contents_Additional_Attributes`: (5, 8, 4, 1), (15, 9, 3, 0), (11, 1, 2, 0), ",
        "output": "SELECT date_of_latest_revision FROM catalogs GROUP BY date_of_latest_revision HAVING COUNT(*)  >  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the theme for exhibitions with both records of an attendance below 100 and above 500. ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Year_Join INT, Age INT ); Sample rows from `artist`: (1, Vijay Singh, Fiji, 1998, 45), (2, John Daly, United States, 1991, 46), (3, Paul Azinger, United States, 1993, 47), CREATE TABLE `exhibition` ( Exhibition_ID INT PRIMARY KEY, Year INT, Theme TEXT, Artist_ID INT REFERENCES artist(Artist_ID), Ticket_Price REAL ); Sample rows from `exhibition`: (1, 2004, Santa Claus, 1, 19.95), (2, 2005, Christmas stocking, 2, 19.95), (3, 2006, Santa Claus and Rudolph the Red-Nosed Reindeer, 4, 14.95), CREATE TABLE `exhibition_record` ( Exhibition_ID INT PRIMARY KEY REFERENCES exhibition(Exhibition_ID), Date TEXT PRIMARY KEY, Attendance INT ); Sample rows from `exhibition_record`: (1, December 2, 965), (1, December 5, 1098), (1, December 7, 2983), ",
        "output": "SELECT t2.theme FROM exhibition_record as t1 JOIN exhibition as t2 ON t1.exhibition_id  =  t2.exhibition_id WHERE t1.attendance  <  100 INTERSECT SELECT t2.theme FROM exhibition_record as t1 JOIN exhibition as t2 ON t1.exhibition_id  =  t2.exhibition_id WHERE t1.attendance  >  500"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the invoice dates for customers with the first name Astrid and the last name Gruber? ###filtered_database_schema: CREATE TABLE `Album` ( AlbumId INTEGER, Title varchar(160), ArtistId INTEGER PRIMARY KEY REFERENCES Artist(ArtistId) ); Sample rows from `Album`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `Artist` ( ArtistId INTEGER, Name varchar(120) ); Sample rows from `Artist`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `Customer` ( CustomerId INTEGER, FirstName varchar(40), LastName varchar(20), Company varchar(80), Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60), SupportRepId INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId) ); Sample rows from `Customer`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `Employee` ( EmployeeId INTEGER, LastName varchar(20), FirstName varchar(20), Title varchar(30), ReportsTo INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId), BirthDate datetime, HireDate datetime, Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60) ); Sample rows from `Employee`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `Genre` ( GenreId INTEGER, Name varchar(120) ); Sample rows from `Genre`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `Invoice` ( InvoiceId INTEGER, CustomerId INTEGER PRIMARY KEY REFERENCES Customer(CustomerId), InvoiceDate datetime, BillingAddress varchar(70), BillingCity varchar(40), BillingState varchar(40), BillingCountry varchar(40), BillingPostalCode varchar(10), Total decimal(10,2) ); Sample rows from `Invoice`: (1, 2, 2009-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2009-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2009-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `InvoiceLine` ( InvoiceLineId INTEGER, InvoiceId INTEGER PRIMARY KEY REFERENCES Invoice(InvoiceId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId), UnitPrice decimal(10,2), Quantity INTEGER ); Sample rows from `InvoiceLine`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `MediaType` ( MediaTypeId INTEGER, Name varchar(120) ); Sample rows from `MediaType`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `Playlist` ( PlaylistId INTEGER, Name varchar(120) ); Sample rows from `Playlist`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `PlaylistTrack` ( PlaylistId INTEGER PRIMARY KEY REFERENCES Playlist(PlaylistId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId) ); Sample rows from `PlaylistTrack`: (1, 1), (8, 1), (17, 1), CREATE TABLE `Track` ( TrackId INTEGER, Name varchar(200), AlbumId INTEGER PRIMARY KEY REFERENCES Album(AlbumId), MediaTypeId INTEGER PRIMARY KEY REFERENCES MediaType(MediaTypeId), GenreId INTEGER PRIMARY KEY REFERENCES Genre(GenreId), Composer varchar(220), Milliseconds INTEGER, Bytes INTEGER, UnitPrice decimal(10,2) ); Sample rows from `Track`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), ",
        "output": "SELECT t2.invoicedate FROM customer as t1 JOIN invoice as t2 ON t1.customerid  =  t2.customerid WHERE t1.firstname  =  \"Astrid\" AND lastname  =  \"Gruber\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the total purchases for members rated at level 6? ###filtered_database_schema: CREATE TABLE `member` ( Member_ID INT PRIMARY KEY, Card_Number TEXT, Name TEXT, Hometown TEXT, Level INT ); Sample rows from `member`: (1, LE99, Jeremy Jarmon, Collierville, Tennessee, 6), (2, LT98, Myron Pryor, Louisville, Kentucky, 6), (3, RT91, Corey Peters, Louisville, Kentucky, 6), CREATE TABLE `branch` ( Branch_ID INT PRIMARY KEY, Name TEXT, Open_year TEXT, Address_road TEXT, City TEXT, membership_amount TEXT ); Sample rows from `branch`: (1, Alexandre, 2001, Valleys Place, London, 112), (2, Popert, 2009, Oaks Crescent, London, 11), (3, Stanley, 2013, Abbott Street, London, 6), CREATE TABLE `membership_register_branch` ( Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Branch_ID TEXT REFERENCES branch(Branch_ID), Register_Year TEXT ); Sample rows from `membership_register_branch`: (1, 1, 2016), (2, 4, 2016), (3, 1, 2017), CREATE TABLE `purchase` ( Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Branch_ID TEXT PRIMARY KEY REFERENCES branch(Branch_ID), Year TEXT PRIMARY KEY, Total_pounds REAL ); Sample rows from `purchase`: (1, 3, 2018, 2013.32), (2, 5, 2018, 321.13), (3, 1, 2017, 988.09), ",
        "output": "SELECT COUNT(*) FROM purchase as t1 JOIN member as t2 ON t1.member_id  =  t2.member_id WHERE t2.level  =  6"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the distinct names of all races held between 2014 and 2017? ###filtered_database_schema: CREATE TABLE `circuits` ( circuitId INTEGER, circuitRef TEXT, name TEXT, location TEXT, country TEXT, lat REAL, lng REAL, alt TEXT, url TEXT ); Sample rows from `circuits`: (1, albert_park, Albert Park Grand Prix Circuit, Melbourne, Australia, -37.8497, 144.968, 10, http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit), (2, sepang, Sepang International Circuit, Kuala Lumpur, Malaysia, 2.76083, 101.738, , http://en.wikipedia.org/wiki/Sepang_International_Circuit), (3, bahrain, Bahrain International Circuit, Sakhir, Bahrain, 26.0325, 50.5106, , http://en.wikipedia.org/wiki/Bahrain_International_Circuit), CREATE TABLE `races` ( raceId INTEGER, year INTEGER, round INTEGER, circuitId INTEGER REFERENCES circuits(circuitId), name TEXT, date TEXT, time TEXT, url TEXT ); Sample rows from `races`: (1, 2009, 1, 1, Australian Grand Prix, 2009-03-29, 06:00:00, http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix), (2, 2009, 2, 2, Malaysian Grand Prix, 2009-04-05, 09:00:00, http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix), (3, 2009, 3, 17, Chinese Grand Prix, 2009-04-19, 07:00:00, http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix), CREATE TABLE `drivers` ( driverId INTEGER, driverRef TEXT, number TEXT, code TEXT, forename TEXT, surname TEXT, dob TEXT, nationality TEXT, url TEXT ); Sample rows from `drivers`: (1, hamilton, 44, HAM, Lewis, Hamilton, 07/01/1985, British, http://en.wikipedia.org/wiki/Lewis_Hamilton), (2, heidfeld, , HEI, Nick, Heidfeld, 10/05/1977, German, http://en.wikipedia.org/wiki/Nick_Heidfeld), (3, rosberg, 6, ROS, Nico, Rosberg, 27/06/1985, German, http://en.wikipedia.org/wiki/Nico_Rosberg), CREATE TABLE `status` ( statusId INTEGER, status TEXT ); Sample rows from `status`: (1, Finished), (2, Disqualified), (3, Accident), CREATE TABLE `seasons` ( year INTEGER, url TEXT ); Sample rows from `seasons`: (1950, http://en.wikipedia.org/wiki/1950_Formula_One_season), (1951, http://en.wikipedia.org/wiki/1951_Formula_One_season), (1952, http://en.wikipedia.org/wiki/1952_Formula_One_season), CREATE TABLE `constructors` ( constructorId INTEGER, constructorRef TEXT, name TEXT, nationality TEXT, url TEXT ); Sample rows from `constructors`: (1, mclaren, McLaren, British, http://en.wikipedia.org/wiki/McLaren), (2, bmw_sauber, BMW Sauber, German, http://en.wikipedia.org/wiki/BMW_Sauber), (3, williams, Williams, British, http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering), CREATE TABLE `constructorStandings` ( constructorStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `constructorStandings`: (1, 18, 1, 14.0, 1, 1, 1), (2, 18, 2, 8.0, 3, 3, 0), (3, 18, 3, 9.0, 2, 2, 0), CREATE TABLE `results` ( resultId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, grid INTEGER, position TEXT, positionText TEXT, positionOrder INTEGER, points REAL, laps TEXT, time TEXT, milliseconds TEXT, fastestLap TEXT, rank TEXT, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId INTEGER ); Sample rows from `results`: (1, 18, 1, 1, 22, 1, 1, 1, 1, 10.0, 58, 34:50.6, 5690616, 39, 2, 01:27.5, 218.3, 1), (2, 18, 2, 2, 3, 5, 2, 2, 2, 8.0, 58, 5.478, 5696094, 41, 3, 01:27.7, 217.586, 1), (3, 18, 3, 3, 7, 7, 3, 3, 3, 6.0, 58, 8.163, 5698779, 41, 5, 01:28.1, 216.719, 1), CREATE TABLE `driverStandings` ( driverStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `driverStandings`: (1, 18, 1, 10.0, 1, 1, 1), (2, 18, 2, 8.0, 2, 2, 0), (3, 18, 3, 6.0, 3, 3, 0), CREATE TABLE `constructorResults` ( constructorResultsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, status TEXT ); Sample rows from `constructorResults`: (1, 18, 1, 14.0, NULL), (2, 18, 2, 8.0, NULL), (3, 18, 3, 9.0, NULL), CREATE TABLE `qualifying` ( qualifyId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, position INTEGER, q1 TEXT, q2 TEXT, q3 TEXT ); Sample rows from `qualifying`: (1, 18, 1, 1, 22, 1, 1:26.572, 1:25.187, 1:26.714), (2, 18, 9, 2, 4, 2, 1:26.103, 1:25.315, 1:26.869), (3, 18, 5, 1, 23, 3, 1:25.664, 1:25.452, 1:27.079), CREATE TABLE `pitStops` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), stop INTEGER PRIMARY KEY, lap INTEGER, time TEXT, duration TEXT, milliseconds INTEGER ); CREATE TABLE `lapTimes` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), lap INTEGER PRIMARY KEY, position INTEGER, time TEXT, milliseconds INTEGER ); ",
        "output": "SELECT DISTINCT name FROM races WHERE year BETWEEN 2014 AND 2017"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find all reviews about \" Kabob Palace \" in year 2014 ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT t2.text FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Kabob Palace\" AND t2.year  =  2014;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the average number of customers cross all banks. ###filtered_database_schema: CREATE TABLE `bank` ( branch_ID INT PRIMARY KEY, bname varchar(20), no_of_customers INT, city varchar(10), state varchar(20) ); Sample rows from `bank`: (1, morningside, 203, New York City, New York), (2, downtown, 123, Salt Lake City, Utah), (3, broadway, 453, New York City, New York), CREATE TABLE `customer` ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal INT, no_of_loans INT, credit_score INT, branch_ID INT REFERENCES bank(branch_ID), state varchar(20) ); Sample rows from `customer`: (1, Mary, saving, 2000, 2, 30, 2, Utah), (2, Jack, checking, 1000, 1, 20, 1, Texas), (3, Owen, saving, 800000, 0, 210, 3, New York), CREATE TABLE `loan` ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3) REFERENCES customer(Cust_ID), branch_ID varchar(3) REFERENCES bank(branch_ID), amount INT ); Sample rows from `loan`: (1, Mortgages, 1, 1, 2050), (2, Auto, 1, 2, 3000), (3, Business, 3, 3, 5000), ",
        "output": "SELECT AVG(no_of_customers) FROM bank"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of departments that are located in Houston. ###filtered_database_schema: CREATE TABLE `works_on` ( Essn INTEGER PRIMARY KEY, Pno INTEGER PRIMARY KEY, Hours REAL ); Sample rows from `works_on`: (123456789, 1, 32.5), (123456789, 2, 7.5), (666884444, 3, 40.0), CREATE TABLE `employee` ( Fname TEXT, Minit TEXT, Lname TEXT, Ssn INTEGER, Bdate TEXT, Address TEXT, Sex TEXT, Salary INTEGER, Super_ssn INTEGER, Dno INTEGER ); Sample rows from `employee`: (Jonh, B, Smith, 123456789, 1965-01-09, 731 Fondren, Houston, TX, M, 30000, 333445555, 5), (Franklin, T, Wong, 333445555, 1955-12-08, 638 Voss, Houston, TX, M, 40000, 888665555, 5), (Joyce, A, English, 453453453, 1972-07-31, 5631 Rice, Houston, TX, F, 25000, 333445555, 5), CREATE TABLE `department` ( Dname TEXT, Dnumber INTEGER, Mgr_ssn INTEGER, Mgr_start_date TEXT ); Sample rows from `department`: (Headquarters, 1, 888665555, 1981-06-19), (Administration, 4, 987654321, 1995-01-01), (Research, 5, 333445555, 1988-05-22), CREATE TABLE `project` ( Pname TEXT, Pnumber INTEGER, Plocation TEXT, Dnum INTEGER ); Sample rows from `project`: (ProductX, 1, Bellaire, 5), (ProductY, 2, Sugarland, 5), (ProductZ, 3, Houston, 5), CREATE TABLE `dependent` ( Essn INTEGER PRIMARY KEY, Dependent_name TEXT PRIMARY KEY, Sex TEXT, Bdate TEXT, Relationship TEXT ); Sample rows from `dependent`: (333445555, Alice, F, 1986-04-05, Daughter), (333445555, Theodore, M, 1983-10-25, Son), (333445555, Joy, F, 1958-05-03, Spouse), CREATE TABLE `dept_locations` ( Dnumber INTEGER PRIMARY KEY, Dlocation TEXT PRIMARY KEY ); Sample rows from `dept_locations`: (1, Houston), (4, Stafford), (5, Bellaire), ",
        "output": "SELECT t1.dname FROM department as t1 JOIN dept_locations as t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  'Houston'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many accounts are there? ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(50), customer_middle_initial VARCHAR(1), customer_last_name VARCHAR(50), gender VARCHAR(1), email_address VARCHAR(255), login_name VARCHAR(80), login_password VARCHAR(20), phone_number VARCHAR(255), town_city VARCHAR(50), state_county_province VARCHAR(50), country VARCHAR(50) ); Sample rows from `Customers`: (1, Dee, A, Larkin, 1, thora.torphy@example.org, xhartmann, 77789d292604ea04406f, 241.796.1219x37862, North Nellie, WestVirginia, USA), (2, Brennon, H, Weimann, 0, roosevelt.collier@example.org, shayne.lesch, ce97a3e4539347daab96, (943)219-4234x415, South Isabell, Oklahoma, USA), (3, Joesph, K, Schaefer, 0, homenick.ambrose@example.net, feeney.lauriane, a6c7a7064c36b038d402, (488)524-5345, New Nikolas, Arkansas, USA), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 12, 2012-06-27 20:49:56, None), (2, 12, 2012-08-25 07:51:54, None), (3, 8, 2017-11-05 15:32:38, None), CREATE TABLE `Invoices` ( invoice_number INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_date DATETIME ); Sample rows from `Invoices`: (1, 9, 2018-03-01 16:40:48), (2, 9, 2018-03-20 00:21:41), (3, 3, 2018-03-05 08:47:33), CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_account_opened DATETIME, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 8, 2016-07-30 22:22:24, 900, Regular), (2, 3, 2017-05-29 16:45:17, 520, VIP), (3, 8, 2012-05-04 18:50:32, 323, Regular), CREATE TABLE `Product_Categories` ( production_type_code VARCHAR(15) PRIMARY KEY, product_type_description VARCHAR(80), vat_rating DECIMAL(19,4) ); Sample rows from `Product_Categories`: (Food, Food, 15.84), (DVDs, Dvd products, 11.4), (Books, Books, 13.95), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, production_type_code VARCHAR(15) REFERENCES Product_Categories(production_type_code), unit_price DECIMAL(19,4), product_name VARCHAR(80), product_color VARCHAR(20), product_size VARCHAR(20) ); Sample rows from `Products`: (1, 4, Food, 617.95, Coffee Bean, Red, Medium), (2, 4, Books, 558.49, Learning French, Yellow, Medium), (3, 8, Electronics, 563.58, Fans, Black, Medium), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DECIMAL(19,4), transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 13, 12, Payment, 2018-03-15 21:13:57, 613.96, None, None), (2, 9, 1, Payment, 2018-03-13 13:27:46, 368.46, None, None), (3, 6, 1, Refund, 2018-03-03 01:50:25, 1598.25, None, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), product_id INTEGER REFERENCES Products(product_id), product_quantity VARCHAR(50), other_order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 4, 6, None), (2, 4, 10, 7, None), (3, 15, 5, 4, None), CREATE TABLE `Invoice_Line_Items` ( order_item_id INTEGER REFERENCES Order_Items(order_item_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), product_id INTEGER REFERENCES Products(product_id), product_title VARCHAR(80), product_quantity VARCHAR(50), product_price DECIMAL(19,4), derived_product_cost DECIMAL(19,4), derived_vat_payable DECIMAL(19,4), derived_total_cost DECIMAL(19,4) ); Sample rows from `Invoice_Line_Items`: (14, 9, 5, prod_name, 4, 742.37, 191.11, None, 69.82), (3, 9, 15, prod_name, 1, 814.87, 176.29, None, 59.56), (4, 10, 15, prod_name, 8, 943.07, 73.14, None, 59.93), ",
        "output": "SELECT COUNT(*) FROM accounts"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Who is the founders of companies whose first letter is S? ###filtered_database_schema: CREATE TABLE `Manufacturers` ( Code INTEGER, Name VARCHAR(255), Headquarter VARCHAR(255), Founder VARCHAR(255), Revenue REAL ); Sample rows from `Manufacturers`: (1, Sony, Tokyo, Andy, 120.0), (2, Creative Labs, Austin, Owen, 100.0), (3, Hewlett-Packard, Los Angeles, James, 50.0), CREATE TABLE `Products` ( Code INTEGER, Name VARCHAR(255), Price DECIMAL, Manufacturer INTEGER REFERENCES Manufacturers(Code) ); Sample rows from `Products`: (1, Hard drive, 240, 5), (2, Memory, 120, 6), (3, ZIP drive, 150, 4), ",
        "output": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find all breweries in \" Los Angeles \" ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: how many papers does Mirella Lapata cite ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(t3.citedpaperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN cite as t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the population of the smallest state ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT population FROM state WHERE area  =  ( SELECT MIN(area) FROM state );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the flag that is most common among all ships. ###filtered_database_schema: CREATE TABLE `captain` ( Captain_ID INT PRIMARY KEY, Name TEXT, Ship_ID INT REFERENCES Ship(Ship_ID), age TEXT, Class TEXT, Rank TEXT ); Sample rows from `captain`: (1, Captain Sir Henry Langford, 1, 40, Third-rate ship of the line, Midshipman), (2, Captain Beves Conway, 2, 54, Third-rate ship of the line, Midshipman), (3, Lieutenant Hugh Bolitho, 3, 43, Cutter, Midshipman), CREATE TABLE `Ship` ( Ship_ID INT PRIMARY KEY, Name TEXT, Type TEXT, Built_Year REAL, Class TEXT, Flag TEXT ); Sample rows from `Ship`: (1, HMS Manxman, Panamax, 1997.0, KR, Panama), (2, HMS Gorgon, Panamax, 1998.0, KR, Panama), (3, HM Cutter Avenger, Panamax, 1997.0, KR, Panama), ",
        "output": "SELECT flag FROM ship GROUP BY flag ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: data sets for semantic parsing ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: papers that used Question Answering ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts. ###filtered_database_schema: CREATE TABLE `Apartment_Buildings` ( building_id INTEGER PRIMARY KEY, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80) ); Sample rows from `Apartment_Buildings`: (133, Normandie Court, Normandie Court, Studio, 7950 Casper Vista Apt. 176 Marquiseberg, CA 70496, Emma, (948)040-1064x387), (153, Mercedes House, Mercedes House, Studio, 354 Otto Villages Charliefort, VT 71664, Brenden, 915-617-2408x832), (191, The Eugene, The Eugene, Flat, 71537 Gorczany Inlet Wisozkburgh, AL 08256, Melyssa, (609)946-0491), CREATE TABLE `Apartments` ( apt_id INTEGER PRIMARY KEY, building_id INTEGER REFERENCES Apartment_Buildings(building_id), apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5) ); Sample rows from `Apartments`: (1, 808, Flat, Suite 645, 1, 3, 7), (2, 624, Flat, Apt. 585, 2, 4, 5), (3, 225, Studio, Apt. 908, 1, 6, 7), CREATE TABLE `Apartment_Facilities` ( apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id), facility_code CHAR(15) PRIMARY KEY ); Sample rows from `Apartment_Facilities`: (1, Boardband), (2, Boardband), (3, Gym), CREATE TABLE `Guests` ( guest_id INTEGER PRIMARY KEY, gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME ); Sample rows from `Guests`: (1, Male, Kip, DuBuque, 1995-11-04 07:09:57), (2, Unknown, Rebeca, Runolfsdottir, 1974-05-12 21:53:58), (3, Female, Keon, Treutel, 1974-08-20 09:28:05), CREATE TABLE `Apartment_Bookings` ( apt_booking_id INTEGER PRIMARY KEY, apt_id INTEGER REFERENCES Apartments(apt_id), guest_id INTEGER REFERENCES Guests(guest_id), booking_status_code CHAR(15), booking_start_date DATETIME, booking_end_date DATETIME ); Sample rows from `Apartment_Bookings`: (258, 10, 2, Provisional, 2016-09-26 17:13:49, 2017-10-07 11:38:48), (279, 15, 15, Provisional, 2016-04-01 06:28:08, 2017-10-25 11:08:42), (337, 8, 5, Provisional, 2017-03-13 16:20:14, 2018-02-19 16:59:08), CREATE TABLE `View_Unit_Status` ( apt_id INTEGER REFERENCES Apartments(apt_id), apt_booking_id INTEGER REFERENCES Apartment_Bookings(apt_booking_id), status_date DATETIME PRIMARY KEY, available_yn BIT ); Sample rows from `View_Unit_Status`: (11, 920, 1970-09-28 10:24:29, 1), (15, 575, 1972-03-23 22:55:53, 1), (15, 924, 1973-10-28 04:30:14, 1), ",
        "output": "SELECT gender_code ,  COUNT(*) FROM guests GROUP BY gender_code ORDER BY COUNT(*) DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the description of all the colors. ###filtered_database_schema: CREATE TABLE `Ref_Characteristic_Types` ( characteristic_type_code VARCHAR(15) PRIMARY KEY, characteristic_type_description VARCHAR(80) ); Sample rows from `Ref_Characteristic_Types`: (Grade, Grade), (Purity, Purity), CREATE TABLE `Ref_Colors` ( color_code VARCHAR(15) PRIMARY KEY, color_description VARCHAR(80) ); Sample rows from `Ref_Colors`: (9, red), (5, green), (1, yellow), CREATE TABLE `Ref_Product_Categories` ( product_category_code VARCHAR(15) PRIMARY KEY, product_category_description VARCHAR(80), unit_of_measure VARCHAR(20) ); Sample rows from `Ref_Product_Categories`: (Herbs, Herbs, Handful ), (Seeds, Seeds, Weight - pound,kilo.), (Spices, Spices, Weight - pound,kilo.), CREATE TABLE `Characteristics` ( characteristic_id INTEGER, characteristic_type_code VARCHAR(15) REFERENCES Ref_Characteristic_Types(characteristic_type_code), characteristic_data_type VARCHAR(10), characteristic_name VARCHAR(80), other_characteristic_details VARCHAR(255) ); Sample rows from `Characteristics`: (1, Grade, numquam, slow, None), (2, Grade, doloribus, fast, None), (3, Purity, rem, warm, None), CREATE TABLE `Products` ( product_id INTEGER, color_code VARCHAR(15) REFERENCES Ref_Colors(color_code), product_category_code VARCHAR(15) REFERENCES Ref_Product_Categories(product_category_code), product_name VARCHAR(80), typical_buying_price VARCHAR(20), typical_selling_price VARCHAR(20), product_description VARCHAR(255), other_product_details VARCHAR(255) ); Sample rows from `Products`: (1, 4, Spices, cumin, , 2878.3, et, None), (2, 2, Spices, peper, 352447.2874677, 1892070.2803543, rerum, None), (3, 9, Herbs, basil, 503.8431967, 0.1859512, officia, None), CREATE TABLE `Product_Characteristics` ( product_id INTEGER REFERENCES Products(product_id), characteristic_id INTEGER REFERENCES Characteristics(characteristic_id), product_characteristic_value VARCHAR(50) ); Sample rows from `Product_Characteristics`: (13, 13, low), (11, 2, low), (5, 15, low), ",
        "output": "SELECT color_description FROM ref_colors"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List all every engineer's first name, last name, details and coresponding skill description. ###filtered_database_schema: CREATE TABLE `Third_Party_Companies` ( company_id INTEGER, company_type VARCHAR(5), company_name VARCHAR(255), company_address VARCHAR(255), other_company_details VARCHAR(255) ); Sample rows from `Third_Party_Companies`: (1, Maintenance Contractor, Langworth-Funk, 615 Jacobs Mews, Uganda), (2, Maintenance Contractor, McDermott Group, 873 Conrad Creek Apt. 286, China), (3, Maintenance Contractor, Schuppe-Carroll, 066 Bechtelar Ridge, United Arab Emirates), CREATE TABLE `Maintenance_Contracts` ( maintenance_contract_id INTEGER, maintenance_contract_company_id INTEGER REFERENCES Third_Party_Companies(company_id), contract_start_date DATETIME, contract_end_date DATETIME, other_contract_details VARCHAR(255) ); Sample rows from `Maintenance_Contracts`: (1, 15, 2017-09-13 11:51:29, 2018-03-16 21:21:50, None), (2, 9, 2017-12-18 11:43:16, 2018-03-22 06:00:37, None), (3, 11, 2017-05-06 02:32:19, 2018-03-20 14:02:54, None), CREATE TABLE `Parts` ( part_id INTEGER, part_name VARCHAR(255), chargeable_yn VARCHAR(1), chargeable_amount VARCHAR(20), other_part_details VARCHAR(255) ); Sample rows from `Parts`: (1, top, 0, 4, None), (2, middle, 1, 9, None), (3, package, 1, 9, None), CREATE TABLE `Skills` ( skill_id INTEGER, skill_code VARCHAR(20), skill_description VARCHAR(255) ); Sample rows from `Skills`: (1, ELEC, Electrical), (2, MECH, Mechanical), (3, TV, TV, Video), CREATE TABLE `Staff` ( staff_id INTEGER, staff_name VARCHAR(255), gender VARCHAR(1), other_staff_details VARCHAR(255) ); Sample rows from `Staff`: (1, Audreanne, 1, Manager), (2, Berneice, 1, Manager), (3, Helena, 1, None), CREATE TABLE `Assets` ( asset_id INTEGER, maintenance_contract_id INTEGER REFERENCES Maintenance_Contracts(maintenance_contract_id), supplier_company_id INTEGER REFERENCES Third_Party_Companies(company_id), asset_details VARCHAR(255), asset_make VARCHAR(20), asset_model VARCHAR(20), asset_acquired_date DATETIME, asset_disposed_date DATETIME, other_asset_details VARCHAR(255) ); Sample rows from `Assets`: (1, 2, 2, dell laptop1, PT, 58 ub, 2017-12-25 00:31:27, 2018-03-14 10:50:00, None), (2, 14, 1, dell laptop2, IN, 35 xt, 2018-01-27 00:59:46, 2018-03-20 04:24:09, None), (3, 7, 2, dell laptop3, IT, 63 ok, 2017-09-07 08:13:15, 2018-03-08 20:50:40, Bad condition), CREATE TABLE `Asset_Parts` ( asset_id INTEGER REFERENCES Assets(asset_id), part_id INTEGER REFERENCES Parts(part_id) ); Sample rows from `Asset_Parts`: (5, 3), (3, 3), (10, 1), CREATE TABLE `Maintenance_Engineers` ( engineer_id INTEGER, company_id INTEGER REFERENCES Third_Party_Companies(company_id), first_name VARCHAR(50), last_name VARCHAR(50), other_details VARCHAR(255) ); Sample rows from `Maintenance_Engineers`: (1, 14, Etha, Reinger, Skilled), (2, 2, Clemens, Orn, None), (3, 6, Samanta, Hauck, None), CREATE TABLE `Engineer_Skills` ( engineer_id INTEGER REFERENCES Maintenance_Engineers(engineer_id), skill_id INTEGER REFERENCES Skills(skill_id) ); Sample rows from `Engineer_Skills`: (10, 2), (10, 1), (15, 1), CREATE TABLE `Fault_Log` ( fault_log_entry_id INTEGER, asset_id INTEGER REFERENCES Assets(asset_id), recorded_by_staff_id INTEGER REFERENCES Staff(staff_id), fault_log_entry_datetime DATETIME, fault_description VARCHAR(255), other_fault_details VARCHAR(255) ); Sample rows from `Fault_Log`: (1, 3, 14, 2018-03-21 04:25:00, system error, None), (2, 7, 4, 2018-03-13 09:43:05, system error, None), (3, 6, 9, 2018-02-24 09:28:20, system error, None), CREATE TABLE `Engineer_Visits` ( engineer_visit_id INTEGER, contact_staff_id INTEGER REFERENCES Staff(staff_id), engineer_id INTEGER REFERENCES Maintenance_Engineers(engineer_id), fault_log_entry_id INTEGER REFERENCES Fault_Log(fault_log_entry_id), fault_status VARCHAR(10), visit_start_datetime DATETIME, visit_end_datetime DATETIME, other_visit_details VARCHAR(255) ); Sample rows from `Engineer_Visits`: (1, 8, 8, 13, Waiting, 1978-10-12 23:14:40, 1988-01-07 06:41:51, None), (2, 7, 15, 13, Return, 1980-05-02 23:31:18, 1990-08-30 22:44:16, None), (3, 7, 15, 4, Waiting, 2010-02-23 18:16:23, 1982-05-13 02:08:41, None), CREATE TABLE `Part_Faults` ( part_fault_id INTEGER, part_id INTEGER REFERENCES Parts(part_id), fault_short_name VARCHAR(20), fault_description VARCHAR(255), other_fault_details VARCHAR(255) ); Sample rows from `Part_Faults`: (1, 1, PW, Package Wrong, None), (2, 1, PW, Package Wrong, None), (3, 3, TW, Top Parts Wrong, None), CREATE TABLE `Fault_Log_Parts` ( fault_log_entry_id INTEGER REFERENCES Fault_Log(fault_log_entry_id), part_fault_id INTEGER REFERENCES Part_Faults(part_fault_id), fault_status VARCHAR(10) ); Sample rows from `Fault_Log_Parts`: (12, 3, Reported), (7, 4, Reported), (1, 9, Return), CREATE TABLE `Skills_Required_To_Fix` ( part_fault_id INTEGER REFERENCES Part_Faults(part_fault_id), skill_id INTEGER REFERENCES Skills(skill_id) ); Sample rows from `Skills_Required_To_Fix`: (3, 2), (12, 3), (6, 1), ",
        "output": "SELECT t1.first_name ,  t1.last_name ,  t1.other_details ,  t3.skill_description FROM maintenance_engineers as t1 JOIN engineer_skills as t2 ON t1.engineer_id  =  t2.engineer_id JOIN skills as t3 ON t2.skill_id  =  t3.skill_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: conference papers of subhasis chaudhuri ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of the top 8 countries by total invoice size and what are those sizes? ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the id of students who registered some courses and the number of their registered courses? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1 VARCHAR(80), line_2 VARCHAR(80), city VARCHAR(50), zip_postcode CHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (5, 0900 Roderick Oval New Albina, WA 19200-7914, Suite 096, Linnealand, 862, Montana, USA), (9, 966 Dach Ports Apt. 322 Lake Harmonyhaven, VA 65235, Apt. 163, South Minnie, 716, Texas, USA), (29, 28550 Broderick Underpass Suite 667 Zakaryhaven, WY 22945-1534, Apt. 419, North Trystanborough, 112, Vermont, USA), CREATE TABLE `People` ( person_id INTEGER, first_name VARCHAR(255), middle_name VARCHAR(255), last_name VARCHAR(255), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), login_name VARCHAR(40), password VARCHAR(40) ); Sample rows from `People`: (111, Shannon, Elissa, Senger, 01955267735, javier.trantow@example.net, pgub, 5e4ff49a61b3544da3ad7dc7e2cf28847564c64c), (121, Virginie, Jasmin, Hartmann, (508)319-2970x043, boyer.lonie@example.com, bkkv, b063331ea8116befaa7b84c59c6a22200f5f8caa), (131, Dariana, Hayley, Bednar, (262)347-9364x516, leila14@example.net, zops, b20b6a9f24aadeda70d54e410c3219f61fb063fb), CREATE TABLE `Students` ( student_id INTEGER REFERENCES People(person_id), student_details VARCHAR(255) ); Sample rows from `Students`: (111, Marry), (121, Martin), (131, Barry), CREATE TABLE `Courses` ( course_id VARCHAR(100) PRIMARY KEY, course_name VARCHAR(120), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Courses`: (301, statistics, statistics, None), (302, English, English, None), (303, French, French, None), CREATE TABLE `People_Addresses` ( person_address_id INTEGER, person_id INTEGER REFERENCES People(person_id), address_id INTEGER REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `People_Addresses`: (122, 111, 9, 2012-09-26 13:21:00, 2018-03-21 09:46:30), (257, 121, 5, 2008-07-31 02:17:25, 2018-03-09 02:11:12), (269, 131, 88, 2008-05-26 20:43:41, 2018-03-11 20:26:41), CREATE TABLE `Student_Course_Registrations` ( student_id INTEGER PRIMARY KEY REFERENCES Students(student_id), course_id INTEGER PRIMARY KEY REFERENCES Courses(course_id), registration_date DATETIME ); Sample rows from `Student_Course_Registrations`: (111, 301, 2008-11-04 10:35:13), (121, 301, 2008-10-04 10:35:13), (121, 303, 2008-11-14 10:35:13), CREATE TABLE `Student_Course_Attendance` ( student_id INTEGER PRIMARY KEY REFERENCES Student_Course_Registrations(student_id), course_id INTEGER PRIMARY KEY REFERENCES Student_Course_Registrations(course_id), date_of_attendance DATETIME ); Sample rows from `Student_Course_Attendance`: (111, 301, 2008-11-04 10:35:13), (121, 301, 2012-04-09 11:44:34), (121, 303, 2014-04-09 11:44:34), CREATE TABLE `Candidates` ( candidate_id INTEGER REFERENCES People(person_id), candidate_details VARCHAR(255) ); Sample rows from `Candidates`: (111, Jane), (121, Robert), (131, Alex), CREATE TABLE `Candidate_Assessments` ( candidate_id INTEGER PRIMARY KEY REFERENCES Candidates(candidate_id), qualification CHAR(15) PRIMARY KEY, assessment_date DATETIME, asessment_outcome_code CHAR(15) ); Sample rows from `Candidate_Assessments`: (111, A, 2010-04-07 11:44:34, Pass), (121, B, 2010-04-17 11:44:34, Pass), (131, D, 2010-04-05 11:44:34, Fail), ",
        "output": "SELECT t1.student_id ,  COUNT(*) FROM students as t1 JOIN student_course_registrations as t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the role with the smallest number of employees? Find the role codes. ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CV, CV, ), (BK, Book, ), (PR, Paper, ), CREATE TABLE `Ref_Calendar` ( Calendar_Date DATETIME PRIMARY KEY, Day_Number INTEGER ); Sample rows from `Ref_Calendar`: (1972-03-31 09:47:22, 5), (1976-06-15 03:40:06, 7), (1985-05-13 12:19:43, 7), CREATE TABLE `Ref_Locations` ( Location_Code CHAR(15) PRIMARY KEY, Location_Name VARCHAR(255), Location_Description VARCHAR(255) ); Sample rows from `Ref_Locations`: (b, Brazil, ), (c, Canada, ), (e, Edinburgh, ), CREATE TABLE `Roles` ( Role_Code CHAR(15) PRIMARY KEY, Role_Name VARCHAR(255), Role_Description VARCHAR(255) ); Sample rows from `Roles`: (MG, Manager, Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti.), (ED, Editor, Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos.), (PT, Photo, Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt.), CREATE TABLE `All_Documents` ( Document_ID INTEGER, Date_Stored DATETIME REFERENCES Ref_Calendar(Calendar_Date), Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255) ); Sample rows from `All_Documents`: (7, 1976-06-15 03:40:06, CV, Robin CV, None, None), (11, 1986-10-14 17:53:39, CV, Marry CV, None, None), (25, 2008-06-08 12:45:38, BK, One hundred years of solitude, None, None), CREATE TABLE `Employees` ( Employee_ID INTEGER, Role_Code CHAR(15) REFERENCES Roles(Role_Code), Employee_Name VARCHAR(255), Gender_MFU CHAR(1), Date_of_Birth DATETIME, Other_Details VARCHAR(255) ); Sample rows from `Employees`: (25, HR, Leo, , 1973-02-15 17:16:00, None), (30, MG, Ebba, , 1979-09-20 12:50:15, None), (38, ED, Stephanie, 1, 2012-03-30 23:02:28, None), CREATE TABLE `Document_Locations` ( Document_ID INTEGER PRIMARY KEY REFERENCES All_Documents(Document_ID), Location_Code CHAR(15) PRIMARY KEY REFERENCES Ref_Locations(Location_Code), Date_in_Location_From DATETIME PRIMARY KEY REFERENCES Ref_Calendar(Calendar_Date), Date_in_Locaton_To DATETIME REFERENCES Ref_Calendar(Calendar_Date) ); Sample rows from `Document_Locations`: (7, e, 2017-01-06 23:17:22, 2008-06-08 12:45:38), (11, x, 2017-01-06 23:17:22, 2012-07-03 09:48:46), (81, c, 1972-03-31 09:47:22, 1987-11-05 06:11:22), CREATE TABLE `Documents_to_be_Destroyed` ( Document_ID INTEGER REFERENCES All_Documents(Document_ID), Destruction_Authorised_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Destroyed_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Planned_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Actual_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Other_Details VARCHAR(255) ); Sample rows from `Documents_to_be_Destroyed`: (7, 156, 138, 1988-02-01 14:41:52, 2017-01-06 23:17:22, None), (11, 55, 173, 2010-11-26 19:22:50, 1986-10-14 17:53:39, None), (25, 183, 156, 2009-08-18 03:29:08, 1995-01-01 03:52:11, None), ",
        "output": "SELECT role_code FROM employees GROUP BY role_code ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Compute the total amount of settlement across all the settlements. ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_Details VARCHAR(255) ); Sample rows from `Customers`: (1, America Jaskolski), (2, Ellsworth Paucek), (3, Mrs. Hanna Willms), CREATE TABLE `Customer_Policies` ( Policy_ID INTEGER, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Policy_Type_Code CHAR(15), Start_Date DATE, End_Date DATE ); Sample rows from `Customer_Policies`: (119, 1, Car, 2018-01-21, 2017-12-15), (141, 2, Life, 2017-08-21, 2017-09-29), (143, 3, Car, 2017-06-16, 2017-12-09), CREATE TABLE `Claims` ( Claim_ID INTEGER, Policy_ID INTEGER REFERENCES Customer_Policies(Policy_ID), Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER ); Sample rows from `Claims`: (143, 744, 2017-03-11, 2017-11-03, 43884, 1085), (423, 552, 2016-08-12, 2018-01-27, 79134, 1724), (442, 473, 2017-02-24, 2018-01-21, 70088, 1189), CREATE TABLE `Settlements` ( Settlement_ID INTEGER, Claim_ID INTEGER REFERENCES Claims(Claim_ID), Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, Customer_Policy_ID INTEGER ); Sample rows from `Settlements`: (357, 486, 2018-08-07, 2018-01-16, 38543, 1181, 515), (412, 621, 2017-08-27, 2018-02-04, 57669, 1427, 617), (476, 801, 2016-09-05, 2018-03-02, 30954, 1805, 943), CREATE TABLE `Payments` ( Payment_ID INTEGER, Settlement_ID INTEGER REFERENCES Settlements(Settlement_ID), Payment_Method_Code VARCHAR(255), Date_Payment_Made DATE, Amount_Payment INTEGER ); Sample rows from `Payments`: (384, 516, MasterCard, 2018-02-16, 241730), (435, 476, MasterCard, 2017-05-28, 448613), (484, 516, MasterCard, 2017-06-24, 456098), ",
        "output": "SELECT SUM(amount_settled) FROM settlements"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the role of the employee named Koby? ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( document_type_code CHAR(15) PRIMARY KEY, document_type_description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CD, b), (Paper, u), (Hard Drive, f), CREATE TABLE `Roles` ( role_code CHAR(15) PRIMARY KEY, role_description VARCHAR(255) ); Sample rows from `Roles`: (ED, Editor), (PT, Photo), (MG, Manager), CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (0, IT), (1, MX), (2, DE), CREATE TABLE `Ref_Document_Status` ( document_status_code CHAR(15) PRIMARY KEY, document_status_description VARCHAR(255) ); Sample rows from `Ref_Document_Status`: (working, currently working on), (done, mailed), (overdue, mailed late), CREATE TABLE `Ref_Shipping_Agents` ( shipping_agent_code CHAR(15) PRIMARY KEY, shipping_agent_name VARCHAR(255), shipping_agent_description VARCHAR(255) ); Sample rows from `Ref_Shipping_Agents`: (UP, UPS, g), (US, USPS, q), (AL, Airline, w), CREATE TABLE `Documents` ( document_id INTEGER, document_status_code CHAR(15) REFERENCES Ref_Document_Status(document_status_code), document_type_code CHAR(15) REFERENCES Ref_Document_Types(document_type_code), shipping_agent_code CHAR(15) REFERENCES Ref_Shipping_Agents(shipping_agent_code), receipt_date DATETIME, receipt_number VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Documents`: (1, working, CD, UP, 2008-04-21 20:42:25, 19, z), (2, done, Paper, US, 1974-05-08 00:00:46, 34, h), (3, done, Paper, UP, 2014-12-25 17:22:44, 93, h), CREATE TABLE `Employees` ( employee_id INTEGER, role_code CHAR(15) REFERENCES Roles(role_code), employee_name VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Employees`: (1, ED, Koby, h), (2, ED, Kenyon, f), (3, PR, Haley, b), CREATE TABLE `Document_Drafts` ( document_id INTEGER PRIMARY KEY REFERENCES Documents(document_id), draft_number INTEGER PRIMARY KEY, draft_details VARCHAR(255) ); Sample rows from `Document_Drafts`: (1, 0, e), (1, 2, k), (2, 1, v), CREATE TABLE `Draft_Copies` ( document_id INTEGER PRIMARY KEY REFERENCES Document_Drafts(document_id), draft_number INTEGER PRIMARY KEY REFERENCES Document_Drafts(draft_number), copy_number INTEGER PRIMARY KEY ); Sample rows from `Draft_Copies`: (2, 8, 5), (4, 9, 6), (23, 9, 15), CREATE TABLE `Circulation_History` ( document_id INTEGER PRIMARY KEY REFERENCES Draft_Copies(document_id), draft_number INTEGER PRIMARY KEY REFERENCES Draft_Copies(draft_number), copy_number INTEGER PRIMARY KEY REFERENCES Draft_Copies(copy_number), employee_id INTEGER PRIMARY KEY REFERENCES Employees(employee_id) ); Sample rows from `Circulation_History`: (20, 17, 15, 8), (1, 2, 5, 1), (2, 1, 4, 2), CREATE TABLE `Documents_Mailed` ( document_id INTEGER PRIMARY KEY REFERENCES Documents(document_id), mailed_to_address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), mailing_date DATETIME ); Sample rows from `Documents_Mailed`: (2, 8, 1977-04-01 17:03:50), (4, 3, 1992-11-07 15:03:41), (4, 9, 1973-02-21 10:17:01), ",
        "output": "SELECT t1.role_description FROM roles as t1 JOIN employees as t2 ON t1.role_code = t2.role_code WHERE t2.employee_name = \"Koby\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show publishers that have more than one publication. ###filtered_database_schema: CREATE TABLE `publication` ( Publication_ID INT PRIMARY KEY, Book_ID INT REFERENCES book(Book_ID), Publisher TEXT, Publication_Date TEXT, Price REAL ); Sample rows from `publication`: (1, 1, Pearson, August 2008, 15000000.0), (2, 3, Thomson Reuters, March 2008, 6000000.0), (3, 4, Wiley, June 2006, 4100000.0), CREATE TABLE `book` ( Book_ID INT PRIMARY KEY, Title TEXT, Issues REAL, Writer TEXT ); Sample rows from `book`: (1, The Black Lamb, 6.0, Timothy Truman), (2, Bloody Mary, 4.0, Garth Ennis), (3, Bloody Mary : Lady Liberty, 4.0, Garth Ennis), ",
        "output": "SELECT publisher FROM publication GROUP BY publisher HAVING COUNT(*)  >  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids of the candidates that have an outcome code of Pass? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1 VARCHAR(80), line_2 VARCHAR(80), city VARCHAR(50), zip_postcode CHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (5, 0900 Roderick Oval New Albina, WA 19200-7914, Suite 096, Linnealand, 862, Montana, USA), (9, 966 Dach Ports Apt. 322 Lake Harmonyhaven, VA 65235, Apt. 163, South Minnie, 716, Texas, USA), (29, 28550 Broderick Underpass Suite 667 Zakaryhaven, WY 22945-1534, Apt. 419, North Trystanborough, 112, Vermont, USA), CREATE TABLE `People` ( person_id INTEGER, first_name VARCHAR(255), middle_name VARCHAR(255), last_name VARCHAR(255), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), login_name VARCHAR(40), password VARCHAR(40) ); Sample rows from `People`: (111, Shannon, Elissa, Senger, 01955267735, javier.trantow@example.net, pgub, 5e4ff49a61b3544da3ad7dc7e2cf28847564c64c), (121, Virginie, Jasmin, Hartmann, (508)319-2970x043, boyer.lonie@example.com, bkkv, b063331ea8116befaa7b84c59c6a22200f5f8caa), (131, Dariana, Hayley, Bednar, (262)347-9364x516, leila14@example.net, zops, b20b6a9f24aadeda70d54e410c3219f61fb063fb), CREATE TABLE `Students` ( student_id INTEGER REFERENCES People(person_id), student_details VARCHAR(255) ); Sample rows from `Students`: (111, Marry), (121, Martin), (131, Barry), CREATE TABLE `Courses` ( course_id VARCHAR(100) PRIMARY KEY, course_name VARCHAR(120), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Courses`: (301, statistics, statistics, None), (302, English, English, None), (303, French, French, None), CREATE TABLE `People_Addresses` ( person_address_id INTEGER, person_id INTEGER REFERENCES People(person_id), address_id INTEGER REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `People_Addresses`: (122, 111, 9, 2012-09-26 13:21:00, 2018-03-21 09:46:30), (257, 121, 5, 2008-07-31 02:17:25, 2018-03-09 02:11:12), (269, 131, 88, 2008-05-26 20:43:41, 2018-03-11 20:26:41), CREATE TABLE `Student_Course_Registrations` ( student_id INTEGER PRIMARY KEY REFERENCES Students(student_id), course_id INTEGER PRIMARY KEY REFERENCES Courses(course_id), registration_date DATETIME ); Sample rows from `Student_Course_Registrations`: (111, 301, 2008-11-04 10:35:13), (121, 301, 2008-10-04 10:35:13), (121, 303, 2008-11-14 10:35:13), CREATE TABLE `Student_Course_Attendance` ( student_id INTEGER PRIMARY KEY REFERENCES Student_Course_Registrations(student_id), course_id INTEGER PRIMARY KEY REFERENCES Student_Course_Registrations(course_id), date_of_attendance DATETIME ); Sample rows from `Student_Course_Attendance`: (111, 301, 2008-11-04 10:35:13), (121, 301, 2012-04-09 11:44:34), (121, 303, 2014-04-09 11:44:34), CREATE TABLE `Candidates` ( candidate_id INTEGER REFERENCES People(person_id), candidate_details VARCHAR(255) ); Sample rows from `Candidates`: (111, Jane), (121, Robert), (131, Alex), CREATE TABLE `Candidate_Assessments` ( candidate_id INTEGER PRIMARY KEY REFERENCES Candidates(candidate_id), qualification CHAR(15) PRIMARY KEY, assessment_date DATETIME, asessment_outcome_code CHAR(15) ); Sample rows from `Candidate_Assessments`: (111, A, 2010-04-07 11:44:34, Pass), (121, B, 2010-04-17 11:44:34, Pass), (131, D, 2010-04-05 11:44:34, Fail), ",
        "output": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all employees who have a salary higher than average? ###filtered_database_schema: CREATE TABLE `flight` ( flno number(4,0) PRIMARY KEY, origin varchar2(20), destination varchar2(20), distance number(6,0), departure_date date, arrival_date date, price number(7,2), aid number(9,0) REFERENCES aircraft(aid) ); Sample rows from `flight`: (99, Los Angeles, Washington D.C., 2308, 04/12/2005 09:30, 04/12/2005 09:40, 235.98, 1), (13, Los Angeles, Chicago, 1749, 04/12/2005 08:45, 04/12/2005 08:45, 220.98, 3), (346, Los Angeles, Dallas, 1251, 04/12/2005 11:50, 04/12/2005 07:05, 182, 2), CREATE TABLE `aircraft` ( aid number(9,0) PRIMARY KEY, name varchar2(30), distance number(6,0) ); Sample rows from `aircraft`: (1, Boeing 747-400, 8430), (2, Boeing 737-800, 3383), (3, Airbus A340-300, 7120), CREATE TABLE `employee` ( eid number(9,0) PRIMARY KEY, name varchar2(30), salary number(10,2) ); Sample rows from `employee`: (242518965, James Smith, 120433), (141582651, Mary Johnson, 178345), (11564812, John Williams, 153972), CREATE TABLE `certificate` ( eid number(9,0) PRIMARY KEY REFERENCES employee(eid), aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid) ); Sample rows from `certificate`: (11564812, 2), (11564812, 10), (90873519, 6), ",
        "output": "SELECT name FROM employee WHERE salary  >  (SELECT AVG(salary) FROM employee)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List every album ordered by album title in ascending order. ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT title FROM albums ORDER BY title;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is first names of the top 5 staff who have handled the greatest number of complaints? ###filtered_database_schema: CREATE TABLE `Staff` ( staff_id INTEGER, gender VARCHAR(1), first_name VARCHAR(80), last_name VARCHAR(80), email_address VARCHAR(255), phone_number VARCHAR(80) ); Sample rows from `Staff`: (114, 0, Ward, Boehm, marcelle.ritchie@example.com, (379)551-0838x146), (115, 1, Lucie, Lowe, ohintz@example.org, 142-311-6503x206), (116, 0, Dagmar, Erdman, wrau@example.com, 345-656-5571), CREATE TABLE `Customers` ( customer_id INTEGER, customer_type_code VARCHAR(20), address_line_1 VARCHAR(80), address_line_2 VARCHAR(80), town_city VARCHAR(80), state VARCHAR(80), email_address VARCHAR(255), phone_number VARCHAR(80) ); Sample rows from `Customers`: (113, Good Credit Rating, 144 Legros Landing, Apt. 551, Maryamport, Kansas, hsteuber@example.org, 06963347450), (114, Good Credit Rating, 039 Jedidiah Estate Suite 537, Apt. 245, Sauerberg, Hawaii, cayla.satterfield@example.net, 470-803-0244), (115, Good Credit Rating, 92189 Gulgowski Ranch Apt. 683, Apt. 828, Tyreekhaven, Tennessee, vida86@example.com, 997.698.4779x882), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, product_category_code VARCHAR(20), date_product_first_available DATETIME, date_product_discontinued DATETIME, product_name VARCHAR(80), product_description VARCHAR(255), product_price DECIMAL(19,4) ); Sample rows from `Products`: (117, 4, Food, 1988-09-29 17:54:50, 1987-12-20 13:46:16, Chocolate, Handmade chocolate, 2.88), (118, 3, Book, 1974-06-25 12:26:47, 1991-08-20 05:22:31, The Great Gatsby, American novel, 35), (119, 8, Hardware, 1994-12-18 15:13:19, 1997-07-02 18:26:16, Keyboard, Designed for games, 109.99), CREATE TABLE `Complaints` ( complaint_id INTEGER, product_id INTEGER REFERENCES Products(product_id), customer_id INTEGER REFERENCES Customers(customer_id), complaint_outcome_code VARCHAR(20), complaint_status_code VARCHAR(20), complaint_type_code VARCHAR(20), date_complaint_raised DATETIME, date_complaint_closed DATETIME, staff_id INTEGER REFERENCES Staff(staff_id) ); Sample rows from `Complaints`: (1, 117, 120, OK, Closed, Product Failure, 2002-07-18 10:59:35, 1976-04-19 11:03:06, 114), (2, 118, 113, OK, New, Product Unusable, 1973-02-10 22:55:56, 2013-09-14 02:59:10, 120), (3, 119, 114, OK, New, Product Unusable, 2006-10-29 07:08:46, 1995-09-11 14:48:46, 115), ",
        "output": "SELECT t1.first_name FROM staff as t1 JOIN complaints as t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY COUNT(*) LIMIT 5"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the first name of students enrolled in class ACCT-211 and got grade C? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELEcT t3.stu_fname FROM class as t1 JOIN enroll as t2 ON t1.class_code  =  t2.class_code JOIN student as t3 ON t2.stu_num  =  t3.stu_num WHERE t1.crs_code  =  'AccT-211' AND t2.enroll_grade  =  'c'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length. ###filtered_database_schema: CREATE TABLE `architect` ( id TEXT PRIMARY KEY, name TEXT, nationality TEXT, gender TEXT ); Sample rows from `architect`: (1, Frank Lloyd Wright, American, male), (2, Frank Gehry, Canadian, male), (3, Zaha Hadid, Iraqi, British, female), CREATE TABLE `bridge` ( architect_id INT REFERENCES architect(id), id INT PRIMARY KEY, name TEXT, location TEXT, length_meters REAL, length_feet REAL ); Sample rows from `bridge`: (1, 1, Xian Ren Qiao (Fairy Bridge), Guangxi , China, 121.0, 400.0), (2, 2, Landscape Arch, Arches National Park , Utah , USA, 88.0, 290.0), (3, 3, Kolob Arch, Zion National Park , Utah , USA, 87.0, 287.0), CREATE TABLE `mill` ( architect_id INT REFERENCES architect(id), id INT PRIMARY KEY, location TEXT, name TEXT, type TEXT, built_year INT, notes TEXT ); Sample rows from `mill`: (1, 1, Coswarem, Le Vieux Molen, Grondzeiler, 1840, Molenechos (Dutch)), (1, 2, Donceel, Moulin Bertrand, Grondzeiler, 1890, Molenechos (Dutch)), (2, 3, Fexhe-le-haut-Clocher, Moulin de Fexhe, Grondzeiler, 1843, Molenechos (Dutch)), ",
        "output": "SELECT t1.name FROM bridge as t1 JOIN architect as t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the population of the largest state ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT population FROM state WHERE area  =  ( SELECT MAX(area) FROM state );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the budget type code and description and the corresponding document id. ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (BK, Book, excellent), (CV, CV, excellent), (PT, Presentation, very good), CREATE TABLE `Ref_Budget_Codes` ( Budget_Type_Code CHAR(15) PRIMARY KEY, Budget_Type_Description VARCHAR(255) ); Sample rows from `Ref_Budget_Codes`: (GV, Government), (ORG, Organisation), (SF, Self founded), CREATE TABLE `Projects` ( Project_ID INTEGER, Project_Details VARCHAR(255) ); Sample rows from `Projects`: (30, Society Research project), (35, Internet of Things project), (105, Graph Database project), CREATE TABLE `Documents` ( Document_ID INTEGER, Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Project_ID INTEGER REFERENCES Projects(Project_ID), Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Documents`: (29, CV, 30, 2004-08-28 06:59:19, Review on UK files, None, None), (42, BK, 105, 2012-12-27 19:09:18, Review on Canadian files, None, None), (57, CV, 195, 1980-10-22 14:17:11, Review on French files, None, None), CREATE TABLE `Statements` ( Statement_ID INTEGER REFERENCES Documents(Document_ID), Statement_Details VARCHAR(255) ); Sample rows from `Statements`: (57, Open Project), (192, Private Project), CREATE TABLE `Documents_with_Expenses` ( Document_ID INTEGER REFERENCES Documents(Document_ID), Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code), Document_Details VARCHAR(255) ); Sample rows from `Documents_with_Expenses`: (57, GV, government), (192, GV, government), (226, GV, government), CREATE TABLE `Accounts` ( Account_ID INTEGER, Statement_ID INTEGER REFERENCES Statements(Statement_ID), Account_Details VARCHAR(255) ); Sample rows from `Accounts`: (7, 57, 495.063), (61, 57, 930.14), (98, 57, 6035.84), ",
        "output": "SELECT t2.budget_type_code ,  t2.budget_type_description ,  t1.document_id FROM documents_with_expenses as t1 JOIN ref_budget_codes as t2 ON t1.budget_type_code  =  t2.budget_type_code"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of the companies whose headquarters are not located in \"USA\". ###filtered_database_schema: CREATE TABLE `buildings` ( id INT PRIMARY KEY, name TEXT, City TEXT, Height INT, Stories INT, Status TEXT ); Sample rows from `buildings`: (1, Torre KOI, Monterrey, 220, 67, under construction), (2, Torre Mitikah, Mexico City, 210, 60, under construction), (3, Punto Chapultepec, Mexico City, 210, 59, proposed), CREATE TABLE `Companies` ( id INT PRIMARY KEY, name TEXT, Headquarters TEXT, Industry TEXT, Sales_billion REAL, Profits_billion REAL, Assets_billion REAL, Market_Value_billion TEXT ); Sample rows from `Companies`: (1, JPMorgan Chase, USA, Banking, 115.5, 17.4, 2117.6, 182.2), (2, HSBC, UK, Banking, 103.3, 13.3, 2467.9, 186.5), (3, General Electric, USA, Conglomerate, 156.2, 11.6, 751.2, 216.2), CREATE TABLE `Office_locations` ( building_id INT PRIMARY KEY REFERENCES buildings(id), company_id INT PRIMARY KEY REFERENCES Companies(id), move_in_year INT ); Sample rows from `Office_locations`: (1, 1, 2021), (2, 2, 2022), (3, 4, 2023), ",
        "output": "SELECT name FROM companies WHERE headquarters != 'USA'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which counties have two or more delegates? Give me the county names. ###filtered_database_schema: CREATE TABLE `county` ( County_Id INT PRIMARY KEY, County_name TEXT, Population REAL, Zip_code TEXT ); Sample rows from `county`: (1, Howard, 21000.0, D21), (2, Baltimore County, 90000.0, D08), (3, Colony, 79000.0, D02), CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Year REAL, Party TEXT, Governor TEXT, Lieutenant_Governor TEXT, Comptroller TEXT, Attorney_General TEXT, US_Senate TEXT ); Sample rows from `party`: (1, 1998.0, Democratic, Peter Vallone, Sandra Frankel, Carl McCall, Eliot Spitzer, Charles Schumer), (2, 1998.0, Liberal, Betsy McCaughey Ross, Jonathan Reiter, Carl McCall, Eliot Spitzer, Charles Schumer), (3, 2002.0, Democratic, Carl McCall, Dennis Mehiel, Alan Hevesi, Eliot Spitzer, (no election)), CREATE TABLE `election` ( Election_ID INT PRIMARY KEY, Counties_Represented TEXT, District INT REFERENCES county(County_Id), Delegate TEXT, Party INT REFERENCES party(Party_ID), First_Elected REAL, Committee TEXT ); Sample rows from `election`: (1, 09.1 9A, 1, Bates, Gail H. Gail H. Bates, 1, 2002.0, Appropriations), (2, 09.1 9A, 1, Miller, Warren E. Warren E. Miller, 1, 2003.0, Economic Matters), (3, 12.1 12A, 2, DeBoy, Steven J. Sr. Steven J. DeBoy, Sr., 2, 2002.0, Appropriations), ",
        "output": "SELECT t1.county_name FROM county as t1 JOIN election as t2 ON t1.county_id  =  t2.district GROUP BY t1.county_id HAVING COUNT(*)  >=  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For each zip code, return the average mean temperature of August there. ###filtered_database_schema: CREATE TABLE `station` ( id INTEGER, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT ); Sample rows from `station`: (2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013), (3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013), (4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013), CREATE TABLE `status` ( station_id INTEGER REFERENCES station(id), bikes_available INTEGER, docks_available INTEGER, time TEXT ); Sample rows from `status`: (3, 12, 3, 2015-06-02 12:46:02), (3, 12, 3, 2015-06-02 12:47:02), (3, 12, 3, 2015-06-02 12:48:02), CREATE TABLE `trip` ( id INTEGER, duration INTEGER, start_date TEXT, start_station_name TEXT, start_station_id INTEGER, end_date TEXT, end_station_name TEXT, end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER ); Sample rows from `trip`: (900504, 384, 8/21/2015 17:03, Howard at 2nd, 63, 8/21/2015 17:10, San Francisco Caltrain 2 (330 Townsend), 69, 454, Subscriber, 94041), (900505, 588, 8/21/2015 17:03, South Van Ness at Market, 66, 8/21/2015 17:13, San Francisco Caltrain 2 (330 Townsend), 69, 574, Subscriber, 95119), (900506, 196, 8/21/2015 17:04, Market at Sansome, 77, 8/21/2015 17:07, Harry Bridges Plaza (Ferry Building), 50, 636, Subscriber, 94925), CREATE TABLE `weather` ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER ); Sample rows from `weather`: (8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107), (8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107), (8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107), ",
        "output": "SELECT zip_code  ,  AVG(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List all the businesses with more than 4.5 stars ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT name FROM business WHERE rating  >  4.5;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many types of products have Rodrick Heaney bought in total? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_content VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), other_address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 9443 Boyle Route Suite 857, Lucasville, 416, Colorado, USA, None), (2, 1969 Jabari Port Suite 393, New Sabryna, 721, SouthCarolina, USA, None), (3, 295 Hackett Curve, Reingertown, 255, NewJersey, USA, None), CREATE TABLE `Products` ( product_id INTEGER, product_details VARCHAR(255) ); Sample rows from `Products`: (1, Americano), (2, Dove Chocolate), (3, Latte), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method VARCHAR(15), customer_name VARCHAR(80), date_became_customer DATETIME, other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Cash, Dr. Julia Wuckert MD, 2018-03-01 23:20:10, None), (2, Cheque, Tillman Ernser, 2018-02-28 11:37:44, None), (3, Credit Card, Rodrick Heaney, 2018-03-09 17:41:58, None), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_address_from DATETIME, address_type VARCHAR(15), date_address_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 11, 1985-03-29 20:31:43, Billing, 1993-02-17 17:55:18), (13, 11, 2010-08-25 04:24:35, Billing, 1972-02-17 22:23:38), (2, 14, 2010-12-26 08:52:50, Residential, 1979-07-16 18:22:39), CREATE TABLE `Customer_Contact_Channels` ( customer_id INTEGER REFERENCES Customers(customer_id), channel_code VARCHAR(15), active_from_date DATETIME, active_to_date DATETIME, contact_number VARCHAR(50) ); Sample rows from `Customer_Contact_Channels`: (9, Email, 2017-12-07 18:18:15, 2018-03-23 13:37:14, 940.035.6435x0225), (2, Email, 2017-04-07 04:51:41, 2018-03-23 01:30:52, 189.449.8326x7607), (9, Email, 2017-05-25 16:08:45, 2018-03-13 07:32:25, 958-653-2640), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(15), order_date DATETIME, order_details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 15, Cancelled, 2018-03-21 11:20:46, None), (2, 3, Cancelled, 2018-03-05 06:35:33, None), (3, 5, Delivered, 2018-03-04 07:16:22, Second time), CREATE TABLE `Order_Items` ( order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), order_quantity VARCHAR(15) ); Sample rows from `Order_Items`: (14, 2, 5), (5, 2, 9), (14, 3, 2), ",
        "output": "SELECT COUNT(DISTINCT t3.product_id) FROM customers as t1 JOIN customer_orders as t2 ON t1.customer_id  =  t2.customer_id JOIN order_items as t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of companies whose revenue is greater than the average revenue of all companies. ###filtered_database_schema: CREATE TABLE `Manufacturers` ( Code INTEGER, Name VARCHAR(255), Headquarter VARCHAR(255), Founder VARCHAR(255), Revenue REAL ); Sample rows from `Manufacturers`: (1, Sony, Tokyo, Andy, 120.0), (2, Creative Labs, Austin, Owen, 100.0), (3, Hewlett-Packard, Los Angeles, James, 50.0), CREATE TABLE `Products` ( Code INTEGER, Name VARCHAR(255), Price DECIMAL, Manufacturer INTEGER REFERENCES Manufacturers(Code) ); Sample rows from `Products`: (1, Hard drive, 240, 5), (2, Memory, 120, 6), (3, ZIP drive, 150, 4), ",
        "output": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT AVG(revenue) FROM manufacturers)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the statement detail and the corresponding document name for the statement with detail 'Private Project'. ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (BK, Book, excellent), (CV, CV, excellent), (PT, Presentation, very good), CREATE TABLE `Ref_Budget_Codes` ( Budget_Type_Code CHAR(15) PRIMARY KEY, Budget_Type_Description VARCHAR(255) ); Sample rows from `Ref_Budget_Codes`: (GV, Government), (ORG, Organisation), (SF, Self founded), CREATE TABLE `Projects` ( Project_ID INTEGER, Project_Details VARCHAR(255) ); Sample rows from `Projects`: (30, Society Research project), (35, Internet of Things project), (105, Graph Database project), CREATE TABLE `Documents` ( Document_ID INTEGER, Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Project_ID INTEGER REFERENCES Projects(Project_ID), Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Documents`: (29, CV, 30, 2004-08-28 06:59:19, Review on UK files, None, None), (42, BK, 105, 2012-12-27 19:09:18, Review on Canadian files, None, None), (57, CV, 195, 1980-10-22 14:17:11, Review on French files, None, None), CREATE TABLE `Statements` ( Statement_ID INTEGER REFERENCES Documents(Document_ID), Statement_Details VARCHAR(255) ); Sample rows from `Statements`: (57, Open Project), (192, Private Project), CREATE TABLE `Documents_with_Expenses` ( Document_ID INTEGER REFERENCES Documents(Document_ID), Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code), Document_Details VARCHAR(255) ); Sample rows from `Documents_with_Expenses`: (57, GV, government), (192, GV, government), (226, GV, government), CREATE TABLE `Accounts` ( Account_ID INTEGER, Statement_ID INTEGER REFERENCES Statements(Statement_ID), Account_Details VARCHAR(255) ); Sample rows from `Accounts`: (7, 57, 495.063), (61, 57, 930.14), (98, 57, 6035.84), ",
        "output": "SELECT t1.statement_details ,  t2.document_name FROM statements as t1 JOIN documents as t2 ON t1.statement_id  =  t2.document_id WHERE t1.statement_details  =  'Private Project'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many parties are there? ###filtered_database_schema: CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Party_Theme TEXT, Location TEXT, First_year TEXT, Last_year TEXT, Number_of_hosts INT ); Sample rows from `party`: (1, Spring, Hemkade 48 Zaandam, 2000, 2001, 5), (2, Club Q-BASE, Hemkade 48 Zaandam, 2002, 2002, 23), (3, Hardcore Resurrection, Various locations, 2000, 2003, 4), CREATE TABLE `host` ( Host_ID INT PRIMARY KEY, Name TEXT, Nationality TEXT, Age TEXT ); Sample rows from `host`: (1, Austin Daye, United States, 43), (2, Lloyd Daniels, United States, 37), (3, Kornel David, Hungary, 31), CREATE TABLE `party_host` ( Party_ID INT PRIMARY KEY REFERENCES party(Party_ID), Host_ID INT PRIMARY KEY REFERENCES host(Host_ID), Is_Main_in_Charge bool ); Sample rows from `party_host`: (1, 1, T), (8, 7, T), (6, 10, F), ",
        "output": "SELECT COUNT(*) FROM party"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the season, the player, and the name of the country that player belongs to. ###filtered_database_schema: CREATE TABLE `country` ( Country_id INT PRIMARY KEY, Country_name TEXT, Capital TEXT, Official_native_language TEXT ); Sample rows from `country`: (1, Indonesia, Jakarta, Bahasa Indonesia), (2, Iran, Tehran, Persian ( Arabic script )), (3, Iraq, Baghdad, Arabic ( Arabic script ) Kurdish), CREATE TABLE `team` ( Team_id INT PRIMARY KEY, Name TEXT ); Sample rows from `team`: (1, Columbus Crew), (2, Evalyn Feil), (3, Anais VonRueden), CREATE TABLE `match_season` ( Season REAL PRIMARY KEY, Player TEXT, Position TEXT, Country INT REFERENCES country(Country_id), Team INT REFERENCES team(Team_id), Draft_Pick_Number INT, Draft_Class TEXT, College TEXT ); Sample rows from `match_season`: (1996.0, Steve Ralston Category:Articles with hCards, Midfielder, 6, 1, 18, 1996 MLS College Draft, Florida International), (1997.0, Mike Duhaney Category:Articles with hCards, Defender, 6, 2, 87, 1996 MLS Inaugural Player Draft, UNLV), (1998.0, Ben Olsen Category:Articles with hCards, Midfielder, 4, 3, 2, Project-40, Virginia), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Years_Played TEXT, Total_WL TEXT, Singles_WL TEXT, Doubles_WL TEXT, Team INT REFERENCES team(Team_id) ); Sample rows from `player`: (1, Cho Soong-Jae (630), 1 (2011), 2–0, 1–0, 1–0, 1), (2, Chung Hong (717), 1 (2011), 0–0, 0–0, 0–0, 1), (3, Im Kyu-tae (492), 8 (2003–2005, 2007–2011), 6–9, 5–7, 1–2, 1), ",
        "output": "SELECT t2.season ,  t2.player ,  t1.country_name FROM country as t1 JOIN match_season as t2 ON t1.country_id  =  t2.country"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many rooms does the Lamberton building have? ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT COUNT(*) FROM classroom WHERE building  =  'Lamberton'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of teams that do no have match season record? ###filtered_database_schema: CREATE TABLE `country` ( Country_id INT PRIMARY KEY, Country_name TEXT, Capital TEXT, Official_native_language TEXT ); Sample rows from `country`: (1, Indonesia, Jakarta, Bahasa Indonesia), (2, Iran, Tehran, Persian ( Arabic script )), (3, Iraq, Baghdad, Arabic ( Arabic script ) Kurdish), CREATE TABLE `team` ( Team_id INT PRIMARY KEY, Name TEXT ); Sample rows from `team`: (1, Columbus Crew), (2, Evalyn Feil), (3, Anais VonRueden), CREATE TABLE `match_season` ( Season REAL PRIMARY KEY, Player TEXT, Position TEXT, Country INT REFERENCES country(Country_id), Team INT REFERENCES team(Team_id), Draft_Pick_Number INT, Draft_Class TEXT, College TEXT ); Sample rows from `match_season`: (1996.0, Steve Ralston Category:Articles with hCards, Midfielder, 6, 1, 18, 1996 MLS College Draft, Florida International), (1997.0, Mike Duhaney Category:Articles with hCards, Defender, 6, 2, 87, 1996 MLS Inaugural Player Draft, UNLV), (1998.0, Ben Olsen Category:Articles with hCards, Midfielder, 4, 3, 2, Project-40, Virginia), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Years_Played TEXT, Total_WL TEXT, Singles_WL TEXT, Doubles_WL TEXT, Team INT REFERENCES team(Team_id) ); Sample rows from `player`: (1, Cho Soong-Jae (630), 1 (2011), 2–0, 1–0, 1–0, 1), (2, Chung Hong (717), 1 (2011), 0–0, 0–0, 0–0, 1), (3, Im Kyu-tae (492), 8 (2003–2005, 2007–2011), 6–9, 5–7, 1–2, 1), ",
        "output": "SELECT name FROM team WHERE team_id NOT IN (SELECT team FROM match_season)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: keyphrases Christof Dallermassl used in papers written last year ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t2.keyphraseid FROM paper as t3 JOIN paperkeyphrase as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names. ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_name VARCHAR(40) ); Sample rows from `Customers`: (194, America Jaskolski), (214, Ellsworth Paucek), (256, Mrs. Hanna Willms), CREATE TABLE `Services` ( Service_ID INTEGER, Service_name VARCHAR(40) ); Sample rows from `Services`: (1, New policy application), (4, Close a policy), (6, Change a policy), CREATE TABLE `Available_Policies` ( Policy_ID INTEGER PRIMARY KEY, policy_type_code CHAR(15), Customer_Phone VARCHAR(255) ); Sample rows from `Available_Policies`: (246, Life Insurance, +16(2)5838999222), (257, Property Insurance, 242.763.9214), (300, Property Insurance, 1-416-503-7735x94204), CREATE TABLE `Customers_Policies` ( Customer_ID INTEGER PRIMARY KEY REFERENCES Customers(Customer_ID), Policy_ID INTEGER PRIMARY KEY REFERENCES Available_Policies(Policy_ID), Date_Opened DATE, Date_Closed DATE ); Sample rows from `Customers_Policies`: (214, 257, 2016-11-19, 2018-03-04), (214, 301, 2016-04-12, 2018-02-07), (256, 583, 2016-07-22, 2018-02-20), CREATE TABLE `First_Notification_of_Loss` ( FNOL_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers_Policies(Customer_ID), Policy_ID INTEGER REFERENCES Customers_Policies(Policy_ID), Service_ID INTEGER REFERENCES Services(Service_ID) ); Sample rows from `First_Notification_of_Loss`: (532, 214, 257, 6), (1611, 996, 993, 9), (1722, 996, 879, 6), CREATE TABLE `Claims` ( Claim_ID INTEGER PRIMARY KEY, FNOL_ID INTEGER REFERENCES First_Notification_of_Loss(FNOL_ID), Effective_Date DATE ); Sample rows from `Claims`: (134, 1722, 1973-08-18), (145, 1611, 2014-10-19), (228, 532, 1975-05-07), CREATE TABLE `Settlements` ( Settlement_ID INTEGER PRIMARY KEY, Claim_ID INTEGER REFERENCES Claims(Claim_ID), Effective_Date DATE, Settlement_Amount REAL ); Sample rows from `Settlements`: (161, 717, 2009-11-20, 6451.65), (176, 641, 1971-06-29, 1588.45), (205, 604, 1978-09-09, 9814.39), ",
        "output": "SELECT t1.customer_name FROM customers as t1 JOIN first_notification_of_loss as t2 ON t1.customer_id  =  t2.customer_id JOIN services as t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the combined population of all 50 states ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT SUM(population) FROM state;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: give me a good place in the yosemite and mono lake area for french food ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: how long is the longest river in texas ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT length FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the first name and last name employee helps the customer with first name Leonie? ###filtered_database_schema: CREATE TABLE `Album` ( AlbumId INTEGER, Title varchar(160), ArtistId INTEGER PRIMARY KEY REFERENCES Artist(ArtistId) ); Sample rows from `Album`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `Artist` ( ArtistId INTEGER, Name varchar(120) ); Sample rows from `Artist`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `Customer` ( CustomerId INTEGER, FirstName varchar(40), LastName varchar(20), Company varchar(80), Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60), SupportRepId INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId) ); Sample rows from `Customer`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `Employee` ( EmployeeId INTEGER, LastName varchar(20), FirstName varchar(20), Title varchar(30), ReportsTo INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId), BirthDate datetime, HireDate datetime, Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60) ); Sample rows from `Employee`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `Genre` ( GenreId INTEGER, Name varchar(120) ); Sample rows from `Genre`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `Invoice` ( InvoiceId INTEGER, CustomerId INTEGER PRIMARY KEY REFERENCES Customer(CustomerId), InvoiceDate datetime, BillingAddress varchar(70), BillingCity varchar(40), BillingState varchar(40), BillingCountry varchar(40), BillingPostalCode varchar(10), Total decimal(10,2) ); Sample rows from `Invoice`: (1, 2, 2009-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2009-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2009-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `InvoiceLine` ( InvoiceLineId INTEGER, InvoiceId INTEGER PRIMARY KEY REFERENCES Invoice(InvoiceId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId), UnitPrice decimal(10,2), Quantity INTEGER ); Sample rows from `InvoiceLine`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `MediaType` ( MediaTypeId INTEGER, Name varchar(120) ); Sample rows from `MediaType`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `Playlist` ( PlaylistId INTEGER, Name varchar(120) ); Sample rows from `Playlist`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `PlaylistTrack` ( PlaylistId INTEGER PRIMARY KEY REFERENCES Playlist(PlaylistId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId) ); Sample rows from `PlaylistTrack`: (1, 1), (8, 1), (17, 1), CREATE TABLE `Track` ( TrackId INTEGER, Name varchar(200), AlbumId INTEGER PRIMARY KEY REFERENCES Album(AlbumId), MediaTypeId INTEGER PRIMARY KEY REFERENCES MediaType(MediaTypeId), GenreId INTEGER PRIMARY KEY REFERENCES Genre(GenreId), Composer varchar(220), Milliseconds INTEGER, Bytes INTEGER, UnitPrice decimal(10,2) ); Sample rows from `Track`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), ",
        "output": "SELECT t2.firstname ,  t2.lastname FROM customer as t1 JOIN employee as t2 ON t1.supportrepid  =  t2.employeeid WHERE t1.firstname  =  \"Leonie\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which teachers teach in classroom 110? Give me their first names. ###filtered_database_schema: CREATE TABLE `list` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Grade INTEGER, Classroom INTEGER ); Sample rows from `list`: (CAR, MAUDE, 2, 101), (KRISTENSEN, STORMY, 6, 112), (VANDERWOUDE, SHERWOOD, 3, 107), CREATE TABLE `teachers` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Classroom INTEGER ); Sample rows from `teachers`: (MACROSTIE, MIN, 101), (COVIN, JEROME, 102), (MOYER, OTHA, 103), ",
        "output": "SELECT firstname FROM teachers WHERE classroom  =  110"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many businesses are there in the \" Stone Meadows \" neighbourhood in Madison ? ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT COUNT(DISTINCT t1.name) FROM neighbourhood as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.neighbourhood_name  =  \"Stone Meadows\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: how many papers has Christopher D. Manning written ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the name of colleges that have at least two players. ###filtered_database_schema: CREATE TABLE `country` ( Country_id INT PRIMARY KEY, Country_name TEXT, Capital TEXT, Official_native_language TEXT ); Sample rows from `country`: (1, Indonesia, Jakarta, Bahasa Indonesia), (2, Iran, Tehran, Persian ( Arabic script )), (3, Iraq, Baghdad, Arabic ( Arabic script ) Kurdish), CREATE TABLE `team` ( Team_id INT PRIMARY KEY, Name TEXT ); Sample rows from `team`: (1, Columbus Crew), (2, Evalyn Feil), (3, Anais VonRueden), CREATE TABLE `match_season` ( Season REAL PRIMARY KEY, Player TEXT, Position TEXT, Country INT REFERENCES country(Country_id), Team INT REFERENCES team(Team_id), Draft_Pick_Number INT, Draft_Class TEXT, College TEXT ); Sample rows from `match_season`: (1996.0, Steve Ralston Category:Articles with hCards, Midfielder, 6, 1, 18, 1996 MLS College Draft, Florida International), (1997.0, Mike Duhaney Category:Articles with hCards, Defender, 6, 2, 87, 1996 MLS Inaugural Player Draft, UNLV), (1998.0, Ben Olsen Category:Articles with hCards, Midfielder, 4, 3, 2, Project-40, Virginia), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Years_Played TEXT, Total_WL TEXT, Singles_WL TEXT, Doubles_WL TEXT, Team INT REFERENCES team(Team_id) ); Sample rows from `player`: (1, Cho Soong-Jae (630), 1 (2011), 2–0, 1–0, 1–0, 1), (2, Chung Hong (717), 1 (2011), 0–0, 0–0, 0–0, 1), (3, Im Kyu-tae (492), 8 (2003–2005, 2007–2011), 6–9, 5–7, 1–2, 1), ",
        "output": "SELECT college FROM match_season GROUP BY college HAVING COUNT(*)  >=  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show institution names along with the number of proteins for each institution. ###filtered_database_schema: CREATE TABLE `building` ( building_id TEXT PRIMARY KEY, Name TEXT, Street_address TEXT, Years_as_tallest TEXT, Height_feet INT, Floors INT ); Sample rows from `building`: (0, Citizens Bank Building, 701 North Franklin Street, 1913–1915, 145, 12), (1, Tampa City Hall, 315 John F. Kennedy Boulevard, 1915–1926, 160, 10), (2, Floridan Hotel, 905 Franklin Street, 1926–1966, 204, 17), CREATE TABLE `Institution` ( Institution_id TEXT PRIMARY KEY, Institution TEXT, Location TEXT, Founded REAL, Type TEXT, Enrollment INT, Team TEXT, Primary_Conference TEXT, building_id TEXT REFERENCES building(building_id) ); Sample rows from `Institution`: (0, Ave Maria University, Ave Maria, Florida, 1998.0, Private, 1200, Gyrenes, The Sun, 1), (1, Dakota State University, Madison, South Dakota, 1881.0, Public, 3102, Trojans, none, 1), (2, Edward Waters College, Jacksonville, Florida, 1866.0, Private, 800, Tigers, Gulf Coast (GCAC), 3), CREATE TABLE `protein` ( common_name TEXT PRIMARY KEY, protein_name TEXT, divergence_from_human_lineage REAL, accession_number TEXT, sequence_length REAL, sequence_identity_to_human_protein TEXT, Institution_id TEXT REFERENCES Institution(Institution_id) ); Sample rows from `protein`: (Tropical Clawed Frog, uncharacterized protein C20orf117-like, 371.2, XP_002942331.1, 1584.0, 39%, 1), (purple sea urchin, uncharacterized protein LOC578090, 742.9, XP_783370.2, 1587.0, 47%, 3), (body louse, Centromeric protein E, putative, 782.7, XP_002429877.1, 2086.0, 30%, 5), ",
        "output": "SELECT t1.institution ,  COUNT(*) FROM institution as t1 JOIN protein as t2 ON t1.institution_id  =  t2.institution_id GROUP BY t1.institution_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the location of the festival with the largest number of audience? ###filtered_database_schema: CREATE TABLE `festival_detail` ( Festival_ID INT PRIMARY KEY, Festival_Name TEXT, Chair_Name TEXT, Location TEXT, Year INT, Num_of_Audience INT ); Sample rows from `festival_detail`: (1, Panasonic Awards, Raymond Floyd, United States, 2006, 152), (2, Flower Awards, Charles Coody, United States, 2007, 155), (3, Cherry Awards, Doug Ford, United States, 2007, 160), CREATE TABLE `artwork` ( Artwork_ID INT PRIMARY KEY, Type TEXT, Name TEXT ); Sample rows from `artwork`: (1, Program Music/Variety Show, Indonesian Idol), (2, Program Music/Variety Show, I Know), (3, Presenter Music/Variety Show, Loving you), CREATE TABLE `nomination` ( Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID), Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID), Result TEXT ); Sample rows from `nomination`: (1, 2, Nominated), (2, 2, Won), (3, 1, Nominated), ",
        "output": "SELECT location FROM festival_detail ORDER BY num_of_audience DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the titles and average ratings for all movies that have the lowest average rating? ###filtered_database_schema: CREATE TABLE `Movie` ( mID INT PRIMARY KEY, title TEXT, year INT, director TEXT ); Sample rows from `Movie`: (101, Gone with the Wind, 1939, Victor Fleming), (102, Star Wars, 1977, George Lucas), (103, The Sound of Music, 1965, Robert Wise), CREATE TABLE `Reviewer` ( rID INT PRIMARY KEY, name TEXT ); Sample rows from `Reviewer`: (201, Sarah Martinez), (202, Daniel Lewis), (203, Brittany Harris), CREATE TABLE `Rating` ( rID INT REFERENCES Reviewer(rID), mID INT REFERENCES Movie(mID), stars INT, ratingDate date ); Sample rows from `Rating`: (201, 101, 2, 2011-01-22), (201, 101, 4, 2011-01-27), (202, 106, 4, None), ",
        "output": "SELECT t2.title ,  AVG(t1.stars) FROM rating as t1 JOIN movie as t2 ON t1.mid  =  t2.mid GROUP BY t1.mid ORDER BY AVG(t1.stars) LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Give me a list of the names of all songs ordered by their resolution. ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT song_name FROM song ORDER BY resolution"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type? ###filtered_database_schema: CREATE TABLE `basketball_match` ( Team_ID INT PRIMARY KEY, School_ID INT REFERENCES university(School_ID), Team_Name TEXT, ACC_Regular_Season TEXT, ACC_Percent TEXT, ACC_Home TEXT, ACC_Road TEXT, All_Games TEXT, All_Games_Percent INT, All_Home TEXT, All_Road TEXT, All_Neutral TEXT ); Sample rows from `basketball_match`: (1, 1, North Carolina, 14–2, .875, 6–2, 8–0, 35–2, 0.946, 14–2, 13–0, 9–1), (2, 2, Duke, 13–3, .813, 7–1, 6–2, 28–6, 0.824, 15–1, 8–2, 5–3), (3, 4, Clemson, 10–6, .625, 7–1, 3–5, 24–10, 0.706, 14–2, 6–5, 4–3), CREATE TABLE `university` ( School_ID INT PRIMARY KEY, School TEXT, Location TEXT, Founded REAL, Affiliation TEXT, Enrollment REAL, Nickname TEXT, Primary_conference TEXT ); Sample rows from `university`: (1, University of Delaware, Newark, DE, 1743.0, Public, 19067.0, Fightin' Blue Hens, Colonial Athletic Association ( D-I )), (2, Lebanon Valley College, Annville, PA, 1866.0, Private/Methodist, 2100.0, Flying Dutchmen, MAC Commonwealth Conference ( D-III )), (3, University of Rhode Island, Kingston, RI, 1892.0, Public, 19095.0, Rams, Atlantic 10 Conference ( D-I )), ",
        "output": "SELECT SUM(enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find all the female actors from Austin ###filtered_database_schema: CREATE TABLE `actor` ( aid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `copyright` ( id INT PRIMARY KEY, msid INT, cid INT ); CREATE TABLE `cast` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), aid INT REFERENCES actor(aid), role INT ); CREATE TABLE `genre` ( gid INT PRIMARY KEY, genre TEXT ); CREATE TABLE `classification` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), gid INT REFERENCES genre(gid) ); CREATE TABLE `company` ( id INT PRIMARY KEY, name TEXT, country_code TEXT ); CREATE TABLE `director` ( did INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `producer` ( pid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `directed_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), did INT REFERENCES director(did) ); CREATE TABLE `keyword` ( id INT PRIMARY KEY, keyword TEXT ); CREATE TABLE `made_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), pid INT REFERENCES producer(pid) ); CREATE TABLE `movie` ( mid INT PRIMARY KEY, title TEXT, release_year INT, title_aka TEXT, budget TEXT ); CREATE TABLE `tags` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), kid INT REFERENCES keyword(kid) ); CREATE TABLE `tv_series` ( sid INT PRIMARY KEY, title TEXT, release_year INT, num_of_seasons INT, num_of_episodes INT, title_aka TEXT, budget TEXT ); CREATE TABLE `writer` ( wid INT PRIMARY KEY, gender TEXT, name INT, nationality INT, num_of_episodes INT, birth_city TEXT, birth_year INT ); CREATE TABLE `written_by` ( id INT, msid INT REFERENCES copyright(msid), wid INT REFERENCES writer(wid) ); ",
        "output": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND gender  =  \"female\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the average unit price of tracks from the Rock genre. ###filtered_database_schema: CREATE TABLE `Album` ( AlbumId INTEGER, Title varchar(160), ArtistId INTEGER PRIMARY KEY REFERENCES Artist(ArtistId) ); Sample rows from `Album`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `Artist` ( ArtistId INTEGER, Name varchar(120) ); Sample rows from `Artist`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `Customer` ( CustomerId INTEGER, FirstName varchar(40), LastName varchar(20), Company varchar(80), Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60), SupportRepId INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId) ); Sample rows from `Customer`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `Employee` ( EmployeeId INTEGER, LastName varchar(20), FirstName varchar(20), Title varchar(30), ReportsTo INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId), BirthDate datetime, HireDate datetime, Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60) ); Sample rows from `Employee`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `Genre` ( GenreId INTEGER, Name varchar(120) ); Sample rows from `Genre`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `Invoice` ( InvoiceId INTEGER, CustomerId INTEGER PRIMARY KEY REFERENCES Customer(CustomerId), InvoiceDate datetime, BillingAddress varchar(70), BillingCity varchar(40), BillingState varchar(40), BillingCountry varchar(40), BillingPostalCode varchar(10), Total decimal(10,2) ); Sample rows from `Invoice`: (1, 2, 2009-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2009-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2009-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `InvoiceLine` ( InvoiceLineId INTEGER, InvoiceId INTEGER PRIMARY KEY REFERENCES Invoice(InvoiceId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId), UnitPrice decimal(10,2), Quantity INTEGER ); Sample rows from `InvoiceLine`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `MediaType` ( MediaTypeId INTEGER, Name varchar(120) ); Sample rows from `MediaType`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `Playlist` ( PlaylistId INTEGER, Name varchar(120) ); Sample rows from `Playlist`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `PlaylistTrack` ( PlaylistId INTEGER PRIMARY KEY REFERENCES Playlist(PlaylistId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId) ); Sample rows from `PlaylistTrack`: (1, 1), (8, 1), (17, 1), CREATE TABLE `Track` ( TrackId INTEGER, Name varchar(200), AlbumId INTEGER PRIMARY KEY REFERENCES Album(AlbumId), MediaTypeId INTEGER PRIMARY KEY REFERENCES MediaType(MediaTypeId), GenreId INTEGER PRIMARY KEY REFERENCES Genre(GenreId), Composer varchar(220), Milliseconds INTEGER, Bytes INTEGER, UnitPrice decimal(10,2) ); Sample rows from `Track`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), ",
        "output": "SELECT AVG(t2.unitprice) FROM genre as t1 JOIN track as t2 ON t1.genreid  =  t2.genreid WHERE t1.name  =  \"Rock\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of wines, sorted in alphabetical order? ###filtered_database_schema: CREATE TABLE `grapes` ( ID INTEGER, Grape TEXT PRIMARY KEY, Color TEXT ); Sample rows from `grapes`: (1, Barbera, Red), (2, Cabernet Franc, Red), (3, Cabernet Sauvingnon, Red), CREATE TABLE `appellations` ( No INTEGER, Appelation TEXT PRIMARY KEY, County TEXT, State TEXT, Area TEXT, isAVA TEXT ); Sample rows from `appellations`: (1, Alexander Valley, Sonoma, California, North Coast, Yes), (2, Amador County, Amador, California, Sierra Foothills, No), (3, Amador-Mendocino-Sonoma Counties, N/A, California, N/A, No), CREATE TABLE `wine` ( No INTEGER, Grape TEXT REFERENCES grapes(Grape), Winery TEXT, Appelation TEXT REFERENCES appellations(Appelation), State TEXT, Name TEXT, Year INTEGER, Price INTEGER, Score INTEGER, Cases INTEGER, Drink TEXT ); Sample rows from `wine`: (1, Zinfandel, Robert Biale, St. Helena, California, Old Kraft Vineyard, 2008, 44, 93, 275, now), (2, Zinfandel, Chiarello Family, Napa Valley, California, Giana, 2008, 35, 93, 480, now), (3, Zinfandel, Robert Biale, Napa Valley, California, Black Chicken, 2008, 40, 91, 2700, 2012), ",
        "output": "SELECT DISTINCT name FROM wine ORDER BY name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the first name and job id for all employees in the Finance department? ###filtered_database_schema: CREATE TABLE `regions` ( REGION_ID decimal(5,0) PRIMARY KEY, REGION_NAME varchar(25) ); Sample rows from `regions`: (1, Europe\\r), (2, Americas\\r), (3, Asia\\r), CREATE TABLE `countries` ( COUNTRY_ID varchar(2) PRIMARY KEY, COUNTRY_NAME varchar(40), REGION_ID decimal(10,0) REFERENCES regions(REGION_ID) ); Sample rows from `countries`: (AR, Argentina, 2), (AU, Australia, 3), (BE, Belgium, 1), CREATE TABLE `departments` ( DEPARTMENT_ID decimal(4,0) PRIMARY KEY, DEPARTMENT_NAME varchar(30), MANAGER_ID decimal(6,0), LOCATION_ID decimal(4,0) ); Sample rows from `departments`: (10, Administration, 200, 1700), (20, Marketing, 201, 1800), (30, Purchasing, 114, 1700), CREATE TABLE `jobs` ( JOB_ID varchar(10) PRIMARY KEY, JOB_TITLE varchar(35), MIN_SALARY decimal(6,0), MAX_SALARY decimal(6,0) ); Sample rows from `jobs`: (AD_PRES, President, 20000, 40000), (AD_VP, Administration Vice President, 15000, 30000), (AD_ASST, Administration Assistant, 3000, 6000), CREATE TABLE `employees` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY, FIRST_NAME varchar(20), LAST_NAME varchar(25), EMAIL varchar(25), PHONE_NUMBER varchar(20), HIRE_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), SALARY decimal(8,2), COMMISSION_PCT decimal(2,2), MANAGER_ID decimal(6,0), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `employees`: (100, Steven, King, SKING, 515.123.4567, 1987-06-17, AD_PRES, 24000, 0, 0, 90), (101, Neena, Kochhar, NKOCHHAR, 515.123.4568, 1987-06-18, AD_VP, 17000, 0, 100, 90), (102, Lex, De Haan, LDEHAAN, 515.123.4569, 1987-06-19, AD_VP, 17000, 0, 100, 90), CREATE TABLE `job_history` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY REFERENCES employees(EMPLOYEE_ID), START_DATE date PRIMARY KEY, END_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `job_history`: (102, 1993-01-13, 1998-07-24, IT_PROG, 60), (101, 1989-09-21, 1993-10-27, AC_ACCOUNT, 110), (101, 1993-10-28, 1997-03-15, AC_MGR, 110), CREATE TABLE `locations` ( LOCATION_ID decimal(4,0) PRIMARY KEY, STREET_ADDRESS varchar(40), POSTAL_CODE varchar(12), CITY varchar(30), STATE_PROVINCE varchar(25), COUNTRY_ID varchar(2) REFERENCES countries(COUNTRY_ID) ); Sample rows from `locations`: (1000, 1297 Via Cola di Rie, 989, Roma, , IT), (1100, 93091 Calle della Testa, 10934, Venice, , IT), (1200, 2017 Shinjuku-ku, 1689, Tokyo, Tokyo Prefecture, JP), ",
        "output": "SELECT t1.first_name ,  t1.job_id FROM employees as t1 JOIN departments as t2 ON t1.department_id  =  t2.department_id WHERE t2.department_name  =  'Finance'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what states does the ohio river run through ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many different cities are they from? ###filtered_database_schema: CREATE TABLE `Person` ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT ); Sample rows from `Person`: (Alice, 25, new york city, female, student), (Bob, 35, salt lake city, male, engineer), (Zach, 45, austin, male, doctor), CREATE TABLE `PersonFriend` ( name varchar(20) REFERENCES Person(name), friend varchar(20) REFERENCES Person(name), year INTEGER ); Sample rows from `PersonFriend`: (Alice, Bob, 10), (Zach, Dan, 12), (Bob, Zach, 5), ",
        "output": "SELECT COUNT(DISTINCT city) FROM person"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the number of keywords in VLDB conference . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT COUNT(DISTINCT t1.keyword) FROM publication_keyword as t4 JOIN keyword as t1 ON t4.kid  =  t1.kid JOIN publication as t3 ON t3.pid  =  t4.pid JOIN conference as t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the complete description of the job of a researcher? ###filtered_database_schema: CREATE TABLE `Document_Types` ( document_type_code VARCHAR(10) PRIMARY KEY, document_description VARCHAR(255) ); Sample rows from `Document_Types`: (APP, Initial Application), (REG, Regular), CREATE TABLE `Documents` ( document_id INTEGER, document_type_code VARCHAR(10) REFERENCES Document_Types(document_type_code), grant_id INTEGER REFERENCES Grants(grant_id), sent_date DATETIME, response_received_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Documents`: (1, APP, 5, 1986-11-30 07:56:35, 1977-12-01 02:18:53, ), (2, APP, 13, 2004-01-23 11:57:08, 1979-12-08 10:38:07, ), (3, REG, 10, 1999-03-03 12:25:58, 1995-09-12 13:13:48, ), CREATE TABLE `Grants` ( grant_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), grant_amount DECIMAL(19,4), grant_start_date DATETIME, grant_end_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Grants`: (1, 10, 4094.542, 2016-11-20 00:18:51, 2004-10-24 09:09:39, et), (2, 3, 281.2446, 1985-10-09 20:08:49, 1985-06-08 00:22:07, occaecati), (3, 14, 4515947.7015, 1970-09-19 22:53:49, 1989-03-16 18:27:16, et), CREATE TABLE `Organisation_Types` ( organisation_type VARCHAR(10) PRIMARY KEY, organisation_type_description VARCHAR(255) ); Sample rows from `Organisation_Types`: (RES, Research), (SPON, Sponsor), CREATE TABLE `Organisations` ( organisation_id INTEGER, organisation_type VARCHAR(10) REFERENCES Organisation_Types(organisation_type), organisation_details VARCHAR(255) ); Sample rows from `Organisations`: (1, RES, et), (2, RES, eius), (3, RES, impedit), CREATE TABLE `Project_Outcomes` ( project_id INTEGER REFERENCES Projects(project_id), outcome_code VARCHAR(10) REFERENCES Research_Outcomes(outcome_code), outcome_details VARCHAR(255) ); Sample rows from `Project_Outcomes`: (4, Paper, None), (3, Patent, None), (9, Paper, None), CREATE TABLE `Project_Staff` ( staff_id DOUBLE PRIMARY KEY, project_id INTEGER REFERENCES Projects(project_id), role_code VARCHAR(10) REFERENCES Staff_Roles(role_code), date_from DATETIME, date_to DATETIME, other_details VARCHAR(255) ); Sample rows from `Project_Staff`: (0.0, 2, leader, 1981-10-04 22:44:50, 1985-05-30 22:26:30, None), (674810.0, 5, leader, 2003-04-19 15:06:20, 2010-12-08 11:55:36, None), (779.0, 2, researcher, 1981-10-09 21:32:53, 2004-12-16 13:03:36, None), CREATE TABLE `Projects` ( project_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), project_details VARCHAR(255) ); Sample rows from `Projects`: (1, 15, porro), (2, 11, et), (3, 7, sint), CREATE TABLE `Research_Outcomes` ( outcome_code VARCHAR(10) PRIMARY KEY, outcome_description VARCHAR(255) ); Sample rows from `Research_Outcomes`: (Paper, Published Research Paper), (Patent, Research Patent), CREATE TABLE `Research_Staff` ( staff_id INTEGER, employer_organisation_id INTEGER REFERENCES Organisations(organisation_id), staff_details VARCHAR(255) ); Sample rows from `Research_Staff`: (1, 1, quo), (2, 4, est), (3, 5, aspernatur), CREATE TABLE `Staff_Roles` ( role_code VARCHAR(10) PRIMARY KEY, role_description VARCHAR(255) ); Sample rows from `Staff_Roles`: (leader, Project Leader), (researcher, Project Researcher), CREATE TABLE `Tasks` ( task_id INTEGER, project_id INTEGER REFERENCES Projects(project_id), task_details VARCHAR(255), eg Agree Objectives VARCHAR(1) ); Sample rows from `Tasks`: (1, 1, a, None), (2, 2, b, None), (3, 3, c, None), ",
        "output": "SELECT role_description FROM staff_roles WHERE role_code  =  'researcher'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the full name of each student who is not allergic to any type of food. ###filtered_database_schema: CREATE TABLE `Allergy_Type` ( Allergy VARCHAR(20) PRIMARY KEY, AllergyType VARCHAR(20) ); Sample rows from `Allergy_Type`: (Eggs, food), (Nuts, food), (Milk, food), CREATE TABLE `Has_Allergy` ( StuID INTEGER REFERENCES Student(StuID), Allergy VARCHAR(20) REFERENCES Allergy_Type(Allergy) ); Sample rows from `Has_Allergy`: (1001, Cat), (1002, Shellfish), (1002, Tree Pollen), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), ",
        "output": "SELECT fname ,  lname FROM student WHERE stuid NOT IN (SELECT t1.stuid FROM has_allergy as t1 JOIN allergy_type as t2 ON t1.allergy  =  t2.allergy WHERE t2.allergytype  =  \"food\")"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Who wrote on the topic of Bacterial Wilt in 2016 ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid JOIN author as t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the details for all projects that did not hire any staff in a research role? ###filtered_database_schema: CREATE TABLE `Document_Types` ( document_type_code VARCHAR(10) PRIMARY KEY, document_description VARCHAR(255) ); Sample rows from `Document_Types`: (APP, Initial Application), (REG, Regular), CREATE TABLE `Documents` ( document_id INTEGER, document_type_code VARCHAR(10) REFERENCES Document_Types(document_type_code), grant_id INTEGER REFERENCES Grants(grant_id), sent_date DATETIME, response_received_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Documents`: (1, APP, 5, 1986-11-30 07:56:35, 1977-12-01 02:18:53, ), (2, APP, 13, 2004-01-23 11:57:08, 1979-12-08 10:38:07, ), (3, REG, 10, 1999-03-03 12:25:58, 1995-09-12 13:13:48, ), CREATE TABLE `Grants` ( grant_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), grant_amount DECIMAL(19,4), grant_start_date DATETIME, grant_end_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Grants`: (1, 10, 4094.542, 2016-11-20 00:18:51, 2004-10-24 09:09:39, et), (2, 3, 281.2446, 1985-10-09 20:08:49, 1985-06-08 00:22:07, occaecati), (3, 14, 4515947.7015, 1970-09-19 22:53:49, 1989-03-16 18:27:16, et), CREATE TABLE `Organisation_Types` ( organisation_type VARCHAR(10) PRIMARY KEY, organisation_type_description VARCHAR(255) ); Sample rows from `Organisation_Types`: (RES, Research), (SPON, Sponsor), CREATE TABLE `Organisations` ( organisation_id INTEGER, organisation_type VARCHAR(10) REFERENCES Organisation_Types(organisation_type), organisation_details VARCHAR(255) ); Sample rows from `Organisations`: (1, RES, et), (2, RES, eius), (3, RES, impedit), CREATE TABLE `Project_Outcomes` ( project_id INTEGER REFERENCES Projects(project_id), outcome_code VARCHAR(10) REFERENCES Research_Outcomes(outcome_code), outcome_details VARCHAR(255) ); Sample rows from `Project_Outcomes`: (4, Paper, None), (3, Patent, None), (9, Paper, None), CREATE TABLE `Project_Staff` ( staff_id DOUBLE PRIMARY KEY, project_id INTEGER REFERENCES Projects(project_id), role_code VARCHAR(10) REFERENCES Staff_Roles(role_code), date_from DATETIME, date_to DATETIME, other_details VARCHAR(255) ); Sample rows from `Project_Staff`: (0.0, 2, leader, 1981-10-04 22:44:50, 1985-05-30 22:26:30, None), (674810.0, 5, leader, 2003-04-19 15:06:20, 2010-12-08 11:55:36, None), (779.0, 2, researcher, 1981-10-09 21:32:53, 2004-12-16 13:03:36, None), CREATE TABLE `Projects` ( project_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), project_details VARCHAR(255) ); Sample rows from `Projects`: (1, 15, porro), (2, 11, et), (3, 7, sint), CREATE TABLE `Research_Outcomes` ( outcome_code VARCHAR(10) PRIMARY KEY, outcome_description VARCHAR(255) ); Sample rows from `Research_Outcomes`: (Paper, Published Research Paper), (Patent, Research Patent), CREATE TABLE `Research_Staff` ( staff_id INTEGER, employer_organisation_id INTEGER REFERENCES Organisations(organisation_id), staff_details VARCHAR(255) ); Sample rows from `Research_Staff`: (1, 1, quo), (2, 4, est), (3, 5, aspernatur), CREATE TABLE `Staff_Roles` ( role_code VARCHAR(10) PRIMARY KEY, role_description VARCHAR(255) ); Sample rows from `Staff_Roles`: (leader, Project Leader), (researcher, Project Researcher), CREATE TABLE `Tasks` ( task_id INTEGER, project_id INTEGER REFERENCES Projects(project_id), task_details VARCHAR(255), eg Agree Objectives VARCHAR(1) ); Sample rows from `Tasks`: (1, 1, a, None), (2, 2, b, None), (3, 3, c, None), ",
        "output": "SELECT project_details FROM projects WHERE project_id NOT IN ( SELECT project_id FROM project_staff WHERE role_code  =  'researcher' )"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many video games exist? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Video_Games` ( GameID INTEGER, GName VARCHAR(40), GType VARCHAR(40) ); Sample rows from `Video_Games`: (1, RNG Stone, Collectible card game), (2, The Vanishing of Eric Calder, Walking Simulator), (3, Grand Term Assignment, Role-playing game), CREATE TABLE `Plays_Games` ( StuID INTEGER REFERENCES Student(StuID), GameID INTEGER REFERENCES Video_Games(GameID), Hours_Played INTEGER ); Sample rows from `Plays_Games`: (1001, 1, 35), (1001, 2, 15), (1001, 5, 1), CREATE TABLE `SportsInfo` ( StuID INTEGER REFERENCES Student(StuID), SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1) ); Sample rows from `SportsInfo`: (1001, Athletics, 2, 5, N), (1002, Football, 7, 20, Y), (1003, Football, 45, 18, Y), ",
        "output": "SELECT COUNT(*) FROM video_games"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all games played by Linda Smith? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Video_Games` ( GameID INTEGER, GName VARCHAR(40), GType VARCHAR(40) ); Sample rows from `Video_Games`: (1, RNG Stone, Collectible card game), (2, The Vanishing of Eric Calder, Walking Simulator), (3, Grand Term Assignment, Role-playing game), CREATE TABLE `Plays_Games` ( StuID INTEGER REFERENCES Student(StuID), GameID INTEGER REFERENCES Video_Games(GameID), Hours_Played INTEGER ); Sample rows from `Plays_Games`: (1001, 1, 35), (1001, 2, 15), (1001, 5, 1), CREATE TABLE `SportsInfo` ( StuID INTEGER REFERENCES Student(StuID), SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1) ); Sample rows from `SportsInfo`: (1001, Athletics, 2, 5, N), (1002, Football, 7, 20, Y), (1003, Football, 45, 18, Y), ",
        "output": "SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid JOIN student as t3 ON t3.stuid  =  t1.stuid WHERE t3.lname  =  \"Smith\" AND t3.fname  =  \"Linda\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids of all songs that are available on mp4 or have a higher resolution than 720? ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the carriers of devices whose software platforms are not \"Android\"? ###filtered_database_schema: CREATE TABLE `device` ( Device_ID INT PRIMARY KEY, Device TEXT, Carrier TEXT, Package_Version TEXT, Applications TEXT, Software_Platform TEXT ); Sample rows from `device`: (1, BlackBerry Storm 9530, MTS Mobility, 5.0.0.808, 5.0.0.419, Android), (2, Apple, Verizon Wireless, 5.0.0.328, 5.0.0.328, iOS), (3, Huawei, Telus Mobility, 5.0.0.419, 5.0.0.419, Android), CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Shop_Name TEXT, Location TEXT, Open_Date TEXT, Open_Year INT ); Sample rows from `shop`: (1, Dinas Device, Dinas, 1 January, 2014), (2, Best Buy, Cymmer, 15 July, 2006), (3, Ferndale, Blaenllechau, 8 November, 2009), CREATE TABLE `stock` ( Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID), Device_ID INT PRIMARY KEY REFERENCES device(Device_ID), Quantity INT ); Sample rows from `stock`: (1, 6, 100), (2, 6, 110), (3, 6, 134), ",
        "output": "SELECT carrier FROM device WHERE software_platform != 'Android'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show me all the restaurants. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Restaurant` ( ResID INTEGER, ResName VARCHAR(100), Address VARCHAR(100), Rating INTEGER ); Sample rows from `Restaurant`: (1, Subway, 3233 St Paul St, Baltimore, MD 21218, 3), (2, Honeygrow, 3212 St Paul St, Baltimore, MD 21218, 4), CREATE TABLE `Type_Of_Restaurant` ( ResID INTEGER REFERENCES Restaurant(ResID), ResTypeID INTEGER REFERENCES Restaurant_Type(ResTypeID) ); Sample rows from `Type_Of_Restaurant`: (1, 1), (2, 2), CREATE TABLE `Restaurant_Type` ( ResTypeID INTEGER, ResTypeName VARCHAR(40), ResTypeDescription VARCHAR(100) ); Sample rows from `Restaurant_Type`: (1, Sandwich, Simplest there is.), (2, Stir-fry, Classic Chinese cooking.), CREATE TABLE `Visits_Restaurant` ( StuID INTEGER REFERENCES Student(StuID), ResID INTEGER REFERENCES Restaurant(ResID), Time TIMESTAMP, Spent FLOAT ); Sample rows from `Visits_Restaurant`: (1001, 1, 2017-10-09 18:15:00, 6.53), (1032, 2, 2017-10-08 13:00:30, 13.2), ",
        "output": "SELECT resname FROM restaurant;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: In 2010 what journal published an article about Trophic Cascade ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.journalid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\" AND t3.year  =  2010 GROUP BY t3.journalid;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the first name and last name of all customers. ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 3904 Stroman Passage, Port Melyssa, 14445, Georgia, USA), (2, 053 Quigley Island, Hagenesfurt, 22194, Kentucky, USA), (3, 00704 Zoe Alley, Lake Elaina, 08938, Georgia, USA), CREATE TABLE `Staff` ( staff_id INTEGER, staff_address_id INTEGER REFERENCES Addresses(address_id), nickname VARCHAR(80), first_name VARCHAR(80), middle_name VARCHAR(80), last_name VARCHAR(80), date_of_birth DATETIME, date_joined_staff DATETIME, date_left_staff DATETIME ); Sample rows from `Staff`: (1, 14, thompson.constantin, Janessa, Amara, Sawayn, 2010-12-08 16:55:14, 2017-04-27 03:21:26, 2018-03-23 22:53:12), (2, 3, santos45, Camylle, Icie, Weissnat, 2015-08-01 13:22:43, 2016-06-06 08:54:28, 2018-03-10 15:25:00), (3, 5, ynader, Kaitlin, Stephania, Mertz, 1994-05-17 05:32:11, 2018-01-02 12:24:24, 2018-03-24 10:11:08), CREATE TABLE `Vehicles` ( vehicle_id INTEGER, vehicle_details VARCHAR(255) ); Sample rows from `Vehicles`: (1, Van), (2, Truck), (3, Car), CREATE TABLE `Customers` ( customer_id INTEGER, customer_address_id INTEGER REFERENCES Addresses(address_id), customer_status_code VARCHAR(15), date_became_customer DATETIME, date_of_birth DATETIME, first_name VARCHAR(80), last_name VARCHAR(80), amount_outstanding DOUBLE, email_address VARCHAR(250), phone_number VARCHAR(255), cell_mobile_phone_number VARCHAR(255) ); Sample rows from `Customers`: (1, 13, Bad Customer, 2016-05-11 17:03:48, 1998-12-15 13:24:40, Carole, Bernhard, 255.0, everette.goyette@example.org, 07278206718, 861-638-9797), (2, 10, Bad Customer, 2015-11-16 22:52:14, 1995-07-17 12:13:16, Genevieve, Terry, 7256.0, huel.jana@example.org, +14(5)2351480248, 578-518-4785x612), (3, 10, Good Customer, 2016-04-08 00:28:15, 1994-06-21 01:34:56, Clara, Ortiz, 9443.0, hilario.sporer@example.org, 374-483-2758x85087, 1-197-686-2849x8761), CREATE TABLE `Customer_Payments` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), datetime_payment DATETIME PRIMARY KEY, payment_method_code VARCHAR(10), amount_payment DOUBLE ); Sample rows from `Customer_Payments`: (11, 2018-02-05 18:44:46, Direct Debit, 9570.93), (2, 2018-02-24 10:07:05, Direct Debit, 8180.26), (14, 2018-02-27 20:08:53, Direct Debit, 4610.26), CREATE TABLE `Lessons` ( lesson_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), lesson_status_code VARCHAR(15), staff_id INTEGER REFERENCES Staff(staff_id), vehicle_id INTEGER REFERENCES Vehicles(vehicle_id), lesson_date DATETIME, lesson_time VARCHAR(10), price DOUBLE ); Sample rows from `Lessons`: (1, 6, Cancelled, 8, 3, 2018-02-28 10:55:36, 5, 199.0), (2, 8, Cancelled, 14, 3, 2018-03-07 16:12:36, 6, 167.0), (3, 6, Cancelled, 11, 2, 2018-03-03 15:10:16, 3, 352.0), ",
        "output": "SELECT first_name ,  last_name FROM customers;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me all the keywords . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT keyword FROM keyword;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top? ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Artist TEXT, Age INT, Famous_Title TEXT, Famous_Release_date TEXT ); Sample rows from `artist`: (1, Gorgoroth, 34, Bergen 1996, November 2007), (2, Ophiolatry, 35, Transmutation, January 21, 2008), (3, Ophiolatry, 22, Antievangelistical Process (re-release), 2009), CREATE TABLE `volume` ( Volume_ID INT PRIMARY KEY, Volume_Issue TEXT, Issue_Date TEXT, Weeks_on_Top REAL, Song TEXT, Artist_ID INT REFERENCES artist(Artist_ID) ); Sample rows from `volume`: (1, 45:14 §, 27 December 1986 - 10 January, 3.0, The Way, 1), (2, 45:15, 17 January, 1.0, Everybody Have Fun Tonight , 2), (3, 45:16, 24 January, 1.0, Walk Like an Egyptian , 1), CREATE TABLE `music_festival` ( ID INT PRIMARY KEY, Music_Festival TEXT, Date_of_ceremony TEXT, Category TEXT, Volume INT REFERENCES volume(Volume_ID), Result TEXT ); Sample rows from `music_festival`: (1, 34th England Academy Prize, 18 February 2011, Best Song, 1, Nominated), (2, 34th Japan Academy Prize, 18 February 2011, Best Lyrics, 2, Nominated), (3, 34th European Academy Prize, 18 February 2011, Best Song, 3, Awarded), ",
        "output": "SELECT t1.date_of_ceremony FROM music_festival as t1 JOIN volume as t2 ON t1.volume  =  t2.volume_ID WHERE t2.weeks_on_top  >  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the membership level with most number of members. ###filtered_database_schema: CREATE TABLE `member` ( Member_ID INT PRIMARY KEY, Card_Number TEXT, Name TEXT, Hometown TEXT, Level INT ); Sample rows from `member`: (1, LE99, Jeremy Jarmon, Collierville, Tennessee, 6), (2, LT98, Myron Pryor, Louisville, Kentucky, 6), (3, RT91, Corey Peters, Louisville, Kentucky, 6), CREATE TABLE `branch` ( Branch_ID INT PRIMARY KEY, Name TEXT, Open_year TEXT, Address_road TEXT, City TEXT, membership_amount TEXT ); Sample rows from `branch`: (1, Alexandre, 2001, Valleys Place, London, 112), (2, Popert, 2009, Oaks Crescent, London, 11), (3, Stanley, 2013, Abbott Street, London, 6), CREATE TABLE `membership_register_branch` ( Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Branch_ID TEXT REFERENCES branch(Branch_ID), Register_Year TEXT ); Sample rows from `membership_register_branch`: (1, 1, 2016), (2, 4, 2016), (3, 1, 2017), CREATE TABLE `purchase` ( Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Branch_ID TEXT PRIMARY KEY REFERENCES branch(Branch_ID), Year TEXT PRIMARY KEY, Total_pounds REAL ); Sample rows from `purchase`: (1, 3, 2018, 2013.32), (2, 5, 2018, 321.13), (3, 1, 2017, 988.09), ",
        "output": "SELECT level FROM member GROUP BY level ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of the clients who do not have any booking? ###filtered_database_schema: CREATE TABLE `Ref_Payment_Methods` ( payment_method_code CHAR(10) PRIMARY KEY, payment_method_description VARCHAR(80) ); Sample rows from `Ref_Payment_Methods`: (American E, credit), (MasterCard, debit), (Visa, Visa), CREATE TABLE `Ref_Service_Types` ( Service_Type_Code CHAR(15) PRIMARY KEY, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255) ); Sample rows from `Ref_Service_Types`: (1, 1, provide photo service), (2, 1, provide dinning service), (3, 1, provide filming service), CREATE TABLE `Addresses` ( Address_ID VARCHAR(100) PRIMARY KEY, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Addresses`: (110, 4753 Dach Highway, Suite 846, Feliciaberg, Florida, None), (124, 391 Vandervort Fall Apt. 446, Apt. 107, West Sherwoodstad, Indiana, None), (148, 809 Izabella Islands, Suite 271, Schadenville, Ohio, None), CREATE TABLE `Products` ( Product_ID VARCHAR(100) PRIMARY KEY, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Products`: (11, photo, 4448536, None, None), (154, film, 2302, None, None), (156, film, 17622723, None, None), CREATE TABLE `Marketing_Regions` ( Marketing_Region_Code CHAR(15) PRIMARY KEY, Marketing_Region_Name VARCHAR(255), Marketing_Region_Descriptrion VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Marketing_Regions`: (CA, Canada, Our target market, None), (CN, China, Our largest market, None), (ES, Spain, , None), CREATE TABLE `Clients` ( Client_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Clients`: (423, 201, branson94@example.net, Clifford, (042)912-3404x5135, VIP), (426, 383, alba04@example.com, Bettye, (604)849-0214, None), (478, 15, westley30@example.net, Reinhold, 1-048-214-4640x64380, None), CREATE TABLE `Drama_Workshop_Groups` ( Workshop_Group_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Currency_Code CHAR(15), Marketing_Region_Code CHAR(15), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Drama_Workshop_Groups`: (136, 383, EU, FR, Amely Cafe, 122-084-8029, amely.ruecker@example.com, None), (140, 180, EU, DE, Veda Film, 793-966-9311x5303, breitenberg.veda@example.com, None), (176, 286, EU, RU, Queen Art, 492-463-5967, quigley.queen@example.org, Good), CREATE TABLE `Performers` ( Performer_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Performers`: (153, 124, Shawna, 664.495.1939, krogahn@example.com, None), (211, 124, Ashley, 893-536-8857, preston45@example.net, None), (313, 39, Oren, 1-952-052-6685x28082, ferry.carolina@example.net, None), CREATE TABLE `Customers` ( Customer_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Customers`: (240, 286, Harold, 624-096-7791, jerde.harmon@example.com, None), (267, 98, Federico, 914-915-7483, johnson27@example.com, None), (304, 369, Samson, 1-463-121-4086x655, dalton75@example.com, None), CREATE TABLE `Stores` ( Store_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Marketing_Region_Code CHAR(15) REFERENCES Marketing_Regions(Marketing_Region_Code), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Stores`: (150, 286, IN, FJA Filming, +65(1)3590790358, fjacobson@example.com, None), (229, 266, CA, Rob Dinning, 1-327-185-9368, rborer@example.org, 5 stars), (231, 230, ES, Adan Dinning, 896-931-9633x869, adan93@example.com, None), CREATE TABLE `Bookings` ( Booking_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Clients(Client_ID), Workshop_Group_ID VARCHAR(100) REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Status_Code CHAR(15), Store_ID INTEGER, Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Bookings`: (1, 938, 140, good, 8, 2016-12-12 10:43:01, 2013-03-10 18:47:05, 1997-11-21 10:07:40, None), (2, 868, 838, stop, 7, 1976-08-20 00:33:08, 2009-07-09 09:18:38, 1976-01-08 07:19:23, None), (3, 735, 176, good, 9, 1975-11-23 06:28:47, 1989-01-05 19:24:45, 1990-03-16 19:38:47, None), CREATE TABLE `Performers_in_Bookings` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Performer_ID INTEGER PRIMARY KEY REFERENCES Performers(Performer_ID) ); Sample rows from `Performers_in_Bookings`: (1, 153), (1, 341), (2, 466), CREATE TABLE `Customer_Orders` ( Order_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Store_ID INTEGER REFERENCES Stores(Store_ID), Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 516, 231, 1994-08-03 12:34:58, 1977-03-11 03:58:19, 1992-07-21 22:11:11, None), (2, 418, 229, 2014-07-10 10:56:01, 1996-08-26 19:19:59, 1998-08-22 17:57:32, None), (3, 712, 229, 1981-06-20 16:29:43, 1980-12-19 05:49:35, 2011-04-13 07:15:35, None), CREATE TABLE `Order_Items` ( Order_Item_ID INTEGER, Order_ID INTEGER REFERENCES Customer_Orders(Order_ID), Product_ID INTEGER REFERENCES Products(Product_ID), Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 3, 233, 1, None), (2, 15, 300, 2, None), (3, 12, 300, 1, None), CREATE TABLE `Invoices` ( Invoice_ID INTEGER, Order_ID INTEGER REFERENCES Bookings(Booking_ID) REFERENCES Customer_Orders(Order_ID), payment_method_code CHAR(15) REFERENCES Ref_Payment_Methods(payment_method_code), Product_ID INTEGER, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER ); Sample rows from `Invoices`: (128, 14, MasterCard, 4, 2, None, 1), (162, 13, MasterCard, 9, 2, None, 9), (164, 7, Visa, 7, 2, None, 1), CREATE TABLE `Services` ( Service_ID INTEGER PRIMARY KEY, Service_Type_Code CHAR(15) REFERENCES Ref_Service_Types(Service_Type_Code), Workshop_Group_ID INTEGER REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Services`: (191, 1, 415, None, film, 58932775.8822, None), (219, 2, 838, None, film, 2704.4719, None), (220, 1, 708, None, dinning, 6888.8306, None), CREATE TABLE `Bookings_Services` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Product_ID INTEGER PRIMARY KEY REFERENCES Services(Service_ID) ); Sample rows from `Bookings_Services`: (1, 396), (1, 779), (4, 191), CREATE TABLE `Invoice_Items` ( Invoice_Item_ID INTEGER, Invoice_ID INTEGER REFERENCES Invoices(Invoice_ID), Order_ID INTEGER REFERENCES Bookings_Services(Order_ID), Order_Item_ID INTEGER REFERENCES Order_Items(Order_Item_ID), Product_ID INTEGER REFERENCES Bookings_Services(Product_ID), Order_Quantity INTEGER, Other_Item_Details VARCHAR(255) ); Sample rows from `Invoice_Items`: (1, 128, 1, 5, 396, 2, None), (2, 162, 4, 6, 191, 6, Good quality), ",
        "output": "SELECT customer_name FROM clients EXCEPT SELECT t2.customer_name FROM bookings as t1 JOIN clients as t2 ON t1.customer_id  =  t2.client_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many students are age 18? ###filtered_database_schema: CREATE TABLE `Allergy_Type` ( Allergy VARCHAR(20) PRIMARY KEY, AllergyType VARCHAR(20) ); Sample rows from `Allergy_Type`: (Eggs, food), (Nuts, food), (Milk, food), CREATE TABLE `Has_Allergy` ( StuID INTEGER REFERENCES Student(StuID), Allergy VARCHAR(20) REFERENCES Allergy_Type(Allergy) ); Sample rows from `Has_Allergy`: (1001, Cat), (1002, Shellfish), (1002, Tree Pollen), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), ",
        "output": "SELECT COUNT(*) FROM student WHERE age  =  18"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit. ###filtered_database_schema: CREATE TABLE `Ref_Hotel_Star_Ratings` ( star_rating_code CHAR(15) PRIMARY KEY, star_rating_description VARCHAR(80) ); Sample rows from `Ref_Hotel_Star_Ratings`: (1, star), (2, star), (3, star), CREATE TABLE `Locations` ( Location_ID INTEGER, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Locations`: (333, Astro Orbiter, 660 Shea Crescent, None), (368, African Animals, 254 Ottilie Junction, None), (417, American Adventure, 53815 Sawayn Tunnel Apt. 297, None), CREATE TABLE `Ref_Attraction_Types` ( Attraction_Type_Code CHAR(15) PRIMARY KEY, Attraction_Type_Description VARCHAR(255) ); Sample rows from `Ref_Attraction_Types`: (2, park), (3, garden), (5, gallery), CREATE TABLE `Visitors` ( Tourist_ID INTEGER PRIMARY KEY, Tourist_Details VARCHAR(255) ); Sample rows from `Visitors`: (164, Toney), (189, Graciela), (204, Vincent), CREATE TABLE `Features` ( Feature_ID INTEGER, Feature_Details VARCHAR(255) ); Sample rows from `Features`: (523, cafe), (528, park), (543, garden), CREATE TABLE `Hotels` ( hotel_id INTEGER, star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code), pets_allowed_yn CHAR(1), price_range REAL, other_hotel_details VARCHAR(255) ); Sample rows from `Hotels`: (123, 5, 1, 2914989.571, None), (144, 4, , , None), (172, 5, , 17012.682586009, None), CREATE TABLE `Tourist_Attractions` ( Tourist_Attraction_ID INTEGER, Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code), Location_ID INTEGER REFERENCES Locations(Location_ID), How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Tourist_Attractions`: (2113, 2, 579, bus, art museum, None, None, None), (2701, 6, 417, walk, UK gallery, None, None, None), (5076, 2, 868, shuttle, flying elephant, None, None, None), CREATE TABLE `Street_Markets` ( Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Market_Details VARCHAR(255) ); Sample rows from `Street_Markets`: (6852, Broadway), (7067, Fish Farm Market), CREATE TABLE `Shops` ( Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Shop_Details VARCHAR(255) ); Sample rows from `Shops`: (8429, soup), (8449, coffee), (8698, Flower), CREATE TABLE `Museums` ( Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Museum_Details VARCHAR(255) ); Sample rows from `Museums`: (2113, Yale Center for British Art), (2701, The Metropolitan Museum of Art), (5076, MoMA), CREATE TABLE `Royal_Family` ( Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Royal_Family_Details VARCHAR(255) ); Sample rows from `Royal_Family`: (9561, None), (9919, None), CREATE TABLE `Theme_Parks` ( Theme_Park_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Theme_Park_Details VARCHAR(255) ); Sample rows from `Theme_Parks`: (5265, Disney), (6476, Sea World), (6523, Universal Studios), CREATE TABLE `Visits` ( Visit_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID), Visit_Date DATETIME, Visit_Details VARCHAR(40) ); Sample rows from `Visits`: (183, 6653, 377, 2004-08-21 03:06:14, ), (268, 5076, 204, 2013-08-06 05:35:51, ), (273, 9360, 211, 2013-10-27 09:56:08, ), CREATE TABLE `Photos` ( Photo_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Photos`: (211, 8449, game1, None, 702, None), (280, 7067, game2, None, 762, None), (303, 5076, game3, None, 392, None), CREATE TABLE `Staff` ( Staff_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(40), Other_Details VARCHAR(255) ); Sample rows from `Staff`: (170, 6476, Whitney, None), (219, 6476, Kaela, None), (237, 7067, Eunice, None), CREATE TABLE `Tourist_Attraction_Features` ( Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID) ); Sample rows from `Tourist_Attraction_Features`: (5076, 528), (5076, 681), (5265, 523), ",
        "output": "SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Alison\" EXCEPT SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Rosalind\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which artist has the most albums? ###filtered_database_schema: CREATE TABLE `Album` ( AlbumId INTEGER, Title varchar(160), ArtistId INTEGER PRIMARY KEY REFERENCES Artist(ArtistId) ); Sample rows from `Album`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `Artist` ( ArtistId INTEGER, Name varchar(120) ); Sample rows from `Artist`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `Customer` ( CustomerId INTEGER, FirstName varchar(40), LastName varchar(20), Company varchar(80), Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60), SupportRepId INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId) ); Sample rows from `Customer`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `Employee` ( EmployeeId INTEGER, LastName varchar(20), FirstName varchar(20), Title varchar(30), ReportsTo INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId), BirthDate datetime, HireDate datetime, Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60) ); Sample rows from `Employee`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `Genre` ( GenreId INTEGER, Name varchar(120) ); Sample rows from `Genre`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `Invoice` ( InvoiceId INTEGER, CustomerId INTEGER PRIMARY KEY REFERENCES Customer(CustomerId), InvoiceDate datetime, BillingAddress varchar(70), BillingCity varchar(40), BillingState varchar(40), BillingCountry varchar(40), BillingPostalCode varchar(10), Total decimal(10,2) ); Sample rows from `Invoice`: (1, 2, 2009-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2009-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2009-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `InvoiceLine` ( InvoiceLineId INTEGER, InvoiceId INTEGER PRIMARY KEY REFERENCES Invoice(InvoiceId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId), UnitPrice decimal(10,2), Quantity INTEGER ); Sample rows from `InvoiceLine`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `MediaType` ( MediaTypeId INTEGER, Name varchar(120) ); Sample rows from `MediaType`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `Playlist` ( PlaylistId INTEGER, Name varchar(120) ); Sample rows from `Playlist`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `PlaylistTrack` ( PlaylistId INTEGER PRIMARY KEY REFERENCES Playlist(PlaylistId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId) ); Sample rows from `PlaylistTrack`: (1, 1), (8, 1), (17, 1), CREATE TABLE `Track` ( TrackId INTEGER, Name varchar(200), AlbumId INTEGER PRIMARY KEY REFERENCES Album(AlbumId), MediaTypeId INTEGER PRIMARY KEY REFERENCES MediaType(MediaTypeId), GenreId INTEGER PRIMARY KEY REFERENCES Genre(GenreId), Composer varchar(220), Milliseconds INTEGER, Bytes INTEGER, UnitPrice decimal(10,2) ); Sample rows from `Track`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), ",
        "output": "SELECT t2.name FROM album as t1 JOIN artist as t2 ON t1.artistid  =  t2.artistid GROUP BY t2.name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the issue date of the volume with the minimum weeks on top? ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Artist TEXT, Age INT, Famous_Title TEXT, Famous_Release_date TEXT ); Sample rows from `artist`: (1, Gorgoroth, 34, Bergen 1996, November 2007), (2, Ophiolatry, 35, Transmutation, January 21, 2008), (3, Ophiolatry, 22, Antievangelistical Process (re-release), 2009), CREATE TABLE `volume` ( Volume_ID INT PRIMARY KEY, Volume_Issue TEXT, Issue_Date TEXT, Weeks_on_Top REAL, Song TEXT, Artist_ID INT REFERENCES artist(Artist_ID) ); Sample rows from `volume`: (1, 45:14 §, 27 December 1986 - 10 January, 3.0, The Way, 1), (2, 45:15, 17 January, 1.0, Everybody Have Fun Tonight , 2), (3, 45:16, 24 January, 1.0, Walk Like an Egyptian , 1), CREATE TABLE `music_festival` ( ID INT PRIMARY KEY, Music_Festival TEXT, Date_of_ceremony TEXT, Category TEXT, Volume INT REFERENCES volume(Volume_ID), Result TEXT ); Sample rows from `music_festival`: (1, 34th England Academy Prize, 18 February 2011, Best Song, 1, Nominated), (2, 34th Japan Academy Prize, 18 February 2011, Best Lyrics, 2, Nominated), (3, 34th European Academy Prize, 18 February 2011, Best Song, 3, Awarded), ",
        "output": "SELECT issue_date FROM volume ORDER BY weeks_on_top ASC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the first names of the people in alphabetical order? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1 VARCHAR(80), line_2 VARCHAR(80), city VARCHAR(50), zip_postcode CHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (5, 0900 Roderick Oval New Albina, WA 19200-7914, Suite 096, Linnealand, 862, Montana, USA), (9, 966 Dach Ports Apt. 322 Lake Harmonyhaven, VA 65235, Apt. 163, South Minnie, 716, Texas, USA), (29, 28550 Broderick Underpass Suite 667 Zakaryhaven, WY 22945-1534, Apt. 419, North Trystanborough, 112, Vermont, USA), CREATE TABLE `People` ( person_id INTEGER, first_name VARCHAR(255), middle_name VARCHAR(255), last_name VARCHAR(255), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), login_name VARCHAR(40), password VARCHAR(40) ); Sample rows from `People`: (111, Shannon, Elissa, Senger, 01955267735, javier.trantow@example.net, pgub, 5e4ff49a61b3544da3ad7dc7e2cf28847564c64c), (121, Virginie, Jasmin, Hartmann, (508)319-2970x043, boyer.lonie@example.com, bkkv, b063331ea8116befaa7b84c59c6a22200f5f8caa), (131, Dariana, Hayley, Bednar, (262)347-9364x516, leila14@example.net, zops, b20b6a9f24aadeda70d54e410c3219f61fb063fb), CREATE TABLE `Students` ( student_id INTEGER REFERENCES People(person_id), student_details VARCHAR(255) ); Sample rows from `Students`: (111, Marry), (121, Martin), (131, Barry), CREATE TABLE `Courses` ( course_id VARCHAR(100) PRIMARY KEY, course_name VARCHAR(120), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Courses`: (301, statistics, statistics, None), (302, English, English, None), (303, French, French, None), CREATE TABLE `People_Addresses` ( person_address_id INTEGER, person_id INTEGER REFERENCES People(person_id), address_id INTEGER REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `People_Addresses`: (122, 111, 9, 2012-09-26 13:21:00, 2018-03-21 09:46:30), (257, 121, 5, 2008-07-31 02:17:25, 2018-03-09 02:11:12), (269, 131, 88, 2008-05-26 20:43:41, 2018-03-11 20:26:41), CREATE TABLE `Student_Course_Registrations` ( student_id INTEGER PRIMARY KEY REFERENCES Students(student_id), course_id INTEGER PRIMARY KEY REFERENCES Courses(course_id), registration_date DATETIME ); Sample rows from `Student_Course_Registrations`: (111, 301, 2008-11-04 10:35:13), (121, 301, 2008-10-04 10:35:13), (121, 303, 2008-11-14 10:35:13), CREATE TABLE `Student_Course_Attendance` ( student_id INTEGER PRIMARY KEY REFERENCES Student_Course_Registrations(student_id), course_id INTEGER PRIMARY KEY REFERENCES Student_Course_Registrations(course_id), date_of_attendance DATETIME ); Sample rows from `Student_Course_Attendance`: (111, 301, 2008-11-04 10:35:13), (121, 301, 2012-04-09 11:44:34), (121, 303, 2014-04-09 11:44:34), CREATE TABLE `Candidates` ( candidate_id INTEGER REFERENCES People(person_id), candidate_details VARCHAR(255) ); Sample rows from `Candidates`: (111, Jane), (121, Robert), (131, Alex), CREATE TABLE `Candidate_Assessments` ( candidate_id INTEGER PRIMARY KEY REFERENCES Candidates(candidate_id), qualification CHAR(15) PRIMARY KEY, assessment_date DATETIME, asessment_outcome_code CHAR(15) ); Sample rows from `Candidate_Assessments`: (111, A, 2010-04-07 11:44:34, Pass), (121, B, 2010-04-17 11:44:34, Pass), (131, D, 2010-04-05 11:44:34, Fail), ",
        "output": "SELECT first_name FROM people ORDER BY first_name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the total length of all rivers in the usa ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT SUM(length) FROM river;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the alphabetically ordered list of all distinct medications? ###filtered_database_schema: CREATE TABLE `Physician` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), SSN INTEGER ); Sample rows from `Physician`: (1, John Dorian, Staff Internist, 111111111), (2, Elliot Reid, Attending Physician, 222222222), (3, Christopher Turk, Surgical Attending Physician, 333333333), CREATE TABLE `Department` ( DepartmentID INTEGER, Name VARCHAR(30), Head INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Department`: (1, General Medicine, 4), (2, Surgery, 7), (3, Psychiatry, 9), CREATE TABLE `Affiliated_With` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID), PrimaryAffiliation BOOLEAN ); Sample rows from `Affiliated_With`: (1, 1, 1), (2, 1, 1), (3, 1, 0), CREATE TABLE `Procedures` ( Code INTEGER, Name VARCHAR(30), Cost REAL ); Sample rows from `Procedures`: (1, Reverse Rhinopodoplasty, 1500.0), (2, Obtuse Pyloric Recombobulation, 3750.0), (3, Folded Demiophtalmectomy, 4500.0), CREATE TABLE `Trained_In` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code), CertificationDate DATETIME, CertificationExpires DATETIME ); Sample rows from `Trained_In`: (3, 1, 2008-01-01, 2008-12-31), (3, 2, 2008-01-01, 2008-12-31), (3, 5, 2008-01-01, 2008-12-31), CREATE TABLE `Patient` ( SSN INTEGER, Name VARCHAR(30), Address VARCHAR(30), Phone VARCHAR(30), InsuranceID INTEGER, PCP INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Patient`: (100000001, John Smith, 42 Foobar Lane, 555-0256, 68476213, 1), (100000002, Grace Ritchie, 37 Snafu Drive, 555-0512, 36546321, 2), (100000003, Random J. Patient, 101 Omgbbq Street, 555-1204, 65465421, 2), CREATE TABLE `Nurse` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), Registered BOOLEAN, SSN INTEGER ); Sample rows from `Nurse`: (101, Carla Espinosa, Head Nurse, 1, 111111110), (102, Laverne Roberts, Nurse, 1, 222222220), (103, Paul Flowers, Nurse, 0, 333333330), CREATE TABLE `Appointment` ( AppointmentID INTEGER, Patient INTEGER REFERENCES Patient(SSN), PrepNurse INTEGER REFERENCES Nurse(EmployeeID), Physician INTEGER REFERENCES Physician(EmployeeID), Start DATETIME, End DATETIME, ExaminationRoom TEXT ); Sample rows from `Appointment`: (13216584, 100000001, 101, 1, 2008-04-24 10:00, 2008-04-24 11:00, A), (26548913, 100000002, 101, 2, 2008-04-24 10:00, 2008-04-24 11:00, B), (36549879, 100000001, 102, 1, 2008-04-25 10:00, 2008-04-25 11:00, A), CREATE TABLE `Medication` ( Code INTEGER, Name VARCHAR(30), Brand VARCHAR(30), Description VARCHAR(30) ); Sample rows from `Medication`: (1, Procrastin-X, X, N/A), (2, Thesisin, Foo Labs, N/A), (3, Awakin, Bar Laboratories, N/A), CREATE TABLE `Prescribes` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Medication INTEGER PRIMARY KEY REFERENCES Medication(Code), Date DATETIME PRIMARY KEY, Appointment INTEGER REFERENCES Appointment(AppointmentID), Dose VARCHAR(30) ); Sample rows from `Prescribes`: (1, 100000001, 1, 2008-04-24 10:47, 13216584, 5), (9, 100000004, 2, 2008-04-27 10:53, 86213939, 10), (9, 100000004, 2, 2008-04-30 16:53, None, 5), CREATE TABLE `Block` ( BlockFloor INTEGER PRIMARY KEY, BlockCode INTEGER PRIMARY KEY ); Sample rows from `Block`: (1, 1), (1, 2), (1, 3), CREATE TABLE `Room` ( RoomNumber INTEGER, RoomType VARCHAR(30), BlockFloor INTEGER REFERENCES Block(BlockFloor), BlockCode INTEGER REFERENCES Block(BlockCode), Unavailable BOOLEAN ); Sample rows from `Room`: (101, Single, 1, 1, 0), (102, Single, 1, 1, 0), (103, Single, 1, 1, 0), CREATE TABLE `On_Call` ( Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID), BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor), BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode), OnCallStart DATETIME PRIMARY KEY, OnCallEnd DATETIME PRIMARY KEY ); Sample rows from `On_Call`: (101, 1, 1, 2008-11-04 11:00, 2008-11-04 19:00), (101, 1, 2, 2008-11-04 11:00, 2008-11-04 19:00), (102, 1, 3, 2008-11-04 11:00, 2008-11-04 19:00), CREATE TABLE `Stay` ( StayID INTEGER, Patient INTEGER REFERENCES Patient(SSN), Room INTEGER REFERENCES Room(RoomNumber), StayStart DATETIME, StayEnd DATETIME ); Sample rows from `Stay`: (3215, 100000001, 111, 2008-05-01, 2008-05-04), (3216, 100000003, 123, 2008-05-03, 2008-05-14), (3217, 100000004, 112, 2008-05-02, 2008-05-03), CREATE TABLE `Undergoes` ( Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code), Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID), DateUndergoes DATETIME PRIMARY KEY, Physician INTEGER REFERENCES Physician(EmployeeID), AssistingNurse INTEGER REFERENCES Nurse(EmployeeID) ); Sample rows from `Undergoes`: (100000001, 6, 3215, 2008-05-02, 3, 101), (100000001, 2, 3215, 2008-05-03, 7, 101), (100000004, 1, 3217, 2008-05-07, 3, 102), ",
        "output": "SELECT DISTINCT name FROM medication ORDER BY name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of technicians and the machine series that they repair? ###filtered_database_schema: CREATE TABLE `repair` ( repair_ID INT PRIMARY KEY, name TEXT, Launch_Date TEXT, Notes TEXT ); Sample rows from `repair`: (1, Discoverer, 21 Jan 2009, repair Failed. Failed to achieve orbit), (2, Discoverer 1, 28 Feb 2009, First object in polar orbit), (3, Discoverer 3, 03 Jun 2009, repair failed. Failed to achieve orbit), CREATE TABLE `machine` ( Machine_ID INT PRIMARY KEY, Making_Year INT, Class TEXT, Team TEXT, Machine_series TEXT, value_points REAL, quality_rank INT ); Sample rows from `machine`: (1, 1991, 125cc, Hero Sports TS- Honda, RS125, 105.0, 2), (2, 1992, 125cc, Marlboro Pileri - Honda, RS125, 57.0, 1), (3, 1993, 125cc, Marlboro Pileri - Honda, RS125, 129.0, 4), CREATE TABLE `technician` ( technician_id REAL PRIMARY KEY, Name TEXT, Team TEXT, Starting_Year REAL, Age INT ); Sample rows from `technician`: (1.0, Joe Sewell, NYY, 2012.0, 37), (2.0, John Brown, NYY, 2013.0, 36), (3.0, Tony Sewell, CLE, 2005.0, 43), CREATE TABLE `repair_assignment` ( technician_id INT PRIMARY KEY REFERENCES technician(technician_id), repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID), Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID) ); Sample rows from `repair_assignment`: (1, 1, 1), (2, 2, 2), (3, 3, 3), ",
        "output": "SELECT t3.name ,  t2.machine_series FROM repair_assignment as t1 JOIN machine as t2 ON t1.machine_id  =  t2.machine_id JOIN technician as t3 ON t1.technician_id  =  t3.technician_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: display all the information of the employees whose salary if within the range of smallest salary and 2500. ###filtered_database_schema: CREATE TABLE `regions` ( REGION_ID decimal(5,0) PRIMARY KEY, REGION_NAME varchar(25) ); Sample rows from `regions`: (1, Europe\\r), (2, Americas\\r), (3, Asia\\r), CREATE TABLE `countries` ( COUNTRY_ID varchar(2) PRIMARY KEY, COUNTRY_NAME varchar(40), REGION_ID decimal(10,0) REFERENCES regions(REGION_ID) ); Sample rows from `countries`: (AR, Argentina, 2), (AU, Australia, 3), (BE, Belgium, 1), CREATE TABLE `departments` ( DEPARTMENT_ID decimal(4,0) PRIMARY KEY, DEPARTMENT_NAME varchar(30), MANAGER_ID decimal(6,0), LOCATION_ID decimal(4,0) ); Sample rows from `departments`: (10, Administration, 200, 1700), (20, Marketing, 201, 1800), (30, Purchasing, 114, 1700), CREATE TABLE `jobs` ( JOB_ID varchar(10) PRIMARY KEY, JOB_TITLE varchar(35), MIN_SALARY decimal(6,0), MAX_SALARY decimal(6,0) ); Sample rows from `jobs`: (AD_PRES, President, 20000, 40000), (AD_VP, Administration Vice President, 15000, 30000), (AD_ASST, Administration Assistant, 3000, 6000), CREATE TABLE `employees` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY, FIRST_NAME varchar(20), LAST_NAME varchar(25), EMAIL varchar(25), PHONE_NUMBER varchar(20), HIRE_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), SALARY decimal(8,2), COMMISSION_PCT decimal(2,2), MANAGER_ID decimal(6,0), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `employees`: (100, Steven, King, SKING, 515.123.4567, 1987-06-17, AD_PRES, 24000, 0, 0, 90), (101, Neena, Kochhar, NKOCHHAR, 515.123.4568, 1987-06-18, AD_VP, 17000, 0, 100, 90), (102, Lex, De Haan, LDEHAAN, 515.123.4569, 1987-06-19, AD_VP, 17000, 0, 100, 90), CREATE TABLE `job_history` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY REFERENCES employees(EMPLOYEE_ID), START_DATE date PRIMARY KEY, END_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `job_history`: (102, 1993-01-13, 1998-07-24, IT_PROG, 60), (101, 1989-09-21, 1993-10-27, AC_ACCOUNT, 110), (101, 1993-10-28, 1997-03-15, AC_MGR, 110), CREATE TABLE `locations` ( LOCATION_ID decimal(4,0) PRIMARY KEY, STREET_ADDRESS varchar(40), POSTAL_CODE varchar(12), CITY varchar(30), STATE_PROVINCE varchar(25), COUNTRY_ID varchar(2) REFERENCES countries(COUNTRY_ID) ); Sample rows from `locations`: (1000, 1297 Via Cola di Rie, 989, Roma, , IT), (1100, 93091 Calle della Testa, 10934, Venice, , IT), (1200, 2017 Shinjuku-ku, 1689, Tokyo, Tokyo Prefecture, JP), ",
        "output": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of wrestlers and the elimination moves? ###filtered_database_schema: CREATE TABLE `wrestler` ( Wrestler_ID INT PRIMARY KEY, Name TEXT, Reign TEXT, Days_held TEXT, Location TEXT, Event TEXT ); Sample rows from `wrestler`: (1, Rey Misterio Sr., 1, 344, Tijuana , Mexico, Live event), (2, Fishman, 1, 113, Tijuana , Mexico, Live event), (3, Villaño IV, 1, 1285, Tijuana , Mexico, Live event), CREATE TABLE `Elimination` ( Elimination_ID TEXT PRIMARY KEY, Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID), Team TEXT, Eliminated_By TEXT, Elimination_Move TEXT, Time TEXT ); Sample rows from `Elimination`: (1, 1, Team Orton, Punk, Go To Sleep, 00:11), (2, 2, Team Batista, Benjamin, Paydirt, 07:38), (3, 4, Team Batista, Orton, Rope hung DDT, 10:45), ",
        "output": "SELECT t2.name ,  t1.elimination_move FROM elimination as t1 JOIN wrestler as t2 ON t1.wrestler_id  =  t2.wrestler_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names and year of construction for the mills of 'Grondzeiler' type? ###filtered_database_schema: CREATE TABLE `architect` ( id TEXT PRIMARY KEY, name TEXT, nationality TEXT, gender TEXT ); Sample rows from `architect`: (1, Frank Lloyd Wright, American, male), (2, Frank Gehry, Canadian, male), (3, Zaha Hadid, Iraqi, British, female), CREATE TABLE `bridge` ( architect_id INT REFERENCES architect(id), id INT PRIMARY KEY, name TEXT, location TEXT, length_meters REAL, length_feet REAL ); Sample rows from `bridge`: (1, 1, Xian Ren Qiao (Fairy Bridge), Guangxi , China, 121.0, 400.0), (2, 2, Landscape Arch, Arches National Park , Utah , USA, 88.0, 290.0), (3, 3, Kolob Arch, Zion National Park , Utah , USA, 87.0, 287.0), CREATE TABLE `mill` ( architect_id INT REFERENCES architect(id), id INT PRIMARY KEY, location TEXT, name TEXT, type TEXT, built_year INT, notes TEXT ); Sample rows from `mill`: (1, 1, Coswarem, Le Vieux Molen, Grondzeiler, 1840, Molenechos (Dutch)), (1, 2, Donceel, Moulin Bertrand, Grondzeiler, 1890, Molenechos (Dutch)), (2, 3, Fexhe-le-haut-Clocher, Moulin de Fexhe, Grondzeiler, 1843, Molenechos (Dutch)), ",
        "output": "SELECT name ,  built_year FROM mill WHERE type  =  'Grondzeiler'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many orders does Luca Mancini have in his invoices? ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT COUNT(*) FROM customers as t1 JOIN invoices as t2 ON t1.id = t2.customer_id WHERE t1.first_name = \"Lucas\" AND t1.last_name = \"Mancini\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are dates of birth of all the guests whose gender is \"Male\"? ###filtered_database_schema: CREATE TABLE `Apartment_Buildings` ( building_id INTEGER PRIMARY KEY, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80) ); Sample rows from `Apartment_Buildings`: (133, Normandie Court, Normandie Court, Studio, 7950 Casper Vista Apt. 176 Marquiseberg, CA 70496, Emma, (948)040-1064x387), (153, Mercedes House, Mercedes House, Studio, 354 Otto Villages Charliefort, VT 71664, Brenden, 915-617-2408x832), (191, The Eugene, The Eugene, Flat, 71537 Gorczany Inlet Wisozkburgh, AL 08256, Melyssa, (609)946-0491), CREATE TABLE `Apartments` ( apt_id INTEGER PRIMARY KEY, building_id INTEGER REFERENCES Apartment_Buildings(building_id), apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5) ); Sample rows from `Apartments`: (1, 808, Flat, Suite 645, 1, 3, 7), (2, 624, Flat, Apt. 585, 2, 4, 5), (3, 225, Studio, Apt. 908, 1, 6, 7), CREATE TABLE `Apartment_Facilities` ( apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id), facility_code CHAR(15) PRIMARY KEY ); Sample rows from `Apartment_Facilities`: (1, Boardband), (2, Boardband), (3, Gym), CREATE TABLE `Guests` ( guest_id INTEGER PRIMARY KEY, gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME ); Sample rows from `Guests`: (1, Male, Kip, DuBuque, 1995-11-04 07:09:57), (2, Unknown, Rebeca, Runolfsdottir, 1974-05-12 21:53:58), (3, Female, Keon, Treutel, 1974-08-20 09:28:05), CREATE TABLE `Apartment_Bookings` ( apt_booking_id INTEGER PRIMARY KEY, apt_id INTEGER REFERENCES Apartments(apt_id), guest_id INTEGER REFERENCES Guests(guest_id), booking_status_code CHAR(15), booking_start_date DATETIME, booking_end_date DATETIME ); Sample rows from `Apartment_Bookings`: (258, 10, 2, Provisional, 2016-09-26 17:13:49, 2017-10-07 11:38:48), (279, 15, 15, Provisional, 2016-04-01 06:28:08, 2017-10-25 11:08:42), (337, 8, 5, Provisional, 2017-03-13 16:20:14, 2018-02-19 16:59:08), CREATE TABLE `View_Unit_Status` ( apt_id INTEGER REFERENCES Apartments(apt_id), apt_booking_id INTEGER REFERENCES Apartment_Bookings(apt_booking_id), status_date DATETIME PRIMARY KEY, available_yn BIT ); Sample rows from `View_Unit_Status`: (11, 920, 1970-09-28 10:24:29, 1), (15, 575, 1972-03-23 22:55:53, 1), (15, 924, 1973-10-28 04:30:14, 1), ",
        "output": "SELECT date_of_birth FROM guests WHERE gender_code  =  \"Male\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: papers in pldi 2015 ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: find the number of reviews written for \" Cafe Zinho \" restaurant in Texas ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT COUNT(DISTINCT t3.text) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN review as t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what were some Parsing based papers in acl 2012 ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Whah are the name of each industry and the number of companies in that industry? ###filtered_database_schema: CREATE TABLE `buildings` ( id INT PRIMARY KEY, name TEXT, City TEXT, Height INT, Stories INT, Status TEXT ); Sample rows from `buildings`: (1, Torre KOI, Monterrey, 220, 67, under construction), (2, Torre Mitikah, Mexico City, 210, 60, under construction), (3, Punto Chapultepec, Mexico City, 210, 59, proposed), CREATE TABLE `Companies` ( id INT PRIMARY KEY, name TEXT, Headquarters TEXT, Industry TEXT, Sales_billion REAL, Profits_billion REAL, Assets_billion REAL, Market_Value_billion TEXT ); Sample rows from `Companies`: (1, JPMorgan Chase, USA, Banking, 115.5, 17.4, 2117.6, 182.2), (2, HSBC, UK, Banking, 103.3, 13.3, 2467.9, 186.5), (3, General Electric, USA, Conglomerate, 156.2, 11.6, 751.2, 216.2), CREATE TABLE `Office_locations` ( building_id INT PRIMARY KEY REFERENCES buildings(id), company_id INT PRIMARY KEY REFERENCES Companies(id), move_in_year INT ); Sample rows from `Office_locations`: (1, 1, 2021), (2, 2, 2022), (3, 4, 2023), ",
        "output": "SELECT industry ,  COUNT(*) FROM companies GROUP BY industry"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the times used by climbers who climbed mountains in the country of Uganda? ###filtered_database_schema: CREATE TABLE `mountain` ( Mountain_ID INT PRIMARY KEY, Name TEXT, Height REAL, Prominence REAL, Range TEXT, Country TEXT ); Sample rows from `mountain`: (1, Kibo (Uhuru Pk), 5895.0, 5885.0, Kilimanjaro, Tanzania), (2, Mount Kenya (Batian), 5199.0, 3825.0, Mount Kenya, Kenya), (3, Mawenzi (Hans Meyer Pk), 5148.0, 850.0, Kilimanjaro, Tanzania), CREATE TABLE `climber` ( Climber_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Time TEXT, Points REAL, Mountain_ID INT REFERENCES mountain(Mountain_ID) ); Sample rows from `climber`: (1, Klaus Enders, West Germany, 1:13.05.6, 15.0, 1), (2, Siegfried Schauzu, West Germany, 1:14.56.4, 12.0, 1), (3, Hans Luthringhauser, West Germany, 1:16.58.0, 10.0, 2), ",
        "output": "SELECT t1.time FROM climber as t1 JOIN mountain as t2 ON t1.mountain_id  =  t2.mountain_id WHERE t2.country  =  \"Uganda\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the document type code for the document with the id 2. ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( document_type_code CHAR(15) PRIMARY KEY, document_type_description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CD, b), (Paper, u), (Hard Drive, f), CREATE TABLE `Roles` ( role_code CHAR(15) PRIMARY KEY, role_description VARCHAR(255) ); Sample rows from `Roles`: (ED, Editor), (PT, Photo), (MG, Manager), CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (0, IT), (1, MX), (2, DE), CREATE TABLE `Ref_Document_Status` ( document_status_code CHAR(15) PRIMARY KEY, document_status_description VARCHAR(255) ); Sample rows from `Ref_Document_Status`: (working, currently working on), (done, mailed), (overdue, mailed late), CREATE TABLE `Ref_Shipping_Agents` ( shipping_agent_code CHAR(15) PRIMARY KEY, shipping_agent_name VARCHAR(255), shipping_agent_description VARCHAR(255) ); Sample rows from `Ref_Shipping_Agents`: (UP, UPS, g), (US, USPS, q), (AL, Airline, w), CREATE TABLE `Documents` ( document_id INTEGER, document_status_code CHAR(15) REFERENCES Ref_Document_Status(document_status_code), document_type_code CHAR(15) REFERENCES Ref_Document_Types(document_type_code), shipping_agent_code CHAR(15) REFERENCES Ref_Shipping_Agents(shipping_agent_code), receipt_date DATETIME, receipt_number VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Documents`: (1, working, CD, UP, 2008-04-21 20:42:25, 19, z), (2, done, Paper, US, 1974-05-08 00:00:46, 34, h), (3, done, Paper, UP, 2014-12-25 17:22:44, 93, h), CREATE TABLE `Employees` ( employee_id INTEGER, role_code CHAR(15) REFERENCES Roles(role_code), employee_name VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Employees`: (1, ED, Koby, h), (2, ED, Kenyon, f), (3, PR, Haley, b), CREATE TABLE `Document_Drafts` ( document_id INTEGER PRIMARY KEY REFERENCES Documents(document_id), draft_number INTEGER PRIMARY KEY, draft_details VARCHAR(255) ); Sample rows from `Document_Drafts`: (1, 0, e), (1, 2, k), (2, 1, v), CREATE TABLE `Draft_Copies` ( document_id INTEGER PRIMARY KEY REFERENCES Document_Drafts(document_id), draft_number INTEGER PRIMARY KEY REFERENCES Document_Drafts(draft_number), copy_number INTEGER PRIMARY KEY ); Sample rows from `Draft_Copies`: (2, 8, 5), (4, 9, 6), (23, 9, 15), CREATE TABLE `Circulation_History` ( document_id INTEGER PRIMARY KEY REFERENCES Draft_Copies(document_id), draft_number INTEGER PRIMARY KEY REFERENCES Draft_Copies(draft_number), copy_number INTEGER PRIMARY KEY REFERENCES Draft_Copies(copy_number), employee_id INTEGER PRIMARY KEY REFERENCES Employees(employee_id) ); Sample rows from `Circulation_History`: (20, 17, 15, 8), (1, 2, 5, 1), (2, 1, 4, 2), CREATE TABLE `Documents_Mailed` ( document_id INTEGER PRIMARY KEY REFERENCES Documents(document_id), mailed_to_address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), mailing_date DATETIME ); Sample rows from `Documents_Mailed`: (2, 8, 1977-04-01 17:03:50), (4, 3, 1992-11-07 15:03:41), (4, 9, 1973-02-21 10:17:01), ",
        "output": "SELECT document_type_code FROM documents WHERE document_id = 2;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of regions that were not affected? ###filtered_database_schema: CREATE TABLE `storm` ( Storm_ID INT PRIMARY KEY, Name TEXT, Dates_active TEXT, Max_speed INT, Damage_millions_USD REAL, Number_Deaths INT ); Sample rows from `storm`: (1, One, May19–May25, 995, 13.0, 0), (2, Two, August3–August10, 972, 10.75, 7), (3, Three, August5–August14, 972, 13.0, 52), CREATE TABLE `region` ( Region_id INT PRIMARY KEY, Region_code TEXT, Region_name TEXT ); Sample rows from `region`: (1, AF, Afghanistan), (2, AL, Albania), (3, DZ, Algeria), CREATE TABLE `affected_region` ( Region_id INT PRIMARY KEY REFERENCES region(Region_id), Storm_ID INT PRIMARY KEY REFERENCES storm(Storm_ID), Number_city_affected REAL ); Sample rows from `affected_region`: (1, 1, 10.0), (2, 1, 15.0), (3, 3, 30.0), ",
        "output": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Please list the countries and years of film market estimations. ###filtered_database_schema: CREATE TABLE `film` ( Film_ID INT PRIMARY KEY, Title TEXT, Studio TEXT, Director TEXT, Gross_in_dollar INT ); Sample rows from `film`: (1, ET the Extra-Terrestrial, Universal, Steven Spielberg, 435110554), (2, Tootsie, Columbia, Sydney Pollack, 177200000), (3, An Officer and a Gentleman, Paramount / Lorimar, Taylor Hackford, 129795554), CREATE TABLE `market` ( Market_ID INT PRIMARY KEY, Country TEXT, Number_cities INT ); Sample rows from `market`: (1, Japan, 209), (2, China, 540), (3, USA, 700), CREATE TABLE `film_market_estimation` ( Estimation_ID INT PRIMARY KEY, Low_Estimate REAL, High_Estimate REAL, Film_ID INT REFERENCES film(Film_ID), Type TEXT, Market_ID INT REFERENCES market(Market_ID), Year INT ); Sample rows from `film_market_estimation`: (1, 80000.0, 80400.0, 1, Mass suicide murder, 1, 1945), (2, 8000.0, 8000.0, 2, Mass suicide, 2, 1944), (3, 3000.0, 80400.0, 3, Mass human sacrifice, 3, 1487), ",
        "output": "SELECT t2.country ,  t1.year FROM film_market_estimation as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List all 5 star Italian restaurant ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.rating  =  5 AND t2.category_name  =  \"Italian\" AND t3.category_name  =  \"restaurant\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the apartment numbers, start dates, and end dates of all the apartment bookings. ###filtered_database_schema: CREATE TABLE `Apartment_Buildings` ( building_id INTEGER PRIMARY KEY, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80) ); Sample rows from `Apartment_Buildings`: (133, Normandie Court, Normandie Court, Studio, 7950 Casper Vista Apt. 176 Marquiseberg, CA 70496, Emma, (948)040-1064x387), (153, Mercedes House, Mercedes House, Studio, 354 Otto Villages Charliefort, VT 71664, Brenden, 915-617-2408x832), (191, The Eugene, The Eugene, Flat, 71537 Gorczany Inlet Wisozkburgh, AL 08256, Melyssa, (609)946-0491), CREATE TABLE `Apartments` ( apt_id INTEGER PRIMARY KEY, building_id INTEGER REFERENCES Apartment_Buildings(building_id), apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5) ); Sample rows from `Apartments`: (1, 808, Flat, Suite 645, 1, 3, 7), (2, 624, Flat, Apt. 585, 2, 4, 5), (3, 225, Studio, Apt. 908, 1, 6, 7), CREATE TABLE `Apartment_Facilities` ( apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id), facility_code CHAR(15) PRIMARY KEY ); Sample rows from `Apartment_Facilities`: (1, Boardband), (2, Boardband), (3, Gym), CREATE TABLE `Guests` ( guest_id INTEGER PRIMARY KEY, gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME ); Sample rows from `Guests`: (1, Male, Kip, DuBuque, 1995-11-04 07:09:57), (2, Unknown, Rebeca, Runolfsdottir, 1974-05-12 21:53:58), (3, Female, Keon, Treutel, 1974-08-20 09:28:05), CREATE TABLE `Apartment_Bookings` ( apt_booking_id INTEGER PRIMARY KEY, apt_id INTEGER REFERENCES Apartments(apt_id), guest_id INTEGER REFERENCES Guests(guest_id), booking_status_code CHAR(15), booking_start_date DATETIME, booking_end_date DATETIME ); Sample rows from `Apartment_Bookings`: (258, 10, 2, Provisional, 2016-09-26 17:13:49, 2017-10-07 11:38:48), (279, 15, 15, Provisional, 2016-04-01 06:28:08, 2017-10-25 11:08:42), (337, 8, 5, Provisional, 2017-03-13 16:20:14, 2018-02-19 16:59:08), CREATE TABLE `View_Unit_Status` ( apt_id INTEGER REFERENCES Apartments(apt_id), apt_booking_id INTEGER REFERENCES Apartment_Bookings(apt_booking_id), status_date DATETIME PRIMARY KEY, available_yn BIT ); Sample rows from `View_Unit_Status`: (11, 920, 1970-09-28 10:24:29, 1), (15, 575, 1972-03-23 22:55:53, 1), (15, 924, 1973-10-28 04:30:14, 1), ",
        "output": "SELECT t2.apt_number ,  t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of people who are not entrepreneurs? ###filtered_database_schema: CREATE TABLE `entrepreneur` ( Entrepreneur_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Company TEXT, Money_Requested REAL, Investor TEXT ); Sample rows from `entrepreneur`: (1, 1, Umbrolly, 150000.0, Duncan Bannatyne), (2, 2, Grails Ltd, 120000.0, Doug Richard), (3, 3, Le Beanock, 54000.0, Rachel Elnaugh), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Height REAL, Weight REAL, Date_of_Birth TEXT ); Sample rows from `people`: (1, Francesco Postiglione, 1.9, 80.0, 1972-04-29), (2, Leonardo Binchi, 1.86, 57.0, 1975-08-27), (3, Fabrizio Buonocore, 1.83, 45.0, 1977-04-28), ",
        "output": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM entrepreneur)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average attendance of stadiums with capacity percentage higher than 100%? ###filtered_database_schema: CREATE TABLE `stadium` ( id INT PRIMARY KEY, name TEXT, Home_Games INT, Average_Attendance REAL, Total_Attendance REAL, Capacity_Percentage REAL ); Sample rows from `stadium`: (1, Cowboys Stadium, 8, 87047.0, 696377.0, 108.8), (2, FedExField, 8, 83172.0, 665380.0, 90.7), (3, New Meadowlands Stadium, 8, 79019.0, 632156.0, 95.8), CREATE TABLE `game` ( stadium_id INT REFERENCES stadium(id), id INT PRIMARY KEY, Season INT, Date TEXT, Home_team TEXT, Away_team TEXT, Score TEXT, Competition TEXT ); Sample rows from `game`: (1, 1, 2007, 18 May 2007, Quruvchi, Pakhtakor, 1–1, League), (2, 2, 2007, 22 September 2007, Pakhtakor, Quruvchi, 0–0, League), (3, 3, 2007, 9 December 2007, Pakhtakor, Quruvchi, 0–0 (7:6), Cup), CREATE TABLE `injury_accident` ( game_id INT REFERENCES game(id), id INT PRIMARY KEY, Player TEXT, Injury TEXT, Number_of_matches TEXT, Source TEXT ); Sample rows from `injury_accident`: (1, 1, Davide Santon, Clean-up surgery on his right knee, 12, inter.it), (2, 2, Maicon, Knee problem, 2, inter.it), (3, 3, Dejan Stanković, Hamstring muscle strain in his left thigh, 2, inter.it), ",
        "output": "SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which types of policy are chosen by more than 2 customers? Give me the policy type codes. ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_Details VARCHAR(255) ); Sample rows from `Customers`: (252, America Jaskolski), (263, Ellsworth Paucek), (334, Mrs. Hanna Willms), CREATE TABLE `Staff` ( Staff_ID INTEGER, Staff_Details VARCHAR(255) ); Sample rows from `Staff`: (406, Clifton), (427, Cathryn), (510, Kaci), CREATE TABLE `Policies` ( Policy_ID INTEGER, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Policy_Type_Code CHAR(15), Start_Date DATETIME, End_Date DATETIME ); Sample rows from `Policies`: (125, 808, Deputy, 2018-02-10 08:56:30, 2018-03-18 09:17:26), (151, 380, Jurisdiction, 2017-12-20 06:02:31, 2017-09-16 22:04:13), (287, 334, Jurisdiction, 2017-03-16 18:16:52, 2017-11-24 06:36:51), CREATE TABLE `Claim_Headers` ( Claim_Header_ID INTEGER, Claim_Status_Code CHAR(15), Claim_Type_Code CHAR(15), Policy_ID INTEGER REFERENCES Policies(Policy_ID), Date_of_Claim DATETIME, Date_of_Settlement DATETIME, Amount_Claimed DECIMAL(20,4), Amount_Piad DECIMAL(20,4) ); Sample rows from `Claim_Headers`: (15, Settled, Handphone Subsidy, 518, 2016-05-31 06:07:11, 2018-02-23 03:46:38, 349.15, 582.03), (24, Disputed, Child Birth, 518, 2016-12-30 21:43:21, 2017-10-08 21:43:14, 318.16, 309.2), (27, Disputed, Overtime Meal Subsidy, 518, 2017-05-01 13:34:43, 2017-11-16 04:06:05, 362.71, 132.97), CREATE TABLE `Claims_Documents` ( Claim_ID INTEGER PRIMARY KEY REFERENCES Claim_Headers(Claim_Header_ID), Document_Type_Code CHAR(15) PRIMARY KEY, Created_by_Staff_ID INTEGER REFERENCES Staff(Staff_ID), Created_Date INTEGER ); Sample rows from `Claims_Documents`: (24, Document, 718, 8), (27, Document, 986, 6), (27, Medical, 427, 8), CREATE TABLE `Claims_Processing_Stages` ( Claim_Stage_ID INTEGER, Next_Claim_Stage_ID INTEGER, Claim_Status_Name VARCHAR(255), Claim_Status_Description VARCHAR(255) ); Sample rows from `Claims_Processing_Stages`: (1, 1, Open, Open a new claim), (3, 1, Close, Close a claim), CREATE TABLE `Claims_Processing` ( Claim_Processing_ID INTEGER, Claim_ID INTEGER REFERENCES Claim_Headers(Claim_Header_ID), Claim_Outcome_Code CHAR(15), Claim_Stage_ID INTEGER, Staff_ID INTEGER REFERENCES Staff(Staff_ID) ); Sample rows from `Claims_Processing`: (118, 28, In progress, 1, 771), (145, 62, In progress, 1, 589), (213, 27, In progress, 1, 589), ",
        "output": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING COUNT(*)  >  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of the organization that has published the largest number of papers. ###filtered_database_schema: CREATE TABLE `Inst` ( instID INTEGER, name TEXT, country TEXT ); Sample rows from `Inst`: (1000, University of Oxford, UK), (1010, Northeastern University, USA), (1020, Indiana University, USA), CREATE TABLE `Authors` ( authID INTEGER, lname TEXT, fname TEXT ); Sample rows from `Authors`: (50, Gibbons, Jeremy), (51, Hinze, Ralf), (52, James, Daniel W. H.), CREATE TABLE `Papers` ( paperID INTEGER, title TEXT ); Sample rows from `Papers`: (200, Just do it: Simple Monadic Equational Reasoning), (201, Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory), (202, Functional Pearl: Modular Rollback through Control Logging), CREATE TABLE `Authorship` ( authID INTEGER PRIMARY KEY REFERENCES Authors(authID), instID INTEGER PRIMARY KEY REFERENCES Inst(instID), paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID), authOrder INTEGER ); Sample rows from `Authorship`: (50, 1000, 200, 1), (51, 1000, 200, 2), (51, 1000, 201, 1), ",
        "output": "SELECT t1.name FROM inst as t1 JOIN authorship as t2 ON t1.instid  =  t2.instid JOIN papers as t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the different states that have students trying out? ###filtered_database_schema: CREATE TABLE `College` ( cName varchar(20) PRIMARY KEY, state varchar(2), enr numeric(5,0) ); Sample rows from `College`: (LSU, LA, 18000), (ASU, AZ, 12000), (OU, OK, 22000), CREATE TABLE `Player` ( pID numeric(5,0) PRIMARY KEY, pName varchar(20), yCard varchar(3), HS numeric(5,0) ); Sample rows from `Player`: (10001, Andrew, no, 1200), (20002, Blake, no, 1600), (30003, Charles, no, 300), CREATE TABLE `Tryout` ( pID numeric(5,0) PRIMARY KEY REFERENCES Player(pID), cName varchar(20) PRIMARY KEY REFERENCES College(cName), pPos varchar(8), decision varchar(3) ); Sample rows from `Tryout`: (10001, LSU, goalie, no), (10001, ASU, goalie, yes), (20002, FSU, striker, yes), ",
        "output": "SELECT DISTINCT state FROM college as t1 JOIN tryout as t2 ON t1.cname  =  t2.cname"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the sex of the candidate who had the highest unsure rate? ###filtered_database_schema: CREATE TABLE `candidate` ( Candidate_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Poll_Source TEXT, Date TEXT, Support_rate REAL, Consider_rate REAL, Oppose_rate REAL, Unsure_rate REAL ); Sample rows from `candidate`: (1, 1, WNBC/Marist Poll, Feb 12–15, 2007, 0.25, 0.3, 0.43, 0.2), (2, 3, WNBC/Marist Poll, Feb 12–15, 2007, 0.17, 0.42, 0.32, 0.9), (3, 4, FOX News/Opinion Dynamics Poll, Feb 13–14, 2007, 0.18, 0.34, 0.44, 0.3), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Sex TEXT, Name TEXT, Date_of_Birth TEXT, Height REAL, Weight REAL ); Sample rows from `people`: (1, M, Hubert Henno, 06.10.1976, 188.0, 83.0), (2, M, Dominique Daquin, 10.11.1972, 197.0, 85.0), (3, F, Stéphane Antiga, 03.02.1976, 200.0, 94.0), ",
        "output": "SELECT t1.sex FROM people as t1 JOIN candidate as t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY AVG(t2.unsure_rate) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of the amenities that Smith Hall has? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT t3.amenity_name FROM dorm as t1 JOIN has_amenity as t2 ON t1.dormid  =  t2.dormid JOIN dorm_amenity as t3 ON t2.amenid  =  t3.amenid WHERE t1.dorm_name  =  'Smith Hall'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the branch name and city without any registered members. ###filtered_database_schema: CREATE TABLE `member` ( Member_ID INT PRIMARY KEY, Card_Number TEXT, Name TEXT, Hometown TEXT, Level INT ); Sample rows from `member`: (1, LE99, Jeremy Jarmon, Collierville, Tennessee, 6), (2, LT98, Myron Pryor, Louisville, Kentucky, 6), (3, RT91, Corey Peters, Louisville, Kentucky, 6), CREATE TABLE `branch` ( Branch_ID INT PRIMARY KEY, Name TEXT, Open_year TEXT, Address_road TEXT, City TEXT, membership_amount TEXT ); Sample rows from `branch`: (1, Alexandre, 2001, Valleys Place, London, 112), (2, Popert, 2009, Oaks Crescent, London, 11), (3, Stanley, 2013, Abbott Street, London, 6), CREATE TABLE `membership_register_branch` ( Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Branch_ID TEXT REFERENCES branch(Branch_ID), Register_Year TEXT ); Sample rows from `membership_register_branch`: (1, 1, 2016), (2, 4, 2016), (3, 1, 2017), CREATE TABLE `purchase` ( Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Branch_ID TEXT PRIMARY KEY REFERENCES branch(Branch_ID), Year TEXT PRIMARY KEY, Total_pounds REAL ); Sample rows from `purchase`: (1, 3, 2018, 2013.32), (2, 5, 2018, 321.13), (3, 1, 2017, 988.09), ",
        "output": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'? ###filtered_database_schema: CREATE TABLE `stadium` ( id INT PRIMARY KEY, name TEXT, Home_Games INT, Average_Attendance REAL, Total_Attendance REAL, Capacity_Percentage REAL ); Sample rows from `stadium`: (1, Cowboys Stadium, 8, 87047.0, 696377.0, 108.8), (2, FedExField, 8, 83172.0, 665380.0, 90.7), (3, New Meadowlands Stadium, 8, 79019.0, 632156.0, 95.8), CREATE TABLE `game` ( stadium_id INT REFERENCES stadium(id), id INT PRIMARY KEY, Season INT, Date TEXT, Home_team TEXT, Away_team TEXT, Score TEXT, Competition TEXT ); Sample rows from `game`: (1, 1, 2007, 18 May 2007, Quruvchi, Pakhtakor, 1–1, League), (2, 2, 2007, 22 September 2007, Pakhtakor, Quruvchi, 0–0, League), (3, 3, 2007, 9 December 2007, Pakhtakor, Quruvchi, 0–0 (7:6), Cup), CREATE TABLE `injury_accident` ( game_id INT REFERENCES game(id), id INT PRIMARY KEY, Player TEXT, Injury TEXT, Number_of_matches TEXT, Source TEXT ); Sample rows from `injury_accident`: (1, 1, Davide Santon, Clean-up surgery on his right knee, 12, inter.it), (2, 2, Maicon, Knee problem, 2, inter.it), (3, 3, Dejan Stanković, Hamstring muscle strain in his left thigh, 2, inter.it), ",
        "output": "SELECT player ,  number_of_matches ,  source FROM injury_accident WHERE injury != 'Knee problem'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: number of papers by year from jamie callan ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(t3.paperid)  ,  t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Who are the owners of the programs that broadcast both in the morning and at night? ###filtered_database_schema: CREATE TABLE `program` ( Program_ID INT PRIMARY KEY, Name TEXT, Origin TEXT, Launch REAL, Owner TEXT ); Sample rows from `program`: (1, Aniworld, Hunan, 2005.0, Hunan Broadcasting System (HBS)), (2, Kaku, Beijing, 2004.0, Beijing Television (BTV)), (3, Toonmax, Shanghai, 2005.0, Shanghai Media Group (SMG)), CREATE TABLE `channel` ( Channel_ID INT PRIMARY KEY, Name TEXT, Owner TEXT, Share_in_percent REAL, Rating_in_percent REAL ); Sample rows from `channel`: (1, CCTV-1, CCTV, 4.9, 0.54), (2, Hunan Satellite TV, HBS, 4.81, 0.53), (3, CCTV-8, CCTV, 3.76, 0.41), CREATE TABLE `broadcast` ( Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID), Program_ID INT PRIMARY KEY REFERENCES program(Program_ID), Time_of_day TEXT ); Sample rows from `broadcast`: (1, 1, Morning), (2, 1, Night), (3, 2, Morning), CREATE TABLE `broadcast_share` ( Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID), Program_ID INT PRIMARY KEY REFERENCES program(Program_ID), Date TEXT, Share_in_percent REAL ); Sample rows from `broadcast_share`: (1, 1, 01,May, 3.1), (2, 1, 02,May, 1.8), (3, 2, 03,May, 2.8), ",
        "output": "SELECT t1.owner FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  \"Night\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the total number of hours have done for all students in each department. ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT SUM(stu_hrs) ,  dept_code FROM student GROUP BY dept_code"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show different type codes of products and the number of products with each type code. ###filtered_database_schema: CREATE TABLE `Addresses` ( Address_ID INTEGER PRIMARY KEY, address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 465 Emely Bypass West Mafalda, CO 23309), (2, 669 Carter Trafficway Port Delbert, OK 66249), (3, 38247 Ernser Gateway Suite 442 Bogisichland, VT 71460), CREATE TABLE `Locations` ( Location_ID INTEGER, Other_Details VARCHAR(255) ); Sample rows from `Locations`: (1, Rowe PLC), (2, Ebert, Green and Bogisich), (3, Prohaska LLC), CREATE TABLE `Products` ( Product_ID INTEGER PRIMARY KEY, Product_Type_Code CHAR(15), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4) ); Sample rows from `Products`: (1, Books, Business Policy, 1336.26), (3, Food, Special Dinning, 2894.94), (5, Clothes, Men suits, 3298.84), CREATE TABLE `Parties` ( Party_ID INTEGER, Party_Details VARCHAR(255) ); Sample rows from `Parties`: (3, European People's Party), (4, European Free Alliance), (5, European Alliance for Freedom), CREATE TABLE `Assets` ( Asset_ID INTEGER, Other_Details VARCHAR(255) ); Sample rows from `Assets`: (1, Transportation Cars), (2, Meeting Rooms), (3, Dinning Tables), CREATE TABLE `Channels` ( Channel_ID INTEGER, Other_Details VARCHAR(255) ); Sample rows from `Channels`: (1, 145), (2, 348), (3, 933), CREATE TABLE `Finances` ( Finance_ID INTEGER, Other_Details VARCHAR(255) ); Sample rows from `Finances`: (1, Mutual), (2, Good), (3, Bad), CREATE TABLE `Events` ( Event_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Channel_ID INTEGER, Event_Type_Code CHAR(15), Finance_ID INTEGER REFERENCES Finances(Finance_ID), Location_ID INTEGER REFERENCES Locations(Location_ID) ); Sample rows from `Events`: (1, 3, 12, Trade Show, 2, 13), (2, 15, 13, Press Conferenc, 8, 11), (3, 12, 1, Press Conferenc, 12, 6), CREATE TABLE `Products_in_Events` ( Product_in_Event_ID INTEGER, Event_ID INTEGER REFERENCES Events(Event_ID), Product_ID INTEGER REFERENCES Products(Product_ID) ); Sample rows from `Products_in_Events`: (13, 4, 29), (23, 8, 3), (32, 14, 10), CREATE TABLE `Parties_in_Events` ( Party_ID INTEGER PRIMARY KEY REFERENCES Parties(Party_ID), Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID), Role_Code CHAR(15) ); Sample rows from `Parties_in_Events`: (3, 7, Organizer), (3, 8, Participant), (4, 1, Organizer), CREATE TABLE `Agreements` ( Document_ID INTEGER, Event_ID INTEGER REFERENCES Events(Event_ID) ); Sample rows from `Agreements`: (1, 13), (2, 13), (3, 15), CREATE TABLE `Assets_in_Events` ( Asset_ID INTEGER PRIMARY KEY, Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID) REFERENCES Events(Event_ID) ); Sample rows from `Assets_in_Events`: (1, 4), (1, 5), (1, 9), ",
        "output": "SELECT product_type_code ,  COUNT(*) FROM products GROUP BY product_type_code"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the starting year for the oldest technician? ###filtered_database_schema: CREATE TABLE `repair` ( repair_ID INT PRIMARY KEY, name TEXT, Launch_Date TEXT, Notes TEXT ); Sample rows from `repair`: (1, Discoverer, 21 Jan 2009, repair Failed. Failed to achieve orbit), (2, Discoverer 1, 28 Feb 2009, First object in polar orbit), (3, Discoverer 3, 03 Jun 2009, repair failed. Failed to achieve orbit), CREATE TABLE `machine` ( Machine_ID INT PRIMARY KEY, Making_Year INT, Class TEXT, Team TEXT, Machine_series TEXT, value_points REAL, quality_rank INT ); Sample rows from `machine`: (1, 1991, 125cc, Hero Sports TS- Honda, RS125, 105.0, 2), (2, 1992, 125cc, Marlboro Pileri - Honda, RS125, 57.0, 1), (3, 1993, 125cc, Marlboro Pileri - Honda, RS125, 129.0, 4), CREATE TABLE `technician` ( technician_id REAL PRIMARY KEY, Name TEXT, Team TEXT, Starting_Year REAL, Age INT ); Sample rows from `technician`: (1.0, Joe Sewell, NYY, 2012.0, 37), (2.0, John Brown, NYY, 2013.0, 36), (3.0, Tony Sewell, CLE, 2005.0, 43), CREATE TABLE `repair_assignment` ( technician_id INT PRIMARY KEY REFERENCES technician(technician_id), repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID), Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID) ); Sample rows from `repair_assignment`: (1, 1, 1), (2, 2, 2), (3, 3, 3), ",
        "output": "SELECT starting_year FROM technician ORDER BY age DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For each player, what are their name, season, and country that they belong to? ###filtered_database_schema: CREATE TABLE `country` ( Country_id INT PRIMARY KEY, Country_name TEXT, Capital TEXT, Official_native_language TEXT ); Sample rows from `country`: (1, Indonesia, Jakarta, Bahasa Indonesia), (2, Iran, Tehran, Persian ( Arabic script )), (3, Iraq, Baghdad, Arabic ( Arabic script ) Kurdish), CREATE TABLE `team` ( Team_id INT PRIMARY KEY, Name TEXT ); Sample rows from `team`: (1, Columbus Crew), (2, Evalyn Feil), (3, Anais VonRueden), CREATE TABLE `match_season` ( Season REAL PRIMARY KEY, Player TEXT, Position TEXT, Country INT REFERENCES country(Country_id), Team INT REFERENCES team(Team_id), Draft_Pick_Number INT, Draft_Class TEXT, College TEXT ); Sample rows from `match_season`: (1996.0, Steve Ralston Category:Articles with hCards, Midfielder, 6, 1, 18, 1996 MLS College Draft, Florida International), (1997.0, Mike Duhaney Category:Articles with hCards, Defender, 6, 2, 87, 1996 MLS Inaugural Player Draft, UNLV), (1998.0, Ben Olsen Category:Articles with hCards, Midfielder, 4, 3, 2, Project-40, Virginia), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Years_Played TEXT, Total_WL TEXT, Singles_WL TEXT, Doubles_WL TEXT, Team INT REFERENCES team(Team_id) ); Sample rows from `player`: (1, Cho Soong-Jae (630), 1 (2011), 2–0, 1–0, 1–0, 1), (2, Chung Hong (717), 1 (2011), 0–0, 0–0, 0–0, 1), (3, Im Kyu-tae (492), 8 (2003–2005, 2007–2011), 6–9, 5–7, 1–2, 1), ",
        "output": "SELECT t2.season ,  t2.player ,  t1.country_name FROM country as t1 JOIN match_season as t2 ON t1.country_id  =  t2.country"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of courses taught by the tutor who has personal name \"Julio\". ###filtered_database_schema: CREATE TABLE `Course_Authors_and_Tutors` ( author_id INTEGER, author_tutor_ATB VARCHAR(3), login_name VARCHAR(40), password VARCHAR(40), personal_name VARCHAR(80), middle_name VARCHAR(80), family_name VARCHAR(80), gender_mf VARCHAR(1), address_line_1 VARCHAR(80) ); Sample rows from `Course_Authors_and_Tutors`: (1, 331, jmckenzie, c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b, Cathrine, Ruthie, Grant, 0, 756 Monahan Mews Spinkashire, NJ 64230-5098), (2, 975, heidenreich.ara, 24b0ee84063c3b017ab1839e01b7280f47f7c7c2, Retha, Corene, Armstrong, 0, 98623 Huels Manor Jasttown, DE 31611), (3, 349, clementina29, cdaf6c3483f19e2253659a40a3aab786a3390f78, Darius, Ethyl, Reichel, 0, 99296 Keeling Courts North Audreanne, IL 28272), CREATE TABLE `Students` ( student_id INTEGER, date_of_registration DATETIME, date_of_latest_logon DATETIME, login_name VARCHAR(40), password VARCHAR(10), personal_name VARCHAR(40), middle_name VARCHAR(40), family_name VARCHAR(40) ); Sample rows from `Students`: (1, 2015-07-22 13:32:35, 2017-10-17 22:52:26, annamae.hoppe, db8765bb6f, Wilson, Aubrey, Ward), (2, 2015-07-02 00:21:42, 2017-06-24 22:16:27, wmiller, 35faf8182a, Karson, Luella, Jaskolski), (3, 2015-10-11 03:23:27, 2018-03-10 23:22:23, ahartmann, 8e064ec4e6, Mariela, Brandt, Legros), CREATE TABLE `Subjects` ( subject_id INTEGER, subject_name VARCHAR(120) ); Sample rows from `Subjects`: (1, Computer Science), (2, Arts), (3, Language), CREATE TABLE `Courses` ( course_id INTEGER, author_id INTEGER REFERENCES Course_Authors_and_Tutors(author_id), subject_id INTEGER REFERENCES Subjects(subject_id), course_name VARCHAR(120), course_description VARCHAR(255) ); Sample rows from `Courses`: (1, 8, 1, database, database), (2, 6, 1, advanced database, advanced database), (3, 15, 1, operating system, operating system), CREATE TABLE `Student_Course_Enrolment` ( registration_id INTEGER, student_id INTEGER REFERENCES Students(student_id), course_id INTEGER REFERENCES Courses(course_id), date_of_enrolment DATETIME, date_of_completion DATETIME ); Sample rows from `Student_Course_Enrolment`: (1, 11, 2, 2017-10-09 07:09:02, 2018-02-26 07:48:52), (2, 15, 4, 2017-11-13 12:49:33, 2018-03-04 01:24:56), (3, 10, 8, 2017-10-17 13:50:40, 2018-03-22 02:53:01), CREATE TABLE `Student_Tests_Taken` ( registration_id INTEGER REFERENCES Student_Course_Enrolment(registration_id), date_test_taken DATETIME, test_result VARCHAR(255) ); Sample rows from `Student_Tests_Taken`: (12, 2018-03-25 03:27:16, Fail), (10, 2018-03-25 21:50:22, Pass), (7, 2018-03-21 00:32:25, Pass), ",
        "output": "SELECT t2.course_name FROM course_authors_and_tutors as t1 JOIN courses as t2 ON t1.author_id  =  t2.author_id WHERE t1.personal_name  =  \"Julio\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For each classroom report the grade that is taught in it. Report just the classroom number and the grade number. ###filtered_database_schema: CREATE TABLE `list` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Grade INTEGER, Classroom INTEGER ); Sample rows from `list`: (CAR, MAUDE, 2, 101), (KRISTENSEN, STORMY, 6, 112), (VANDERWOUDE, SHERWOOD, 3, 107), CREATE TABLE `teachers` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Classroom INTEGER ); Sample rows from `teachers`: (MACROSTIE, MIN, 101), (COVIN, JEROME, 102), (MOYER, OTHA, 103), ",
        "output": "SELECT DISTINCT classroom ,  grade FROM list"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which kind of policy type was chosen by the most customers? ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_Details VARCHAR(255) ); Sample rows from `Customers`: (1, America Jaskolski), (2, Ellsworth Paucek), (3, Mrs. Hanna Willms), CREATE TABLE `Customer_Policies` ( Policy_ID INTEGER, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Policy_Type_Code CHAR(15), Start_Date DATE, End_Date DATE ); Sample rows from `Customer_Policies`: (119, 1, Car, 2018-01-21, 2017-12-15), (141, 2, Life, 2017-08-21, 2017-09-29), (143, 3, Car, 2017-06-16, 2017-12-09), CREATE TABLE `Claims` ( Claim_ID INTEGER, Policy_ID INTEGER REFERENCES Customer_Policies(Policy_ID), Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER ); Sample rows from `Claims`: (143, 744, 2017-03-11, 2017-11-03, 43884, 1085), (423, 552, 2016-08-12, 2018-01-27, 79134, 1724), (442, 473, 2017-02-24, 2018-01-21, 70088, 1189), CREATE TABLE `Settlements` ( Settlement_ID INTEGER, Claim_ID INTEGER REFERENCES Claims(Claim_ID), Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, Customer_Policy_ID INTEGER ); Sample rows from `Settlements`: (357, 486, 2018-08-07, 2018-01-16, 38543, 1181, 515), (412, 621, 2017-08-27, 2018-02-04, 57669, 1427, 617), (476, 801, 2016-09-05, 2018-03-02, 30954, 1805, 943), CREATE TABLE `Payments` ( Payment_ID INTEGER, Settlement_ID INTEGER REFERENCES Settlements(Settlement_ID), Payment_Method_Code VARCHAR(255), Date_Payment_Made DATE, Amount_Payment INTEGER ); Sample rows from `Payments`: (384, 516, MasterCard, 2018-02-16, 241730), (435, 476, MasterCard, 2017-05-28, 448613), (484, 516, MasterCard, 2017-06-24, 456098), ",
        "output": "SELECT policy_type_code FROM customer_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show all product names and the number of customers having an order on each product. ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(50), customer_middle_initial VARCHAR(1), customer_last_name VARCHAR(50), gender VARCHAR(1), email_address VARCHAR(255), login_name VARCHAR(80), login_password VARCHAR(20), phone_number VARCHAR(255), town_city VARCHAR(50), state_county_province VARCHAR(50), country VARCHAR(50) ); Sample rows from `Customers`: (1, Dee, A, Larkin, 1, thora.torphy@example.org, xhartmann, 77789d292604ea04406f, 241.796.1219x37862, North Nellie, WestVirginia, USA), (2, Brennon, H, Weimann, 0, roosevelt.collier@example.org, shayne.lesch, ce97a3e4539347daab96, (943)219-4234x415, South Isabell, Oklahoma, USA), (3, Joesph, K, Schaefer, 0, homenick.ambrose@example.net, feeney.lauriane, a6c7a7064c36b038d402, (488)524-5345, New Nikolas, Arkansas, USA), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 12, 2012-06-27 20:49:56, None), (2, 12, 2012-08-25 07:51:54, None), (3, 8, 2017-11-05 15:32:38, None), CREATE TABLE `Invoices` ( invoice_number INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_date DATETIME ); Sample rows from `Invoices`: (1, 9, 2018-03-01 16:40:48), (2, 9, 2018-03-20 00:21:41), (3, 3, 2018-03-05 08:47:33), CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_account_opened DATETIME, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 8, 2016-07-30 22:22:24, 900, Regular), (2, 3, 2017-05-29 16:45:17, 520, VIP), (3, 8, 2012-05-04 18:50:32, 323, Regular), CREATE TABLE `Product_Categories` ( production_type_code VARCHAR(15) PRIMARY KEY, product_type_description VARCHAR(80), vat_rating DECIMAL(19,4) ); Sample rows from `Product_Categories`: (Food, Food, 15.84), (DVDs, Dvd products, 11.4), (Books, Books, 13.95), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, production_type_code VARCHAR(15) REFERENCES Product_Categories(production_type_code), unit_price DECIMAL(19,4), product_name VARCHAR(80), product_color VARCHAR(20), product_size VARCHAR(20) ); Sample rows from `Products`: (1, 4, Food, 617.95, Coffee Bean, Red, Medium), (2, 4, Books, 558.49, Learning French, Yellow, Medium), (3, 8, Electronics, 563.58, Fans, Black, Medium), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DECIMAL(19,4), transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 13, 12, Payment, 2018-03-15 21:13:57, 613.96, None, None), (2, 9, 1, Payment, 2018-03-13 13:27:46, 368.46, None, None), (3, 6, 1, Refund, 2018-03-03 01:50:25, 1598.25, None, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), product_id INTEGER REFERENCES Products(product_id), product_quantity VARCHAR(50), other_order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 4, 6, None), (2, 4, 10, 7, None), (3, 15, 5, 4, None), CREATE TABLE `Invoice_Line_Items` ( order_item_id INTEGER REFERENCES Order_Items(order_item_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), product_id INTEGER REFERENCES Products(product_id), product_title VARCHAR(80), product_quantity VARCHAR(50), product_price DECIMAL(19,4), derived_product_cost DECIMAL(19,4), derived_vat_payable DECIMAL(19,4), derived_total_cost DECIMAL(19,4) ); Sample rows from `Invoice_Line_Items`: (14, 9, 5, prod_name, 4, 742.37, 191.11, None, 69.82), (3, 9, 15, prod_name, 1, 814.87, 176.29, None, 59.56), (4, 10, 15, prod_name, 8, 943.07, 73.14, None, 59.93), ",
        "output": "SELECT t2.product_name ,  COUNT(*) FROM order_items as t1 JOIN products as t2 ON t1.product_id  =  t2.product_id JOIN orders as t3 ON t3.order_id  =  t1.order_id GROUP BY t2.product_name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the bed type and name of all the rooms with traditional decor? ###filtered_database_schema: CREATE TABLE `Rooms` ( RoomId TEXT PRIMARY KEY, roomName TEXT, beds INTEGER, bedType TEXT, maxOccupancy INTEGER, basePrice INTEGER, decor TEXT ); Sample rows from `Rooms`: (RND, Recluse and defiance, 1, King, 2, 150, modern), (IBS, Interim but salutary, 1, King, 2, 150, traditional), (AOB, Abscond or bolster, 2, Queen, 4, 175, traditional), CREATE TABLE `Reservations` ( Code INTEGER, Room TEXT REFERENCES Rooms(RoomId), CheckIn TEXT, CheckOut TEXT, Rate REAL, LastName TEXT, FirstName TEXT, Adults INTEGER, Kids INTEGER ); Sample rows from `Reservations`: (10105, HBB, 23-OCT-10, 25-OCT-10, 100.0, SELBIG, CONRAD, 1, 0), (10183, IBD, 19-SEP-10, 20-SEP-10, 150.0, GABLER, DOLLIE, 2, 0), (10449, RND, 30-SEP-10, 01-OCT-10, 150.0, KLESS, NELSON, 1, 0), ",
        "output": "SELECT roomname ,  bedtype FROM rooms WHERE decor = \"traditional\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which winery is the wine that has the highest score from? ###filtered_database_schema: CREATE TABLE `grapes` ( ID INTEGER, Grape TEXT PRIMARY KEY, Color TEXT ); Sample rows from `grapes`: (1, Barbera, Red), (2, Cabernet Franc, Red), (3, Cabernet Sauvingnon, Red), CREATE TABLE `appellations` ( No INTEGER, Appelation TEXT PRIMARY KEY, County TEXT, State TEXT, Area TEXT, isAVA TEXT ); Sample rows from `appellations`: (1, Alexander Valley, Sonoma, California, North Coast, Yes), (2, Amador County, Amador, California, Sierra Foothills, No), (3, Amador-Mendocino-Sonoma Counties, N/A, California, N/A, No), CREATE TABLE `wine` ( No INTEGER, Grape TEXT REFERENCES grapes(Grape), Winery TEXT, Appelation TEXT REFERENCES appellations(Appelation), State TEXT, Name TEXT, Year INTEGER, Price INTEGER, Score INTEGER, Cases INTEGER, Drink TEXT ); Sample rows from `wine`: (1, Zinfandel, Robert Biale, St. Helena, California, Old Kraft Vineyard, 2008, 44, 93, 275, now), (2, Zinfandel, Chiarello Family, Napa Valley, California, Giana, 2008, 35, 93, 480, now), (3, Zinfandel, Robert Biale, Napa Valley, California, Black Chicken, 2008, 40, 91, 2700, 2012), ",
        "output": "SELECT winery FROM wine ORDER BY score LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many undergraduates are there in \"San Jose State University\" in year 2004? ###filtered_database_schema: CREATE TABLE `Campuses` ( Id INTEGER, Campus TEXT, Location TEXT, County TEXT, Year INTEGER ); Sample rows from `Campuses`: (1, California State University-Bakersfield, Bakersfield, Kern, 1965), (2, California State University-Channel Islands, Camarillo, Ventura, 2002), (3, California State University-Chico, Chico, Butte, 1887), CREATE TABLE `csu_fees` ( Campus INTEGER REFERENCES Campuses(Id), Year INTEGER, CampusFee INTEGER ); Sample rows from `csu_fees`: (1, 1996, 1951), (2, 2003, 1868), (3, 1996, 2042), CREATE TABLE `degrees` ( Year INTEGER PRIMARY KEY, Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Degrees INTEGER ); Sample rows from `degrees`: (1990, 1, 701), (1991, 1, 681), (1992, 1, 791), CREATE TABLE `discipline_enrollments` ( Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Discipline INTEGER PRIMARY KEY, Year INTEGER, Undergraduate INTEGER, Graduate INTEGER ); Sample rows from `discipline_enrollments`: (1, 4, 2004, 248, 0), (1, 5, 2004, 811, 73), (1, 6, 2004, 199, 0), CREATE TABLE `enrollments` ( Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Year INTEGER PRIMARY KEY, TotalEnrollment_AY INTEGER, FTE_AY INTEGER ); Sample rows from `enrollments`: (1, 1956, 384, 123), (1, 1957, 432, 151), (1, 1958, 422, 178), CREATE TABLE `faculty` ( Campus INTEGER REFERENCES Campuses(Id), Year INTEGER, Faculty REAL ); Sample rows from `faculty`: (1, 2002, 357.1), (2, 2002, 48.4), (3, 2002, 742.8), ",
        "output": "SELECT SUM(t1.undergraduate) FROM discipline_enrollments as t1 JOIN campuses as t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the first and last name of the faculty who is involved in the largest number of activities. ###filtered_database_schema: CREATE TABLE `Activity` ( actid INTEGER, activity_name varchar(25) ); Sample rows from `Activity`: (770, Mountain Climbing), (771, Canoeing), (772, Kayaking), CREATE TABLE `Participates_in` ( stuid INTEGER REFERENCES Student(StuID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Participates_in`: (1001, 770), (1001, 771), (1001, 777), CREATE TABLE `Faculty_Participates_in` ( FacID INTEGER REFERENCES Faculty(FacID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Faculty_Participates_in`: (1082, 784), (1082, 785), (1082, 790), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), ",
        "output": "SELECT  t1.fname ,  t1.lname FROM faculty as t1 JOIN faculty_participates_in as t2 ON t1.facid  =  t2.facid GROUP BY t1.facid ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List all the activities we have. ###filtered_database_schema: CREATE TABLE `Activity` ( actid INTEGER, activity_name varchar(25) ); Sample rows from `Activity`: (770, Mountain Climbing), (771, Canoeing), (772, Kayaking), CREATE TABLE `Participates_in` ( stuid INTEGER REFERENCES Student(StuID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Participates_in`: (1001, 770), (1001, 771), (1001, 777), CREATE TABLE `Faculty_Participates_in` ( FacID INTEGER REFERENCES Faculty(FacID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Faculty_Participates_in`: (1082, 784), (1082, 785), (1082, 790), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), ",
        "output": "SELECT activity_name FROM activity"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: acl papers in 2012 about Parsing ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show all party names and their region names. ###filtered_database_schema: CREATE TABLE `region` ( Region_ID INT PRIMARY KEY, Region_name TEXT, Date TEXT, Label TEXT, Format TEXT, Catalogue TEXT ); Sample rows from `region`: (1, United Kingdom, 1 July 2002, Parlophone, CD, 540 3622), (2, United Kingdom, 1 July 2002, Parlophone, 2× LP, 539 9821), (3, Japan, 3 July 2002, Toshiba-EMI, CD, TOCP-66045), CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Minister TEXT, Took_office TEXT, Left_office TEXT, Region_ID INT REFERENCES region(Region_ID), Party_name TEXT ); Sample rows from `party`: (1, Dr. Kwame Nkrumah (MP), 1957, 1958, 1, Convention Peoples Party), (2, Kojo Botsio (MP), 1958, 1959, 2, Progress Party), (3, Ebenezer Ako-Adjei (MP), 1959, 1960, 3, 3), CREATE TABLE `member` ( Member_ID INT PRIMARY KEY, Member_Name TEXT, Party_ID TEXT REFERENCES party(Party_ID), In_office TEXT ); Sample rows from `member`: (1, Hon Tony Abbott, 3, 1994–present), (2, Hon Dick Adams, 2, 1993–2013), (3, Anthony Albanese, 2, 1996–present), CREATE TABLE `party_events` ( Event_ID INT PRIMARY KEY, Event_Name TEXT, Party_ID INT REFERENCES party(Party_ID), Member_in_charge_ID INT REFERENCES member(Member_ID) ); Sample rows from `party_events`: (1, Annaual Meeting, 1, 4), (2, Conference, 1, 12), (3, Annaual Meeting, 2, 2), ",
        "output": "SELECT t1.party_name ,  t2.region_name FROM party as t1 JOIN region as t2 ON t1.region_id  =  t2.region_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is zip code of customer with first name as Carole and last name as Bernhard? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 3904 Stroman Passage, Port Melyssa, 14445, Georgia, USA), (2, 053 Quigley Island, Hagenesfurt, 22194, Kentucky, USA), (3, 00704 Zoe Alley, Lake Elaina, 08938, Georgia, USA), CREATE TABLE `Staff` ( staff_id INTEGER, staff_address_id INTEGER REFERENCES Addresses(address_id), nickname VARCHAR(80), first_name VARCHAR(80), middle_name VARCHAR(80), last_name VARCHAR(80), date_of_birth DATETIME, date_joined_staff DATETIME, date_left_staff DATETIME ); Sample rows from `Staff`: (1, 14, thompson.constantin, Janessa, Amara, Sawayn, 2010-12-08 16:55:14, 2017-04-27 03:21:26, 2018-03-23 22:53:12), (2, 3, santos45, Camylle, Icie, Weissnat, 2015-08-01 13:22:43, 2016-06-06 08:54:28, 2018-03-10 15:25:00), (3, 5, ynader, Kaitlin, Stephania, Mertz, 1994-05-17 05:32:11, 2018-01-02 12:24:24, 2018-03-24 10:11:08), CREATE TABLE `Vehicles` ( vehicle_id INTEGER, vehicle_details VARCHAR(255) ); Sample rows from `Vehicles`: (1, Van), (2, Truck), (3, Car), CREATE TABLE `Customers` ( customer_id INTEGER, customer_address_id INTEGER REFERENCES Addresses(address_id), customer_status_code VARCHAR(15), date_became_customer DATETIME, date_of_birth DATETIME, first_name VARCHAR(80), last_name VARCHAR(80), amount_outstanding DOUBLE, email_address VARCHAR(250), phone_number VARCHAR(255), cell_mobile_phone_number VARCHAR(255) ); Sample rows from `Customers`: (1, 13, Bad Customer, 2016-05-11 17:03:48, 1998-12-15 13:24:40, Carole, Bernhard, 255.0, everette.goyette@example.org, 07278206718, 861-638-9797), (2, 10, Bad Customer, 2015-11-16 22:52:14, 1995-07-17 12:13:16, Genevieve, Terry, 7256.0, huel.jana@example.org, +14(5)2351480248, 578-518-4785x612), (3, 10, Good Customer, 2016-04-08 00:28:15, 1994-06-21 01:34:56, Clara, Ortiz, 9443.0, hilario.sporer@example.org, 374-483-2758x85087, 1-197-686-2849x8761), CREATE TABLE `Customer_Payments` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), datetime_payment DATETIME PRIMARY KEY, payment_method_code VARCHAR(10), amount_payment DOUBLE ); Sample rows from `Customer_Payments`: (11, 2018-02-05 18:44:46, Direct Debit, 9570.93), (2, 2018-02-24 10:07:05, Direct Debit, 8180.26), (14, 2018-02-27 20:08:53, Direct Debit, 4610.26), CREATE TABLE `Lessons` ( lesson_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), lesson_status_code VARCHAR(15), staff_id INTEGER REFERENCES Staff(staff_id), vehicle_id INTEGER REFERENCES Vehicles(vehicle_id), lesson_date DATETIME, lesson_time VARCHAR(10), price DOUBLE ); Sample rows from `Lessons`: (1, 6, Cancelled, 8, 3, 2018-02-28 10:55:36, 5, 199.0), (2, 8, Cancelled, 14, 3, 2018-03-07 16:12:36, 6, 167.0), (3, 6, Cancelled, 11, 2, 2018-03-03 15:10:16, 3, 352.0), ",
        "output": "SELECT t2.zip_postcode FROM customers as t1 JOIN addresses as t2 ON t1.customer_address_id = t2.address_id WHERE t1.first_name = \"Carole\" AND t1.last_name = \"Bernhard\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average price of products with manufacturer codes equal to 2? ###filtered_database_schema: CREATE TABLE `Manufacturers` ( Code INTEGER, Name VARCHAR(255), Headquarter VARCHAR(255), Founder VARCHAR(255), Revenue REAL ); Sample rows from `Manufacturers`: (1, Sony, Tokyo, Andy, 120.0), (2, Creative Labs, Austin, Owen, 100.0), (3, Hewlett-Packard, Los Angeles, James, 50.0), CREATE TABLE `Products` ( Code INTEGER, Name VARCHAR(255), Price DECIMAL, Manufacturer INTEGER REFERENCES Manufacturers(Code) ); Sample rows from `Products`: (1, Hard drive, 240, 5), (2, Memory, 120, 6), (3, ZIP drive, 150, 4), ",
        "output": "SELECT AVG(price) FROM products WHERE manufacturer  =  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the employee id of the head whose department has the least number of employees? ###filtered_database_schema: CREATE TABLE `Physician` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), SSN INTEGER ); Sample rows from `Physician`: (1, John Dorian, Staff Internist, 111111111), (2, Elliot Reid, Attending Physician, 222222222), (3, Christopher Turk, Surgical Attending Physician, 333333333), CREATE TABLE `Department` ( DepartmentID INTEGER, Name VARCHAR(30), Head INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Department`: (1, General Medicine, 4), (2, Surgery, 7), (3, Psychiatry, 9), CREATE TABLE `Affiliated_With` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID), PrimaryAffiliation BOOLEAN ); Sample rows from `Affiliated_With`: (1, 1, 1), (2, 1, 1), (3, 1, 0), CREATE TABLE `Procedures` ( Code INTEGER, Name VARCHAR(30), Cost REAL ); Sample rows from `Procedures`: (1, Reverse Rhinopodoplasty, 1500.0), (2, Obtuse Pyloric Recombobulation, 3750.0), (3, Folded Demiophtalmectomy, 4500.0), CREATE TABLE `Trained_In` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code), CertificationDate DATETIME, CertificationExpires DATETIME ); Sample rows from `Trained_In`: (3, 1, 2008-01-01, 2008-12-31), (3, 2, 2008-01-01, 2008-12-31), (3, 5, 2008-01-01, 2008-12-31), CREATE TABLE `Patient` ( SSN INTEGER, Name VARCHAR(30), Address VARCHAR(30), Phone VARCHAR(30), InsuranceID INTEGER, PCP INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Patient`: (100000001, John Smith, 42 Foobar Lane, 555-0256, 68476213, 1), (100000002, Grace Ritchie, 37 Snafu Drive, 555-0512, 36546321, 2), (100000003, Random J. Patient, 101 Omgbbq Street, 555-1204, 65465421, 2), CREATE TABLE `Nurse` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), Registered BOOLEAN, SSN INTEGER ); Sample rows from `Nurse`: (101, Carla Espinosa, Head Nurse, 1, 111111110), (102, Laverne Roberts, Nurse, 1, 222222220), (103, Paul Flowers, Nurse, 0, 333333330), CREATE TABLE `Appointment` ( AppointmentID INTEGER, Patient INTEGER REFERENCES Patient(SSN), PrepNurse INTEGER REFERENCES Nurse(EmployeeID), Physician INTEGER REFERENCES Physician(EmployeeID), Start DATETIME, End DATETIME, ExaminationRoom TEXT ); Sample rows from `Appointment`: (13216584, 100000001, 101, 1, 2008-04-24 10:00, 2008-04-24 11:00, A), (26548913, 100000002, 101, 2, 2008-04-24 10:00, 2008-04-24 11:00, B), (36549879, 100000001, 102, 1, 2008-04-25 10:00, 2008-04-25 11:00, A), CREATE TABLE `Medication` ( Code INTEGER, Name VARCHAR(30), Brand VARCHAR(30), Description VARCHAR(30) ); Sample rows from `Medication`: (1, Procrastin-X, X, N/A), (2, Thesisin, Foo Labs, N/A), (3, Awakin, Bar Laboratories, N/A), CREATE TABLE `Prescribes` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Medication INTEGER PRIMARY KEY REFERENCES Medication(Code), Date DATETIME PRIMARY KEY, Appointment INTEGER REFERENCES Appointment(AppointmentID), Dose VARCHAR(30) ); Sample rows from `Prescribes`: (1, 100000001, 1, 2008-04-24 10:47, 13216584, 5), (9, 100000004, 2, 2008-04-27 10:53, 86213939, 10), (9, 100000004, 2, 2008-04-30 16:53, None, 5), CREATE TABLE `Block` ( BlockFloor INTEGER PRIMARY KEY, BlockCode INTEGER PRIMARY KEY ); Sample rows from `Block`: (1, 1), (1, 2), (1, 3), CREATE TABLE `Room` ( RoomNumber INTEGER, RoomType VARCHAR(30), BlockFloor INTEGER REFERENCES Block(BlockFloor), BlockCode INTEGER REFERENCES Block(BlockCode), Unavailable BOOLEAN ); Sample rows from `Room`: (101, Single, 1, 1, 0), (102, Single, 1, 1, 0), (103, Single, 1, 1, 0), CREATE TABLE `On_Call` ( Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID), BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor), BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode), OnCallStart DATETIME PRIMARY KEY, OnCallEnd DATETIME PRIMARY KEY ); Sample rows from `On_Call`: (101, 1, 1, 2008-11-04 11:00, 2008-11-04 19:00), (101, 1, 2, 2008-11-04 11:00, 2008-11-04 19:00), (102, 1, 3, 2008-11-04 11:00, 2008-11-04 19:00), CREATE TABLE `Stay` ( StayID INTEGER, Patient INTEGER REFERENCES Patient(SSN), Room INTEGER REFERENCES Room(RoomNumber), StayStart DATETIME, StayEnd DATETIME ); Sample rows from `Stay`: (3215, 100000001, 111, 2008-05-01, 2008-05-04), (3216, 100000003, 123, 2008-05-03, 2008-05-14), (3217, 100000004, 112, 2008-05-02, 2008-05-03), CREATE TABLE `Undergoes` ( Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code), Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID), DateUndergoes DATETIME PRIMARY KEY, Physician INTEGER REFERENCES Physician(EmployeeID), AssistingNurse INTEGER REFERENCES Nurse(EmployeeID) ); Sample rows from `Undergoes`: (100000001, 6, 3215, 2008-05-02, 3, 101), (100000001, 2, 3215, 2008-05-03, 7, 101), (100000004, 1, 3217, 2008-05-07, 3, 102), ",
        "output": "SELECT head FROM department GROUP BY departmentid ORDER BY COUNT(departmentid) LIMIT 1;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the object number of railways that do not have any trains. ###filtered_database_schema: CREATE TABLE `railway` ( Railway_ID INT PRIMARY KEY, Railway TEXT, Builder TEXT, Built TEXT, Wheels TEXT, Location TEXT, ObjectNumber TEXT ); Sample rows from `railway`: (1, SECR, SECR Ashford, 1901, 4-4-0, York, 1975-7006), (2, MR, MR Derby, 1902 Midland Railway 1000 was rebuilt in 1914., 4-4-0, Bo'ness, 1975-7018), (3, GNRD, GNR Doncaster, 1902, 4-4-2, Barrow Hill, 1975-7005), CREATE TABLE `train` ( Train_ID INT PRIMARY KEY, Train_Num TEXT, Name TEXT, From TEXT, Arrival TEXT, Railway_ID INT REFERENCES railway(Railway_ID) ); Sample rows from `train`: (1, 51195, Wardha-Ballarshah Pass, Wardha, 08:54, 1), (2, 12139, Sewagram Exp, Mumbai CST, 09:08, 1), (3, 12140, Ballarshah-Mumbai Pass, Ballarshah, 09:48, 2), CREATE TABLE `manager` ( Manager_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Working_year_starts TEXT, Age INT, Level INT ); Sample rows from `manager`: (1, Ben Curtis, United States, 2003, 45, 5), (2, Todd Hamilton, United States, 2004, 55, 5), (3, Tiger Woods, United States, 2006, 46, 5), CREATE TABLE `railway_manage` ( Railway_ID INT PRIMARY KEY REFERENCES railway(Railway_ID), Manager_ID INT PRIMARY KEY REFERENCES manager(Manager_ID), From_Year TEXT ); Sample rows from `railway_manage`: (8, 1, 2010), (9, 2, 2011), (7, 3, 2012), ",
        "output": "SELECT objectnumber FROM railway WHERE railway_id NOT IN (SELECT railway_id FROM train)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the stories of the building with the largest height. ###filtered_database_schema: CREATE TABLE `buildings` ( id INT PRIMARY KEY, name TEXT, City TEXT, Height INT, Stories INT, Status TEXT ); Sample rows from `buildings`: (1, Torre KOI, Monterrey, 220, 67, under construction), (2, Torre Mitikah, Mexico City, 210, 60, under construction), (3, Punto Chapultepec, Mexico City, 210, 59, proposed), CREATE TABLE `Companies` ( id INT PRIMARY KEY, name TEXT, Headquarters TEXT, Industry TEXT, Sales_billion REAL, Profits_billion REAL, Assets_billion REAL, Market_Value_billion TEXT ); Sample rows from `Companies`: (1, JPMorgan Chase, USA, Banking, 115.5, 17.4, 2117.6, 182.2), (2, HSBC, UK, Banking, 103.3, 13.3, 2467.9, 186.5), (3, General Electric, USA, Conglomerate, 156.2, 11.6, 751.2, 216.2), CREATE TABLE `Office_locations` ( building_id INT PRIMARY KEY REFERENCES buildings(id), company_id INT PRIMARY KEY REFERENCES Companies(id), move_in_year INT ); Sample rows from `Office_locations`: (1, 1, 2021), (2, 2, 2022), (3, 4, 2023), ",
        "output": "SELECT stories FROM buildings ORDER BY height DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: how high is the highest point in delaware ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many different instruments are used in the song \"Badlands\"? ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT COUNT(DISTINCT instrument) FROM instruments as t1 JOIN songs as t2 ON t1.songid  =  t2.songid WHERE title  =  \"Badlands\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average age of the female students with secretary votes in the spring election cycle? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Voting_record` ( StuID INTEGER REFERENCES Student(StuID), Registration_Date VARCHAR(12), Election_Cycle VARCHAR(12), President_Vote INTEGER REFERENCES Student(StuID), Vice_President_Vote INTEGER REFERENCES Student(StuID), Secretary_Vote INTEGER REFERENCES Student(StuID), Treasurer_Vote INTEGER REFERENCES Student(StuID), Class_President_Vote INTEGER REFERENCES Student(StuID), Class_Senator_Vote INTEGER REFERENCES Student(StuID) ); Sample rows from `Voting_record`: (1001, 08/30/2015, Spring, 1004, 1007, 1010, 1035, 1001, 1028), (1002, 08/30/2014, Spring, 1014, 1007, 1020, 1025, 1021, 1028), (1003, 08/30/2013, Spring, 1004, 1017, 1030, 1035, 1031, 1028), ",
        "output": "SELECT AVG(t1.age) fROM student as t1 JOIN voting_record as t2 ON t1.stuid  =  secretary_vote WHERE t1.sex  =  \"f\" AND t2.election_cycle  =  \"Spring\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: which is the highest peak not in alaska ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX(mountain_altitude) FROM mountain WHERE state_name != \"alaska\" );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of countries. ###filtered_database_schema: CREATE TABLE `country` ( Country_id INT PRIMARY KEY, Country_name TEXT, Capital TEXT, Official_native_language TEXT ); Sample rows from `country`: (1, Indonesia, Jakarta, Bahasa Indonesia), (2, Iran, Tehran, Persian ( Arabic script )), (3, Iraq, Baghdad, Arabic ( Arabic script ) Kurdish), CREATE TABLE `team` ( Team_id INT PRIMARY KEY, Name TEXT ); Sample rows from `team`: (1, Columbus Crew), (2, Evalyn Feil), (3, Anais VonRueden), CREATE TABLE `match_season` ( Season REAL PRIMARY KEY, Player TEXT, Position TEXT, Country INT REFERENCES country(Country_id), Team INT REFERENCES team(Team_id), Draft_Pick_Number INT, Draft_Class TEXT, College TEXT ); Sample rows from `match_season`: (1996.0, Steve Ralston Category:Articles with hCards, Midfielder, 6, 1, 18, 1996 MLS College Draft, Florida International), (1997.0, Mike Duhaney Category:Articles with hCards, Defender, 6, 2, 87, 1996 MLS Inaugural Player Draft, UNLV), (1998.0, Ben Olsen Category:Articles with hCards, Midfielder, 4, 3, 2, Project-40, Virginia), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Years_Played TEXT, Total_WL TEXT, Singles_WL TEXT, Doubles_WL TEXT, Team INT REFERENCES team(Team_id) ); Sample rows from `player`: (1, Cho Soong-Jae (630), 1 (2011), 2–0, 1–0, 1–0, 1), (2, Chung Hong (717), 1 (2011), 0–0, 0–0, 0–0, 1), (3, Im Kyu-tae (492), 8 (2003–2005, 2007–2011), 6–9, 5–7, 1–2, 1), ",
        "output": "SELECT COUNT(*) FROM country"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the state of the college which player Charles is attending. ###filtered_database_schema: CREATE TABLE `College` ( cName varchar(20) PRIMARY KEY, state varchar(2), enr numeric(5,0) ); Sample rows from `College`: (LSU, LA, 18000), (ASU, AZ, 12000), (OU, OK, 22000), CREATE TABLE `Player` ( pID numeric(5,0) PRIMARY KEY, pName varchar(20), yCard varchar(3), HS numeric(5,0) ); Sample rows from `Player`: (10001, Andrew, no, 1200), (20002, Blake, no, 1600), (30003, Charles, no, 300), CREATE TABLE `Tryout` ( pID numeric(5,0) PRIMARY KEY REFERENCES Player(pID), cName varchar(20) PRIMARY KEY REFERENCES College(cName), pPos varchar(8), decision varchar(3) ); Sample rows from `Tryout`: (10001, LSU, goalie, no), (10001, ASU, goalie, yes), (20002, FSU, striker, yes), ",
        "output": "SELECT t1.state FROM college as t1 JOIN tryout as t2 ON t1.cname  =  t2.cname JOIN player as t3 ON t2.pid  =  t3.pid WHERE t3.pname  =  'Charles'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the song titles on the album \"A Kiss Before You Go: Live in Hamburg\"? ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT t3.title FROM albums as t1 JOIN tracklists as t2 ON t1.aid  =  t2.albumid JOIN songs as t3 ON t2.songid  =  t3.songid WHERE t1.title  =  \"A Kiss Before You Go: Live in Hamburg\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show all main industry for all companies. ###filtered_database_schema: CREATE TABLE `company` ( Company_ID INT PRIMARY KEY, Rank INT, Company TEXT, Headquarters TEXT, Main_Industry TEXT, Sales_billion REAL, Profits_billion REAL, Assets_billion REAL, Market_Value REAL ); Sample rows from `company`: (1, 1, ExxonMobil, USA, Oil and gas, 433.5, 41.1, 331.1, 407.4), (2, 3, General Electric, USA, Conglomerate, 147.3, 14.2, 717.2, 213.7), (3, 4, Royal Dutch Shell, Netherlands, Oil and gas, 470.2, 30.9, 340.5, 227.6), CREATE TABLE `gas_station` ( Station_ID INT PRIMARY KEY, Open_Year INT, Location TEXT, Manager_Name TEXT, Vice_Manager_Name TEXT, Representative_Name TEXT ); Sample rows from `gas_station`: (1, 1998, Herne Hill, BrianWingrave, Russell Denman, Clive Burr), (2, 1999, Channel Hill, SimonMarloe, Russell Brown, Rob Jefferies ), (3, 2000, Reading North, Simon Cope Derek Marloe, James Colin , Dave Edwards Roger ), CREATE TABLE `station_company` ( Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID), Company_ID INT PRIMARY KEY REFERENCES company(Company_ID), Rank_of_the_Year INT ); Sample rows from `station_company`: (11, 1, 1), (1, 3, 2), (6, 6, 3), ",
        "output": "SELECT DISTINCT main_industry FROM company"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are all the customer phone numbers under the most popular policy type? ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_name VARCHAR(40) ); Sample rows from `Customers`: (194, America Jaskolski), (214, Ellsworth Paucek), (256, Mrs. Hanna Willms), CREATE TABLE `Services` ( Service_ID INTEGER, Service_name VARCHAR(40) ); Sample rows from `Services`: (1, New policy application), (4, Close a policy), (6, Change a policy), CREATE TABLE `Available_Policies` ( Policy_ID INTEGER PRIMARY KEY, policy_type_code CHAR(15), Customer_Phone VARCHAR(255) ); Sample rows from `Available_Policies`: (246, Life Insurance, +16(2)5838999222), (257, Property Insurance, 242.763.9214), (300, Property Insurance, 1-416-503-7735x94204), CREATE TABLE `Customers_Policies` ( Customer_ID INTEGER PRIMARY KEY REFERENCES Customers(Customer_ID), Policy_ID INTEGER PRIMARY KEY REFERENCES Available_Policies(Policy_ID), Date_Opened DATE, Date_Closed DATE ); Sample rows from `Customers_Policies`: (214, 257, 2016-11-19, 2018-03-04), (214, 301, 2016-04-12, 2018-02-07), (256, 583, 2016-07-22, 2018-02-20), CREATE TABLE `First_Notification_of_Loss` ( FNOL_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers_Policies(Customer_ID), Policy_ID INTEGER REFERENCES Customers_Policies(Policy_ID), Service_ID INTEGER REFERENCES Services(Service_ID) ); Sample rows from `First_Notification_of_Loss`: (532, 214, 257, 6), (1611, 996, 993, 9), (1722, 996, 879, 6), CREATE TABLE `Claims` ( Claim_ID INTEGER PRIMARY KEY, FNOL_ID INTEGER REFERENCES First_Notification_of_Loss(FNOL_ID), Effective_Date DATE ); Sample rows from `Claims`: (134, 1722, 1973-08-18), (145, 1611, 2014-10-19), (228, 532, 1975-05-07), CREATE TABLE `Settlements` ( Settlement_ID INTEGER PRIMARY KEY, Claim_ID INTEGER REFERENCES Claims(Claim_ID), Effective_Date DATE, Settlement_Amount REAL ); Sample rows from `Settlements`: (161, 717, 2009-11-20, 6451.65), (176, 641, 1971-06-29, 1588.45), (205, 604, 1978-09-09, 9814.39), ",
        "output": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which allergy type has most number of allergies? ###filtered_database_schema: CREATE TABLE `Allergy_Type` ( Allergy VARCHAR(20) PRIMARY KEY, AllergyType VARCHAR(20) ); Sample rows from `Allergy_Type`: (Eggs, food), (Nuts, food), (Milk, food), CREATE TABLE `Has_Allergy` ( StuID INTEGER REFERENCES Student(StuID), Allergy VARCHAR(20) REFERENCES Allergy_Type(Allergy) ); Sample rows from `Has_Allergy`: (1001, Cat), (1002, Shellfish), (1002, Tree Pollen), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), ",
        "output": "SELECT allergytype FROM allergy_type GROUP BY allergytype ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number and time of the train that goes from Chennai to Guruvayur. ###filtered_database_schema: CREATE TABLE `train` ( id INT PRIMARY KEY, train_number INT, name TEXT, origin TEXT, destination TEXT, time TEXT, interval TEXT ); Sample rows from `train`: (1, 16724, Ananthapuri Express, Trivandrum, Chennai, 17:15, Daily), (2, 16127, Guruvayur Express, Chennai, Guruvayur, 22:10, Daily), (3, 16128, Guruvayur Express, Guruvayur, Chennai, 4:49, Daily), CREATE TABLE `station` ( id INT PRIMARY KEY, network_name TEXT, services TEXT, local_authority TEXT ); Sample rows from `station`: (1, Amersham, Metropolitan line and Chiltern Railways, Chiltern), (2, Bushey, London Overground and London Midland, Watford), (3, Brentwood, Greater Anglia, Brentwood), CREATE TABLE `route` ( train_id INT PRIMARY KEY REFERENCES train(id), station_id INT PRIMARY KEY REFERENCES station(id) ); Sample rows from `route`: (1, 1), (1, 2), (1, 3), CREATE TABLE `weekly_weather` ( station_id INT PRIMARY KEY REFERENCES station(id), day_of_week TEXT PRIMARY KEY, high_temperature INT, low_temperature INT, precipitation REAL, wind_speed_mph INT ); Sample rows from `weekly_weather`: (1, Monday, 59, 54, 90.0, 13), (1, Tuesday, 66, 55, 20.0, 12), (1, Wednesday, 60, 52, 10.0, 14), ",
        "output": "SELECT train_number ,  time FROM train WHERE origin  =  'Chennai' AND destination  =  'Guruvayur'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the elimination movies of wrestlers on Team Orton. ###filtered_database_schema: CREATE TABLE `wrestler` ( Wrestler_ID INT PRIMARY KEY, Name TEXT, Reign TEXT, Days_held TEXT, Location TEXT, Event TEXT ); Sample rows from `wrestler`: (1, Rey Misterio Sr., 1, 344, Tijuana , Mexico, Live event), (2, Fishman, 1, 113, Tijuana , Mexico, Live event), (3, Villaño IV, 1, 1285, Tijuana , Mexico, Live event), CREATE TABLE `Elimination` ( Elimination_ID TEXT PRIMARY KEY, Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID), Team TEXT, Eliminated_By TEXT, Elimination_Move TEXT, Time TEXT ); Sample rows from `Elimination`: (1, 1, Team Orton, Punk, Go To Sleep, 00:11), (2, 2, Team Batista, Benjamin, Paydirt, 07:38), (3, 4, Team Batista, Orton, Rope hung DDT, 10:45), ",
        "output": "SELECT elimination_move FROM elimination WHERE team  =  \"team Orton\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name and age of the person who is a friend of both Dan and Alice. ###filtered_database_schema: CREATE TABLE `Person` ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT ); Sample rows from `Person`: (Alice, 25, new york city, female, student), (Bob, 35, salt lake city, male, engineer), (Zach, 45, austin, male, doctor), CREATE TABLE `PersonFriend` ( name varchar(20) REFERENCES Person(name), friend varchar(20) REFERENCES Person(name), year INTEGER ); Sample rows from `PersonFriend`: (Alice, Bob, 10), (Zach, Dan, 12), (Bob, Zach, 5), ",
        "output": "SELECT t1.name ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Dan' INTERSECT SELECT t1.name ,   t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Alice'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which address has both members younger than 30 and members older than 40? ###filtered_database_schema: CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Address TEXT, Num_of_staff TEXT, Score REAL, Open_Year TEXT ); Sample rows from `shop`: (1, 1200 Main Street, 13, 42.0, 2010), (2, 1111 Main Street, 19, 38.0, 2008), (3, 1330 Baltimore Street, 42, 36.0, 2010), CREATE TABLE `member` ( Member_ID INT PRIMARY KEY, Name TEXT, Membership_card TEXT, Age INT, Time_of_purchase INT, Level_of_membership INT, Address TEXT ); Sample rows from `member`: (1, Ashby, Lazale, Black, 29, 18, 5, Hartford), (2, Breton, Robert, White, 67, 41, 4, Waterbury), (3, Campbell, Jessie, Black, 34, 20, 6, Hartford), CREATE TABLE `happy_hour` ( HH_ID INT PRIMARY KEY, Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID), Month TEXT PRIMARY KEY, Num_of_shaff_in_charge INT ); Sample rows from `happy_hour`: (1, 1, May, 10), (2, 1, April, 12), (3, 10, June, 15), CREATE TABLE `happy_hour_member` ( HH_ID INT PRIMARY KEY, Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Total_amount REAL ); Sample rows from `happy_hour_member`: (1, 3, 20.9), (4, 3, 20.92), (7, 9, 4.9), ",
        "output": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List all the distinct president votes and the vice president votes. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Voting_record` ( StuID INTEGER REFERENCES Student(StuID), Registration_Date VARCHAR(12), Election_Cycle VARCHAR(12), President_Vote INTEGER REFERENCES Student(StuID), Vice_President_Vote INTEGER REFERENCES Student(StuID), Secretary_Vote INTEGER REFERENCES Student(StuID), Treasurer_Vote INTEGER REFERENCES Student(StuID), Class_President_Vote INTEGER REFERENCES Student(StuID), Class_Senator_Vote INTEGER REFERENCES Student(StuID) ); Sample rows from `Voting_record`: (1001, 08/30/2015, Spring, 1004, 1007, 1010, 1035, 1001, 1028), (1002, 08/30/2014, Spring, 1014, 1007, 1020, 1025, 1021, 1028), (1003, 08/30/2013, Spring, 1004, 1017, 1030, 1035, 1031, 1028), ",
        "output": "SELECT DISTINCT president_vote ,  VICE_president_vote FROM voting_record"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are all the document type codes and document type names? ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CV, CV, ), (BK, Book, ), (PR, Paper, ), CREATE TABLE `Ref_Calendar` ( Calendar_Date DATETIME PRIMARY KEY, Day_Number INTEGER ); Sample rows from `Ref_Calendar`: (1972-03-31 09:47:22, 5), (1976-06-15 03:40:06, 7), (1985-05-13 12:19:43, 7), CREATE TABLE `Ref_Locations` ( Location_Code CHAR(15) PRIMARY KEY, Location_Name VARCHAR(255), Location_Description VARCHAR(255) ); Sample rows from `Ref_Locations`: (b, Brazil, ), (c, Canada, ), (e, Edinburgh, ), CREATE TABLE `Roles` ( Role_Code CHAR(15) PRIMARY KEY, Role_Name VARCHAR(255), Role_Description VARCHAR(255) ); Sample rows from `Roles`: (MG, Manager, Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti.), (ED, Editor, Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos.), (PT, Photo, Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt.), CREATE TABLE `All_Documents` ( Document_ID INTEGER, Date_Stored DATETIME REFERENCES Ref_Calendar(Calendar_Date), Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255) ); Sample rows from `All_Documents`: (7, 1976-06-15 03:40:06, CV, Robin CV, None, None), (11, 1986-10-14 17:53:39, CV, Marry CV, None, None), (25, 2008-06-08 12:45:38, BK, One hundred years of solitude, None, None), CREATE TABLE `Employees` ( Employee_ID INTEGER, Role_Code CHAR(15) REFERENCES Roles(Role_Code), Employee_Name VARCHAR(255), Gender_MFU CHAR(1), Date_of_Birth DATETIME, Other_Details VARCHAR(255) ); Sample rows from `Employees`: (25, HR, Leo, , 1973-02-15 17:16:00, None), (30, MG, Ebba, , 1979-09-20 12:50:15, None), (38, ED, Stephanie, 1, 2012-03-30 23:02:28, None), CREATE TABLE `Document_Locations` ( Document_ID INTEGER PRIMARY KEY REFERENCES All_Documents(Document_ID), Location_Code CHAR(15) PRIMARY KEY REFERENCES Ref_Locations(Location_Code), Date_in_Location_From DATETIME PRIMARY KEY REFERENCES Ref_Calendar(Calendar_Date), Date_in_Locaton_To DATETIME REFERENCES Ref_Calendar(Calendar_Date) ); Sample rows from `Document_Locations`: (7, e, 2017-01-06 23:17:22, 2008-06-08 12:45:38), (11, x, 2017-01-06 23:17:22, 2012-07-03 09:48:46), (81, c, 1972-03-31 09:47:22, 1987-11-05 06:11:22), CREATE TABLE `Documents_to_be_Destroyed` ( Document_ID INTEGER REFERENCES All_Documents(Document_ID), Destruction_Authorised_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Destroyed_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Planned_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Actual_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Other_Details VARCHAR(255) ); Sample rows from `Documents_to_be_Destroyed`: (7, 156, 138, 1988-02-01 14:41:52, 2017-01-06 23:17:22, None), (11, 55, 173, 2010-11-26 19:22:50, 1986-10-14 17:53:39, None), (25, 183, 156, 2009-08-18 03:29:08, 1995-01-01 03:52:11, None), ",
        "output": "SELECT document_type_code ,  document_type_name FROM ref_document_types"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many bands are there? ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT COUNT(*) FROM band"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many students are there? ###filtered_database_schema: CREATE TABLE `Allergy_Type` ( Allergy VARCHAR(20) PRIMARY KEY, AllergyType VARCHAR(20) ); Sample rows from `Allergy_Type`: (Eggs, food), (Nuts, food), (Milk, food), CREATE TABLE `Has_Allergy` ( StuID INTEGER REFERENCES Student(StuID), Allergy VARCHAR(20) REFERENCES Allergy_Type(Allergy) ); Sample rows from `Has_Allergy`: (1001, Cat), (1002, Shellfish), (1002, Tree Pollen), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), ",
        "output": "SELECT COUNT(*) FROM student"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies? ###filtered_database_schema: CREATE TABLE `Movie` ( mID INT PRIMARY KEY, title TEXT, year INT, director TEXT ); Sample rows from `Movie`: (101, Gone with the Wind, 1939, Victor Fleming), (102, Star Wars, 1977, George Lucas), (103, The Sound of Music, 1965, Robert Wise), CREATE TABLE `Reviewer` ( rID INT PRIMARY KEY, name TEXT ); Sample rows from `Reviewer`: (201, Sarah Martinez), (202, Daniel Lewis), (203, Brittany Harris), CREATE TABLE `Rating` ( rID INT REFERENCES Reviewer(rID), mID INT REFERENCES Movie(mID), stars INT, ratingDate date ); Sample rows from `Rating`: (201, 101, 2, 2011-01-22), (201, 101, 4, 2011-01-27), (202, 106, 4, None), ",
        "output": "SELECT t1.director ,  t1.title FROM movie as t1 JOIN rating as t2 ON t1.mid  =  t2.mid WHERE t2.stars  =  5"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids of the two department store chains with the largest number of department stores? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 28481 Crist Circle East Burdettestad, IA 21232), (2, 0292 Mitchel Pike Port Abefurt, IA 84402-4249), (3, 4062 Mante Place West Lindsey, DE 76199-8015), CREATE TABLE `Staff` ( staff_id INTEGER, staff_gender VARCHAR(1), staff_name VARCHAR(80) ); Sample rows from `Staff`: (1, 1, Tom), (2, 1, Malika), (3, 1, Katelynn), CREATE TABLE `Suppliers` ( supplier_id INTEGER, supplier_name VARCHAR(80), supplier_phone VARCHAR(80) ); Sample rows from `Suppliers`: (1, Lidl, (692)009-5928), (2, AB Store, 1-483-283-4742), (3, Tesco, 287-071-1153x254), CREATE TABLE `Department_Store_Chain` ( dept_store_chain_id INTEGER, dept_store_chain_name VARCHAR(80) ); Sample rows from `Department_Store_Chain`: (1, South), (2, West), (3, East), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method_code VARCHAR(10), customer_code VARCHAR(20), customer_name VARCHAR(80), customer_address VARCHAR(255), customer_phone VARCHAR(80), customer_email VARCHAR(80) ); Sample rows from `Customers`: (1, Credit Card, 401, Ahmed, 75099 Tremblay Port Apt. 163 South Norrisland, SC 80546, 254-072-4068x33935, margarett.vonrueden@example.com), (2, Credit Card, 665, Chauncey, 8408 Lindsay Court East Dasiabury, IL 72656-3552, +41(8)1897032009, stiedemann.sigrid@example.com), (3, Direct Debit, 844, Lukas, 7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871, 197-417-3557, joelle.monahan@example.com), CREATE TABLE `Products` ( product_id INTEGER, product_type_code VARCHAR(10), product_name VARCHAR(80), product_price DECIMAL(19,4) ); Sample rows from `Products`: (1, Clothes, red jeans, 734.73), (2, Clothes, yellow jeans, 687.23), (3, Clothes, black jeans, 695.16), CREATE TABLE `Supplier_Addresses` ( supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Supplier_Addresses`: (4, 5, 2016-09-22 16:41:31, 2018-03-14 20:06:37), (3, 9, 2014-11-07 19:18:49, 2018-03-16 16:39:58), (3, 2, 2008-11-22 12:01:25, 2018-03-02 19:50:22), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 9, 2017-12-11 05:00:22, 2018-03-20 20:52:34), (1, 6, 2017-10-07 23:00:26, 2018-02-28 14:53:52), (10, 8, 2017-04-04 20:00:27, 2018-02-27 20:08:33), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status_code VARCHAR(10), order_date DATETIME ); Sample rows from `Customer_Orders`: (1, 12, Completed, 2018-02-10 15:44:48), (2, 4, New, 2018-01-31 17:49:18), (3, 1, PartFilled, 2018-02-26 12:39:33), CREATE TABLE `Department_Stores` ( dept_store_id INTEGER, dept_store_chain_id INTEGER REFERENCES Department_Store_Chain(dept_store_chain_id), store_name VARCHAR(80), store_address VARCHAR(255), store_phone VARCHAR(80), store_email VARCHAR(80) ); Sample rows from `Department_Stores`: (1, 1, store_name, 01290 Jeremie Parkway Suite 753 North Arielle, MS 51249, (948)944-5099x2027, bmaggio@example.com), (2, 3, store_name, 082 Purdy Expressway O'Connellshire, IL 31732, 877-917-5029, larissa10@example.org), (3, 4, store_name, 994 Travis Plains North Wadeton, WV 27575-3951, 1-216-312-0375, alexandro.mcclure@example.net), CREATE TABLE `Departments` ( department_id INTEGER, dept_store_id INTEGER REFERENCES Department_Stores(dept_store_id), department_name VARCHAR(80) ); Sample rows from `Departments`: (1, 5, human resource), (2, 11, purchasing), (3, 4, marketing), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id) ); Sample rows from `Order_Items`: (1, 9, 7), (2, 1, 3), (3, 5, 2), CREATE TABLE `Product_Suppliers` ( product_id INTEGER PRIMARY KEY REFERENCES Products(product_id), supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), date_supplied_from DATETIME, date_supplied_to DATETIME, total_amount_purchased VARCHAR(80), total_value_purchased DECIMAL(19,4) ); Sample rows from `Product_Suppliers`: (4, 3, 2017-06-19 00:49:05, 2018-03-24 19:29:18, 89366.05, 36014.6), (8, 4, 2017-07-02 00:35:12, 2018-03-25 07:30:49, 25085.57, 36274.56), (3, 3, 2017-10-14 19:15:37, 2018-03-24 02:29:44, 15752.45, 7273.74), CREATE TABLE `Staff_Department_Assignments` ( staff_id INTEGER PRIMARY KEY REFERENCES Staff(staff_id), department_id INTEGER PRIMARY KEY REFERENCES Departments(department_id), date_assigned_from DATETIME, job_title_code VARCHAR(10), date_assigned_to DATETIME ); Sample rows from `Staff_Department_Assignments`: (5, 4, 2017-06-11 22:55:20, Department Manager, 2018-03-23 21:59:11), (10, 5, 2017-12-18 19:12:15, Sales Person, 2018-03-23 20:25:24), (1, 5, 2018-02-14 03:15:29, Clerical Staff, 2018-03-24 19:57:56), ",
        "output": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY COUNT(*) DESC LIMIT 2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the type code of the document named \"David CV\". ###filtered_database_schema: CREATE TABLE `Roles` ( role_code VARCHAR(15) PRIMARY KEY, role_description VARCHAR(80) ); Sample rows from `Roles`: (DBA, Database Administrator), (PROJ-MGR, Project Manager), CREATE TABLE `Users` ( user_id INTEGER, role_code VARCHAR(15) REFERENCES Roles(role_code), user_name VARCHAR(40), user_login VARCHAR(40), password VARCHAR(40) ); Sample rows from `Users`: (1, PROJ-MGR, dickens.elta, 0, e72b5a2d50b39a8760764a5f7a9d68ca2f076877), (2, DBA, tremblay.raheem, 1, 9bc25a040d5647ced5ec32e1a455e90fafc10bcb), (3, DBA, lynn.haley, 0, 90db8f51449e6c39e2a01f0b649d5a92fe76bbbb), CREATE TABLE `Document_Structures` ( document_structure_code VARCHAR(15) PRIMARY KEY, parent_document_structure_code VARCHAR(15), document_structure_description VARCHAR(80) ); Sample rows from `Document_Structures`: (1, 1, Header), (6, 1, Main section), (8, 1, Bib), CREATE TABLE `Functional_Areas` ( functional_area_code VARCHAR(15) PRIMARY KEY, parent_functional_area_code VARCHAR(15), functional_area_description VARCHAR(80) ); Sample rows from `Functional_Areas`: (8, 8, Signature), (1, 8, Acknowledgement), (9, 8, Keep blank), CREATE TABLE `Images` ( image_id INTEGER, image_alt_text VARCHAR(80), image_name VARCHAR(40), image_url VARCHAR(255) ); Sample rows from `Images`: (1, Lea, top1, http://www.rempelnader.com/1.jpg), (2, Arden, top2, http://connellykertzmann.org/1.jpg), (3, Mohamed, top3, http://www.bernierconnelly.com/1.jpg), CREATE TABLE `Documents` ( document_code VARCHAR(15) PRIMARY KEY, document_structure_code VARCHAR(15) REFERENCES Document_Structures(document_structure_code), document_type_code VARCHAR(15), access_count INTEGER, document_name VARCHAR(80) ); Sample rows from `Documents`: (217, 8, Book, 1864, Learning English), (621, 1, Paper, 8208, Research about Art history), (958, 8, Book, 3769, Learning Database), CREATE TABLE `Document_Functional_Areas` ( document_code VARCHAR(15) REFERENCES Documents(document_code), functional_area_code VARCHAR(15) REFERENCES Functional_Areas(functional_area_code) ); Sample rows from `Document_Functional_Areas`: (675, 9), (930, 1), (217, 1), CREATE TABLE `Document_Sections` ( section_id INTEGER, document_code VARCHAR(15) REFERENCES Documents(document_code), section_sequence INTEGER, section_code VARCHAR(20), section_title VARCHAR(80) ); Sample rows from `Document_Sections`: (12, 714, 6072, 70, after), (15, 217, 4510, 14, after), (19, 675, 7236, 90, after), CREATE TABLE `Document_Sections_Images` ( section_id INTEGER PRIMARY KEY REFERENCES Document_Sections(section_id), image_id INTEGER PRIMARY KEY REFERENCES Images(image_id) ); Sample rows from `Document_Sections_Images`: (93, 6), (86, 2), (27, 3), ",
        "output": "SELECT document_type_code FROM documents WHERE document_name  =  \"David CV\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many professors are in the accounting dept? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT COUNT(*) FROM professor as t1 JOIN department as t2 ON t1.dept_code  =  t2.dept_code WHERE dept_name  =  \"Accounting\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Keyphrases used by Luke Zettlemoyer ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the name, street address, and number of floors for all buildings ordered by the number of floors. ###filtered_database_schema: CREATE TABLE `building` ( building_id TEXT PRIMARY KEY, Name TEXT, Street_address TEXT, Years_as_tallest TEXT, Height_feet INT, Floors INT ); Sample rows from `building`: (0, Citizens Bank Building, 701 North Franklin Street, 1913–1915, 145, 12), (1, Tampa City Hall, 315 John F. Kennedy Boulevard, 1915–1926, 160, 10), (2, Floridan Hotel, 905 Franklin Street, 1926–1966, 204, 17), CREATE TABLE `Institution` ( Institution_id TEXT PRIMARY KEY, Institution TEXT, Location TEXT, Founded REAL, Type TEXT, Enrollment INT, Team TEXT, Primary_Conference TEXT, building_id TEXT REFERENCES building(building_id) ); Sample rows from `Institution`: (0, Ave Maria University, Ave Maria, Florida, 1998.0, Private, 1200, Gyrenes, The Sun, 1), (1, Dakota State University, Madison, South Dakota, 1881.0, Public, 3102, Trojans, none, 1), (2, Edward Waters College, Jacksonville, Florida, 1866.0, Private, 800, Tigers, Gulf Coast (GCAC), 3), CREATE TABLE `protein` ( common_name TEXT PRIMARY KEY, protein_name TEXT, divergence_from_human_lineage REAL, accession_number TEXT, sequence_length REAL, sequence_identity_to_human_protein TEXT, Institution_id TEXT REFERENCES Institution(Institution_id) ); Sample rows from `protein`: (Tropical Clawed Frog, uncharacterized protein C20orf117-like, 371.2, XP_002942331.1, 1584.0, 39%, 1), (purple sea urchin, uncharacterized protein LOC578090, 742.9, XP_783370.2, 1587.0, 47%, 3), (body louse, Centromeric protein E, putative, 782.7, XP_002429877.1, 2086.0, 30%, 5), ",
        "output": "SELECT name ,  street_address ,  floors FROM building ORDER BY floors"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names and prices of all products in the store? ###filtered_database_schema: CREATE TABLE `Manufacturers` ( Code INTEGER, Name VARCHAR(255), Headquarter VARCHAR(255), Founder VARCHAR(255), Revenue REAL ); Sample rows from `Manufacturers`: (1, Sony, Tokyo, Andy, 120.0), (2, Creative Labs, Austin, Owen, 100.0), (3, Hewlett-Packard, Los Angeles, James, 50.0), CREATE TABLE `Products` ( Code INTEGER, Name VARCHAR(255), Price DECIMAL, Manufacturer INTEGER REFERENCES Manufacturers(Code) ); Sample rows from `Products`: (1, Hard drive, 240, 5), (2, Memory, 120, 6), (3, ZIP drive, 150, 4), ",
        "output": "SELECT name ,  price FROM products"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Who is the delegate of district 1 in the elections? ###filtered_database_schema: CREATE TABLE `county` ( County_Id INT PRIMARY KEY, County_name TEXT, Population REAL, Zip_code TEXT ); Sample rows from `county`: (1, Howard, 21000.0, D21), (2, Baltimore County, 90000.0, D08), (3, Colony, 79000.0, D02), CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Year REAL, Party TEXT, Governor TEXT, Lieutenant_Governor TEXT, Comptroller TEXT, Attorney_General TEXT, US_Senate TEXT ); Sample rows from `party`: (1, 1998.0, Democratic, Peter Vallone, Sandra Frankel, Carl McCall, Eliot Spitzer, Charles Schumer), (2, 1998.0, Liberal, Betsy McCaughey Ross, Jonathan Reiter, Carl McCall, Eliot Spitzer, Charles Schumer), (3, 2002.0, Democratic, Carl McCall, Dennis Mehiel, Alan Hevesi, Eliot Spitzer, (no election)), CREATE TABLE `election` ( Election_ID INT PRIMARY KEY, Counties_Represented TEXT, District INT REFERENCES county(County_Id), Delegate TEXT, Party INT REFERENCES party(Party_ID), First_Elected REAL, Committee TEXT ); Sample rows from `election`: (1, 09.1 9A, 1, Bates, Gail H. Gail H. Bates, 1, 2002.0, Appropriations), (2, 09.1 9A, 1, Miller, Warren E. Warren E. Miller, 1, 2003.0, Economic Matters), (3, 12.1 12A, 2, DeBoy, Steven J. Sr. Steven J. DeBoy, Sr., 2, 2002.0, Appropriations), ",
        "output": "SELECT delegate FROM election WHERE district  =  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the minimum, average, and maximum age of all students. ###filtered_database_schema: CREATE TABLE `Allergy_Type` ( Allergy VARCHAR(20) PRIMARY KEY, AllergyType VARCHAR(20) ); Sample rows from `Allergy_Type`: (Eggs, food), (Nuts, food), (Milk, food), CREATE TABLE `Has_Allergy` ( StuID INTEGER REFERENCES Student(StuID), Allergy VARCHAR(20) REFERENCES Allergy_Type(Allergy) ); Sample rows from `Has_Allergy`: (1001, Cat), (1002, Shellfish), (1002, Tree Pollen), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), ",
        "output": "SELECT MIN(age) ,  AVG(age) ,  MAX(age) FROM student"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which city lives most of staffs? List the city name and number of staffs. ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 3904 Stroman Passage, Port Melyssa, 14445, Georgia, USA), (2, 053 Quigley Island, Hagenesfurt, 22194, Kentucky, USA), (3, 00704 Zoe Alley, Lake Elaina, 08938, Georgia, USA), CREATE TABLE `Staff` ( staff_id INTEGER, staff_address_id INTEGER REFERENCES Addresses(address_id), nickname VARCHAR(80), first_name VARCHAR(80), middle_name VARCHAR(80), last_name VARCHAR(80), date_of_birth DATETIME, date_joined_staff DATETIME, date_left_staff DATETIME ); Sample rows from `Staff`: (1, 14, thompson.constantin, Janessa, Amara, Sawayn, 2010-12-08 16:55:14, 2017-04-27 03:21:26, 2018-03-23 22:53:12), (2, 3, santos45, Camylle, Icie, Weissnat, 2015-08-01 13:22:43, 2016-06-06 08:54:28, 2018-03-10 15:25:00), (3, 5, ynader, Kaitlin, Stephania, Mertz, 1994-05-17 05:32:11, 2018-01-02 12:24:24, 2018-03-24 10:11:08), CREATE TABLE `Vehicles` ( vehicle_id INTEGER, vehicle_details VARCHAR(255) ); Sample rows from `Vehicles`: (1, Van), (2, Truck), (3, Car), CREATE TABLE `Customers` ( customer_id INTEGER, customer_address_id INTEGER REFERENCES Addresses(address_id), customer_status_code VARCHAR(15), date_became_customer DATETIME, date_of_birth DATETIME, first_name VARCHAR(80), last_name VARCHAR(80), amount_outstanding DOUBLE, email_address VARCHAR(250), phone_number VARCHAR(255), cell_mobile_phone_number VARCHAR(255) ); Sample rows from `Customers`: (1, 13, Bad Customer, 2016-05-11 17:03:48, 1998-12-15 13:24:40, Carole, Bernhard, 255.0, everette.goyette@example.org, 07278206718, 861-638-9797), (2, 10, Bad Customer, 2015-11-16 22:52:14, 1995-07-17 12:13:16, Genevieve, Terry, 7256.0, huel.jana@example.org, +14(5)2351480248, 578-518-4785x612), (3, 10, Good Customer, 2016-04-08 00:28:15, 1994-06-21 01:34:56, Clara, Ortiz, 9443.0, hilario.sporer@example.org, 374-483-2758x85087, 1-197-686-2849x8761), CREATE TABLE `Customer_Payments` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), datetime_payment DATETIME PRIMARY KEY, payment_method_code VARCHAR(10), amount_payment DOUBLE ); Sample rows from `Customer_Payments`: (11, 2018-02-05 18:44:46, Direct Debit, 9570.93), (2, 2018-02-24 10:07:05, Direct Debit, 8180.26), (14, 2018-02-27 20:08:53, Direct Debit, 4610.26), CREATE TABLE `Lessons` ( lesson_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), lesson_status_code VARCHAR(15), staff_id INTEGER REFERENCES Staff(staff_id), vehicle_id INTEGER REFERENCES Vehicles(vehicle_id), lesson_date DATETIME, lesson_time VARCHAR(10), price DOUBLE ); Sample rows from `Lessons`: (1, 6, Cancelled, 8, 3, 2018-02-28 10:55:36, 5, 199.0), (2, 8, Cancelled, 14, 3, 2018-03-07 16:12:36, 6, 167.0), (3, 6, Cancelled, 11, 2, 2018-03-03 15:10:16, 3, 352.0), ",
        "output": "SELECT t1.city ,  COUNT(*) FROM addresses as t1 JOIN staff as t2 ON t1.address_id = t2.staff_address_id GROUP BY t1.city ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the maximum page size for everything that has more than 3 products listed? ###filtered_database_schema: CREATE TABLE `product` ( product_id INT PRIMARY KEY, product TEXT, dimensions TEXT, dpi REAL, pages_per_minute_color REAL, max_page_size TEXT, interface TEXT ); Sample rows from `product`: (1, Fujitsu fi-6130 A4 Series Scanner, 301 x 160 x 158, 600.0, 30.0, A4, USB 2.0), (2, Plustek MobileOffice D28 Corporate, 303 x 94 x 60, 600.0, 28.0, A4, USB 2.0), (3, Xerox Travel Scanner 100, 289 x 51 x 38, 600.0, 4.0, A4, USB 2.0), CREATE TABLE `store` ( Store_ID INT PRIMARY KEY, Store_Name TEXT, Type TEXT, Area_size REAL, Number_of_product_category REAL, Ranking INT ); Sample rows from `store`: (1, Miramichi, City Mall, 179.84, 17811.0, 2), (2, Neguac, Village Store, 26.69, 1678.0, 3), (3, Rogersville, Village Store, 7.23, 1170.0, 1), CREATE TABLE `district` ( District_ID INT PRIMARY KEY, District_name TEXT, Headquartered_City TEXT, City_Population REAL, City_Area REAL ); Sample rows from `district`: (1, Attock District, Attock City, 94620.0, 20.0), (2, Bahawalnagar District, Bahawalnagar City, 134936.0, 13.0), (3, Bahawalpur District, Bahawalpur City, 530438.0, 38.0), CREATE TABLE `store_product` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), Product_ID INT PRIMARY KEY REFERENCES product(Product_ID) ); Sample rows from `store_product`: (1, 1), (1, 2), (1, 3), CREATE TABLE `store_district` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), District_ID INT REFERENCES district(District_ID) ); Sample rows from `store_district`: (1, 15), (2, 15), (3, 11), ",
        "output": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING COUNT(*)  >  3"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the author in the \" University of Michigan \" whose papers in Databases area have the most total citations . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT t1.name FROM domain as t4 JOIN domain_publication as t2 ON t4.did  =  t2.did JOIN publication as t5 ON t5.pid  =  t2.pid JOIN writes as t3 ON t3.pid  =  t5.pid JOIN author as t1 ON t3.aid  =  t1.aid JOIN organization as t6 ON t6.oid  =  t1.oid WHERE t4.name  =  \"Databases\" AND t6.name  =  \"University of Michigan\" GROUP BY t1.name ORDER BY SUM(t5.citation_num) DESC LIMIT 1;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: give me some good places for arabic on buchanan in san francisco ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the smallest city in alaska ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN(population) FROM city WHERE state_name  =  \"alaska\" ) AND state_name  =  \"alaska\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many department stores does the store chain South have? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 28481 Crist Circle East Burdettestad, IA 21232), (2, 0292 Mitchel Pike Port Abefurt, IA 84402-4249), (3, 4062 Mante Place West Lindsey, DE 76199-8015), CREATE TABLE `Staff` ( staff_id INTEGER, staff_gender VARCHAR(1), staff_name VARCHAR(80) ); Sample rows from `Staff`: (1, 1, Tom), (2, 1, Malika), (3, 1, Katelynn), CREATE TABLE `Suppliers` ( supplier_id INTEGER, supplier_name VARCHAR(80), supplier_phone VARCHAR(80) ); Sample rows from `Suppliers`: (1, Lidl, (692)009-5928), (2, AB Store, 1-483-283-4742), (3, Tesco, 287-071-1153x254), CREATE TABLE `Department_Store_Chain` ( dept_store_chain_id INTEGER, dept_store_chain_name VARCHAR(80) ); Sample rows from `Department_Store_Chain`: (1, South), (2, West), (3, East), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method_code VARCHAR(10), customer_code VARCHAR(20), customer_name VARCHAR(80), customer_address VARCHAR(255), customer_phone VARCHAR(80), customer_email VARCHAR(80) ); Sample rows from `Customers`: (1, Credit Card, 401, Ahmed, 75099 Tremblay Port Apt. 163 South Norrisland, SC 80546, 254-072-4068x33935, margarett.vonrueden@example.com), (2, Credit Card, 665, Chauncey, 8408 Lindsay Court East Dasiabury, IL 72656-3552, +41(8)1897032009, stiedemann.sigrid@example.com), (3, Direct Debit, 844, Lukas, 7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871, 197-417-3557, joelle.monahan@example.com), CREATE TABLE `Products` ( product_id INTEGER, product_type_code VARCHAR(10), product_name VARCHAR(80), product_price DECIMAL(19,4) ); Sample rows from `Products`: (1, Clothes, red jeans, 734.73), (2, Clothes, yellow jeans, 687.23), (3, Clothes, black jeans, 695.16), CREATE TABLE `Supplier_Addresses` ( supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Supplier_Addresses`: (4, 5, 2016-09-22 16:41:31, 2018-03-14 20:06:37), (3, 9, 2014-11-07 19:18:49, 2018-03-16 16:39:58), (3, 2, 2008-11-22 12:01:25, 2018-03-02 19:50:22), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 9, 2017-12-11 05:00:22, 2018-03-20 20:52:34), (1, 6, 2017-10-07 23:00:26, 2018-02-28 14:53:52), (10, 8, 2017-04-04 20:00:27, 2018-02-27 20:08:33), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status_code VARCHAR(10), order_date DATETIME ); Sample rows from `Customer_Orders`: (1, 12, Completed, 2018-02-10 15:44:48), (2, 4, New, 2018-01-31 17:49:18), (3, 1, PartFilled, 2018-02-26 12:39:33), CREATE TABLE `Department_Stores` ( dept_store_id INTEGER, dept_store_chain_id INTEGER REFERENCES Department_Store_Chain(dept_store_chain_id), store_name VARCHAR(80), store_address VARCHAR(255), store_phone VARCHAR(80), store_email VARCHAR(80) ); Sample rows from `Department_Stores`: (1, 1, store_name, 01290 Jeremie Parkway Suite 753 North Arielle, MS 51249, (948)944-5099x2027, bmaggio@example.com), (2, 3, store_name, 082 Purdy Expressway O'Connellshire, IL 31732, 877-917-5029, larissa10@example.org), (3, 4, store_name, 994 Travis Plains North Wadeton, WV 27575-3951, 1-216-312-0375, alexandro.mcclure@example.net), CREATE TABLE `Departments` ( department_id INTEGER, dept_store_id INTEGER REFERENCES Department_Stores(dept_store_id), department_name VARCHAR(80) ); Sample rows from `Departments`: (1, 5, human resource), (2, 11, purchasing), (3, 4, marketing), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id) ); Sample rows from `Order_Items`: (1, 9, 7), (2, 1, 3), (3, 5, 2), CREATE TABLE `Product_Suppliers` ( product_id INTEGER PRIMARY KEY REFERENCES Products(product_id), supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), date_supplied_from DATETIME, date_supplied_to DATETIME, total_amount_purchased VARCHAR(80), total_value_purchased DECIMAL(19,4) ); Sample rows from `Product_Suppliers`: (4, 3, 2017-06-19 00:49:05, 2018-03-24 19:29:18, 89366.05, 36014.6), (8, 4, 2017-07-02 00:35:12, 2018-03-25 07:30:49, 25085.57, 36274.56), (3, 3, 2017-10-14 19:15:37, 2018-03-24 02:29:44, 15752.45, 7273.74), CREATE TABLE `Staff_Department_Assignments` ( staff_id INTEGER PRIMARY KEY REFERENCES Staff(staff_id), department_id INTEGER PRIMARY KEY REFERENCES Departments(department_id), date_assigned_from DATETIME, job_title_code VARCHAR(10), date_assigned_to DATETIME ); Sample rows from `Staff_Department_Assignments`: (5, 4, 2017-06-11 22:55:20, Department Manager, 2018-03-23 21:59:11), (10, 5, 2017-12-18 19:12:15, Sales Person, 2018-03-23 20:25:24), (1, 5, 2018-02-14 03:15:29, Clerical Staff, 2018-03-24 19:57:56), ",
        "output": "SELECT COUNT(*) FROM department_stores as t1 JOIN department_store_chain as t2 ON t1.dept_store_chain_id  =  t2.dept_store_chain_id WHERE t2.dept_store_chain_name  =  \"South\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name of the customer who has the largest number of orders? ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_name VARCHAR(80), customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Savannah, rerum), (2, George, est), (3, Alberto, deleniti), CREATE TABLE `Invoices` ( invoice_number INTEGER, invoice_date DATETIME, invoice_details VARCHAR(255) ); Sample rows from `Invoices`: (1, 1989-09-03 16:03:05, vitae), (2, 1989-12-11 16:40:57, magnam), (3, 1995-10-07 14:13:05, et), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(10), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 2, Shipped, 2009-02-21 15:26:19, None), (2, 11, Shipped, 1974-06-24 22:10:26, None), (3, 4, Shipped, 1982-12-29 21:10:11, None), CREATE TABLE `Products` ( product_id INTEGER, product_name VARCHAR(80), product_details VARCHAR(255) ); Sample rows from `Products`: (1, food, None), (2, book, None), (3, food, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, product_id INTEGER REFERENCES Products(product_id), order_id INTEGER REFERENCES Orders(order_id), order_item_status VARCHAR(10), order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 6, Finish, None), (2, 15, 6, Finish, None), (3, 12, 15, Finish, None), CREATE TABLE `Shipments` ( shipment_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), shipment_tracking_number VARCHAR(80), shipment_date DATETIME, other_shipment_details VARCHAR(255) ); Sample rows from `Shipments`: (1, 5, 13, 3452, 1983-08-13 22:34:11, None), (2, 7, 2, 0114, 1977-11-10 12:11:25, None), (3, 10, 5, 478, 2006-01-17 03:08:05, None), CREATE TABLE `Shipment_Items` ( shipment_id INTEGER REFERENCES Shipments(shipment_id), order_item_id INTEGER REFERENCES Order_Items(order_item_id) ); Sample rows from `Shipment_Items`: (11, 12), (10, 15), (10, 12), ",
        "output": "SELECT t1.customer_name FROM customers as t1 JOIN orders as t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which months have more than 2 happy hours? ###filtered_database_schema: CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Address TEXT, Num_of_staff TEXT, Score REAL, Open_Year TEXT ); Sample rows from `shop`: (1, 1200 Main Street, 13, 42.0, 2010), (2, 1111 Main Street, 19, 38.0, 2008), (3, 1330 Baltimore Street, 42, 36.0, 2010), CREATE TABLE `member` ( Member_ID INT PRIMARY KEY, Name TEXT, Membership_card TEXT, Age INT, Time_of_purchase INT, Level_of_membership INT, Address TEXT ); Sample rows from `member`: (1, Ashby, Lazale, Black, 29, 18, 5, Hartford), (2, Breton, Robert, White, 67, 41, 4, Waterbury), (3, Campbell, Jessie, Black, 34, 20, 6, Hartford), CREATE TABLE `happy_hour` ( HH_ID INT PRIMARY KEY, Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID), Month TEXT PRIMARY KEY, Num_of_shaff_in_charge INT ); Sample rows from `happy_hour`: (1, 1, May, 10), (2, 1, April, 12), (3, 10, June, 15), CREATE TABLE `happy_hour_member` ( HH_ID INT PRIMARY KEY, Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Total_amount REAL ); Sample rows from `happy_hour_member`: (1, 3, 20.9), (4, 3, 20.92), (7, 9, 4.9), ",
        "output": "SELECT month FROM happy_hour GROUP BY month HAVING COUNT(*)  >  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the amount of the largest payment. ###filtered_database_schema: CREATE TABLE `actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), last_update TIMESTAMP ); Sample rows from `actor`: (1, PENELOPE, GUINESS, 2006-02-15 04:34:33), (2, NICK, WAHLBERG, 2006-02-15 04:34:33), (3, ED, CHASE, 2006-02-15 04:34:33), CREATE TABLE `address` ( address_id SMALLINT UNSIGNED PRIMARY KEY, address VARCHAR(50), address2 VARCHAR(50), district VARCHAR(20), city_id SMALLINT UNSIGNED REFERENCES city(city_id), postal_code VARCHAR(10), phone VARCHAR(20), last_update TIMESTAMP ); Sample rows from `address`: (1, 47 MySakila Drive, None, Alberta, 300, , , 2006-02-15 04:45:30), (2, 28 MySQL Boulevard, None, QLD, 576, , , 2006-02-15 04:45:30), (3, 23 Workhaven Lane, None, Alberta, 300, , 14033335568, 2006-02-15 04:45:30), CREATE TABLE `category` ( category_id TINYINT UNSIGNED PRIMARY KEY, name VARCHAR(25), last_update TIMESTAMP ); Sample rows from `category`: (1, Action, 2006-02-15 04:46:27), (2, Animation, 2006-02-15 04:46:27), (3, Children, 2006-02-15 04:46:27), CREATE TABLE `city` ( city_id SMALLINT UNSIGNED PRIMARY KEY, city VARCHAR(50), country_id SMALLINT UNSIGNED REFERENCES country(country_id), last_update TIMESTAMP ); Sample rows from `city`: (1, A Corua (La Corua), 87, 2006-02-15 04:45:25), (2, Abha, 82, 2006-02-15 04:45:25), (3, Abu Dhabi, 101, 2006-02-15 04:45:25), CREATE TABLE `country` ( country_id SMALLINT UNSIGNED PRIMARY KEY, country VARCHAR(50), last_update TIMESTAMP ); Sample rows from `country`: (1, Afghanistan, 2006-02-15 04:44:00), (2, Algeria, 2006-02-15 04:44:00), (3, American Samoa, 2006-02-15 04:44:00), CREATE TABLE `customer` ( customer_id SMALLINT UNSIGNED PRIMARY KEY, store_id TINYINT UNSIGNED REFERENCES store(store_id), first_name VARCHAR(45), last_name VARCHAR(45), email VARCHAR(50), address_id SMALLINT UNSIGNED REFERENCES address(address_id), active BOOLEAN, create_date DATETIME, last_update TIMESTAMP ); Sample rows from `customer`: (1, 1, MARY, SMITH, MARY.SMITH@sakilacustomer.org, 5, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (2, 1, PATRICIA, JOHNSON, PATRICIA.JOHNSON@sakilacustomer.org, 6, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (3, 1, LINDA, WILLIAMS, LINDA.WILLIAMS@sakilacustomer.org, 7, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), CREATE TABLE `film` ( film_id SMALLINT UNSIGNED PRIMARY KEY, title VARCHAR(255), description TEXT, release_year YEAR, language_id TINYINT UNSIGNED REFERENCES language(language_id), original_language_id TINYINT UNSIGNED REFERENCES language(language_id), rental_duration TINYINT UNSIGNED, rental_rate DECIMAL(4,2), length SMALLINT UNSIGNED, replacement_cost DECIMAL(5,2), rating , special_features , last_update TIMESTAMP ); Sample rows from `film`: (1, ACADEMY DINOSAUR, A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies, 2006, 1, None, 6, 0.99, 86, 20.99, PG, Deleted Scenes,Behind the Scenes, 2006-02-15 05:03:42), (2, ACE GOLDFINGER, A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China, 2006, 1, None, 3, 4.99, 48, 12.99, G, Trailers,Deleted Scenes, 2006-02-15 05:03:42), (3, ADAPTATION HOLES, A Astounding Reflection of a Lumberjack And a Car who must Sink a Lumberjack in A Baloon Factory, 2006, 1, None, 7, 2.99, 50, 18.99, NC-17, Trailers,Deleted Scenes, 2006-02-15 05:03:42), CREATE TABLE `film_actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES actor(actor_id), film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), last_update TIMESTAMP ); Sample rows from `film_actor`: (1, 1, 2006-02-15 05:05:03), (1, 23, 2006-02-15 05:05:03), (1, 25, 2006-02-15 05:05:03), CREATE TABLE `film_category` ( film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), category_id TINYINT UNSIGNED PRIMARY KEY REFERENCES category(category_id), last_update TIMESTAMP ); Sample rows from `film_category`: (1, 6, 2006-02-15 05:07:09), (2, 11, 2006-02-15 05:07:09), (3, 6, 2006-02-15 05:07:09), CREATE TABLE `film_text` ( film_id SMALLINT PRIMARY KEY, title VARCHAR(255), description TEXT ); CREATE TABLE `inventory` ( inventory_id MEDIUMINT UNSIGNED PRIMARY KEY, film_id SMALLINT UNSIGNED REFERENCES film(film_id), store_id TINYINT UNSIGNED REFERENCES store(store_id), last_update TIMESTAMP ); Sample rows from `inventory`: (1, 1, 1, 2006-02-15 05:09:17), (2, 1, 1, 2006-02-15 05:09:17), (3, 1, 1, 2006-02-15 05:09:17), CREATE TABLE `language` ( language_id TINYINT UNSIGNED PRIMARY KEY, name CHAR(20), last_update TIMESTAMP ); CREATE TABLE `payment` ( payment_id SMALLINT UNSIGNED PRIMARY KEY, customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), rental_id INT REFERENCES rental(rental_id), amount DECIMAL(5,2), payment_date DATETIME, last_update TIMESTAMP ); Sample rows from `payment`: (1, 1, 1, 76, 2.99, 2005-05-25 11:30:37, 2006-02-15 22:12:30), (2, 1, 1, 573, 0.99, 2005-05-28 10:35:23, 2006-02-15 22:12:30), (3, 1, 1, 1185, 5.99, 2005-06-15 00:54:12, 2006-02-15 22:12:30), CREATE TABLE `rental` ( rental_id INT PRIMARY KEY, rental_date DATETIME, inventory_id MEDIUMINT UNSIGNED REFERENCES inventory(inventory_id), customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), return_date DATETIME, staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), last_update TIMESTAMP ); Sample rows from `rental`: (1, 2005-05-24 22:53:30, 367, 130, 2005-05-26 22:04:30, 1, 2006-02-15 21:30:53), (2, 2005-05-24 22:54:33, 1525, 459, 2005-05-28 19:40:33, 1, 2006-02-15 21:30:53), (3, 2005-05-24 23:03:39, 1711, 408, 2005-06-01 22:12:39, 1, 2006-02-15 21:30:53), CREATE TABLE `staff` ( staff_id TINYINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), address_id SMALLINT UNSIGNED REFERENCES address(address_id), picture BLOB, email VARCHAR(50), store_id TINYINT UNSIGNED, active BOOLEAN, username VARCHAR(16), password VARCHAR(40), last_update TIMESTAMP ); CREATE TABLE `store` ( store_id TINYINT UNSIGNED PRIMARY KEY, manager_staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), address_id SMALLINT UNSIGNED REFERENCES address(address_id), last_update TIMESTAMP ); ",
        "output": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names and dates for documents corresponding to project that has the details 'Graph Database project'? ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (BK, Book, excellent), (CV, CV, excellent), (PT, Presentation, very good), CREATE TABLE `Ref_Budget_Codes` ( Budget_Type_Code CHAR(15) PRIMARY KEY, Budget_Type_Description VARCHAR(255) ); Sample rows from `Ref_Budget_Codes`: (GV, Government), (ORG, Organisation), (SF, Self founded), CREATE TABLE `Projects` ( Project_ID INTEGER, Project_Details VARCHAR(255) ); Sample rows from `Projects`: (30, Society Research project), (35, Internet of Things project), (105, Graph Database project), CREATE TABLE `Documents` ( Document_ID INTEGER, Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Project_ID INTEGER REFERENCES Projects(Project_ID), Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Documents`: (29, CV, 30, 2004-08-28 06:59:19, Review on UK files, None, None), (42, BK, 105, 2012-12-27 19:09:18, Review on Canadian files, None, None), (57, CV, 195, 1980-10-22 14:17:11, Review on French files, None, None), CREATE TABLE `Statements` ( Statement_ID INTEGER REFERENCES Documents(Document_ID), Statement_Details VARCHAR(255) ); Sample rows from `Statements`: (57, Open Project), (192, Private Project), CREATE TABLE `Documents_with_Expenses` ( Document_ID INTEGER REFERENCES Documents(Document_ID), Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code), Document_Details VARCHAR(255) ); Sample rows from `Documents_with_Expenses`: (57, GV, government), (192, GV, government), (226, GV, government), CREATE TABLE `Accounts` ( Account_ID INTEGER, Statement_ID INTEGER REFERENCES Statements(Statement_ID), Account_Details VARCHAR(255) ); Sample rows from `Accounts`: (7, 57, 495.063), (61, 57, 930.14), (98, 57, 6035.84), ",
        "output": "SELECT document_name ,  document_date FROM documents as t1 JOIN projects as t2 ON t1.project_id  =  t2.project_id WHERE t2.project_details  =  'Graph Database project'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name, city, and country of the airport with the lowest altitude? ###filtered_database_schema: CREATE TABLE `routes` ( rid INTEGER, dst_apid INTEGER REFERENCES airports(apid), dst_ap varchar(4), src_apid bigint REFERENCES airports(apid), src_ap varchar(4), alid bigint REFERENCES airlines(alid), airline varchar(4), codeshare TEXT ); Sample rows from `routes`: (37, 2990, KZ, 2965, AER, 410, 2B, None), (38, 2990, KZ, 2966, ASF, 410, 2B, None), (39, 2962, MRV, 2966, ASF, 410, 2B, None), CREATE TABLE `airports` ( apid INTEGER, name TEXT, city TEXT, country TEXT, x REAL, y REAL, elevation bigint, iata character varchar(3), icao character varchar(4) ); Sample rows from `airports`: (1, Goroka Airport, Goroka, Papua New Guinea, 145.391998291, -6.081689834590001, 5282, GKA, AYGA), (2, Madang Airport, Madang, Papua New Guinea, 145.789001465, -5.20707988739, 20, MAG, AYMD), (3, Mount Hagen Kagamuga Airport, Mount Hagen, Papua New Guinea, 144.29600524902344, -5.826789855957031, 5388, HGU, AYMH), CREATE TABLE `airlines` ( alid INTEGER, name TEXT, iata varchar(2), icao varchar(3), callsign TEXT, country TEXT, active varchar(2) ); Sample rows from `airlines`: (-1, Unknown, -, N/A, None, None, Y), (1, Private flight, -, N/A, , , Y), (2, 135 Airways, , GNL, GENERAL, United States, N), ",
        "output": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many drivers did not race in 2009? ###filtered_database_schema: CREATE TABLE `circuits` ( circuitId INTEGER, circuitRef TEXT, name TEXT, location TEXT, country TEXT, lat REAL, lng REAL, alt TEXT, url TEXT ); Sample rows from `circuits`: (1, albert_park, Albert Park Grand Prix Circuit, Melbourne, Australia, -37.8497, 144.968, 10, http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit), (2, sepang, Sepang International Circuit, Kuala Lumpur, Malaysia, 2.76083, 101.738, , http://en.wikipedia.org/wiki/Sepang_International_Circuit), (3, bahrain, Bahrain International Circuit, Sakhir, Bahrain, 26.0325, 50.5106, , http://en.wikipedia.org/wiki/Bahrain_International_Circuit), CREATE TABLE `races` ( raceId INTEGER, year INTEGER, round INTEGER, circuitId INTEGER REFERENCES circuits(circuitId), name TEXT, date TEXT, time TEXT, url TEXT ); Sample rows from `races`: (1, 2009, 1, 1, Australian Grand Prix, 2009-03-29, 06:00:00, http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix), (2, 2009, 2, 2, Malaysian Grand Prix, 2009-04-05, 09:00:00, http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix), (3, 2009, 3, 17, Chinese Grand Prix, 2009-04-19, 07:00:00, http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix), CREATE TABLE `drivers` ( driverId INTEGER, driverRef TEXT, number TEXT, code TEXT, forename TEXT, surname TEXT, dob TEXT, nationality TEXT, url TEXT ); Sample rows from `drivers`: (1, hamilton, 44, HAM, Lewis, Hamilton, 07/01/1985, British, http://en.wikipedia.org/wiki/Lewis_Hamilton), (2, heidfeld, , HEI, Nick, Heidfeld, 10/05/1977, German, http://en.wikipedia.org/wiki/Nick_Heidfeld), (3, rosberg, 6, ROS, Nico, Rosberg, 27/06/1985, German, http://en.wikipedia.org/wiki/Nico_Rosberg), CREATE TABLE `status` ( statusId INTEGER, status TEXT ); Sample rows from `status`: (1, Finished), (2, Disqualified), (3, Accident), CREATE TABLE `seasons` ( year INTEGER, url TEXT ); Sample rows from `seasons`: (1950, http://en.wikipedia.org/wiki/1950_Formula_One_season), (1951, http://en.wikipedia.org/wiki/1951_Formula_One_season), (1952, http://en.wikipedia.org/wiki/1952_Formula_One_season), CREATE TABLE `constructors` ( constructorId INTEGER, constructorRef TEXT, name TEXT, nationality TEXT, url TEXT ); Sample rows from `constructors`: (1, mclaren, McLaren, British, http://en.wikipedia.org/wiki/McLaren), (2, bmw_sauber, BMW Sauber, German, http://en.wikipedia.org/wiki/BMW_Sauber), (3, williams, Williams, British, http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering), CREATE TABLE `constructorStandings` ( constructorStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `constructorStandings`: (1, 18, 1, 14.0, 1, 1, 1), (2, 18, 2, 8.0, 3, 3, 0), (3, 18, 3, 9.0, 2, 2, 0), CREATE TABLE `results` ( resultId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, grid INTEGER, position TEXT, positionText TEXT, positionOrder INTEGER, points REAL, laps TEXT, time TEXT, milliseconds TEXT, fastestLap TEXT, rank TEXT, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId INTEGER ); Sample rows from `results`: (1, 18, 1, 1, 22, 1, 1, 1, 1, 10.0, 58, 34:50.6, 5690616, 39, 2, 01:27.5, 218.3, 1), (2, 18, 2, 2, 3, 5, 2, 2, 2, 8.0, 58, 5.478, 5696094, 41, 3, 01:27.7, 217.586, 1), (3, 18, 3, 3, 7, 7, 3, 3, 3, 6.0, 58, 8.163, 5698779, 41, 5, 01:28.1, 216.719, 1), CREATE TABLE `driverStandings` ( driverStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `driverStandings`: (1, 18, 1, 10.0, 1, 1, 1), (2, 18, 2, 8.0, 2, 2, 0), (3, 18, 3, 6.0, 3, 3, 0), CREATE TABLE `constructorResults` ( constructorResultsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, status TEXT ); Sample rows from `constructorResults`: (1, 18, 1, 14.0, NULL), (2, 18, 2, 8.0, NULL), (3, 18, 3, 9.0, NULL), CREATE TABLE `qualifying` ( qualifyId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, position INTEGER, q1 TEXT, q2 TEXT, q3 TEXT ); Sample rows from `qualifying`: (1, 18, 1, 1, 22, 1, 1:26.572, 1:25.187, 1:26.714), (2, 18, 9, 2, 4, 2, 1:26.103, 1:25.315, 1:26.869), (3, 18, 5, 1, 23, 3, 1:25.664, 1:25.452, 1:27.079), CREATE TABLE `pitStops` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), stop INTEGER PRIMARY KEY, lap INTEGER, time TEXT, duration TEXT, milliseconds INTEGER ); CREATE TABLE `lapTimes` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), lap INTEGER PRIMARY KEY, position INTEGER, time TEXT, milliseconds INTEGER ); ",
        "output": "SELECT COUNT(DISTINCT driverid) FROM results WHERE raceid NOT IN( SELECT raceid FROM races WHERE year != 2009 )"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the types of vocals that the band member with the first name \"Solveig\" played the most? ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT type FROM vocals as t1 JOIN band as t2 ON t1.bandmate  =  t2.id WHERE firstname  =  \"Solveig\" GROUP BY type ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops. ###filtered_database_schema: CREATE TABLE `manufacturer` ( Manufacturer_ID INT PRIMARY KEY, Open_Year REAL, Name TEXT, Num_of_Factories INT, Num_of_Shops INT ); Sample rows from `manufacturer`: (1, 1980.0, Chevrolet House, 36, 8), (2, 1990.0, IKEA, 21, 19), (3, 1991.0, Ford Make, 12, 2), CREATE TABLE `furniture` ( Furniture_ID INT PRIMARY KEY, Name TEXT, Num_of_Component INT, Market_Rate REAL ); Sample rows from `furniture`: (1, Billiard table, 14, 52.5), (2, Chabudai, 4, 40.0), (3, Bookcase, 6, 1.0), CREATE TABLE `furniture_manufacte` ( Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID), Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID), Price_in_Dollar REAL ); Sample rows from `furniture_manufacte`: (1, 3, 239.0), (4, 2, 450.0), (7, 7, 2124.0), ",
        "output": "SELECT name ,  open_year FROM manufacturer WHERE num_of_shops  >  10 OR num_of_factories  <  10"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find all the customer information in state NY. ###filtered_database_schema: CREATE TABLE `Album` ( AlbumId INTEGER, Title varchar(160), ArtistId INTEGER PRIMARY KEY REFERENCES Artist(ArtistId) ); Sample rows from `Album`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `Artist` ( ArtistId INTEGER, Name varchar(120) ); Sample rows from `Artist`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `Customer` ( CustomerId INTEGER, FirstName varchar(40), LastName varchar(20), Company varchar(80), Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60), SupportRepId INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId) ); Sample rows from `Customer`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `Employee` ( EmployeeId INTEGER, LastName varchar(20), FirstName varchar(20), Title varchar(30), ReportsTo INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId), BirthDate datetime, HireDate datetime, Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60) ); Sample rows from `Employee`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `Genre` ( GenreId INTEGER, Name varchar(120) ); Sample rows from `Genre`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `Invoice` ( InvoiceId INTEGER, CustomerId INTEGER PRIMARY KEY REFERENCES Customer(CustomerId), InvoiceDate datetime, BillingAddress varchar(70), BillingCity varchar(40), BillingState varchar(40), BillingCountry varchar(40), BillingPostalCode varchar(10), Total decimal(10,2) ); Sample rows from `Invoice`: (1, 2, 2009-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2009-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2009-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `InvoiceLine` ( InvoiceLineId INTEGER, InvoiceId INTEGER PRIMARY KEY REFERENCES Invoice(InvoiceId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId), UnitPrice decimal(10,2), Quantity INTEGER ); Sample rows from `InvoiceLine`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `MediaType` ( MediaTypeId INTEGER, Name varchar(120) ); Sample rows from `MediaType`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `Playlist` ( PlaylistId INTEGER, Name varchar(120) ); Sample rows from `Playlist`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `PlaylistTrack` ( PlaylistId INTEGER PRIMARY KEY REFERENCES Playlist(PlaylistId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId) ); Sample rows from `PlaylistTrack`: (1, 1), (8, 1), (17, 1), CREATE TABLE `Track` ( TrackId INTEGER, Name varchar(200), AlbumId INTEGER PRIMARY KEY REFERENCES Album(AlbumId), MediaTypeId INTEGER PRIMARY KEY REFERENCES MediaType(MediaTypeId), GenreId INTEGER PRIMARY KEY REFERENCES Genre(GenreId), Composer varchar(220), Milliseconds INTEGER, Bytes INTEGER, UnitPrice decimal(10,2) ); Sample rows from `Track`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), ",
        "output": "SELECT * FROM customer WHERE state  =  \"NY\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: how large is new mexico ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT area FROM state WHERE state_name  =  \"new mexico\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: convolution papers by brian curless ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the authors who have papers in the VLDB conference . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT t1.name FROM publication as t4 JOIN conference as t2 ON t4.cid  =  t2.cid JOIN writes as t3 ON t3.pid  =  t4.pid JOIN author as t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show name, class, and date for all races. ###filtered_database_schema: CREATE TABLE `race` ( Race_ID INT PRIMARY KEY, Name TEXT, Class TEXT, Date TEXT, Track_ID TEXT REFERENCES track(Track_ID) ); Sample rows from `race`: (1, Rolex 24 At Daytona, DP/GT, January 26 January 27, 1), (2, Gainsco Grand Prix of Miami, DP/GT, March 29, 2), (3, Mexico City 250, DP/GT, April 19, 2), CREATE TABLE `track` ( Track_ID INT PRIMARY KEY, Name TEXT, Location TEXT, Seating REAL, Year_Opened REAL ); Sample rows from `track`: (1, Auto Club Speedway, Fontana, CA, 92000.0, 1997.0), (2, Chicagoland Speedway, Joliet, IL, 75000.0, 2001.0), (3, Darlington Raceway, Darlington, SC, 63000.0, 1950.0), ",
        "output": "SELECT name ,  class ,  date FROM race"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: At which conferences does Daniella Coelho publish ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of different scientists assigned to any project. ###filtered_database_schema: CREATE TABLE `Scientists` ( SSN INT PRIMARY KEY, Name Char(30) ); Sample rows from `Scientists`: (123234877, Michael Rogers), (152934485, Anand Manikutty), (222364883, Carol Smith), CREATE TABLE `Projects` ( Code Char(4) PRIMARY KEY, Name Char(50), Hours INT ); Sample rows from `Projects`: (AeH1, Winds: Studying Bernoullis Principle, 156), (AeH2, Aerodynamics and Bridge Design, 189), (AeH3, Aerodynamics and Gas Mileage, 256), CREATE TABLE `AssignedTo` ( Scientist INT PRIMARY KEY REFERENCES Scientists(SSN), Project char(4) PRIMARY KEY REFERENCES Projects(Code) ); Sample rows from `AssignedTo`: (123234877, AeH1), (152934485, AeH3), (222364883, Ast3), ",
        "output": "SELECT COUNT(DISTINCT scientist) FROM assignedto"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name of the instructor who advises the student with the greatest number of total credits? ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT t2.name FROM advisor as t1 JOIN instructor as t2 ON t1.i_id  =  t2.id JOIN student as t3 ON t1.s_id  =  t3.id ORDER BY t3.tot_cred DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is department name and office for the professor whose last name is Heffington? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT t3.dept_name  ,  t2.prof_office FROM employee as t1 JOIN professor as t2 ON t1.emp_num  =  t2.emp_num JOIN department as t3 ON t2.dept_code  =  t3.dept_code WHERE t1.emp_lname  =  'Heffington'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of patients who are not using the medication of Procrastin-X. ###filtered_database_schema: CREATE TABLE `Physician` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), SSN INTEGER ); Sample rows from `Physician`: (1, John Dorian, Staff Internist, 111111111), (2, Elliot Reid, Attending Physician, 222222222), (3, Christopher Turk, Surgical Attending Physician, 333333333), CREATE TABLE `Department` ( DepartmentID INTEGER, Name VARCHAR(30), Head INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Department`: (1, General Medicine, 4), (2, Surgery, 7), (3, Psychiatry, 9), CREATE TABLE `Affiliated_With` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID), PrimaryAffiliation BOOLEAN ); Sample rows from `Affiliated_With`: (1, 1, 1), (2, 1, 1), (3, 1, 0), CREATE TABLE `Procedures` ( Code INTEGER, Name VARCHAR(30), Cost REAL ); Sample rows from `Procedures`: (1, Reverse Rhinopodoplasty, 1500.0), (2, Obtuse Pyloric Recombobulation, 3750.0), (3, Folded Demiophtalmectomy, 4500.0), CREATE TABLE `Trained_In` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code), CertificationDate DATETIME, CertificationExpires DATETIME ); Sample rows from `Trained_In`: (3, 1, 2008-01-01, 2008-12-31), (3, 2, 2008-01-01, 2008-12-31), (3, 5, 2008-01-01, 2008-12-31), CREATE TABLE `Patient` ( SSN INTEGER, Name VARCHAR(30), Address VARCHAR(30), Phone VARCHAR(30), InsuranceID INTEGER, PCP INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Patient`: (100000001, John Smith, 42 Foobar Lane, 555-0256, 68476213, 1), (100000002, Grace Ritchie, 37 Snafu Drive, 555-0512, 36546321, 2), (100000003, Random J. Patient, 101 Omgbbq Street, 555-1204, 65465421, 2), CREATE TABLE `Nurse` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), Registered BOOLEAN, SSN INTEGER ); Sample rows from `Nurse`: (101, Carla Espinosa, Head Nurse, 1, 111111110), (102, Laverne Roberts, Nurse, 1, 222222220), (103, Paul Flowers, Nurse, 0, 333333330), CREATE TABLE `Appointment` ( AppointmentID INTEGER, Patient INTEGER REFERENCES Patient(SSN), PrepNurse INTEGER REFERENCES Nurse(EmployeeID), Physician INTEGER REFERENCES Physician(EmployeeID), Start DATETIME, End DATETIME, ExaminationRoom TEXT ); Sample rows from `Appointment`: (13216584, 100000001, 101, 1, 2008-04-24 10:00, 2008-04-24 11:00, A), (26548913, 100000002, 101, 2, 2008-04-24 10:00, 2008-04-24 11:00, B), (36549879, 100000001, 102, 1, 2008-04-25 10:00, 2008-04-25 11:00, A), CREATE TABLE `Medication` ( Code INTEGER, Name VARCHAR(30), Brand VARCHAR(30), Description VARCHAR(30) ); Sample rows from `Medication`: (1, Procrastin-X, X, N/A), (2, Thesisin, Foo Labs, N/A), (3, Awakin, Bar Laboratories, N/A), CREATE TABLE `Prescribes` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Medication INTEGER PRIMARY KEY REFERENCES Medication(Code), Date DATETIME PRIMARY KEY, Appointment INTEGER REFERENCES Appointment(AppointmentID), Dose VARCHAR(30) ); Sample rows from `Prescribes`: (1, 100000001, 1, 2008-04-24 10:47, 13216584, 5), (9, 100000004, 2, 2008-04-27 10:53, 86213939, 10), (9, 100000004, 2, 2008-04-30 16:53, None, 5), CREATE TABLE `Block` ( BlockFloor INTEGER PRIMARY KEY, BlockCode INTEGER PRIMARY KEY ); Sample rows from `Block`: (1, 1), (1, 2), (1, 3), CREATE TABLE `Room` ( RoomNumber INTEGER, RoomType VARCHAR(30), BlockFloor INTEGER REFERENCES Block(BlockFloor), BlockCode INTEGER REFERENCES Block(BlockCode), Unavailable BOOLEAN ); Sample rows from `Room`: (101, Single, 1, 1, 0), (102, Single, 1, 1, 0), (103, Single, 1, 1, 0), CREATE TABLE `On_Call` ( Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID), BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor), BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode), OnCallStart DATETIME PRIMARY KEY, OnCallEnd DATETIME PRIMARY KEY ); Sample rows from `On_Call`: (101, 1, 1, 2008-11-04 11:00, 2008-11-04 19:00), (101, 1, 2, 2008-11-04 11:00, 2008-11-04 19:00), (102, 1, 3, 2008-11-04 11:00, 2008-11-04 19:00), CREATE TABLE `Stay` ( StayID INTEGER, Patient INTEGER REFERENCES Patient(SSN), Room INTEGER REFERENCES Room(RoomNumber), StayStart DATETIME, StayEnd DATETIME ); Sample rows from `Stay`: (3215, 100000001, 111, 2008-05-01, 2008-05-04), (3216, 100000003, 123, 2008-05-03, 2008-05-14), (3217, 100000004, 112, 2008-05-02, 2008-05-03), CREATE TABLE `Undergoes` ( Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code), Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID), DateUndergoes DATETIME PRIMARY KEY, Physician INTEGER REFERENCES Physician(EmployeeID), AssistingNurse INTEGER REFERENCES Nurse(EmployeeID) ); Sample rows from `Undergoes`: (100000001, 6, 3215, 2008-05-02, 3, 101), (100000001, 2, 3215, 2008-05-03, 7, 101), (100000004, 1, 3217, 2008-05-07, 3, 102), ",
        "output": "SELECT name FROM patient EXCEPT SELECT t1.name FROM patient as t1 JOIN prescribes as t2 ON t2.patient  =  t1.ssn JOIN medication as t3 ON t2.medication  =  t3.code WHERE t3.name  =  'Procrastin-X'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the dates of the latest logon of the students with family name \"Jaskolski\" or \"Langosh\"? ###filtered_database_schema: CREATE TABLE `Course_Authors_and_Tutors` ( author_id INTEGER, author_tutor_ATB VARCHAR(3), login_name VARCHAR(40), password VARCHAR(40), personal_name VARCHAR(80), middle_name VARCHAR(80), family_name VARCHAR(80), gender_mf VARCHAR(1), address_line_1 VARCHAR(80) ); Sample rows from `Course_Authors_and_Tutors`: (1, 331, jmckenzie, c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b, Cathrine, Ruthie, Grant, 0, 756 Monahan Mews Spinkashire, NJ 64230-5098), (2, 975, heidenreich.ara, 24b0ee84063c3b017ab1839e01b7280f47f7c7c2, Retha, Corene, Armstrong, 0, 98623 Huels Manor Jasttown, DE 31611), (3, 349, clementina29, cdaf6c3483f19e2253659a40a3aab786a3390f78, Darius, Ethyl, Reichel, 0, 99296 Keeling Courts North Audreanne, IL 28272), CREATE TABLE `Students` ( student_id INTEGER, date_of_registration DATETIME, date_of_latest_logon DATETIME, login_name VARCHAR(40), password VARCHAR(10), personal_name VARCHAR(40), middle_name VARCHAR(40), family_name VARCHAR(40) ); Sample rows from `Students`: (1, 2015-07-22 13:32:35, 2017-10-17 22:52:26, annamae.hoppe, db8765bb6f, Wilson, Aubrey, Ward), (2, 2015-07-02 00:21:42, 2017-06-24 22:16:27, wmiller, 35faf8182a, Karson, Luella, Jaskolski), (3, 2015-10-11 03:23:27, 2018-03-10 23:22:23, ahartmann, 8e064ec4e6, Mariela, Brandt, Legros), CREATE TABLE `Subjects` ( subject_id INTEGER, subject_name VARCHAR(120) ); Sample rows from `Subjects`: (1, Computer Science), (2, Arts), (3, Language), CREATE TABLE `Courses` ( course_id INTEGER, author_id INTEGER REFERENCES Course_Authors_and_Tutors(author_id), subject_id INTEGER REFERENCES Subjects(subject_id), course_name VARCHAR(120), course_description VARCHAR(255) ); Sample rows from `Courses`: (1, 8, 1, database, database), (2, 6, 1, advanced database, advanced database), (3, 15, 1, operating system, operating system), CREATE TABLE `Student_Course_Enrolment` ( registration_id INTEGER, student_id INTEGER REFERENCES Students(student_id), course_id INTEGER REFERENCES Courses(course_id), date_of_enrolment DATETIME, date_of_completion DATETIME ); Sample rows from `Student_Course_Enrolment`: (1, 11, 2, 2017-10-09 07:09:02, 2018-02-26 07:48:52), (2, 15, 4, 2017-11-13 12:49:33, 2018-03-04 01:24:56), (3, 10, 8, 2017-10-17 13:50:40, 2018-03-22 02:53:01), CREATE TABLE `Student_Tests_Taken` ( registration_id INTEGER REFERENCES Student_Course_Enrolment(registration_id), date_test_taken DATETIME, test_result VARCHAR(255) ); Sample rows from `Student_Tests_Taken`: (12, 2018-03-25 03:27:16, Fail), (10, 2018-03-25 21:50:22, Pass), (7, 2018-03-21 00:32:25, Pass), ",
        "output": "SELECT date_of_latest_logon FROM students WHERE family_name  =  \"Jaskolski\" OR family_name  =  \"Langosh\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: which state has the greatest population ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: list names of all departments ordered by their names. ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT dept_name FROM department ORDER BY dept_name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of rooms whose base price is between 120 and 150. ###filtered_database_schema: CREATE TABLE `Rooms` ( RoomId TEXT PRIMARY KEY, roomName TEXT, beds INTEGER, bedType TEXT, maxOccupancy INTEGER, basePrice INTEGER, decor TEXT ); Sample rows from `Rooms`: (RND, Recluse and defiance, 1, King, 2, 150, modern), (IBS, Interim but salutary, 1, King, 2, 150, traditional), (AOB, Abscond or bolster, 2, Queen, 4, 175, traditional), CREATE TABLE `Reservations` ( Code INTEGER, Room TEXT REFERENCES Rooms(RoomId), CheckIn TEXT, CheckOut TEXT, Rate REAL, LastName TEXT, FirstName TEXT, Adults INTEGER, Kids INTEGER ); Sample rows from `Reservations`: (10105, HBB, 23-OCT-10, 25-OCT-10, 100.0, SELBIG, CONRAD, 1, 0), (10183, IBD, 19-SEP-10, 20-SEP-10, 150.0, GABLER, DOLLIE, 2, 0), (10449, RND, 30-SEP-10, 01-OCT-10, 150.0, KLESS, NELSON, 1, 0), ",
        "output": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List official names of cities in descending order of population. ###filtered_database_schema: CREATE TABLE `city` ( City_ID INT PRIMARY KEY, Official_Name TEXT, Status TEXT, Area_km_2 REAL, Population REAL, Census_Ranking TEXT ); Sample rows from `city`: (1, Grand Falls/Grand-Sault, Town, 18.06, 5706.0, 636 of 5008), (2, Perth-Andover, Village, 8.89, 1778.0, 1442 of 5,008), (3, Plaster Rock, Village, 3.09, 1135.0, 1936 of 5,008), CREATE TABLE `farm` ( Farm_ID INT PRIMARY KEY, Year INT, Total_Horses REAL, Working_Horses REAL, Total_Cattle REAL, Oxen REAL, Bulls REAL, Cows REAL, Pigs REAL, Sheep_and_Goats REAL ); Sample rows from `farm`: (1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8), CREATE TABLE `farm_competition` ( Competition_ID INT PRIMARY KEY, Year INT, Theme TEXT, Host_city_ID INT REFERENCES city(City_ID), Hosts TEXT ); Sample rows from `farm_competition`: (1, 2013, Carnival M is back!, 1, Miley Cyrus Jared Leto and Karen Mok), (2, 2006, Codehunters, 2, Leehom Wang and Kelly Rowland), (3, 2005, MTV Asia Aid, 3, Alicia Keys), CREATE TABLE `competition_record` ( Competition_ID INT PRIMARY KEY REFERENCES farm_competition(Competition_ID), Farm_ID INT PRIMARY KEY REFERENCES farm(Farm_ID), Rank INT ); Sample rows from `competition_record`: (1, 8, 1), (1, 2, 2), (1, 3, 3), ",
        "output": "SELECT official_name FROM city ORDER BY population DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For each tourist attraction, return its name and the date when the tourists named Vincent or Vivian visited there. ###filtered_database_schema: CREATE TABLE `Ref_Hotel_Star_Ratings` ( star_rating_code CHAR(15) PRIMARY KEY, star_rating_description VARCHAR(80) ); Sample rows from `Ref_Hotel_Star_Ratings`: (1, star), (2, star), (3, star), CREATE TABLE `Locations` ( Location_ID INTEGER, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Locations`: (333, Astro Orbiter, 660 Shea Crescent, None), (368, African Animals, 254 Ottilie Junction, None), (417, American Adventure, 53815 Sawayn Tunnel Apt. 297, None), CREATE TABLE `Ref_Attraction_Types` ( Attraction_Type_Code CHAR(15) PRIMARY KEY, Attraction_Type_Description VARCHAR(255) ); Sample rows from `Ref_Attraction_Types`: (2, park), (3, garden), (5, gallery), CREATE TABLE `Visitors` ( Tourist_ID INTEGER PRIMARY KEY, Tourist_Details VARCHAR(255) ); Sample rows from `Visitors`: (164, Toney), (189, Graciela), (204, Vincent), CREATE TABLE `Features` ( Feature_ID INTEGER, Feature_Details VARCHAR(255) ); Sample rows from `Features`: (523, cafe), (528, park), (543, garden), CREATE TABLE `Hotels` ( hotel_id INTEGER, star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code), pets_allowed_yn CHAR(1), price_range REAL, other_hotel_details VARCHAR(255) ); Sample rows from `Hotels`: (123, 5, 1, 2914989.571, None), (144, 4, , , None), (172, 5, , 17012.682586009, None), CREATE TABLE `Tourist_Attractions` ( Tourist_Attraction_ID INTEGER, Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code), Location_ID INTEGER REFERENCES Locations(Location_ID), How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Tourist_Attractions`: (2113, 2, 579, bus, art museum, None, None, None), (2701, 6, 417, walk, UK gallery, None, None, None), (5076, 2, 868, shuttle, flying elephant, None, None, None), CREATE TABLE `Street_Markets` ( Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Market_Details VARCHAR(255) ); Sample rows from `Street_Markets`: (6852, Broadway), (7067, Fish Farm Market), CREATE TABLE `Shops` ( Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Shop_Details VARCHAR(255) ); Sample rows from `Shops`: (8429, soup), (8449, coffee), (8698, Flower), CREATE TABLE `Museums` ( Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Museum_Details VARCHAR(255) ); Sample rows from `Museums`: (2113, Yale Center for British Art), (2701, The Metropolitan Museum of Art), (5076, MoMA), CREATE TABLE `Royal_Family` ( Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Royal_Family_Details VARCHAR(255) ); Sample rows from `Royal_Family`: (9561, None), (9919, None), CREATE TABLE `Theme_Parks` ( Theme_Park_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Theme_Park_Details VARCHAR(255) ); Sample rows from `Theme_Parks`: (5265, Disney), (6476, Sea World), (6523, Universal Studios), CREATE TABLE `Visits` ( Visit_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID), Visit_Date DATETIME, Visit_Details VARCHAR(40) ); Sample rows from `Visits`: (183, 6653, 377, 2004-08-21 03:06:14, ), (268, 5076, 204, 2013-08-06 05:35:51, ), (273, 9360, 211, 2013-10-27 09:56:08, ), CREATE TABLE `Photos` ( Photo_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Photos`: (211, 8449, game1, None, 702, None), (280, 7067, game2, None, 762, None), (303, 5076, game3, None, 392, None), CREATE TABLE `Staff` ( Staff_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(40), Other_Details VARCHAR(255) ); Sample rows from `Staff`: (170, 6476, Whitney, None), (219, 6476, Kaela, None), (237, 7067, Eunice, None), CREATE TABLE `Tourist_Attraction_Features` ( Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID) ); Sample rows from `Tourist_Attraction_Features`: (5076, 528), (5076, 681), (5265, 523), ",
        "output": "SELECT t1.name ,  t3.visit_date FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Vincent\" OR t2.tourist_details  =  \"Vivian\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Give the name of the highest paid instructor. ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: could you tell me what is the highest point in the state of texas ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: give me some good restaurants in the bay area ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many citations does noah a smith has ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Display the first name and department name for each employee. ###filtered_database_schema: CREATE TABLE `regions` ( REGION_ID decimal(5,0) PRIMARY KEY, REGION_NAME varchar(25) ); Sample rows from `regions`: (1, Europe\\r), (2, Americas\\r), (3, Asia\\r), CREATE TABLE `countries` ( COUNTRY_ID varchar(2) PRIMARY KEY, COUNTRY_NAME varchar(40), REGION_ID decimal(10,0) REFERENCES regions(REGION_ID) ); Sample rows from `countries`: (AR, Argentina, 2), (AU, Australia, 3), (BE, Belgium, 1), CREATE TABLE `departments` ( DEPARTMENT_ID decimal(4,0) PRIMARY KEY, DEPARTMENT_NAME varchar(30), MANAGER_ID decimal(6,0), LOCATION_ID decimal(4,0) ); Sample rows from `departments`: (10, Administration, 200, 1700), (20, Marketing, 201, 1800), (30, Purchasing, 114, 1700), CREATE TABLE `jobs` ( JOB_ID varchar(10) PRIMARY KEY, JOB_TITLE varchar(35), MIN_SALARY decimal(6,0), MAX_SALARY decimal(6,0) ); Sample rows from `jobs`: (AD_PRES, President, 20000, 40000), (AD_VP, Administration Vice President, 15000, 30000), (AD_ASST, Administration Assistant, 3000, 6000), CREATE TABLE `employees` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY, FIRST_NAME varchar(20), LAST_NAME varchar(25), EMAIL varchar(25), PHONE_NUMBER varchar(20), HIRE_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), SALARY decimal(8,2), COMMISSION_PCT decimal(2,2), MANAGER_ID decimal(6,0), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `employees`: (100, Steven, King, SKING, 515.123.4567, 1987-06-17, AD_PRES, 24000, 0, 0, 90), (101, Neena, Kochhar, NKOCHHAR, 515.123.4568, 1987-06-18, AD_VP, 17000, 0, 100, 90), (102, Lex, De Haan, LDEHAAN, 515.123.4569, 1987-06-19, AD_VP, 17000, 0, 100, 90), CREATE TABLE `job_history` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY REFERENCES employees(EMPLOYEE_ID), START_DATE date PRIMARY KEY, END_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `job_history`: (102, 1993-01-13, 1998-07-24, IT_PROG, 60), (101, 1989-09-21, 1993-10-27, AC_ACCOUNT, 110), (101, 1993-10-28, 1997-03-15, AC_MGR, 110), CREATE TABLE `locations` ( LOCATION_ID decimal(4,0) PRIMARY KEY, STREET_ADDRESS varchar(40), POSTAL_CODE varchar(12), CITY varchar(30), STATE_PROVINCE varchar(25), COUNTRY_ID varchar(2) REFERENCES countries(COUNTRY_ID) ); Sample rows from `locations`: (1000, 1297 Via Cola di Rie, 989, Roma, , IT), (1100, 93091 Calle della Testa, 10934, Venice, , IT), (1200, 2017 Shinjuku-ku, 1689, Tokyo, Tokyo Prefecture, JP), ",
        "output": "SELECT t1.first_name ,  t2.department_name FROM employees as t1 JOIN departments as t2 ON t1.department_id  =  t2.department_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the document status description of the document with id 1? ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( document_type_code CHAR(15) PRIMARY KEY, document_type_description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CD, b), (Paper, u), (Hard Drive, f), CREATE TABLE `Roles` ( role_code CHAR(15) PRIMARY KEY, role_description VARCHAR(255) ); Sample rows from `Roles`: (ED, Editor), (PT, Photo), (MG, Manager), CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (0, IT), (1, MX), (2, DE), CREATE TABLE `Ref_Document_Status` ( document_status_code CHAR(15) PRIMARY KEY, document_status_description VARCHAR(255) ); Sample rows from `Ref_Document_Status`: (working, currently working on), (done, mailed), (overdue, mailed late), CREATE TABLE `Ref_Shipping_Agents` ( shipping_agent_code CHAR(15) PRIMARY KEY, shipping_agent_name VARCHAR(255), shipping_agent_description VARCHAR(255) ); Sample rows from `Ref_Shipping_Agents`: (UP, UPS, g), (US, USPS, q), (AL, Airline, w), CREATE TABLE `Documents` ( document_id INTEGER, document_status_code CHAR(15) REFERENCES Ref_Document_Status(document_status_code), document_type_code CHAR(15) REFERENCES Ref_Document_Types(document_type_code), shipping_agent_code CHAR(15) REFERENCES Ref_Shipping_Agents(shipping_agent_code), receipt_date DATETIME, receipt_number VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Documents`: (1, working, CD, UP, 2008-04-21 20:42:25, 19, z), (2, done, Paper, US, 1974-05-08 00:00:46, 34, h), (3, done, Paper, UP, 2014-12-25 17:22:44, 93, h), CREATE TABLE `Employees` ( employee_id INTEGER, role_code CHAR(15) REFERENCES Roles(role_code), employee_name VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Employees`: (1, ED, Koby, h), (2, ED, Kenyon, f), (3, PR, Haley, b), CREATE TABLE `Document_Drafts` ( document_id INTEGER PRIMARY KEY REFERENCES Documents(document_id), draft_number INTEGER PRIMARY KEY, draft_details VARCHAR(255) ); Sample rows from `Document_Drafts`: (1, 0, e), (1, 2, k), (2, 1, v), CREATE TABLE `Draft_Copies` ( document_id INTEGER PRIMARY KEY REFERENCES Document_Drafts(document_id), draft_number INTEGER PRIMARY KEY REFERENCES Document_Drafts(draft_number), copy_number INTEGER PRIMARY KEY ); Sample rows from `Draft_Copies`: (2, 8, 5), (4, 9, 6), (23, 9, 15), CREATE TABLE `Circulation_History` ( document_id INTEGER PRIMARY KEY REFERENCES Draft_Copies(document_id), draft_number INTEGER PRIMARY KEY REFERENCES Draft_Copies(draft_number), copy_number INTEGER PRIMARY KEY REFERENCES Draft_Copies(copy_number), employee_id INTEGER PRIMARY KEY REFERENCES Employees(employee_id) ); Sample rows from `Circulation_History`: (20, 17, 15, 8), (1, 2, 5, 1), (2, 1, 4, 2), CREATE TABLE `Documents_Mailed` ( document_id INTEGER PRIMARY KEY REFERENCES Documents(document_id), mailed_to_address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), mailing_date DATETIME ); Sample rows from `Documents_Mailed`: (2, 8, 1977-04-01 17:03:50), (4, 3, 1992-11-07 15:03:41), (4, 9, 1973-02-21 10:17:01), ",
        "output": "SELECT ref_document_status.document_status_description FROM ref_document_status JOIN documents ON documents.document_status_code = ref_document_status.document_status_code WHERE documents.document_id = 1;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What papers talk about Question Answering ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the name, id and the corresponding number of visits for each  tourist attraction? ###filtered_database_schema: CREATE TABLE `Ref_Hotel_Star_Ratings` ( star_rating_code CHAR(15) PRIMARY KEY, star_rating_description VARCHAR(80) ); Sample rows from `Ref_Hotel_Star_Ratings`: (1, star), (2, star), (3, star), CREATE TABLE `Locations` ( Location_ID INTEGER, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Locations`: (333, Astro Orbiter, 660 Shea Crescent, None), (368, African Animals, 254 Ottilie Junction, None), (417, American Adventure, 53815 Sawayn Tunnel Apt. 297, None), CREATE TABLE `Ref_Attraction_Types` ( Attraction_Type_Code CHAR(15) PRIMARY KEY, Attraction_Type_Description VARCHAR(255) ); Sample rows from `Ref_Attraction_Types`: (2, park), (3, garden), (5, gallery), CREATE TABLE `Visitors` ( Tourist_ID INTEGER PRIMARY KEY, Tourist_Details VARCHAR(255) ); Sample rows from `Visitors`: (164, Toney), (189, Graciela), (204, Vincent), CREATE TABLE `Features` ( Feature_ID INTEGER, Feature_Details VARCHAR(255) ); Sample rows from `Features`: (523, cafe), (528, park), (543, garden), CREATE TABLE `Hotels` ( hotel_id INTEGER, star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code), pets_allowed_yn CHAR(1), price_range REAL, other_hotel_details VARCHAR(255) ); Sample rows from `Hotels`: (123, 5, 1, 2914989.571, None), (144, 4, , , None), (172, 5, , 17012.682586009, None), CREATE TABLE `Tourist_Attractions` ( Tourist_Attraction_ID INTEGER, Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code), Location_ID INTEGER REFERENCES Locations(Location_ID), How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Tourist_Attractions`: (2113, 2, 579, bus, art museum, None, None, None), (2701, 6, 417, walk, UK gallery, None, None, None), (5076, 2, 868, shuttle, flying elephant, None, None, None), CREATE TABLE `Street_Markets` ( Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Market_Details VARCHAR(255) ); Sample rows from `Street_Markets`: (6852, Broadway), (7067, Fish Farm Market), CREATE TABLE `Shops` ( Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Shop_Details VARCHAR(255) ); Sample rows from `Shops`: (8429, soup), (8449, coffee), (8698, Flower), CREATE TABLE `Museums` ( Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Museum_Details VARCHAR(255) ); Sample rows from `Museums`: (2113, Yale Center for British Art), (2701, The Metropolitan Museum of Art), (5076, MoMA), CREATE TABLE `Royal_Family` ( Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Royal_Family_Details VARCHAR(255) ); Sample rows from `Royal_Family`: (9561, None), (9919, None), CREATE TABLE `Theme_Parks` ( Theme_Park_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Theme_Park_Details VARCHAR(255) ); Sample rows from `Theme_Parks`: (5265, Disney), (6476, Sea World), (6523, Universal Studios), CREATE TABLE `Visits` ( Visit_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID), Visit_Date DATETIME, Visit_Details VARCHAR(40) ); Sample rows from `Visits`: (183, 6653, 377, 2004-08-21 03:06:14, ), (268, 5076, 204, 2013-08-06 05:35:51, ), (273, 9360, 211, 2013-10-27 09:56:08, ), CREATE TABLE `Photos` ( Photo_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Photos`: (211, 8449, game1, None, 702, None), (280, 7067, game2, None, 762, None), (303, 5076, game3, None, 392, None), CREATE TABLE `Staff` ( Staff_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(40), Other_Details VARCHAR(255) ); Sample rows from `Staff`: (170, 6476, Whitney, None), (219, 6476, Kaela, None), (237, 7067, Eunice, None), CREATE TABLE `Tourist_Attraction_Features` ( Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID) ); Sample rows from `Tourist_Attraction_Features`: (5076, 528), (5076, 681), (5265, 523), ",
        "output": "SELECT t1.name ,  t2.tourist_attraction_id ,   COUNT(*) FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For each director who directed more than one movie, what are the titles and dates of release for all those movies? ###filtered_database_schema: CREATE TABLE `Movie` ( mID INT PRIMARY KEY, title TEXT, year INT, director TEXT ); Sample rows from `Movie`: (101, Gone with the Wind, 1939, Victor Fleming), (102, Star Wars, 1977, George Lucas), (103, The Sound of Music, 1965, Robert Wise), CREATE TABLE `Reviewer` ( rID INT PRIMARY KEY, name TEXT ); Sample rows from `Reviewer`: (201, Sarah Martinez), (202, Daniel Lewis), (203, Brittany Harris), CREATE TABLE `Rating` ( rID INT REFERENCES Reviewer(rID), mID INT REFERENCES Movie(mID), stars INT, ratingDate date ); Sample rows from `Rating`: (201, 101, 2, 2011-01-22), (201, 101, 4, 2011-01-27), (202, 106, 4, None), ",
        "output": "SELECT t1.title ,  t1.year FROM movie as t1 JOIN movie as t2 ON t1.director  =  t2.director WHERE t1.title != t2.title"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the address of employee Nancy Edwards? ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers? ###filtered_database_schema: CREATE TABLE `Third_Party_Companies` ( company_id INTEGER, company_type VARCHAR(5), company_name VARCHAR(255), company_address VARCHAR(255), other_company_details VARCHAR(255) ); Sample rows from `Third_Party_Companies`: (1, Maintenance Contractor, Langworth-Funk, 615 Jacobs Mews, Uganda), (2, Maintenance Contractor, McDermott Group, 873 Conrad Creek Apt. 286, China), (3, Maintenance Contractor, Schuppe-Carroll, 066 Bechtelar Ridge, United Arab Emirates), CREATE TABLE `Maintenance_Contracts` ( maintenance_contract_id INTEGER, maintenance_contract_company_id INTEGER REFERENCES Third_Party_Companies(company_id), contract_start_date DATETIME, contract_end_date DATETIME, other_contract_details VARCHAR(255) ); Sample rows from `Maintenance_Contracts`: (1, 15, 2017-09-13 11:51:29, 2018-03-16 21:21:50, None), (2, 9, 2017-12-18 11:43:16, 2018-03-22 06:00:37, None), (3, 11, 2017-05-06 02:32:19, 2018-03-20 14:02:54, None), CREATE TABLE `Parts` ( part_id INTEGER, part_name VARCHAR(255), chargeable_yn VARCHAR(1), chargeable_amount VARCHAR(20), other_part_details VARCHAR(255) ); Sample rows from `Parts`: (1, top, 0, 4, None), (2, middle, 1, 9, None), (3, package, 1, 9, None), CREATE TABLE `Skills` ( skill_id INTEGER, skill_code VARCHAR(20), skill_description VARCHAR(255) ); Sample rows from `Skills`: (1, ELEC, Electrical), (2, MECH, Mechanical), (3, TV, TV, Video), CREATE TABLE `Staff` ( staff_id INTEGER, staff_name VARCHAR(255), gender VARCHAR(1), other_staff_details VARCHAR(255) ); Sample rows from `Staff`: (1, Audreanne, 1, Manager), (2, Berneice, 1, Manager), (3, Helena, 1, None), CREATE TABLE `Assets` ( asset_id INTEGER, maintenance_contract_id INTEGER REFERENCES Maintenance_Contracts(maintenance_contract_id), supplier_company_id INTEGER REFERENCES Third_Party_Companies(company_id), asset_details VARCHAR(255), asset_make VARCHAR(20), asset_model VARCHAR(20), asset_acquired_date DATETIME, asset_disposed_date DATETIME, other_asset_details VARCHAR(255) ); Sample rows from `Assets`: (1, 2, 2, dell laptop1, PT, 58 ub, 2017-12-25 00:31:27, 2018-03-14 10:50:00, None), (2, 14, 1, dell laptop2, IN, 35 xt, 2018-01-27 00:59:46, 2018-03-20 04:24:09, None), (3, 7, 2, dell laptop3, IT, 63 ok, 2017-09-07 08:13:15, 2018-03-08 20:50:40, Bad condition), CREATE TABLE `Asset_Parts` ( asset_id INTEGER REFERENCES Assets(asset_id), part_id INTEGER REFERENCES Parts(part_id) ); Sample rows from `Asset_Parts`: (5, 3), (3, 3), (10, 1), CREATE TABLE `Maintenance_Engineers` ( engineer_id INTEGER, company_id INTEGER REFERENCES Third_Party_Companies(company_id), first_name VARCHAR(50), last_name VARCHAR(50), other_details VARCHAR(255) ); Sample rows from `Maintenance_Engineers`: (1, 14, Etha, Reinger, Skilled), (2, 2, Clemens, Orn, None), (3, 6, Samanta, Hauck, None), CREATE TABLE `Engineer_Skills` ( engineer_id INTEGER REFERENCES Maintenance_Engineers(engineer_id), skill_id INTEGER REFERENCES Skills(skill_id) ); Sample rows from `Engineer_Skills`: (10, 2), (10, 1), (15, 1), CREATE TABLE `Fault_Log` ( fault_log_entry_id INTEGER, asset_id INTEGER REFERENCES Assets(asset_id), recorded_by_staff_id INTEGER REFERENCES Staff(staff_id), fault_log_entry_datetime DATETIME, fault_description VARCHAR(255), other_fault_details VARCHAR(255) ); Sample rows from `Fault_Log`: (1, 3, 14, 2018-03-21 04:25:00, system error, None), (2, 7, 4, 2018-03-13 09:43:05, system error, None), (3, 6, 9, 2018-02-24 09:28:20, system error, None), CREATE TABLE `Engineer_Visits` ( engineer_visit_id INTEGER, contact_staff_id INTEGER REFERENCES Staff(staff_id), engineer_id INTEGER REFERENCES Maintenance_Engineers(engineer_id), fault_log_entry_id INTEGER REFERENCES Fault_Log(fault_log_entry_id), fault_status VARCHAR(10), visit_start_datetime DATETIME, visit_end_datetime DATETIME, other_visit_details VARCHAR(255) ); Sample rows from `Engineer_Visits`: (1, 8, 8, 13, Waiting, 1978-10-12 23:14:40, 1988-01-07 06:41:51, None), (2, 7, 15, 13, Return, 1980-05-02 23:31:18, 1990-08-30 22:44:16, None), (3, 7, 15, 4, Waiting, 2010-02-23 18:16:23, 1982-05-13 02:08:41, None), CREATE TABLE `Part_Faults` ( part_fault_id INTEGER, part_id INTEGER REFERENCES Parts(part_id), fault_short_name VARCHAR(20), fault_description VARCHAR(255), other_fault_details VARCHAR(255) ); Sample rows from `Part_Faults`: (1, 1, PW, Package Wrong, None), (2, 1, PW, Package Wrong, None), (3, 3, TW, Top Parts Wrong, None), CREATE TABLE `Fault_Log_Parts` ( fault_log_entry_id INTEGER REFERENCES Fault_Log(fault_log_entry_id), part_fault_id INTEGER REFERENCES Part_Faults(part_fault_id), fault_status VARCHAR(10) ); Sample rows from `Fault_Log_Parts`: (12, 3, Reported), (7, 4, Reported), (1, 9, Return), CREATE TABLE `Skills_Required_To_Fix` ( part_fault_id INTEGER REFERENCES Part_Faults(part_fault_id), skill_id INTEGER REFERENCES Skills(skill_id) ); Sample rows from `Skills_Required_To_Fix`: (3, 2), (12, 3), (6, 1), ",
        "output": "SELECT t1.staff_name ,  t1.staff_id FROM staff as t1 JOIN fault_log as t2 ON t1.staff_id  =  t2.recorded_by_staff_id EXCEPT SELECT t3.staff_name ,  t3.staff_id FROM staff as t3 JOIN engineer_visits as t4 ON t3.staff_id  =  t4.contact_staff_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of the campuses opened before 1800. ###filtered_database_schema: CREATE TABLE `Campuses` ( Id INTEGER, Campus TEXT, Location TEXT, County TEXT, Year INTEGER ); Sample rows from `Campuses`: (1, California State University-Bakersfield, Bakersfield, Kern, 1965), (2, California State University-Channel Islands, Camarillo, Ventura, 2002), (3, California State University-Chico, Chico, Butte, 1887), CREATE TABLE `csu_fees` ( Campus INTEGER REFERENCES Campuses(Id), Year INTEGER, CampusFee INTEGER ); Sample rows from `csu_fees`: (1, 1996, 1951), (2, 2003, 1868), (3, 1996, 2042), CREATE TABLE `degrees` ( Year INTEGER PRIMARY KEY, Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Degrees INTEGER ); Sample rows from `degrees`: (1990, 1, 701), (1991, 1, 681), (1992, 1, 791), CREATE TABLE `discipline_enrollments` ( Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Discipline INTEGER PRIMARY KEY, Year INTEGER, Undergraduate INTEGER, Graduate INTEGER ); Sample rows from `discipline_enrollments`: (1, 4, 2004, 248, 0), (1, 5, 2004, 811, 73), (1, 6, 2004, 199, 0), CREATE TABLE `enrollments` ( Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Year INTEGER PRIMARY KEY, TotalEnrollment_AY INTEGER, FTE_AY INTEGER ); Sample rows from `enrollments`: (1, 1956, 384, 123), (1, 1957, 432, 151), (1, 1958, 422, 178), CREATE TABLE `faculty` ( Campus INTEGER REFERENCES Campuses(Id), Year INTEGER, Faculty REAL ); Sample rows from `faculty`: (1, 2002, 357.1), (2, 2002, 48.4), (3, 2002, 742.8), ",
        "output": "SELECT campus FROM campuses WHERE year  <  1800"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the color code and description for the product with the name 'chervil'. ###filtered_database_schema: CREATE TABLE `Ref_Characteristic_Types` ( characteristic_type_code VARCHAR(15) PRIMARY KEY, characteristic_type_description VARCHAR(80) ); Sample rows from `Ref_Characteristic_Types`: (Grade, Grade), (Purity, Purity), CREATE TABLE `Ref_Colors` ( color_code VARCHAR(15) PRIMARY KEY, color_description VARCHAR(80) ); Sample rows from `Ref_Colors`: (9, red), (5, green), (1, yellow), CREATE TABLE `Ref_Product_Categories` ( product_category_code VARCHAR(15) PRIMARY KEY, product_category_description VARCHAR(80), unit_of_measure VARCHAR(20) ); Sample rows from `Ref_Product_Categories`: (Herbs, Herbs, Handful ), (Seeds, Seeds, Weight - pound,kilo.), (Spices, Spices, Weight - pound,kilo.), CREATE TABLE `Characteristics` ( characteristic_id INTEGER, characteristic_type_code VARCHAR(15) REFERENCES Ref_Characteristic_Types(characteristic_type_code), characteristic_data_type VARCHAR(10), characteristic_name VARCHAR(80), other_characteristic_details VARCHAR(255) ); Sample rows from `Characteristics`: (1, Grade, numquam, slow, None), (2, Grade, doloribus, fast, None), (3, Purity, rem, warm, None), CREATE TABLE `Products` ( product_id INTEGER, color_code VARCHAR(15) REFERENCES Ref_Colors(color_code), product_category_code VARCHAR(15) REFERENCES Ref_Product_Categories(product_category_code), product_name VARCHAR(80), typical_buying_price VARCHAR(20), typical_selling_price VARCHAR(20), product_description VARCHAR(255), other_product_details VARCHAR(255) ); Sample rows from `Products`: (1, 4, Spices, cumin, , 2878.3, et, None), (2, 2, Spices, peper, 352447.2874677, 1892070.2803543, rerum, None), (3, 9, Herbs, basil, 503.8431967, 0.1859512, officia, None), CREATE TABLE `Product_Characteristics` ( product_id INTEGER REFERENCES Products(product_id), characteristic_id INTEGER REFERENCES Characteristics(characteristic_id), product_characteristic_value VARCHAR(50) ); Sample rows from `Product_Characteristics`: (13, 13, low), (11, 2, low), (5, 15, low), ",
        "output": "SELECT t1.color_code ,  t2.color_description FROM products as t1 JOIN ref_colors as t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of different directors. ###filtered_database_schema: CREATE TABLE `book_club` ( book_club_id INT PRIMARY KEY, Year INT, Author_or_Editor TEXT, Book_Title TEXT, Publisher TEXT, Category TEXT, Result TEXT ); Sample rows from `book_club`: (1, 1989, Michael Nava, Goldenboy, Alyson, Gay M/SF, Won [A ]), (2, 1989, Donald Ward, Death Takes the Stage, St. Martin's Press, Gay M/SF, Nom), (3, 1989, Michael Bishop, Unicorn Mountain, William Morrow, Gay M/SF, Nom), CREATE TABLE `movie` ( movie_id INT PRIMARY KEY, Title TEXT, Year INT, Director TEXT, Budget_million REAL, Gross_worldwide INT ); Sample rows from `movie`: (1, The Boondock Saints, 1999, Troy Duffy, 6.0, 30471), (2, The Big Kahuna, 1999, John Swanbeck, 7.0, 3728888), (3, Storm Catcher, 1999, Anthony Hickox, 5.0, 40500), CREATE TABLE `culture_company` ( Company_name TEXT PRIMARY KEY, Type TEXT, Incorporated_in TEXT, Group_Equity_Shareholding REAL, book_club_id TEXT REFERENCES book_club(book_club_id), movie_id TEXT REFERENCES movie(movie_id) ); Sample rows from `culture_company`: (Culture China, Corporate, China, 18.77, 1, 2), (Culture China Cargo, Joint Venture, China, 49.0, 2, 3), (Culture Hong Kong, Joint Venture, Hong Kong, 60.0, 3, 4), ",
        "output": "SELECT COUNT(DISTINCT director) FROM movie"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which type of policy is most frequently used? Give me the policy type code. ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_Details VARCHAR(255) ); Sample rows from `Customers`: (252, America Jaskolski), (263, Ellsworth Paucek), (334, Mrs. Hanna Willms), CREATE TABLE `Staff` ( Staff_ID INTEGER, Staff_Details VARCHAR(255) ); Sample rows from `Staff`: (406, Clifton), (427, Cathryn), (510, Kaci), CREATE TABLE `Policies` ( Policy_ID INTEGER, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Policy_Type_Code CHAR(15), Start_Date DATETIME, End_Date DATETIME ); Sample rows from `Policies`: (125, 808, Deputy, 2018-02-10 08:56:30, 2018-03-18 09:17:26), (151, 380, Jurisdiction, 2017-12-20 06:02:31, 2017-09-16 22:04:13), (287, 334, Jurisdiction, 2017-03-16 18:16:52, 2017-11-24 06:36:51), CREATE TABLE `Claim_Headers` ( Claim_Header_ID INTEGER, Claim_Status_Code CHAR(15), Claim_Type_Code CHAR(15), Policy_ID INTEGER REFERENCES Policies(Policy_ID), Date_of_Claim DATETIME, Date_of_Settlement DATETIME, Amount_Claimed DECIMAL(20,4), Amount_Piad DECIMAL(20,4) ); Sample rows from `Claim_Headers`: (15, Settled, Handphone Subsidy, 518, 2016-05-31 06:07:11, 2018-02-23 03:46:38, 349.15, 582.03), (24, Disputed, Child Birth, 518, 2016-12-30 21:43:21, 2017-10-08 21:43:14, 318.16, 309.2), (27, Disputed, Overtime Meal Subsidy, 518, 2017-05-01 13:34:43, 2017-11-16 04:06:05, 362.71, 132.97), CREATE TABLE `Claims_Documents` ( Claim_ID INTEGER PRIMARY KEY REFERENCES Claim_Headers(Claim_Header_ID), Document_Type_Code CHAR(15) PRIMARY KEY, Created_by_Staff_ID INTEGER REFERENCES Staff(Staff_ID), Created_Date INTEGER ); Sample rows from `Claims_Documents`: (24, Document, 718, 8), (27, Document, 986, 6), (27, Medical, 427, 8), CREATE TABLE `Claims_Processing_Stages` ( Claim_Stage_ID INTEGER, Next_Claim_Stage_ID INTEGER, Claim_Status_Name VARCHAR(255), Claim_Status_Description VARCHAR(255) ); Sample rows from `Claims_Processing_Stages`: (1, 1, Open, Open a new claim), (3, 1, Close, Close a claim), CREATE TABLE `Claims_Processing` ( Claim_Processing_ID INTEGER, Claim_ID INTEGER REFERENCES Claim_Headers(Claim_Header_ID), Claim_Outcome_Code CHAR(15), Claim_Stage_ID INTEGER, Staff_ID INTEGER REFERENCES Staff(Staff_ID) ); Sample rows from `Claims_Processing`: (118, 28, In progress, 1, 771), (145, 62, In progress, 1, 589), (213, 27, In progress, 1, 589), ",
        "output": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the name and code of the location with the smallest number of documents? ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CV, CV, ), (BK, Book, ), (PR, Paper, ), CREATE TABLE `Ref_Calendar` ( Calendar_Date DATETIME PRIMARY KEY, Day_Number INTEGER ); Sample rows from `Ref_Calendar`: (1972-03-31 09:47:22, 5), (1976-06-15 03:40:06, 7), (1985-05-13 12:19:43, 7), CREATE TABLE `Ref_Locations` ( Location_Code CHAR(15) PRIMARY KEY, Location_Name VARCHAR(255), Location_Description VARCHAR(255) ); Sample rows from `Ref_Locations`: (b, Brazil, ), (c, Canada, ), (e, Edinburgh, ), CREATE TABLE `Roles` ( Role_Code CHAR(15) PRIMARY KEY, Role_Name VARCHAR(255), Role_Description VARCHAR(255) ); Sample rows from `Roles`: (MG, Manager, Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti.), (ED, Editor, Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos.), (PT, Photo, Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt.), CREATE TABLE `All_Documents` ( Document_ID INTEGER, Date_Stored DATETIME REFERENCES Ref_Calendar(Calendar_Date), Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255) ); Sample rows from `All_Documents`: (7, 1976-06-15 03:40:06, CV, Robin CV, None, None), (11, 1986-10-14 17:53:39, CV, Marry CV, None, None), (25, 2008-06-08 12:45:38, BK, One hundred years of solitude, None, None), CREATE TABLE `Employees` ( Employee_ID INTEGER, Role_Code CHAR(15) REFERENCES Roles(Role_Code), Employee_Name VARCHAR(255), Gender_MFU CHAR(1), Date_of_Birth DATETIME, Other_Details VARCHAR(255) ); Sample rows from `Employees`: (25, HR, Leo, , 1973-02-15 17:16:00, None), (30, MG, Ebba, , 1979-09-20 12:50:15, None), (38, ED, Stephanie, 1, 2012-03-30 23:02:28, None), CREATE TABLE `Document_Locations` ( Document_ID INTEGER PRIMARY KEY REFERENCES All_Documents(Document_ID), Location_Code CHAR(15) PRIMARY KEY REFERENCES Ref_Locations(Location_Code), Date_in_Location_From DATETIME PRIMARY KEY REFERENCES Ref_Calendar(Calendar_Date), Date_in_Locaton_To DATETIME REFERENCES Ref_Calendar(Calendar_Date) ); Sample rows from `Document_Locations`: (7, e, 2017-01-06 23:17:22, 2008-06-08 12:45:38), (11, x, 2017-01-06 23:17:22, 2012-07-03 09:48:46), (81, c, 1972-03-31 09:47:22, 1987-11-05 06:11:22), CREATE TABLE `Documents_to_be_Destroyed` ( Document_ID INTEGER REFERENCES All_Documents(Document_ID), Destruction_Authorised_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Destroyed_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Planned_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Actual_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Other_Details VARCHAR(255) ); Sample rows from `Documents_to_be_Destroyed`: (7, 156, 138, 1988-02-01 14:41:52, 2017-01-06 23:17:22, None), (11, 55, 173, 2010-11-26 19:22:50, 1986-10-14 17:53:39, None), (25, 183, 156, 2009-08-18 03:29:08, 1995-01-01 03:52:11, None), ",
        "output": "SELECT t2.location_name ,  t1.location_code FROM document_locations as t1 JOIN ref_locations as t2 ON t1.location_code  =  t2.location_code GROUP BY t1.location_code ORDER BY COUNT(*) asC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all movies directed by Steven Spielberg? ###filtered_database_schema: CREATE TABLE `Movie` ( mID INT PRIMARY KEY, title TEXT, year INT, director TEXT ); Sample rows from `Movie`: (101, Gone with the Wind, 1939, Victor Fleming), (102, Star Wars, 1977, George Lucas), (103, The Sound of Music, 1965, Robert Wise), CREATE TABLE `Reviewer` ( rID INT PRIMARY KEY, name TEXT ); Sample rows from `Reviewer`: (201, Sarah Martinez), (202, Daniel Lewis), (203, Brittany Harris), CREATE TABLE `Rating` ( rID INT REFERENCES Reviewer(rID), mID INT REFERENCES Movie(mID), stars INT, ratingDate date ); Sample rows from `Rating`: (201, 101, 2, 2011-01-22), (201, 101, 4, 2011-01-27), (202, 106, 4, None), ",
        "output": "SELECT title FROM movie WHERE director = 'Steven Spielberg'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For directors who had more than one movie, return the titles and produced years of all movies directed by them. ###filtered_database_schema: CREATE TABLE `Movie` ( mID INT PRIMARY KEY, title TEXT, year INT, director TEXT ); Sample rows from `Movie`: (101, Gone with the Wind, 1939, Victor Fleming), (102, Star Wars, 1977, George Lucas), (103, The Sound of Music, 1965, Robert Wise), CREATE TABLE `Reviewer` ( rID INT PRIMARY KEY, name TEXT ); Sample rows from `Reviewer`: (201, Sarah Martinez), (202, Daniel Lewis), (203, Brittany Harris), CREATE TABLE `Rating` ( rID INT REFERENCES Reviewer(rID), mID INT REFERENCES Movie(mID), stars INT, ratingDate date ); Sample rows from `Rating`: (201, 101, 2, 2011-01-22), (201, 101, 4, 2011-01-27), (202, 106, 4, None), ",
        "output": "SELECT t1.title ,  t1.year FROM movie as t1 JOIN movie as t2 ON t1.director  =  t2.director WHERE t1.title != t2.title"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ? ###filtered_database_schema: CREATE TABLE `wrestler` ( Wrestler_ID INT PRIMARY KEY, Name TEXT, Reign TEXT, Days_held TEXT, Location TEXT, Event TEXT ); Sample rows from `wrestler`: (1, Rey Misterio Sr., 1, 344, Tijuana , Mexico, Live event), (2, Fishman, 1, 113, Tijuana , Mexico, Live event), (3, Villaño IV, 1, 1285, Tijuana , Mexico, Live event), CREATE TABLE `Elimination` ( Elimination_ID TEXT PRIMARY KEY, Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID), Team TEXT, Eliminated_By TEXT, Elimination_Move TEXT, Time TEXT ); Sample rows from `Elimination`: (1, 1, Team Orton, Punk, Go To Sleep, 00:11), (2, 2, Team Batista, Benjamin, Paydirt, 07:38), (3, 4, Team Batista, Orton, Rope hung DDT, 10:45), ",
        "output": "SELECT DISTINCT reign FROM wrestler WHERE location != \"Tokyo , Japan\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many distinct payment methods are used by parties? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), town_city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 25518 Ortiz Centers, West Stacy, 193, NorthCarolina, USA), (2, 033 Stracke Parkways, Lake Meaghan, 227, Colorado, USA), (3, 269 Flatley Port Suite 062, Breanneberg, 527, NewHampshire, USA), CREATE TABLE `Services` ( service_id INTEGER, service_type_code VARCHAR(15), service_name VARCHAR(80), service_descriptio VARCHAR(255) ); Sample rows from `Services`: (1, Education, Education, Education), (2, Welfare, Health, Welfare), (3, Education, Education, Health), CREATE TABLE `Forms` ( form_id INTEGER, form_type_code VARCHAR(15), service_id INTEGER REFERENCES Services(service_id), form_number VARCHAR(50), form_name VARCHAR(80), form_description VARCHAR(255) ); Sample rows from `Forms`: (1, Basic, 13, 8069, SSN Application, Form for SSN Application), (2, Complex, 9, 2675, Marriage Certificate, Marriage Certificate), (3, Complex, 2, 9837, Divorce Certificate, Divorce Certificate), CREATE TABLE `Individuals` ( individual_id INTEGER, individual_first_name VARCHAR(80), individual_middle_name VARCHAR(80), inidividual_phone VARCHAR(80), individual_email VARCHAR(80), individual_address VARCHAR(255), individual_last_name VARCHAR(80) ); Sample rows from `Individuals`: (1, Oscar, Hosea, 1-925-696-5232, amie.okuneva@example.org, 6956 Lia Plaza, Maggio), (2, Geovanny, Antonia, 075.012.6775x409, jamey.effertz@example.net, 69578 Baylee Prairie, Kerluke), (3, Casper, Mitchell, 1-818-062-2837, brandon.hermiston@example.com, 4555 Hane Orchard, Kutch), CREATE TABLE `Organizations` ( organization_id INTEGER, date_formed DATETIME, organization_name VARCHAR(255), uk_vat_number VARCHAR(20) ); Sample rows from `Organizations`: (1, 2016-08-24 23:52:48, Labour Party, 2157), (2, 2016-10-01 12:42:01, Plaid Cymru, 7459), (3, 2016-10-09 07:22:53, Conservative, 1211), CREATE TABLE `Parties` ( party_id INTEGER, payment_method_code VARCHAR(15), party_phone VARCHAR(80), party_email VARCHAR(80) ); Sample rows from `Parties`: (1, Cheque, 05374656172, enrico09@example.com), (2, Credit Card, 1-525-947-7867x51521, brakus.aliya@example.com), (3, Cheque, 1-606-232-3728x3568, frida57@example.org), CREATE TABLE `Organization_Contact_Individuals` ( individual_id INTEGER PRIMARY KEY REFERENCES Individuals(individual_id), organization_id INTEGER PRIMARY KEY REFERENCES Organizations(organization_id), date_contact_from DATETIME, date_contact_to DATETIME ); Sample rows from `Organization_Contact_Individuals`: (13, 1, 2016-08-16 22:09:11, 2018-03-25 10:27:18), (11, 1, 2017-03-02 00:00:16, 2018-03-06 05:39:43), (10, 3, 2016-08-23 03:24:24, 2018-03-12 07:55:28), CREATE TABLE `Party_Addresses` ( party_id INTEGER PRIMARY KEY REFERENCES Parties(party_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_address_from DATETIME, address_type_code VARCHAR(15), date_address_to DATETIME ); Sample rows from `Party_Addresses`: (10, 8, 2016-04-08 22:40:02, Residence, 2018-02-28 23:14:41), (15, 5, 2016-05-20 23:22:06, Billing, 2018-01-29 16:48:01), (4, 4, 2016-05-14 15:13:30, Delivery, 2018-02-25 19:39:16), CREATE TABLE `Party_Forms` ( party_id INTEGER PRIMARY KEY REFERENCES Parties(party_id), form_id INTEGER PRIMARY KEY REFERENCES Forms(form_id), date_completion_started DATETIME, form_status_code VARCHAR(15), date_fully_completed DATETIME ); Sample rows from `Party_Forms`: (2, 4, 2017-12-17 11:29:47, Completed, 2018-02-11 16:46:10), (15, 4, 2017-12-16 15:25:48, Partially Completed, 2018-02-18 16:09:04), (8, 5, 2017-12-09 21:26:11, Partially Completed, 2018-02-05 16:16:58), CREATE TABLE `Party_Services` ( booking_id INTEGER, customer_id INTEGER REFERENCES Parties(party_id), service_id INTEGER REFERENCES Services(service_id), service_datetime DATETIME, booking_made_date DATETIME ); Sample rows from `Party_Services`: (1, 10, 12, 2018-03-10 22:43:12, 2018-03-23 23:56:51), (2, 14, 11, 2018-03-05 15:06:23, 2018-03-25 11:08:29), (3, 4, 7, 2018-03-08 10:39:29, 2018-03-24 11:09:52), ",
        "output": "SELECT COUNT(DISTINCT payment_method_code) FROM parties"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of the aircraft that the least people are certified to fly? ###filtered_database_schema: CREATE TABLE `flight` ( flno number(4,0) PRIMARY KEY, origin varchar2(20), destination varchar2(20), distance number(6,0), departure_date date, arrival_date date, price number(7,2), aid number(9,0) REFERENCES aircraft(aid) ); Sample rows from `flight`: (99, Los Angeles, Washington D.C., 2308, 04/12/2005 09:30, 04/12/2005 09:40, 235.98, 1), (13, Los Angeles, Chicago, 1749, 04/12/2005 08:45, 04/12/2005 08:45, 220.98, 3), (346, Los Angeles, Dallas, 1251, 04/12/2005 11:50, 04/12/2005 07:05, 182, 2), CREATE TABLE `aircraft` ( aid number(9,0) PRIMARY KEY, name varchar2(30), distance number(6,0) ); Sample rows from `aircraft`: (1, Boeing 747-400, 8430), (2, Boeing 737-800, 3383), (3, Airbus A340-300, 7120), CREATE TABLE `employee` ( eid number(9,0) PRIMARY KEY, name varchar2(30), salary number(10,2) ); Sample rows from `employee`: (242518965, James Smith, 120433), (141582651, Mary Johnson, 178345), (11564812, John Williams, 153972), CREATE TABLE `certificate` ( eid number(9,0) PRIMARY KEY REFERENCES employee(eid), aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid) ); Sample rows from `certificate`: (11564812, 2), (11564812, 10), (90873519, 6), ",
        "output": "SELECT t2.name FROM certificate as t1 JOIN aircraft as t2 ON t2.aid  =  t1.aid GROUP BY t1.aid ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: papers that are coauthored by Peter Mertens and Dina Barbian ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the home city with the most number of drivers. ###filtered_database_schema: CREATE TABLE `driver` ( Driver_ID INT PRIMARY KEY, Name TEXT, Party TEXT, Home_city TEXT, Age INT ); Sample rows from `driver`: (1, Matthew Ritter, Dem, Hartford, 40), (2, Dan Carter, Rep, Bethel, 30), (3, Minnie Gonzalez, Dem, Hartford, 46), CREATE TABLE `school` ( School_ID INT PRIMARY KEY, Grade TEXT, School TEXT, Location TEXT, Type TEXT ); Sample rows from `school`: (1, Kindergarten, Noelani Elementary School, Honolulu, Hawaii, Public), (2, 1st-3rd grade, St. Francis Assisi, Jakarta, Indonesia, Private Catholic), (3, 4th grade, State Elementary School Menteng 01, Jakarta, Indonesia, Public), CREATE TABLE `school_bus` ( School_ID INT PRIMARY KEY REFERENCES school(School_ID), Driver_ID INT PRIMARY KEY REFERENCES driver(Driver_ID), Years_Working INT, If_full_time bool ); Sample rows from `school_bus`: (1, 10, 10, F), (5, 7, 8, T), (3, 4, 6, T), ",
        "output": "SELECT home_city FROM driver GROUP BY home_city ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Give me the best french in san francisco ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: authors working on ImageNet ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t2.paperid FROM paperdataset as t3 JOIN dataset as t1 ON t3.datasetid  =  t1.datasetid JOIN paper as t4 ON t4.paperid  =  t3.paperid JOIN writes as t2 ON t2.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t2.paperid;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many departments does the college has? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT COUNT(DISTINCT dept_name) FROM department"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the id and name of the stadium where the most injury accidents happened? ###filtered_database_schema: CREATE TABLE `stadium` ( id INT PRIMARY KEY, name TEXT, Home_Games INT, Average_Attendance REAL, Total_Attendance REAL, Capacity_Percentage REAL ); Sample rows from `stadium`: (1, Cowboys Stadium, 8, 87047.0, 696377.0, 108.8), (2, FedExField, 8, 83172.0, 665380.0, 90.7), (3, New Meadowlands Stadium, 8, 79019.0, 632156.0, 95.8), CREATE TABLE `game` ( stadium_id INT REFERENCES stadium(id), id INT PRIMARY KEY, Season INT, Date TEXT, Home_team TEXT, Away_team TEXT, Score TEXT, Competition TEXT ); Sample rows from `game`: (1, 1, 2007, 18 May 2007, Quruvchi, Pakhtakor, 1–1, League), (2, 2, 2007, 22 September 2007, Pakhtakor, Quruvchi, 0–0, League), (3, 3, 2007, 9 December 2007, Pakhtakor, Quruvchi, 0–0 (7:6), Cup), CREATE TABLE `injury_accident` ( game_id INT REFERENCES game(id), id INT PRIMARY KEY, Player TEXT, Injury TEXT, Number_of_matches TEXT, Source TEXT ); Sample rows from `injury_accident`: (1, 1, Davide Santon, Clean-up surgery on his right knee, 12, inter.it), (2, 2, Maicon, Knee problem, 2, inter.it), (3, 3, Dejan Stanković, Hamstring muscle strain in his left thigh, 2, inter.it), ",
        "output": "SELECT t1.id ,  t1.name FROM stadium as t1 JOIN game as t2 ON t1.id  =  t2.stadium_id JOIN injury_accident as t3 ON t2.id  =  t3.game_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of account that has the lowest total checking and saving balance. ###filtered_database_schema: CREATE TABLE `ACCOUNTS` ( custid BIGINT PRIMARY KEY, name VARCHAR(64) ); Sample rows from `ACCOUNTS`: (1, Brown), (2, Wang), (3, O'mahony), CREATE TABLE `SAVINGS` ( custid BIGINT PRIMARY KEY REFERENCES ACCOUNTS(custid), balance FLOAT ); Sample rows from `SAVINGS`: (1, 200000.0), (2, 999999999.0), (3, 230000.0), CREATE TABLE `CHECKING` ( custid BIGINT PRIMARY KEY REFERENCES ACCOUNTS(custid), balance FLOAT ); Sample rows from `CHECKING`: (1, 10000.0), (2, 2000.0), (3, 3000.0), ",
        "output": "SELECT t1.name FROM accounts as t1 JOIN checking as t2 ON t1.custid  =  t2.custid JOIN savings as t3 ON t1.custid  =  t3.custid ORDER BY t2.balance + t3.balance LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is Nancy Edwards's address? ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the titles of albums that contain tracks of both the Reggae and Rock genres. ###filtered_database_schema: CREATE TABLE `Album` ( AlbumId INTEGER, Title varchar(160), ArtistId INTEGER PRIMARY KEY REFERENCES Artist(ArtistId) ); Sample rows from `Album`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `Artist` ( ArtistId INTEGER, Name varchar(120) ); Sample rows from `Artist`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `Customer` ( CustomerId INTEGER, FirstName varchar(40), LastName varchar(20), Company varchar(80), Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60), SupportRepId INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId) ); Sample rows from `Customer`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `Employee` ( EmployeeId INTEGER, LastName varchar(20), FirstName varchar(20), Title varchar(30), ReportsTo INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId), BirthDate datetime, HireDate datetime, Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60) ); Sample rows from `Employee`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `Genre` ( GenreId INTEGER, Name varchar(120) ); Sample rows from `Genre`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `Invoice` ( InvoiceId INTEGER, CustomerId INTEGER PRIMARY KEY REFERENCES Customer(CustomerId), InvoiceDate datetime, BillingAddress varchar(70), BillingCity varchar(40), BillingState varchar(40), BillingCountry varchar(40), BillingPostalCode varchar(10), Total decimal(10,2) ); Sample rows from `Invoice`: (1, 2, 2009-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2009-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2009-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `InvoiceLine` ( InvoiceLineId INTEGER, InvoiceId INTEGER PRIMARY KEY REFERENCES Invoice(InvoiceId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId), UnitPrice decimal(10,2), Quantity INTEGER ); Sample rows from `InvoiceLine`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `MediaType` ( MediaTypeId INTEGER, Name varchar(120) ); Sample rows from `MediaType`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `Playlist` ( PlaylistId INTEGER, Name varchar(120) ); Sample rows from `Playlist`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `PlaylistTrack` ( PlaylistId INTEGER PRIMARY KEY REFERENCES Playlist(PlaylistId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId) ); Sample rows from `PlaylistTrack`: (1, 1), (8, 1), (17, 1), CREATE TABLE `Track` ( TrackId INTEGER, Name varchar(200), AlbumId INTEGER PRIMARY KEY REFERENCES Album(AlbumId), MediaTypeId INTEGER PRIMARY KEY REFERENCES MediaType(MediaTypeId), GenreId INTEGER PRIMARY KEY REFERENCES Genre(GenreId), Composer varchar(220), Milliseconds INTEGER, Bytes INTEGER, UnitPrice decimal(10,2) ); Sample rows from `Track`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), ",
        "output": "SELECT t1.title FROM album as t1 JOIN track as t2 ON t1.albumId  =  t2.albumId JOIN genre as t3 ON t2.genreID  =  t3.genreID WHERE t3.name  =  'Reggae' INTERSECT SELECT t1.title FROM album as t1 JOIN track as t2 ON t1.albumId  =  t2.albumId JOIN genre as t3 ON t2.genreID  =  t3.genreID WHERE t3.name  =  'Rock'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which police forces operate in both counties that are located in the East and in the West? ###filtered_database_schema: CREATE TABLE `county_public_safety` ( County_ID INT PRIMARY KEY, Name TEXT, Population INT, Police_officers INT, Residents_per_officer INT, Case_burden INT, Crime_rate REAL, Police_force TEXT, Location TEXT ); Sample rows from `county_public_safety`: (1, Abbotsford, 128165, 187, 685, 81, 118.0, Abbotsford Police Department, East), (2, Burnaby, 204320, 253, 808, 100, 123.0, RCMP, East), (3, Campbell River, 30810, 40, 770, 137, 178.0, RCMP, West), CREATE TABLE `city` ( City_ID INT PRIMARY KEY, County_ID INT REFERENCES county_public_safety(County_ID), Name TEXT, White REAL, Black REAL, Amerindian REAL, Asian REAL, Multiracial REAL, Hispanic REAL ); Sample rows from `city`: (1, 1, Adjuntas, 93.1, 3.1, 0.3, 0.0, 3.4, 99.6), (2, 1, Aguada, 86.6, 5.3, 0.3, 0.1, 7.7, 99.4), (3, 1, Aguadilla, 83.0, 7.4, 0.3, 0.2, 8.2, 98.5), ",
        "output": "SELECT police_force FROM county_public_safety WHERE location  =  \"East\" INTERSECT SELECT police_force FROM county_public_safety WHERE location  =  \"West\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the distinct carriers of phones with memories bigger than 32. ###filtered_database_schema: CREATE TABLE `phone` ( Name TEXT, Phone_ID INT PRIMARY KEY, Memory_in_G INT, Carrier TEXT, Price REAL ); Sample rows from `phone`: (IPhone 5s, 1, 32, Sprint, 320.0), (IPhone 6, 5, 128, Sprint, 480.0), (IPhone 6s, 2, 128, TMobile, 699.0), CREATE TABLE `market` ( Market_ID INT PRIMARY KEY, District TEXT, Num_of_employees INT, Num_of_shops REAL, Ranking INT ); Sample rows from `market`: (1, Alberta, 1966, 40.0, 1), (2, British Columbia, 1965, 49.0, 21), (3, New Brunswick, 1978, 10.0, 4), CREATE TABLE `phone_market` ( Market_ID INT PRIMARY KEY REFERENCES market(Market_ID), Phone_ID TEXT PRIMARY KEY REFERENCES phone(Phone_ID), Num_of_stock INT ); Sample rows from `phone_market`: (1, 1, 2232), (2, 2, 4324), (1, 4, 874), ",
        "output": "SELECT DISTINCT carrier FROM phone WHERE memory_in_g  >  32"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the smallest state that the mississippi river runs through ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of cinemas. ###filtered_database_schema: CREATE TABLE `film` ( Film_ID INT PRIMARY KEY, Rank_in_series INT, Number_in_season INT, Title TEXT, Directed_by TEXT, Original_air_date TEXT, Production_code TEXT ); Sample rows from `film`: (1, 26, 1, The Case of the Mystery Weekend, Bill Schreiner, September 21–25, 1992, 50021–50025), (2, 27, 2, The Case of the Smart Dummy, Bill Schreiner, September 28–October 2, 1992, 50231–50235), (3, 28, 3, The Case: Off the Record, Bill Schreiner, October 5–9, 1992, 50011–50015), CREATE TABLE `cinema` ( Cinema_ID INT PRIMARY KEY, Name TEXT, Openning_year INT, Capacity INT, Location TEXT ); Sample rows from `cinema`: (1, Codling, 2010, 1100, County Wicklow), (2, Carrowleagh, 2012, 368, County Cork), (3, Dublin Array, 2015, 364, County Dublin), CREATE TABLE `schedule` ( Cinema_ID INT PRIMARY KEY REFERENCES cinema(Cinema_ID), Film_ID INT PRIMARY KEY REFERENCES film(Film_ID), Date TEXT, Show_times_per_day INT, Price float ); Sample rows from `schedule`: (1, 1, 21 May, 5, 12.99), (1, 2, 21 May, 3, 12.99), (1, 3, 21 Jun, 2, 8.99), ",
        "output": "SELECT COUNT(*) FROM cinema"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids of all reviewers who did not give 4 stars? ###filtered_database_schema: CREATE TABLE `Movie` ( mID INT PRIMARY KEY, title TEXT, year INT, director TEXT ); Sample rows from `Movie`: (101, Gone with the Wind, 1939, Victor Fleming), (102, Star Wars, 1977, George Lucas), (103, The Sound of Music, 1965, Robert Wise), CREATE TABLE `Reviewer` ( rID INT PRIMARY KEY, name TEXT ); Sample rows from `Reviewer`: (201, Sarah Martinez), (202, Daniel Lewis), (203, Brittany Harris), CREATE TABLE `Rating` ( rID INT REFERENCES Reviewer(rID), mID INT REFERENCES Movie(mID), stars INT, ratingDate date ); Sample rows from `Rating`: (201, 101, 2, 2011-01-22), (201, 101, 4, 2011-01-27), (202, 106, 4, None), ",
        "output": "SELECT rid FROM rating EXCEPT SELECT rid FROM rating WHERE stars  =  4"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: when was the first deep learning paper published ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year asC;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the cities with more than 3 airports in the United States. ###filtered_database_schema: CREATE TABLE `routes` ( rid INTEGER, dst_apid INTEGER REFERENCES airports(apid), dst_ap varchar(4), src_apid bigint REFERENCES airports(apid), src_ap varchar(4), alid bigint REFERENCES airlines(alid), airline varchar(4), codeshare TEXT ); Sample rows from `routes`: (37, 2990, KZ, 2965, AER, 410, 2B, None), (38, 2990, KZ, 2966, ASF, 410, 2B, None), (39, 2962, MRV, 2966, ASF, 410, 2B, None), CREATE TABLE `airports` ( apid INTEGER, name TEXT, city TEXT, country TEXT, x REAL, y REAL, elevation bigint, iata character varchar(3), icao character varchar(4) ); Sample rows from `airports`: (1, Goroka Airport, Goroka, Papua New Guinea, 145.391998291, -6.081689834590001, 5282, GKA, AYGA), (2, Madang Airport, Madang, Papua New Guinea, 145.789001465, -5.20707988739, 20, MAG, AYMD), (3, Mount Hagen Kagamuga Airport, Mount Hagen, Papua New Guinea, 144.29600524902344, -5.826789855957031, 5388, HGU, AYMH), CREATE TABLE `airlines` ( alid INTEGER, name TEXT, iata varchar(2), icao varchar(3), callsign TEXT, country TEXT, active varchar(2) ); Sample rows from `airlines`: (-1, Unknown, -, N/A, None, None, Y), (1, Private flight, -, N/A, , , Y), (2, 135 Airways, , GNL, GENERAL, United States, N), ",
        "output": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING COUNT(*)  >  3"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the genre name of the film HUNGER ROOF? ###filtered_database_schema: CREATE TABLE `actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), last_update TIMESTAMP ); Sample rows from `actor`: (1, PENELOPE, GUINESS, 2006-02-15 04:34:33), (2, NICK, WAHLBERG, 2006-02-15 04:34:33), (3, ED, CHASE, 2006-02-15 04:34:33), CREATE TABLE `address` ( address_id SMALLINT UNSIGNED PRIMARY KEY, address VARCHAR(50), address2 VARCHAR(50), district VARCHAR(20), city_id SMALLINT UNSIGNED REFERENCES city(city_id), postal_code VARCHAR(10), phone VARCHAR(20), last_update TIMESTAMP ); Sample rows from `address`: (1, 47 MySakila Drive, None, Alberta, 300, , , 2006-02-15 04:45:30), (2, 28 MySQL Boulevard, None, QLD, 576, , , 2006-02-15 04:45:30), (3, 23 Workhaven Lane, None, Alberta, 300, , 14033335568, 2006-02-15 04:45:30), CREATE TABLE `category` ( category_id TINYINT UNSIGNED PRIMARY KEY, name VARCHAR(25), last_update TIMESTAMP ); Sample rows from `category`: (1, Action, 2006-02-15 04:46:27), (2, Animation, 2006-02-15 04:46:27), (3, Children, 2006-02-15 04:46:27), CREATE TABLE `city` ( city_id SMALLINT UNSIGNED PRIMARY KEY, city VARCHAR(50), country_id SMALLINT UNSIGNED REFERENCES country(country_id), last_update TIMESTAMP ); Sample rows from `city`: (1, A Corua (La Corua), 87, 2006-02-15 04:45:25), (2, Abha, 82, 2006-02-15 04:45:25), (3, Abu Dhabi, 101, 2006-02-15 04:45:25), CREATE TABLE `country` ( country_id SMALLINT UNSIGNED PRIMARY KEY, country VARCHAR(50), last_update TIMESTAMP ); Sample rows from `country`: (1, Afghanistan, 2006-02-15 04:44:00), (2, Algeria, 2006-02-15 04:44:00), (3, American Samoa, 2006-02-15 04:44:00), CREATE TABLE `customer` ( customer_id SMALLINT UNSIGNED PRIMARY KEY, store_id TINYINT UNSIGNED REFERENCES store(store_id), first_name VARCHAR(45), last_name VARCHAR(45), email VARCHAR(50), address_id SMALLINT UNSIGNED REFERENCES address(address_id), active BOOLEAN, create_date DATETIME, last_update TIMESTAMP ); Sample rows from `customer`: (1, 1, MARY, SMITH, MARY.SMITH@sakilacustomer.org, 5, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (2, 1, PATRICIA, JOHNSON, PATRICIA.JOHNSON@sakilacustomer.org, 6, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (3, 1, LINDA, WILLIAMS, LINDA.WILLIAMS@sakilacustomer.org, 7, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), CREATE TABLE `film` ( film_id SMALLINT UNSIGNED PRIMARY KEY, title VARCHAR(255), description TEXT, release_year YEAR, language_id TINYINT UNSIGNED REFERENCES language(language_id), original_language_id TINYINT UNSIGNED REFERENCES language(language_id), rental_duration TINYINT UNSIGNED, rental_rate DECIMAL(4,2), length SMALLINT UNSIGNED, replacement_cost DECIMAL(5,2), rating , special_features , last_update TIMESTAMP ); Sample rows from `film`: (1, ACADEMY DINOSAUR, A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies, 2006, 1, None, 6, 0.99, 86, 20.99, PG, Deleted Scenes,Behind the Scenes, 2006-02-15 05:03:42), (2, ACE GOLDFINGER, A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China, 2006, 1, None, 3, 4.99, 48, 12.99, G, Trailers,Deleted Scenes, 2006-02-15 05:03:42), (3, ADAPTATION HOLES, A Astounding Reflection of a Lumberjack And a Car who must Sink a Lumberjack in A Baloon Factory, 2006, 1, None, 7, 2.99, 50, 18.99, NC-17, Trailers,Deleted Scenes, 2006-02-15 05:03:42), CREATE TABLE `film_actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES actor(actor_id), film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), last_update TIMESTAMP ); Sample rows from `film_actor`: (1, 1, 2006-02-15 05:05:03), (1, 23, 2006-02-15 05:05:03), (1, 25, 2006-02-15 05:05:03), CREATE TABLE `film_category` ( film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), category_id TINYINT UNSIGNED PRIMARY KEY REFERENCES category(category_id), last_update TIMESTAMP ); Sample rows from `film_category`: (1, 6, 2006-02-15 05:07:09), (2, 11, 2006-02-15 05:07:09), (3, 6, 2006-02-15 05:07:09), CREATE TABLE `film_text` ( film_id SMALLINT PRIMARY KEY, title VARCHAR(255), description TEXT ); CREATE TABLE `inventory` ( inventory_id MEDIUMINT UNSIGNED PRIMARY KEY, film_id SMALLINT UNSIGNED REFERENCES film(film_id), store_id TINYINT UNSIGNED REFERENCES store(store_id), last_update TIMESTAMP ); Sample rows from `inventory`: (1, 1, 1, 2006-02-15 05:09:17), (2, 1, 1, 2006-02-15 05:09:17), (3, 1, 1, 2006-02-15 05:09:17), CREATE TABLE `language` ( language_id TINYINT UNSIGNED PRIMARY KEY, name CHAR(20), last_update TIMESTAMP ); CREATE TABLE `payment` ( payment_id SMALLINT UNSIGNED PRIMARY KEY, customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), rental_id INT REFERENCES rental(rental_id), amount DECIMAL(5,2), payment_date DATETIME, last_update TIMESTAMP ); Sample rows from `payment`: (1, 1, 1, 76, 2.99, 2005-05-25 11:30:37, 2006-02-15 22:12:30), (2, 1, 1, 573, 0.99, 2005-05-28 10:35:23, 2006-02-15 22:12:30), (3, 1, 1, 1185, 5.99, 2005-06-15 00:54:12, 2006-02-15 22:12:30), CREATE TABLE `rental` ( rental_id INT PRIMARY KEY, rental_date DATETIME, inventory_id MEDIUMINT UNSIGNED REFERENCES inventory(inventory_id), customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), return_date DATETIME, staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), last_update TIMESTAMP ); Sample rows from `rental`: (1, 2005-05-24 22:53:30, 367, 130, 2005-05-26 22:04:30, 1, 2006-02-15 21:30:53), (2, 2005-05-24 22:54:33, 1525, 459, 2005-05-28 19:40:33, 1, 2006-02-15 21:30:53), (3, 2005-05-24 23:03:39, 1711, 408, 2005-06-01 22:12:39, 1, 2006-02-15 21:30:53), CREATE TABLE `staff` ( staff_id TINYINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), address_id SMALLINT UNSIGNED REFERENCES address(address_id), picture BLOB, email VARCHAR(50), store_id TINYINT UNSIGNED, active BOOLEAN, username VARCHAR(16), password VARCHAR(40), last_update TIMESTAMP ); CREATE TABLE `store` ( store_id TINYINT UNSIGNED PRIMARY KEY, manager_staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), address_id SMALLINT UNSIGNED REFERENCES address(address_id), last_update TIMESTAMP ); ",
        "output": "SELECT t1.name FROM category as t1 JOIN film_category as t2 ON t1.category_id  =  t2.category_id JOIN film as t3 ON t2.film_id  =  t3.film_id WHERE t3.title  =  'HUNGER ROOF'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of each scientist, the names of the projects that they work on, and the hours for each of those projects, listed in alphabetical order by project name, then scientist name. ###filtered_database_schema: CREATE TABLE `Scientists` ( SSN INT PRIMARY KEY, Name Char(30) ); Sample rows from `Scientists`: (123234877, Michael Rogers), (152934485, Anand Manikutty), (222364883, Carol Smith), CREATE TABLE `Projects` ( Code Char(4) PRIMARY KEY, Name Char(50), Hours INT ); Sample rows from `Projects`: (AeH1, Winds: Studying Bernoullis Principle, 156), (AeH2, Aerodynamics and Bridge Design, 189), (AeH3, Aerodynamics and Gas Mileage, 256), CREATE TABLE `AssignedTo` ( Scientist INT PRIMARY KEY REFERENCES Scientists(SSN), Project char(4) PRIMARY KEY REFERENCES Projects(Code) ); Sample rows from `AssignedTo`: (123234877, AeH1), (152934485, AeH3), (222364883, Ast3), ",
        "output": "SELECT t1.name ,  t3.name ,  t3.hours FROM scientists as t1 JOIN assignedto as t2 ON t1.ssn = t2.scientist JOIN projects as t3 ON t2.project = t3.code ORDER BY t3.name ,  t1.name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the count of different game types? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Video_Games` ( GameID INTEGER, GName VARCHAR(40), GType VARCHAR(40) ); Sample rows from `Video_Games`: (1, RNG Stone, Collectible card game), (2, The Vanishing of Eric Calder, Walking Simulator), (3, Grand Term Assignment, Role-playing game), CREATE TABLE `Plays_Games` ( StuID INTEGER REFERENCES Student(StuID), GameID INTEGER REFERENCES Video_Games(GameID), Hours_Played INTEGER ); Sample rows from `Plays_Games`: (1001, 1, 35), (1001, 2, 15), (1001, 5, 1), CREATE TABLE `SportsInfo` ( StuID INTEGER REFERENCES Student(StuID), SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1) ); Sample rows from `SportsInfo`: (1001, Athletics, 2, 5, N), (1002, Football, 7, 20, Y), (1003, Football, 45, 18, Y), ",
        "output": "SELECT COUNT(DISTINCT gtype) FROM video_games"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Advisor 1121 has how many students? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Restaurant` ( ResID INTEGER, ResName VARCHAR(100), Address VARCHAR(100), Rating INTEGER ); Sample rows from `Restaurant`: (1, Subway, 3233 St Paul St, Baltimore, MD 21218, 3), (2, Honeygrow, 3212 St Paul St, Baltimore, MD 21218, 4), CREATE TABLE `Type_Of_Restaurant` ( ResID INTEGER REFERENCES Restaurant(ResID), ResTypeID INTEGER REFERENCES Restaurant_Type(ResTypeID) ); Sample rows from `Type_Of_Restaurant`: (1, 1), (2, 2), CREATE TABLE `Restaurant_Type` ( ResTypeID INTEGER, ResTypeName VARCHAR(40), ResTypeDescription VARCHAR(100) ); Sample rows from `Restaurant_Type`: (1, Sandwich, Simplest there is.), (2, Stir-fry, Classic Chinese cooking.), CREATE TABLE `Visits_Restaurant` ( StuID INTEGER REFERENCES Student(StuID), ResID INTEGER REFERENCES Restaurant(ResID), Time TIMESTAMP, Spent FLOAT ); Sample rows from `Visits_Restaurant`: (1001, 1, 2017-10-09 18:15:00, 6.53), (1032, 2, 2017-10-08 13:00:30, 13.2), ",
        "output": "SELECT COUNT(*) FROM student WHERE advisor =  1121;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Who are the different players, what season do they play in, and what is the name of the team they are on? ###filtered_database_schema: CREATE TABLE `country` ( Country_id INT PRIMARY KEY, Country_name TEXT, Capital TEXT, Official_native_language TEXT ); Sample rows from `country`: (1, Indonesia, Jakarta, Bahasa Indonesia), (2, Iran, Tehran, Persian ( Arabic script )), (3, Iraq, Baghdad, Arabic ( Arabic script ) Kurdish), CREATE TABLE `team` ( Team_id INT PRIMARY KEY, Name TEXT ); Sample rows from `team`: (1, Columbus Crew), (2, Evalyn Feil), (3, Anais VonRueden), CREATE TABLE `match_season` ( Season REAL PRIMARY KEY, Player TEXT, Position TEXT, Country INT REFERENCES country(Country_id), Team INT REFERENCES team(Team_id), Draft_Pick_Number INT, Draft_Class TEXT, College TEXT ); Sample rows from `match_season`: (1996.0, Steve Ralston Category:Articles with hCards, Midfielder, 6, 1, 18, 1996 MLS College Draft, Florida International), (1997.0, Mike Duhaney Category:Articles with hCards, Defender, 6, 2, 87, 1996 MLS Inaugural Player Draft, UNLV), (1998.0, Ben Olsen Category:Articles with hCards, Midfielder, 4, 3, 2, Project-40, Virginia), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Years_Played TEXT, Total_WL TEXT, Singles_WL TEXT, Doubles_WL TEXT, Team INT REFERENCES team(Team_id) ); Sample rows from `player`: (1, Cho Soong-Jae (630), 1 (2011), 2–0, 1–0, 1–0, 1), (2, Chung Hong (717), 1 (2011), 0–0, 0–0, 0–0, 1), (3, Im Kyu-tae (492), 8 (2003–2005, 2007–2011), 6–9, 5–7, 1–2, 1), ",
        "output": "SELECT t1.season ,  t1.player ,  t2.name FROM match_season as t1 JOIN team as t2 ON t1.team  =  t2.team_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the first name, last name, and phone number of all the female faculty members? ###filtered_database_schema: CREATE TABLE `Activity` ( actid INTEGER, activity_name varchar(25) ); Sample rows from `Activity`: (770, Mountain Climbing), (771, Canoeing), (772, Kayaking), CREATE TABLE `Participates_in` ( stuid INTEGER REFERENCES Student(StuID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Participates_in`: (1001, 770), (1001, 771), (1001, 777), CREATE TABLE `Faculty_Participates_in` ( FacID INTEGER REFERENCES Faculty(FacID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Faculty_Participates_in`: (1082, 784), (1082, 785), (1082, 790), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), ",
        "output": "SELECT fname ,  lname ,  phone fROM faculty WHERE sex  =  'f'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the total amount of money loaned by banks in New York state? ###filtered_database_schema: CREATE TABLE `bank` ( branch_ID INT PRIMARY KEY, bname varchar(20), no_of_customers INT, city varchar(10), state varchar(20) ); Sample rows from `bank`: (1, morningside, 203, New York City, New York), (2, downtown, 123, Salt Lake City, Utah), (3, broadway, 453, New York City, New York), CREATE TABLE `customer` ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal INT, no_of_loans INT, credit_score INT, branch_ID INT REFERENCES bank(branch_ID), state varchar(20) ); Sample rows from `customer`: (1, Mary, saving, 2000, 2, 30, 2, Utah), (2, Jack, checking, 1000, 1, 20, 1, Texas), (3, Owen, saving, 800000, 0, 210, 3, New York), CREATE TABLE `loan` ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3) REFERENCES customer(Cust_ID), branch_ID varchar(3) REFERENCES bank(branch_ID), amount INT ); Sample rows from `loan`: (1, Mortgages, 1, 1, 2050), (2, Auto, 1, 2, 3000), (3, Business, 3, 3, 5000), ",
        "output": "SELECT SUM(t2.amount) FROM bank as t1 JOIN loan as t2 ON t1.branch_id  =  t2.branch_id WHERE t1.state  =  'New York'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000 ###filtered_database_schema: CREATE TABLE `School` ( School_id TEXT PRIMARY KEY, School_name TEXT, Location TEXT, Mascot TEXT, Enrollment INT, IHSAA_Class TEXT, IHSAA_Football_Class TEXT, County TEXT ); Sample rows from `School`: (1, Bremen, Bremen, Lions, 495, AA, AA, 50 Marshall), (2, Culver Community, Culver, Cavaliers, 287, A, A, 50 Marshall), (3, Glenn, Walkerton, Falcons, 605, AAA, AAA, 71 St. Joseph), CREATE TABLE `budget` ( School_id INT PRIMARY KEY REFERENCES School(School_id), Year INT PRIMARY KEY, Budgeted INT, total_budget_percent_budgeted REAL, Invested INT, total_budget_percent_invested REAL, Budget_invested_percent TEXT ); Sample rows from `budget`: (2, 1999, 4979, 2.0, 2134, 2.0, 42.9), (2, 2000, 3666, 2.0, 5840, 2.0, 159.3), (2, 2001, 6803, 2.0, 8335, 2.0, 122.5), CREATE TABLE `endowment` ( endowment_id INT PRIMARY KEY, School_id INT REFERENCES School(School_id), donator_name TEXT, amount REAL ); Sample rows from `endowment`: (1, 1, Monte Plata, 9.51), (2, 2, San José de Ocoa, 9.83), (3, 3, Distrito Nacional, 9.55), ",
        "output": "SELECT COUNT(*) FROM budget WHERE budgeted  >  3000 AND year  <=  2001"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the lowest point in the united states ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the names and emails of customers who payed by Visa card. ###filtered_database_schema: CREATE TABLE `Products` ( product_id INTEGER, product_name VARCHAR(20), product_price DECIMAL(19,4), product_description VARCHAR(255) ); Sample rows from `Products`: (1, dvds, 1322.78, good condition), (2, cloth, 6402.09, good condition), (3, electronics, 2511.29, great condition), CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 92283 Lora Forges Suite 322, Mohrville, 271, Nebraska, USA), (2, 17135 Jaida Fork Suite 798, East Brody, 940, Colorado, USA), (3, 41099 Crist Prairie Suite 507, Evelinebury, 003, Idaho, USA), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method VARCHAR(10), customer_name VARCHAR(80), customer_phone VARCHAR(80), customer_email VARCHAR(80), date_became_customer DATETIME ); Sample rows from `Customers`: (1, Visa, Ron Emard, 1-382-503-5179x53639, shaniya45@example.net, 2011-04-25 22:20:35), (2, MasterCard, Gabe Schroeder, 1-728-537-4293x0885, alexandra91@example.net, 2011-10-17 16:08:25), (3, Discover, Candace Schneider, 940.575.3682x7959, tkassulke@example.com, 2012-01-11 21:17:01), CREATE TABLE `Regular_Orders` ( regular_order_id INTEGER, distributer_id INTEGER REFERENCES Customers(customer_id) ); Sample rows from `Regular_Orders`: (1, 12), (2, 15), (3, 6), CREATE TABLE `Regular_Order_Products` ( regular_order_id INTEGER REFERENCES Regular_Orders(regular_order_id), product_id INTEGER REFERENCES Products(product_id) ); Sample rows from `Regular_Order_Products`: (5, 3), (2, 3), (10, 1), CREATE TABLE `Actual_Orders` ( actual_order_id INTEGER, order_status_code VARCHAR(10), regular_order_id INTEGER REFERENCES Regular_Orders(regular_order_id), actual_order_date DATETIME ); Sample rows from `Actual_Orders`: (1, Success, 8, 2018-03-02 23:26:19), (2, Cancel, 15, 2018-03-02 08:33:39), (3, Cancel, 4, 2018-02-25 10:13:36), CREATE TABLE `Actual_Order_Products` ( actual_order_id INTEGER REFERENCES Actual_Orders(actual_order_id), product_id INTEGER REFERENCES Products(product_id) ); Sample rows from `Actual_Order_Products`: (2, 1), (14, 5), (13, 6), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_from DATETIME, address_type VARCHAR(10), date_to DATETIME ); Sample rows from `Customer_Addresses`: (5, 6, 2016-09-06 19:23:46, House, 2018-02-25 15:34:58), (14, 5, 2016-12-21 03:49:54, House, 2018-03-13 21:20:21), (2, 2, 2014-06-09 06:31:49, Flat, 2018-03-02 21:56:40), CREATE TABLE `Delivery_Routes` ( route_id INTEGER, route_name VARCHAR(50), other_route_details VARCHAR(255) ); Sample rows from `Delivery_Routes`: (1, Torphy Ltd, 16893 Wilderman Terrace Port Lucasburgh, ND 55978-5550), (2, Heidenreich Group, 6534 Cheyenne Trace Suite 242 Koryburgh, PA 21391-9164), (3, Gerhold Inc, 70469 Unique Crest Katherynville, IA 92263-4974), CREATE TABLE `Delivery_Route_Locations` ( location_code VARCHAR(10) PRIMARY KEY, route_id INTEGER REFERENCES Delivery_Routes(route_id), location_address_id INTEGER REFERENCES Addresses(address_id), location_name VARCHAR(50) ); Sample rows from `Delivery_Route_Locations`: (27 City Rd, 11, 5, Labadie-Crooks), (30 Sam Rd, 7, 13, VonRueden, Schmeler and Fay), (67 LV Rd, 11, 6, Carter, Pfannerstill and Rutherford), CREATE TABLE `Trucks` ( truck_id INTEGER, truck_licence_number VARCHAR(20), truck_details VARCHAR(255) ); Sample rows from `Trucks`: (1, 58110, Frida), (2, 33822, Randy), (3, 17106, Laverna), CREATE TABLE `Employees` ( employee_id INTEGER, employee_address_id INTEGER REFERENCES Addresses(address_id), employee_name VARCHAR(80), employee_phone VARCHAR(80) ); Sample rows from `Employees`: (1, 4, Kacie, 716-650-2081), (2, 12, Dejuan, 211.289.9042), (3, 1, Leonie, 816-890-2580), CREATE TABLE `Order_Deliveries` ( location_code VARCHAR(10) REFERENCES Delivery_Route_Locations(location_code), actual_order_id INTEGER REFERENCES Actual_Orders(actual_order_id), delivery_status_code VARCHAR(10), driver_employee_id INTEGER REFERENCES Employees(employee_id), truck_id INTEGER REFERENCES Trucks(truck_id), delivery_date DATETIME ); Sample rows from `Order_Deliveries`: (27 City Rd, 11, Ready, 6, 11, 2018-03-21 00:57:22), (27 City Rd, 1, On Road, 4, 10, 2018-02-26 01:32:49), (27 City Rd, 3, Ready, 1, 2, 2018-03-08 17:17:12), ",
        "output": "SELECT customer_email ,  customer_name FROM customers WHERE payment_method  =  'Visa'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the type codes of the policies used by the customer \"Dayana Robel\"? ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_Details VARCHAR(255) ); Sample rows from `Customers`: (252, America Jaskolski), (263, Ellsworth Paucek), (334, Mrs. Hanna Willms), CREATE TABLE `Staff` ( Staff_ID INTEGER, Staff_Details VARCHAR(255) ); Sample rows from `Staff`: (406, Clifton), (427, Cathryn), (510, Kaci), CREATE TABLE `Policies` ( Policy_ID INTEGER, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Policy_Type_Code CHAR(15), Start_Date DATETIME, End_Date DATETIME ); Sample rows from `Policies`: (125, 808, Deputy, 2018-02-10 08:56:30, 2018-03-18 09:17:26), (151, 380, Jurisdiction, 2017-12-20 06:02:31, 2017-09-16 22:04:13), (287, 334, Jurisdiction, 2017-03-16 18:16:52, 2017-11-24 06:36:51), CREATE TABLE `Claim_Headers` ( Claim_Header_ID INTEGER, Claim_Status_Code CHAR(15), Claim_Type_Code CHAR(15), Policy_ID INTEGER REFERENCES Policies(Policy_ID), Date_of_Claim DATETIME, Date_of_Settlement DATETIME, Amount_Claimed DECIMAL(20,4), Amount_Piad DECIMAL(20,4) ); Sample rows from `Claim_Headers`: (15, Settled, Handphone Subsidy, 518, 2016-05-31 06:07:11, 2018-02-23 03:46:38, 349.15, 582.03), (24, Disputed, Child Birth, 518, 2016-12-30 21:43:21, 2017-10-08 21:43:14, 318.16, 309.2), (27, Disputed, Overtime Meal Subsidy, 518, 2017-05-01 13:34:43, 2017-11-16 04:06:05, 362.71, 132.97), CREATE TABLE `Claims_Documents` ( Claim_ID INTEGER PRIMARY KEY REFERENCES Claim_Headers(Claim_Header_ID), Document_Type_Code CHAR(15) PRIMARY KEY, Created_by_Staff_ID INTEGER REFERENCES Staff(Staff_ID), Created_Date INTEGER ); Sample rows from `Claims_Documents`: (24, Document, 718, 8), (27, Document, 986, 6), (27, Medical, 427, 8), CREATE TABLE `Claims_Processing_Stages` ( Claim_Stage_ID INTEGER, Next_Claim_Stage_ID INTEGER, Claim_Status_Name VARCHAR(255), Claim_Status_Description VARCHAR(255) ); Sample rows from `Claims_Processing_Stages`: (1, 1, Open, Open a new claim), (3, 1, Close, Close a claim), CREATE TABLE `Claims_Processing` ( Claim_Processing_ID INTEGER, Claim_ID INTEGER REFERENCES Claim_Headers(Claim_Header_ID), Claim_Outcome_Code CHAR(15), Claim_Stage_ID INTEGER, Staff_ID INTEGER REFERENCES Staff(Staff_ID) ); Sample rows from `Claims_Processing`: (118, 28, In progress, 1, 771), (145, 62, In progress, 1, 589), (213, 27, In progress, 1, 589), ",
        "output": "SELECT policy_type_code FROM policies as t1 JOIN customers as t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which film actor (actress) starred the most films? List his or her first name, last name and actor id. ###filtered_database_schema: CREATE TABLE `actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), last_update TIMESTAMP ); Sample rows from `actor`: (1, PENELOPE, GUINESS, 2006-02-15 04:34:33), (2, NICK, WAHLBERG, 2006-02-15 04:34:33), (3, ED, CHASE, 2006-02-15 04:34:33), CREATE TABLE `address` ( address_id SMALLINT UNSIGNED PRIMARY KEY, address VARCHAR(50), address2 VARCHAR(50), district VARCHAR(20), city_id SMALLINT UNSIGNED REFERENCES city(city_id), postal_code VARCHAR(10), phone VARCHAR(20), last_update TIMESTAMP ); Sample rows from `address`: (1, 47 MySakila Drive, None, Alberta, 300, , , 2006-02-15 04:45:30), (2, 28 MySQL Boulevard, None, QLD, 576, , , 2006-02-15 04:45:30), (3, 23 Workhaven Lane, None, Alberta, 300, , 14033335568, 2006-02-15 04:45:30), CREATE TABLE `category` ( category_id TINYINT UNSIGNED PRIMARY KEY, name VARCHAR(25), last_update TIMESTAMP ); Sample rows from `category`: (1, Action, 2006-02-15 04:46:27), (2, Animation, 2006-02-15 04:46:27), (3, Children, 2006-02-15 04:46:27), CREATE TABLE `city` ( city_id SMALLINT UNSIGNED PRIMARY KEY, city VARCHAR(50), country_id SMALLINT UNSIGNED REFERENCES country(country_id), last_update TIMESTAMP ); Sample rows from `city`: (1, A Corua (La Corua), 87, 2006-02-15 04:45:25), (2, Abha, 82, 2006-02-15 04:45:25), (3, Abu Dhabi, 101, 2006-02-15 04:45:25), CREATE TABLE `country` ( country_id SMALLINT UNSIGNED PRIMARY KEY, country VARCHAR(50), last_update TIMESTAMP ); Sample rows from `country`: (1, Afghanistan, 2006-02-15 04:44:00), (2, Algeria, 2006-02-15 04:44:00), (3, American Samoa, 2006-02-15 04:44:00), CREATE TABLE `customer` ( customer_id SMALLINT UNSIGNED PRIMARY KEY, store_id TINYINT UNSIGNED REFERENCES store(store_id), first_name VARCHAR(45), last_name VARCHAR(45), email VARCHAR(50), address_id SMALLINT UNSIGNED REFERENCES address(address_id), active BOOLEAN, create_date DATETIME, last_update TIMESTAMP ); Sample rows from `customer`: (1, 1, MARY, SMITH, MARY.SMITH@sakilacustomer.org, 5, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (2, 1, PATRICIA, JOHNSON, PATRICIA.JOHNSON@sakilacustomer.org, 6, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (3, 1, LINDA, WILLIAMS, LINDA.WILLIAMS@sakilacustomer.org, 7, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), CREATE TABLE `film` ( film_id SMALLINT UNSIGNED PRIMARY KEY, title VARCHAR(255), description TEXT, release_year YEAR, language_id TINYINT UNSIGNED REFERENCES language(language_id), original_language_id TINYINT UNSIGNED REFERENCES language(language_id), rental_duration TINYINT UNSIGNED, rental_rate DECIMAL(4,2), length SMALLINT UNSIGNED, replacement_cost DECIMAL(5,2), rating , special_features , last_update TIMESTAMP ); Sample rows from `film`: (1, ACADEMY DINOSAUR, A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies, 2006, 1, None, 6, 0.99, 86, 20.99, PG, Deleted Scenes,Behind the Scenes, 2006-02-15 05:03:42), (2, ACE GOLDFINGER, A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China, 2006, 1, None, 3, 4.99, 48, 12.99, G, Trailers,Deleted Scenes, 2006-02-15 05:03:42), (3, ADAPTATION HOLES, A Astounding Reflection of a Lumberjack And a Car who must Sink a Lumberjack in A Baloon Factory, 2006, 1, None, 7, 2.99, 50, 18.99, NC-17, Trailers,Deleted Scenes, 2006-02-15 05:03:42), CREATE TABLE `film_actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES actor(actor_id), film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), last_update TIMESTAMP ); Sample rows from `film_actor`: (1, 1, 2006-02-15 05:05:03), (1, 23, 2006-02-15 05:05:03), (1, 25, 2006-02-15 05:05:03), CREATE TABLE `film_category` ( film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), category_id TINYINT UNSIGNED PRIMARY KEY REFERENCES category(category_id), last_update TIMESTAMP ); Sample rows from `film_category`: (1, 6, 2006-02-15 05:07:09), (2, 11, 2006-02-15 05:07:09), (3, 6, 2006-02-15 05:07:09), CREATE TABLE `film_text` ( film_id SMALLINT PRIMARY KEY, title VARCHAR(255), description TEXT ); CREATE TABLE `inventory` ( inventory_id MEDIUMINT UNSIGNED PRIMARY KEY, film_id SMALLINT UNSIGNED REFERENCES film(film_id), store_id TINYINT UNSIGNED REFERENCES store(store_id), last_update TIMESTAMP ); Sample rows from `inventory`: (1, 1, 1, 2006-02-15 05:09:17), (2, 1, 1, 2006-02-15 05:09:17), (3, 1, 1, 2006-02-15 05:09:17), CREATE TABLE `language` ( language_id TINYINT UNSIGNED PRIMARY KEY, name CHAR(20), last_update TIMESTAMP ); CREATE TABLE `payment` ( payment_id SMALLINT UNSIGNED PRIMARY KEY, customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), rental_id INT REFERENCES rental(rental_id), amount DECIMAL(5,2), payment_date DATETIME, last_update TIMESTAMP ); Sample rows from `payment`: (1, 1, 1, 76, 2.99, 2005-05-25 11:30:37, 2006-02-15 22:12:30), (2, 1, 1, 573, 0.99, 2005-05-28 10:35:23, 2006-02-15 22:12:30), (3, 1, 1, 1185, 5.99, 2005-06-15 00:54:12, 2006-02-15 22:12:30), CREATE TABLE `rental` ( rental_id INT PRIMARY KEY, rental_date DATETIME, inventory_id MEDIUMINT UNSIGNED REFERENCES inventory(inventory_id), customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), return_date DATETIME, staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), last_update TIMESTAMP ); Sample rows from `rental`: (1, 2005-05-24 22:53:30, 367, 130, 2005-05-26 22:04:30, 1, 2006-02-15 21:30:53), (2, 2005-05-24 22:54:33, 1525, 459, 2005-05-28 19:40:33, 1, 2006-02-15 21:30:53), (3, 2005-05-24 23:03:39, 1711, 408, 2005-06-01 22:12:39, 1, 2006-02-15 21:30:53), CREATE TABLE `staff` ( staff_id TINYINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), address_id SMALLINT UNSIGNED REFERENCES address(address_id), picture BLOB, email VARCHAR(50), store_id TINYINT UNSIGNED, active BOOLEAN, username VARCHAR(16), password VARCHAR(40), last_update TIMESTAMP ); CREATE TABLE `store` ( store_id TINYINT UNSIGNED PRIMARY KEY, manager_staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), address_id SMALLINT UNSIGNED REFERENCES address(address_id), last_update TIMESTAMP ); ",
        "output": "SELECT t2.first_name ,  t2.last_name ,  t2.actor_id FROM film_actor as t1 JOIN actor as t2 ON t1.actor_id  =  t2.actor_id GROUP BY t2.actor_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Eric C. Kerrigan 's Liquid Automatica paper ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t2.paperid FROM paperkeyphrase as t5 JOIN keyphrase as t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes as t4 ON t4.paperid  =  t5.paperid JOIN paper as t2 ON t4.paperid  =  t2.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid JOIN venue as t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname  =  \"Eric C. Kerrigan\" AND t3.keyphrasename  =  \"Liquid\" AND t6.venuename  =  \"Automatica\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many albums are there? ###filtered_database_schema: CREATE TABLE `Album` ( AlbumId INTEGER, Title varchar(160), ArtistId INTEGER PRIMARY KEY REFERENCES Artist(ArtistId) ); Sample rows from `Album`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `Artist` ( ArtistId INTEGER, Name varchar(120) ); Sample rows from `Artist`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `Customer` ( CustomerId INTEGER, FirstName varchar(40), LastName varchar(20), Company varchar(80), Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60), SupportRepId INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId) ); Sample rows from `Customer`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `Employee` ( EmployeeId INTEGER, LastName varchar(20), FirstName varchar(20), Title varchar(30), ReportsTo INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId), BirthDate datetime, HireDate datetime, Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60) ); Sample rows from `Employee`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `Genre` ( GenreId INTEGER, Name varchar(120) ); Sample rows from `Genre`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `Invoice` ( InvoiceId INTEGER, CustomerId INTEGER PRIMARY KEY REFERENCES Customer(CustomerId), InvoiceDate datetime, BillingAddress varchar(70), BillingCity varchar(40), BillingState varchar(40), BillingCountry varchar(40), BillingPostalCode varchar(10), Total decimal(10,2) ); Sample rows from `Invoice`: (1, 2, 2009-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2009-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2009-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `InvoiceLine` ( InvoiceLineId INTEGER, InvoiceId INTEGER PRIMARY KEY REFERENCES Invoice(InvoiceId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId), UnitPrice decimal(10,2), Quantity INTEGER ); Sample rows from `InvoiceLine`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `MediaType` ( MediaTypeId INTEGER, Name varchar(120) ); Sample rows from `MediaType`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `Playlist` ( PlaylistId INTEGER, Name varchar(120) ); Sample rows from `Playlist`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `PlaylistTrack` ( PlaylistId INTEGER PRIMARY KEY REFERENCES Playlist(PlaylistId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId) ); Sample rows from `PlaylistTrack`: (1, 1), (8, 1), (17, 1), CREATE TABLE `Track` ( TrackId INTEGER, Name varchar(200), AlbumId INTEGER PRIMARY KEY REFERENCES Album(AlbumId), MediaTypeId INTEGER PRIMARY KEY REFERENCES MediaType(MediaTypeId), GenreId INTEGER PRIMARY KEY REFERENCES Genre(GenreId), Composer varchar(220), Milliseconds INTEGER, Bytes INTEGER, UnitPrice decimal(10,2) ); Sample rows from `Track`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), ",
        "output": "SELECT COUNT(*) FROM album"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many farms are there? ###filtered_database_schema: CREATE TABLE `city` ( City_ID INT PRIMARY KEY, Official_Name TEXT, Status TEXT, Area_km_2 REAL, Population REAL, Census_Ranking TEXT ); Sample rows from `city`: (1, Grand Falls/Grand-Sault, Town, 18.06, 5706.0, 636 of 5008), (2, Perth-Andover, Village, 8.89, 1778.0, 1442 of 5,008), (3, Plaster Rock, Village, 3.09, 1135.0, 1936 of 5,008), CREATE TABLE `farm` ( Farm_ID INT PRIMARY KEY, Year INT, Total_Horses REAL, Working_Horses REAL, Total_Cattle REAL, Oxen REAL, Bulls REAL, Cows REAL, Pigs REAL, Sheep_and_Goats REAL ); Sample rows from `farm`: (1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8), CREATE TABLE `farm_competition` ( Competition_ID INT PRIMARY KEY, Year INT, Theme TEXT, Host_city_ID INT REFERENCES city(City_ID), Hosts TEXT ); Sample rows from `farm_competition`: (1, 2013, Carnival M is back!, 1, Miley Cyrus Jared Leto and Karen Mok), (2, 2006, Codehunters, 2, Leehom Wang and Kelly Rowland), (3, 2005, MTV Asia Aid, 3, Alicia Keys), CREATE TABLE `competition_record` ( Competition_ID INT PRIMARY KEY REFERENCES farm_competition(Competition_ID), Farm_ID INT PRIMARY KEY REFERENCES farm(Farm_ID), Rank INT ); Sample rows from `competition_record`: (1, 8, 1), (1, 2, 2), (1, 3, 3), ",
        "output": "SELECT COUNT(*) FROM farm"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which buildings do not have any company office? Give me the building names. ###filtered_database_schema: CREATE TABLE `buildings` ( id INT PRIMARY KEY, name TEXT, City TEXT, Height INT, Stories INT, Status TEXT ); Sample rows from `buildings`: (1, Torre KOI, Monterrey, 220, 67, under construction), (2, Torre Mitikah, Mexico City, 210, 60, under construction), (3, Punto Chapultepec, Mexico City, 210, 59, proposed), CREATE TABLE `Companies` ( id INT PRIMARY KEY, name TEXT, Headquarters TEXT, Industry TEXT, Sales_billion REAL, Profits_billion REAL, Assets_billion REAL, Market_Value_billion TEXT ); Sample rows from `Companies`: (1, JPMorgan Chase, USA, Banking, 115.5, 17.4, 2117.6, 182.2), (2, HSBC, UK, Banking, 103.3, 13.3, 2467.9, 186.5), (3, General Electric, USA, Conglomerate, 156.2, 11.6, 751.2, 216.2), CREATE TABLE `Office_locations` ( building_id INT PRIMARY KEY REFERENCES buildings(id), company_id INT PRIMARY KEY REFERENCES Companies(id), move_in_year INT ); Sample rows from `Office_locations`: (1, 1, 2021), (2, 2, 2022), (3, 4, 2023), ",
        "output": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM office_locations)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many papers David M. Blei has in AISTATS ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(t3.paperid) FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For each classroom, show the classroom number and find how many students are using it. ###filtered_database_schema: CREATE TABLE `list` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Grade INTEGER, Classroom INTEGER ); Sample rows from `list`: (CAR, MAUDE, 2, 101), (KRISTENSEN, STORMY, 6, 112), (VANDERWOUDE, SHERWOOD, 3, 107), CREATE TABLE `teachers` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Classroom INTEGER ); Sample rows from `teachers`: (MACROSTIE, MIN, 101), (COVIN, JEROME, 102), (MOYER, OTHA, 103), ",
        "output": "SELECT classroom ,  COUNT(*) FROM list GROUP BY classroom"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which headquarter locations are used by more than 2 companies? ###filtered_database_schema: CREATE TABLE `buildings` ( id INT PRIMARY KEY, name TEXT, City TEXT, Height INT, Stories INT, Status TEXT ); Sample rows from `buildings`: (1, Torre KOI, Monterrey, 220, 67, under construction), (2, Torre Mitikah, Mexico City, 210, 60, under construction), (3, Punto Chapultepec, Mexico City, 210, 59, proposed), CREATE TABLE `Companies` ( id INT PRIMARY KEY, name TEXT, Headquarters TEXT, Industry TEXT, Sales_billion REAL, Profits_billion REAL, Assets_billion REAL, Market_Value_billion TEXT ); Sample rows from `Companies`: (1, JPMorgan Chase, USA, Banking, 115.5, 17.4, 2117.6, 182.2), (2, HSBC, UK, Banking, 103.3, 13.3, 2467.9, 186.5), (3, General Electric, USA, Conglomerate, 156.2, 11.6, 751.2, 216.2), CREATE TABLE `Office_locations` ( building_id INT PRIMARY KEY REFERENCES buildings(id), company_id INT PRIMARY KEY REFERENCES Companies(id), move_in_year INT ); Sample rows from `Office_locations`: (1, 1, 2021), (2, 2, 2022), (3, 4, 2023), ",
        "output": "SELECT headquarters FROM companies GROUP BY headquarters HAVING COUNT(*)  >  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the last name and office of all history professors? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT t1.emp_lname ,  t2.prof_office FROM employee as t1 JOIN professor as t2 ON t1.emp_num  =  t2.emp_num JOIN department as t3 ON t2.dept_code  =  t3.dept_code WHERE t3.dept_name  =  'History'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all playlists that have more than 100 tracks? ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT t2.name FROM playlist_tracks as t1 JOIN playlists as t2 ON t2.id = t1.playlist_id GROUP BY t1.playlist_id HAVING COUNT(t1.track_id)  >  100;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many students are there? ###filtered_database_schema: CREATE TABLE `list` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Grade INTEGER, Classroom INTEGER ); Sample rows from `list`: (CAR, MAUDE, 2, 101), (KRISTENSEN, STORMY, 6, 112), (VANDERWOUDE, SHERWOOD, 3, 107), CREATE TABLE `teachers` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Classroom INTEGER ); Sample rows from `teachers`: (MACROSTIE, MIN, 101), (COVIN, JEROME, 102), (MOYER, OTHA, 103), ",
        "output": "SELECT COUNT(*) FROM list"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Who are the different directors of films which had market estimation in 1995? ###filtered_database_schema: CREATE TABLE `film` ( Film_ID INT PRIMARY KEY, Title TEXT, Studio TEXT, Director TEXT, Gross_in_dollar INT ); Sample rows from `film`: (1, ET the Extra-Terrestrial, Universal, Steven Spielberg, 435110554), (2, Tootsie, Columbia, Sydney Pollack, 177200000), (3, An Officer and a Gentleman, Paramount / Lorimar, Taylor Hackford, 129795554), CREATE TABLE `market` ( Market_ID INT PRIMARY KEY, Country TEXT, Number_cities INT ); Sample rows from `market`: (1, Japan, 209), (2, China, 540), (3, USA, 700), CREATE TABLE `film_market_estimation` ( Estimation_ID INT PRIMARY KEY, Low_Estimate REAL, High_Estimate REAL, Film_ID INT REFERENCES film(Film_ID), Type TEXT, Market_ID INT REFERENCES market(Market_ID), Year INT ); Sample rows from `film_market_estimation`: (1, 80000.0, 80400.0, 1, Mass suicide murder, 1, 1945), (2, 8000.0, 8000.0, 2, Mass suicide, 2, 1944), (3, 3000.0, 80400.0, 3, Mass human sacrifice, 3, 1487), ",
        "output": "SELECT DISTINCT t1.director FROM film as t1 JOIN film_market_estimation as t2 ON t1.film_id  =  t2.film_id WHERE t2.year  =  1995"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the language that was used most often in songs with resolution above 500? ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names for tracks without a race in class 'GT'. ###filtered_database_schema: CREATE TABLE `race` ( Race_ID INT PRIMARY KEY, Name TEXT, Class TEXT, Date TEXT, Track_ID TEXT REFERENCES track(Track_ID) ); Sample rows from `race`: (1, Rolex 24 At Daytona, DP/GT, January 26 January 27, 1), (2, Gainsco Grand Prix of Miami, DP/GT, March 29, 2), (3, Mexico City 250, DP/GT, April 19, 2), CREATE TABLE `track` ( Track_ID INT PRIMARY KEY, Name TEXT, Location TEXT, Seating REAL, Year_Opened REAL ); Sample rows from `track`: (1, Auto Club Speedway, Fontana, CA, 92000.0, 1997.0), (2, Chicagoland Speedway, Joliet, IL, 75000.0, 2001.0), (3, Darlington Raceway, Darlington, SC, 63000.0, 1950.0), ",
        "output": "SELECT name FROM track EXCEPT SELECT t2.name FROM race as t1 JOIN track as t2 ON t1.track_id  =  t2.track_id WHERE t1.class  =  'GT'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are all the role codes, role names, and role descriptions? ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CV, CV, ), (BK, Book, ), (PR, Paper, ), CREATE TABLE `Ref_Calendar` ( Calendar_Date DATETIME PRIMARY KEY, Day_Number INTEGER ); Sample rows from `Ref_Calendar`: (1972-03-31 09:47:22, 5), (1976-06-15 03:40:06, 7), (1985-05-13 12:19:43, 7), CREATE TABLE `Ref_Locations` ( Location_Code CHAR(15) PRIMARY KEY, Location_Name VARCHAR(255), Location_Description VARCHAR(255) ); Sample rows from `Ref_Locations`: (b, Brazil, ), (c, Canada, ), (e, Edinburgh, ), CREATE TABLE `Roles` ( Role_Code CHAR(15) PRIMARY KEY, Role_Name VARCHAR(255), Role_Description VARCHAR(255) ); Sample rows from `Roles`: (MG, Manager, Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti.), (ED, Editor, Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos.), (PT, Photo, Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt.), CREATE TABLE `All_Documents` ( Document_ID INTEGER, Date_Stored DATETIME REFERENCES Ref_Calendar(Calendar_Date), Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255) ); Sample rows from `All_Documents`: (7, 1976-06-15 03:40:06, CV, Robin CV, None, None), (11, 1986-10-14 17:53:39, CV, Marry CV, None, None), (25, 2008-06-08 12:45:38, BK, One hundred years of solitude, None, None), CREATE TABLE `Employees` ( Employee_ID INTEGER, Role_Code CHAR(15) REFERENCES Roles(Role_Code), Employee_Name VARCHAR(255), Gender_MFU CHAR(1), Date_of_Birth DATETIME, Other_Details VARCHAR(255) ); Sample rows from `Employees`: (25, HR, Leo, , 1973-02-15 17:16:00, None), (30, MG, Ebba, , 1979-09-20 12:50:15, None), (38, ED, Stephanie, 1, 2012-03-30 23:02:28, None), CREATE TABLE `Document_Locations` ( Document_ID INTEGER PRIMARY KEY REFERENCES All_Documents(Document_ID), Location_Code CHAR(15) PRIMARY KEY REFERENCES Ref_Locations(Location_Code), Date_in_Location_From DATETIME PRIMARY KEY REFERENCES Ref_Calendar(Calendar_Date), Date_in_Locaton_To DATETIME REFERENCES Ref_Calendar(Calendar_Date) ); Sample rows from `Document_Locations`: (7, e, 2017-01-06 23:17:22, 2008-06-08 12:45:38), (11, x, 2017-01-06 23:17:22, 2012-07-03 09:48:46), (81, c, 1972-03-31 09:47:22, 1987-11-05 06:11:22), CREATE TABLE `Documents_to_be_Destroyed` ( Document_ID INTEGER REFERENCES All_Documents(Document_ID), Destruction_Authorised_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Destroyed_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Planned_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Actual_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Other_Details VARCHAR(255) ); Sample rows from `Documents_to_be_Destroyed`: (7, 156, 138, 1988-02-01 14:41:52, 2017-01-06 23:17:22, None), (11, 55, 173, 2010-11-26 19:22:50, 1986-10-14 17:53:39, None), (25, 183, 156, 2009-08-18 03:29:08, 1995-01-01 03:52:11, None), ",
        "output": "SELECT role_code ,  role_name ,  role_description FROM roles"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name and population of district with population between 200000 and 2000000 ###filtered_database_schema: CREATE TABLE `product` ( product_id INT PRIMARY KEY, product TEXT, dimensions TEXT, dpi REAL, pages_per_minute_color REAL, max_page_size TEXT, interface TEXT ); Sample rows from `product`: (1, Fujitsu fi-6130 A4 Series Scanner, 301 x 160 x 158, 600.0, 30.0, A4, USB 2.0), (2, Plustek MobileOffice D28 Corporate, 303 x 94 x 60, 600.0, 28.0, A4, USB 2.0), (3, Xerox Travel Scanner 100, 289 x 51 x 38, 600.0, 4.0, A4, USB 2.0), CREATE TABLE `store` ( Store_ID INT PRIMARY KEY, Store_Name TEXT, Type TEXT, Area_size REAL, Number_of_product_category REAL, Ranking INT ); Sample rows from `store`: (1, Miramichi, City Mall, 179.84, 17811.0, 2), (2, Neguac, Village Store, 26.69, 1678.0, 3), (3, Rogersville, Village Store, 7.23, 1170.0, 1), CREATE TABLE `district` ( District_ID INT PRIMARY KEY, District_name TEXT, Headquartered_City TEXT, City_Population REAL, City_Area REAL ); Sample rows from `district`: (1, Attock District, Attock City, 94620.0, 20.0), (2, Bahawalnagar District, Bahawalnagar City, 134936.0, 13.0), (3, Bahawalpur District, Bahawalpur City, 530438.0, 38.0), CREATE TABLE `store_product` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), Product_ID INT PRIMARY KEY REFERENCES product(Product_ID) ); Sample rows from `store_product`: (1, 1), (1, 2), (1, 3), CREATE TABLE `store_district` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), District_ID INT REFERENCES district(District_ID) ); Sample rows from `store_district`: (1, 15), (2, 15), (3, 11), ",
        "output": "SELECT district_name ,  city_population FROM district WHERE city_population BETWEEN 200000 AND 2000000"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the number of keywords . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT COUNT(DISTINCT keyword) FROM keyword;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the locations of schools in descending order of founded year. ###filtered_database_schema: CREATE TABLE `school` ( School_ID INT PRIMARY KEY, School TEXT, Location TEXT, Enrollment REAL, Founded REAL, Denomination TEXT, Boys_or_Girls TEXT, Day_or_Boarding TEXT, Year_Entered_Competition REAL, School_Colors TEXT ); Sample rows from `school`: (1, St Aloysius' College, Milsons Point, 1200.0, 1879.0, Catholic, Boys, Day, 1929.0, Royal Blue and Gold), (2, Barker College, Hornsby, 2300.0, 1890.0, Anglican, Boys only to Yr 9 Co-ed Year 10 to 12, Day & Boarding, 1929.0, Red & Blue), (3, Cranbrook School, Bellevue Hill, 1000.0, 1918.0, Anglican, Boys, Day & Boarding, 1929.0, Red, White & Blue), CREATE TABLE `school_details` ( School_ID INT PRIMARY KEY REFERENCES school(School_ID), Nickname TEXT, Colors TEXT, League TEXT, Class TEXT, Division TEXT ); Sample rows from `school_details`: (1, Tigers, Blue and Yellow, DSHA, Flight A, Division 1), (2, Auks, Dark Green and White, DSHA, Flight B, Division 3), (3, Buccaneers, Garnet and White, DSHA, Fight A, Division 1), CREATE TABLE `school_performance` ( School_Id INT PRIMARY KEY REFERENCES school(School_ID), School_Year TEXT PRIMARY KEY, Class_A TEXT, Class_AA TEXT ); Sample rows from `school_performance`: (1, 1987-88, Yantis, Blanco), (1, 1988-89, Happy, Blanco), (1, 1989-90, Skidmore-Tynan, Bishop), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Team TEXT, Age INT, Position TEXT, School_ID INT REFERENCES school(School_ID) ); Sample rows from `player`: (1, Timothy Beckham, Tampa Bay Devil Rays, 15, Shortstop, 1), (2, Pedro Álvarez, Pittsburgh Pirates, 14, Third baseman, 2), (3, Eric Hosmer, Kansas City Royals, 16, First Baseman, 1), ",
        "output": "SELECT location FROM school ORDER BY founded DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Who is the director of the tv series \" House of Cards \" from 2013 ? ###filtered_database_schema: CREATE TABLE `actor` ( aid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `copyright` ( id INT PRIMARY KEY, msid INT, cid INT ); CREATE TABLE `cast` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), aid INT REFERENCES actor(aid), role INT ); CREATE TABLE `genre` ( gid INT PRIMARY KEY, genre TEXT ); CREATE TABLE `classification` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), gid INT REFERENCES genre(gid) ); CREATE TABLE `company` ( id INT PRIMARY KEY, name TEXT, country_code TEXT ); CREATE TABLE `director` ( did INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `producer` ( pid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `directed_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), did INT REFERENCES director(did) ); CREATE TABLE `keyword` ( id INT PRIMARY KEY, keyword TEXT ); CREATE TABLE `made_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), pid INT REFERENCES producer(pid) ); CREATE TABLE `movie` ( mid INT PRIMARY KEY, title TEXT, release_year INT, title_aka TEXT, budget TEXT ); CREATE TABLE `tags` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), kid INT REFERENCES keyword(kid) ); CREATE TABLE `tv_series` ( sid INT PRIMARY KEY, title TEXT, release_year INT, num_of_seasons INT, num_of_episodes INT, title_aka TEXT, budget TEXT ); CREATE TABLE `writer` ( wid INT PRIMARY KEY, gender TEXT, name INT, nationality INT, num_of_episodes INT, birth_city TEXT, birth_year INT ); CREATE TABLE `written_by` ( id INT, msid INT REFERENCES copyright(msid), wid INT REFERENCES writer(wid) ); ",
        "output": "SELECT t2.name FROM director as t2 JOIN directed_by as t1 ON t2.did  =  t1.did JOIN tv_series as t3 ON t3.sid  =  t1.msid WHERE t3.release_year  =  2013 AND t3.title  =  \"House of Cards\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of countains that no climber has climbed? ###filtered_database_schema: CREATE TABLE `mountain` ( Mountain_ID INT PRIMARY KEY, Name TEXT, Height REAL, Prominence REAL, Range TEXT, Country TEXT ); Sample rows from `mountain`: (1, Kibo (Uhuru Pk), 5895.0, 5885.0, Kilimanjaro, Tanzania), (2, Mount Kenya (Batian), 5199.0, 3825.0, Mount Kenya, Kenya), (3, Mawenzi (Hans Meyer Pk), 5148.0, 850.0, Kilimanjaro, Tanzania), CREATE TABLE `climber` ( Climber_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Time TEXT, Points REAL, Mountain_ID INT REFERENCES mountain(Mountain_ID) ); Sample rows from `climber`: (1, Klaus Enders, West Germany, 1:13.05.6, 15.0, 1), (2, Siegfried Schauzu, West Germany, 1:14.56.4, 12.0, 1), (3, Hans Luthringhauser, West Germany, 1:16.58.0, 10.0, 2), ",
        "output": "SELECT name FROM mountain WHERE mountain_id NOT IN (SELECT mountain_id FROM climber)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of patients' prescriptions physician John Dorian made. ###filtered_database_schema: CREATE TABLE `Physician` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), SSN INTEGER ); Sample rows from `Physician`: (1, John Dorian, Staff Internist, 111111111), (2, Elliot Reid, Attending Physician, 222222222), (3, Christopher Turk, Surgical Attending Physician, 333333333), CREATE TABLE `Department` ( DepartmentID INTEGER, Name VARCHAR(30), Head INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Department`: (1, General Medicine, 4), (2, Surgery, 7), (3, Psychiatry, 9), CREATE TABLE `Affiliated_With` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID), PrimaryAffiliation BOOLEAN ); Sample rows from `Affiliated_With`: (1, 1, 1), (2, 1, 1), (3, 1, 0), CREATE TABLE `Procedures` ( Code INTEGER, Name VARCHAR(30), Cost REAL ); Sample rows from `Procedures`: (1, Reverse Rhinopodoplasty, 1500.0), (2, Obtuse Pyloric Recombobulation, 3750.0), (3, Folded Demiophtalmectomy, 4500.0), CREATE TABLE `Trained_In` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code), CertificationDate DATETIME, CertificationExpires DATETIME ); Sample rows from `Trained_In`: (3, 1, 2008-01-01, 2008-12-31), (3, 2, 2008-01-01, 2008-12-31), (3, 5, 2008-01-01, 2008-12-31), CREATE TABLE `Patient` ( SSN INTEGER, Name VARCHAR(30), Address VARCHAR(30), Phone VARCHAR(30), InsuranceID INTEGER, PCP INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Patient`: (100000001, John Smith, 42 Foobar Lane, 555-0256, 68476213, 1), (100000002, Grace Ritchie, 37 Snafu Drive, 555-0512, 36546321, 2), (100000003, Random J. Patient, 101 Omgbbq Street, 555-1204, 65465421, 2), CREATE TABLE `Nurse` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), Registered BOOLEAN, SSN INTEGER ); Sample rows from `Nurse`: (101, Carla Espinosa, Head Nurse, 1, 111111110), (102, Laverne Roberts, Nurse, 1, 222222220), (103, Paul Flowers, Nurse, 0, 333333330), CREATE TABLE `Appointment` ( AppointmentID INTEGER, Patient INTEGER REFERENCES Patient(SSN), PrepNurse INTEGER REFERENCES Nurse(EmployeeID), Physician INTEGER REFERENCES Physician(EmployeeID), Start DATETIME, End DATETIME, ExaminationRoom TEXT ); Sample rows from `Appointment`: (13216584, 100000001, 101, 1, 2008-04-24 10:00, 2008-04-24 11:00, A), (26548913, 100000002, 101, 2, 2008-04-24 10:00, 2008-04-24 11:00, B), (36549879, 100000001, 102, 1, 2008-04-25 10:00, 2008-04-25 11:00, A), CREATE TABLE `Medication` ( Code INTEGER, Name VARCHAR(30), Brand VARCHAR(30), Description VARCHAR(30) ); Sample rows from `Medication`: (1, Procrastin-X, X, N/A), (2, Thesisin, Foo Labs, N/A), (3, Awakin, Bar Laboratories, N/A), CREATE TABLE `Prescribes` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Medication INTEGER PRIMARY KEY REFERENCES Medication(Code), Date DATETIME PRIMARY KEY, Appointment INTEGER REFERENCES Appointment(AppointmentID), Dose VARCHAR(30) ); Sample rows from `Prescribes`: (1, 100000001, 1, 2008-04-24 10:47, 13216584, 5), (9, 100000004, 2, 2008-04-27 10:53, 86213939, 10), (9, 100000004, 2, 2008-04-30 16:53, None, 5), CREATE TABLE `Block` ( BlockFloor INTEGER PRIMARY KEY, BlockCode INTEGER PRIMARY KEY ); Sample rows from `Block`: (1, 1), (1, 2), (1, 3), CREATE TABLE `Room` ( RoomNumber INTEGER, RoomType VARCHAR(30), BlockFloor INTEGER REFERENCES Block(BlockFloor), BlockCode INTEGER REFERENCES Block(BlockCode), Unavailable BOOLEAN ); Sample rows from `Room`: (101, Single, 1, 1, 0), (102, Single, 1, 1, 0), (103, Single, 1, 1, 0), CREATE TABLE `On_Call` ( Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID), BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor), BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode), OnCallStart DATETIME PRIMARY KEY, OnCallEnd DATETIME PRIMARY KEY ); Sample rows from `On_Call`: (101, 1, 1, 2008-11-04 11:00, 2008-11-04 19:00), (101, 1, 2, 2008-11-04 11:00, 2008-11-04 19:00), (102, 1, 3, 2008-11-04 11:00, 2008-11-04 19:00), CREATE TABLE `Stay` ( StayID INTEGER, Patient INTEGER REFERENCES Patient(SSN), Room INTEGER REFERENCES Room(RoomNumber), StayStart DATETIME, StayEnd DATETIME ); Sample rows from `Stay`: (3215, 100000001, 111, 2008-05-01, 2008-05-04), (3216, 100000003, 123, 2008-05-03, 2008-05-14), (3217, 100000004, 112, 2008-05-02, 2008-05-03), CREATE TABLE `Undergoes` ( Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code), Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID), DateUndergoes DATETIME PRIMARY KEY, Physician INTEGER REFERENCES Physician(EmployeeID), AssistingNurse INTEGER REFERENCES Nurse(EmployeeID) ); Sample rows from `Undergoes`: (100000001, 6, 3215, 2008-05-02, 3, 101), (100000001, 2, 3215, 2008-05-03, 7, 101), (100000004, 1, 3217, 2008-05-07, 3, 102), ",
        "output": "SELECT COUNT(t1.ssn) FROM patient as t1 JOIN prescribes as t2 ON t1.ssn  =  t2.patient JOIN physician as t3 ON t2.physician  =  t3.employeeid WHERE t3.name = \"John Dorian\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what papers did chi publish ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List venues of all matches in the order of their dates starting from the most recent one. ###filtered_database_schema: CREATE TABLE `city` ( City_ID INT PRIMARY KEY, City TEXT, Hanzi TEXT, Hanyu_Pinyin TEXT, Regional_Population INT, GDP REAL ); Sample rows from `city`: (1, Shanghai, 上海, Shànghǎi, 23019148, 1919.57), (2, Nanjing ( Jiangsu ), 南京, Nánjīng, 8004680, 614.55), (3, Hangzhou ( Zhejiang ), 杭州, Hángzhōu, 8700400, 701.18), CREATE TABLE `match` ( Match_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Score TEXT, Result TEXT, Competition TEXT ); Sample rows from `match`: (1, 18 February 1992, Estadio Cuscatlán , San Salvador , El Salvador, 1-0, 2-0, Friendly match), (2, 19 July 1992, Estadio Rigoberto López , Managua , Nicaragua, 3-0, 5-0, 1994 FIFA World Cup qualification), (3, 23 July 1992, Estadio Cuscatlán , San Salvador , El Salvador, 1-0, 5-1, 1994 FIFA World Cup qualification), CREATE TABLE `temperature` ( City_ID INT PRIMARY KEY REFERENCES city(City_ID), Jan REAL, Feb REAL, Mar REAL, Apr REAL, Jun REAL, Jul REAL, Aug REAL, Sep REAL, Oct REAL, Nov REAL, Dec REAL ); Sample rows from `temperature`: (1, 17.8, 17.8, 18.3, 18.9, 20.0, 20.6, 20.6, 20.6, 20.0, 19.4, 18.3), (2, 26.1, 26.1, 26.1, 26.1, 27.8, 27.8, 28.3, 28.3, 28.3, 27.2, 26.7), (3, 18.9, 18.3, 19.4, 20.0, 22.2, 23.3, 23.9, 23.3, 22.8, 21.7, 20.0), CREATE TABLE `hosting_city` ( Year INT PRIMARY KEY, Match_ID INT REFERENCES match(Match_ID), Host_City TEXT REFERENCES city(City_ID) ); Sample rows from `hosting_city`: (2008, 1, 1), (2009, 2, 2), (2010, 3, 2), ",
        "output": "SELECT venue FROM match ORDER BY date DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Of complaints with the type code \"Product Failure\", how many had each different status code? ###filtered_database_schema: CREATE TABLE `Staff` ( staff_id INTEGER, gender VARCHAR(1), first_name VARCHAR(80), last_name VARCHAR(80), email_address VARCHAR(255), phone_number VARCHAR(80) ); Sample rows from `Staff`: (114, 0, Ward, Boehm, marcelle.ritchie@example.com, (379)551-0838x146), (115, 1, Lucie, Lowe, ohintz@example.org, 142-311-6503x206), (116, 0, Dagmar, Erdman, wrau@example.com, 345-656-5571), CREATE TABLE `Customers` ( customer_id INTEGER, customer_type_code VARCHAR(20), address_line_1 VARCHAR(80), address_line_2 VARCHAR(80), town_city VARCHAR(80), state VARCHAR(80), email_address VARCHAR(255), phone_number VARCHAR(80) ); Sample rows from `Customers`: (113, Good Credit Rating, 144 Legros Landing, Apt. 551, Maryamport, Kansas, hsteuber@example.org, 06963347450), (114, Good Credit Rating, 039 Jedidiah Estate Suite 537, Apt. 245, Sauerberg, Hawaii, cayla.satterfield@example.net, 470-803-0244), (115, Good Credit Rating, 92189 Gulgowski Ranch Apt. 683, Apt. 828, Tyreekhaven, Tennessee, vida86@example.com, 997.698.4779x882), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, product_category_code VARCHAR(20), date_product_first_available DATETIME, date_product_discontinued DATETIME, product_name VARCHAR(80), product_description VARCHAR(255), product_price DECIMAL(19,4) ); Sample rows from `Products`: (117, 4, Food, 1988-09-29 17:54:50, 1987-12-20 13:46:16, Chocolate, Handmade chocolate, 2.88), (118, 3, Book, 1974-06-25 12:26:47, 1991-08-20 05:22:31, The Great Gatsby, American novel, 35), (119, 8, Hardware, 1994-12-18 15:13:19, 1997-07-02 18:26:16, Keyboard, Designed for games, 109.99), CREATE TABLE `Complaints` ( complaint_id INTEGER, product_id INTEGER REFERENCES Products(product_id), customer_id INTEGER REFERENCES Customers(customer_id), complaint_outcome_code VARCHAR(20), complaint_status_code VARCHAR(20), complaint_type_code VARCHAR(20), date_complaint_raised DATETIME, date_complaint_closed DATETIME, staff_id INTEGER REFERENCES Staff(staff_id) ); Sample rows from `Complaints`: (1, 117, 120, OK, Closed, Product Failure, 2002-07-18 10:59:35, 1976-04-19 11:03:06, 114), (2, 118, 113, OK, New, Product Unusable, 1973-02-10 22:55:56, 2013-09-14 02:59:10, 120), (3, 119, 114, OK, New, Product Unusable, 2006-10-29 07:08:46, 1995-09-11 14:48:46, 115), ",
        "output": "SELECT complaint_status_code ,  COUNT(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the dates of transactions with at least 100 share count or amount bigger than 100? ###filtered_database_schema: CREATE TABLE `Investors` ( investor_id INTEGER, Investor_details VARCHAR(255) ); Sample rows from `Investors`: (1, z), (2, z), (3, d), CREATE TABLE `Lots` ( lot_id INTEGER, investor_id INTEGER REFERENCES Investors(investor_id), lot_details VARCHAR(255) ); Sample rows from `Lots`: (1, 13, r), (2, 16, z), (3, 10, s), CREATE TABLE `Ref_Transaction_Types` ( transaction_type_code VARCHAR(10) PRIMARY KEY, transaction_type_description VARCHAR(80) ); Sample rows from `Ref_Transaction_Types`: (SALE, Sale), (PUR, Purchase), CREATE TABLE `Transactions` ( transaction_id INTEGER, investor_id INTEGER REFERENCES Investors(investor_id), transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code), date_of_transaction DATETIME, amount_of_transaction DECIMAL(19,4), share_count VARCHAR(40), other_details VARCHAR(255) ); Sample rows from `Transactions`: (1, 6, SALE, 1988-09-16 19:02:51, 302507.6996, 8718572, None), (2, 18, PUR, 1982-06-06 17:19:00, 27.257, 9, None), (3, 2, SALE, 1979-04-27 06:03:59, 48777.969, 8580, None), CREATE TABLE `Sales` ( sales_transaction_id INTEGER REFERENCES Transactions(transaction_id), sales_details VARCHAR(255) ); Sample rows from `Sales`: (1, x), (2, o), (3, a), CREATE TABLE `Purchases` ( purchase_transaction_id INTEGER REFERENCES Transactions(transaction_id), purchase_details VARCHAR(255) ); Sample rows from `Purchases`: (1, c), (2, y), (3, i), CREATE TABLE `Transactions_Lots` ( transaction_id INTEGER REFERENCES Transactions(transaction_id), lot_id INTEGER REFERENCES Lots(lot_id) ); Sample rows from `Transactions_Lots`: (3, 11), (3, 8), (2, 11), ",
        "output": "SELECT date_of_transaction FROM transactions WHERE share_count  >=  100 OR amount_of_transaction  >=  100"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids of all male students who do not play football? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Video_Games` ( GameID INTEGER, GName VARCHAR(40), GType VARCHAR(40) ); Sample rows from `Video_Games`: (1, RNG Stone, Collectible card game), (2, The Vanishing of Eric Calder, Walking Simulator), (3, Grand Term Assignment, Role-playing game), CREATE TABLE `Plays_Games` ( StuID INTEGER REFERENCES Student(StuID), GameID INTEGER REFERENCES Video_Games(GameID), Hours_Played INTEGER ); Sample rows from `Plays_Games`: (1001, 1, 35), (1001, 2, 15), (1001, 5, 1), CREATE TABLE `SportsInfo` ( StuID INTEGER REFERENCES Student(StuID), SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1) ); Sample rows from `SportsInfo`: (1001, Athletics, 2, 5, N), (1002, Football, 7, 20, Y), (1003, Football, 45, 18, Y), ",
        "output": "SELECT stuid FROm student WHERE sex  =  'm' EXCEPT SELECT stuid FROm sportsinfo WHERE sportname  =  \"Football\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: list the states ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM state;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of students and their respective departments, ordered by number of credits from least to greatest? ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT name ,  dept_name FROM student ORDER BY tot_cred"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name of the dorm with both a TV Lounge and Study Room listed as amenities? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT t1.dorm_name FROM dorm as t1 JOIN has_amenity as t2 ON t1.dormid  =  t2.dormid JOIN dorm_amenity as t3 ON t2.amenid  =  t3.amenid WHERE t3.amenity_name  =  'TV Lounge' INTERSECT SELECT t1.dorm_name FROM dorm as t1 JOIN has_amenity as t2 ON t1.dormid  =  t2.dormid JOIN dorm_amenity as t3 ON t2.amenid  =  t3.amenid WHERE t3.amenity_name  =  'Study Room'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List all the types of forms. ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), town_city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 25518 Ortiz Centers, West Stacy, 193, NorthCarolina, USA), (2, 033 Stracke Parkways, Lake Meaghan, 227, Colorado, USA), (3, 269 Flatley Port Suite 062, Breanneberg, 527, NewHampshire, USA), CREATE TABLE `Services` ( service_id INTEGER, service_type_code VARCHAR(15), service_name VARCHAR(80), service_descriptio VARCHAR(255) ); Sample rows from `Services`: (1, Education, Education, Education), (2, Welfare, Health, Welfare), (3, Education, Education, Health), CREATE TABLE `Forms` ( form_id INTEGER, form_type_code VARCHAR(15), service_id INTEGER REFERENCES Services(service_id), form_number VARCHAR(50), form_name VARCHAR(80), form_description VARCHAR(255) ); Sample rows from `Forms`: (1, Basic, 13, 8069, SSN Application, Form for SSN Application), (2, Complex, 9, 2675, Marriage Certificate, Marriage Certificate), (3, Complex, 2, 9837, Divorce Certificate, Divorce Certificate), CREATE TABLE `Individuals` ( individual_id INTEGER, individual_first_name VARCHAR(80), individual_middle_name VARCHAR(80), inidividual_phone VARCHAR(80), individual_email VARCHAR(80), individual_address VARCHAR(255), individual_last_name VARCHAR(80) ); Sample rows from `Individuals`: (1, Oscar, Hosea, 1-925-696-5232, amie.okuneva@example.org, 6956 Lia Plaza, Maggio), (2, Geovanny, Antonia, 075.012.6775x409, jamey.effertz@example.net, 69578 Baylee Prairie, Kerluke), (3, Casper, Mitchell, 1-818-062-2837, brandon.hermiston@example.com, 4555 Hane Orchard, Kutch), CREATE TABLE `Organizations` ( organization_id INTEGER, date_formed DATETIME, organization_name VARCHAR(255), uk_vat_number VARCHAR(20) ); Sample rows from `Organizations`: (1, 2016-08-24 23:52:48, Labour Party, 2157), (2, 2016-10-01 12:42:01, Plaid Cymru, 7459), (3, 2016-10-09 07:22:53, Conservative, 1211), CREATE TABLE `Parties` ( party_id INTEGER, payment_method_code VARCHAR(15), party_phone VARCHAR(80), party_email VARCHAR(80) ); Sample rows from `Parties`: (1, Cheque, 05374656172, enrico09@example.com), (2, Credit Card, 1-525-947-7867x51521, brakus.aliya@example.com), (3, Cheque, 1-606-232-3728x3568, frida57@example.org), CREATE TABLE `Organization_Contact_Individuals` ( individual_id INTEGER PRIMARY KEY REFERENCES Individuals(individual_id), organization_id INTEGER PRIMARY KEY REFERENCES Organizations(organization_id), date_contact_from DATETIME, date_contact_to DATETIME ); Sample rows from `Organization_Contact_Individuals`: (13, 1, 2016-08-16 22:09:11, 2018-03-25 10:27:18), (11, 1, 2017-03-02 00:00:16, 2018-03-06 05:39:43), (10, 3, 2016-08-23 03:24:24, 2018-03-12 07:55:28), CREATE TABLE `Party_Addresses` ( party_id INTEGER PRIMARY KEY REFERENCES Parties(party_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_address_from DATETIME, address_type_code VARCHAR(15), date_address_to DATETIME ); Sample rows from `Party_Addresses`: (10, 8, 2016-04-08 22:40:02, Residence, 2018-02-28 23:14:41), (15, 5, 2016-05-20 23:22:06, Billing, 2018-01-29 16:48:01), (4, 4, 2016-05-14 15:13:30, Delivery, 2018-02-25 19:39:16), CREATE TABLE `Party_Forms` ( party_id INTEGER PRIMARY KEY REFERENCES Parties(party_id), form_id INTEGER PRIMARY KEY REFERENCES Forms(form_id), date_completion_started DATETIME, form_status_code VARCHAR(15), date_fully_completed DATETIME ); Sample rows from `Party_Forms`: (2, 4, 2017-12-17 11:29:47, Completed, 2018-02-11 16:46:10), (15, 4, 2017-12-16 15:25:48, Partially Completed, 2018-02-18 16:09:04), (8, 5, 2017-12-09 21:26:11, Partially Completed, 2018-02-05 16:16:58), CREATE TABLE `Party_Services` ( booking_id INTEGER, customer_id INTEGER REFERENCES Parties(party_id), service_id INTEGER REFERENCES Services(service_id), service_datetime DATETIME, booking_made_date DATETIME ); Sample rows from `Party_Services`: (1, 10, 12, 2018-03-10 22:43:12, 2018-03-23 23:56:51), (2, 14, 11, 2018-03-05 15:06:23, 2018-03-25 11:08:29), (3, 4, 7, 2018-03-08 10:39:29, 2018-03-24 11:09:52), ",
        "output": "SELECT DISTINCT form_type_code FROM forms"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the unit price of the tune \"Fast As a Shark\"? ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the first names of students whose first names contain letter \"a\". ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), CREATE TABLE `Department` ( DNO INTEGER, Division VARCHAR(2), DName VARCHAR(25), Room VARCHAR(5), Building VARCHAR(13), DPhone INTEGER ); Sample rows from `Department`: (10, AS, History of Art, 268, Mergenthaler, 7117), (20, AS, Biology, 144, Mudd, 7330), (30, AS, Chemistry, 113, Remsen, 7429), CREATE TABLE `Member_of` ( FacID INTEGER REFERENCES Faculty(FacID), DNO INTEGER REFERENCES Department(DNO), Appt_Type VARCHAR(15) ); Sample rows from `Member_of`: (7792, 600, Primary), (9210, 520, Primary), (9811, 550, Primary), CREATE TABLE `Course` ( CID VARCHAR(7) PRIMARY KEY, CName VARCHAR(40), Credits INTEGER, Instructor INTEGER REFERENCES Faculty(FacID), Days VARCHAR(5), Hours VARCHAR(11), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Course`: (600.101, COMPUTER LITERACY, 3, 6112, MTW, 3, 600), (600.103, INTRODUCTION TO COMPUTER SCIENCE, 1, 4230, Th, 4, 600), (600.107, INTRO TO PROGRAMMING IN JAVA, 3, 1193, MTW, 3, 600), CREATE TABLE `Minor_in` ( StuID INTEGER REFERENCES Student(StuID), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Minor_in`: (1004, 520), (1005, 550), (1006, 50), CREATE TABLE `Enrolled_in` ( StuID INTEGER REFERENCES Student(StuID), CID VARCHAR(7) REFERENCES Course(CID), Grade VARCHAR(2) REFERENCES Gradeconversion(lettergrade) ); Sample rows from `Enrolled_in`: (1001, 550.681, A-), (1001, 600.303, B), (1001, 600.315, B+), CREATE TABLE `Gradeconversion` ( lettergrade VARCHAR(2) PRIMARY KEY, gradepoint FLOAT ); Sample rows from `Gradeconversion`: (A+, 4.0), (A, 4.0), (A-, 3.7), ",
        "output": "SELECT DISTINCT fname FROM student WHERE fname LIKE '%a%'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the addresses of the course authors or tutors with personal name \"Cathrine\" ###filtered_database_schema: CREATE TABLE `Course_Authors_and_Tutors` ( author_id INTEGER, author_tutor_ATB VARCHAR(3), login_name VARCHAR(40), password VARCHAR(40), personal_name VARCHAR(80), middle_name VARCHAR(80), family_name VARCHAR(80), gender_mf VARCHAR(1), address_line_1 VARCHAR(80) ); Sample rows from `Course_Authors_and_Tutors`: (1, 331, jmckenzie, c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b, Cathrine, Ruthie, Grant, 0, 756 Monahan Mews Spinkashire, NJ 64230-5098), (2, 975, heidenreich.ara, 24b0ee84063c3b017ab1839e01b7280f47f7c7c2, Retha, Corene, Armstrong, 0, 98623 Huels Manor Jasttown, DE 31611), (3, 349, clementina29, cdaf6c3483f19e2253659a40a3aab786a3390f78, Darius, Ethyl, Reichel, 0, 99296 Keeling Courts North Audreanne, IL 28272), CREATE TABLE `Students` ( student_id INTEGER, date_of_registration DATETIME, date_of_latest_logon DATETIME, login_name VARCHAR(40), password VARCHAR(10), personal_name VARCHAR(40), middle_name VARCHAR(40), family_name VARCHAR(40) ); Sample rows from `Students`: (1, 2015-07-22 13:32:35, 2017-10-17 22:52:26, annamae.hoppe, db8765bb6f, Wilson, Aubrey, Ward), (2, 2015-07-02 00:21:42, 2017-06-24 22:16:27, wmiller, 35faf8182a, Karson, Luella, Jaskolski), (3, 2015-10-11 03:23:27, 2018-03-10 23:22:23, ahartmann, 8e064ec4e6, Mariela, Brandt, Legros), CREATE TABLE `Subjects` ( subject_id INTEGER, subject_name VARCHAR(120) ); Sample rows from `Subjects`: (1, Computer Science), (2, Arts), (3, Language), CREATE TABLE `Courses` ( course_id INTEGER, author_id INTEGER REFERENCES Course_Authors_and_Tutors(author_id), subject_id INTEGER REFERENCES Subjects(subject_id), course_name VARCHAR(120), course_description VARCHAR(255) ); Sample rows from `Courses`: (1, 8, 1, database, database), (2, 6, 1, advanced database, advanced database), (3, 15, 1, operating system, operating system), CREATE TABLE `Student_Course_Enrolment` ( registration_id INTEGER, student_id INTEGER REFERENCES Students(student_id), course_id INTEGER REFERENCES Courses(course_id), date_of_enrolment DATETIME, date_of_completion DATETIME ); Sample rows from `Student_Course_Enrolment`: (1, 11, 2, 2017-10-09 07:09:02, 2018-02-26 07:48:52), (2, 15, 4, 2017-11-13 12:49:33, 2018-03-04 01:24:56), (3, 10, 8, 2017-10-17 13:50:40, 2018-03-22 02:53:01), CREATE TABLE `Student_Tests_Taken` ( registration_id INTEGER REFERENCES Student_Course_Enrolment(registration_id), date_test_taken DATETIME, test_result VARCHAR(255) ); Sample rows from `Student_Tests_Taken`: (12, 2018-03-25 03:27:16, Fail), (10, 2018-03-25 21:50:22, Pass), (7, 2018-03-21 00:32:25, Pass), ",
        "output": "SELECT address_line_1 FROM course_authors_and_tutors WHERE personal_name\t =  \"Cathrine\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the winery at which the wine with the highest score was made? ###filtered_database_schema: CREATE TABLE `grapes` ( ID INTEGER, Grape TEXT PRIMARY KEY, Color TEXT ); Sample rows from `grapes`: (1, Barbera, Red), (2, Cabernet Franc, Red), (3, Cabernet Sauvingnon, Red), CREATE TABLE `appellations` ( No INTEGER, Appelation TEXT PRIMARY KEY, County TEXT, State TEXT, Area TEXT, isAVA TEXT ); Sample rows from `appellations`: (1, Alexander Valley, Sonoma, California, North Coast, Yes), (2, Amador County, Amador, California, Sierra Foothills, No), (3, Amador-Mendocino-Sonoma Counties, N/A, California, N/A, No), CREATE TABLE `wine` ( No INTEGER, Grape TEXT REFERENCES grapes(Grape), Winery TEXT, Appelation TEXT REFERENCES appellations(Appelation), State TEXT, Name TEXT, Year INTEGER, Price INTEGER, Score INTEGER, Cases INTEGER, Drink TEXT ); Sample rows from `wine`: (1, Zinfandel, Robert Biale, St. Helena, California, Old Kraft Vineyard, 2008, 44, 93, 275, now), (2, Zinfandel, Chiarello Family, Napa Valley, California, Giana, 2008, 35, 93, 480, now), (3, Zinfandel, Robert Biale, Napa Valley, California, Black Chicken, 2008, 40, 91, 2700, 2012), ",
        "output": "SELECT winery FROM wine ORDER BY score LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which staff handled least number of payments? List the full name and the id. ###filtered_database_schema: CREATE TABLE `actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), last_update TIMESTAMP ); Sample rows from `actor`: (1, PENELOPE, GUINESS, 2006-02-15 04:34:33), (2, NICK, WAHLBERG, 2006-02-15 04:34:33), (3, ED, CHASE, 2006-02-15 04:34:33), CREATE TABLE `address` ( address_id SMALLINT UNSIGNED PRIMARY KEY, address VARCHAR(50), address2 VARCHAR(50), district VARCHAR(20), city_id SMALLINT UNSIGNED REFERENCES city(city_id), postal_code VARCHAR(10), phone VARCHAR(20), last_update TIMESTAMP ); Sample rows from `address`: (1, 47 MySakila Drive, None, Alberta, 300, , , 2006-02-15 04:45:30), (2, 28 MySQL Boulevard, None, QLD, 576, , , 2006-02-15 04:45:30), (3, 23 Workhaven Lane, None, Alberta, 300, , 14033335568, 2006-02-15 04:45:30), CREATE TABLE `category` ( category_id TINYINT UNSIGNED PRIMARY KEY, name VARCHAR(25), last_update TIMESTAMP ); Sample rows from `category`: (1, Action, 2006-02-15 04:46:27), (2, Animation, 2006-02-15 04:46:27), (3, Children, 2006-02-15 04:46:27), CREATE TABLE `city` ( city_id SMALLINT UNSIGNED PRIMARY KEY, city VARCHAR(50), country_id SMALLINT UNSIGNED REFERENCES country(country_id), last_update TIMESTAMP ); Sample rows from `city`: (1, A Corua (La Corua), 87, 2006-02-15 04:45:25), (2, Abha, 82, 2006-02-15 04:45:25), (3, Abu Dhabi, 101, 2006-02-15 04:45:25), CREATE TABLE `country` ( country_id SMALLINT UNSIGNED PRIMARY KEY, country VARCHAR(50), last_update TIMESTAMP ); Sample rows from `country`: (1, Afghanistan, 2006-02-15 04:44:00), (2, Algeria, 2006-02-15 04:44:00), (3, American Samoa, 2006-02-15 04:44:00), CREATE TABLE `customer` ( customer_id SMALLINT UNSIGNED PRIMARY KEY, store_id TINYINT UNSIGNED REFERENCES store(store_id), first_name VARCHAR(45), last_name VARCHAR(45), email VARCHAR(50), address_id SMALLINT UNSIGNED REFERENCES address(address_id), active BOOLEAN, create_date DATETIME, last_update TIMESTAMP ); Sample rows from `customer`: (1, 1, MARY, SMITH, MARY.SMITH@sakilacustomer.org, 5, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (2, 1, PATRICIA, JOHNSON, PATRICIA.JOHNSON@sakilacustomer.org, 6, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (3, 1, LINDA, WILLIAMS, LINDA.WILLIAMS@sakilacustomer.org, 7, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), CREATE TABLE `film` ( film_id SMALLINT UNSIGNED PRIMARY KEY, title VARCHAR(255), description TEXT, release_year YEAR, language_id TINYINT UNSIGNED REFERENCES language(language_id), original_language_id TINYINT UNSIGNED REFERENCES language(language_id), rental_duration TINYINT UNSIGNED, rental_rate DECIMAL(4,2), length SMALLINT UNSIGNED, replacement_cost DECIMAL(5,2), rating , special_features , last_update TIMESTAMP ); Sample rows from `film`: (1, ACADEMY DINOSAUR, A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies, 2006, 1, None, 6, 0.99, 86, 20.99, PG, Deleted Scenes,Behind the Scenes, 2006-02-15 05:03:42), (2, ACE GOLDFINGER, A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China, 2006, 1, None, 3, 4.99, 48, 12.99, G, Trailers,Deleted Scenes, 2006-02-15 05:03:42), (3, ADAPTATION HOLES, A Astounding Reflection of a Lumberjack And a Car who must Sink a Lumberjack in A Baloon Factory, 2006, 1, None, 7, 2.99, 50, 18.99, NC-17, Trailers,Deleted Scenes, 2006-02-15 05:03:42), CREATE TABLE `film_actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES actor(actor_id), film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), last_update TIMESTAMP ); Sample rows from `film_actor`: (1, 1, 2006-02-15 05:05:03), (1, 23, 2006-02-15 05:05:03), (1, 25, 2006-02-15 05:05:03), CREATE TABLE `film_category` ( film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), category_id TINYINT UNSIGNED PRIMARY KEY REFERENCES category(category_id), last_update TIMESTAMP ); Sample rows from `film_category`: (1, 6, 2006-02-15 05:07:09), (2, 11, 2006-02-15 05:07:09), (3, 6, 2006-02-15 05:07:09), CREATE TABLE `film_text` ( film_id SMALLINT PRIMARY KEY, title VARCHAR(255), description TEXT ); CREATE TABLE `inventory` ( inventory_id MEDIUMINT UNSIGNED PRIMARY KEY, film_id SMALLINT UNSIGNED REFERENCES film(film_id), store_id TINYINT UNSIGNED REFERENCES store(store_id), last_update TIMESTAMP ); Sample rows from `inventory`: (1, 1, 1, 2006-02-15 05:09:17), (2, 1, 1, 2006-02-15 05:09:17), (3, 1, 1, 2006-02-15 05:09:17), CREATE TABLE `language` ( language_id TINYINT UNSIGNED PRIMARY KEY, name CHAR(20), last_update TIMESTAMP ); CREATE TABLE `payment` ( payment_id SMALLINT UNSIGNED PRIMARY KEY, customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), rental_id INT REFERENCES rental(rental_id), amount DECIMAL(5,2), payment_date DATETIME, last_update TIMESTAMP ); Sample rows from `payment`: (1, 1, 1, 76, 2.99, 2005-05-25 11:30:37, 2006-02-15 22:12:30), (2, 1, 1, 573, 0.99, 2005-05-28 10:35:23, 2006-02-15 22:12:30), (3, 1, 1, 1185, 5.99, 2005-06-15 00:54:12, 2006-02-15 22:12:30), CREATE TABLE `rental` ( rental_id INT PRIMARY KEY, rental_date DATETIME, inventory_id MEDIUMINT UNSIGNED REFERENCES inventory(inventory_id), customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), return_date DATETIME, staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), last_update TIMESTAMP ); Sample rows from `rental`: (1, 2005-05-24 22:53:30, 367, 130, 2005-05-26 22:04:30, 1, 2006-02-15 21:30:53), (2, 2005-05-24 22:54:33, 1525, 459, 2005-05-28 19:40:33, 1, 2006-02-15 21:30:53), (3, 2005-05-24 23:03:39, 1711, 408, 2005-06-01 22:12:39, 1, 2006-02-15 21:30:53), CREATE TABLE `staff` ( staff_id TINYINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), address_id SMALLINT UNSIGNED REFERENCES address(address_id), picture BLOB, email VARCHAR(50), store_id TINYINT UNSIGNED, active BOOLEAN, username VARCHAR(16), password VARCHAR(40), last_update TIMESTAMP ); CREATE TABLE `store` ( store_id TINYINT UNSIGNED PRIMARY KEY, manager_staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), address_id SMALLINT UNSIGNED REFERENCES address(address_id), last_update TIMESTAMP ); ",
        "output": "SELECT t1.first_name ,  t1.last_name ,  t1.staff_id FROM staff as t1 JOIN payment as t2 ON t1.staff_id  =  t2.staff_id GROUP BY t1.staff_id ORDER BY COUNT(*) asC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the number of escape games in \" Madison \" ? ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Give the maximum and minimum gradepoints for students living in NYC? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), CREATE TABLE `Department` ( DNO INTEGER, Division VARCHAR(2), DName VARCHAR(25), Room VARCHAR(5), Building VARCHAR(13), DPhone INTEGER ); Sample rows from `Department`: (10, AS, History of Art, 268, Mergenthaler, 7117), (20, AS, Biology, 144, Mudd, 7330), (30, AS, Chemistry, 113, Remsen, 7429), CREATE TABLE `Member_of` ( FacID INTEGER REFERENCES Faculty(FacID), DNO INTEGER REFERENCES Department(DNO), Appt_Type VARCHAR(15) ); Sample rows from `Member_of`: (7792, 600, Primary), (9210, 520, Primary), (9811, 550, Primary), CREATE TABLE `Course` ( CID VARCHAR(7) PRIMARY KEY, CName VARCHAR(40), Credits INTEGER, Instructor INTEGER REFERENCES Faculty(FacID), Days VARCHAR(5), Hours VARCHAR(11), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Course`: (600.101, COMPUTER LITERACY, 3, 6112, MTW, 3, 600), (600.103, INTRODUCTION TO COMPUTER SCIENCE, 1, 4230, Th, 4, 600), (600.107, INTRO TO PROGRAMMING IN JAVA, 3, 1193, MTW, 3, 600), CREATE TABLE `Minor_in` ( StuID INTEGER REFERENCES Student(StuID), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Minor_in`: (1004, 520), (1005, 550), (1006, 50), CREATE TABLE `Enrolled_in` ( StuID INTEGER REFERENCES Student(StuID), CID VARCHAR(7) REFERENCES Course(CID), Grade VARCHAR(2) REFERENCES Gradeconversion(lettergrade) ); Sample rows from `Enrolled_in`: (1001, 550.681, A-), (1001, 600.303, B), (1001, 600.315, B+), CREATE TABLE `Gradeconversion` ( lettergrade VARCHAR(2) PRIMARY KEY, gradepoint FLOAT ); Sample rows from `Gradeconversion`: (A+, 4.0), (A, 4.0), (A-, 3.7), ",
        "output": "SELECT MAX(t2.gradepoint) ,  MIN(t2.gradepoint) FROM enrolled_in as t1 JOIN gradeconversion as t2 JOIN student as t3 ON t1.grade  =  t2.lettergrade AND t1.stuid  =  t3.stuid WHERE t3.city_code  =  \"NYC\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 28481 Crist Circle East Burdettestad, IA 21232), (2, 0292 Mitchel Pike Port Abefurt, IA 84402-4249), (3, 4062 Mante Place West Lindsey, DE 76199-8015), CREATE TABLE `Staff` ( staff_id INTEGER, staff_gender VARCHAR(1), staff_name VARCHAR(80) ); Sample rows from `Staff`: (1, 1, Tom), (2, 1, Malika), (3, 1, Katelynn), CREATE TABLE `Suppliers` ( supplier_id INTEGER, supplier_name VARCHAR(80), supplier_phone VARCHAR(80) ); Sample rows from `Suppliers`: (1, Lidl, (692)009-5928), (2, AB Store, 1-483-283-4742), (3, Tesco, 287-071-1153x254), CREATE TABLE `Department_Store_Chain` ( dept_store_chain_id INTEGER, dept_store_chain_name VARCHAR(80) ); Sample rows from `Department_Store_Chain`: (1, South), (2, West), (3, East), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method_code VARCHAR(10), customer_code VARCHAR(20), customer_name VARCHAR(80), customer_address VARCHAR(255), customer_phone VARCHAR(80), customer_email VARCHAR(80) ); Sample rows from `Customers`: (1, Credit Card, 401, Ahmed, 75099 Tremblay Port Apt. 163 South Norrisland, SC 80546, 254-072-4068x33935, margarett.vonrueden@example.com), (2, Credit Card, 665, Chauncey, 8408 Lindsay Court East Dasiabury, IL 72656-3552, +41(8)1897032009, stiedemann.sigrid@example.com), (3, Direct Debit, 844, Lukas, 7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871, 197-417-3557, joelle.monahan@example.com), CREATE TABLE `Products` ( product_id INTEGER, product_type_code VARCHAR(10), product_name VARCHAR(80), product_price DECIMAL(19,4) ); Sample rows from `Products`: (1, Clothes, red jeans, 734.73), (2, Clothes, yellow jeans, 687.23), (3, Clothes, black jeans, 695.16), CREATE TABLE `Supplier_Addresses` ( supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Supplier_Addresses`: (4, 5, 2016-09-22 16:41:31, 2018-03-14 20:06:37), (3, 9, 2014-11-07 19:18:49, 2018-03-16 16:39:58), (3, 2, 2008-11-22 12:01:25, 2018-03-02 19:50:22), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 9, 2017-12-11 05:00:22, 2018-03-20 20:52:34), (1, 6, 2017-10-07 23:00:26, 2018-02-28 14:53:52), (10, 8, 2017-04-04 20:00:27, 2018-02-27 20:08:33), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status_code VARCHAR(10), order_date DATETIME ); Sample rows from `Customer_Orders`: (1, 12, Completed, 2018-02-10 15:44:48), (2, 4, New, 2018-01-31 17:49:18), (3, 1, PartFilled, 2018-02-26 12:39:33), CREATE TABLE `Department_Stores` ( dept_store_id INTEGER, dept_store_chain_id INTEGER REFERENCES Department_Store_Chain(dept_store_chain_id), store_name VARCHAR(80), store_address VARCHAR(255), store_phone VARCHAR(80), store_email VARCHAR(80) ); Sample rows from `Department_Stores`: (1, 1, store_name, 01290 Jeremie Parkway Suite 753 North Arielle, MS 51249, (948)944-5099x2027, bmaggio@example.com), (2, 3, store_name, 082 Purdy Expressway O'Connellshire, IL 31732, 877-917-5029, larissa10@example.org), (3, 4, store_name, 994 Travis Plains North Wadeton, WV 27575-3951, 1-216-312-0375, alexandro.mcclure@example.net), CREATE TABLE `Departments` ( department_id INTEGER, dept_store_id INTEGER REFERENCES Department_Stores(dept_store_id), department_name VARCHAR(80) ); Sample rows from `Departments`: (1, 5, human resource), (2, 11, purchasing), (3, 4, marketing), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id) ); Sample rows from `Order_Items`: (1, 9, 7), (2, 1, 3), (3, 5, 2), CREATE TABLE `Product_Suppliers` ( product_id INTEGER PRIMARY KEY REFERENCES Products(product_id), supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), date_supplied_from DATETIME, date_supplied_to DATETIME, total_amount_purchased VARCHAR(80), total_value_purchased DECIMAL(19,4) ); Sample rows from `Product_Suppliers`: (4, 3, 2017-06-19 00:49:05, 2018-03-24 19:29:18, 89366.05, 36014.6), (8, 4, 2017-07-02 00:35:12, 2018-03-25 07:30:49, 25085.57, 36274.56), (3, 3, 2017-10-14 19:15:37, 2018-03-24 02:29:44, 15752.45, 7273.74), CREATE TABLE `Staff_Department_Assignments` ( staff_id INTEGER PRIMARY KEY REFERENCES Staff(staff_id), department_id INTEGER PRIMARY KEY REFERENCES Departments(department_id), date_assigned_from DATETIME, job_title_code VARCHAR(10), date_assigned_to DATETIME ); Sample rows from `Staff_Department_Assignments`: (5, 4, 2017-06-11 22:55:20, Department Manager, 2018-03-23 21:59:11), (10, 5, 2017-12-18 19:12:15, Sales Person, 2018-03-23 20:25:24), (1, 5, 2018-02-14 03:15:29, Clerical Staff, 2018-03-24 19:57:56), ",
        "output": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of patients who are not using the medication of Procrastin-X. ###filtered_database_schema: CREATE TABLE `Physician` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), SSN INTEGER ); Sample rows from `Physician`: (1, John Dorian, Staff Internist, 111111111), (2, Elliot Reid, Attending Physician, 222222222), (3, Christopher Turk, Surgical Attending Physician, 333333333), CREATE TABLE `Department` ( DepartmentID INTEGER, Name VARCHAR(30), Head INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Department`: (1, General Medicine, 4), (2, Surgery, 7), (3, Psychiatry, 9), CREATE TABLE `Affiliated_With` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID), PrimaryAffiliation BOOLEAN ); Sample rows from `Affiliated_With`: (1, 1, 1), (2, 1, 1), (3, 1, 0), CREATE TABLE `Procedures` ( Code INTEGER, Name VARCHAR(30), Cost REAL ); Sample rows from `Procedures`: (1, Reverse Rhinopodoplasty, 1500.0), (2, Obtuse Pyloric Recombobulation, 3750.0), (3, Folded Demiophtalmectomy, 4500.0), CREATE TABLE `Trained_In` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code), CertificationDate DATETIME, CertificationExpires DATETIME ); Sample rows from `Trained_In`: (3, 1, 2008-01-01, 2008-12-31), (3, 2, 2008-01-01, 2008-12-31), (3, 5, 2008-01-01, 2008-12-31), CREATE TABLE `Patient` ( SSN INTEGER, Name VARCHAR(30), Address VARCHAR(30), Phone VARCHAR(30), InsuranceID INTEGER, PCP INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Patient`: (100000001, John Smith, 42 Foobar Lane, 555-0256, 68476213, 1), (100000002, Grace Ritchie, 37 Snafu Drive, 555-0512, 36546321, 2), (100000003, Random J. Patient, 101 Omgbbq Street, 555-1204, 65465421, 2), CREATE TABLE `Nurse` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), Registered BOOLEAN, SSN INTEGER ); Sample rows from `Nurse`: (101, Carla Espinosa, Head Nurse, 1, 111111110), (102, Laverne Roberts, Nurse, 1, 222222220), (103, Paul Flowers, Nurse, 0, 333333330), CREATE TABLE `Appointment` ( AppointmentID INTEGER, Patient INTEGER REFERENCES Patient(SSN), PrepNurse INTEGER REFERENCES Nurse(EmployeeID), Physician INTEGER REFERENCES Physician(EmployeeID), Start DATETIME, End DATETIME, ExaminationRoom TEXT ); Sample rows from `Appointment`: (13216584, 100000001, 101, 1, 2008-04-24 10:00, 2008-04-24 11:00, A), (26548913, 100000002, 101, 2, 2008-04-24 10:00, 2008-04-24 11:00, B), (36549879, 100000001, 102, 1, 2008-04-25 10:00, 2008-04-25 11:00, A), CREATE TABLE `Medication` ( Code INTEGER, Name VARCHAR(30), Brand VARCHAR(30), Description VARCHAR(30) ); Sample rows from `Medication`: (1, Procrastin-X, X, N/A), (2, Thesisin, Foo Labs, N/A), (3, Awakin, Bar Laboratories, N/A), CREATE TABLE `Prescribes` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Medication INTEGER PRIMARY KEY REFERENCES Medication(Code), Date DATETIME PRIMARY KEY, Appointment INTEGER REFERENCES Appointment(AppointmentID), Dose VARCHAR(30) ); Sample rows from `Prescribes`: (1, 100000001, 1, 2008-04-24 10:47, 13216584, 5), (9, 100000004, 2, 2008-04-27 10:53, 86213939, 10), (9, 100000004, 2, 2008-04-30 16:53, None, 5), CREATE TABLE `Block` ( BlockFloor INTEGER PRIMARY KEY, BlockCode INTEGER PRIMARY KEY ); Sample rows from `Block`: (1, 1), (1, 2), (1, 3), CREATE TABLE `Room` ( RoomNumber INTEGER, RoomType VARCHAR(30), BlockFloor INTEGER REFERENCES Block(BlockFloor), BlockCode INTEGER REFERENCES Block(BlockCode), Unavailable BOOLEAN ); Sample rows from `Room`: (101, Single, 1, 1, 0), (102, Single, 1, 1, 0), (103, Single, 1, 1, 0), CREATE TABLE `On_Call` ( Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID), BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor), BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode), OnCallStart DATETIME PRIMARY KEY, OnCallEnd DATETIME PRIMARY KEY ); Sample rows from `On_Call`: (101, 1, 1, 2008-11-04 11:00, 2008-11-04 19:00), (101, 1, 2, 2008-11-04 11:00, 2008-11-04 19:00), (102, 1, 3, 2008-11-04 11:00, 2008-11-04 19:00), CREATE TABLE `Stay` ( StayID INTEGER, Patient INTEGER REFERENCES Patient(SSN), Room INTEGER REFERENCES Room(RoomNumber), StayStart DATETIME, StayEnd DATETIME ); Sample rows from `Stay`: (3215, 100000001, 111, 2008-05-01, 2008-05-04), (3216, 100000003, 123, 2008-05-03, 2008-05-14), (3217, 100000004, 112, 2008-05-02, 2008-05-03), CREATE TABLE `Undergoes` ( Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code), Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID), DateUndergoes DATETIME PRIMARY KEY, Physician INTEGER REFERENCES Physician(EmployeeID), AssistingNurse INTEGER REFERENCES Nurse(EmployeeID) ); Sample rows from `Undergoes`: (100000001, 6, 3215, 2008-05-02, 3, 101), (100000001, 2, 3215, 2008-05-03, 7, 101), (100000004, 1, 3217, 2008-05-07, 3, 102), ",
        "output": "SELECT COUNT(*) FROM patient WHERE ssn NOT IN ( SELECT t1.patient FROM prescribes as t1 JOIN medication as t2 ON t1.medication  =  t2.code WHERE t2.name  =  'Procrastin-X' )"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average age for each gender? ###filtered_database_schema: CREATE TABLE `Person` ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT ); Sample rows from `Person`: (Alice, 25, new york city, female, student), (Bob, 35, salt lake city, male, engineer), (Zach, 45, austin, male, doctor), CREATE TABLE `PersonFriend` ( name varchar(20) REFERENCES Person(name), friend varchar(20) REFERENCES Person(name), year INTEGER ); Sample rows from `PersonFriend`: (Alice, Bob, 10), (Zach, Dan, 12), (Bob, Zach, 5), ",
        "output": "SELECT AVG(age) ,  gender FROM person GROUP BY gender"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the first names of students, ordered by age from greatest to least? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), CREATE TABLE `Department` ( DNO INTEGER, Division VARCHAR(2), DName VARCHAR(25), Room VARCHAR(5), Building VARCHAR(13), DPhone INTEGER ); Sample rows from `Department`: (10, AS, History of Art, 268, Mergenthaler, 7117), (20, AS, Biology, 144, Mudd, 7330), (30, AS, Chemistry, 113, Remsen, 7429), CREATE TABLE `Member_of` ( FacID INTEGER REFERENCES Faculty(FacID), DNO INTEGER REFERENCES Department(DNO), Appt_Type VARCHAR(15) ); Sample rows from `Member_of`: (7792, 600, Primary), (9210, 520, Primary), (9811, 550, Primary), CREATE TABLE `Course` ( CID VARCHAR(7) PRIMARY KEY, CName VARCHAR(40), Credits INTEGER, Instructor INTEGER REFERENCES Faculty(FacID), Days VARCHAR(5), Hours VARCHAR(11), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Course`: (600.101, COMPUTER LITERACY, 3, 6112, MTW, 3, 600), (600.103, INTRODUCTION TO COMPUTER SCIENCE, 1, 4230, Th, 4, 600), (600.107, INTRO TO PROGRAMMING IN JAVA, 3, 1193, MTW, 3, 600), CREATE TABLE `Minor_in` ( StuID INTEGER REFERENCES Student(StuID), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Minor_in`: (1004, 520), (1005, 550), (1006, 50), CREATE TABLE `Enrolled_in` ( StuID INTEGER REFERENCES Student(StuID), CID VARCHAR(7) REFERENCES Course(CID), Grade VARCHAR(2) REFERENCES Gradeconversion(lettergrade) ); Sample rows from `Enrolled_in`: (1001, 550.681, A-), (1001, 600.303, B), (1001, 600.315, B+), CREATE TABLE `Gradeconversion` ( lettergrade VARCHAR(2) PRIMARY KEY, gradepoint FLOAT ); Sample rows from `Gradeconversion`: (A+, 4.0), (A, 4.0), (A-, 3.7), ",
        "output": "SELECT fname FROM student ORDER BY age DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the distinct types of mills that are built by American or Canadian architects? ###filtered_database_schema: CREATE TABLE `architect` ( id TEXT PRIMARY KEY, name TEXT, nationality TEXT, gender TEXT ); Sample rows from `architect`: (1, Frank Lloyd Wright, American, male), (2, Frank Gehry, Canadian, male), (3, Zaha Hadid, Iraqi, British, female), CREATE TABLE `bridge` ( architect_id INT REFERENCES architect(id), id INT PRIMARY KEY, name TEXT, location TEXT, length_meters REAL, length_feet REAL ); Sample rows from `bridge`: (1, 1, Xian Ren Qiao (Fairy Bridge), Guangxi , China, 121.0, 400.0), (2, 2, Landscape Arch, Arches National Park , Utah , USA, 88.0, 290.0), (3, 3, Kolob Arch, Zion National Park , Utah , USA, 87.0, 287.0), CREATE TABLE `mill` ( architect_id INT REFERENCES architect(id), id INT PRIMARY KEY, location TEXT, name TEXT, type TEXT, built_year INT, notes TEXT ); Sample rows from `mill`: (1, 1, Coswarem, Le Vieux Molen, Grondzeiler, 1840, Molenechos (Dutch)), (1, 2, Donceel, Moulin Bertrand, Grondzeiler, 1890, Molenechos (Dutch)), (2, 3, Fexhe-le-haut-Clocher, Moulin de Fexhe, Grondzeiler, 1843, Molenechos (Dutch)), ",
        "output": "SELECT DISTINCT t1.type FROM mill as t1 JOIN architect as t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' OR t2.nationality  =  'Canadian'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name and date of the most recent race? ###filtered_database_schema: CREATE TABLE `circuits` ( circuitId INTEGER, circuitRef TEXT, name TEXT, location TEXT, country TEXT, lat REAL, lng REAL, alt TEXT, url TEXT ); Sample rows from `circuits`: (1, albert_park, Albert Park Grand Prix Circuit, Melbourne, Australia, -37.8497, 144.968, 10, http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit), (2, sepang, Sepang International Circuit, Kuala Lumpur, Malaysia, 2.76083, 101.738, , http://en.wikipedia.org/wiki/Sepang_International_Circuit), (3, bahrain, Bahrain International Circuit, Sakhir, Bahrain, 26.0325, 50.5106, , http://en.wikipedia.org/wiki/Bahrain_International_Circuit), CREATE TABLE `races` ( raceId INTEGER, year INTEGER, round INTEGER, circuitId INTEGER REFERENCES circuits(circuitId), name TEXT, date TEXT, time TEXT, url TEXT ); Sample rows from `races`: (1, 2009, 1, 1, Australian Grand Prix, 2009-03-29, 06:00:00, http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix), (2, 2009, 2, 2, Malaysian Grand Prix, 2009-04-05, 09:00:00, http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix), (3, 2009, 3, 17, Chinese Grand Prix, 2009-04-19, 07:00:00, http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix), CREATE TABLE `drivers` ( driverId INTEGER, driverRef TEXT, number TEXT, code TEXT, forename TEXT, surname TEXT, dob TEXT, nationality TEXT, url TEXT ); Sample rows from `drivers`: (1, hamilton, 44, HAM, Lewis, Hamilton, 07/01/1985, British, http://en.wikipedia.org/wiki/Lewis_Hamilton), (2, heidfeld, , HEI, Nick, Heidfeld, 10/05/1977, German, http://en.wikipedia.org/wiki/Nick_Heidfeld), (3, rosberg, 6, ROS, Nico, Rosberg, 27/06/1985, German, http://en.wikipedia.org/wiki/Nico_Rosberg), CREATE TABLE `status` ( statusId INTEGER, status TEXT ); Sample rows from `status`: (1, Finished), (2, Disqualified), (3, Accident), CREATE TABLE `seasons` ( year INTEGER, url TEXT ); Sample rows from `seasons`: (1950, http://en.wikipedia.org/wiki/1950_Formula_One_season), (1951, http://en.wikipedia.org/wiki/1951_Formula_One_season), (1952, http://en.wikipedia.org/wiki/1952_Formula_One_season), CREATE TABLE `constructors` ( constructorId INTEGER, constructorRef TEXT, name TEXT, nationality TEXT, url TEXT ); Sample rows from `constructors`: (1, mclaren, McLaren, British, http://en.wikipedia.org/wiki/McLaren), (2, bmw_sauber, BMW Sauber, German, http://en.wikipedia.org/wiki/BMW_Sauber), (3, williams, Williams, British, http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering), CREATE TABLE `constructorStandings` ( constructorStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `constructorStandings`: (1, 18, 1, 14.0, 1, 1, 1), (2, 18, 2, 8.0, 3, 3, 0), (3, 18, 3, 9.0, 2, 2, 0), CREATE TABLE `results` ( resultId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, grid INTEGER, position TEXT, positionText TEXT, positionOrder INTEGER, points REAL, laps TEXT, time TEXT, milliseconds TEXT, fastestLap TEXT, rank TEXT, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId INTEGER ); Sample rows from `results`: (1, 18, 1, 1, 22, 1, 1, 1, 1, 10.0, 58, 34:50.6, 5690616, 39, 2, 01:27.5, 218.3, 1), (2, 18, 2, 2, 3, 5, 2, 2, 2, 8.0, 58, 5.478, 5696094, 41, 3, 01:27.7, 217.586, 1), (3, 18, 3, 3, 7, 7, 3, 3, 3, 6.0, 58, 8.163, 5698779, 41, 5, 01:28.1, 216.719, 1), CREATE TABLE `driverStandings` ( driverStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `driverStandings`: (1, 18, 1, 10.0, 1, 1, 1), (2, 18, 2, 8.0, 2, 2, 0), (3, 18, 3, 6.0, 3, 3, 0), CREATE TABLE `constructorResults` ( constructorResultsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, status TEXT ); Sample rows from `constructorResults`: (1, 18, 1, 14.0, NULL), (2, 18, 2, 8.0, NULL), (3, 18, 3, 9.0, NULL), CREATE TABLE `qualifying` ( qualifyId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, position INTEGER, q1 TEXT, q2 TEXT, q3 TEXT ); Sample rows from `qualifying`: (1, 18, 1, 1, 22, 1, 1:26.572, 1:25.187, 1:26.714), (2, 18, 9, 2, 4, 2, 1:26.103, 1:25.315, 1:26.869), (3, 18, 5, 1, 23, 3, 1:25.664, 1:25.452, 1:27.079), CREATE TABLE `pitStops` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), stop INTEGER PRIMARY KEY, lap INTEGER, time TEXT, duration TEXT, milliseconds INTEGER ); CREATE TABLE `lapTimes` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), lap INTEGER PRIMARY KEY, position INTEGER, time TEXT, milliseconds INTEGER ); ",
        "output": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of tracks that contain the the word you in them? ###filtered_database_schema: CREATE TABLE `Album` ( AlbumId INTEGER, Title varchar(160), ArtistId INTEGER PRIMARY KEY REFERENCES Artist(ArtistId) ); Sample rows from `Album`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `Artist` ( ArtistId INTEGER, Name varchar(120) ); Sample rows from `Artist`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `Customer` ( CustomerId INTEGER, FirstName varchar(40), LastName varchar(20), Company varchar(80), Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60), SupportRepId INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId) ); Sample rows from `Customer`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `Employee` ( EmployeeId INTEGER, LastName varchar(20), FirstName varchar(20), Title varchar(30), ReportsTo INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId), BirthDate datetime, HireDate datetime, Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60) ); Sample rows from `Employee`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `Genre` ( GenreId INTEGER, Name varchar(120) ); Sample rows from `Genre`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `Invoice` ( InvoiceId INTEGER, CustomerId INTEGER PRIMARY KEY REFERENCES Customer(CustomerId), InvoiceDate datetime, BillingAddress varchar(70), BillingCity varchar(40), BillingState varchar(40), BillingCountry varchar(40), BillingPostalCode varchar(10), Total decimal(10,2) ); Sample rows from `Invoice`: (1, 2, 2009-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2009-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2009-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `InvoiceLine` ( InvoiceLineId INTEGER, InvoiceId INTEGER PRIMARY KEY REFERENCES Invoice(InvoiceId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId), UnitPrice decimal(10,2), Quantity INTEGER ); Sample rows from `InvoiceLine`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `MediaType` ( MediaTypeId INTEGER, Name varchar(120) ); Sample rows from `MediaType`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `Playlist` ( PlaylistId INTEGER, Name varchar(120) ); Sample rows from `Playlist`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `PlaylistTrack` ( PlaylistId INTEGER PRIMARY KEY REFERENCES Playlist(PlaylistId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId) ); Sample rows from `PlaylistTrack`: (1, 1), (8, 1), (17, 1), CREATE TABLE `Track` ( TrackId INTEGER, Name varchar(200), AlbumId INTEGER PRIMARY KEY REFERENCES Album(AlbumId), MediaTypeId INTEGER PRIMARY KEY REFERENCES MediaType(MediaTypeId), GenreId INTEGER PRIMARY KEY REFERENCES Genre(GenreId), Composer varchar(220), Milliseconds INTEGER, Bytes INTEGER, UnitPrice decimal(10,2) ); Sample rows from `Track`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), ",
        "output": "SELECT name FROM track WHERE name LIKE '%you%'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names and salaries of instructors who advises students in the History department? ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT t2.name ,  t2.salary FROM advisor as t1 JOIN instructor as t2 ON t1.i_id  =  t2.id JOIN student as t3 ON t1.s_id  =  t3.id WHERE t3.dept_name  =  'History'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name of the customer who has made the largest amount of claim in a single claim? ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_Details VARCHAR(255) ); Sample rows from `Customers`: (252, America Jaskolski), (263, Ellsworth Paucek), (334, Mrs. Hanna Willms), CREATE TABLE `Staff` ( Staff_ID INTEGER, Staff_Details VARCHAR(255) ); Sample rows from `Staff`: (406, Clifton), (427, Cathryn), (510, Kaci), CREATE TABLE `Policies` ( Policy_ID INTEGER, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Policy_Type_Code CHAR(15), Start_Date DATETIME, End_Date DATETIME ); Sample rows from `Policies`: (125, 808, Deputy, 2018-02-10 08:56:30, 2018-03-18 09:17:26), (151, 380, Jurisdiction, 2017-12-20 06:02:31, 2017-09-16 22:04:13), (287, 334, Jurisdiction, 2017-03-16 18:16:52, 2017-11-24 06:36:51), CREATE TABLE `Claim_Headers` ( Claim_Header_ID INTEGER, Claim_Status_Code CHAR(15), Claim_Type_Code CHAR(15), Policy_ID INTEGER REFERENCES Policies(Policy_ID), Date_of_Claim DATETIME, Date_of_Settlement DATETIME, Amount_Claimed DECIMAL(20,4), Amount_Piad DECIMAL(20,4) ); Sample rows from `Claim_Headers`: (15, Settled, Handphone Subsidy, 518, 2016-05-31 06:07:11, 2018-02-23 03:46:38, 349.15, 582.03), (24, Disputed, Child Birth, 518, 2016-12-30 21:43:21, 2017-10-08 21:43:14, 318.16, 309.2), (27, Disputed, Overtime Meal Subsidy, 518, 2017-05-01 13:34:43, 2017-11-16 04:06:05, 362.71, 132.97), CREATE TABLE `Claims_Documents` ( Claim_ID INTEGER PRIMARY KEY REFERENCES Claim_Headers(Claim_Header_ID), Document_Type_Code CHAR(15) PRIMARY KEY, Created_by_Staff_ID INTEGER REFERENCES Staff(Staff_ID), Created_Date INTEGER ); Sample rows from `Claims_Documents`: (24, Document, 718, 8), (27, Document, 986, 6), (27, Medical, 427, 8), CREATE TABLE `Claims_Processing_Stages` ( Claim_Stage_ID INTEGER, Next_Claim_Stage_ID INTEGER, Claim_Status_Name VARCHAR(255), Claim_Status_Description VARCHAR(255) ); Sample rows from `Claims_Processing_Stages`: (1, 1, Open, Open a new claim), (3, 1, Close, Close a claim), CREATE TABLE `Claims_Processing` ( Claim_Processing_ID INTEGER, Claim_ID INTEGER REFERENCES Claim_Headers(Claim_Header_ID), Claim_Outcome_Code CHAR(15), Claim_Stage_ID INTEGER, Staff_ID INTEGER REFERENCES Staff(Staff_ID) ); Sample rows from `Claims_Processing`: (118, 28, In progress, 1, 771), (145, 62, In progress, 1, 589), (213, 27, In progress, 1, 589), ",
        "output": "SELECT t3.customer_details FROM claim_headers as t1 JOIN policies as t2 ON t1.policy_id  =  t2.policy_id JOIN customers as t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT MAX(amount_claimed) FROM claim_headers)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: how many denny are there in the bay area ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT COUNT(*) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.name  =  \"denny\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the population density of the state with the smallest area ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT density FROM state WHERE area  =  ( SELECT MIN(area) FROM state );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all instructors with names that include \"dar\"? ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT name FROM instructor WHERE name LIKE '%dar%'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the description of the transaction type that occurs most frequently. ###filtered_database_schema: CREATE TABLE `Investors` ( investor_id INTEGER, Investor_details VARCHAR(255) ); Sample rows from `Investors`: (1, z), (2, z), (3, d), CREATE TABLE `Lots` ( lot_id INTEGER, investor_id INTEGER REFERENCES Investors(investor_id), lot_details VARCHAR(255) ); Sample rows from `Lots`: (1, 13, r), (2, 16, z), (3, 10, s), CREATE TABLE `Ref_Transaction_Types` ( transaction_type_code VARCHAR(10) PRIMARY KEY, transaction_type_description VARCHAR(80) ); Sample rows from `Ref_Transaction_Types`: (SALE, Sale), (PUR, Purchase), CREATE TABLE `Transactions` ( transaction_id INTEGER, investor_id INTEGER REFERENCES Investors(investor_id), transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code), date_of_transaction DATETIME, amount_of_transaction DECIMAL(19,4), share_count VARCHAR(40), other_details VARCHAR(255) ); Sample rows from `Transactions`: (1, 6, SALE, 1988-09-16 19:02:51, 302507.6996, 8718572, None), (2, 18, PUR, 1982-06-06 17:19:00, 27.257, 9, None), (3, 2, SALE, 1979-04-27 06:03:59, 48777.969, 8580, None), CREATE TABLE `Sales` ( sales_transaction_id INTEGER REFERENCES Transactions(transaction_id), sales_details VARCHAR(255) ); Sample rows from `Sales`: (1, x), (2, o), (3, a), CREATE TABLE `Purchases` ( purchase_transaction_id INTEGER REFERENCES Transactions(transaction_id), purchase_details VARCHAR(255) ); Sample rows from `Purchases`: (1, c), (2, y), (3, i), CREATE TABLE `Transactions_Lots` ( transaction_id INTEGER REFERENCES Transactions(transaction_id), lot_id INTEGER REFERENCES Lots(lot_id) ); Sample rows from `Transactions_Lots`: (3, 11), (3, 8), (2, 11), ",
        "output": "SELECT t1.transaction_type_description FROM ref_transaction_types as t1 JOIN transactions as t2 ON t1.transaction_type_code  =  t2.transaction_type_code GROUP BY t1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what are major rivers in illinois ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT river_name FROM river WHERE length  >  750 AND traverse  =  \"illinois\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List name of all tracks in Balls to the Wall. ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT t2.name FROM albums as t1 JOIN tracks as t2 ON t1.id = t2.genre_id WHERE t1.title = \"Balls to the Wall\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of scientists involved for each project name. ###filtered_database_schema: CREATE TABLE `Scientists` ( SSN INT PRIMARY KEY, Name Char(30) ); Sample rows from `Scientists`: (123234877, Michael Rogers), (152934485, Anand Manikutty), (222364883, Carol Smith), CREATE TABLE `Projects` ( Code Char(4) PRIMARY KEY, Name Char(50), Hours INT ); Sample rows from `Projects`: (AeH1, Winds: Studying Bernoullis Principle, 156), (AeH2, Aerodynamics and Bridge Design, 189), (AeH3, Aerodynamics and Gas Mileage, 256), CREATE TABLE `AssignedTo` ( Scientist INT PRIMARY KEY REFERENCES Scientists(SSN), Project char(4) PRIMARY KEY REFERENCES Projects(Code) ); Sample rows from `AssignedTo`: (123234877, AeH1), (152934485, AeH3), (222364883, Ast3), ",
        "output": "SELECT COUNT(*) ,  t1.name FROM projects as t1 JOIN assignedto as t2 ON t1.code  =  t2.project GROUP BY t1.name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor? ###filtered_database_schema: CREATE TABLE `entrepreneur` ( Entrepreneur_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Company TEXT, Money_Requested REAL, Investor TEXT ); Sample rows from `entrepreneur`: (1, 1, Umbrolly, 150000.0, Duncan Bannatyne), (2, 2, Grails Ltd, 120000.0, Doug Richard), (3, 3, Le Beanock, 54000.0, Rachel Elnaugh), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Height REAL, Weight REAL, Date_of_Birth TEXT ); Sample rows from `people`: (1, Francesco Postiglione, 1.9, 80.0, 1972-04-29), (2, Leonardo Binchi, 1.86, 57.0, 1975-08-27), (3, Fabrizio Buonocore, 1.83, 45.0, 1977-04-28), ",
        "output": "SELECT investor ,  COUNT(*) FROM entrepreneur GROUP BY investor"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which physicians have never taken any appointment? Find their names. ###filtered_database_schema: CREATE TABLE `Physician` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), SSN INTEGER ); Sample rows from `Physician`: (1, John Dorian, Staff Internist, 111111111), (2, Elliot Reid, Attending Physician, 222222222), (3, Christopher Turk, Surgical Attending Physician, 333333333), CREATE TABLE `Department` ( DepartmentID INTEGER, Name VARCHAR(30), Head INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Department`: (1, General Medicine, 4), (2, Surgery, 7), (3, Psychiatry, 9), CREATE TABLE `Affiliated_With` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID), PrimaryAffiliation BOOLEAN ); Sample rows from `Affiliated_With`: (1, 1, 1), (2, 1, 1), (3, 1, 0), CREATE TABLE `Procedures` ( Code INTEGER, Name VARCHAR(30), Cost REAL ); Sample rows from `Procedures`: (1, Reverse Rhinopodoplasty, 1500.0), (2, Obtuse Pyloric Recombobulation, 3750.0), (3, Folded Demiophtalmectomy, 4500.0), CREATE TABLE `Trained_In` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code), CertificationDate DATETIME, CertificationExpires DATETIME ); Sample rows from `Trained_In`: (3, 1, 2008-01-01, 2008-12-31), (3, 2, 2008-01-01, 2008-12-31), (3, 5, 2008-01-01, 2008-12-31), CREATE TABLE `Patient` ( SSN INTEGER, Name VARCHAR(30), Address VARCHAR(30), Phone VARCHAR(30), InsuranceID INTEGER, PCP INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Patient`: (100000001, John Smith, 42 Foobar Lane, 555-0256, 68476213, 1), (100000002, Grace Ritchie, 37 Snafu Drive, 555-0512, 36546321, 2), (100000003, Random J. Patient, 101 Omgbbq Street, 555-1204, 65465421, 2), CREATE TABLE `Nurse` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), Registered BOOLEAN, SSN INTEGER ); Sample rows from `Nurse`: (101, Carla Espinosa, Head Nurse, 1, 111111110), (102, Laverne Roberts, Nurse, 1, 222222220), (103, Paul Flowers, Nurse, 0, 333333330), CREATE TABLE `Appointment` ( AppointmentID INTEGER, Patient INTEGER REFERENCES Patient(SSN), PrepNurse INTEGER REFERENCES Nurse(EmployeeID), Physician INTEGER REFERENCES Physician(EmployeeID), Start DATETIME, End DATETIME, ExaminationRoom TEXT ); Sample rows from `Appointment`: (13216584, 100000001, 101, 1, 2008-04-24 10:00, 2008-04-24 11:00, A), (26548913, 100000002, 101, 2, 2008-04-24 10:00, 2008-04-24 11:00, B), (36549879, 100000001, 102, 1, 2008-04-25 10:00, 2008-04-25 11:00, A), CREATE TABLE `Medication` ( Code INTEGER, Name VARCHAR(30), Brand VARCHAR(30), Description VARCHAR(30) ); Sample rows from `Medication`: (1, Procrastin-X, X, N/A), (2, Thesisin, Foo Labs, N/A), (3, Awakin, Bar Laboratories, N/A), CREATE TABLE `Prescribes` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Medication INTEGER PRIMARY KEY REFERENCES Medication(Code), Date DATETIME PRIMARY KEY, Appointment INTEGER REFERENCES Appointment(AppointmentID), Dose VARCHAR(30) ); Sample rows from `Prescribes`: (1, 100000001, 1, 2008-04-24 10:47, 13216584, 5), (9, 100000004, 2, 2008-04-27 10:53, 86213939, 10), (9, 100000004, 2, 2008-04-30 16:53, None, 5), CREATE TABLE `Block` ( BlockFloor INTEGER PRIMARY KEY, BlockCode INTEGER PRIMARY KEY ); Sample rows from `Block`: (1, 1), (1, 2), (1, 3), CREATE TABLE `Room` ( RoomNumber INTEGER, RoomType VARCHAR(30), BlockFloor INTEGER REFERENCES Block(BlockFloor), BlockCode INTEGER REFERENCES Block(BlockCode), Unavailable BOOLEAN ); Sample rows from `Room`: (101, Single, 1, 1, 0), (102, Single, 1, 1, 0), (103, Single, 1, 1, 0), CREATE TABLE `On_Call` ( Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID), BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor), BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode), OnCallStart DATETIME PRIMARY KEY, OnCallEnd DATETIME PRIMARY KEY ); Sample rows from `On_Call`: (101, 1, 1, 2008-11-04 11:00, 2008-11-04 19:00), (101, 1, 2, 2008-11-04 11:00, 2008-11-04 19:00), (102, 1, 3, 2008-11-04 11:00, 2008-11-04 19:00), CREATE TABLE `Stay` ( StayID INTEGER, Patient INTEGER REFERENCES Patient(SSN), Room INTEGER REFERENCES Room(RoomNumber), StayStart DATETIME, StayEnd DATETIME ); Sample rows from `Stay`: (3215, 100000001, 111, 2008-05-01, 2008-05-04), (3216, 100000003, 123, 2008-05-03, 2008-05-14), (3217, 100000004, 112, 2008-05-02, 2008-05-03), CREATE TABLE `Undergoes` ( Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code), Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID), DateUndergoes DATETIME PRIMARY KEY, Physician INTEGER REFERENCES Physician(EmployeeID), AssistingNurse INTEGER REFERENCES Nurse(EmployeeID) ); Sample rows from `Undergoes`: (100000001, 6, 3215, 2008-05-02, 3, 101), (100000001, 2, 3215, 2008-05-03, 7, 101), (100000004, 1, 3217, 2008-05-07, 3, 102), ",
        "output": "SELECT name FROM physician EXCEPT SELECT t2.name FROM appointment as t1 JOIN physician as t2 ON t1.physician  =  t2.employeeid"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Please show the most common status of roller coasters. ###filtered_database_schema: CREATE TABLE `roller_coaster` ( Roller_Coaster_ID INT PRIMARY KEY, Name TEXT, Park TEXT, Country_ID INT REFERENCES country(Country_ID), Length REAL, Height REAL, Speed TEXT, Opened TEXT, Status TEXT ); Sample rows from `roller_coaster`: (1, Boardwalk Bullet, Kemah Boardwalk, 1, 3236.0, 96.0, 51, August 31, 2007, Operating), (2, Dauling Dragon, Happy Valley, 1, 3914.0, 105.0, 55, 2012, Operating), (3, Hades 360, Mt. Olympus, 1, 4726.0, 136.0, 70, May 14, 2005, Operating), CREATE TABLE `country` ( Country_ID INT PRIMARY KEY, Name TEXT, Population INT, Area INT, Languages TEXT ); Sample rows from `country`: (1, Austria, 8206524, 83871, German), (2, Finland, 5261008, 338145, Finnish Swedish), (3, Sweden, 9047752, 449964, Swedish), ",
        "output": "SELECT status FROM roller_coaster GROUP BY status ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the names and ids of each account, as well as the number of transactions. ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(50), customer_middle_initial VARCHAR(1), customer_last_name VARCHAR(50), gender VARCHAR(1), email_address VARCHAR(255), login_name VARCHAR(80), login_password VARCHAR(20), phone_number VARCHAR(255), town_city VARCHAR(50), state_county_province VARCHAR(50), country VARCHAR(50) ); Sample rows from `Customers`: (1, Dee, A, Larkin, 1, thora.torphy@example.org, xhartmann, 77789d292604ea04406f, 241.796.1219x37862, North Nellie, WestVirginia, USA), (2, Brennon, H, Weimann, 0, roosevelt.collier@example.org, shayne.lesch, ce97a3e4539347daab96, (943)219-4234x415, South Isabell, Oklahoma, USA), (3, Joesph, K, Schaefer, 0, homenick.ambrose@example.net, feeney.lauriane, a6c7a7064c36b038d402, (488)524-5345, New Nikolas, Arkansas, USA), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 12, 2012-06-27 20:49:56, None), (2, 12, 2012-08-25 07:51:54, None), (3, 8, 2017-11-05 15:32:38, None), CREATE TABLE `Invoices` ( invoice_number INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_date DATETIME ); Sample rows from `Invoices`: (1, 9, 2018-03-01 16:40:48), (2, 9, 2018-03-20 00:21:41), (3, 3, 2018-03-05 08:47:33), CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_account_opened DATETIME, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 8, 2016-07-30 22:22:24, 900, Regular), (2, 3, 2017-05-29 16:45:17, 520, VIP), (3, 8, 2012-05-04 18:50:32, 323, Regular), CREATE TABLE `Product_Categories` ( production_type_code VARCHAR(15) PRIMARY KEY, product_type_description VARCHAR(80), vat_rating DECIMAL(19,4) ); Sample rows from `Product_Categories`: (Food, Food, 15.84), (DVDs, Dvd products, 11.4), (Books, Books, 13.95), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, production_type_code VARCHAR(15) REFERENCES Product_Categories(production_type_code), unit_price DECIMAL(19,4), product_name VARCHAR(80), product_color VARCHAR(20), product_size VARCHAR(20) ); Sample rows from `Products`: (1, 4, Food, 617.95, Coffee Bean, Red, Medium), (2, 4, Books, 558.49, Learning French, Yellow, Medium), (3, 8, Electronics, 563.58, Fans, Black, Medium), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DECIMAL(19,4), transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 13, 12, Payment, 2018-03-15 21:13:57, 613.96, None, None), (2, 9, 1, Payment, 2018-03-13 13:27:46, 368.46, None, None), (3, 6, 1, Refund, 2018-03-03 01:50:25, 1598.25, None, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), product_id INTEGER REFERENCES Products(product_id), product_quantity VARCHAR(50), other_order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 4, 6, None), (2, 4, 10, 7, None), (3, 15, 5, 4, None), CREATE TABLE `Invoice_Line_Items` ( order_item_id INTEGER REFERENCES Order_Items(order_item_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), product_id INTEGER REFERENCES Products(product_id), product_title VARCHAR(80), product_quantity VARCHAR(50), product_price DECIMAL(19,4), derived_product_cost DECIMAL(19,4), derived_vat_payable DECIMAL(19,4), derived_total_cost DECIMAL(19,4) ); Sample rows from `Invoice_Line_Items`: (14, 9, 5, prod_name, 4, 742.37, 191.11, None, 69.82), (3, 9, 15, prod_name, 1, 814.87, 176.29, None, 59.56), (4, 10, 15, prod_name, 8, 943.07, 73.14, None, 59.93), ",
        "output": "SELECT t2.account_name ,  t1.account_id ,  COUNT(*) FROM financial_transactions as t1 JOIN accounts as t2 ON t1.account_id  =  t2.account_id GROUP BY t1.account_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find journals about Temporal Data . ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.journalid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Temporal Data\" GROUP BY t3.journalid;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return me the number of tips that are written by Michelle in 2010 . ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN tip as t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  \"Michelle\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which restaurants have highest rating? List the restaurant name and its rating. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Restaurant` ( ResID INTEGER, ResName VARCHAR(100), Address VARCHAR(100), Rating INTEGER ); Sample rows from `Restaurant`: (1, Subway, 3233 St Paul St, Baltimore, MD 21218, 3), (2, Honeygrow, 3212 St Paul St, Baltimore, MD 21218, 4), CREATE TABLE `Type_Of_Restaurant` ( ResID INTEGER REFERENCES Restaurant(ResID), ResTypeID INTEGER REFERENCES Restaurant_Type(ResTypeID) ); Sample rows from `Type_Of_Restaurant`: (1, 1), (2, 2), CREATE TABLE `Restaurant_Type` ( ResTypeID INTEGER, ResTypeName VARCHAR(40), ResTypeDescription VARCHAR(100) ); Sample rows from `Restaurant_Type`: (1, Sandwich, Simplest there is.), (2, Stir-fry, Classic Chinese cooking.), CREATE TABLE `Visits_Restaurant` ( StuID INTEGER REFERENCES Student(StuID), ResID INTEGER REFERENCES Restaurant(ResID), Time TIMESTAMP, Spent FLOAT ); Sample rows from `Visits_Restaurant`: (1001, 1, 2017-10-09 18:15:00, 6.53), (1032, 2, 2017-10-08 13:00:30, 13.2), ",
        "output": "SELECT resname , rating FROM restaurant ORDER BY rating DESC LIMIT 1;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the type of the document named \"David CV\"? ###filtered_database_schema: CREATE TABLE `Roles` ( role_code VARCHAR(15) PRIMARY KEY, role_description VARCHAR(80) ); Sample rows from `Roles`: (DBA, Database Administrator), (PROJ-MGR, Project Manager), CREATE TABLE `Users` ( user_id INTEGER, role_code VARCHAR(15) REFERENCES Roles(role_code), user_name VARCHAR(40), user_login VARCHAR(40), password VARCHAR(40) ); Sample rows from `Users`: (1, PROJ-MGR, dickens.elta, 0, e72b5a2d50b39a8760764a5f7a9d68ca2f076877), (2, DBA, tremblay.raheem, 1, 9bc25a040d5647ced5ec32e1a455e90fafc10bcb), (3, DBA, lynn.haley, 0, 90db8f51449e6c39e2a01f0b649d5a92fe76bbbb), CREATE TABLE `Document_Structures` ( document_structure_code VARCHAR(15) PRIMARY KEY, parent_document_structure_code VARCHAR(15), document_structure_description VARCHAR(80) ); Sample rows from `Document_Structures`: (1, 1, Header), (6, 1, Main section), (8, 1, Bib), CREATE TABLE `Functional_Areas` ( functional_area_code VARCHAR(15) PRIMARY KEY, parent_functional_area_code VARCHAR(15), functional_area_description VARCHAR(80) ); Sample rows from `Functional_Areas`: (8, 8, Signature), (1, 8, Acknowledgement), (9, 8, Keep blank), CREATE TABLE `Images` ( image_id INTEGER, image_alt_text VARCHAR(80), image_name VARCHAR(40), image_url VARCHAR(255) ); Sample rows from `Images`: (1, Lea, top1, http://www.rempelnader.com/1.jpg), (2, Arden, top2, http://connellykertzmann.org/1.jpg), (3, Mohamed, top3, http://www.bernierconnelly.com/1.jpg), CREATE TABLE `Documents` ( document_code VARCHAR(15) PRIMARY KEY, document_structure_code VARCHAR(15) REFERENCES Document_Structures(document_structure_code), document_type_code VARCHAR(15), access_count INTEGER, document_name VARCHAR(80) ); Sample rows from `Documents`: (217, 8, Book, 1864, Learning English), (621, 1, Paper, 8208, Research about Art history), (958, 8, Book, 3769, Learning Database), CREATE TABLE `Document_Functional_Areas` ( document_code VARCHAR(15) REFERENCES Documents(document_code), functional_area_code VARCHAR(15) REFERENCES Functional_Areas(functional_area_code) ); Sample rows from `Document_Functional_Areas`: (675, 9), (930, 1), (217, 1), CREATE TABLE `Document_Sections` ( section_id INTEGER, document_code VARCHAR(15) REFERENCES Documents(document_code), section_sequence INTEGER, section_code VARCHAR(20), section_title VARCHAR(80) ); Sample rows from `Document_Sections`: (12, 714, 6072, 70, after), (15, 217, 4510, 14, after), (19, 675, 7236, 90, after), CREATE TABLE `Document_Sections_Images` ( section_id INTEGER PRIMARY KEY REFERENCES Document_Sections(section_id), image_id INTEGER PRIMARY KEY REFERENCES Images(image_id) ); Sample rows from `Document_Sections_Images`: (93, 6), (86, 2), (27, 3), ",
        "output": "SELECT document_type_code FROM documents WHERE document_name  =  \"David CV\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of programs that are never broadcasted in the morning. ###filtered_database_schema: CREATE TABLE `program` ( Program_ID INT PRIMARY KEY, Name TEXT, Origin TEXT, Launch REAL, Owner TEXT ); Sample rows from `program`: (1, Aniworld, Hunan, 2005.0, Hunan Broadcasting System (HBS)), (2, Kaku, Beijing, 2004.0, Beijing Television (BTV)), (3, Toonmax, Shanghai, 2005.0, Shanghai Media Group (SMG)), CREATE TABLE `channel` ( Channel_ID INT PRIMARY KEY, Name TEXT, Owner TEXT, Share_in_percent REAL, Rating_in_percent REAL ); Sample rows from `channel`: (1, CCTV-1, CCTV, 4.9, 0.54), (2, Hunan Satellite TV, HBS, 4.81, 0.53), (3, CCTV-8, CCTV, 3.76, 0.41), CREATE TABLE `broadcast` ( Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID), Program_ID INT PRIMARY KEY REFERENCES program(Program_ID), Time_of_day TEXT ); Sample rows from `broadcast`: (1, 1, Morning), (2, 1, Night), (3, 2, Morning), CREATE TABLE `broadcast_share` ( Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID), Program_ID INT PRIMARY KEY REFERENCES program(Program_ID), Date TEXT, Share_in_percent REAL ); Sample rows from `broadcast_share`: (1, 1, 01,May, 3.1), (2, 1, 02,May, 1.8), (3, 2, 03,May, 2.8), ",
        "output": "SELECT name FROM program EXCEPT SELECT t1.name FROM program as t1 JOIN broadcast as t2 ON t1.program_id  =  t2.program_id WHERE t2.time_of_day  =  \"Morning\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Voting_record` ( StuID INTEGER REFERENCES Student(StuID), Registration_Date VARCHAR(12), Election_Cycle VARCHAR(12), President_Vote INTEGER REFERENCES Student(StuID), Vice_President_Vote INTEGER REFERENCES Student(StuID), Secretary_Vote INTEGER REFERENCES Student(StuID), Treasurer_Vote INTEGER REFERENCES Student(StuID), Class_President_Vote INTEGER REFERENCES Student(StuID), Class_Senator_Vote INTEGER REFERENCES Student(StuID) ); Sample rows from `Voting_record`: (1001, 08/30/2015, Spring, 1004, 1007, 1010, 1035, 1001, 1028), (1002, 08/30/2014, Spring, 1014, 1007, 1020, 1025, 1021, 1028), (1003, 08/30/2013, Spring, 1004, 1017, 1030, 1035, 1031, 1028), ",
        "output": "SELECT COUNT(*) FROM student as t1 JOIN voting_record as t2 ON t1.stuid  =  class_senator_vote WHERE t1.city_code  =  \"NYC\" AND t2.election_cycle  =  \"Spring\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the description of the document type name 'Film'. ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (BK, Book, excellent), (CV, CV, excellent), (PT, Presentation, very good), CREATE TABLE `Ref_Budget_Codes` ( Budget_Type_Code CHAR(15) PRIMARY KEY, Budget_Type_Description VARCHAR(255) ); Sample rows from `Ref_Budget_Codes`: (GV, Government), (ORG, Organisation), (SF, Self founded), CREATE TABLE `Projects` ( Project_ID INTEGER, Project_Details VARCHAR(255) ); Sample rows from `Projects`: (30, Society Research project), (35, Internet of Things project), (105, Graph Database project), CREATE TABLE `Documents` ( Document_ID INTEGER, Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Project_ID INTEGER REFERENCES Projects(Project_ID), Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Documents`: (29, CV, 30, 2004-08-28 06:59:19, Review on UK files, None, None), (42, BK, 105, 2012-12-27 19:09:18, Review on Canadian files, None, None), (57, CV, 195, 1980-10-22 14:17:11, Review on French files, None, None), CREATE TABLE `Statements` ( Statement_ID INTEGER REFERENCES Documents(Document_ID), Statement_Details VARCHAR(255) ); Sample rows from `Statements`: (57, Open Project), (192, Private Project), CREATE TABLE `Documents_with_Expenses` ( Document_ID INTEGER REFERENCES Documents(Document_ID), Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code), Document_Details VARCHAR(255) ); Sample rows from `Documents_with_Expenses`: (57, GV, government), (192, GV, government), (226, GV, government), CREATE TABLE `Accounts` ( Account_ID INTEGER, Statement_ID INTEGER REFERENCES Statements(Statement_ID), Account_Details VARCHAR(255) ); Sample rows from `Accounts`: (7, 57, 495.063), (61, 57, 930.14), (98, 57, 6035.84), ",
        "output": "SELECT document_type_description FROM ref_document_types WHERE document_type_name  =  \"Film\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Give me the the first and last name of the faculty who advises the most students. ###filtered_database_schema: CREATE TABLE `Activity` ( actid INTEGER, activity_name varchar(25) ); Sample rows from `Activity`: (770, Mountain Climbing), (771, Canoeing), (772, Kayaking), CREATE TABLE `Participates_in` ( stuid INTEGER REFERENCES Student(StuID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Participates_in`: (1001, 770), (1001, 771), (1001, 777), CREATE TABLE `Faculty_Participates_in` ( FacID INTEGER REFERENCES Faculty(FacID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Faculty_Participates_in`: (1082, 784), (1082, 785), (1082, 790), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), ",
        "output": "SELECT t1.fname ,  t1.lname FROM faculty as t1 JOIN student as t2 ON t1.facid  =  t2.advisor GROUP BY t1.facid ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which customer status code has least number of customers? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 3904 Stroman Passage, Port Melyssa, 14445, Georgia, USA), (2, 053 Quigley Island, Hagenesfurt, 22194, Kentucky, USA), (3, 00704 Zoe Alley, Lake Elaina, 08938, Georgia, USA), CREATE TABLE `Staff` ( staff_id INTEGER, staff_address_id INTEGER REFERENCES Addresses(address_id), nickname VARCHAR(80), first_name VARCHAR(80), middle_name VARCHAR(80), last_name VARCHAR(80), date_of_birth DATETIME, date_joined_staff DATETIME, date_left_staff DATETIME ); Sample rows from `Staff`: (1, 14, thompson.constantin, Janessa, Amara, Sawayn, 2010-12-08 16:55:14, 2017-04-27 03:21:26, 2018-03-23 22:53:12), (2, 3, santos45, Camylle, Icie, Weissnat, 2015-08-01 13:22:43, 2016-06-06 08:54:28, 2018-03-10 15:25:00), (3, 5, ynader, Kaitlin, Stephania, Mertz, 1994-05-17 05:32:11, 2018-01-02 12:24:24, 2018-03-24 10:11:08), CREATE TABLE `Vehicles` ( vehicle_id INTEGER, vehicle_details VARCHAR(255) ); Sample rows from `Vehicles`: (1, Van), (2, Truck), (3, Car), CREATE TABLE `Customers` ( customer_id INTEGER, customer_address_id INTEGER REFERENCES Addresses(address_id), customer_status_code VARCHAR(15), date_became_customer DATETIME, date_of_birth DATETIME, first_name VARCHAR(80), last_name VARCHAR(80), amount_outstanding DOUBLE, email_address VARCHAR(250), phone_number VARCHAR(255), cell_mobile_phone_number VARCHAR(255) ); Sample rows from `Customers`: (1, 13, Bad Customer, 2016-05-11 17:03:48, 1998-12-15 13:24:40, Carole, Bernhard, 255.0, everette.goyette@example.org, 07278206718, 861-638-9797), (2, 10, Bad Customer, 2015-11-16 22:52:14, 1995-07-17 12:13:16, Genevieve, Terry, 7256.0, huel.jana@example.org, +14(5)2351480248, 578-518-4785x612), (3, 10, Good Customer, 2016-04-08 00:28:15, 1994-06-21 01:34:56, Clara, Ortiz, 9443.0, hilario.sporer@example.org, 374-483-2758x85087, 1-197-686-2849x8761), CREATE TABLE `Customer_Payments` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), datetime_payment DATETIME PRIMARY KEY, payment_method_code VARCHAR(10), amount_payment DOUBLE ); Sample rows from `Customer_Payments`: (11, 2018-02-05 18:44:46, Direct Debit, 9570.93), (2, 2018-02-24 10:07:05, Direct Debit, 8180.26), (14, 2018-02-27 20:08:53, Direct Debit, 4610.26), CREATE TABLE `Lessons` ( lesson_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), lesson_status_code VARCHAR(15), staff_id INTEGER REFERENCES Staff(staff_id), vehicle_id INTEGER REFERENCES Vehicles(vehicle_id), lesson_date DATETIME, lesson_time VARCHAR(10), price DOUBLE ); Sample rows from `Lessons`: (1, 6, Cancelled, 8, 3, 2018-02-28 10:55:36, 5, 199.0), (2, 8, Cancelled, 14, 3, 2018-03-07 16:12:36, 6, 167.0), (3, 6, Cancelled, 11, 2, 2018-03-03 15:10:16, 3, 352.0), ",
        "output": "SELECT customer_status_code FROM customers GROUP BY customer_status_code ORDER BY COUNT(*) ASC LIMIT 1;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the product id and product type of the cheapest product? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 28481 Crist Circle East Burdettestad, IA 21232), (2, 0292 Mitchel Pike Port Abefurt, IA 84402-4249), (3, 4062 Mante Place West Lindsey, DE 76199-8015), CREATE TABLE `Staff` ( staff_id INTEGER, staff_gender VARCHAR(1), staff_name VARCHAR(80) ); Sample rows from `Staff`: (1, 1, Tom), (2, 1, Malika), (3, 1, Katelynn), CREATE TABLE `Suppliers` ( supplier_id INTEGER, supplier_name VARCHAR(80), supplier_phone VARCHAR(80) ); Sample rows from `Suppliers`: (1, Lidl, (692)009-5928), (2, AB Store, 1-483-283-4742), (3, Tesco, 287-071-1153x254), CREATE TABLE `Department_Store_Chain` ( dept_store_chain_id INTEGER, dept_store_chain_name VARCHAR(80) ); Sample rows from `Department_Store_Chain`: (1, South), (2, West), (3, East), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method_code VARCHAR(10), customer_code VARCHAR(20), customer_name VARCHAR(80), customer_address VARCHAR(255), customer_phone VARCHAR(80), customer_email VARCHAR(80) ); Sample rows from `Customers`: (1, Credit Card, 401, Ahmed, 75099 Tremblay Port Apt. 163 South Norrisland, SC 80546, 254-072-4068x33935, margarett.vonrueden@example.com), (2, Credit Card, 665, Chauncey, 8408 Lindsay Court East Dasiabury, IL 72656-3552, +41(8)1897032009, stiedemann.sigrid@example.com), (3, Direct Debit, 844, Lukas, 7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871, 197-417-3557, joelle.monahan@example.com), CREATE TABLE `Products` ( product_id INTEGER, product_type_code VARCHAR(10), product_name VARCHAR(80), product_price DECIMAL(19,4) ); Sample rows from `Products`: (1, Clothes, red jeans, 734.73), (2, Clothes, yellow jeans, 687.23), (3, Clothes, black jeans, 695.16), CREATE TABLE `Supplier_Addresses` ( supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Supplier_Addresses`: (4, 5, 2016-09-22 16:41:31, 2018-03-14 20:06:37), (3, 9, 2014-11-07 19:18:49, 2018-03-16 16:39:58), (3, 2, 2008-11-22 12:01:25, 2018-03-02 19:50:22), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 9, 2017-12-11 05:00:22, 2018-03-20 20:52:34), (1, 6, 2017-10-07 23:00:26, 2018-02-28 14:53:52), (10, 8, 2017-04-04 20:00:27, 2018-02-27 20:08:33), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status_code VARCHAR(10), order_date DATETIME ); Sample rows from `Customer_Orders`: (1, 12, Completed, 2018-02-10 15:44:48), (2, 4, New, 2018-01-31 17:49:18), (3, 1, PartFilled, 2018-02-26 12:39:33), CREATE TABLE `Department_Stores` ( dept_store_id INTEGER, dept_store_chain_id INTEGER REFERENCES Department_Store_Chain(dept_store_chain_id), store_name VARCHAR(80), store_address VARCHAR(255), store_phone VARCHAR(80), store_email VARCHAR(80) ); Sample rows from `Department_Stores`: (1, 1, store_name, 01290 Jeremie Parkway Suite 753 North Arielle, MS 51249, (948)944-5099x2027, bmaggio@example.com), (2, 3, store_name, 082 Purdy Expressway O'Connellshire, IL 31732, 877-917-5029, larissa10@example.org), (3, 4, store_name, 994 Travis Plains North Wadeton, WV 27575-3951, 1-216-312-0375, alexandro.mcclure@example.net), CREATE TABLE `Departments` ( department_id INTEGER, dept_store_id INTEGER REFERENCES Department_Stores(dept_store_id), department_name VARCHAR(80) ); Sample rows from `Departments`: (1, 5, human resource), (2, 11, purchasing), (3, 4, marketing), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id) ); Sample rows from `Order_Items`: (1, 9, 7), (2, 1, 3), (3, 5, 2), CREATE TABLE `Product_Suppliers` ( product_id INTEGER PRIMARY KEY REFERENCES Products(product_id), supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), date_supplied_from DATETIME, date_supplied_to DATETIME, total_amount_purchased VARCHAR(80), total_value_purchased DECIMAL(19,4) ); Sample rows from `Product_Suppliers`: (4, 3, 2017-06-19 00:49:05, 2018-03-24 19:29:18, 89366.05, 36014.6), (8, 4, 2017-07-02 00:35:12, 2018-03-25 07:30:49, 25085.57, 36274.56), (3, 3, 2017-10-14 19:15:37, 2018-03-24 02:29:44, 15752.45, 7273.74), CREATE TABLE `Staff_Department_Assignments` ( staff_id INTEGER PRIMARY KEY REFERENCES Staff(staff_id), department_id INTEGER PRIMARY KEY REFERENCES Departments(department_id), date_assigned_from DATETIME, job_title_code VARCHAR(10), date_assigned_to DATETIME ); Sample rows from `Staff_Department_Assignments`: (5, 4, 2017-06-11 22:55:20, Department Manager, 2018-03-23 21:59:11), (10, 5, 2017-12-18 19:12:15, Sales Person, 2018-03-23 20:25:24), (1, 5, 2018-02-14 03:15:29, Clerical Staff, 2018-03-24 19:57:56), ",
        "output": "SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name and address of the department with the most students? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT t2.dept_name ,  t2.dept_address FROM student as t1 JOIN department as t2 ON t1.dept_code  =  t2.dept_code GROUP BY t1.dept_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average credit score for customers who have never taken a loan? ###filtered_database_schema: CREATE TABLE `bank` ( branch_ID INT PRIMARY KEY, bname varchar(20), no_of_customers INT, city varchar(10), state varchar(20) ); Sample rows from `bank`: (1, morningside, 203, New York City, New York), (2, downtown, 123, Salt Lake City, Utah), (3, broadway, 453, New York City, New York), CREATE TABLE `customer` ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal INT, no_of_loans INT, credit_score INT, branch_ID INT REFERENCES bank(branch_ID), state varchar(20) ); Sample rows from `customer`: (1, Mary, saving, 2000, 2, 30, 2, Utah), (2, Jack, checking, 1000, 1, 20, 1, Texas), (3, Owen, saving, 800000, 0, 210, 3, New York), CREATE TABLE `loan` ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3) REFERENCES customer(Cust_ID), branch_ID varchar(3) REFERENCES bank(branch_ID), amount INT ); Sample rows from `loan`: (1, Mortgages, 1, 1, 2050), (2, Auto, 1, 2, 3000), (3, Business, 3, 3, 5000), ",
        "output": "SELECT AVG(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the name of the company that produced more than one phone model. ###filtered_database_schema: CREATE TABLE `chip_model` ( Model_name TEXT PRIMARY KEY, Launch_year REAL, RAM_MiB REAL, ROM_MiB REAL, Slots TEXT, WiFi TEXT, Bluetooth TEXT ); Sample rows from `chip_model`: (X5, 2002.0, 32.0, 32.0, 1CFII,1SD, No, No), (X5 high end, 2002.0, 64.0, 48.0, 1CFII,1SD, No, No), (X3 Basic, 2003.0, 32.0, 32.0, 1SD, No, No), CREATE TABLE `screen_mode` ( Graphics_mode REAL PRIMARY KEY, Char_cells TEXT, Pixels TEXT, Hardware_colours REAL, used_kb REAL, map TEXT, Type TEXT ); Sample rows from `screen_mode`: (0.0, 80 × 32, 640 × 256, 2.0, 20.0, 3000–7FFF, Graphics), (1.0, 40 × 32, 320 × 256, 4.0, 20.0, 3000–7FFF, Graphics), (2.0, 20 × 32, 160 × 256, 8.0, 20.0, 3000–7FFF, Graphics), CREATE TABLE `phone` ( Company_name TEXT, Hardware_Model_name TEXT PRIMARY KEY, Accreditation_type TEXT, Accreditation_level TEXT, Date TEXT, chip_model TEXT REFERENCES chip_model(Model_name), screen_mode TEXT REFERENCES screen_mode(Graphics_mode) ); Sample rows from `phone`: (Sony Mobile Communications, XPERIA T, XPERIA J, Full, joyn Hot Fixes, Approved (awarded 15.11.12), X5, 1), (LG Electronics, LG-P760, Full, joyn Hot Fixes, Approved (awarded 19.11.12), X51v, 3), (Nokia Corporation, Lumia 920, Lumia 820, Lumia 620, Full, joyn Hot Fixes, Approved (awarded 05.12.12), X5, 4), ",
        "output": "SELECT company_name FROM phone GROUP BY company_name HAVING COUNT(*)  >  1;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the minimum, maximum, and average seating for all tracks. ###filtered_database_schema: CREATE TABLE `race` ( Race_ID INT PRIMARY KEY, Name TEXT, Class TEXT, Date TEXT, Track_ID TEXT REFERENCES track(Track_ID) ); Sample rows from `race`: (1, Rolex 24 At Daytona, DP/GT, January 26 January 27, 1), (2, Gainsco Grand Prix of Miami, DP/GT, March 29, 2), (3, Mexico City 250, DP/GT, April 19, 2), CREATE TABLE `track` ( Track_ID INT PRIMARY KEY, Name TEXT, Location TEXT, Seating REAL, Year_Opened REAL ); Sample rows from `track`: (1, Auto Club Speedway, Fontana, CA, 92000.0, 1997.0), (2, Chicagoland Speedway, Joliet, IL, 75000.0, 2001.0), (3, Darlington Raceway, Darlington, SC, 63000.0, 1950.0), ",
        "output": "SELECT MIN(seating) ,  MAX(seating) ,  AVG(seating) FROM track"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: who has the most publications in syntactic parsing ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the name of the heaviest entrepreneur. ###filtered_database_schema: CREATE TABLE `entrepreneur` ( Entrepreneur_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Company TEXT, Money_Requested REAL, Investor TEXT ); Sample rows from `entrepreneur`: (1, 1, Umbrolly, 150000.0, Duncan Bannatyne), (2, 2, Grails Ltd, 120000.0, Doug Richard), (3, 3, Le Beanock, 54000.0, Rachel Elnaugh), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Height REAL, Weight REAL, Date_of_Birth TEXT ); Sample rows from `people`: (1, Francesco Postiglione, 1.9, 80.0, 1972-04-29), (2, Leonardo Binchi, 1.86, 57.0, 1975-08-27), (3, Fabrizio Buonocore, 1.83, 45.0, 1977-04-28), ",
        "output": "SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.weight DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the longest river that flows through texas ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the total citations of the papers containing keyword \" Natural Language \" ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT SUM(t3.citation_num) FROM publication_keyword as t2 JOIN keyword as t1 ON t2.kid  =  t1.kid JOIN publication as t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the most used instrument? ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the emails of customers who has filed a complaints of the product with the most complaints. ###filtered_database_schema: CREATE TABLE `Staff` ( staff_id INTEGER, gender VARCHAR(1), first_name VARCHAR(80), last_name VARCHAR(80), email_address VARCHAR(255), phone_number VARCHAR(80) ); Sample rows from `Staff`: (114, 0, Ward, Boehm, marcelle.ritchie@example.com, (379)551-0838x146), (115, 1, Lucie, Lowe, ohintz@example.org, 142-311-6503x206), (116, 0, Dagmar, Erdman, wrau@example.com, 345-656-5571), CREATE TABLE `Customers` ( customer_id INTEGER, customer_type_code VARCHAR(20), address_line_1 VARCHAR(80), address_line_2 VARCHAR(80), town_city VARCHAR(80), state VARCHAR(80), email_address VARCHAR(255), phone_number VARCHAR(80) ); Sample rows from `Customers`: (113, Good Credit Rating, 144 Legros Landing, Apt. 551, Maryamport, Kansas, hsteuber@example.org, 06963347450), (114, Good Credit Rating, 039 Jedidiah Estate Suite 537, Apt. 245, Sauerberg, Hawaii, cayla.satterfield@example.net, 470-803-0244), (115, Good Credit Rating, 92189 Gulgowski Ranch Apt. 683, Apt. 828, Tyreekhaven, Tennessee, vida86@example.com, 997.698.4779x882), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, product_category_code VARCHAR(20), date_product_first_available DATETIME, date_product_discontinued DATETIME, product_name VARCHAR(80), product_description VARCHAR(255), product_price DECIMAL(19,4) ); Sample rows from `Products`: (117, 4, Food, 1988-09-29 17:54:50, 1987-12-20 13:46:16, Chocolate, Handmade chocolate, 2.88), (118, 3, Book, 1974-06-25 12:26:47, 1991-08-20 05:22:31, The Great Gatsby, American novel, 35), (119, 8, Hardware, 1994-12-18 15:13:19, 1997-07-02 18:26:16, Keyboard, Designed for games, 109.99), CREATE TABLE `Complaints` ( complaint_id INTEGER, product_id INTEGER REFERENCES Products(product_id), customer_id INTEGER REFERENCES Customers(customer_id), complaint_outcome_code VARCHAR(20), complaint_status_code VARCHAR(20), complaint_type_code VARCHAR(20), date_complaint_raised DATETIME, date_complaint_closed DATETIME, staff_id INTEGER REFERENCES Staff(staff_id) ); Sample rows from `Complaints`: (1, 117, 120, OK, Closed, Product Failure, 2002-07-18 10:59:35, 1976-04-19 11:03:06, 114), (2, 118, 113, OK, New, Product Unusable, 1973-02-10 22:55:56, 2013-09-14 02:59:10, 120), (3, 119, 114, OK, New, Product Unusable, 2006-10-29 07:08:46, 1995-09-11 14:48:46, 115), ",
        "output": "SELECT t1.email_address FROM customers as t1 JOIN complaints as t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT(*) LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name and sex of the candidate with the highest support rate? ###filtered_database_schema: CREATE TABLE `candidate` ( Candidate_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Poll_Source TEXT, Date TEXT, Support_rate REAL, Consider_rate REAL, Oppose_rate REAL, Unsure_rate REAL ); Sample rows from `candidate`: (1, 1, WNBC/Marist Poll, Feb 12–15, 2007, 0.25, 0.3, 0.43, 0.2), (2, 3, WNBC/Marist Poll, Feb 12–15, 2007, 0.17, 0.42, 0.32, 0.9), (3, 4, FOX News/Opinion Dynamics Poll, Feb 13–14, 2007, 0.18, 0.34, 0.44, 0.3), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Sex TEXT, Name TEXT, Date_of_Birth TEXT, Height REAL, Weight REAL ); Sample rows from `people`: (1, M, Hubert Henno, 06.10.1976, 188.0, 83.0), (2, M, Dominique Daquin, 10.11.1972, 197.0, 85.0), (3, F, Stéphane Antiga, 03.02.1976, 200.0, 94.0), ",
        "output": "SELECT t1.name ,  t1.sex FROM people as t1 JOIN candidate as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\". ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_name VARCHAR(40) ); Sample rows from `Customers`: (194, America Jaskolski), (214, Ellsworth Paucek), (256, Mrs. Hanna Willms), CREATE TABLE `Services` ( Service_ID INTEGER, Service_name VARCHAR(40) ); Sample rows from `Services`: (1, New policy application), (4, Close a policy), (6, Change a policy), CREATE TABLE `Available_Policies` ( Policy_ID INTEGER PRIMARY KEY, policy_type_code CHAR(15), Customer_Phone VARCHAR(255) ); Sample rows from `Available_Policies`: (246, Life Insurance, +16(2)5838999222), (257, Property Insurance, 242.763.9214), (300, Property Insurance, 1-416-503-7735x94204), CREATE TABLE `Customers_Policies` ( Customer_ID INTEGER PRIMARY KEY REFERENCES Customers(Customer_ID), Policy_ID INTEGER PRIMARY KEY REFERENCES Available_Policies(Policy_ID), Date_Opened DATE, Date_Closed DATE ); Sample rows from `Customers_Policies`: (214, 257, 2016-11-19, 2018-03-04), (214, 301, 2016-04-12, 2018-02-07), (256, 583, 2016-07-22, 2018-02-20), CREATE TABLE `First_Notification_of_Loss` ( FNOL_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers_Policies(Customer_ID), Policy_ID INTEGER REFERENCES Customers_Policies(Policy_ID), Service_ID INTEGER REFERENCES Services(Service_ID) ); Sample rows from `First_Notification_of_Loss`: (532, 214, 257, 6), (1611, 996, 993, 9), (1722, 996, 879, 6), CREATE TABLE `Claims` ( Claim_ID INTEGER PRIMARY KEY, FNOL_ID INTEGER REFERENCES First_Notification_of_Loss(FNOL_ID), Effective_Date DATE ); Sample rows from `Claims`: (134, 1722, 1973-08-18), (145, 1611, 2014-10-19), (228, 532, 1975-05-07), CREATE TABLE `Settlements` ( Settlement_ID INTEGER PRIMARY KEY, Claim_ID INTEGER REFERENCES Claims(Claim_ID), Effective_Date DATE, Settlement_Amount REAL ); Sample rows from `Settlements`: (161, 717, 2009-11-20, 6451.65), (176, 641, 1971-06-29, 1588.45), (205, 604, 1978-09-09, 9814.39), ",
        "output": "SELECT t1.customer_name FROM customers as t1 JOIN first_notification_of_loss as t2 ON t1.customer_id  =  t2.customer_id JOIN services as t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of markets that have a number of cities lower than 300. ###filtered_database_schema: CREATE TABLE `film` ( Film_ID INT PRIMARY KEY, Title TEXT, Studio TEXT, Director TEXT, Gross_in_dollar INT ); Sample rows from `film`: (1, ET the Extra-Terrestrial, Universal, Steven Spielberg, 435110554), (2, Tootsie, Columbia, Sydney Pollack, 177200000), (3, An Officer and a Gentleman, Paramount / Lorimar, Taylor Hackford, 129795554), CREATE TABLE `market` ( Market_ID INT PRIMARY KEY, Country TEXT, Number_cities INT ); Sample rows from `market`: (1, Japan, 209), (2, China, 540), (3, USA, 700), CREATE TABLE `film_market_estimation` ( Estimation_ID INT PRIMARY KEY, Low_Estimate REAL, High_Estimate REAL, Film_ID INT REFERENCES film(Film_ID), Type TEXT, Market_ID INT REFERENCES market(Market_ID), Year INT ); Sample rows from `film_market_estimation`: (1, 80000.0, 80400.0, 1, Mass suicide murder, 1, 1945), (2, 8000.0, 8000.0, 2, Mass suicide, 2, 1944), (3, 3000.0, 80400.0, 3, Mass human sacrifice, 3, 1487), ",
        "output": "SELECT COUNT(*) FROM market WHERE number_cities  <  300"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average pages per minute color? ###filtered_database_schema: CREATE TABLE `product` ( product_id INT PRIMARY KEY, product TEXT, dimensions TEXT, dpi REAL, pages_per_minute_color REAL, max_page_size TEXT, interface TEXT ); Sample rows from `product`: (1, Fujitsu fi-6130 A4 Series Scanner, 301 x 160 x 158, 600.0, 30.0, A4, USB 2.0), (2, Plustek MobileOffice D28 Corporate, 303 x 94 x 60, 600.0, 28.0, A4, USB 2.0), (3, Xerox Travel Scanner 100, 289 x 51 x 38, 600.0, 4.0, A4, USB 2.0), CREATE TABLE `store` ( Store_ID INT PRIMARY KEY, Store_Name TEXT, Type TEXT, Area_size REAL, Number_of_product_category REAL, Ranking INT ); Sample rows from `store`: (1, Miramichi, City Mall, 179.84, 17811.0, 2), (2, Neguac, Village Store, 26.69, 1678.0, 3), (3, Rogersville, Village Store, 7.23, 1170.0, 1), CREATE TABLE `district` ( District_ID INT PRIMARY KEY, District_name TEXT, Headquartered_City TEXT, City_Population REAL, City_Area REAL ); Sample rows from `district`: (1, Attock District, Attock City, 94620.0, 20.0), (2, Bahawalnagar District, Bahawalnagar City, 134936.0, 13.0), (3, Bahawalpur District, Bahawalpur City, 530438.0, 38.0), CREATE TABLE `store_product` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), Product_ID INT PRIMARY KEY REFERENCES product(Product_ID) ); Sample rows from `store_product`: (1, 1), (1, 2), (1, 3), CREATE TABLE `store_district` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), District_ID INT REFERENCES district(District_ID) ); Sample rows from `store_district`: (1, 15), (2, 15), (3, 11), ",
        "output": "SELECT AVG(pages_per_minute_color) FROM product"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the number of invoices from the US, grouped by state. ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many students are there in each major? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT COUNT(*) ,  major FROM student GROUP BY major"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the clubs that have at least a member with advisor \"1121\". ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Club` ( ClubID INTEGER, ClubName VARCHAR(40), ClubDesc VARCHAR(1024), ClubLocation VARCHAR(40) ); Sample rows from `Club`: (1, Bootup Baltimore, Refurbish computers; teach kids and adults about computer basics., AKW), (2, Hopkins Student Enterprises, Venture capital fund for student business., AKW), (3, Pen and Paper Gaming, Play pen and paper games on campus., HHH), CREATE TABLE `Member_of_club` ( StuID INTEGER REFERENCES Student(StuID), ClubID INTEGER REFERENCES Club(ClubID), Position VARCHAR(40) ); Sample rows from `Member_of_club`: (1001, 1, President), (1007, 4, Vice-President), (1008, 2, CTO), ",
        "output": "SELECT DISTINCT t1.clubname FROM club as t1 JOIN member_of_club as t2 ON t1.clubid  =  t2.clubid JOIN student as t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the total number of catalog contents. ###filtered_database_schema: CREATE TABLE `Attribute_Definitions` ( attribute_id INTEGER, attribute_name VARCHAR(30), attribute_data_type VARCHAR(10) ); Sample rows from `Attribute_Definitions`: (1, Green, Bool), (2, Black, Bool), (3, Yellow, Bool), CREATE TABLE `Catalogs` ( catalog_id INTEGER, catalog_name VARCHAR(50), catalog_publisher VARCHAR(80), date_of_publication DATETIME, date_of_latest_revision DATETIME ); Sample rows from `Catalogs`: (1, Chocolate, Koepp-Rutherford handmade chocolate store, 2013-03-15 05:09:17, 2017-09-26 12:10:36), (2, Coffee Bean, Murray Coffee shop, 2012-04-13 06:37:09, 2017-10-26 01:16:51), (3, Lemonade, Russel-Gislason Lemon shop, 2012-11-27 19:29:22, 2017-12-04 06:48:13), CREATE TABLE `Catalog_Structure` ( catalog_level_number INTEGER, catalog_id INTEGER REFERENCES Catalogs(catalog_id), catalog_level_name VARCHAR(50) ); Sample rows from `Catalog_Structure`: (1, 1, Category), (8, 2, Sub-Category), (9, 8, Product), CREATE TABLE `Catalog_Contents` ( catalog_entry_id INTEGER, catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number), parent_entry_id INTEGER, previous_entry_id INTEGER, next_entry_id INTEGER, catalog_entry_name VARCHAR(80), product_stock_number VARCHAR(50), price_in_dollars DOUBLE, price_in_euros DOUBLE, price_in_pounds DOUBLE, capacity VARCHAR(20), length VARCHAR(20), height VARCHAR(20), width VARCHAR(20) ); Sample rows from `Catalog_Contents`: (1, 1, 5, 9, 7, Cola, 89 cp, 200.78, 159.84, 172.17, 1, 3, 9, 5), (2, 8, 6, 9, 8, Root beer, 37 hq, 687.59, 590.11, 471.78, 8, 6, 5, 6), (3, 8, 6, 6, 1, Cream Soda, 52 ee, 360.5, 202.32, 110.32, 5, 9, 7, 8), CREATE TABLE `Catalog_Contents_Additional_Attributes` ( catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id), catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number), attribute_id INTEGER, attribute_value VARCHAR(255) ); Sample rows from `Catalog_Contents_Additional_Attributes`: (5, 8, 4, 1), (15, 9, 3, 0), (11, 1, 2, 0), ",
        "output": "SELECT COUNT(*) FROM catalog_contents"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the maximum OMIM value in the database? ###filtered_database_schema: CREATE TABLE `medicine` ( id INT PRIMARY KEY, name TEXT, Trade_Name TEXT, FDA_approved TEXT ); Sample rows from `medicine`: (1, Amisulpride, Solian, No), (2, Aripiprazole, Abilify, Yes), (3, Asenapine, Saphris, Yes), CREATE TABLE `enzyme` ( id INT PRIMARY KEY, name TEXT, Location TEXT, Product TEXT, Chromosome TEXT, OMIM INT, Porphyria TEXT ); Sample rows from `enzyme`: (1, ALA synthase, Mitochondrion, δ-Aminolevulinic acid, 3p21.1, 125290, none), (2, ALA dehydratase, Cytosol, Porphobilinogen, 9q34, 125270, ALA-Dehydratase deficiency), (3, PBG deaminase, Cytosol, Hydroxymethyl bilane, 11q23.3, 176000, acute intermittent porphyria), CREATE TABLE `medicine_enzyme_interaction` ( enzyme_id INT PRIMARY KEY REFERENCES enzyme(id), medicine_id INT PRIMARY KEY REFERENCES medicine(id), interaction_type TEXT ); Sample rows from `medicine_enzyme_interaction`: (1, 1, inhibitor), (1, 2, inhibitor), (1, 3, inhibitor), ",
        "output": "SELECT MAX(omim) FROM enzyme"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many employees do we have? ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CV, CV, ), (BK, Book, ), (PR, Paper, ), CREATE TABLE `Ref_Calendar` ( Calendar_Date DATETIME PRIMARY KEY, Day_Number INTEGER ); Sample rows from `Ref_Calendar`: (1972-03-31 09:47:22, 5), (1976-06-15 03:40:06, 7), (1985-05-13 12:19:43, 7), CREATE TABLE `Ref_Locations` ( Location_Code CHAR(15) PRIMARY KEY, Location_Name VARCHAR(255), Location_Description VARCHAR(255) ); Sample rows from `Ref_Locations`: (b, Brazil, ), (c, Canada, ), (e, Edinburgh, ), CREATE TABLE `Roles` ( Role_Code CHAR(15) PRIMARY KEY, Role_Name VARCHAR(255), Role_Description VARCHAR(255) ); Sample rows from `Roles`: (MG, Manager, Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti.), (ED, Editor, Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos.), (PT, Photo, Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt.), CREATE TABLE `All_Documents` ( Document_ID INTEGER, Date_Stored DATETIME REFERENCES Ref_Calendar(Calendar_Date), Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255) ); Sample rows from `All_Documents`: (7, 1976-06-15 03:40:06, CV, Robin CV, None, None), (11, 1986-10-14 17:53:39, CV, Marry CV, None, None), (25, 2008-06-08 12:45:38, BK, One hundred years of solitude, None, None), CREATE TABLE `Employees` ( Employee_ID INTEGER, Role_Code CHAR(15) REFERENCES Roles(Role_Code), Employee_Name VARCHAR(255), Gender_MFU CHAR(1), Date_of_Birth DATETIME, Other_Details VARCHAR(255) ); Sample rows from `Employees`: (25, HR, Leo, , 1973-02-15 17:16:00, None), (30, MG, Ebba, , 1979-09-20 12:50:15, None), (38, ED, Stephanie, 1, 2012-03-30 23:02:28, None), CREATE TABLE `Document_Locations` ( Document_ID INTEGER PRIMARY KEY REFERENCES All_Documents(Document_ID), Location_Code CHAR(15) PRIMARY KEY REFERENCES Ref_Locations(Location_Code), Date_in_Location_From DATETIME PRIMARY KEY REFERENCES Ref_Calendar(Calendar_Date), Date_in_Locaton_To DATETIME REFERENCES Ref_Calendar(Calendar_Date) ); Sample rows from `Document_Locations`: (7, e, 2017-01-06 23:17:22, 2008-06-08 12:45:38), (11, x, 2017-01-06 23:17:22, 2012-07-03 09:48:46), (81, c, 1972-03-31 09:47:22, 1987-11-05 06:11:22), CREATE TABLE `Documents_to_be_Destroyed` ( Document_ID INTEGER REFERENCES All_Documents(Document_ID), Destruction_Authorised_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Destroyed_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Planned_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Actual_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Other_Details VARCHAR(255) ); Sample rows from `Documents_to_be_Destroyed`: (7, 156, 138, 1988-02-01 14:41:52, 2017-01-06 23:17:22, None), (11, 55, 173, 2010-11-26 19:22:50, 1986-10-14 17:53:39, None), (25, 183, 156, 2009-08-18 03:29:08, 1995-01-01 03:52:11, None), ",
        "output": "SELECT COUNT(*) FROM employees"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Give me the best restaurant in san francisco for french food ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the headquarters with at least two companies in the banking industry? ###filtered_database_schema: CREATE TABLE `company` ( Company_ID INT PRIMARY KEY, Rank INT, Company TEXT, Headquarters TEXT, Main_Industry TEXT, Sales_billion REAL, Profits_billion REAL, Assets_billion REAL, Market_Value REAL ); Sample rows from `company`: (1, 1, ExxonMobil, USA, Oil and gas, 433.5, 41.1, 331.1, 407.4), (2, 3, General Electric, USA, Conglomerate, 147.3, 14.2, 717.2, 213.7), (3, 4, Royal Dutch Shell, Netherlands, Oil and gas, 470.2, 30.9, 340.5, 227.6), CREATE TABLE `gas_station` ( Station_ID INT PRIMARY KEY, Open_Year INT, Location TEXT, Manager_Name TEXT, Vice_Manager_Name TEXT, Representative_Name TEXT ); Sample rows from `gas_station`: (1, 1998, Herne Hill, BrianWingrave, Russell Denman, Clive Burr), (2, 1999, Channel Hill, SimonMarloe, Russell Brown, Rob Jefferies ), (3, 2000, Reading North, Simon Cope Derek Marloe, James Colin , Dave Edwards Roger ), CREATE TABLE `station_company` ( Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID), Company_ID INT PRIMARY KEY REFERENCES company(Company_ID), Rank_of_the_Year INT ); Sample rows from `station_company`: (11, 1, 1), (1, 3, 2), (6, 6, 3), ",
        "output": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING COUNT(*)  >=  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the types of video games and how many are in each type? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Video_Games` ( GameID INTEGER, GName VARCHAR(40), GType VARCHAR(40) ); Sample rows from `Video_Games`: (1, RNG Stone, Collectible card game), (2, The Vanishing of Eric Calder, Walking Simulator), (3, Grand Term Assignment, Role-playing game), CREATE TABLE `Plays_Games` ( StuID INTEGER REFERENCES Student(StuID), GameID INTEGER REFERENCES Video_Games(GameID), Hours_Played INTEGER ); Sample rows from `Plays_Games`: (1001, 1, 35), (1001, 2, 15), (1001, 5, 1), CREATE TABLE `SportsInfo` ( StuID INTEGER REFERENCES Student(StuID), SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1) ); Sample rows from `SportsInfo`: (1001, Athletics, 2, 5, N), (1002, Football, 7, 20, Y), (1003, Football, 45, 18, Y), ",
        "output": "SELECT gtype ,  COUNT(*) FROM video_games GROUP BY gtype"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the maximum price and score of wines produced by St. Helena appelation? ###filtered_database_schema: CREATE TABLE `grapes` ( ID INTEGER, Grape TEXT PRIMARY KEY, Color TEXT ); Sample rows from `grapes`: (1, Barbera, Red), (2, Cabernet Franc, Red), (3, Cabernet Sauvingnon, Red), CREATE TABLE `appellations` ( No INTEGER, Appelation TEXT PRIMARY KEY, County TEXT, State TEXT, Area TEXT, isAVA TEXT ); Sample rows from `appellations`: (1, Alexander Valley, Sonoma, California, North Coast, Yes), (2, Amador County, Amador, California, Sierra Foothills, No), (3, Amador-Mendocino-Sonoma Counties, N/A, California, N/A, No), CREATE TABLE `wine` ( No INTEGER, Grape TEXT REFERENCES grapes(Grape), Winery TEXT, Appelation TEXT REFERENCES appellations(Appelation), State TEXT, Name TEXT, Year INTEGER, Price INTEGER, Score INTEGER, Cases INTEGER, Drink TEXT ); Sample rows from `wine`: (1, Zinfandel, Robert Biale, St. Helena, California, Old Kraft Vineyard, 2008, 44, 93, 275, now), (2, Zinfandel, Chiarello Family, Napa Valley, California, Giana, 2008, 35, 93, 480, now), (3, Zinfandel, Robert Biale, Napa Valley, California, Black Chicken, 2008, 40, 91, 2700, 2012), ",
        "output": "SELECT MAX(price) ,  MAX(score) FROM wine WHERE appelation  =  \"St. Helena\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the employee ids and the number of documents destroyed by each employee. ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CV, CV, ), (BK, Book, ), (PR, Paper, ), CREATE TABLE `Ref_Calendar` ( Calendar_Date DATETIME PRIMARY KEY, Day_Number INTEGER ); Sample rows from `Ref_Calendar`: (1972-03-31 09:47:22, 5), (1976-06-15 03:40:06, 7), (1985-05-13 12:19:43, 7), CREATE TABLE `Ref_Locations` ( Location_Code CHAR(15) PRIMARY KEY, Location_Name VARCHAR(255), Location_Description VARCHAR(255) ); Sample rows from `Ref_Locations`: (b, Brazil, ), (c, Canada, ), (e, Edinburgh, ), CREATE TABLE `Roles` ( Role_Code CHAR(15) PRIMARY KEY, Role_Name VARCHAR(255), Role_Description VARCHAR(255) ); Sample rows from `Roles`: (MG, Manager, Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti.), (ED, Editor, Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos.), (PT, Photo, Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt.), CREATE TABLE `All_Documents` ( Document_ID INTEGER, Date_Stored DATETIME REFERENCES Ref_Calendar(Calendar_Date), Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255) ); Sample rows from `All_Documents`: (7, 1976-06-15 03:40:06, CV, Robin CV, None, None), (11, 1986-10-14 17:53:39, CV, Marry CV, None, None), (25, 2008-06-08 12:45:38, BK, One hundred years of solitude, None, None), CREATE TABLE `Employees` ( Employee_ID INTEGER, Role_Code CHAR(15) REFERENCES Roles(Role_Code), Employee_Name VARCHAR(255), Gender_MFU CHAR(1), Date_of_Birth DATETIME, Other_Details VARCHAR(255) ); Sample rows from `Employees`: (25, HR, Leo, , 1973-02-15 17:16:00, None), (30, MG, Ebba, , 1979-09-20 12:50:15, None), (38, ED, Stephanie, 1, 2012-03-30 23:02:28, None), CREATE TABLE `Document_Locations` ( Document_ID INTEGER PRIMARY KEY REFERENCES All_Documents(Document_ID), Location_Code CHAR(15) PRIMARY KEY REFERENCES Ref_Locations(Location_Code), Date_in_Location_From DATETIME PRIMARY KEY REFERENCES Ref_Calendar(Calendar_Date), Date_in_Locaton_To DATETIME REFERENCES Ref_Calendar(Calendar_Date) ); Sample rows from `Document_Locations`: (7, e, 2017-01-06 23:17:22, 2008-06-08 12:45:38), (11, x, 2017-01-06 23:17:22, 2012-07-03 09:48:46), (81, c, 1972-03-31 09:47:22, 1987-11-05 06:11:22), CREATE TABLE `Documents_to_be_Destroyed` ( Document_ID INTEGER REFERENCES All_Documents(Document_ID), Destruction_Authorised_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Destroyed_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Planned_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Actual_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Other_Details VARCHAR(255) ); Sample rows from `Documents_to_be_Destroyed`: (7, 156, 138, 1988-02-01 14:41:52, 2017-01-06 23:17:22, None), (11, 55, 173, 2010-11-26 19:22:50, 1986-10-14 17:53:39, None), (25, 183, 156, 2009-08-18 03:29:08, 1995-01-01 03:52:11, None), ",
        "output": "SELECT destroyed_by_employee_id ,  COUNT(*) FROM documents_to_be_destroyed GROUP BY destroyed_by_employee_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of people in ascending alphabetical order? ###filtered_database_schema: CREATE TABLE `gymnast` ( Gymnast_ID INT PRIMARY KEY REFERENCES people(People_ID), Floor_Exercise_Points REAL, Pommel_Horse_Points REAL, Rings_Points REAL, Vault_Points REAL, Parallel_Bars_Points REAL, Horizontal_Bar_Points REAL, Total_Points REAL ); Sample rows from `gymnast`: (1, 9.725, 9.737, 9.512, 9.575, 9.762, 9.75, 58.061), (2, 9.7, 9.625, 9.625, 9.65, 9.587, 9.737, 57.924), (4, 8.987, 9.75, 9.75, 9.65, 9.787, 9.725, 57.649), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Age REAL, Height REAL, Hometown TEXT ); Sample rows from `people`: (1, Paul Hamm, 24.0, 1.71, Santo Domingo), (2, Lorraine Súarez Carmona, 21.0, 1.75, Bonao), (3, Ashley Pérez Cabrera, 19.0, 1.7, Miami), ",
        "output": "SELECT name FROM people ORDER BY name ASC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the names of gymnasts who did not grow up in Santo Domingo. ###filtered_database_schema: CREATE TABLE `gymnast` ( Gymnast_ID INT PRIMARY KEY REFERENCES people(People_ID), Floor_Exercise_Points REAL, Pommel_Horse_Points REAL, Rings_Points REAL, Vault_Points REAL, Parallel_Bars_Points REAL, Horizontal_Bar_Points REAL, Total_Points REAL ); Sample rows from `gymnast`: (1, 9.725, 9.737, 9.512, 9.575, 9.762, 9.75, 58.061), (2, 9.7, 9.625, 9.625, 9.65, 9.587, 9.737, 57.924), (4, 8.987, 9.75, 9.75, 9.65, 9.787, 9.725, 57.649), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Age REAL, Height REAL, Hometown TEXT ); Sample rows from `people`: (1, Paul Hamm, 24.0, 1.71, Santo Domingo), (2, Lorraine Súarez Carmona, 21.0, 1.75, Bonao), (3, Ashley Pérez Cabrera, 19.0, 1.7, Miami), ",
        "output": "SELECT t2.name FROM gymnast as t1 JOIN people as t2 ON t1.gymnast_id  =  t2.people_id WHERE t2.hometown != \"Santo Domingo\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the first names and offices of all instructors who have taught some course and the course description and the department name. ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT t2.emp_fname ,  t4.prof_office ,  t3.crs_description ,  t5.dept_name FROM class as t1 JOIN employee as t2 ON t1.prof_num  =  t2.emp_num JOIN course as t3 ON t1.crs_code  =  t3.crs_code JOIN professor as t4 ON t2.emp_num  =  t4.emp_num JOIN department as t5 ON t4.dept_code  =  t5.dept_code"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the id and last name of the driver who participated in the most races after 2010? ###filtered_database_schema: CREATE TABLE `circuits` ( circuitId INTEGER, circuitRef TEXT, name TEXT, location TEXT, country TEXT, lat REAL, lng REAL, alt TEXT, url TEXT ); Sample rows from `circuits`: (1, albert_park, Albert Park Grand Prix Circuit, Melbourne, Australia, -37.8497, 144.968, 10, http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit), (2, sepang, Sepang International Circuit, Kuala Lumpur, Malaysia, 2.76083, 101.738, , http://en.wikipedia.org/wiki/Sepang_International_Circuit), (3, bahrain, Bahrain International Circuit, Sakhir, Bahrain, 26.0325, 50.5106, , http://en.wikipedia.org/wiki/Bahrain_International_Circuit), CREATE TABLE `races` ( raceId INTEGER, year INTEGER, round INTEGER, circuitId INTEGER REFERENCES circuits(circuitId), name TEXT, date TEXT, time TEXT, url TEXT ); Sample rows from `races`: (1, 2009, 1, 1, Australian Grand Prix, 2009-03-29, 06:00:00, http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix), (2, 2009, 2, 2, Malaysian Grand Prix, 2009-04-05, 09:00:00, http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix), (3, 2009, 3, 17, Chinese Grand Prix, 2009-04-19, 07:00:00, http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix), CREATE TABLE `drivers` ( driverId INTEGER, driverRef TEXT, number TEXT, code TEXT, forename TEXT, surname TEXT, dob TEXT, nationality TEXT, url TEXT ); Sample rows from `drivers`: (1, hamilton, 44, HAM, Lewis, Hamilton, 07/01/1985, British, http://en.wikipedia.org/wiki/Lewis_Hamilton), (2, heidfeld, , HEI, Nick, Heidfeld, 10/05/1977, German, http://en.wikipedia.org/wiki/Nick_Heidfeld), (3, rosberg, 6, ROS, Nico, Rosberg, 27/06/1985, German, http://en.wikipedia.org/wiki/Nico_Rosberg), CREATE TABLE `status` ( statusId INTEGER, status TEXT ); Sample rows from `status`: (1, Finished), (2, Disqualified), (3, Accident), CREATE TABLE `seasons` ( year INTEGER, url TEXT ); Sample rows from `seasons`: (1950, http://en.wikipedia.org/wiki/1950_Formula_One_season), (1951, http://en.wikipedia.org/wiki/1951_Formula_One_season), (1952, http://en.wikipedia.org/wiki/1952_Formula_One_season), CREATE TABLE `constructors` ( constructorId INTEGER, constructorRef TEXT, name TEXT, nationality TEXT, url TEXT ); Sample rows from `constructors`: (1, mclaren, McLaren, British, http://en.wikipedia.org/wiki/McLaren), (2, bmw_sauber, BMW Sauber, German, http://en.wikipedia.org/wiki/BMW_Sauber), (3, williams, Williams, British, http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering), CREATE TABLE `constructorStandings` ( constructorStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `constructorStandings`: (1, 18, 1, 14.0, 1, 1, 1), (2, 18, 2, 8.0, 3, 3, 0), (3, 18, 3, 9.0, 2, 2, 0), CREATE TABLE `results` ( resultId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, grid INTEGER, position TEXT, positionText TEXT, positionOrder INTEGER, points REAL, laps TEXT, time TEXT, milliseconds TEXT, fastestLap TEXT, rank TEXT, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId INTEGER ); Sample rows from `results`: (1, 18, 1, 1, 22, 1, 1, 1, 1, 10.0, 58, 34:50.6, 5690616, 39, 2, 01:27.5, 218.3, 1), (2, 18, 2, 2, 3, 5, 2, 2, 2, 8.0, 58, 5.478, 5696094, 41, 3, 01:27.7, 217.586, 1), (3, 18, 3, 3, 7, 7, 3, 3, 3, 6.0, 58, 8.163, 5698779, 41, 5, 01:28.1, 216.719, 1), CREATE TABLE `driverStandings` ( driverStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `driverStandings`: (1, 18, 1, 10.0, 1, 1, 1), (2, 18, 2, 8.0, 2, 2, 0), (3, 18, 3, 6.0, 3, 3, 0), CREATE TABLE `constructorResults` ( constructorResultsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, status TEXT ); Sample rows from `constructorResults`: (1, 18, 1, 14.0, NULL), (2, 18, 2, 8.0, NULL), (3, 18, 3, 9.0, NULL), CREATE TABLE `qualifying` ( qualifyId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, position INTEGER, q1 TEXT, q2 TEXT, q3 TEXT ); Sample rows from `qualifying`: (1, 18, 1, 1, 22, 1, 1:26.572, 1:25.187, 1:26.714), (2, 18, 9, 2, 4, 2, 1:26.103, 1:25.315, 1:26.869), (3, 18, 5, 1, 23, 3, 1:25.664, 1:25.452, 1:27.079), CREATE TABLE `pitStops` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), stop INTEGER PRIMARY KEY, lap INTEGER, time TEXT, duration TEXT, milliseconds INTEGER ); CREATE TABLE `lapTimes` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), lap INTEGER PRIMARY KEY, position INTEGER, time TEXT, milliseconds INTEGER ); ",
        "output": "SELECT t1.driverid ,  t1.surname FROM drivers as t1 JOIN results as t2 ON t1.driverid  =  t2.driverid JOIN races as t3 ON t2.raceid = t3.raceid WHERE t3.year > 2010 GROUP BY t1.driverid ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show all train names and times in stations in London in descending order by train time. ###filtered_database_schema: CREATE TABLE `station` ( Station_ID INT PRIMARY KEY, Name TEXT, Annual_entry_exit REAL, Annual_interchanges REAL, Total_Passengers REAL, Location TEXT, Main_Services TEXT, Number_of_Platforms INT ); Sample rows from `station`: (1, London Waterloo, 94.046, 9.489, 103.534, London, South Western Main Line West of England Main Line, 19), (2, London Victoria, 76.231, 9.157, 85.38, London, Brighton Main Line Chatham Main Line, 19), (3, London Bridge, 52.634, 8.742, 61.376, London, South Eastern Main Line Thameslink, 12), CREATE TABLE `train` ( Train_ID INT PRIMARY KEY, Name TEXT, Time TEXT, Service TEXT ); Sample rows from `train`: (1, Ananthapuri Express, 17:15, Daily), (2, Guruvayur Express, 22:10, Daily), (3, Guruvayur Express, 4:49, Daily), CREATE TABLE `train_station` ( Train_ID INT PRIMARY KEY REFERENCES train(Train_ID), Station_ID INT PRIMARY KEY REFERENCES station(Station_ID) ); Sample rows from `train_station`: (1, 1), (2, 1), (3, 1), ",
        "output": "SELECT t3.name ,  t3.time FROM train_station as t1 JOIN station as t2 ON t1.station_id  =  t2.station_id JOIN train as t3 ON t3.train_id  =  t1.train_id WHERE t2.location  =  'London' ORDER BY t3.time DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the full name of the staff who provided a customer with the first name April and the last name Burns with a film rental. ###filtered_database_schema: CREATE TABLE `actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), last_update TIMESTAMP ); Sample rows from `actor`: (1, PENELOPE, GUINESS, 2006-02-15 04:34:33), (2, NICK, WAHLBERG, 2006-02-15 04:34:33), (3, ED, CHASE, 2006-02-15 04:34:33), CREATE TABLE `address` ( address_id SMALLINT UNSIGNED PRIMARY KEY, address VARCHAR(50), address2 VARCHAR(50), district VARCHAR(20), city_id SMALLINT UNSIGNED REFERENCES city(city_id), postal_code VARCHAR(10), phone VARCHAR(20), last_update TIMESTAMP ); Sample rows from `address`: (1, 47 MySakila Drive, None, Alberta, 300, , , 2006-02-15 04:45:30), (2, 28 MySQL Boulevard, None, QLD, 576, , , 2006-02-15 04:45:30), (3, 23 Workhaven Lane, None, Alberta, 300, , 14033335568, 2006-02-15 04:45:30), CREATE TABLE `category` ( category_id TINYINT UNSIGNED PRIMARY KEY, name VARCHAR(25), last_update TIMESTAMP ); Sample rows from `category`: (1, Action, 2006-02-15 04:46:27), (2, Animation, 2006-02-15 04:46:27), (3, Children, 2006-02-15 04:46:27), CREATE TABLE `city` ( city_id SMALLINT UNSIGNED PRIMARY KEY, city VARCHAR(50), country_id SMALLINT UNSIGNED REFERENCES country(country_id), last_update TIMESTAMP ); Sample rows from `city`: (1, A Corua (La Corua), 87, 2006-02-15 04:45:25), (2, Abha, 82, 2006-02-15 04:45:25), (3, Abu Dhabi, 101, 2006-02-15 04:45:25), CREATE TABLE `country` ( country_id SMALLINT UNSIGNED PRIMARY KEY, country VARCHAR(50), last_update TIMESTAMP ); Sample rows from `country`: (1, Afghanistan, 2006-02-15 04:44:00), (2, Algeria, 2006-02-15 04:44:00), (3, American Samoa, 2006-02-15 04:44:00), CREATE TABLE `customer` ( customer_id SMALLINT UNSIGNED PRIMARY KEY, store_id TINYINT UNSIGNED REFERENCES store(store_id), first_name VARCHAR(45), last_name VARCHAR(45), email VARCHAR(50), address_id SMALLINT UNSIGNED REFERENCES address(address_id), active BOOLEAN, create_date DATETIME, last_update TIMESTAMP ); Sample rows from `customer`: (1, 1, MARY, SMITH, MARY.SMITH@sakilacustomer.org, 5, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (2, 1, PATRICIA, JOHNSON, PATRICIA.JOHNSON@sakilacustomer.org, 6, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (3, 1, LINDA, WILLIAMS, LINDA.WILLIAMS@sakilacustomer.org, 7, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), CREATE TABLE `film` ( film_id SMALLINT UNSIGNED PRIMARY KEY, title VARCHAR(255), description TEXT, release_year YEAR, language_id TINYINT UNSIGNED REFERENCES language(language_id), original_language_id TINYINT UNSIGNED REFERENCES language(language_id), rental_duration TINYINT UNSIGNED, rental_rate DECIMAL(4,2), length SMALLINT UNSIGNED, replacement_cost DECIMAL(5,2), rating , special_features , last_update TIMESTAMP ); Sample rows from `film`: (1, ACADEMY DINOSAUR, A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies, 2006, 1, None, 6, 0.99, 86, 20.99, PG, Deleted Scenes,Behind the Scenes, 2006-02-15 05:03:42), (2, ACE GOLDFINGER, A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China, 2006, 1, None, 3, 4.99, 48, 12.99, G, Trailers,Deleted Scenes, 2006-02-15 05:03:42), (3, ADAPTATION HOLES, A Astounding Reflection of a Lumberjack And a Car who must Sink a Lumberjack in A Baloon Factory, 2006, 1, None, 7, 2.99, 50, 18.99, NC-17, Trailers,Deleted Scenes, 2006-02-15 05:03:42), CREATE TABLE `film_actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES actor(actor_id), film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), last_update TIMESTAMP ); Sample rows from `film_actor`: (1, 1, 2006-02-15 05:05:03), (1, 23, 2006-02-15 05:05:03), (1, 25, 2006-02-15 05:05:03), CREATE TABLE `film_category` ( film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), category_id TINYINT UNSIGNED PRIMARY KEY REFERENCES category(category_id), last_update TIMESTAMP ); Sample rows from `film_category`: (1, 6, 2006-02-15 05:07:09), (2, 11, 2006-02-15 05:07:09), (3, 6, 2006-02-15 05:07:09), CREATE TABLE `film_text` ( film_id SMALLINT PRIMARY KEY, title VARCHAR(255), description TEXT ); CREATE TABLE `inventory` ( inventory_id MEDIUMINT UNSIGNED PRIMARY KEY, film_id SMALLINT UNSIGNED REFERENCES film(film_id), store_id TINYINT UNSIGNED REFERENCES store(store_id), last_update TIMESTAMP ); Sample rows from `inventory`: (1, 1, 1, 2006-02-15 05:09:17), (2, 1, 1, 2006-02-15 05:09:17), (3, 1, 1, 2006-02-15 05:09:17), CREATE TABLE `language` ( language_id TINYINT UNSIGNED PRIMARY KEY, name CHAR(20), last_update TIMESTAMP ); CREATE TABLE `payment` ( payment_id SMALLINT UNSIGNED PRIMARY KEY, customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), rental_id INT REFERENCES rental(rental_id), amount DECIMAL(5,2), payment_date DATETIME, last_update TIMESTAMP ); Sample rows from `payment`: (1, 1, 1, 76, 2.99, 2005-05-25 11:30:37, 2006-02-15 22:12:30), (2, 1, 1, 573, 0.99, 2005-05-28 10:35:23, 2006-02-15 22:12:30), (3, 1, 1, 1185, 5.99, 2005-06-15 00:54:12, 2006-02-15 22:12:30), CREATE TABLE `rental` ( rental_id INT PRIMARY KEY, rental_date DATETIME, inventory_id MEDIUMINT UNSIGNED REFERENCES inventory(inventory_id), customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), return_date DATETIME, staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), last_update TIMESTAMP ); Sample rows from `rental`: (1, 2005-05-24 22:53:30, 367, 130, 2005-05-26 22:04:30, 1, 2006-02-15 21:30:53), (2, 2005-05-24 22:54:33, 1525, 459, 2005-05-28 19:40:33, 1, 2006-02-15 21:30:53), (3, 2005-05-24 23:03:39, 1711, 408, 2005-06-01 22:12:39, 1, 2006-02-15 21:30:53), CREATE TABLE `staff` ( staff_id TINYINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), address_id SMALLINT UNSIGNED REFERENCES address(address_id), picture BLOB, email VARCHAR(50), store_id TINYINT UNSIGNED, active BOOLEAN, username VARCHAR(16), password VARCHAR(40), last_update TIMESTAMP ); CREATE TABLE `store` ( store_id TINYINT UNSIGNED PRIMARY KEY, manager_staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), address_id SMALLINT UNSIGNED REFERENCES address(address_id), last_update TIMESTAMP ); ",
        "output": "SELECT DISTINCT t1.first_name ,  t1.last_name FROM staff as t1 JOIN rental as t2 ON t1.staff_id  =  t2.staff_id JOIN customer as t3 ON t2.customer_id  =  t3.customer_id WHERE t3.first_name  =  'APRIL' AND t3.last_name  =  'BURNS'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: where are some restaurants good for french food in the yosemite and mono lake area ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the locations of parties with hosts older than 50. ###filtered_database_schema: CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Party_Theme TEXT, Location TEXT, First_year TEXT, Last_year TEXT, Number_of_hosts INT ); Sample rows from `party`: (1, Spring, Hemkade 48 Zaandam, 2000, 2001, 5), (2, Club Q-BASE, Hemkade 48 Zaandam, 2002, 2002, 23), (3, Hardcore Resurrection, Various locations, 2000, 2003, 4), CREATE TABLE `host` ( Host_ID INT PRIMARY KEY, Name TEXT, Nationality TEXT, Age TEXT ); Sample rows from `host`: (1, Austin Daye, United States, 43), (2, Lloyd Daniels, United States, 37), (3, Kornel David, Hungary, 31), CREATE TABLE `party_host` ( Party_ID INT PRIMARY KEY REFERENCES party(Party_ID), Host_ID INT PRIMARY KEY REFERENCES host(Host_ID), Is_Main_in_Charge bool ); Sample rows from `party_host`: (1, 1, T), (8, 7, T), (6, 10, F), ",
        "output": "SELECT t3.location FROM party_host as t1 JOIN host as t2 ON t1.host_id  =  t2.host_id JOIN party as t3 ON t1.party_id  =  t3.party_id WHERE t2.age  >  50"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show ids, customer ids, names for all accounts. ###filtered_database_schema: CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 6, 338, Regular), (2, 14, 562, VIP), (3, 9, 162, VIP), CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(20), customer_last_name VARCHAR(20), customer_address VARCHAR(255), customer_phone VARCHAR(255), customer_email VARCHAR(255), other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Aniyah, Feest, 55975 Theodore Estates Lake Brody, VT 57078, (673)872-5338, fahey.dorian@example.com, None), (2, Susie, Wiza, 6478 Moen Isle Suite 910 Schimmelmouth, VT 96364-4898, 679-845-8645x94312, idickinson@example.com, None), (3, Marcel, Brekke, 1965 Abernathy Plains Port Lilla, LA 44867, 1-511-656-6664, nichole.rodriguez@example.com, None), CREATE TABLE `Customers_Cards` ( card_id INTEGER, customer_id INTEGER, card_type_code VARCHAR(15), card_number VARCHAR(80), date_valid_from DATETIME, date_valid_to DATETIME, other_card_details VARCHAR(255) ); Sample rows from `Customers_Cards`: (1, 14, Credit, 4560596484842, 2011-04-17 09:05:28, 2018-03-07 17:06:19, 5567915676420343), (2, 9, Credit, 4859448397570735, 2012-05-22 02:05:41, 2018-02-25 15:43:32, 4539333582760), (3, 6, Debit, 348237249146948, 2014-08-01 14:26:45, 2018-03-24 15:29:00, 4916210554814), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, previous_transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), card_id INTEGER REFERENCES Customers_Cards(card_id), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DOUBLE, transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 925, 15, 1, Payment, 2018-03-24 06:41:41, 1701.23, None, None), (2, 494, 3, 2, Refund, 2018-03-24 12:08:55, 1931.76, None, None), (3, 642, 4, 3, Payment, 2018-03-24 09:08:27, 486.56, None, None), ",
        "output": "SELECT account_id ,  customer_id ,  account_name FROM accounts"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the distinct director of all films. ###filtered_database_schema: CREATE TABLE `film` ( Film_ID INT PRIMARY KEY, Title TEXT, Studio TEXT, Director TEXT, Gross_in_dollar INT ); Sample rows from `film`: (1, ET the Extra-Terrestrial, Universal, Steven Spielberg, 435110554), (2, Tootsie, Columbia, Sydney Pollack, 177200000), (3, An Officer and a Gentleman, Paramount / Lorimar, Taylor Hackford, 129795554), CREATE TABLE `market` ( Market_ID INT PRIMARY KEY, Country TEXT, Number_cities INT ); Sample rows from `market`: (1, Japan, 209), (2, China, 540), (3, USA, 700), CREATE TABLE `film_market_estimation` ( Estimation_ID INT PRIMARY KEY, Low_Estimate REAL, High_Estimate REAL, Film_ID INT REFERENCES film(Film_ID), Type TEXT, Market_ID INT REFERENCES market(Market_ID), Year INT ); Sample rows from `film_market_estimation`: (1, 80000.0, 80400.0, 1, Mass suicide murder, 1, 1945), (2, 8000.0, 8000.0, 2, Mass suicide, 2, 1944), (3, 3000.0, 80400.0, 3, Mass human sacrifice, 3, 1487), ",
        "output": "SELECT DISTINCT director FROM film"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all aircrafts that can cover more distances than average? ###filtered_database_schema: CREATE TABLE `flight` ( flno number(4,0) PRIMARY KEY, origin varchar2(20), destination varchar2(20), distance number(6,0), departure_date date, arrival_date date, price number(7,2), aid number(9,0) REFERENCES aircraft(aid) ); Sample rows from `flight`: (99, Los Angeles, Washington D.C., 2308, 04/12/2005 09:30, 04/12/2005 09:40, 235.98, 1), (13, Los Angeles, Chicago, 1749, 04/12/2005 08:45, 04/12/2005 08:45, 220.98, 3), (346, Los Angeles, Dallas, 1251, 04/12/2005 11:50, 04/12/2005 07:05, 182, 2), CREATE TABLE `aircraft` ( aid number(9,0) PRIMARY KEY, name varchar2(30), distance number(6,0) ); Sample rows from `aircraft`: (1, Boeing 747-400, 8430), (2, Boeing 737-800, 3383), (3, Airbus A340-300, 7120), CREATE TABLE `employee` ( eid number(9,0) PRIMARY KEY, name varchar2(30), salary number(10,2) ); Sample rows from `employee`: (242518965, James Smith, 120433), (141582651, Mary Johnson, 178345), (11564812, John Williams, 153972), CREATE TABLE `certificate` ( eid number(9,0) PRIMARY KEY REFERENCES employee(eid), aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid) ); Sample rows from `certificate`: (11564812, 2), (11564812, 10), (90873519, 6), ",
        "output": "SELECT name FROM aircraft WHERE distance  >  (SELECT AVG(distance) FROM aircraft)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the document type code with fewer than 3 documents. ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (BK, Book, excellent), (CV, CV, excellent), (PT, Presentation, very good), CREATE TABLE `Ref_Budget_Codes` ( Budget_Type_Code CHAR(15) PRIMARY KEY, Budget_Type_Description VARCHAR(255) ); Sample rows from `Ref_Budget_Codes`: (GV, Government), (ORG, Organisation), (SF, Self founded), CREATE TABLE `Projects` ( Project_ID INTEGER, Project_Details VARCHAR(255) ); Sample rows from `Projects`: (30, Society Research project), (35, Internet of Things project), (105, Graph Database project), CREATE TABLE `Documents` ( Document_ID INTEGER, Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Project_ID INTEGER REFERENCES Projects(Project_ID), Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Documents`: (29, CV, 30, 2004-08-28 06:59:19, Review on UK files, None, None), (42, BK, 105, 2012-12-27 19:09:18, Review on Canadian files, None, None), (57, CV, 195, 1980-10-22 14:17:11, Review on French files, None, None), CREATE TABLE `Statements` ( Statement_ID INTEGER REFERENCES Documents(Document_ID), Statement_Details VARCHAR(255) ); Sample rows from `Statements`: (57, Open Project), (192, Private Project), CREATE TABLE `Documents_with_Expenses` ( Document_ID INTEGER REFERENCES Documents(Document_ID), Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code), Document_Details VARCHAR(255) ); Sample rows from `Documents_with_Expenses`: (57, GV, government), (192, GV, government), (226, GV, government), CREATE TABLE `Accounts` ( Account_ID INTEGER, Statement_ID INTEGER REFERENCES Statements(Statement_ID), Account_Details VARCHAR(255) ); Sample rows from `Accounts`: (7, 57, 495.063), (61, 57, 930.14), (98, 57, 6035.84), ",
        "output": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING COUNT(*)  <  3"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the order date of each booking? ###filtered_database_schema: CREATE TABLE `Ref_Payment_Methods` ( payment_method_code CHAR(10) PRIMARY KEY, payment_method_description VARCHAR(80) ); Sample rows from `Ref_Payment_Methods`: (American E, credit), (MasterCard, debit), (Visa, Visa), CREATE TABLE `Ref_Service_Types` ( Service_Type_Code CHAR(15) PRIMARY KEY, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255) ); Sample rows from `Ref_Service_Types`: (1, 1, provide photo service), (2, 1, provide dinning service), (3, 1, provide filming service), CREATE TABLE `Addresses` ( Address_ID VARCHAR(100) PRIMARY KEY, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Addresses`: (110, 4753 Dach Highway, Suite 846, Feliciaberg, Florida, None), (124, 391 Vandervort Fall Apt. 446, Apt. 107, West Sherwoodstad, Indiana, None), (148, 809 Izabella Islands, Suite 271, Schadenville, Ohio, None), CREATE TABLE `Products` ( Product_ID VARCHAR(100) PRIMARY KEY, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Products`: (11, photo, 4448536, None, None), (154, film, 2302, None, None), (156, film, 17622723, None, None), CREATE TABLE `Marketing_Regions` ( Marketing_Region_Code CHAR(15) PRIMARY KEY, Marketing_Region_Name VARCHAR(255), Marketing_Region_Descriptrion VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Marketing_Regions`: (CA, Canada, Our target market, None), (CN, China, Our largest market, None), (ES, Spain, , None), CREATE TABLE `Clients` ( Client_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Clients`: (423, 201, branson94@example.net, Clifford, (042)912-3404x5135, VIP), (426, 383, alba04@example.com, Bettye, (604)849-0214, None), (478, 15, westley30@example.net, Reinhold, 1-048-214-4640x64380, None), CREATE TABLE `Drama_Workshop_Groups` ( Workshop_Group_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Currency_Code CHAR(15), Marketing_Region_Code CHAR(15), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Drama_Workshop_Groups`: (136, 383, EU, FR, Amely Cafe, 122-084-8029, amely.ruecker@example.com, None), (140, 180, EU, DE, Veda Film, 793-966-9311x5303, breitenberg.veda@example.com, None), (176, 286, EU, RU, Queen Art, 492-463-5967, quigley.queen@example.org, Good), CREATE TABLE `Performers` ( Performer_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Performers`: (153, 124, Shawna, 664.495.1939, krogahn@example.com, None), (211, 124, Ashley, 893-536-8857, preston45@example.net, None), (313, 39, Oren, 1-952-052-6685x28082, ferry.carolina@example.net, None), CREATE TABLE `Customers` ( Customer_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Customers`: (240, 286, Harold, 624-096-7791, jerde.harmon@example.com, None), (267, 98, Federico, 914-915-7483, johnson27@example.com, None), (304, 369, Samson, 1-463-121-4086x655, dalton75@example.com, None), CREATE TABLE `Stores` ( Store_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Marketing_Region_Code CHAR(15) REFERENCES Marketing_Regions(Marketing_Region_Code), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Stores`: (150, 286, IN, FJA Filming, +65(1)3590790358, fjacobson@example.com, None), (229, 266, CA, Rob Dinning, 1-327-185-9368, rborer@example.org, 5 stars), (231, 230, ES, Adan Dinning, 896-931-9633x869, adan93@example.com, None), CREATE TABLE `Bookings` ( Booking_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Clients(Client_ID), Workshop_Group_ID VARCHAR(100) REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Status_Code CHAR(15), Store_ID INTEGER, Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Bookings`: (1, 938, 140, good, 8, 2016-12-12 10:43:01, 2013-03-10 18:47:05, 1997-11-21 10:07:40, None), (2, 868, 838, stop, 7, 1976-08-20 00:33:08, 2009-07-09 09:18:38, 1976-01-08 07:19:23, None), (3, 735, 176, good, 9, 1975-11-23 06:28:47, 1989-01-05 19:24:45, 1990-03-16 19:38:47, None), CREATE TABLE `Performers_in_Bookings` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Performer_ID INTEGER PRIMARY KEY REFERENCES Performers(Performer_ID) ); Sample rows from `Performers_in_Bookings`: (1, 153), (1, 341), (2, 466), CREATE TABLE `Customer_Orders` ( Order_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Store_ID INTEGER REFERENCES Stores(Store_ID), Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 516, 231, 1994-08-03 12:34:58, 1977-03-11 03:58:19, 1992-07-21 22:11:11, None), (2, 418, 229, 2014-07-10 10:56:01, 1996-08-26 19:19:59, 1998-08-22 17:57:32, None), (3, 712, 229, 1981-06-20 16:29:43, 1980-12-19 05:49:35, 2011-04-13 07:15:35, None), CREATE TABLE `Order_Items` ( Order_Item_ID INTEGER, Order_ID INTEGER REFERENCES Customer_Orders(Order_ID), Product_ID INTEGER REFERENCES Products(Product_ID), Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 3, 233, 1, None), (2, 15, 300, 2, None), (3, 12, 300, 1, None), CREATE TABLE `Invoices` ( Invoice_ID INTEGER, Order_ID INTEGER REFERENCES Bookings(Booking_ID) REFERENCES Customer_Orders(Order_ID), payment_method_code CHAR(15) REFERENCES Ref_Payment_Methods(payment_method_code), Product_ID INTEGER, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER ); Sample rows from `Invoices`: (128, 14, MasterCard, 4, 2, None, 1), (162, 13, MasterCard, 9, 2, None, 9), (164, 7, Visa, 7, 2, None, 1), CREATE TABLE `Services` ( Service_ID INTEGER PRIMARY KEY, Service_Type_Code CHAR(15) REFERENCES Ref_Service_Types(Service_Type_Code), Workshop_Group_ID INTEGER REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Services`: (191, 1, 415, None, film, 58932775.8822, None), (219, 2, 838, None, film, 2704.4719, None), (220, 1, 708, None, dinning, 6888.8306, None), CREATE TABLE `Bookings_Services` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Product_ID INTEGER PRIMARY KEY REFERENCES Services(Service_ID) ); Sample rows from `Bookings_Services`: (1, 396), (1, 779), (4, 191), CREATE TABLE `Invoice_Items` ( Invoice_Item_ID INTEGER, Invoice_ID INTEGER REFERENCES Invoices(Invoice_ID), Order_ID INTEGER REFERENCES Bookings_Services(Order_ID), Order_Item_ID INTEGER REFERENCES Order_Items(Order_Item_ID), Product_ID INTEGER REFERENCES Bookings_Services(Product_ID), Order_Quantity INTEGER, Other_Item_Details VARCHAR(255) ); Sample rows from `Invoice_Items`: (1, 128, 1, 5, 396, 2, None), (2, 162, 4, 6, 191, 6, Good quality), ",
        "output": "SELECT order_date FROM bookings"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the first names of all the students? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Club` ( ClubID INTEGER, ClubName VARCHAR(40), ClubDesc VARCHAR(1024), ClubLocation VARCHAR(40) ); Sample rows from `Club`: (1, Bootup Baltimore, Refurbish computers; teach kids and adults about computer basics., AKW), (2, Hopkins Student Enterprises, Venture capital fund for student business., AKW), (3, Pen and Paper Gaming, Play pen and paper games on campus., HHH), CREATE TABLE `Member_of_club` ( StuID INTEGER REFERENCES Student(StuID), ClubID INTEGER REFERENCES Club(ClubID), Position VARCHAR(40) ); Sample rows from `Member_of_club`: (1001, 1, President), (1007, 4, Vice-President), (1008, 2, CTO), ",
        "output": "SELECT DISTINCT fname FROM student"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which authors have first name \"Amal\"? List their last names. ###filtered_database_schema: CREATE TABLE `Inst` ( instID INTEGER, name TEXT, country TEXT ); Sample rows from `Inst`: (1000, University of Oxford, UK), (1010, Northeastern University, USA), (1020, Indiana University, USA), CREATE TABLE `Authors` ( authID INTEGER, lname TEXT, fname TEXT ); Sample rows from `Authors`: (50, Gibbons, Jeremy), (51, Hinze, Ralf), (52, James, Daniel W. H.), CREATE TABLE `Papers` ( paperID INTEGER, title TEXT ); Sample rows from `Papers`: (200, Just do it: Simple Monadic Equational Reasoning), (201, Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory), (202, Functional Pearl: Modular Rollback through Control Logging), CREATE TABLE `Authorship` ( authID INTEGER PRIMARY KEY REFERENCES Authors(authID), instID INTEGER PRIMARY KEY REFERENCES Inst(instID), paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID), authOrder INTEGER ); Sample rows from `Authorship`: (50, 1000, 200, 1), (51, 1000, 200, 2), (51, 1000, 201, 1), ",
        "output": "SELECT lname FROM authors WHERE fname  =  \"Amal\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: how many people in boulder ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT population FROM city WHERE city_name  =  \"boulder\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the album names, ids and the number of tracks for each album. ###filtered_database_schema: CREATE TABLE `Album` ( AlbumId INTEGER, Title varchar(160), ArtistId INTEGER PRIMARY KEY REFERENCES Artist(ArtistId) ); Sample rows from `Album`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `Artist` ( ArtistId INTEGER, Name varchar(120) ); Sample rows from `Artist`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `Customer` ( CustomerId INTEGER, FirstName varchar(40), LastName varchar(20), Company varchar(80), Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60), SupportRepId INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId) ); Sample rows from `Customer`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `Employee` ( EmployeeId INTEGER, LastName varchar(20), FirstName varchar(20), Title varchar(30), ReportsTo INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId), BirthDate datetime, HireDate datetime, Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60) ); Sample rows from `Employee`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `Genre` ( GenreId INTEGER, Name varchar(120) ); Sample rows from `Genre`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `Invoice` ( InvoiceId INTEGER, CustomerId INTEGER PRIMARY KEY REFERENCES Customer(CustomerId), InvoiceDate datetime, BillingAddress varchar(70), BillingCity varchar(40), BillingState varchar(40), BillingCountry varchar(40), BillingPostalCode varchar(10), Total decimal(10,2) ); Sample rows from `Invoice`: (1, 2, 2009-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2009-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2009-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `InvoiceLine` ( InvoiceLineId INTEGER, InvoiceId INTEGER PRIMARY KEY REFERENCES Invoice(InvoiceId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId), UnitPrice decimal(10,2), Quantity INTEGER ); Sample rows from `InvoiceLine`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `MediaType` ( MediaTypeId INTEGER, Name varchar(120) ); Sample rows from `MediaType`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `Playlist` ( PlaylistId INTEGER, Name varchar(120) ); Sample rows from `Playlist`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `PlaylistTrack` ( PlaylistId INTEGER PRIMARY KEY REFERENCES Playlist(PlaylistId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId) ); Sample rows from `PlaylistTrack`: (1, 1), (8, 1), (17, 1), CREATE TABLE `Track` ( TrackId INTEGER, Name varchar(200), AlbumId INTEGER PRIMARY KEY REFERENCES Album(AlbumId), MediaTypeId INTEGER PRIMARY KEY REFERENCES MediaType(MediaTypeId), GenreId INTEGER PRIMARY KEY REFERENCES Genre(GenreId), Composer varchar(220), Milliseconds INTEGER, Bytes INTEGER, UnitPrice decimal(10,2) ); Sample rows from `Track`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), ",
        "output": "SELECT t1.title ,  t2.albumid ,  COUNT(*) FROM album as t1 JOIN track as t2 ON t1.albumid  =  t2.albumid GROUP BY t2.albumid"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show different parties of people along with the number of people in each party. ###filtered_database_schema: CREATE TABLE `people` ( People_ID INT PRIMARY KEY, District TEXT, Name TEXT, Party TEXT, Age INT ); Sample rows from `people`: (1, New York 1, Luther C. Carter, Republican, 35), (2, New York 2, James Humphrey, Republican, 38), (3, New York 3, Daniel Sickles, Democratic, 46), CREATE TABLE `debate` ( Debate_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Num_of_Audience INT ); Sample rows from `debate`: (1, October 21, 2011, Manama , Bahrain, 342), (2, December 17, 2014, Doha , Qatar, 134), (3, August 3, 2015, Manama , Bahrain, 90), CREATE TABLE `debate_people` ( Debate_ID INT PRIMARY KEY REFERENCES debate(Debate_ID), Affirmative INT PRIMARY KEY REFERENCES people(People_ID), Negative INT PRIMARY KEY REFERENCES people(People_ID), If_Affirmative_Win bool ); Sample rows from `debate_people`: (1, 1, 10, F), (5, 2, 8, F), (3, 4, 7, T), ",
        "output": "SELECT party ,  COUNT(*) FROM people GROUP BY party"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Give me all the Moroccan restaurant in Texas ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.state  =  \"Texas\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all clubs? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Club` ( ClubID INTEGER, ClubName VARCHAR(40), ClubDesc VARCHAR(1024), ClubLocation VARCHAR(40) ); Sample rows from `Club`: (1, Bootup Baltimore, Refurbish computers; teach kids and adults about computer basics., AKW), (2, Hopkins Student Enterprises, Venture capital fund for student business., AKW), (3, Pen and Paper Gaming, Play pen and paper games on campus., HHH), CREATE TABLE `Member_of_club` ( StuID INTEGER REFERENCES Student(StuID), ClubID INTEGER REFERENCES Club(ClubID), Position VARCHAR(40) ); Sample rows from `Member_of_club`: (1001, 1, President), (1007, 4, Vice-President), (1008, 2, CTO), ",
        "output": "SELECT clubname FROM club"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many papers used ImageNet dataset ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(DISTINCT t3.paperid) FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average amount of items ordered in each order? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_content VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), other_address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 9443 Boyle Route Suite 857, Lucasville, 416, Colorado, USA, None), (2, 1969 Jabari Port Suite 393, New Sabryna, 721, SouthCarolina, USA, None), (3, 295 Hackett Curve, Reingertown, 255, NewJersey, USA, None), CREATE TABLE `Products` ( product_id INTEGER, product_details VARCHAR(255) ); Sample rows from `Products`: (1, Americano), (2, Dove Chocolate), (3, Latte), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method VARCHAR(15), customer_name VARCHAR(80), date_became_customer DATETIME, other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Cash, Dr. Julia Wuckert MD, 2018-03-01 23:20:10, None), (2, Cheque, Tillman Ernser, 2018-02-28 11:37:44, None), (3, Credit Card, Rodrick Heaney, 2018-03-09 17:41:58, None), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_address_from DATETIME, address_type VARCHAR(15), date_address_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 11, 1985-03-29 20:31:43, Billing, 1993-02-17 17:55:18), (13, 11, 2010-08-25 04:24:35, Billing, 1972-02-17 22:23:38), (2, 14, 2010-12-26 08:52:50, Residential, 1979-07-16 18:22:39), CREATE TABLE `Customer_Contact_Channels` ( customer_id INTEGER REFERENCES Customers(customer_id), channel_code VARCHAR(15), active_from_date DATETIME, active_to_date DATETIME, contact_number VARCHAR(50) ); Sample rows from `Customer_Contact_Channels`: (9, Email, 2017-12-07 18:18:15, 2018-03-23 13:37:14, 940.035.6435x0225), (2, Email, 2017-04-07 04:51:41, 2018-03-23 01:30:52, 189.449.8326x7607), (9, Email, 2017-05-25 16:08:45, 2018-03-13 07:32:25, 958-653-2640), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(15), order_date DATETIME, order_details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 15, Cancelled, 2018-03-21 11:20:46, None), (2, 3, Cancelled, 2018-03-05 06:35:33, None), (3, 5, Delivered, 2018-03-04 07:16:22, Second time), CREATE TABLE `Order_Items` ( order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), order_quantity VARCHAR(15) ); Sample rows from `Order_Items`: (14, 2, 5), (5, 2, 9), (14, 3, 2), ",
        "output": "SELECT AVG(order_quantity) FROM order_items"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which customer have the most policies? Give me the customer details. ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_Details VARCHAR(255) ); Sample rows from `Customers`: (252, America Jaskolski), (263, Ellsworth Paucek), (334, Mrs. Hanna Willms), CREATE TABLE `Staff` ( Staff_ID INTEGER, Staff_Details VARCHAR(255) ); Sample rows from `Staff`: (406, Clifton), (427, Cathryn), (510, Kaci), CREATE TABLE `Policies` ( Policy_ID INTEGER, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Policy_Type_Code CHAR(15), Start_Date DATETIME, End_Date DATETIME ); Sample rows from `Policies`: (125, 808, Deputy, 2018-02-10 08:56:30, 2018-03-18 09:17:26), (151, 380, Jurisdiction, 2017-12-20 06:02:31, 2017-09-16 22:04:13), (287, 334, Jurisdiction, 2017-03-16 18:16:52, 2017-11-24 06:36:51), CREATE TABLE `Claim_Headers` ( Claim_Header_ID INTEGER, Claim_Status_Code CHAR(15), Claim_Type_Code CHAR(15), Policy_ID INTEGER REFERENCES Policies(Policy_ID), Date_of_Claim DATETIME, Date_of_Settlement DATETIME, Amount_Claimed DECIMAL(20,4), Amount_Piad DECIMAL(20,4) ); Sample rows from `Claim_Headers`: (15, Settled, Handphone Subsidy, 518, 2016-05-31 06:07:11, 2018-02-23 03:46:38, 349.15, 582.03), (24, Disputed, Child Birth, 518, 2016-12-30 21:43:21, 2017-10-08 21:43:14, 318.16, 309.2), (27, Disputed, Overtime Meal Subsidy, 518, 2017-05-01 13:34:43, 2017-11-16 04:06:05, 362.71, 132.97), CREATE TABLE `Claims_Documents` ( Claim_ID INTEGER PRIMARY KEY REFERENCES Claim_Headers(Claim_Header_ID), Document_Type_Code CHAR(15) PRIMARY KEY, Created_by_Staff_ID INTEGER REFERENCES Staff(Staff_ID), Created_Date INTEGER ); Sample rows from `Claims_Documents`: (24, Document, 718, 8), (27, Document, 986, 6), (27, Medical, 427, 8), CREATE TABLE `Claims_Processing_Stages` ( Claim_Stage_ID INTEGER, Next_Claim_Stage_ID INTEGER, Claim_Status_Name VARCHAR(255), Claim_Status_Description VARCHAR(255) ); Sample rows from `Claims_Processing_Stages`: (1, 1, Open, Open a new claim), (3, 1, Close, Close a claim), CREATE TABLE `Claims_Processing` ( Claim_Processing_ID INTEGER, Claim_ID INTEGER REFERENCES Claim_Headers(Claim_Header_ID), Claim_Outcome_Code CHAR(15), Claim_Stage_ID INTEGER, Staff_ID INTEGER REFERENCES Staff(Staff_ID) ); Sample rows from `Claims_Processing`: (118, 28, In progress, 1, 771), (145, 62, In progress, 1, 589), (213, 27, In progress, 1, 589), ",
        "output": "SELECT t2.customer_details FROM policies as t1 JOIN customers as t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many students are affected by each allergy type? ###filtered_database_schema: CREATE TABLE `Allergy_Type` ( Allergy VARCHAR(20) PRIMARY KEY, AllergyType VARCHAR(20) ); Sample rows from `Allergy_Type`: (Eggs, food), (Nuts, food), (Milk, food), CREATE TABLE `Has_Allergy` ( StuID INTEGER REFERENCES Student(StuID), Allergy VARCHAR(20) REFERENCES Allergy_Type(Allergy) ); Sample rows from `Has_Allergy`: (1001, Cat), (1002, Shellfish), (1002, Tree Pollen), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), ",
        "output": "SELECT t2.allergytype ,  COUNT(*) FROM has_allergy as t1 JOIN allergy_type as t2 ON t1.allergy  =  t2.allergy GROUP BY t2.allergytype"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the checking balance of the account whose owner’s name contains the substring ‘ee’? ###filtered_database_schema: CREATE TABLE `ACCOUNTS` ( custid BIGINT PRIMARY KEY, name VARCHAR(64) ); Sample rows from `ACCOUNTS`: (1, Brown), (2, Wang), (3, O'mahony), CREATE TABLE `SAVINGS` ( custid BIGINT PRIMARY KEY REFERENCES ACCOUNTS(custid), balance FLOAT ); Sample rows from `SAVINGS`: (1, 200000.0), (2, 999999999.0), (3, 230000.0), CREATE TABLE `CHECKING` ( custid BIGINT PRIMARY KEY REFERENCES ACCOUNTS(custid), balance FLOAT ); Sample rows from `CHECKING`: (1, 10000.0), (2, 2000.0), (3, 3000.0), ",
        "output": "SELECT t2.balance FROM accounts as t1 JOIN checking as t2 ON t1.custid  =  t2.custid WHERE t1.name LIKE '%ee%'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the density of wyoming ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT density FROM state WHERE state_name  =  \"wyoming\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show all donor names. ###filtered_database_schema: CREATE TABLE `School` ( School_id TEXT PRIMARY KEY, School_name TEXT, Location TEXT, Mascot TEXT, Enrollment INT, IHSAA_Class TEXT, IHSAA_Football_Class TEXT, County TEXT ); Sample rows from `School`: (1, Bremen, Bremen, Lions, 495, AA, AA, 50 Marshall), (2, Culver Community, Culver, Cavaliers, 287, A, A, 50 Marshall), (3, Glenn, Walkerton, Falcons, 605, AAA, AAA, 71 St. Joseph), CREATE TABLE `budget` ( School_id INT PRIMARY KEY REFERENCES School(School_id), Year INT PRIMARY KEY, Budgeted INT, total_budget_percent_budgeted REAL, Invested INT, total_budget_percent_invested REAL, Budget_invested_percent TEXT ); Sample rows from `budget`: (2, 1999, 4979, 2.0, 2134, 2.0, 42.9), (2, 2000, 3666, 2.0, 5840, 2.0, 159.3), (2, 2001, 6803, 2.0, 8335, 2.0, 122.5), CREATE TABLE `endowment` ( endowment_id INT PRIMARY KEY, School_id INT REFERENCES School(School_id), donator_name TEXT, amount REAL ); Sample rows from `endowment`: (1, 1, Monte Plata, 9.51), (2, 2, San José de Ocoa, 9.83), (3, 3, Distrito Nacional, 9.55), ",
        "output": "SELECT DISTINCT donator_name FROM endowment"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For each product that has problems, find the number of problems reported after 1986-11-13 and the product id? ###filtered_database_schema: CREATE TABLE `Problem_Category_Codes` ( problem_category_code VARCHAR(20) PRIMARY KEY, problem_category_description VARCHAR(80) ); Sample rows from `Problem_Category_Codes`: (Datatabase, Database design or contents.), (GUI, User Interface.), (Middleware, Infrastructrure and Architecture), CREATE TABLE `Problem_Log` ( problem_log_id INTEGER, assigned_to_staff_id INTEGER REFERENCES Staff(staff_id), problem_id INTEGER REFERENCES Problems(problem_id), problem_category_code VARCHAR(20) REFERENCES Problem_Category_Codes(problem_category_code), problem_status_code VARCHAR(20) REFERENCES Problem_Status_Codes(problem_status_code), log_entry_date DATETIME, log_entry_description VARCHAR(255), log_entry_fix VARCHAR(255), other_log_details VARCHAR(255) ); Sample rows from `Problem_Log`: (1, 11, 11, Middleware, Solved, 2011-03-13 13:11:57, t, k, p), (2, 11, 8, GUI, Solved, 1976-03-31 14:03:02, a, k, s), (3, 12, 1, GUI, Solved, 1974-12-11 01:06:22, b, j, e), CREATE TABLE `Problem_Status_Codes` ( problem_status_code VARCHAR(20) PRIMARY KEY, problem_status_description VARCHAR(80) ); Sample rows from `Problem_Status_Codes`: (Reported, Reported), (Solved, Solved), CREATE TABLE `Product` ( product_id INTEGER, product_name VARCHAR(80), product_details VARCHAR(255) ); Sample rows from `Product`: (1, rose, k), (2, yellow, q), (3, chat, e), CREATE TABLE `Staff` ( staff_id INTEGER, staff_first_name VARCHAR(80), staff_last_name VARCHAR(80), other_staff_details VARCHAR(255) ); Sample rows from `Staff`: (1, Lacey, Bosco, m), (2, Dameon, Frami, x), (3, Ashley, Medhurst, w), CREATE TABLE `Problems` ( problem_id INTEGER, product_id INTEGER REFERENCES Product(product_id), closure_authorised_by_staff_id INTEGER REFERENCES Staff(staff_id), reported_by_staff_id INTEGER REFERENCES Staff(staff_id), date_problem_reported DATETIME, date_problem_closed DATETIME, problem_description VARCHAR(255), other_problem_details VARCHAR(255) ); Sample rows from `Problems`: (1, 4, 4, 2, 1978-06-26 19:10:17, 2012-07-22 19:24:26, x, p), (2, 8, 3, 10, 1988-11-07 16:09:31, 1973-06-07 04:13:51, w, p), (3, 1, 4, 1, 1995-05-14 08:32:56, 1997-02-26 05:06:15, r, i), ",
        "output": "SELECT COUNT(*) ,  t2.product_id FROM problems as t1 JOIN product as t2 ON t1.product_id = t2.product_id WHERE t1.date_problem_reported > \"1986-11-13\" GROUP BY t2.product_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'? ###filtered_database_schema: CREATE TABLE `medicine` ( id INT PRIMARY KEY, name TEXT, Trade_Name TEXT, FDA_approved TEXT ); Sample rows from `medicine`: (1, Amisulpride, Solian, No), (2, Aripiprazole, Abilify, Yes), (3, Asenapine, Saphris, Yes), CREATE TABLE `enzyme` ( id INT PRIMARY KEY, name TEXT, Location TEXT, Product TEXT, Chromosome TEXT, OMIM INT, Porphyria TEXT ); Sample rows from `enzyme`: (1, ALA synthase, Mitochondrion, δ-Aminolevulinic acid, 3p21.1, 125290, none), (2, ALA dehydratase, Cytosol, Porphobilinogen, 9q34, 125270, ALA-Dehydratase deficiency), (3, PBG deaminase, Cytosol, Hydroxymethyl bilane, 11q23.3, 176000, acute intermittent porphyria), CREATE TABLE `medicine_enzyme_interaction` ( enzyme_id INT PRIMARY KEY REFERENCES enzyme(id), medicine_id INT PRIMARY KEY REFERENCES medicine(id), interaction_type TEXT ); Sample rows from `medicine_enzyme_interaction`: (1, 1, inhibitor), (1, 2, inhibitor), (1, 3, inhibitor), ",
        "output": "SELECT t1.name FROM enzyme as t1 JOIN medicine_enzyme_interaction as t2 ON t1.id  =  t2.enzyme_id JOIN medicine as t3 ON t2.medicine_id  =  t3.id WHERE t3.name  =  'Amisulpride' AND t2.interaction_type  =  'inhibitor'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the total number of rooms of all apartments with facility code \"Gym\". ###filtered_database_schema: CREATE TABLE `Apartment_Buildings` ( building_id INTEGER PRIMARY KEY, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80) ); Sample rows from `Apartment_Buildings`: (133, Normandie Court, Normandie Court, Studio, 7950 Casper Vista Apt. 176 Marquiseberg, CA 70496, Emma, (948)040-1064x387), (153, Mercedes House, Mercedes House, Studio, 354 Otto Villages Charliefort, VT 71664, Brenden, 915-617-2408x832), (191, The Eugene, The Eugene, Flat, 71537 Gorczany Inlet Wisozkburgh, AL 08256, Melyssa, (609)946-0491), CREATE TABLE `Apartments` ( apt_id INTEGER PRIMARY KEY, building_id INTEGER REFERENCES Apartment_Buildings(building_id), apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5) ); Sample rows from `Apartments`: (1, 808, Flat, Suite 645, 1, 3, 7), (2, 624, Flat, Apt. 585, 2, 4, 5), (3, 225, Studio, Apt. 908, 1, 6, 7), CREATE TABLE `Apartment_Facilities` ( apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id), facility_code CHAR(15) PRIMARY KEY ); Sample rows from `Apartment_Facilities`: (1, Boardband), (2, Boardband), (3, Gym), CREATE TABLE `Guests` ( guest_id INTEGER PRIMARY KEY, gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME ); Sample rows from `Guests`: (1, Male, Kip, DuBuque, 1995-11-04 07:09:57), (2, Unknown, Rebeca, Runolfsdottir, 1974-05-12 21:53:58), (3, Female, Keon, Treutel, 1974-08-20 09:28:05), CREATE TABLE `Apartment_Bookings` ( apt_booking_id INTEGER PRIMARY KEY, apt_id INTEGER REFERENCES Apartments(apt_id), guest_id INTEGER REFERENCES Guests(guest_id), booking_status_code CHAR(15), booking_start_date DATETIME, booking_end_date DATETIME ); Sample rows from `Apartment_Bookings`: (258, 10, 2, Provisional, 2016-09-26 17:13:49, 2017-10-07 11:38:48), (279, 15, 15, Provisional, 2016-04-01 06:28:08, 2017-10-25 11:08:42), (337, 8, 5, Provisional, 2017-03-13 16:20:14, 2018-02-19 16:59:08), CREATE TABLE `View_Unit_Status` ( apt_id INTEGER REFERENCES Apartments(apt_id), apt_booking_id INTEGER REFERENCES Apartment_Bookings(apt_booking_id), status_date DATETIME PRIMARY KEY, available_yn BIT ); Sample rows from `View_Unit_Status`: (11, 920, 1970-09-28 10:24:29, 1), (15, 575, 1972-03-23 22:55:53, 1), (15, 924, 1973-10-28 04:30:14, 1), ",
        "output": "SELECT SUM(t2.room_count) FROM apartment_facilities as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.facility_code  =  \"Gym\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the total number of degrees granted after 2000 for each Orange county campus? ###filtered_database_schema: CREATE TABLE `Campuses` ( Id INTEGER, Campus TEXT, Location TEXT, County TEXT, Year INTEGER ); Sample rows from `Campuses`: (1, California State University-Bakersfield, Bakersfield, Kern, 1965), (2, California State University-Channel Islands, Camarillo, Ventura, 2002), (3, California State University-Chico, Chico, Butte, 1887), CREATE TABLE `csu_fees` ( Campus INTEGER REFERENCES Campuses(Id), Year INTEGER, CampusFee INTEGER ); Sample rows from `csu_fees`: (1, 1996, 1951), (2, 2003, 1868), (3, 1996, 2042), CREATE TABLE `degrees` ( Year INTEGER PRIMARY KEY, Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Degrees INTEGER ); Sample rows from `degrees`: (1990, 1, 701), (1991, 1, 681), (1992, 1, 791), CREATE TABLE `discipline_enrollments` ( Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Discipline INTEGER PRIMARY KEY, Year INTEGER, Undergraduate INTEGER, Graduate INTEGER ); Sample rows from `discipline_enrollments`: (1, 4, 2004, 248, 0), (1, 5, 2004, 811, 73), (1, 6, 2004, 199, 0), CREATE TABLE `enrollments` ( Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Year INTEGER PRIMARY KEY, TotalEnrollment_AY INTEGER, FTE_AY INTEGER ); Sample rows from `enrollments`: (1, 1956, 384, 123), (1, 1957, 432, 151), (1, 1958, 422, 178), CREATE TABLE `faculty` ( Campus INTEGER REFERENCES Campuses(Id), Year INTEGER, Faculty REAL ); Sample rows from `faculty`: (1, 2002, 357.1), (2, 2002, 48.4), (3, 2002, 742.8), ",
        "output": "SELECT t1.campus ,  SUM(t2.degrees) FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.county  =  \"Orange\" AND t2.year  >=  2000 GROUP BY t1.campus"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the city that hosted the most events. ###filtered_database_schema: CREATE TABLE `city` ( City_ID INT PRIMARY KEY, City TEXT, Hanzi TEXT, Hanyu_Pinyin TEXT, Regional_Population INT, GDP REAL ); Sample rows from `city`: (1, Shanghai, 上海, Shànghǎi, 23019148, 1919.57), (2, Nanjing ( Jiangsu ), 南京, Nánjīng, 8004680, 614.55), (3, Hangzhou ( Zhejiang ), 杭州, Hángzhōu, 8700400, 701.18), CREATE TABLE `match` ( Match_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Score TEXT, Result TEXT, Competition TEXT ); Sample rows from `match`: (1, 18 February 1992, Estadio Cuscatlán , San Salvador , El Salvador, 1-0, 2-0, Friendly match), (2, 19 July 1992, Estadio Rigoberto López , Managua , Nicaragua, 3-0, 5-0, 1994 FIFA World Cup qualification), (3, 23 July 1992, Estadio Cuscatlán , San Salvador , El Salvador, 1-0, 5-1, 1994 FIFA World Cup qualification), CREATE TABLE `temperature` ( City_ID INT PRIMARY KEY REFERENCES city(City_ID), Jan REAL, Feb REAL, Mar REAL, Apr REAL, Jun REAL, Jul REAL, Aug REAL, Sep REAL, Oct REAL, Nov REAL, Dec REAL ); Sample rows from `temperature`: (1, 17.8, 17.8, 18.3, 18.9, 20.0, 20.6, 20.6, 20.6, 20.0, 19.4, 18.3), (2, 26.1, 26.1, 26.1, 26.1, 27.8, 27.8, 28.3, 28.3, 28.3, 27.2, 26.7), (3, 18.9, 18.3, 19.4, 20.0, 22.2, 23.3, 23.9, 23.3, 22.8, 21.7, 20.0), CREATE TABLE `hosting_city` ( Year INT PRIMARY KEY, Match_ID INT REFERENCES match(Match_ID), Host_City TEXT REFERENCES city(City_ID) ); Sample rows from `hosting_city`: (2008, 1, 1), (2009, 2, 2), (2010, 3, 2), ",
        "output": "SELECT t1.city FROM city as t1 JOIN hosting_city as t2 ON t1.city_id  =  t2.host_city GROUP BY t2.host_city ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the number of papers on PVLDB . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT COUNT(DISTINCT t2.title) FROM publication as t2 JOIN journal as t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the name of each physician and the number of patients he or she treats. ###filtered_database_schema: CREATE TABLE `Physician` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), SSN INTEGER ); Sample rows from `Physician`: (1, John Dorian, Staff Internist, 111111111), (2, Elliot Reid, Attending Physician, 222222222), (3, Christopher Turk, Surgical Attending Physician, 333333333), CREATE TABLE `Department` ( DepartmentID INTEGER, Name VARCHAR(30), Head INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Department`: (1, General Medicine, 4), (2, Surgery, 7), (3, Psychiatry, 9), CREATE TABLE `Affiliated_With` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID), PrimaryAffiliation BOOLEAN ); Sample rows from `Affiliated_With`: (1, 1, 1), (2, 1, 1), (3, 1, 0), CREATE TABLE `Procedures` ( Code INTEGER, Name VARCHAR(30), Cost REAL ); Sample rows from `Procedures`: (1, Reverse Rhinopodoplasty, 1500.0), (2, Obtuse Pyloric Recombobulation, 3750.0), (3, Folded Demiophtalmectomy, 4500.0), CREATE TABLE `Trained_In` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code), CertificationDate DATETIME, CertificationExpires DATETIME ); Sample rows from `Trained_In`: (3, 1, 2008-01-01, 2008-12-31), (3, 2, 2008-01-01, 2008-12-31), (3, 5, 2008-01-01, 2008-12-31), CREATE TABLE `Patient` ( SSN INTEGER, Name VARCHAR(30), Address VARCHAR(30), Phone VARCHAR(30), InsuranceID INTEGER, PCP INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Patient`: (100000001, John Smith, 42 Foobar Lane, 555-0256, 68476213, 1), (100000002, Grace Ritchie, 37 Snafu Drive, 555-0512, 36546321, 2), (100000003, Random J. Patient, 101 Omgbbq Street, 555-1204, 65465421, 2), CREATE TABLE `Nurse` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), Registered BOOLEAN, SSN INTEGER ); Sample rows from `Nurse`: (101, Carla Espinosa, Head Nurse, 1, 111111110), (102, Laverne Roberts, Nurse, 1, 222222220), (103, Paul Flowers, Nurse, 0, 333333330), CREATE TABLE `Appointment` ( AppointmentID INTEGER, Patient INTEGER REFERENCES Patient(SSN), PrepNurse INTEGER REFERENCES Nurse(EmployeeID), Physician INTEGER REFERENCES Physician(EmployeeID), Start DATETIME, End DATETIME, ExaminationRoom TEXT ); Sample rows from `Appointment`: (13216584, 100000001, 101, 1, 2008-04-24 10:00, 2008-04-24 11:00, A), (26548913, 100000002, 101, 2, 2008-04-24 10:00, 2008-04-24 11:00, B), (36549879, 100000001, 102, 1, 2008-04-25 10:00, 2008-04-25 11:00, A), CREATE TABLE `Medication` ( Code INTEGER, Name VARCHAR(30), Brand VARCHAR(30), Description VARCHAR(30) ); Sample rows from `Medication`: (1, Procrastin-X, X, N/A), (2, Thesisin, Foo Labs, N/A), (3, Awakin, Bar Laboratories, N/A), CREATE TABLE `Prescribes` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Medication INTEGER PRIMARY KEY REFERENCES Medication(Code), Date DATETIME PRIMARY KEY, Appointment INTEGER REFERENCES Appointment(AppointmentID), Dose VARCHAR(30) ); Sample rows from `Prescribes`: (1, 100000001, 1, 2008-04-24 10:47, 13216584, 5), (9, 100000004, 2, 2008-04-27 10:53, 86213939, 10), (9, 100000004, 2, 2008-04-30 16:53, None, 5), CREATE TABLE `Block` ( BlockFloor INTEGER PRIMARY KEY, BlockCode INTEGER PRIMARY KEY ); Sample rows from `Block`: (1, 1), (1, 2), (1, 3), CREATE TABLE `Room` ( RoomNumber INTEGER, RoomType VARCHAR(30), BlockFloor INTEGER REFERENCES Block(BlockFloor), BlockCode INTEGER REFERENCES Block(BlockCode), Unavailable BOOLEAN ); Sample rows from `Room`: (101, Single, 1, 1, 0), (102, Single, 1, 1, 0), (103, Single, 1, 1, 0), CREATE TABLE `On_Call` ( Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID), BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor), BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode), OnCallStart DATETIME PRIMARY KEY, OnCallEnd DATETIME PRIMARY KEY ); Sample rows from `On_Call`: (101, 1, 1, 2008-11-04 11:00, 2008-11-04 19:00), (101, 1, 2, 2008-11-04 11:00, 2008-11-04 19:00), (102, 1, 3, 2008-11-04 11:00, 2008-11-04 19:00), CREATE TABLE `Stay` ( StayID INTEGER, Patient INTEGER REFERENCES Patient(SSN), Room INTEGER REFERENCES Room(RoomNumber), StayStart DATETIME, StayEnd DATETIME ); Sample rows from `Stay`: (3215, 100000001, 111, 2008-05-01, 2008-05-04), (3216, 100000003, 123, 2008-05-03, 2008-05-14), (3217, 100000004, 112, 2008-05-02, 2008-05-03), CREATE TABLE `Undergoes` ( Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code), Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID), DateUndergoes DATETIME PRIMARY KEY, Physician INTEGER REFERENCES Physician(EmployeeID), AssistingNurse INTEGER REFERENCES Nurse(EmployeeID) ); Sample rows from `Undergoes`: (100000001, 6, 3215, 2008-05-02, 3, 101), (100000001, 2, 3215, 2008-05-03, 7, 101), (100000004, 1, 3217, 2008-05-07, 3, 102), ",
        "output": "SELECT t1.name ,  COUNT(*) FROM physician as t1 JOIN patient as t2 ON t1.employeeid  =  t2.pcp GROUP BY t1.employeeid"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many performances are there? ###filtered_database_schema: CREATE TABLE `member` ( Member_ID TEXT PRIMARY KEY, Name TEXT, Nationality TEXT, Role TEXT ); Sample rows from `member`: (1, Wilfredo Ruiz, Uruguay, Prime Violin), (2, Luis González, Argentina, Violin), (3, Héctor Campana, Argentina, Violin), CREATE TABLE `performance` ( Performance_ID REAL PRIMARY KEY, Date TEXT, Host TEXT, Location TEXT, Attendance INT ); Sample rows from `performance`: (1.0, February 2, Boston Bruins, TD Garden, 165), (2.0, February 4, New York Rangers, Madison Square Garden, 1820), (3.0, February 5, Atlanta Thrashers, Verizon Center, 1878), CREATE TABLE `member_attendance` ( Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Performance_ID INT PRIMARY KEY REFERENCES performance(Performance_ID), Num_of_Pieces INT ); Sample rows from `member_attendance`: (11, 3, 2), (7, 2, 3), (4, 6, 4), ",
        "output": "SELECT COUNT(*) FROM performance"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name, city, and country of the airport that has the lowest altitude. ###filtered_database_schema: CREATE TABLE `routes` ( rid INTEGER, dst_apid INTEGER REFERENCES airports(apid), dst_ap varchar(4), src_apid bigint REFERENCES airports(apid), src_ap varchar(4), alid bigint REFERENCES airlines(alid), airline varchar(4), codeshare TEXT ); Sample rows from `routes`: (37, 2990, KZ, 2965, AER, 410, 2B, None), (38, 2990, KZ, 2966, ASF, 410, 2B, None), (39, 2962, MRV, 2966, ASF, 410, 2B, None), CREATE TABLE `airports` ( apid INTEGER, name TEXT, city TEXT, country TEXT, x REAL, y REAL, elevation bigint, iata character varchar(3), icao character varchar(4) ); Sample rows from `airports`: (1, Goroka Airport, Goroka, Papua New Guinea, 145.391998291, -6.081689834590001, 5282, GKA, AYGA), (2, Madang Airport, Madang, Papua New Guinea, 145.789001465, -5.20707988739, 20, MAG, AYMD), (3, Mount Hagen Kagamuga Airport, Mount Hagen, Papua New Guinea, 144.29600524902344, -5.826789855957031, 5388, HGU, AYMH), CREATE TABLE `airlines` ( alid INTEGER, name TEXT, iata varchar(2), icao varchar(3), callsign TEXT, country TEXT, active varchar(2) ); Sample rows from `airlines`: (-1, Unknown, -, N/A, None, None, Y), (1, Private flight, -, N/A, , , Y), (2, 135 Airways, , GNL, GENERAL, United States, N), ",
        "output": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the names of the regions affected by storms that had a death count of at least 10. ###filtered_database_schema: CREATE TABLE `storm` ( Storm_ID INT PRIMARY KEY, Name TEXT, Dates_active TEXT, Max_speed INT, Damage_millions_USD REAL, Number_Deaths INT ); Sample rows from `storm`: (1, One, May19–May25, 995, 13.0, 0), (2, Two, August3–August10, 972, 10.75, 7), (3, Three, August5–August14, 972, 13.0, 52), CREATE TABLE `region` ( Region_id INT PRIMARY KEY, Region_code TEXT, Region_name TEXT ); Sample rows from `region`: (1, AF, Afghanistan), (2, AL, Albania), (3, DZ, Algeria), CREATE TABLE `affected_region` ( Region_id INT PRIMARY KEY REFERENCES region(Region_id), Storm_ID INT PRIMARY KEY REFERENCES storm(Storm_ID), Number_city_affected REAL ); Sample rows from `affected_region`: (1, 1, 10.0), (2, 1, 15.0), (3, 3, 30.0), ",
        "output": "SELECT t2.region_name FROM affected_region as t1 JOIN region as t2 ON t1.region_id  =  t2.region_id JOIN storm as t3 ON t1.storm_id  =  t3.storm_id WHERE t3.number_deaths  >=  10"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Latest paper by oren etzioni ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the full name of the customer with the email \"luisg@embraer.com.br\". ###filtered_database_schema: CREATE TABLE `Album` ( AlbumId INTEGER, Title varchar(160), ArtistId INTEGER PRIMARY KEY REFERENCES Artist(ArtistId) ); Sample rows from `Album`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `Artist` ( ArtistId INTEGER, Name varchar(120) ); Sample rows from `Artist`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `Customer` ( CustomerId INTEGER, FirstName varchar(40), LastName varchar(20), Company varchar(80), Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60), SupportRepId INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId) ); Sample rows from `Customer`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `Employee` ( EmployeeId INTEGER, LastName varchar(20), FirstName varchar(20), Title varchar(30), ReportsTo INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId), BirthDate datetime, HireDate datetime, Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60) ); Sample rows from `Employee`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `Genre` ( GenreId INTEGER, Name varchar(120) ); Sample rows from `Genre`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `Invoice` ( InvoiceId INTEGER, CustomerId INTEGER PRIMARY KEY REFERENCES Customer(CustomerId), InvoiceDate datetime, BillingAddress varchar(70), BillingCity varchar(40), BillingState varchar(40), BillingCountry varchar(40), BillingPostalCode varchar(10), Total decimal(10,2) ); Sample rows from `Invoice`: (1, 2, 2009-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2009-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2009-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `InvoiceLine` ( InvoiceLineId INTEGER, InvoiceId INTEGER PRIMARY KEY REFERENCES Invoice(InvoiceId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId), UnitPrice decimal(10,2), Quantity INTEGER ); Sample rows from `InvoiceLine`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `MediaType` ( MediaTypeId INTEGER, Name varchar(120) ); Sample rows from `MediaType`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `Playlist` ( PlaylistId INTEGER, Name varchar(120) ); Sample rows from `Playlist`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `PlaylistTrack` ( PlaylistId INTEGER PRIMARY KEY REFERENCES Playlist(PlaylistId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId) ); Sample rows from `PlaylistTrack`: (1, 1), (8, 1), (17, 1), CREATE TABLE `Track` ( TrackId INTEGER, Name varchar(200), AlbumId INTEGER PRIMARY KEY REFERENCES Album(AlbumId), MediaTypeId INTEGER PRIMARY KEY REFERENCES MediaType(MediaTypeId), GenreId INTEGER PRIMARY KEY REFERENCES Genre(GenreId), Composer varchar(220), Milliseconds INTEGER, Bytes INTEGER, UnitPrice decimal(10,2) ); Sample rows from `Track`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), ",
        "output": "SELECT firstname ,  lastname FROM customer WHERE email  =  \"luisg@embraer.com.br\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the distinct names of wines that have appellations in the North Coast area? ###filtered_database_schema: CREATE TABLE `grapes` ( ID INTEGER, Grape TEXT PRIMARY KEY, Color TEXT ); Sample rows from `grapes`: (1, Barbera, Red), (2, Cabernet Franc, Red), (3, Cabernet Sauvingnon, Red), CREATE TABLE `appellations` ( No INTEGER, Appelation TEXT PRIMARY KEY, County TEXT, State TEXT, Area TEXT, isAVA TEXT ); Sample rows from `appellations`: (1, Alexander Valley, Sonoma, California, North Coast, Yes), (2, Amador County, Amador, California, Sierra Foothills, No), (3, Amador-Mendocino-Sonoma Counties, N/A, California, N/A, No), CREATE TABLE `wine` ( No INTEGER, Grape TEXT REFERENCES grapes(Grape), Winery TEXT, Appelation TEXT REFERENCES appellations(Appelation), State TEXT, Name TEXT, Year INTEGER, Price INTEGER, Score INTEGER, Cases INTEGER, Drink TEXT ); Sample rows from `wine`: (1, Zinfandel, Robert Biale, St. Helena, California, Old Kraft Vineyard, 2008, 44, 93, 275, now), (2, Zinfandel, Chiarello Family, Napa Valley, California, Giana, 2008, 35, 93, 480, now), (3, Zinfandel, Robert Biale, Napa Valley, California, Black Chicken, 2008, 40, 91, 2700, 2012), ",
        "output": "SELECT DISTINCT t2.name FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t1.area  =  \"North Coast\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show all game names played by Linda Smith ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Video_Games` ( GameID INTEGER, GName VARCHAR(40), GType VARCHAR(40) ); Sample rows from `Video_Games`: (1, RNG Stone, Collectible card game), (2, The Vanishing of Eric Calder, Walking Simulator), (3, Grand Term Assignment, Role-playing game), CREATE TABLE `Plays_Games` ( StuID INTEGER REFERENCES Student(StuID), GameID INTEGER REFERENCES Video_Games(GameID), Hours_Played INTEGER ); Sample rows from `Plays_Games`: (1001, 1, 35), (1001, 2, 15), (1001, 5, 1), CREATE TABLE `SportsInfo` ( StuID INTEGER REFERENCES Student(StuID), SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1) ); Sample rows from `SportsInfo`: (1001, Athletics, 2, 5, N), (1002, Football, 7, 20, Y), (1003, Football, 45, 18, Y), ",
        "output": "SELECT gname FROM plays_games as t1 JOIN video_games as t2 ON t1.gameid  =  t2.gameid JOIN student as t3 ON t3.stuid  =  t1.stuid WHERE t3.lname  =  \"Smith\" AND t3.fname  =  \"Linda\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the position of players and the corresponding number of players. ###filtered_database_schema: CREATE TABLE `country` ( Country_id INT PRIMARY KEY, Country_name TEXT, Capital TEXT, Official_native_language TEXT ); Sample rows from `country`: (1, Indonesia, Jakarta, Bahasa Indonesia), (2, Iran, Tehran, Persian ( Arabic script )), (3, Iraq, Baghdad, Arabic ( Arabic script ) Kurdish), CREATE TABLE `team` ( Team_id INT PRIMARY KEY, Name TEXT ); Sample rows from `team`: (1, Columbus Crew), (2, Evalyn Feil), (3, Anais VonRueden), CREATE TABLE `match_season` ( Season REAL PRIMARY KEY, Player TEXT, Position TEXT, Country INT REFERENCES country(Country_id), Team INT REFERENCES team(Team_id), Draft_Pick_Number INT, Draft_Class TEXT, College TEXT ); Sample rows from `match_season`: (1996.0, Steve Ralston Category:Articles with hCards, Midfielder, 6, 1, 18, 1996 MLS College Draft, Florida International), (1997.0, Mike Duhaney Category:Articles with hCards, Defender, 6, 2, 87, 1996 MLS Inaugural Player Draft, UNLV), (1998.0, Ben Olsen Category:Articles with hCards, Midfielder, 4, 3, 2, Project-40, Virginia), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Years_Played TEXT, Total_WL TEXT, Singles_WL TEXT, Doubles_WL TEXT, Team INT REFERENCES team(Team_id) ); Sample rows from `player`: (1, Cho Soong-Jae (630), 1 (2011), 2–0, 1–0, 1–0, 1), (2, Chung Hong (717), 1 (2011), 0–0, 0–0, 0–0, 1), (3, Im Kyu-tae (492), 8 (2003–2005, 2007–2011), 6–9, 5–7, 1–2, 1), ",
        "output": "SELECT position ,  COUNT(*) FROM match_season GROUP BY position"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: where is a good arabic restaurant on buchanan in san francisco ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50. ###filtered_database_schema: CREATE TABLE `Investors` ( investor_id INTEGER, Investor_details VARCHAR(255) ); Sample rows from `Investors`: (1, z), (2, z), (3, d), CREATE TABLE `Lots` ( lot_id INTEGER, investor_id INTEGER REFERENCES Investors(investor_id), lot_details VARCHAR(255) ); Sample rows from `Lots`: (1, 13, r), (2, 16, z), (3, 10, s), CREATE TABLE `Ref_Transaction_Types` ( transaction_type_code VARCHAR(10) PRIMARY KEY, transaction_type_description VARCHAR(80) ); Sample rows from `Ref_Transaction_Types`: (SALE, Sale), (PUR, Purchase), CREATE TABLE `Transactions` ( transaction_id INTEGER, investor_id INTEGER REFERENCES Investors(investor_id), transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code), date_of_transaction DATETIME, amount_of_transaction DECIMAL(19,4), share_count VARCHAR(40), other_details VARCHAR(255) ); Sample rows from `Transactions`: (1, 6, SALE, 1988-09-16 19:02:51, 302507.6996, 8718572, None), (2, 18, PUR, 1982-06-06 17:19:00, 27.257, 9, None), (3, 2, SALE, 1979-04-27 06:03:59, 48777.969, 8580, None), CREATE TABLE `Sales` ( sales_transaction_id INTEGER REFERENCES Transactions(transaction_id), sales_details VARCHAR(255) ); Sample rows from `Sales`: (1, x), (2, o), (3, a), CREATE TABLE `Purchases` ( purchase_transaction_id INTEGER REFERENCES Transactions(transaction_id), purchase_details VARCHAR(255) ); Sample rows from `Purchases`: (1, c), (2, y), (3, i), CREATE TABLE `Transactions_Lots` ( transaction_id INTEGER REFERENCES Transactions(transaction_id), lot_id INTEGER REFERENCES Lots(lot_id) ); Sample rows from `Transactions_Lots`: (3, 11), (3, 8), (2, 11), ",
        "output": "SELECT MIN(amount_of_transaction) FROM transactions WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of airports whose altitude is between -50 and 50. ###filtered_database_schema: CREATE TABLE `routes` ( rid INTEGER, dst_apid INTEGER REFERENCES airports(apid), dst_ap varchar(4), src_apid bigint REFERENCES airports(apid), src_ap varchar(4), alid bigint REFERENCES airlines(alid), airline varchar(4), codeshare TEXT ); Sample rows from `routes`: (37, 2990, KZ, 2965, AER, 410, 2B, None), (38, 2990, KZ, 2966, ASF, 410, 2B, None), (39, 2962, MRV, 2966, ASF, 410, 2B, None), CREATE TABLE `airports` ( apid INTEGER, name TEXT, city TEXT, country TEXT, x REAL, y REAL, elevation bigint, iata character varchar(3), icao character varchar(4) ); Sample rows from `airports`: (1, Goroka Airport, Goroka, Papua New Guinea, 145.391998291, -6.081689834590001, 5282, GKA, AYGA), (2, Madang Airport, Madang, Papua New Guinea, 145.789001465, -5.20707988739, 20, MAG, AYMD), (3, Mount Hagen Kagamuga Airport, Mount Hagen, Papua New Guinea, 144.29600524902344, -5.826789855957031, 5388, HGU, AYMH), CREATE TABLE `airlines` ( alid INTEGER, name TEXT, iata varchar(2), icao varchar(3), callsign TEXT, country TEXT, active varchar(2) ); Sample rows from `airlines`: (-1, Unknown, -, N/A, None, None, Y), (1, Private flight, -, N/A, , , Y), (2, 135 Airways, , GNL, GENERAL, United States, N), ",
        "output": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name of the district with the most residents? ###filtered_database_schema: CREATE TABLE `product` ( product_id INT PRIMARY KEY, product TEXT, dimensions TEXT, dpi REAL, pages_per_minute_color REAL, max_page_size TEXT, interface TEXT ); Sample rows from `product`: (1, Fujitsu fi-6130 A4 Series Scanner, 301 x 160 x 158, 600.0, 30.0, A4, USB 2.0), (2, Plustek MobileOffice D28 Corporate, 303 x 94 x 60, 600.0, 28.0, A4, USB 2.0), (3, Xerox Travel Scanner 100, 289 x 51 x 38, 600.0, 4.0, A4, USB 2.0), CREATE TABLE `store` ( Store_ID INT PRIMARY KEY, Store_Name TEXT, Type TEXT, Area_size REAL, Number_of_product_category REAL, Ranking INT ); Sample rows from `store`: (1, Miramichi, City Mall, 179.84, 17811.0, 2), (2, Neguac, Village Store, 26.69, 1678.0, 3), (3, Rogersville, Village Store, 7.23, 1170.0, 1), CREATE TABLE `district` ( District_ID INT PRIMARY KEY, District_name TEXT, Headquartered_City TEXT, City_Population REAL, City_Area REAL ); Sample rows from `district`: (1, Attock District, Attock City, 94620.0, 20.0), (2, Bahawalnagar District, Bahawalnagar City, 134936.0, 13.0), (3, Bahawalpur District, Bahawalpur City, 530438.0, 38.0), CREATE TABLE `store_product` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), Product_ID INT PRIMARY KEY REFERENCES product(Product_ID) ); Sample rows from `store_product`: (1, 1), (1, 2), (1, 3), CREATE TABLE `store_district` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), District_ID INT REFERENCES district(District_ID) ); Sample rows from `store_district`: (1, 15), (2, 15), (3, 11), ",
        "output": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What campuses are located in Chico? ###filtered_database_schema: CREATE TABLE `Campuses` ( Id INTEGER, Campus TEXT, Location TEXT, County TEXT, Year INTEGER ); Sample rows from `Campuses`: (1, California State University-Bakersfield, Bakersfield, Kern, 1965), (2, California State University-Channel Islands, Camarillo, Ventura, 2002), (3, California State University-Chico, Chico, Butte, 1887), CREATE TABLE `csu_fees` ( Campus INTEGER REFERENCES Campuses(Id), Year INTEGER, CampusFee INTEGER ); Sample rows from `csu_fees`: (1, 1996, 1951), (2, 2003, 1868), (3, 1996, 2042), CREATE TABLE `degrees` ( Year INTEGER PRIMARY KEY, Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Degrees INTEGER ); Sample rows from `degrees`: (1990, 1, 701), (1991, 1, 681), (1992, 1, 791), CREATE TABLE `discipline_enrollments` ( Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Discipline INTEGER PRIMARY KEY, Year INTEGER, Undergraduate INTEGER, Graduate INTEGER ); Sample rows from `discipline_enrollments`: (1, 4, 2004, 248, 0), (1, 5, 2004, 811, 73), (1, 6, 2004, 199, 0), CREATE TABLE `enrollments` ( Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Year INTEGER PRIMARY KEY, TotalEnrollment_AY INTEGER, FTE_AY INTEGER ); Sample rows from `enrollments`: (1, 1956, 384, 123), (1, 1957, 432, 151), (1, 1958, 422, 178), CREATE TABLE `faculty` ( Campus INTEGER REFERENCES Campuses(Id), Year INTEGER, Faculty REAL ); Sample rows from `faculty`: (1, 2002, 357.1), (2, 2002, 48.4), (3, 2002, 742.8), ",
        "output": "SELECT campus FROM campuses WHERE location  =  \"Chico\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the countries that have never participated in any competition with Friendly type. ###filtered_database_schema: CREATE TABLE `club` ( Club_ID INT PRIMARY KEY, name TEXT, Region TEXT, Start_year TEXT ); Sample rows from `club`: (1, AIB, USA, 2009), (2, BK Slide, UK, 1998), (3, IFG, China, 2005), CREATE TABLE `club_rank` ( Rank REAL PRIMARY KEY, Club_ID INT PRIMARY KEY REFERENCES club(Club_ID), Gold REAL, Silver REAL, Bronze REAL, Total REAL ); Sample rows from `club_rank`: (1.0, 2, 11.0, 11.0, 9.0, 31.0), (2.0, 3, 8.0, 7.0, 6.0, 21.0), (3.0, 1, 7.0, 4.0, 2.0, 13.0), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, name TEXT, Position TEXT, Club_ID INT REFERENCES club(Club_ID), Apps REAL, Tries REAL, Goals TEXT, Points REAL ); Sample rows from `player`: (1, Michael Platt, Full Back, 1, 20.0, 5.0, 0, 20.0), (2, Dave Halley, Right Wing, 2, 23.0, 9.0, 0, 36.0), (3, James Evans, Right Centre, 1, 30.0, 9.0, 0, 36.0), CREATE TABLE `competition` ( Competition_ID INT PRIMARY KEY, Year REAL, Competition_type TEXT, Country TEXT ); Sample rows from `competition`: (1, 2006.0, Friendly, Italy), (2, 2006.0, Friendly, Spain), (3, 2006.0, Friendly, Australia), CREATE TABLE `competition_result` ( Competition_ID INT PRIMARY KEY REFERENCES competition(Competition_ID), Club_ID_1 INT PRIMARY KEY REFERENCES club(Club_ID), Club_ID_2 INT PRIMARY KEY REFERENCES club(Club_ID), Score TEXT ); Sample rows from `competition_result`: (1, 1, 2, 11:10), (2, 3, 2, 25:2), (10, 4, 2, 13:10), ",
        "output": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the names of phones with carrier either \"Sprint\" or \"TMobile\". ###filtered_database_schema: CREATE TABLE `phone` ( Name TEXT, Phone_ID INT PRIMARY KEY, Memory_in_G INT, Carrier TEXT, Price REAL ); Sample rows from `phone`: (IPhone 5s, 1, 32, Sprint, 320.0), (IPhone 6, 5, 128, Sprint, 480.0), (IPhone 6s, 2, 128, TMobile, 699.0), CREATE TABLE `market` ( Market_ID INT PRIMARY KEY, District TEXT, Num_of_employees INT, Num_of_shops REAL, Ranking INT ); Sample rows from `market`: (1, Alberta, 1966, 40.0, 1), (2, British Columbia, 1965, 49.0, 21), (3, New Brunswick, 1978, 10.0, 4), CREATE TABLE `phone_market` ( Market_ID INT PRIMARY KEY REFERENCES market(Market_ID), Phone_ID TEXT PRIMARY KEY REFERENCES phone(Phone_ID), Num_of_stock INT ); Sample rows from `phone_market`: (1, 1, 2232), (2, 2, 4324), (1, 4, 874), ",
        "output": "SELECT name FROM phone WHERE carrier  =  \"Sprint\" OR carrier  =  \"TMobile\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List first name and last name of customers lived in city Lockmanfurt. ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 3904 Stroman Passage, Port Melyssa, 14445, Georgia, USA), (2, 053 Quigley Island, Hagenesfurt, 22194, Kentucky, USA), (3, 00704 Zoe Alley, Lake Elaina, 08938, Georgia, USA), CREATE TABLE `Staff` ( staff_id INTEGER, staff_address_id INTEGER REFERENCES Addresses(address_id), nickname VARCHAR(80), first_name VARCHAR(80), middle_name VARCHAR(80), last_name VARCHAR(80), date_of_birth DATETIME, date_joined_staff DATETIME, date_left_staff DATETIME ); Sample rows from `Staff`: (1, 14, thompson.constantin, Janessa, Amara, Sawayn, 2010-12-08 16:55:14, 2017-04-27 03:21:26, 2018-03-23 22:53:12), (2, 3, santos45, Camylle, Icie, Weissnat, 2015-08-01 13:22:43, 2016-06-06 08:54:28, 2018-03-10 15:25:00), (3, 5, ynader, Kaitlin, Stephania, Mertz, 1994-05-17 05:32:11, 2018-01-02 12:24:24, 2018-03-24 10:11:08), CREATE TABLE `Vehicles` ( vehicle_id INTEGER, vehicle_details VARCHAR(255) ); Sample rows from `Vehicles`: (1, Van), (2, Truck), (3, Car), CREATE TABLE `Customers` ( customer_id INTEGER, customer_address_id INTEGER REFERENCES Addresses(address_id), customer_status_code VARCHAR(15), date_became_customer DATETIME, date_of_birth DATETIME, first_name VARCHAR(80), last_name VARCHAR(80), amount_outstanding DOUBLE, email_address VARCHAR(250), phone_number VARCHAR(255), cell_mobile_phone_number VARCHAR(255) ); Sample rows from `Customers`: (1, 13, Bad Customer, 2016-05-11 17:03:48, 1998-12-15 13:24:40, Carole, Bernhard, 255.0, everette.goyette@example.org, 07278206718, 861-638-9797), (2, 10, Bad Customer, 2015-11-16 22:52:14, 1995-07-17 12:13:16, Genevieve, Terry, 7256.0, huel.jana@example.org, +14(5)2351480248, 578-518-4785x612), (3, 10, Good Customer, 2016-04-08 00:28:15, 1994-06-21 01:34:56, Clara, Ortiz, 9443.0, hilario.sporer@example.org, 374-483-2758x85087, 1-197-686-2849x8761), CREATE TABLE `Customer_Payments` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), datetime_payment DATETIME PRIMARY KEY, payment_method_code VARCHAR(10), amount_payment DOUBLE ); Sample rows from `Customer_Payments`: (11, 2018-02-05 18:44:46, Direct Debit, 9570.93), (2, 2018-02-24 10:07:05, Direct Debit, 8180.26), (14, 2018-02-27 20:08:53, Direct Debit, 4610.26), CREATE TABLE `Lessons` ( lesson_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), lesson_status_code VARCHAR(15), staff_id INTEGER REFERENCES Staff(staff_id), vehicle_id INTEGER REFERENCES Vehicles(vehicle_id), lesson_date DATETIME, lesson_time VARCHAR(10), price DOUBLE ); Sample rows from `Lessons`: (1, 6, Cancelled, 8, 3, 2018-02-28 10:55:36, 5, 199.0), (2, 8, Cancelled, 14, 3, 2018-03-07 16:12:36, 6, 167.0), (3, 6, Cancelled, 11, 2, 2018-03-03 15:10:16, 3, 352.0), ",
        "output": "SELECT t1.first_name ,  t1.last_name FROM customers as t1 JOIN addresses as t2 ON t1.customer_address_id = t2.address_id WHERE t2.city = \"Lockmanfurt\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For each project id, how many tasks are there? ###filtered_database_schema: CREATE TABLE `Document_Types` ( document_type_code VARCHAR(10) PRIMARY KEY, document_description VARCHAR(255) ); Sample rows from `Document_Types`: (APP, Initial Application), (REG, Regular), CREATE TABLE `Documents` ( document_id INTEGER, document_type_code VARCHAR(10) REFERENCES Document_Types(document_type_code), grant_id INTEGER REFERENCES Grants(grant_id), sent_date DATETIME, response_received_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Documents`: (1, APP, 5, 1986-11-30 07:56:35, 1977-12-01 02:18:53, ), (2, APP, 13, 2004-01-23 11:57:08, 1979-12-08 10:38:07, ), (3, REG, 10, 1999-03-03 12:25:58, 1995-09-12 13:13:48, ), CREATE TABLE `Grants` ( grant_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), grant_amount DECIMAL(19,4), grant_start_date DATETIME, grant_end_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Grants`: (1, 10, 4094.542, 2016-11-20 00:18:51, 2004-10-24 09:09:39, et), (2, 3, 281.2446, 1985-10-09 20:08:49, 1985-06-08 00:22:07, occaecati), (3, 14, 4515947.7015, 1970-09-19 22:53:49, 1989-03-16 18:27:16, et), CREATE TABLE `Organisation_Types` ( organisation_type VARCHAR(10) PRIMARY KEY, organisation_type_description VARCHAR(255) ); Sample rows from `Organisation_Types`: (RES, Research), (SPON, Sponsor), CREATE TABLE `Organisations` ( organisation_id INTEGER, organisation_type VARCHAR(10) REFERENCES Organisation_Types(organisation_type), organisation_details VARCHAR(255) ); Sample rows from `Organisations`: (1, RES, et), (2, RES, eius), (3, RES, impedit), CREATE TABLE `Project_Outcomes` ( project_id INTEGER REFERENCES Projects(project_id), outcome_code VARCHAR(10) REFERENCES Research_Outcomes(outcome_code), outcome_details VARCHAR(255) ); Sample rows from `Project_Outcomes`: (4, Paper, None), (3, Patent, None), (9, Paper, None), CREATE TABLE `Project_Staff` ( staff_id DOUBLE PRIMARY KEY, project_id INTEGER REFERENCES Projects(project_id), role_code VARCHAR(10) REFERENCES Staff_Roles(role_code), date_from DATETIME, date_to DATETIME, other_details VARCHAR(255) ); Sample rows from `Project_Staff`: (0.0, 2, leader, 1981-10-04 22:44:50, 1985-05-30 22:26:30, None), (674810.0, 5, leader, 2003-04-19 15:06:20, 2010-12-08 11:55:36, None), (779.0, 2, researcher, 1981-10-09 21:32:53, 2004-12-16 13:03:36, None), CREATE TABLE `Projects` ( project_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), project_details VARCHAR(255) ); Sample rows from `Projects`: (1, 15, porro), (2, 11, et), (3, 7, sint), CREATE TABLE `Research_Outcomes` ( outcome_code VARCHAR(10) PRIMARY KEY, outcome_description VARCHAR(255) ); Sample rows from `Research_Outcomes`: (Paper, Published Research Paper), (Patent, Research Patent), CREATE TABLE `Research_Staff` ( staff_id INTEGER, employer_organisation_id INTEGER REFERENCES Organisations(organisation_id), staff_details VARCHAR(255) ); Sample rows from `Research_Staff`: (1, 1, quo), (2, 4, est), (3, 5, aspernatur), CREATE TABLE `Staff_Roles` ( role_code VARCHAR(10) PRIMARY KEY, role_description VARCHAR(255) ); Sample rows from `Staff_Roles`: (leader, Project Leader), (researcher, Project Researcher), CREATE TABLE `Tasks` ( task_id INTEGER, project_id INTEGER REFERENCES Projects(project_id), task_details VARCHAR(255), eg Agree Objectives VARCHAR(1) ); Sample rows from `Tasks`: (1, 1, a, None), (2, 2, b, None), (3, 3, c, None), ",
        "output": "SELECT COUNT(*) ,  t1.project_details FROM projects as t1 JOIN tasks as t2 ON t1.project_id  =  t2.project_id GROUP BY t1.project_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the total number of policies used by the customer named \"Dayana Robel\". ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_name VARCHAR(40) ); Sample rows from `Customers`: (194, America Jaskolski), (214, Ellsworth Paucek), (256, Mrs. Hanna Willms), CREATE TABLE `Services` ( Service_ID INTEGER, Service_name VARCHAR(40) ); Sample rows from `Services`: (1, New policy application), (4, Close a policy), (6, Change a policy), CREATE TABLE `Available_Policies` ( Policy_ID INTEGER PRIMARY KEY, policy_type_code CHAR(15), Customer_Phone VARCHAR(255) ); Sample rows from `Available_Policies`: (246, Life Insurance, +16(2)5838999222), (257, Property Insurance, 242.763.9214), (300, Property Insurance, 1-416-503-7735x94204), CREATE TABLE `Customers_Policies` ( Customer_ID INTEGER PRIMARY KEY REFERENCES Customers(Customer_ID), Policy_ID INTEGER PRIMARY KEY REFERENCES Available_Policies(Policy_ID), Date_Opened DATE, Date_Closed DATE ); Sample rows from `Customers_Policies`: (214, 257, 2016-11-19, 2018-03-04), (214, 301, 2016-04-12, 2018-02-07), (256, 583, 2016-07-22, 2018-02-20), CREATE TABLE `First_Notification_of_Loss` ( FNOL_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers_Policies(Customer_ID), Policy_ID INTEGER REFERENCES Customers_Policies(Policy_ID), Service_ID INTEGER REFERENCES Services(Service_ID) ); Sample rows from `First_Notification_of_Loss`: (532, 214, 257, 6), (1611, 996, 993, 9), (1722, 996, 879, 6), CREATE TABLE `Claims` ( Claim_ID INTEGER PRIMARY KEY, FNOL_ID INTEGER REFERENCES First_Notification_of_Loss(FNOL_ID), Effective_Date DATE ); Sample rows from `Claims`: (134, 1722, 1973-08-18), (145, 1611, 2014-10-19), (228, 532, 1975-05-07), CREATE TABLE `Settlements` ( Settlement_ID INTEGER PRIMARY KEY, Claim_ID INTEGER REFERENCES Claims(Claim_ID), Effective_Date DATE, Settlement_Amount REAL ); Sample rows from `Settlements`: (161, 717, 2009-11-20, 6451.65), (176, 641, 1971-06-29, 1588.45), (205, 604, 1978-09-09, 9814.39), ",
        "output": "SELECT COUNT(*) FROM customers as t1 JOIN customers_policies as t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of rooms with more than 50 capacity for each building. ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT COUNT(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which students have professors as their advisors? Find their student ids. ###filtered_database_schema: CREATE TABLE `Activity` ( actid INTEGER, activity_name varchar(25) ); Sample rows from `Activity`: (770, Mountain Climbing), (771, Canoeing), (772, Kayaking), CREATE TABLE `Participates_in` ( stuid INTEGER REFERENCES Student(StuID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Participates_in`: (1001, 770), (1001, 771), (1001, 777), CREATE TABLE `Faculty_Participates_in` ( FacID INTEGER REFERENCES Faculty(FacID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Faculty_Participates_in`: (1082, 784), (1082, 785), (1082, 790), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), ",
        "output": "SELECT t2.stuid FROM faculty as t1 JOIN student as t2 ON t1.facid  =  t2.advisor WHERE t1.rank  =  \"Professor\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average ticket sales gross in dollars of films? ###filtered_database_schema: CREATE TABLE `film` ( Film_ID INT PRIMARY KEY, Title TEXT, Studio TEXT, Director TEXT, Gross_in_dollar INT ); Sample rows from `film`: (1, ET the Extra-Terrestrial, Universal, Steven Spielberg, 435110554), (2, Tootsie, Columbia, Sydney Pollack, 177200000), (3, An Officer and a Gentleman, Paramount / Lorimar, Taylor Hackford, 129795554), CREATE TABLE `market` ( Market_ID INT PRIMARY KEY, Country TEXT, Number_cities INT ); Sample rows from `market`: (1, Japan, 209), (2, China, 540), (3, USA, 700), CREATE TABLE `film_market_estimation` ( Estimation_ID INT PRIMARY KEY, Low_Estimate REAL, High_Estimate REAL, Film_ID INT REFERENCES film(Film_ID), Type TEXT, Market_ID INT REFERENCES market(Market_ID), Year INT ); Sample rows from `film_market_estimation`: (1, 80000.0, 80400.0, 1, Mass suicide murder, 1, 1945), (2, 8000.0, 8000.0, 2, Mass suicide, 2, 1944), (3, 3000.0, 80400.0, 3, Mass human sacrifice, 3, 1487), ",
        "output": "SELECT AVG(gross_in_dollar) FROM film"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is draft detail of the document with id 7? ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( document_type_code CHAR(15) PRIMARY KEY, document_type_description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CD, b), (Paper, u), (Hard Drive, f), CREATE TABLE `Roles` ( role_code CHAR(15) PRIMARY KEY, role_description VARCHAR(255) ); Sample rows from `Roles`: (ED, Editor), (PT, Photo), (MG, Manager), CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (0, IT), (1, MX), (2, DE), CREATE TABLE `Ref_Document_Status` ( document_status_code CHAR(15) PRIMARY KEY, document_status_description VARCHAR(255) ); Sample rows from `Ref_Document_Status`: (working, currently working on), (done, mailed), (overdue, mailed late), CREATE TABLE `Ref_Shipping_Agents` ( shipping_agent_code CHAR(15) PRIMARY KEY, shipping_agent_name VARCHAR(255), shipping_agent_description VARCHAR(255) ); Sample rows from `Ref_Shipping_Agents`: (UP, UPS, g), (US, USPS, q), (AL, Airline, w), CREATE TABLE `Documents` ( document_id INTEGER, document_status_code CHAR(15) REFERENCES Ref_Document_Status(document_status_code), document_type_code CHAR(15) REFERENCES Ref_Document_Types(document_type_code), shipping_agent_code CHAR(15) REFERENCES Ref_Shipping_Agents(shipping_agent_code), receipt_date DATETIME, receipt_number VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Documents`: (1, working, CD, UP, 2008-04-21 20:42:25, 19, z), (2, done, Paper, US, 1974-05-08 00:00:46, 34, h), (3, done, Paper, UP, 2014-12-25 17:22:44, 93, h), CREATE TABLE `Employees` ( employee_id INTEGER, role_code CHAR(15) REFERENCES Roles(role_code), employee_name VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Employees`: (1, ED, Koby, h), (2, ED, Kenyon, f), (3, PR, Haley, b), CREATE TABLE `Document_Drafts` ( document_id INTEGER PRIMARY KEY REFERENCES Documents(document_id), draft_number INTEGER PRIMARY KEY, draft_details VARCHAR(255) ); Sample rows from `Document_Drafts`: (1, 0, e), (1, 2, k), (2, 1, v), CREATE TABLE `Draft_Copies` ( document_id INTEGER PRIMARY KEY REFERENCES Document_Drafts(document_id), draft_number INTEGER PRIMARY KEY REFERENCES Document_Drafts(draft_number), copy_number INTEGER PRIMARY KEY ); Sample rows from `Draft_Copies`: (2, 8, 5), (4, 9, 6), (23, 9, 15), CREATE TABLE `Circulation_History` ( document_id INTEGER PRIMARY KEY REFERENCES Draft_Copies(document_id), draft_number INTEGER PRIMARY KEY REFERENCES Draft_Copies(draft_number), copy_number INTEGER PRIMARY KEY REFERENCES Draft_Copies(copy_number), employee_id INTEGER PRIMARY KEY REFERENCES Employees(employee_id) ); Sample rows from `Circulation_History`: (20, 17, 15, 8), (1, 2, 5, 1), (2, 1, 4, 2), CREATE TABLE `Documents_Mailed` ( document_id INTEGER PRIMARY KEY REFERENCES Documents(document_id), mailed_to_address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), mailing_date DATETIME ); Sample rows from `Documents_Mailed`: (2, 8, 1977-04-01 17:03:50), (4, 3, 1992-11-07 15:03:41), (4, 9, 1973-02-21 10:17:01), ",
        "output": "SELECT draft_details FROM document_drafts WHERE document_id = 7;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the female friends of Alice. ###filtered_database_schema: CREATE TABLE `Person` ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT ); Sample rows from `Person`: (Alice, 25, new york city, female, student), (Bob, 35, salt lake city, male, engineer), (Zach, 45, austin, male, doctor), CREATE TABLE `PersonFriend` ( name varchar(20) REFERENCES Person(name), friend varchar(20) REFERENCES Person(name), year INTEGER ); Sample rows from `PersonFriend`: (Alice, Bob, 10), (Zach, Dan, 12), (Bob, Zach, 5), ",
        "output": "SELECT t2.friend FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.friend WHERE t2.name  =  'Alice' AND t1.gender  =  'female'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the season, the player, and the name of the team that players belong to. ###filtered_database_schema: CREATE TABLE `country` ( Country_id INT PRIMARY KEY, Country_name TEXT, Capital TEXT, Official_native_language TEXT ); Sample rows from `country`: (1, Indonesia, Jakarta, Bahasa Indonesia), (2, Iran, Tehran, Persian ( Arabic script )), (3, Iraq, Baghdad, Arabic ( Arabic script ) Kurdish), CREATE TABLE `team` ( Team_id INT PRIMARY KEY, Name TEXT ); Sample rows from `team`: (1, Columbus Crew), (2, Evalyn Feil), (3, Anais VonRueden), CREATE TABLE `match_season` ( Season REAL PRIMARY KEY, Player TEXT, Position TEXT, Country INT REFERENCES country(Country_id), Team INT REFERENCES team(Team_id), Draft_Pick_Number INT, Draft_Class TEXT, College TEXT ); Sample rows from `match_season`: (1996.0, Steve Ralston Category:Articles with hCards, Midfielder, 6, 1, 18, 1996 MLS College Draft, Florida International), (1997.0, Mike Duhaney Category:Articles with hCards, Defender, 6, 2, 87, 1996 MLS Inaugural Player Draft, UNLV), (1998.0, Ben Olsen Category:Articles with hCards, Midfielder, 4, 3, 2, Project-40, Virginia), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Years_Played TEXT, Total_WL TEXT, Singles_WL TEXT, Doubles_WL TEXT, Team INT REFERENCES team(Team_id) ); Sample rows from `player`: (1, Cho Soong-Jae (630), 1 (2011), 2–0, 1–0, 1–0, 1), (2, Chung Hong (717), 1 (2011), 0–0, 0–0, 0–0, 1), (3, Im Kyu-tae (492), 8 (2003–2005, 2007–2011), 6–9, 5–7, 1–2, 1), ",
        "output": "SELECT t1.season ,  t1.player ,  t2.name FROM match_season as t1 JOIN team as t2 ON t1.team  =  t2.team_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: papers at NIPS related to TAIL ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the names and total passengers for all train stations not in London. ###filtered_database_schema: CREATE TABLE `station` ( Station_ID INT PRIMARY KEY, Name TEXT, Annual_entry_exit REAL, Annual_interchanges REAL, Total_Passengers REAL, Location TEXT, Main_Services TEXT, Number_of_Platforms INT ); Sample rows from `station`: (1, London Waterloo, 94.046, 9.489, 103.534, London, South Western Main Line West of England Main Line, 19), (2, London Victoria, 76.231, 9.157, 85.38, London, Brighton Main Line Chatham Main Line, 19), (3, London Bridge, 52.634, 8.742, 61.376, London, South Eastern Main Line Thameslink, 12), CREATE TABLE `train` ( Train_ID INT PRIMARY KEY, Name TEXT, Time TEXT, Service TEXT ); Sample rows from `train`: (1, Ananthapuri Express, 17:15, Daily), (2, Guruvayur Express, 22:10, Daily), (3, Guruvayur Express, 4:49, Daily), CREATE TABLE `train_station` ( Train_ID INT PRIMARY KEY REFERENCES train(Train_ID), Station_ID INT PRIMARY KEY REFERENCES station(Station_ID) ); Sample rows from `train_station`: (1, 1), (2, 1), (3, 1), ",
        "output": "SELECT name ,  total_passengers FROM station WHERE location != 'London'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the cities which have more than one airport and number of airports. ###filtered_database_schema: CREATE TABLE `routes` ( rid INTEGER, dst_apid INTEGER REFERENCES airports(apid), dst_ap varchar(4), src_apid bigint REFERENCES airports(apid), src_ap varchar(4), alid bigint REFERENCES airlines(alid), airline varchar(4), codeshare TEXT ); Sample rows from `routes`: (37, 2990, KZ, 2965, AER, 410, 2B, None), (38, 2990, KZ, 2966, ASF, 410, 2B, None), (39, 2962, MRV, 2966, ASF, 410, 2B, None), CREATE TABLE `airports` ( apid INTEGER, name TEXT, city TEXT, country TEXT, x REAL, y REAL, elevation bigint, iata character varchar(3), icao character varchar(4) ); Sample rows from `airports`: (1, Goroka Airport, Goroka, Papua New Guinea, 145.391998291, -6.081689834590001, 5282, GKA, AYGA), (2, Madang Airport, Madang, Papua New Guinea, 145.789001465, -5.20707988739, 20, MAG, AYMD), (3, Mount Hagen Kagamuga Airport, Mount Hagen, Papua New Guinea, 144.29600524902344, -5.826789855957031, 5388, HGU, AYMH), CREATE TABLE `airlines` ( alid INTEGER, name TEXT, iata varchar(2), icao varchar(3), callsign TEXT, country TEXT, active varchar(2) ); Sample rows from `airlines`: (-1, Unknown, -, N/A, None, None, Y), (1, Private flight, -, N/A, , , Y), (2, 135 Airways, , GNL, GENERAL, United States, N), ",
        "output": "SELECT city ,  COUNT(*) FROM airports GROUP BY city HAVING COUNT(*)  >  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: where is massachusetts ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT country_name FROM state WHERE state_name  =  \"massachusetts\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: people in boulder ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT population FROM city WHERE city_name  =  \"boulder\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the most cited paper at sigcomm ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.citedpaperid  ,  COUNT(t3.citingpaperid) FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigcomm\" GROUP BY t3.citedpaperid ORDER BY COUNT(t3.citingpaperid) DESC;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of products with price at most 200? ###filtered_database_schema: CREATE TABLE `Manufacturers` ( Code INTEGER, Name VARCHAR(255), Headquarter VARCHAR(255), Founder VARCHAR(255), Revenue REAL ); Sample rows from `Manufacturers`: (1, Sony, Tokyo, Andy, 120.0), (2, Creative Labs, Austin, Owen, 100.0), (3, Hewlett-Packard, Los Angeles, James, 50.0), CREATE TABLE `Products` ( Code INTEGER, Name VARCHAR(255), Price DECIMAL, Manufacturer INTEGER REFERENCES Manufacturers(Code) ); Sample rows from `Products`: (1, Hard drive, 240, 5), (2, Memory, 120, 6), (3, ZIP drive, 150, 4), ",
        "output": "SELECT name FROM products WHERE price  <=  200"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show all headquarters with both a company in banking industry and a company in Oil and gas. ###filtered_database_schema: CREATE TABLE `company` ( Company_ID INT PRIMARY KEY, Rank INT, Company TEXT, Headquarters TEXT, Main_Industry TEXT, Sales_billion REAL, Profits_billion REAL, Assets_billion REAL, Market_Value REAL ); Sample rows from `company`: (1, 1, ExxonMobil, USA, Oil and gas, 433.5, 41.1, 331.1, 407.4), (2, 3, General Electric, USA, Conglomerate, 147.3, 14.2, 717.2, 213.7), (3, 4, Royal Dutch Shell, Netherlands, Oil and gas, 470.2, 30.9, 340.5, 227.6), CREATE TABLE `gas_station` ( Station_ID INT PRIMARY KEY, Open_Year INT, Location TEXT, Manager_Name TEXT, Vice_Manager_Name TEXT, Representative_Name TEXT ); Sample rows from `gas_station`: (1, 1998, Herne Hill, BrianWingrave, Russell Denman, Clive Burr), (2, 1999, Channel Hill, SimonMarloe, Russell Brown, Rob Jefferies ), (3, 2000, Reading North, Simon Cope Derek Marloe, James Colin , Dave Edwards Roger ), CREATE TABLE `station_company` ( Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID), Company_ID INT PRIMARY KEY REFERENCES company(Company_ID), Rank_of_the_Year INT ); Sample rows from `station_company`: (11, 1, 1), (1, 3, 2), (6, 6, 3), ",
        "output": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many premises are there? ###filtered_database_schema: CREATE TABLE `Premises` ( premise_id INTEGER, premises_type VARCHAR(15), premise_details VARCHAR(255) ); Sample rows from `Premises`: (1, Warehouse, 036 Lueilwitz Harbor), (2, Warehouse, 676 Kelly Spur), (3, Residence, 27839 Carissa Tunnel Suite 048), CREATE TABLE `Products` ( product_id INTEGER, product_category VARCHAR(15), product_name VARCHAR(80) ); Sample rows from `Products`: (1, Food, Coffee Bean), (2, Electronics, Keyboard), (3, Books, Four Seasons), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method VARCHAR(15), customer_name VARCHAR(80), customer_phone VARCHAR(80), customer_email VARCHAR(80), customer_address VARCHAR(255), customer_login VARCHAR(80), customer_password VARCHAR(10) ); Sample rows from `Customers`: (1, Credit Card, Wendell, (773)971-9411x759, rodriguez.nathanael@example.net, 618 Webster Stream Apt. 161, None, b4459ad261), (2, Direct Debit, Gage, (402)890-2603x6005, stark.elna@example.net, 0260 Walker Trace, None, 7905d7f1b1), (3, Direct Debit, Elvera, 1-878-600-7193x8180, madyson.mclaughlin@example.org, 280 Landen Lake, None, 0b9f651030), CREATE TABLE `Mailshot_Campaigns` ( mailshot_id INTEGER, product_category VARCHAR(15), mailshot_name VARCHAR(80), mailshot_start_date DATETIME, mailshot_end_date DATETIME ); Sample rows from `Mailshot_Campaigns`: (1, food, US, 2018-02-15 09:52:17, 2018-03-08 14:40:20), (2, clothes, US, 2017-09-14 12:05:30, 2018-03-15 01:06:16), (3, food, FED, 2017-06-16 11:18:45, 2018-03-13 14:42:26), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER REFERENCES Customers(customer_id), premise_id INTEGER REFERENCES Premises(premise_id), date_address_from DATETIME, address_type_code VARCHAR(15), date_address_to DATETIME ); Sample rows from `Customer_Addresses`: (15, 1, 1992-08-23 21:17:38, Billing, 2018-02-28 20:54:58), (2, 2, 2010-02-23 02:49:50, Billing, 2018-03-15 18:34:41), (1, 1, 1975-12-24 10:01:37, Shipping, 2018-03-08 08:03:51), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status_code VARCHAR(15), shipping_method_code VARCHAR(15), order_placed_datetime DATETIME, order_delivered_datetime DATETIME, order_shipping_charges VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 2, Cancelled, Unspecified, 2015-06-15 18:19:26, 2018-03-20 12:00:00, 85.79), (2, 8, Cancelled, Unspecified, 2009-07-05 20:02:55, 2018-03-20 12:00:00, 98.4), (3, 9, Cancelled, FedEx, 2008-11-15 12:22:36, 2018-03-20 12:00:00, 36.87), CREATE TABLE `Mailshot_Customers` ( mailshot_id INTEGER REFERENCES Mailshot_Campaigns(mailshot_id), customer_id INTEGER REFERENCES Customers(customer_id), outcome_code VARCHAR(15), mailshot_customer_date DATETIME ); Sample rows from `Mailshot_Customers`: (4, 3, Order, 2018-03-15 15:43:14), (10, 1, No Response, 2018-03-04 13:06:55), (15, 9, No Response, 2018-03-11 11:32:20), CREATE TABLE `Order_Items` ( item_id INTEGER, order_item_status_code VARCHAR(15), order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), item_status_code VARCHAR(15), item_delivered_datetime DATETIME, item_order_quantity VARCHAR(80) ); Sample rows from `Order_Items`: (1, Delivered, 10, 13, good, 2018-02-25 18:22:10, 6), (2, Paid, 6, 7, good, 2018-02-27 18:04:55, 7), (3, Cancelled, 8, 1, good, 2018-03-16 15:58:27, 4), ",
        "output": "SELECT COUNT(*) FROM premises"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses? ###filtered_database_schema: CREATE TABLE `Course_Authors_and_Tutors` ( author_id INTEGER, author_tutor_ATB VARCHAR(3), login_name VARCHAR(40), password VARCHAR(40), personal_name VARCHAR(80), middle_name VARCHAR(80), family_name VARCHAR(80), gender_mf VARCHAR(1), address_line_1 VARCHAR(80) ); Sample rows from `Course_Authors_and_Tutors`: (1, 331, jmckenzie, c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b, Cathrine, Ruthie, Grant, 0, 756 Monahan Mews Spinkashire, NJ 64230-5098), (2, 975, heidenreich.ara, 24b0ee84063c3b017ab1839e01b7280f47f7c7c2, Retha, Corene, Armstrong, 0, 98623 Huels Manor Jasttown, DE 31611), (3, 349, clementina29, cdaf6c3483f19e2253659a40a3aab786a3390f78, Darius, Ethyl, Reichel, 0, 99296 Keeling Courts North Audreanne, IL 28272), CREATE TABLE `Students` ( student_id INTEGER, date_of_registration DATETIME, date_of_latest_logon DATETIME, login_name VARCHAR(40), password VARCHAR(10), personal_name VARCHAR(40), middle_name VARCHAR(40), family_name VARCHAR(40) ); Sample rows from `Students`: (1, 2015-07-22 13:32:35, 2017-10-17 22:52:26, annamae.hoppe, db8765bb6f, Wilson, Aubrey, Ward), (2, 2015-07-02 00:21:42, 2017-06-24 22:16:27, wmiller, 35faf8182a, Karson, Luella, Jaskolski), (3, 2015-10-11 03:23:27, 2018-03-10 23:22:23, ahartmann, 8e064ec4e6, Mariela, Brandt, Legros), CREATE TABLE `Subjects` ( subject_id INTEGER, subject_name VARCHAR(120) ); Sample rows from `Subjects`: (1, Computer Science), (2, Arts), (3, Language), CREATE TABLE `Courses` ( course_id INTEGER, author_id INTEGER REFERENCES Course_Authors_and_Tutors(author_id), subject_id INTEGER REFERENCES Subjects(subject_id), course_name VARCHAR(120), course_description VARCHAR(255) ); Sample rows from `Courses`: (1, 8, 1, database, database), (2, 6, 1, advanced database, advanced database), (3, 15, 1, operating system, operating system), CREATE TABLE `Student_Course_Enrolment` ( registration_id INTEGER, student_id INTEGER REFERENCES Students(student_id), course_id INTEGER REFERENCES Courses(course_id), date_of_enrolment DATETIME, date_of_completion DATETIME ); Sample rows from `Student_Course_Enrolment`: (1, 11, 2, 2017-10-09 07:09:02, 2018-02-26 07:48:52), (2, 15, 4, 2017-11-13 12:49:33, 2018-03-04 01:24:56), (3, 10, 8, 2017-10-17 13:50:40, 2018-03-22 02:53:01), CREATE TABLE `Student_Tests_Taken` ( registration_id INTEGER REFERENCES Student_Course_Enrolment(registration_id), date_test_taken DATETIME, test_result VARCHAR(255) ); Sample rows from `Student_Tests_Taken`: (12, 2018-03-25 03:27:16, Fail), (10, 2018-03-25 21:50:22, Pass), (7, 2018-03-21 00:32:25, Pass), ",
        "output": "SELECT t1.date_of_enrolment ,  t1.date_of_completion FROM student_course_enrolment as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id WHERE t2.family_name  =  \"Zieme\" AND t2.personal_name  =  \"Bernie\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: When did Luke S Zettlemoyer publish ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.year FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Luke S Zettlemoyer\" ORDER BY t3.year;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the location code for the country \"Canada\"? ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CV, CV, ), (BK, Book, ), (PR, Paper, ), CREATE TABLE `Ref_Calendar` ( Calendar_Date DATETIME PRIMARY KEY, Day_Number INTEGER ); Sample rows from `Ref_Calendar`: (1972-03-31 09:47:22, 5), (1976-06-15 03:40:06, 7), (1985-05-13 12:19:43, 7), CREATE TABLE `Ref_Locations` ( Location_Code CHAR(15) PRIMARY KEY, Location_Name VARCHAR(255), Location_Description VARCHAR(255) ); Sample rows from `Ref_Locations`: (b, Brazil, ), (c, Canada, ), (e, Edinburgh, ), CREATE TABLE `Roles` ( Role_Code CHAR(15) PRIMARY KEY, Role_Name VARCHAR(255), Role_Description VARCHAR(255) ); Sample rows from `Roles`: (MG, Manager, Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti.), (ED, Editor, Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos.), (PT, Photo, Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt.), CREATE TABLE `All_Documents` ( Document_ID INTEGER, Date_Stored DATETIME REFERENCES Ref_Calendar(Calendar_Date), Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255) ); Sample rows from `All_Documents`: (7, 1976-06-15 03:40:06, CV, Robin CV, None, None), (11, 1986-10-14 17:53:39, CV, Marry CV, None, None), (25, 2008-06-08 12:45:38, BK, One hundred years of solitude, None, None), CREATE TABLE `Employees` ( Employee_ID INTEGER, Role_Code CHAR(15) REFERENCES Roles(Role_Code), Employee_Name VARCHAR(255), Gender_MFU CHAR(1), Date_of_Birth DATETIME, Other_Details VARCHAR(255) ); Sample rows from `Employees`: (25, HR, Leo, , 1973-02-15 17:16:00, None), (30, MG, Ebba, , 1979-09-20 12:50:15, None), (38, ED, Stephanie, 1, 2012-03-30 23:02:28, None), CREATE TABLE `Document_Locations` ( Document_ID INTEGER PRIMARY KEY REFERENCES All_Documents(Document_ID), Location_Code CHAR(15) PRIMARY KEY REFERENCES Ref_Locations(Location_Code), Date_in_Location_From DATETIME PRIMARY KEY REFERENCES Ref_Calendar(Calendar_Date), Date_in_Locaton_To DATETIME REFERENCES Ref_Calendar(Calendar_Date) ); Sample rows from `Document_Locations`: (7, e, 2017-01-06 23:17:22, 2008-06-08 12:45:38), (11, x, 2017-01-06 23:17:22, 2012-07-03 09:48:46), (81, c, 1972-03-31 09:47:22, 1987-11-05 06:11:22), CREATE TABLE `Documents_to_be_Destroyed` ( Document_ID INTEGER REFERENCES All_Documents(Document_ID), Destruction_Authorised_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Destroyed_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Planned_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Actual_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Other_Details VARCHAR(255) ); Sample rows from `Documents_to_be_Destroyed`: (7, 156, 138, 1988-02-01 14:41:52, 2017-01-06 23:17:22, None), (11, 55, 173, 2010-11-26 19:22:50, 1986-10-14 17:53:39, None), (25, 183, 156, 2009-08-18 03:29:08, 1995-01-01 03:52:11, None), ",
        "output": "SELECT location_code FROM ref_locations WHERE location_name  =  \"Canada\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show all the planned delivery dates and actual delivery dates of bookings. ###filtered_database_schema: CREATE TABLE `Ref_Payment_Methods` ( payment_method_code CHAR(10) PRIMARY KEY, payment_method_description VARCHAR(80) ); Sample rows from `Ref_Payment_Methods`: (American E, credit), (MasterCard, debit), (Visa, Visa), CREATE TABLE `Ref_Service_Types` ( Service_Type_Code CHAR(15) PRIMARY KEY, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255) ); Sample rows from `Ref_Service_Types`: (1, 1, provide photo service), (2, 1, provide dinning service), (3, 1, provide filming service), CREATE TABLE `Addresses` ( Address_ID VARCHAR(100) PRIMARY KEY, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Addresses`: (110, 4753 Dach Highway, Suite 846, Feliciaberg, Florida, None), (124, 391 Vandervort Fall Apt. 446, Apt. 107, West Sherwoodstad, Indiana, None), (148, 809 Izabella Islands, Suite 271, Schadenville, Ohio, None), CREATE TABLE `Products` ( Product_ID VARCHAR(100) PRIMARY KEY, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Products`: (11, photo, 4448536, None, None), (154, film, 2302, None, None), (156, film, 17622723, None, None), CREATE TABLE `Marketing_Regions` ( Marketing_Region_Code CHAR(15) PRIMARY KEY, Marketing_Region_Name VARCHAR(255), Marketing_Region_Descriptrion VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Marketing_Regions`: (CA, Canada, Our target market, None), (CN, China, Our largest market, None), (ES, Spain, , None), CREATE TABLE `Clients` ( Client_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Clients`: (423, 201, branson94@example.net, Clifford, (042)912-3404x5135, VIP), (426, 383, alba04@example.com, Bettye, (604)849-0214, None), (478, 15, westley30@example.net, Reinhold, 1-048-214-4640x64380, None), CREATE TABLE `Drama_Workshop_Groups` ( Workshop_Group_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Currency_Code CHAR(15), Marketing_Region_Code CHAR(15), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Drama_Workshop_Groups`: (136, 383, EU, FR, Amely Cafe, 122-084-8029, amely.ruecker@example.com, None), (140, 180, EU, DE, Veda Film, 793-966-9311x5303, breitenberg.veda@example.com, None), (176, 286, EU, RU, Queen Art, 492-463-5967, quigley.queen@example.org, Good), CREATE TABLE `Performers` ( Performer_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Performers`: (153, 124, Shawna, 664.495.1939, krogahn@example.com, None), (211, 124, Ashley, 893-536-8857, preston45@example.net, None), (313, 39, Oren, 1-952-052-6685x28082, ferry.carolina@example.net, None), CREATE TABLE `Customers` ( Customer_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Customers`: (240, 286, Harold, 624-096-7791, jerde.harmon@example.com, None), (267, 98, Federico, 914-915-7483, johnson27@example.com, None), (304, 369, Samson, 1-463-121-4086x655, dalton75@example.com, None), CREATE TABLE `Stores` ( Store_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Marketing_Region_Code CHAR(15) REFERENCES Marketing_Regions(Marketing_Region_Code), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Stores`: (150, 286, IN, FJA Filming, +65(1)3590790358, fjacobson@example.com, None), (229, 266, CA, Rob Dinning, 1-327-185-9368, rborer@example.org, 5 stars), (231, 230, ES, Adan Dinning, 896-931-9633x869, adan93@example.com, None), CREATE TABLE `Bookings` ( Booking_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Clients(Client_ID), Workshop_Group_ID VARCHAR(100) REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Status_Code CHAR(15), Store_ID INTEGER, Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Bookings`: (1, 938, 140, good, 8, 2016-12-12 10:43:01, 2013-03-10 18:47:05, 1997-11-21 10:07:40, None), (2, 868, 838, stop, 7, 1976-08-20 00:33:08, 2009-07-09 09:18:38, 1976-01-08 07:19:23, None), (3, 735, 176, good, 9, 1975-11-23 06:28:47, 1989-01-05 19:24:45, 1990-03-16 19:38:47, None), CREATE TABLE `Performers_in_Bookings` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Performer_ID INTEGER PRIMARY KEY REFERENCES Performers(Performer_ID) ); Sample rows from `Performers_in_Bookings`: (1, 153), (1, 341), (2, 466), CREATE TABLE `Customer_Orders` ( Order_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Store_ID INTEGER REFERENCES Stores(Store_ID), Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 516, 231, 1994-08-03 12:34:58, 1977-03-11 03:58:19, 1992-07-21 22:11:11, None), (2, 418, 229, 2014-07-10 10:56:01, 1996-08-26 19:19:59, 1998-08-22 17:57:32, None), (3, 712, 229, 1981-06-20 16:29:43, 1980-12-19 05:49:35, 2011-04-13 07:15:35, None), CREATE TABLE `Order_Items` ( Order_Item_ID INTEGER, Order_ID INTEGER REFERENCES Customer_Orders(Order_ID), Product_ID INTEGER REFERENCES Products(Product_ID), Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 3, 233, 1, None), (2, 15, 300, 2, None), (3, 12, 300, 1, None), CREATE TABLE `Invoices` ( Invoice_ID INTEGER, Order_ID INTEGER REFERENCES Bookings(Booking_ID) REFERENCES Customer_Orders(Order_ID), payment_method_code CHAR(15) REFERENCES Ref_Payment_Methods(payment_method_code), Product_ID INTEGER, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER ); Sample rows from `Invoices`: (128, 14, MasterCard, 4, 2, None, 1), (162, 13, MasterCard, 9, 2, None, 9), (164, 7, Visa, 7, 2, None, 1), CREATE TABLE `Services` ( Service_ID INTEGER PRIMARY KEY, Service_Type_Code CHAR(15) REFERENCES Ref_Service_Types(Service_Type_Code), Workshop_Group_ID INTEGER REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Services`: (191, 1, 415, None, film, 58932775.8822, None), (219, 2, 838, None, film, 2704.4719, None), (220, 1, 708, None, dinning, 6888.8306, None), CREATE TABLE `Bookings_Services` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Product_ID INTEGER PRIMARY KEY REFERENCES Services(Service_ID) ); Sample rows from `Bookings_Services`: (1, 396), (1, 779), (4, 191), CREATE TABLE `Invoice_Items` ( Invoice_Item_ID INTEGER, Invoice_ID INTEGER REFERENCES Invoices(Invoice_ID), Order_ID INTEGER REFERENCES Bookings_Services(Order_ID), Order_Item_ID INTEGER REFERENCES Order_Items(Order_Item_ID), Product_ID INTEGER REFERENCES Bookings_Services(Product_ID), Order_Quantity INTEGER, Other_Item_Details VARCHAR(255) ); Sample rows from `Invoice_Items`: (1, 128, 1, 5, 396, 2, None), (2, 162, 4, 6, 191, 6, Good quality), ",
        "output": "SELECT planned_delivery_date ,  actual_delivery_date FROM bookings"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many distinct transaction types are used in the transactions? ###filtered_database_schema: CREATE TABLE `Investors` ( investor_id INTEGER, Investor_details VARCHAR(255) ); Sample rows from `Investors`: (1, z), (2, z), (3, d), CREATE TABLE `Lots` ( lot_id INTEGER, investor_id INTEGER REFERENCES Investors(investor_id), lot_details VARCHAR(255) ); Sample rows from `Lots`: (1, 13, r), (2, 16, z), (3, 10, s), CREATE TABLE `Ref_Transaction_Types` ( transaction_type_code VARCHAR(10) PRIMARY KEY, transaction_type_description VARCHAR(80) ); Sample rows from `Ref_Transaction_Types`: (SALE, Sale), (PUR, Purchase), CREATE TABLE `Transactions` ( transaction_id INTEGER, investor_id INTEGER REFERENCES Investors(investor_id), transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code), date_of_transaction DATETIME, amount_of_transaction DECIMAL(19,4), share_count VARCHAR(40), other_details VARCHAR(255) ); Sample rows from `Transactions`: (1, 6, SALE, 1988-09-16 19:02:51, 302507.6996, 8718572, None), (2, 18, PUR, 1982-06-06 17:19:00, 27.257, 9, None), (3, 2, SALE, 1979-04-27 06:03:59, 48777.969, 8580, None), CREATE TABLE `Sales` ( sales_transaction_id INTEGER REFERENCES Transactions(transaction_id), sales_details VARCHAR(255) ); Sample rows from `Sales`: (1, x), (2, o), (3, a), CREATE TABLE `Purchases` ( purchase_transaction_id INTEGER REFERENCES Transactions(transaction_id), purchase_details VARCHAR(255) ); Sample rows from `Purchases`: (1, c), (2, y), (3, i), CREATE TABLE `Transactions_Lots` ( transaction_id INTEGER REFERENCES Transactions(transaction_id), lot_id INTEGER REFERENCES Lots(lot_id) ); Sample rows from `Transactions_Lots`: (3, 11), (3, 8), (2, 11), ",
        "output": "SELECT COUNT(DISTINCT transaction_type_code) FROM transactions"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Please list the age and famous title of artists in descending order of age. ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Artist TEXT, Age INT, Famous_Title TEXT, Famous_Release_date TEXT ); Sample rows from `artist`: (1, Gorgoroth, 34, Bergen 1996, November 2007), (2, Ophiolatry, 35, Transmutation, January 21, 2008), (3, Ophiolatry, 22, Antievangelistical Process (re-release), 2009), CREATE TABLE `volume` ( Volume_ID INT PRIMARY KEY, Volume_Issue TEXT, Issue_Date TEXT, Weeks_on_Top REAL, Song TEXT, Artist_ID INT REFERENCES artist(Artist_ID) ); Sample rows from `volume`: (1, 45:14 §, 27 December 1986 - 10 January, 3.0, The Way, 1), (2, 45:15, 17 January, 1.0, Everybody Have Fun Tonight , 2), (3, 45:16, 24 January, 1.0, Walk Like an Egyptian , 1), CREATE TABLE `music_festival` ( ID INT PRIMARY KEY, Music_Festival TEXT, Date_of_ceremony TEXT, Category TEXT, Volume INT REFERENCES volume(Volume_ID), Result TEXT ); Sample rows from `music_festival`: (1, 34th England Academy Prize, 18 February 2011, Best Song, 1, Nominated), (2, 34th Japan Academy Prize, 18 February 2011, Best Lyrics, 2, Nominated), (3, 34th European Academy Prize, 18 February 2011, Best Song, 3, Awarded), ",
        "output": "SELECT famous_title ,  age FROM artist ORDER BY age DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many routes go from the United States to Canada? ###filtered_database_schema: CREATE TABLE `routes` ( rid INTEGER, dst_apid INTEGER REFERENCES airports(apid), dst_ap varchar(4), src_apid bigint REFERENCES airports(apid), src_ap varchar(4), alid bigint REFERENCES airlines(alid), airline varchar(4), codeshare TEXT ); Sample rows from `routes`: (37, 2990, KZ, 2965, AER, 410, 2B, None), (38, 2990, KZ, 2966, ASF, 410, 2B, None), (39, 2962, MRV, 2966, ASF, 410, 2B, None), CREATE TABLE `airports` ( apid INTEGER, name TEXT, city TEXT, country TEXT, x REAL, y REAL, elevation bigint, iata character varchar(3), icao character varchar(4) ); Sample rows from `airports`: (1, Goroka Airport, Goroka, Papua New Guinea, 145.391998291, -6.081689834590001, 5282, GKA, AYGA), (2, Madang Airport, Madang, Papua New Guinea, 145.789001465, -5.20707988739, 20, MAG, AYMD), (3, Mount Hagen Kagamuga Airport, Mount Hagen, Papua New Guinea, 144.29600524902344, -5.826789855957031, 5388, HGU, AYMH), CREATE TABLE `airlines` ( alid INTEGER, name TEXT, iata varchar(2), icao varchar(3), callsign TEXT, country TEXT, active varchar(2) ); Sample rows from `airlines`: (-1, Unknown, -, N/A, None, None, Y), (1, Private flight, -, N/A, , , Y), (2, 135 Airways, , GNL, GENERAL, United States, N), ",
        "output": "SELECT COUNT(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many donors have endowment for school named \"Glenn\"? ###filtered_database_schema: CREATE TABLE `School` ( School_id TEXT PRIMARY KEY, School_name TEXT, Location TEXT, Mascot TEXT, Enrollment INT, IHSAA_Class TEXT, IHSAA_Football_Class TEXT, County TEXT ); Sample rows from `School`: (1, Bremen, Bremen, Lions, 495, AA, AA, 50 Marshall), (2, Culver Community, Culver, Cavaliers, 287, A, A, 50 Marshall), (3, Glenn, Walkerton, Falcons, 605, AAA, AAA, 71 St. Joseph), CREATE TABLE `budget` ( School_id INT PRIMARY KEY REFERENCES School(School_id), Year INT PRIMARY KEY, Budgeted INT, total_budget_percent_budgeted REAL, Invested INT, total_budget_percent_invested REAL, Budget_invested_percent TEXT ); Sample rows from `budget`: (2, 1999, 4979, 2.0, 2134, 2.0, 42.9), (2, 2000, 3666, 2.0, 5840, 2.0, 159.3), (2, 2001, 6803, 2.0, 8335, 2.0, 122.5), CREATE TABLE `endowment` ( endowment_id INT PRIMARY KEY, School_id INT REFERENCES School(School_id), donator_name TEXT, amount REAL ); Sample rows from `endowment`: (1, 1, Monte Plata, 9.51), (2, 2, San José de Ocoa, 9.83), (3, 3, Distrito Nacional, 9.55), ",
        "output": "SELECT COUNT(DISTINCT t1.donator_name) FROM endowment as t1 JOIN school as t2 ON t1.school_id  =  t2.school_id WHERE t2.school_name  =  \"Glenn\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the booking status code of the apartment with apartment number \"Suite 634\"? ###filtered_database_schema: CREATE TABLE `Apartment_Buildings` ( building_id INTEGER PRIMARY KEY, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80) ); Sample rows from `Apartment_Buildings`: (133, Normandie Court, Normandie Court, Studio, 7950 Casper Vista Apt. 176 Marquiseberg, CA 70496, Emma, (948)040-1064x387), (153, Mercedes House, Mercedes House, Studio, 354 Otto Villages Charliefort, VT 71664, Brenden, 915-617-2408x832), (191, The Eugene, The Eugene, Flat, 71537 Gorczany Inlet Wisozkburgh, AL 08256, Melyssa, (609)946-0491), CREATE TABLE `Apartments` ( apt_id INTEGER PRIMARY KEY, building_id INTEGER REFERENCES Apartment_Buildings(building_id), apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5) ); Sample rows from `Apartments`: (1, 808, Flat, Suite 645, 1, 3, 7), (2, 624, Flat, Apt. 585, 2, 4, 5), (3, 225, Studio, Apt. 908, 1, 6, 7), CREATE TABLE `Apartment_Facilities` ( apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id), facility_code CHAR(15) PRIMARY KEY ); Sample rows from `Apartment_Facilities`: (1, Boardband), (2, Boardband), (3, Gym), CREATE TABLE `Guests` ( guest_id INTEGER PRIMARY KEY, gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME ); Sample rows from `Guests`: (1, Male, Kip, DuBuque, 1995-11-04 07:09:57), (2, Unknown, Rebeca, Runolfsdottir, 1974-05-12 21:53:58), (3, Female, Keon, Treutel, 1974-08-20 09:28:05), CREATE TABLE `Apartment_Bookings` ( apt_booking_id INTEGER PRIMARY KEY, apt_id INTEGER REFERENCES Apartments(apt_id), guest_id INTEGER REFERENCES Guests(guest_id), booking_status_code CHAR(15), booking_start_date DATETIME, booking_end_date DATETIME ); Sample rows from `Apartment_Bookings`: (258, 10, 2, Provisional, 2016-09-26 17:13:49, 2017-10-07 11:38:48), (279, 15, 15, Provisional, 2016-04-01 06:28:08, 2017-10-25 11:08:42), (337, 8, 5, Provisional, 2017-03-13 16:20:14, 2018-02-19 16:59:08), CREATE TABLE `View_Unit_Status` ( apt_id INTEGER REFERENCES Apartments(apt_id), apt_booking_id INTEGER REFERENCES Apartment_Bookings(apt_booking_id), status_date DATETIME PRIMARY KEY, available_yn BIT ); Sample rows from `View_Unit_Status`: (11, 920, 1970-09-28 10:24:29, 1), (15, 575, 1972-03-23 22:55:53, 1), (15, 924, 1973-10-28 04:30:14, 1), ",
        "output": "SELECT t1.booking_status_code FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.apt_number  =  \"Suite 634\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of voting records for each election cycle. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Voting_record` ( StuID INTEGER REFERENCES Student(StuID), Registration_Date VARCHAR(12), Election_Cycle VARCHAR(12), President_Vote INTEGER REFERENCES Student(StuID), Vice_President_Vote INTEGER REFERENCES Student(StuID), Secretary_Vote INTEGER REFERENCES Student(StuID), Treasurer_Vote INTEGER REFERENCES Student(StuID), Class_President_Vote INTEGER REFERENCES Student(StuID), Class_Senator_Vote INTEGER REFERENCES Student(StuID) ); Sample rows from `Voting_record`: (1001, 08/30/2015, Spring, 1004, 1007, 1010, 1035, 1001, 1028), (1002, 08/30/2014, Spring, 1014, 1007, 1020, 1025, 1021, 1028), (1003, 08/30/2013, Spring, 1004, 1017, 1030, 1035, 1031, 1028), ",
        "output": "SELECT election_cycle ,  COUNT(*) FROM voting_record GROUP BY election_cycle"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of all reviewers who have ratings with a NULL value for the date. ###filtered_database_schema: CREATE TABLE `Movie` ( mID INT PRIMARY KEY, title TEXT, year INT, director TEXT ); Sample rows from `Movie`: (101, Gone with the Wind, 1939, Victor Fleming), (102, Star Wars, 1977, George Lucas), (103, The Sound of Music, 1965, Robert Wise), CREATE TABLE `Reviewer` ( rID INT PRIMARY KEY, name TEXT ); Sample rows from `Reviewer`: (201, Sarah Martinez), (202, Daniel Lewis), (203, Brittany Harris), CREATE TABLE `Rating` ( rID INT REFERENCES Reviewer(rID), mID INT REFERENCES Movie(mID), stars INT, ratingDate date ); Sample rows from `Rating`: (201, 101, 2, 2011-01-22), (201, 101, 4, 2011-01-27), (202, 106, 4, None), ",
        "output": "SELECT DISTINCT name FROM reviewer as t1 JOIN rating as t2 ON t1.rid  =  t2.rid WHERE ratingdate  =  \"null\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what wyoming city has the largest population ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For each staff id, what is the description of the role that is involved with the most number of projects? ###filtered_database_schema: CREATE TABLE `Document_Types` ( document_type_code VARCHAR(10) PRIMARY KEY, document_description VARCHAR(255) ); Sample rows from `Document_Types`: (APP, Initial Application), (REG, Regular), CREATE TABLE `Documents` ( document_id INTEGER, document_type_code VARCHAR(10) REFERENCES Document_Types(document_type_code), grant_id INTEGER REFERENCES Grants(grant_id), sent_date DATETIME, response_received_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Documents`: (1, APP, 5, 1986-11-30 07:56:35, 1977-12-01 02:18:53, ), (2, APP, 13, 2004-01-23 11:57:08, 1979-12-08 10:38:07, ), (3, REG, 10, 1999-03-03 12:25:58, 1995-09-12 13:13:48, ), CREATE TABLE `Grants` ( grant_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), grant_amount DECIMAL(19,4), grant_start_date DATETIME, grant_end_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Grants`: (1, 10, 4094.542, 2016-11-20 00:18:51, 2004-10-24 09:09:39, et), (2, 3, 281.2446, 1985-10-09 20:08:49, 1985-06-08 00:22:07, occaecati), (3, 14, 4515947.7015, 1970-09-19 22:53:49, 1989-03-16 18:27:16, et), CREATE TABLE `Organisation_Types` ( organisation_type VARCHAR(10) PRIMARY KEY, organisation_type_description VARCHAR(255) ); Sample rows from `Organisation_Types`: (RES, Research), (SPON, Sponsor), CREATE TABLE `Organisations` ( organisation_id INTEGER, organisation_type VARCHAR(10) REFERENCES Organisation_Types(organisation_type), organisation_details VARCHAR(255) ); Sample rows from `Organisations`: (1, RES, et), (2, RES, eius), (3, RES, impedit), CREATE TABLE `Project_Outcomes` ( project_id INTEGER REFERENCES Projects(project_id), outcome_code VARCHAR(10) REFERENCES Research_Outcomes(outcome_code), outcome_details VARCHAR(255) ); Sample rows from `Project_Outcomes`: (4, Paper, None), (3, Patent, None), (9, Paper, None), CREATE TABLE `Project_Staff` ( staff_id DOUBLE PRIMARY KEY, project_id INTEGER REFERENCES Projects(project_id), role_code VARCHAR(10) REFERENCES Staff_Roles(role_code), date_from DATETIME, date_to DATETIME, other_details VARCHAR(255) ); Sample rows from `Project_Staff`: (0.0, 2, leader, 1981-10-04 22:44:50, 1985-05-30 22:26:30, None), (674810.0, 5, leader, 2003-04-19 15:06:20, 2010-12-08 11:55:36, None), (779.0, 2, researcher, 1981-10-09 21:32:53, 2004-12-16 13:03:36, None), CREATE TABLE `Projects` ( project_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), project_details VARCHAR(255) ); Sample rows from `Projects`: (1, 15, porro), (2, 11, et), (3, 7, sint), CREATE TABLE `Research_Outcomes` ( outcome_code VARCHAR(10) PRIMARY KEY, outcome_description VARCHAR(255) ); Sample rows from `Research_Outcomes`: (Paper, Published Research Paper), (Patent, Research Patent), CREATE TABLE `Research_Staff` ( staff_id INTEGER, employer_organisation_id INTEGER REFERENCES Organisations(organisation_id), staff_details VARCHAR(255) ); Sample rows from `Research_Staff`: (1, 1, quo), (2, 4, est), (3, 5, aspernatur), CREATE TABLE `Staff_Roles` ( role_code VARCHAR(10) PRIMARY KEY, role_description VARCHAR(255) ); Sample rows from `Staff_Roles`: (leader, Project Leader), (researcher, Project Researcher), CREATE TABLE `Tasks` ( task_id INTEGER, project_id INTEGER REFERENCES Projects(project_id), task_details VARCHAR(255), eg Agree Objectives VARCHAR(1) ); Sample rows from `Tasks`: (1, 1, a, None), (2, 2, b, None), (3, 3, c, None), ",
        "output": "SELECT t1.role_description ,  t2.staff_id FROM staff_roles as t1 JOIN project_staff as t2 ON t1.role_code  =  t2.role_code JOIN project_outcomes as t3 ON t2.project_id  =  t3.project_id GROUP BY t2.staff_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the major of each male student. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Voting_record` ( StuID INTEGER REFERENCES Student(StuID), Registration_Date VARCHAR(12), Election_Cycle VARCHAR(12), President_Vote INTEGER REFERENCES Student(StuID), Vice_President_Vote INTEGER REFERENCES Student(StuID), Secretary_Vote INTEGER REFERENCES Student(StuID), Treasurer_Vote INTEGER REFERENCES Student(StuID), Class_President_Vote INTEGER REFERENCES Student(StuID), Class_Senator_Vote INTEGER REFERENCES Student(StuID) ); Sample rows from `Voting_record`: (1001, 08/30/2015, Spring, 1004, 1007, 1010, 1035, 1001, 1028), (1002, 08/30/2014, Spring, 1014, 1007, 1020, 1025, 1021, 1028), (1003, 08/30/2013, Spring, 1004, 1017, 1030, 1035, 1031, 1028), ",
        "output": "SELECT major FROm student WHERE sex  =  \"m\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show card number, name, and hometown for all members in a descending order of level. ###filtered_database_schema: CREATE TABLE `member` ( Member_ID INT PRIMARY KEY, Card_Number TEXT, Name TEXT, Hometown TEXT, Level INT ); Sample rows from `member`: (1, LE99, Jeremy Jarmon, Collierville, Tennessee, 6), (2, LT98, Myron Pryor, Louisville, Kentucky, 6), (3, RT91, Corey Peters, Louisville, Kentucky, 6), CREATE TABLE `branch` ( Branch_ID INT PRIMARY KEY, Name TEXT, Open_year TEXT, Address_road TEXT, City TEXT, membership_amount TEXT ); Sample rows from `branch`: (1, Alexandre, 2001, Valleys Place, London, 112), (2, Popert, 2009, Oaks Crescent, London, 11), (3, Stanley, 2013, Abbott Street, London, 6), CREATE TABLE `membership_register_branch` ( Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Branch_ID TEXT REFERENCES branch(Branch_ID), Register_Year TEXT ); Sample rows from `membership_register_branch`: (1, 1, 2016), (2, 4, 2016), (3, 1, 2017), CREATE TABLE `purchase` ( Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Branch_ID TEXT PRIMARY KEY REFERENCES branch(Branch_ID), Year TEXT PRIMARY KEY, Total_pounds REAL ); Sample rows from `purchase`: (1, 3, 2018, 2013.32), (2, 5, 2018, 321.13), (3, 1, 2017, 988.09), ",
        "output": "SELECT card_number ,  name ,  hometown FROM member ORDER BY level DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the document ids for any documents with the status code done and the type code paper. ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( document_type_code CHAR(15) PRIMARY KEY, document_type_description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CD, b), (Paper, u), (Hard Drive, f), CREATE TABLE `Roles` ( role_code CHAR(15) PRIMARY KEY, role_description VARCHAR(255) ); Sample rows from `Roles`: (ED, Editor), (PT, Photo), (MG, Manager), CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (0, IT), (1, MX), (2, DE), CREATE TABLE `Ref_Document_Status` ( document_status_code CHAR(15) PRIMARY KEY, document_status_description VARCHAR(255) ); Sample rows from `Ref_Document_Status`: (working, currently working on), (done, mailed), (overdue, mailed late), CREATE TABLE `Ref_Shipping_Agents` ( shipping_agent_code CHAR(15) PRIMARY KEY, shipping_agent_name VARCHAR(255), shipping_agent_description VARCHAR(255) ); Sample rows from `Ref_Shipping_Agents`: (UP, UPS, g), (US, USPS, q), (AL, Airline, w), CREATE TABLE `Documents` ( document_id INTEGER, document_status_code CHAR(15) REFERENCES Ref_Document_Status(document_status_code), document_type_code CHAR(15) REFERENCES Ref_Document_Types(document_type_code), shipping_agent_code CHAR(15) REFERENCES Ref_Shipping_Agents(shipping_agent_code), receipt_date DATETIME, receipt_number VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Documents`: (1, working, CD, UP, 2008-04-21 20:42:25, 19, z), (2, done, Paper, US, 1974-05-08 00:00:46, 34, h), (3, done, Paper, UP, 2014-12-25 17:22:44, 93, h), CREATE TABLE `Employees` ( employee_id INTEGER, role_code CHAR(15) REFERENCES Roles(role_code), employee_name VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Employees`: (1, ED, Koby, h), (2, ED, Kenyon, f), (3, PR, Haley, b), CREATE TABLE `Document_Drafts` ( document_id INTEGER PRIMARY KEY REFERENCES Documents(document_id), draft_number INTEGER PRIMARY KEY, draft_details VARCHAR(255) ); Sample rows from `Document_Drafts`: (1, 0, e), (1, 2, k), (2, 1, v), CREATE TABLE `Draft_Copies` ( document_id INTEGER PRIMARY KEY REFERENCES Document_Drafts(document_id), draft_number INTEGER PRIMARY KEY REFERENCES Document_Drafts(draft_number), copy_number INTEGER PRIMARY KEY ); Sample rows from `Draft_Copies`: (2, 8, 5), (4, 9, 6), (23, 9, 15), CREATE TABLE `Circulation_History` ( document_id INTEGER PRIMARY KEY REFERENCES Draft_Copies(document_id), draft_number INTEGER PRIMARY KEY REFERENCES Draft_Copies(draft_number), copy_number INTEGER PRIMARY KEY REFERENCES Draft_Copies(copy_number), employee_id INTEGER PRIMARY KEY REFERENCES Employees(employee_id) ); Sample rows from `Circulation_History`: (20, 17, 15, 8), (1, 2, 5, 1), (2, 1, 4, 2), CREATE TABLE `Documents_Mailed` ( document_id INTEGER PRIMARY KEY REFERENCES Documents(document_id), mailed_to_address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), mailing_date DATETIME ); Sample rows from `Documents_Mailed`: (2, 8, 1977-04-01 17:03:50), (4, 3, 1992-11-07 15:03:41), (4, 9, 1973-02-21 10:17:01), ",
        "output": "SELECT document_id FROM documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which parts have more than 2 faults? Show the part name and id. ###filtered_database_schema: CREATE TABLE `Third_Party_Companies` ( company_id INTEGER, company_type VARCHAR(5), company_name VARCHAR(255), company_address VARCHAR(255), other_company_details VARCHAR(255) ); Sample rows from `Third_Party_Companies`: (1, Maintenance Contractor, Langworth-Funk, 615 Jacobs Mews, Uganda), (2, Maintenance Contractor, McDermott Group, 873 Conrad Creek Apt. 286, China), (3, Maintenance Contractor, Schuppe-Carroll, 066 Bechtelar Ridge, United Arab Emirates), CREATE TABLE `Maintenance_Contracts` ( maintenance_contract_id INTEGER, maintenance_contract_company_id INTEGER REFERENCES Third_Party_Companies(company_id), contract_start_date DATETIME, contract_end_date DATETIME, other_contract_details VARCHAR(255) ); Sample rows from `Maintenance_Contracts`: (1, 15, 2017-09-13 11:51:29, 2018-03-16 21:21:50, None), (2, 9, 2017-12-18 11:43:16, 2018-03-22 06:00:37, None), (3, 11, 2017-05-06 02:32:19, 2018-03-20 14:02:54, None), CREATE TABLE `Parts` ( part_id INTEGER, part_name VARCHAR(255), chargeable_yn VARCHAR(1), chargeable_amount VARCHAR(20), other_part_details VARCHAR(255) ); Sample rows from `Parts`: (1, top, 0, 4, None), (2, middle, 1, 9, None), (3, package, 1, 9, None), CREATE TABLE `Skills` ( skill_id INTEGER, skill_code VARCHAR(20), skill_description VARCHAR(255) ); Sample rows from `Skills`: (1, ELEC, Electrical), (2, MECH, Mechanical), (3, TV, TV, Video), CREATE TABLE `Staff` ( staff_id INTEGER, staff_name VARCHAR(255), gender VARCHAR(1), other_staff_details VARCHAR(255) ); Sample rows from `Staff`: (1, Audreanne, 1, Manager), (2, Berneice, 1, Manager), (3, Helena, 1, None), CREATE TABLE `Assets` ( asset_id INTEGER, maintenance_contract_id INTEGER REFERENCES Maintenance_Contracts(maintenance_contract_id), supplier_company_id INTEGER REFERENCES Third_Party_Companies(company_id), asset_details VARCHAR(255), asset_make VARCHAR(20), asset_model VARCHAR(20), asset_acquired_date DATETIME, asset_disposed_date DATETIME, other_asset_details VARCHAR(255) ); Sample rows from `Assets`: (1, 2, 2, dell laptop1, PT, 58 ub, 2017-12-25 00:31:27, 2018-03-14 10:50:00, None), (2, 14, 1, dell laptop2, IN, 35 xt, 2018-01-27 00:59:46, 2018-03-20 04:24:09, None), (3, 7, 2, dell laptop3, IT, 63 ok, 2017-09-07 08:13:15, 2018-03-08 20:50:40, Bad condition), CREATE TABLE `Asset_Parts` ( asset_id INTEGER REFERENCES Assets(asset_id), part_id INTEGER REFERENCES Parts(part_id) ); Sample rows from `Asset_Parts`: (5, 3), (3, 3), (10, 1), CREATE TABLE `Maintenance_Engineers` ( engineer_id INTEGER, company_id INTEGER REFERENCES Third_Party_Companies(company_id), first_name VARCHAR(50), last_name VARCHAR(50), other_details VARCHAR(255) ); Sample rows from `Maintenance_Engineers`: (1, 14, Etha, Reinger, Skilled), (2, 2, Clemens, Orn, None), (3, 6, Samanta, Hauck, None), CREATE TABLE `Engineer_Skills` ( engineer_id INTEGER REFERENCES Maintenance_Engineers(engineer_id), skill_id INTEGER REFERENCES Skills(skill_id) ); Sample rows from `Engineer_Skills`: (10, 2), (10, 1), (15, 1), CREATE TABLE `Fault_Log` ( fault_log_entry_id INTEGER, asset_id INTEGER REFERENCES Assets(asset_id), recorded_by_staff_id INTEGER REFERENCES Staff(staff_id), fault_log_entry_datetime DATETIME, fault_description VARCHAR(255), other_fault_details VARCHAR(255) ); Sample rows from `Fault_Log`: (1, 3, 14, 2018-03-21 04:25:00, system error, None), (2, 7, 4, 2018-03-13 09:43:05, system error, None), (3, 6, 9, 2018-02-24 09:28:20, system error, None), CREATE TABLE `Engineer_Visits` ( engineer_visit_id INTEGER, contact_staff_id INTEGER REFERENCES Staff(staff_id), engineer_id INTEGER REFERENCES Maintenance_Engineers(engineer_id), fault_log_entry_id INTEGER REFERENCES Fault_Log(fault_log_entry_id), fault_status VARCHAR(10), visit_start_datetime DATETIME, visit_end_datetime DATETIME, other_visit_details VARCHAR(255) ); Sample rows from `Engineer_Visits`: (1, 8, 8, 13, Waiting, 1978-10-12 23:14:40, 1988-01-07 06:41:51, None), (2, 7, 15, 13, Return, 1980-05-02 23:31:18, 1990-08-30 22:44:16, None), (3, 7, 15, 4, Waiting, 2010-02-23 18:16:23, 1982-05-13 02:08:41, None), CREATE TABLE `Part_Faults` ( part_fault_id INTEGER, part_id INTEGER REFERENCES Parts(part_id), fault_short_name VARCHAR(20), fault_description VARCHAR(255), other_fault_details VARCHAR(255) ); Sample rows from `Part_Faults`: (1, 1, PW, Package Wrong, None), (2, 1, PW, Package Wrong, None), (3, 3, TW, Top Parts Wrong, None), CREATE TABLE `Fault_Log_Parts` ( fault_log_entry_id INTEGER REFERENCES Fault_Log(fault_log_entry_id), part_fault_id INTEGER REFERENCES Part_Faults(part_fault_id), fault_status VARCHAR(10) ); Sample rows from `Fault_Log_Parts`: (12, 3, Reported), (7, 4, Reported), (1, 9, Return), CREATE TABLE `Skills_Required_To_Fix` ( part_fault_id INTEGER REFERENCES Part_Faults(part_fault_id), skill_id INTEGER REFERENCES Skills(skill_id) ); Sample rows from `Skills_Required_To_Fix`: (3, 2), (12, 3), (6, 1), ",
        "output": "SELECT t1.part_name ,  t1.part_id FROM parts as t1 JOIN part_faults as t2 ON t1.part_id  =  t2.part_id GROUP BY t1.part_id HAVING COUNT(*)  >  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the conference, which published \" Making database systems usable \" . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT t1.name FROM publication as t2 JOIN conference as t1 ON t2.cid  =  t1.cid WHERE t2.title  =  \"Making database systems usable\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Who published the most papers in 2007 at CVPR ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(t2.paperid)  ,  t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT(t2.paperid) DESC;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what papers have fewer than 5 citations by ACL papers ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.citingpaperid FROM paper as t1 JOIN cite as t3 ON t1.paperid  =  t3.citedpaperid JOIN venue as t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT(DISTINCT t3.citedpaperid)  <  5;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many distinct programs are broadcast at \"Night\" time? ###filtered_database_schema: CREATE TABLE `program` ( Program_ID INT PRIMARY KEY, Name TEXT, Origin TEXT, Launch REAL, Owner TEXT ); Sample rows from `program`: (1, Aniworld, Hunan, 2005.0, Hunan Broadcasting System (HBS)), (2, Kaku, Beijing, 2004.0, Beijing Television (BTV)), (3, Toonmax, Shanghai, 2005.0, Shanghai Media Group (SMG)), CREATE TABLE `channel` ( Channel_ID INT PRIMARY KEY, Name TEXT, Owner TEXT, Share_in_percent REAL, Rating_in_percent REAL ); Sample rows from `channel`: (1, CCTV-1, CCTV, 4.9, 0.54), (2, Hunan Satellite TV, HBS, 4.81, 0.53), (3, CCTV-8, CCTV, 3.76, 0.41), CREATE TABLE `broadcast` ( Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID), Program_ID INT PRIMARY KEY REFERENCES program(Program_ID), Time_of_day TEXT ); Sample rows from `broadcast`: (1, 1, Morning), (2, 1, Night), (3, 2, Morning), CREATE TABLE `broadcast_share` ( Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID), Program_ID INT PRIMARY KEY REFERENCES program(Program_ID), Date TEXT, Share_in_percent REAL ); Sample rows from `broadcast_share`: (1, 1, 01,May, 3.1), (2, 1, 02,May, 1.8), (3, 2, 03,May, 2.8), ",
        "output": "SELECT COUNT(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many students live in each city and what are their average ages? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT COUNT(*) ,  AVG(age) ,  city_code FROM student GROUP BY city_code"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the catalog entry names of the products with next entry ID above 8? ###filtered_database_schema: CREATE TABLE `Attribute_Definitions` ( attribute_id INTEGER, attribute_name VARCHAR(30), attribute_data_type VARCHAR(10) ); Sample rows from `Attribute_Definitions`: (1, Green, Bool), (2, Black, Bool), (3, Yellow, Bool), CREATE TABLE `Catalogs` ( catalog_id INTEGER, catalog_name VARCHAR(50), catalog_publisher VARCHAR(80), date_of_publication DATETIME, date_of_latest_revision DATETIME ); Sample rows from `Catalogs`: (1, Chocolate, Koepp-Rutherford handmade chocolate store, 2013-03-15 05:09:17, 2017-09-26 12:10:36), (2, Coffee Bean, Murray Coffee shop, 2012-04-13 06:37:09, 2017-10-26 01:16:51), (3, Lemonade, Russel-Gislason Lemon shop, 2012-11-27 19:29:22, 2017-12-04 06:48:13), CREATE TABLE `Catalog_Structure` ( catalog_level_number INTEGER, catalog_id INTEGER REFERENCES Catalogs(catalog_id), catalog_level_name VARCHAR(50) ); Sample rows from `Catalog_Structure`: (1, 1, Category), (8, 2, Sub-Category), (9, 8, Product), CREATE TABLE `Catalog_Contents` ( catalog_entry_id INTEGER, catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number), parent_entry_id INTEGER, previous_entry_id INTEGER, next_entry_id INTEGER, catalog_entry_name VARCHAR(80), product_stock_number VARCHAR(50), price_in_dollars DOUBLE, price_in_euros DOUBLE, price_in_pounds DOUBLE, capacity VARCHAR(20), length VARCHAR(20), height VARCHAR(20), width VARCHAR(20) ); Sample rows from `Catalog_Contents`: (1, 1, 5, 9, 7, Cola, 89 cp, 200.78, 159.84, 172.17, 1, 3, 9, 5), (2, 8, 6, 9, 8, Root beer, 37 hq, 687.59, 590.11, 471.78, 8, 6, 5, 6), (3, 8, 6, 6, 1, Cream Soda, 52 ee, 360.5, 202.32, 110.32, 5, 9, 7, 8), CREATE TABLE `Catalog_Contents_Additional_Attributes` ( catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id), catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number), attribute_id INTEGER, attribute_value VARCHAR(255) ); Sample rows from `Catalog_Contents_Additional_Attributes`: (5, 8, 4, 1), (15, 9, 3, 0), (11, 1, 2, 0), ",
        "output": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many co-authors has Mark Steedman had ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(DISTINCT t1.authorid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname != \"Mark Steedman\" AND t2.paperid IN ( SELECT t2.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Mark Steedman\" );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of physicians who are affiliated with Surgery or Psychiatry department. ###filtered_database_schema: CREATE TABLE `Physician` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), SSN INTEGER ); Sample rows from `Physician`: (1, John Dorian, Staff Internist, 111111111), (2, Elliot Reid, Attending Physician, 222222222), (3, Christopher Turk, Surgical Attending Physician, 333333333), CREATE TABLE `Department` ( DepartmentID INTEGER, Name VARCHAR(30), Head INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Department`: (1, General Medicine, 4), (2, Surgery, 7), (3, Psychiatry, 9), CREATE TABLE `Affiliated_With` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID), PrimaryAffiliation BOOLEAN ); Sample rows from `Affiliated_With`: (1, 1, 1), (2, 1, 1), (3, 1, 0), CREATE TABLE `Procedures` ( Code INTEGER, Name VARCHAR(30), Cost REAL ); Sample rows from `Procedures`: (1, Reverse Rhinopodoplasty, 1500.0), (2, Obtuse Pyloric Recombobulation, 3750.0), (3, Folded Demiophtalmectomy, 4500.0), CREATE TABLE `Trained_In` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code), CertificationDate DATETIME, CertificationExpires DATETIME ); Sample rows from `Trained_In`: (3, 1, 2008-01-01, 2008-12-31), (3, 2, 2008-01-01, 2008-12-31), (3, 5, 2008-01-01, 2008-12-31), CREATE TABLE `Patient` ( SSN INTEGER, Name VARCHAR(30), Address VARCHAR(30), Phone VARCHAR(30), InsuranceID INTEGER, PCP INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Patient`: (100000001, John Smith, 42 Foobar Lane, 555-0256, 68476213, 1), (100000002, Grace Ritchie, 37 Snafu Drive, 555-0512, 36546321, 2), (100000003, Random J. Patient, 101 Omgbbq Street, 555-1204, 65465421, 2), CREATE TABLE `Nurse` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), Registered BOOLEAN, SSN INTEGER ); Sample rows from `Nurse`: (101, Carla Espinosa, Head Nurse, 1, 111111110), (102, Laverne Roberts, Nurse, 1, 222222220), (103, Paul Flowers, Nurse, 0, 333333330), CREATE TABLE `Appointment` ( AppointmentID INTEGER, Patient INTEGER REFERENCES Patient(SSN), PrepNurse INTEGER REFERENCES Nurse(EmployeeID), Physician INTEGER REFERENCES Physician(EmployeeID), Start DATETIME, End DATETIME, ExaminationRoom TEXT ); Sample rows from `Appointment`: (13216584, 100000001, 101, 1, 2008-04-24 10:00, 2008-04-24 11:00, A), (26548913, 100000002, 101, 2, 2008-04-24 10:00, 2008-04-24 11:00, B), (36549879, 100000001, 102, 1, 2008-04-25 10:00, 2008-04-25 11:00, A), CREATE TABLE `Medication` ( Code INTEGER, Name VARCHAR(30), Brand VARCHAR(30), Description VARCHAR(30) ); Sample rows from `Medication`: (1, Procrastin-X, X, N/A), (2, Thesisin, Foo Labs, N/A), (3, Awakin, Bar Laboratories, N/A), CREATE TABLE `Prescribes` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Medication INTEGER PRIMARY KEY REFERENCES Medication(Code), Date DATETIME PRIMARY KEY, Appointment INTEGER REFERENCES Appointment(AppointmentID), Dose VARCHAR(30) ); Sample rows from `Prescribes`: (1, 100000001, 1, 2008-04-24 10:47, 13216584, 5), (9, 100000004, 2, 2008-04-27 10:53, 86213939, 10), (9, 100000004, 2, 2008-04-30 16:53, None, 5), CREATE TABLE `Block` ( BlockFloor INTEGER PRIMARY KEY, BlockCode INTEGER PRIMARY KEY ); Sample rows from `Block`: (1, 1), (1, 2), (1, 3), CREATE TABLE `Room` ( RoomNumber INTEGER, RoomType VARCHAR(30), BlockFloor INTEGER REFERENCES Block(BlockFloor), BlockCode INTEGER REFERENCES Block(BlockCode), Unavailable BOOLEAN ); Sample rows from `Room`: (101, Single, 1, 1, 0), (102, Single, 1, 1, 0), (103, Single, 1, 1, 0), CREATE TABLE `On_Call` ( Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID), BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor), BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode), OnCallStart DATETIME PRIMARY KEY, OnCallEnd DATETIME PRIMARY KEY ); Sample rows from `On_Call`: (101, 1, 1, 2008-11-04 11:00, 2008-11-04 19:00), (101, 1, 2, 2008-11-04 11:00, 2008-11-04 19:00), (102, 1, 3, 2008-11-04 11:00, 2008-11-04 19:00), CREATE TABLE `Stay` ( StayID INTEGER, Patient INTEGER REFERENCES Patient(SSN), Room INTEGER REFERENCES Room(RoomNumber), StayStart DATETIME, StayEnd DATETIME ); Sample rows from `Stay`: (3215, 100000001, 111, 2008-05-01, 2008-05-04), (3216, 100000003, 123, 2008-05-03, 2008-05-14), (3217, 100000004, 112, 2008-05-02, 2008-05-03), CREATE TABLE `Undergoes` ( Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code), Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID), DateUndergoes DATETIME PRIMARY KEY, Physician INTEGER REFERENCES Physician(EmployeeID), AssistingNurse INTEGER REFERENCES Nurse(EmployeeID) ); Sample rows from `Undergoes`: (100000001, 6, 3215, 2008-05-02, 3, 101), (100000001, 2, 3215, 2008-05-03, 7, 101), (100000004, 1, 3217, 2008-05-07, 3, 102), ",
        "output": "SELECT t1.name FROM physician as t1 JOIN affiliated_with as t2 ON t1.employeeid  =  t2.physician JOIN department as t3 ON t2.department  =  t3.departmentid WHERE t3.name  =  'Surgery' OR t3.name  =  'Psychiatry'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show all the distinct buildings that have faculty rooms. ###filtered_database_schema: CREATE TABLE `Activity` ( actid INTEGER, activity_name varchar(25) ); Sample rows from `Activity`: (770, Mountain Climbing), (771, Canoeing), (772, Kayaking), CREATE TABLE `Participates_in` ( stuid INTEGER REFERENCES Student(StuID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Participates_in`: (1001, 770), (1001, 771), (1001, 777), CREATE TABLE `Faculty_Participates_in` ( FacID INTEGER REFERENCES Faculty(FacID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Faculty_Participates_in`: (1082, 784), (1082, 785), (1082, 790), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), ",
        "output": "SELECT DISTINCT building FROM faculty"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of all the customers and staff members. ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_Details VARCHAR(255) ); Sample rows from `Customers`: (252, America Jaskolski), (263, Ellsworth Paucek), (334, Mrs. Hanna Willms), CREATE TABLE `Staff` ( Staff_ID INTEGER, Staff_Details VARCHAR(255) ); Sample rows from `Staff`: (406, Clifton), (427, Cathryn), (510, Kaci), CREATE TABLE `Policies` ( Policy_ID INTEGER, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Policy_Type_Code CHAR(15), Start_Date DATETIME, End_Date DATETIME ); Sample rows from `Policies`: (125, 808, Deputy, 2018-02-10 08:56:30, 2018-03-18 09:17:26), (151, 380, Jurisdiction, 2017-12-20 06:02:31, 2017-09-16 22:04:13), (287, 334, Jurisdiction, 2017-03-16 18:16:52, 2017-11-24 06:36:51), CREATE TABLE `Claim_Headers` ( Claim_Header_ID INTEGER, Claim_Status_Code CHAR(15), Claim_Type_Code CHAR(15), Policy_ID INTEGER REFERENCES Policies(Policy_ID), Date_of_Claim DATETIME, Date_of_Settlement DATETIME, Amount_Claimed DECIMAL(20,4), Amount_Piad DECIMAL(20,4) ); Sample rows from `Claim_Headers`: (15, Settled, Handphone Subsidy, 518, 2016-05-31 06:07:11, 2018-02-23 03:46:38, 349.15, 582.03), (24, Disputed, Child Birth, 518, 2016-12-30 21:43:21, 2017-10-08 21:43:14, 318.16, 309.2), (27, Disputed, Overtime Meal Subsidy, 518, 2017-05-01 13:34:43, 2017-11-16 04:06:05, 362.71, 132.97), CREATE TABLE `Claims_Documents` ( Claim_ID INTEGER PRIMARY KEY REFERENCES Claim_Headers(Claim_Header_ID), Document_Type_Code CHAR(15) PRIMARY KEY, Created_by_Staff_ID INTEGER REFERENCES Staff(Staff_ID), Created_Date INTEGER ); Sample rows from `Claims_Documents`: (24, Document, 718, 8), (27, Document, 986, 6), (27, Medical, 427, 8), CREATE TABLE `Claims_Processing_Stages` ( Claim_Stage_ID INTEGER, Next_Claim_Stage_ID INTEGER, Claim_Status_Name VARCHAR(255), Claim_Status_Description VARCHAR(255) ); Sample rows from `Claims_Processing_Stages`: (1, 1, Open, Open a new claim), (3, 1, Close, Close a claim), CREATE TABLE `Claims_Processing` ( Claim_Processing_ID INTEGER, Claim_ID INTEGER REFERENCES Claim_Headers(Claim_Header_ID), Claim_Outcome_Code CHAR(15), Claim_Stage_ID INTEGER, Staff_ID INTEGER REFERENCES Staff(Staff_ID) ); Sample rows from `Claims_Processing`: (118, 28, In progress, 1, 771), (145, 62, In progress, 1, 589), (213, 27, In progress, 1, 589), ",
        "output": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what are the employee ids and job titles for employees in department 80? ###filtered_database_schema: CREATE TABLE `regions` ( REGION_ID decimal(5,0) PRIMARY KEY, REGION_NAME varchar(25) ); Sample rows from `regions`: (1, Europe\\r), (2, Americas\\r), (3, Asia\\r), CREATE TABLE `countries` ( COUNTRY_ID varchar(2) PRIMARY KEY, COUNTRY_NAME varchar(40), REGION_ID decimal(10,0) REFERENCES regions(REGION_ID) ); Sample rows from `countries`: (AR, Argentina, 2), (AU, Australia, 3), (BE, Belgium, 1), CREATE TABLE `departments` ( DEPARTMENT_ID decimal(4,0) PRIMARY KEY, DEPARTMENT_NAME varchar(30), MANAGER_ID decimal(6,0), LOCATION_ID decimal(4,0) ); Sample rows from `departments`: (10, Administration, 200, 1700), (20, Marketing, 201, 1800), (30, Purchasing, 114, 1700), CREATE TABLE `jobs` ( JOB_ID varchar(10) PRIMARY KEY, JOB_TITLE varchar(35), MIN_SALARY decimal(6,0), MAX_SALARY decimal(6,0) ); Sample rows from `jobs`: (AD_PRES, President, 20000, 40000), (AD_VP, Administration Vice President, 15000, 30000), (AD_ASST, Administration Assistant, 3000, 6000), CREATE TABLE `employees` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY, FIRST_NAME varchar(20), LAST_NAME varchar(25), EMAIL varchar(25), PHONE_NUMBER varchar(20), HIRE_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), SALARY decimal(8,2), COMMISSION_PCT decimal(2,2), MANAGER_ID decimal(6,0), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `employees`: (100, Steven, King, SKING, 515.123.4567, 1987-06-17, AD_PRES, 24000, 0, 0, 90), (101, Neena, Kochhar, NKOCHHAR, 515.123.4568, 1987-06-18, AD_VP, 17000, 0, 100, 90), (102, Lex, De Haan, LDEHAAN, 515.123.4569, 1987-06-19, AD_VP, 17000, 0, 100, 90), CREATE TABLE `job_history` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY REFERENCES employees(EMPLOYEE_ID), START_DATE date PRIMARY KEY, END_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `job_history`: (102, 1993-01-13, 1998-07-24, IT_PROG, 60), (101, 1989-09-21, 1993-10-27, AC_ACCOUNT, 110), (101, 1993-10-28, 1997-03-15, AC_MGR, 110), CREATE TABLE `locations` ( LOCATION_ID decimal(4,0) PRIMARY KEY, STREET_ADDRESS varchar(40), POSTAL_CODE varchar(12), CITY varchar(30), STATE_PROVINCE varchar(25), COUNTRY_ID varchar(2) REFERENCES countries(COUNTRY_ID) ); Sample rows from `locations`: (1000, 1297 Via Cola di Rie, 989, Roma, , IT), (1100, 93091 Calle della Testa, 10934, Venice, , IT), (1200, 2017 Shinjuku-ku, 1689, Tokyo, Tokyo Prefecture, JP), ",
        "output": "SELECT t1.employee_id ,  t2.job_title FROM employees as t1 JOIN jobs as t2 ON t1.job_id  =  t2.job_id WHERE t1.department_id = 80"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Give the name of each department and the number of employees in each. ###filtered_database_schema: CREATE TABLE `regions` ( REGION_ID decimal(5,0) PRIMARY KEY, REGION_NAME varchar(25) ); Sample rows from `regions`: (1, Europe\\r), (2, Americas\\r), (3, Asia\\r), CREATE TABLE `countries` ( COUNTRY_ID varchar(2) PRIMARY KEY, COUNTRY_NAME varchar(40), REGION_ID decimal(10,0) REFERENCES regions(REGION_ID) ); Sample rows from `countries`: (AR, Argentina, 2), (AU, Australia, 3), (BE, Belgium, 1), CREATE TABLE `departments` ( DEPARTMENT_ID decimal(4,0) PRIMARY KEY, DEPARTMENT_NAME varchar(30), MANAGER_ID decimal(6,0), LOCATION_ID decimal(4,0) ); Sample rows from `departments`: (10, Administration, 200, 1700), (20, Marketing, 201, 1800), (30, Purchasing, 114, 1700), CREATE TABLE `jobs` ( JOB_ID varchar(10) PRIMARY KEY, JOB_TITLE varchar(35), MIN_SALARY decimal(6,0), MAX_SALARY decimal(6,0) ); Sample rows from `jobs`: (AD_PRES, President, 20000, 40000), (AD_VP, Administration Vice President, 15000, 30000), (AD_ASST, Administration Assistant, 3000, 6000), CREATE TABLE `employees` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY, FIRST_NAME varchar(20), LAST_NAME varchar(25), EMAIL varchar(25), PHONE_NUMBER varchar(20), HIRE_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), SALARY decimal(8,2), COMMISSION_PCT decimal(2,2), MANAGER_ID decimal(6,0), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `employees`: (100, Steven, King, SKING, 515.123.4567, 1987-06-17, AD_PRES, 24000, 0, 0, 90), (101, Neena, Kochhar, NKOCHHAR, 515.123.4568, 1987-06-18, AD_VP, 17000, 0, 100, 90), (102, Lex, De Haan, LDEHAAN, 515.123.4569, 1987-06-19, AD_VP, 17000, 0, 100, 90), CREATE TABLE `job_history` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY REFERENCES employees(EMPLOYEE_ID), START_DATE date PRIMARY KEY, END_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `job_history`: (102, 1993-01-13, 1998-07-24, IT_PROG, 60), (101, 1989-09-21, 1993-10-27, AC_ACCOUNT, 110), (101, 1993-10-28, 1997-03-15, AC_MGR, 110), CREATE TABLE `locations` ( LOCATION_ID decimal(4,0) PRIMARY KEY, STREET_ADDRESS varchar(40), POSTAL_CODE varchar(12), CITY varchar(30), STATE_PROVINCE varchar(25), COUNTRY_ID varchar(2) REFERENCES countries(COUNTRY_ID) ); Sample rows from `locations`: (1000, 1297 Via Cola di Rie, 989, Roma, , IT), (1100, 93091 Calle della Testa, 10934, Venice, , IT), (1200, 2017 Shinjuku-ku, 1689, Tokyo, Tokyo Prefecture, JP), ",
        "output": "SELECT t2.department_name ,  COUNT(*) FROM employees as t1 JOIN departments as t2 ON t1.department_id  =  t2.department_id GROUP BY t2.department_name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name, type, and flag of the ship that was built in the most recent year? ###filtered_database_schema: CREATE TABLE `captain` ( Captain_ID INT PRIMARY KEY, Name TEXT, Ship_ID INT REFERENCES Ship(Ship_ID), age TEXT, Class TEXT, Rank TEXT ); Sample rows from `captain`: (1, Captain Sir Henry Langford, 1, 40, Third-rate ship of the line, Midshipman), (2, Captain Beves Conway, 2, 54, Third-rate ship of the line, Midshipman), (3, Lieutenant Hugh Bolitho, 3, 43, Cutter, Midshipman), CREATE TABLE `Ship` ( Ship_ID INT PRIMARY KEY, Name TEXT, Type TEXT, Built_Year REAL, Class TEXT, Flag TEXT ); Sample rows from `Ship`: (1, HMS Manxman, Panamax, 1997.0, KR, Panama), (2, HMS Gorgon, Panamax, 1998.0, KR, Panama), (3, HM Cutter Avenger, Panamax, 1997.0, KR, Panama), ",
        "output": "SELECT name ,  type ,  flag FROM ship ORDER BY built_year DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the biggest river in texas ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT river_name FROM river WHERE length  =  ( SELECT MAX(length) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average base price of different bed type? List bed type and average base price. ###filtered_database_schema: CREATE TABLE `Rooms` ( RoomId TEXT PRIMARY KEY, roomName TEXT, beds INTEGER, bedType TEXT, maxOccupancy INTEGER, basePrice INTEGER, decor TEXT ); Sample rows from `Rooms`: (RND, Recluse and defiance, 1, King, 2, 150, modern), (IBS, Interim but salutary, 1, King, 2, 150, traditional), (AOB, Abscond or bolster, 2, Queen, 4, 175, traditional), CREATE TABLE `Reservations` ( Code INTEGER, Room TEXT REFERENCES Rooms(RoomId), CheckIn TEXT, CheckOut TEXT, Rate REAL, LastName TEXT, FirstName TEXT, Adults INTEGER, Kids INTEGER ); Sample rows from `Reservations`: (10105, HBB, 23-OCT-10, 25-OCT-10, 100.0, SELBIG, CONRAD, 1, 0), (10183, IBD, 19-SEP-10, 20-SEP-10, 150.0, GABLER, DOLLIE, 2, 0), (10449, RND, 30-SEP-10, 01-OCT-10, 150.0, KLESS, NELSON, 1, 0), ",
        "output": "SELECT bedtype ,  AVG(baseprice) FROM rooms GROUP BY bedtype;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of the courses that do not have any prerequisite? ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How long does student Linda Smith spend on the restaurant in total? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Restaurant` ( ResID INTEGER, ResName VARCHAR(100), Address VARCHAR(100), Rating INTEGER ); Sample rows from `Restaurant`: (1, Subway, 3233 St Paul St, Baltimore, MD 21218, 3), (2, Honeygrow, 3212 St Paul St, Baltimore, MD 21218, 4), CREATE TABLE `Type_Of_Restaurant` ( ResID INTEGER REFERENCES Restaurant(ResID), ResTypeID INTEGER REFERENCES Restaurant_Type(ResTypeID) ); Sample rows from `Type_Of_Restaurant`: (1, 1), (2, 2), CREATE TABLE `Restaurant_Type` ( ResTypeID INTEGER, ResTypeName VARCHAR(40), ResTypeDescription VARCHAR(100) ); Sample rows from `Restaurant_Type`: (1, Sandwich, Simplest there is.), (2, Stir-fry, Classic Chinese cooking.), CREATE TABLE `Visits_Restaurant` ( StuID INTEGER REFERENCES Student(StuID), ResID INTEGER REFERENCES Restaurant(ResID), Time TIMESTAMP, Spent FLOAT ); Sample rows from `Visits_Restaurant`: (1001, 1, 2017-10-09 18:15:00, 6.53), (1032, 2, 2017-10-08 13:00:30, 13.2), ",
        "output": "SELECT SUM(spent) FROM student JOIN visits_restaurant ON student.stuid = visits_restaurant.stuid WHERE student.fname = \"Linda\" AND student.lname = \"Smith\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: who is the most published author in syntactic parsing ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: how many major rivers cross ohio ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT COUNT(river_name) FROM river WHERE length  >  750 AND traverse  =  \"ohio\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the star rating descriptions of the hotels with price above 10000? ###filtered_database_schema: CREATE TABLE `Ref_Hotel_Star_Ratings` ( star_rating_code CHAR(15) PRIMARY KEY, star_rating_description VARCHAR(80) ); Sample rows from `Ref_Hotel_Star_Ratings`: (1, star), (2, star), (3, star), CREATE TABLE `Locations` ( Location_ID INTEGER, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Locations`: (333, Astro Orbiter, 660 Shea Crescent, None), (368, African Animals, 254 Ottilie Junction, None), (417, American Adventure, 53815 Sawayn Tunnel Apt. 297, None), CREATE TABLE `Ref_Attraction_Types` ( Attraction_Type_Code CHAR(15) PRIMARY KEY, Attraction_Type_Description VARCHAR(255) ); Sample rows from `Ref_Attraction_Types`: (2, park), (3, garden), (5, gallery), CREATE TABLE `Visitors` ( Tourist_ID INTEGER PRIMARY KEY, Tourist_Details VARCHAR(255) ); Sample rows from `Visitors`: (164, Toney), (189, Graciela), (204, Vincent), CREATE TABLE `Features` ( Feature_ID INTEGER, Feature_Details VARCHAR(255) ); Sample rows from `Features`: (523, cafe), (528, park), (543, garden), CREATE TABLE `Hotels` ( hotel_id INTEGER, star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code), pets_allowed_yn CHAR(1), price_range REAL, other_hotel_details VARCHAR(255) ); Sample rows from `Hotels`: (123, 5, 1, 2914989.571, None), (144, 4, , , None), (172, 5, , 17012.682586009, None), CREATE TABLE `Tourist_Attractions` ( Tourist_Attraction_ID INTEGER, Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code), Location_ID INTEGER REFERENCES Locations(Location_ID), How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Tourist_Attractions`: (2113, 2, 579, bus, art museum, None, None, None), (2701, 6, 417, walk, UK gallery, None, None, None), (5076, 2, 868, shuttle, flying elephant, None, None, None), CREATE TABLE `Street_Markets` ( Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Market_Details VARCHAR(255) ); Sample rows from `Street_Markets`: (6852, Broadway), (7067, Fish Farm Market), CREATE TABLE `Shops` ( Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Shop_Details VARCHAR(255) ); Sample rows from `Shops`: (8429, soup), (8449, coffee), (8698, Flower), CREATE TABLE `Museums` ( Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Museum_Details VARCHAR(255) ); Sample rows from `Museums`: (2113, Yale Center for British Art), (2701, The Metropolitan Museum of Art), (5076, MoMA), CREATE TABLE `Royal_Family` ( Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Royal_Family_Details VARCHAR(255) ); Sample rows from `Royal_Family`: (9561, None), (9919, None), CREATE TABLE `Theme_Parks` ( Theme_Park_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Theme_Park_Details VARCHAR(255) ); Sample rows from `Theme_Parks`: (5265, Disney), (6476, Sea World), (6523, Universal Studios), CREATE TABLE `Visits` ( Visit_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID), Visit_Date DATETIME, Visit_Details VARCHAR(40) ); Sample rows from `Visits`: (183, 6653, 377, 2004-08-21 03:06:14, ), (268, 5076, 204, 2013-08-06 05:35:51, ), (273, 9360, 211, 2013-10-27 09:56:08, ), CREATE TABLE `Photos` ( Photo_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Photos`: (211, 8449, game1, None, 702, None), (280, 7067, game2, None, 762, None), (303, 5076, game3, None, 392, None), CREATE TABLE `Staff` ( Staff_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(40), Other_Details VARCHAR(255) ); Sample rows from `Staff`: (170, 6476, Whitney, None), (219, 6476, Kaela, None), (237, 7067, Eunice, None), CREATE TABLE `Tourist_Attraction_Features` ( Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID) ); Sample rows from `Tourist_Attraction_Features`: (5076, 528), (5076, 681), (5265, 523), ",
        "output": "SELECT t2.star_rating_description FROM hotels as t1 JOIN ref_hotel_star_ratings as t2 ON t1.star_rating_code  =  t2.star_rating_code WHERE t1.price_range  >  10000"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the student ids for students over 20 years old? ###filtered_database_schema: CREATE TABLE `Allergy_Type` ( Allergy VARCHAR(20) PRIMARY KEY, AllergyType VARCHAR(20) ); Sample rows from `Allergy_Type`: (Eggs, food), (Nuts, food), (Milk, food), CREATE TABLE `Has_Allergy` ( StuID INTEGER REFERENCES Student(StuID), Allergy VARCHAR(20) REFERENCES Allergy_Type(Allergy) ); Sample rows from `Has_Allergy`: (1001, Cat), (1002, Shellfish), (1002, Tree Pollen), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), ",
        "output": "SELECT stuid FROM student WHERE age  >  20"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of the pilots in alphabetical order? ###filtered_database_schema: CREATE TABLE `pilot` ( Pilot_Id int(11) PRIMARY KEY, Name varchar(50), Age int(11) ); Sample rows from `pilot`: (1, Prof. Zackery Collins, 23), (2, Katheryn Gorczany IV, 20), (3, Mr. Cristian Halvorson II, 23), CREATE TABLE `aircraft` ( Aircraft_ID int(11) PRIMARY KEY, Aircraft varchar(50), Description varchar(50), Max_Gross_Weight varchar(50), Total_disk_area varchar(50), Max_disk_Loading varchar(50) ); Sample rows from `aircraft`: (1, Robinson R-22, Light utility helicopter, 1,370 lb (635 kg), 497 ft² (46.2 m²), 2.6 lb/ft² (14 kg/m²)), (2, Bell 206B3 JetRanger, Turboshaft utility helicopter, 3,200 lb (1,451 kg), 872 ft² (81.1 m²), 3.7 lb/ft² (18 kg/m²)), (3, CH-47D Chinook, Tandem rotor helicopter, 50,000 lb (22,680 kg), 5,655 ft² (526 m²), 8.8 lb/ft² (43 kg/m²)), CREATE TABLE `match` ( Round REAL PRIMARY KEY, Location TEXT, Country TEXT, Date TEXT, Fastest_Qualifying TEXT, Winning_Pilot TEXT REFERENCES pilot(Pilot_Id), Winning_Aircraft TEXT REFERENCES aircraft(Aircraft_ID) ); Sample rows from `match`: (1.0, Mina' Zayid , Abu Dhabi, United Arab Emirates, March 26–27, Hannes Arch, 1, 1), (2.0, Swan River , Perth, Australia, April 17–18, Paul Bonhomme, 4, 1), (3.0, Flamengo Beach , Rio de Janeiro, Brazil, May 8–9, Hannes Arch, 6, 2), CREATE TABLE `airport` ( Airport_ID INT PRIMARY KEY, Airport_Name TEXT, Total_Passengers REAL, %_Change_2007 TEXT, International_Passengers REAL, Domestic_Passengers REAL, Transit_Passengers REAL, Aircraft_Movements REAL, Freight_Metric_Tonnes REAL ); Sample rows from `airport`: (1, London Heathrow, 67054745.0, 1.5%, 61344438.0, 5562516.0, 147791.0, 478693.0, 1397054.0), (2, London Gatwick, 34205887.0, 2.9%, 30431051.0, 3730963.0, 43873.0, 263653.0, 107702.0), (3, London Stansted, 22360364.0, 6.0%, 19996947.0, 2343428.0, 19989.0, 193282.0, 197738.0), CREATE TABLE `airport_aircraft` ( ID INT, Airport_ID INT PRIMARY KEY REFERENCES airport(Airport_ID), Aircraft_ID INT PRIMARY KEY REFERENCES aircraft(Aircraft_ID) ); Sample rows from `airport_aircraft`: (1, 6, 5), (2, 2, 1), (3, 1, 2), ",
        "output": "SELECT name FROM pilot ORDER BY name ASC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many participants belong to the type 'Organizer'? ###filtered_database_schema: CREATE TABLE `Services` ( Service_ID INTEGER, Service_Type_Code CHAR(15) ); Sample rows from `Services`: (2, Marriage), (5, Death Proof), (6, Birth Proof), CREATE TABLE `Participants` ( Participant_ID INTEGER, Participant_Type_Code CHAR(15), Participant_Details VARCHAR(255) ); Sample rows from `Participants`: (9, Organizer, Karlee Batz), (26, Organizer, Vilma Schinner), (28, Organizer, Lupe Deckow), CREATE TABLE `Events` ( Event_ID INTEGER, Service_ID INTEGER REFERENCES Services(Service_ID), Event_Details VARCHAR(255) ); Sample rows from `Events`: (3, 5, Success), (8, 8, Success), (13, 8, Fail), CREATE TABLE `Participants_in_Events` ( Event_ID INTEGER PRIMARY KEY REFERENCES Events(Event_ID), Participant_ID INTEGER PRIMARY KEY REFERENCES Participants(Participant_ID) ); Sample rows from `Participants_in_Events`: (3, 26), (3, 66), (8, 86), ",
        "output": "SELECT COUNT(*) FROM participants WHERE participant_type_code  =  'Organizer'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the total credits of all classes offered by each department. ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT SUM(t1.crs_credit) ,  t1.dept_code FROM course as t1 JOIN CLasS as t2 ON t1.crs_code  =  t2.crs_code GROUP BY t1.dept_code"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what states have rivers named ohio ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the checking balance and saving balance in the Brown’s account. ###filtered_database_schema: CREATE TABLE `ACCOUNTS` ( custid BIGINT PRIMARY KEY, name VARCHAR(64) ); Sample rows from `ACCOUNTS`: (1, Brown), (2, Wang), (3, O'mahony), CREATE TABLE `SAVINGS` ( custid BIGINT PRIMARY KEY REFERENCES ACCOUNTS(custid), balance FLOAT ); Sample rows from `SAVINGS`: (1, 200000.0), (2, 999999999.0), (3, 230000.0), CREATE TABLE `CHECKING` ( custid BIGINT PRIMARY KEY REFERENCES ACCOUNTS(custid), balance FLOAT ); Sample rows from `CHECKING`: (1, 10000.0), (2, 2000.0), (3, 3000.0), ",
        "output": "SELECT t2.balance ,  t3.balance FROM accounts as t1 JOIN checking as t2 ON t1.custid  =  t2.custid JOIN savings as t3 ON t1.custid  =  t3.custid WHERE t1.name  =  'Brown'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'? ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_details VARCHAR(255) ); Sample rows from `Customers`: (4, Mr. Raul Prosacco), (5, Esteban Senger), (16, Tyrique Durgan II), CREATE TABLE `Properties` ( property_id INTEGER, property_type_code CHAR(15), property_address VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Properties`: (24, apartment, 85456 Annie Lodge Suite 449, USA), (107, house, 2580 Yundt Plains, USA), (108, house, 5983 Fleta Throughway, USA), CREATE TABLE `Residents` ( resident_id INTEGER PRIMARY KEY, property_id INTEGER PRIMARY KEY REFERENCES Properties(property_id), date_moved_in DATETIME PRIMARY KEY, date_moved_out DATETIME, other_details VARCHAR(255) ); Sample rows from `Residents`: (6, 954, 2017-06-17 15:43:33, 2017-12-18 03:46:04, Anderson Batz), (10, 605, 2015-03-27 12:00:00, 2018-03-17 07:48:09, Miss Naomie Osinski), (23, 879, 2015-03-27 12:00:00, 2017-11-14 06:28:48, Jess Wyman), CREATE TABLE `Organizations` ( organization_id INTEGER, parent_organization_id INTEGER, organization_details VARCHAR(255) ); Sample rows from `Organizations`: (7, 7, Reinger, Hudson and Nolan Group), (8, 7, Denesik and Sons Party), (10, 8, Robel-Schulist Group), CREATE TABLE `Services` ( service_id INTEGER, organization_id INTEGER REFERENCES Organizations(organization_id), service_type_code CHAR(15), service_details VARCHAR(255) ); Sample rows from `Services`: (10, 10, Cleanning, Satisfied), (11, 7, Check, Satisfied), (13, 8, Moving Out, Satisfied), CREATE TABLE `Residents_Services` ( resident_id INTEGER PRIMARY KEY REFERENCES Residents(resident_id), service_id INTEGER PRIMARY KEY REFERENCES Services(service_id), date_moved_in DATETIME REFERENCES Residents(date_moved_in), property_id INTEGER REFERENCES Residents(property_id), date_requested DATETIME, date_provided DATETIME, other_details VARCHAR(255) ); Sample rows from `Residents_Services`: (6, 49, 2017-06-17 15:43:33, 954, 2016-07-25 01:32:23, 2018-02-26 00:27:11, Satisfied), (23, 41, 2015-03-27 12:00:00, 879, 2016-10-10 21:42:21, 2017-08-21 06:23:06, Unsatisfied), (28, 11, 2015-03-27 12:00:00, 629, 2017-07-14 19:03:47, 2017-08-28 03:43:56, Unsatisfied), CREATE TABLE `Things` ( thing_id INTEGER, organization_id INTEGER REFERENCES Organizations(organization_id), Type_of_Thing_Code CHAR(15), service_type_code CHAR(10), service_details VARCHAR(255) ); Sample rows from `Things`: (1, 8, Electronics, Check, Unsatisfied), (2, 8, Electronics, Cleanning, Satisfied), (10, 8, Commen, Check, Satisfied), CREATE TABLE `Customer_Events` ( Customer_Event_ID INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_moved_in DATETIME REFERENCES Residents(date_moved_in), property_id INTEGER REFERENCES Residents(property_id), resident_id INTEGER REFERENCES Residents(resident_id), thing_id INTEGER REFERENCES Things(thing_id) ); Sample rows from `Customer_Events`: (70, 19, 2015-03-27 12:00:00, 605, 10, 1), (160, 5, 2015-03-27 12:00:00, 879, 23, 80), (166, 16, 2015-03-27 12:00:00, 629, 28, 14), CREATE TABLE `Customer_Event_Notes` ( Customer_Event_Note_ID INTEGER, Customer_Event_ID INTEGER REFERENCES Customer_Events(Customer_Event_ID), service_type_code CHAR(15), resident_id INTEGER, property_id INTEGER, date_moved_in DATETIME ); Sample rows from `Customer_Event_Notes`: (18, 70, Cleanning, 58, 107, 2016-08-04 01:06:05), (21, 428, Check, 87, 445, 2016-12-11 01:05:14), (32, 70, Check, 37, 669, 2016-07-10 04:09:56), CREATE TABLE `Timed_Status_of_Things` ( thing_id INTEGER PRIMARY KEY REFERENCES Things(thing_id), Date_and_Date DATETIME PRIMARY KEY, Status_of_Thing_Code CHAR(15) PRIMARY KEY ); Sample rows from `Timed_Status_of_Things`: (2, 2016-05-27 23:33:34, Open), (2, 2016-07-17 08:35:27, Close), (2, 2017-06-19 02:59:21, In Progress), CREATE TABLE `Timed_Locations_of_Things` ( thing_id INTEGER PRIMARY KEY REFERENCES Things(thing_id), Date_and_Time DATETIME PRIMARY KEY, Location_Code CHAR(15) PRIMARY KEY ); Sample rows from `Timed_Locations_of_Things`: (2, 2016-10-12 12:03:07, 064 Charles Mou), (10, 2016-12-29 00:39:19, 288 Lang Ferry), (10, 2017-10-21 04:21:54, 854 Keeling Sho), ",
        "output": "SELECT DISTINCT t1.service_type_code FROM services as t1 JOIN organizations as t2 ON t1.organization_id  =  t2.organization_id WHERE t2.organization_details  =  'Denesik and Sons Party'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which semeseter and year had the fewest students? ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT semester ,  year FROM takes GROUP BY semester ,  year ORDER BY COUNT(*) LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the ids and names of festivals that have at least two nominations for artworks. ###filtered_database_schema: CREATE TABLE `festival_detail` ( Festival_ID INT PRIMARY KEY, Festival_Name TEXT, Chair_Name TEXT, Location TEXT, Year INT, Num_of_Audience INT ); Sample rows from `festival_detail`: (1, Panasonic Awards, Raymond Floyd, United States, 2006, 152), (2, Flower Awards, Charles Coody, United States, 2007, 155), (3, Cherry Awards, Doug Ford, United States, 2007, 160), CREATE TABLE `artwork` ( Artwork_ID INT PRIMARY KEY, Type TEXT, Name TEXT ); Sample rows from `artwork`: (1, Program Music/Variety Show, Indonesian Idol), (2, Program Music/Variety Show, I Know), (3, Presenter Music/Variety Show, Loving you), CREATE TABLE `nomination` ( Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID), Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID), Result TEXT ); Sample rows from `nomination`: (1, 2, Nominated), (2, 2, Won), (3, 1, Nominated), ",
        "output": "SELECT t1.festival_id ,  t3.festival_name FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id GROUP BY t1.festival_id HAVING COUNT(*)  >=  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show station names without any trains. ###filtered_database_schema: CREATE TABLE `station` ( Station_ID INT PRIMARY KEY, Name TEXT, Annual_entry_exit REAL, Annual_interchanges REAL, Total_Passengers REAL, Location TEXT, Main_Services TEXT, Number_of_Platforms INT ); Sample rows from `station`: (1, London Waterloo, 94.046, 9.489, 103.534, London, South Western Main Line West of England Main Line, 19), (2, London Victoria, 76.231, 9.157, 85.38, London, Brighton Main Line Chatham Main Line, 19), (3, London Bridge, 52.634, 8.742, 61.376, London, South Eastern Main Line Thameslink, 12), CREATE TABLE `train` ( Train_ID INT PRIMARY KEY, Name TEXT, Time TEXT, Service TEXT ); Sample rows from `train`: (1, Ananthapuri Express, 17:15, Daily), (2, Guruvayur Express, 22:10, Daily), (3, Guruvayur Express, 4:49, Daily), CREATE TABLE `train_station` ( Train_ID INT PRIMARY KEY REFERENCES train(Train_ID), Station_ID INT PRIMARY KEY REFERENCES station(Station_ID) ); Sample rows from `train_station`: (1, 1), (2, 1), (3, 1), ",
        "output": "SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the directors of all movies featuring \" Kate Winslet \" ###filtered_database_schema: CREATE TABLE `actor` ( aid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `copyright` ( id INT PRIMARY KEY, msid INT, cid INT ); CREATE TABLE `cast` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), aid INT REFERENCES actor(aid), role INT ); CREATE TABLE `genre` ( gid INT PRIMARY KEY, genre TEXT ); CREATE TABLE `classification` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), gid INT REFERENCES genre(gid) ); CREATE TABLE `company` ( id INT PRIMARY KEY, name TEXT, country_code TEXT ); CREATE TABLE `director` ( did INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `producer` ( pid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `directed_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), did INT REFERENCES director(did) ); CREATE TABLE `keyword` ( id INT PRIMARY KEY, keyword TEXT ); CREATE TABLE `made_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), pid INT REFERENCES producer(pid) ); CREATE TABLE `movie` ( mid INT PRIMARY KEY, title TEXT, release_year INT, title_aka TEXT, budget TEXT ); CREATE TABLE `tags` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), kid INT REFERENCES keyword(kid) ); CREATE TABLE `tv_series` ( sid INT PRIMARY KEY, title TEXT, release_year INT, num_of_seasons INT, num_of_episodes INT, title_aka TEXT, budget TEXT ); CREATE TABLE `writer` ( wid INT PRIMARY KEY, gender TEXT, name INT, nationality INT, num_of_episodes INT, birth_city TEXT, birth_year INT ); CREATE TABLE `written_by` ( id INT, msid INT REFERENCES copyright(msid), wid INT REFERENCES writer(wid) ); ",
        "output": "SELECT t3.name FROM cast as t4 JOIN actor as t1 ON t4.aid  =  t1.aid JOIN movie as t5 ON t5.mid  =  t4.msid JOIN directed_by as t2 ON t5.mid  =  t2.msid JOIN director as t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Kate Winslet\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many dorms are there? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT COUNT(*) FROM dorm"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the gas station ids, locations, and manager names for the gas stations ordered by opening year? ###filtered_database_schema: CREATE TABLE `company` ( Company_ID INT PRIMARY KEY, Rank INT, Company TEXT, Headquarters TEXT, Main_Industry TEXT, Sales_billion REAL, Profits_billion REAL, Assets_billion REAL, Market_Value REAL ); Sample rows from `company`: (1, 1, ExxonMobil, USA, Oil and gas, 433.5, 41.1, 331.1, 407.4), (2, 3, General Electric, USA, Conglomerate, 147.3, 14.2, 717.2, 213.7), (3, 4, Royal Dutch Shell, Netherlands, Oil and gas, 470.2, 30.9, 340.5, 227.6), CREATE TABLE `gas_station` ( Station_ID INT PRIMARY KEY, Open_Year INT, Location TEXT, Manager_Name TEXT, Vice_Manager_Name TEXT, Representative_Name TEXT ); Sample rows from `gas_station`: (1, 1998, Herne Hill, BrianWingrave, Russell Denman, Clive Burr), (2, 1999, Channel Hill, SimonMarloe, Russell Brown, Rob Jefferies ), (3, 2000, Reading North, Simon Cope Derek Marloe, James Colin , Dave Edwards Roger ), CREATE TABLE `station_company` ( Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID), Company_ID INT PRIMARY KEY REFERENCES company(Company_ID), Rank_of_the_Year INT ); Sample rows from `station_company`: (11, 1, 1), (1, 3, 2), (6, 6, 3), ",
        "output": "SELECT station_id ,  location ,  manager_name FROM gas_station ORDER BY open_year"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of all instructors in computer science department ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Give the title of the course offered in Chandler during the Fall of 2010. ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT t1.title FROM course as t1 JOIN section as t2 ON t1.course_id  =  t2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND year  =  2010"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the name of the customer who has the most orders. ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 4315 Kerluke Canyon Apt. 800, Hertafurt, 740, Nevada, USA), (2, 319 Kozey Highway Suite 973, Edgardoberg, 282, Colorado, USA), (3, 592 Frederique Ridge, Gilbertmouth, 167, Virginia, USA), CREATE TABLE `Products` ( product_id INTEGER, product_type_code VARCHAR(15), product_name VARCHAR(80), product_price DOUBLE ); Sample rows from `Products`: (1, Hardware, Apple, 54753982.574522), (2, Clothes, jcrew, 30590929.528306), (3, Hardware, Apple, 10268.85297069), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method_code VARCHAR(15), customer_number VARCHAR(20), customer_name VARCHAR(80), customer_address VARCHAR(255), customer_phone VARCHAR(80), customer_email VARCHAR(80) ); Sample rows from `Customers`: (1, Credit Card, 456, Kayley, 636 Chanelle Isle Apt. 846, +87(9)5279161988, antonette73@example.com), (2, Credit Card, 553, Sterling, 12174 Boyer Crossroad, 896.685.8228x2786, stroman.chadd@example.net), (3, Credit Card, 951, Buford, 650 Spencer Way Apt. 584, (192)144-4687, pattie.mayer@example.net), CREATE TABLE `Contacts` ( contact_id INTEGER, customer_id INTEGER, gender VARCHAR(1), first_name VARCHAR(80), last_name VARCHAR(50), contact_phone VARCHAR(80) ); Sample rows from `Contacts`: (1, 4, male, Cierra, Collins, +73(2)0854391820), (2, 6, male, Jennifer, Doyle, 482-949-1364x17500), (3, 8, female, Carli, Blick, (608)868-5069x554), CREATE TABLE `Customer_Address_History` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Customer_Address_History`: (12, 7, 2015-07-23 14:37:18, 2018-03-07 12:04:20), (12, 2, 2016-11-06 14:33:12, 2018-03-14 21:36:28), (3, 9, 2011-11-19 12:17:36, 2018-03-22 10:20:16), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_date DATETIME, order_status_code VARCHAR(15) ); Sample rows from `Customer_Orders`: (1, 2, 2009-07-19 13:40:49, Completed), (2, 2, 1976-05-28 15:02:44, Part), (3, 6, 1979-03-29 02:47:13, Completed), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), order_quantity VARCHAR(80) ); Sample rows from `Order_Items`: (1, 9, 15, 3), (2, 8, 12, 7), (3, 11, 9, 9), ",
        "output": "SELECT t1.customer_name FROM customers as t1 JOIN customer_orders as t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: pldi best paper award 2015 ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name and age of the person who is a friend of Dan or Alice. ###filtered_database_schema: CREATE TABLE `Person` ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT ); Sample rows from `Person`: (Alice, 25, new york city, female, student), (Bob, 35, salt lake city, male, engineer), (Zach, 45, austin, male, doctor), CREATE TABLE `PersonFriend` ( name varchar(20) REFERENCES Person(name), friend varchar(20) REFERENCES Person(name), year INTEGER ); Sample rows from `PersonFriend`: (Alice, Bob, 10), (Zach, Dan, 12), (Bob, Zach, 5), ",
        "output": "SELECT DISTINCT t1.name ,  t1.age FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Dan' OR t2.friend  =  'Alice'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count different addresses of each school. ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT COUNT(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which shipping agent shipped the most documents? List the shipping agent name and the number of documents. ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( document_type_code CHAR(15) PRIMARY KEY, document_type_description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CD, b), (Paper, u), (Hard Drive, f), CREATE TABLE `Roles` ( role_code CHAR(15) PRIMARY KEY, role_description VARCHAR(255) ); Sample rows from `Roles`: (ED, Editor), (PT, Photo), (MG, Manager), CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (0, IT), (1, MX), (2, DE), CREATE TABLE `Ref_Document_Status` ( document_status_code CHAR(15) PRIMARY KEY, document_status_description VARCHAR(255) ); Sample rows from `Ref_Document_Status`: (working, currently working on), (done, mailed), (overdue, mailed late), CREATE TABLE `Ref_Shipping_Agents` ( shipping_agent_code CHAR(15) PRIMARY KEY, shipping_agent_name VARCHAR(255), shipping_agent_description VARCHAR(255) ); Sample rows from `Ref_Shipping_Agents`: (UP, UPS, g), (US, USPS, q), (AL, Airline, w), CREATE TABLE `Documents` ( document_id INTEGER, document_status_code CHAR(15) REFERENCES Ref_Document_Status(document_status_code), document_type_code CHAR(15) REFERENCES Ref_Document_Types(document_type_code), shipping_agent_code CHAR(15) REFERENCES Ref_Shipping_Agents(shipping_agent_code), receipt_date DATETIME, receipt_number VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Documents`: (1, working, CD, UP, 2008-04-21 20:42:25, 19, z), (2, done, Paper, US, 1974-05-08 00:00:46, 34, h), (3, done, Paper, UP, 2014-12-25 17:22:44, 93, h), CREATE TABLE `Employees` ( employee_id INTEGER, role_code CHAR(15) REFERENCES Roles(role_code), employee_name VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Employees`: (1, ED, Koby, h), (2, ED, Kenyon, f), (3, PR, Haley, b), CREATE TABLE `Document_Drafts` ( document_id INTEGER PRIMARY KEY REFERENCES Documents(document_id), draft_number INTEGER PRIMARY KEY, draft_details VARCHAR(255) ); Sample rows from `Document_Drafts`: (1, 0, e), (1, 2, k), (2, 1, v), CREATE TABLE `Draft_Copies` ( document_id INTEGER PRIMARY KEY REFERENCES Document_Drafts(document_id), draft_number INTEGER PRIMARY KEY REFERENCES Document_Drafts(draft_number), copy_number INTEGER PRIMARY KEY ); Sample rows from `Draft_Copies`: (2, 8, 5), (4, 9, 6), (23, 9, 15), CREATE TABLE `Circulation_History` ( document_id INTEGER PRIMARY KEY REFERENCES Draft_Copies(document_id), draft_number INTEGER PRIMARY KEY REFERENCES Draft_Copies(draft_number), copy_number INTEGER PRIMARY KEY REFERENCES Draft_Copies(copy_number), employee_id INTEGER PRIMARY KEY REFERENCES Employees(employee_id) ); Sample rows from `Circulation_History`: (20, 17, 15, 8), (1, 2, 5, 1), (2, 1, 4, 2), CREATE TABLE `Documents_Mailed` ( document_id INTEGER PRIMARY KEY REFERENCES Documents(document_id), mailed_to_address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), mailing_date DATETIME ); Sample rows from `Documents_Mailed`: (2, 8, 1977-04-01 17:03:50), (4, 3, 1992-11-07 15:03:41), (4, 9, 1973-02-21 10:17:01), ",
        "output": "SELECT ref_shipping_agents.shipping_agent_name , COUNT(documents.document_id) FROM ref_shipping_agents JOIN documents ON documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code GROUP BY ref_shipping_agents.shipping_agent_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the names, color descriptions and product descriptions of products with category \"Herbs\". ###filtered_database_schema: CREATE TABLE `Ref_Characteristic_Types` ( characteristic_type_code VARCHAR(15) PRIMARY KEY, characteristic_type_description VARCHAR(80) ); Sample rows from `Ref_Characteristic_Types`: (Grade, Grade), (Purity, Purity), CREATE TABLE `Ref_Colors` ( color_code VARCHAR(15) PRIMARY KEY, color_description VARCHAR(80) ); Sample rows from `Ref_Colors`: (9, red), (5, green), (1, yellow), CREATE TABLE `Ref_Product_Categories` ( product_category_code VARCHAR(15) PRIMARY KEY, product_category_description VARCHAR(80), unit_of_measure VARCHAR(20) ); Sample rows from `Ref_Product_Categories`: (Herbs, Herbs, Handful ), (Seeds, Seeds, Weight - pound,kilo.), (Spices, Spices, Weight - pound,kilo.), CREATE TABLE `Characteristics` ( characteristic_id INTEGER, characteristic_type_code VARCHAR(15) REFERENCES Ref_Characteristic_Types(characteristic_type_code), characteristic_data_type VARCHAR(10), characteristic_name VARCHAR(80), other_characteristic_details VARCHAR(255) ); Sample rows from `Characteristics`: (1, Grade, numquam, slow, None), (2, Grade, doloribus, fast, None), (3, Purity, rem, warm, None), CREATE TABLE `Products` ( product_id INTEGER, color_code VARCHAR(15) REFERENCES Ref_Colors(color_code), product_category_code VARCHAR(15) REFERENCES Ref_Product_Categories(product_category_code), product_name VARCHAR(80), typical_buying_price VARCHAR(20), typical_selling_price VARCHAR(20), product_description VARCHAR(255), other_product_details VARCHAR(255) ); Sample rows from `Products`: (1, 4, Spices, cumin, , 2878.3, et, None), (2, 2, Spices, peper, 352447.2874677, 1892070.2803543, rerum, None), (3, 9, Herbs, basil, 503.8431967, 0.1859512, officia, None), CREATE TABLE `Product_Characteristics` ( product_id INTEGER REFERENCES Products(product_id), characteristic_id INTEGER REFERENCES Characteristics(characteristic_id), product_characteristic_value VARCHAR(50) ); Sample rows from `Product_Characteristics`: (13, 13, low), (11, 2, low), (5, 15, low), ",
        "output": "SELECT t1.product_name ,  t2.color_description ,  t1.product_description FROM products as t1 JOIN ref_colors as t2 ON t1.color_code  =  t2.color_code WHERE product_category_code  =  \"Herbs\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show publishers with a book published in 1989 and a book in 1990. ###filtered_database_schema: CREATE TABLE `book_club` ( book_club_id INT PRIMARY KEY, Year INT, Author_or_Editor TEXT, Book_Title TEXT, Publisher TEXT, Category TEXT, Result TEXT ); Sample rows from `book_club`: (1, 1989, Michael Nava, Goldenboy, Alyson, Gay M/SF, Won [A ]), (2, 1989, Donald Ward, Death Takes the Stage, St. Martin's Press, Gay M/SF, Nom), (3, 1989, Michael Bishop, Unicorn Mountain, William Morrow, Gay M/SF, Nom), CREATE TABLE `movie` ( movie_id INT PRIMARY KEY, Title TEXT, Year INT, Director TEXT, Budget_million REAL, Gross_worldwide INT ); Sample rows from `movie`: (1, The Boondock Saints, 1999, Troy Duffy, 6.0, 30471), (2, The Big Kahuna, 1999, John Swanbeck, 7.0, 3728888), (3, Storm Catcher, 1999, Anthony Hickox, 5.0, 40500), CREATE TABLE `culture_company` ( Company_name TEXT PRIMARY KEY, Type TEXT, Incorporated_in TEXT, Group_Equity_Shareholding REAL, book_club_id TEXT REFERENCES book_club(book_club_id), movie_id TEXT REFERENCES movie(movie_id) ); Sample rows from `culture_company`: (Culture China, Corporate, China, 18.77, 1, 2), (Culture China Cargo, Joint Venture, China, 49.0, 2, 3), (Culture Hong Kong, Joint Venture, Hong Kong, 60.0, 3, 4), ",
        "output": "SELECT publisher FROM book_club WHERE year  =  1989 INTERSECT SELECT publisher FROM book_club WHERE year  =  1990"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: which is the smallest state ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: When was the first asset acquired? ###filtered_database_schema: CREATE TABLE `Third_Party_Companies` ( company_id INTEGER, company_type VARCHAR(5), company_name VARCHAR(255), company_address VARCHAR(255), other_company_details VARCHAR(255) ); Sample rows from `Third_Party_Companies`: (1, Maintenance Contractor, Langworth-Funk, 615 Jacobs Mews, Uganda), (2, Maintenance Contractor, McDermott Group, 873 Conrad Creek Apt. 286, China), (3, Maintenance Contractor, Schuppe-Carroll, 066 Bechtelar Ridge, United Arab Emirates), CREATE TABLE `Maintenance_Contracts` ( maintenance_contract_id INTEGER, maintenance_contract_company_id INTEGER REFERENCES Third_Party_Companies(company_id), contract_start_date DATETIME, contract_end_date DATETIME, other_contract_details VARCHAR(255) ); Sample rows from `Maintenance_Contracts`: (1, 15, 2017-09-13 11:51:29, 2018-03-16 21:21:50, None), (2, 9, 2017-12-18 11:43:16, 2018-03-22 06:00:37, None), (3, 11, 2017-05-06 02:32:19, 2018-03-20 14:02:54, None), CREATE TABLE `Parts` ( part_id INTEGER, part_name VARCHAR(255), chargeable_yn VARCHAR(1), chargeable_amount VARCHAR(20), other_part_details VARCHAR(255) ); Sample rows from `Parts`: (1, top, 0, 4, None), (2, middle, 1, 9, None), (3, package, 1, 9, None), CREATE TABLE `Skills` ( skill_id INTEGER, skill_code VARCHAR(20), skill_description VARCHAR(255) ); Sample rows from `Skills`: (1, ELEC, Electrical), (2, MECH, Mechanical), (3, TV, TV, Video), CREATE TABLE `Staff` ( staff_id INTEGER, staff_name VARCHAR(255), gender VARCHAR(1), other_staff_details VARCHAR(255) ); Sample rows from `Staff`: (1, Audreanne, 1, Manager), (2, Berneice, 1, Manager), (3, Helena, 1, None), CREATE TABLE `Assets` ( asset_id INTEGER, maintenance_contract_id INTEGER REFERENCES Maintenance_Contracts(maintenance_contract_id), supplier_company_id INTEGER REFERENCES Third_Party_Companies(company_id), asset_details VARCHAR(255), asset_make VARCHAR(20), asset_model VARCHAR(20), asset_acquired_date DATETIME, asset_disposed_date DATETIME, other_asset_details VARCHAR(255) ); Sample rows from `Assets`: (1, 2, 2, dell laptop1, PT, 58 ub, 2017-12-25 00:31:27, 2018-03-14 10:50:00, None), (2, 14, 1, dell laptop2, IN, 35 xt, 2018-01-27 00:59:46, 2018-03-20 04:24:09, None), (3, 7, 2, dell laptop3, IT, 63 ok, 2017-09-07 08:13:15, 2018-03-08 20:50:40, Bad condition), CREATE TABLE `Asset_Parts` ( asset_id INTEGER REFERENCES Assets(asset_id), part_id INTEGER REFERENCES Parts(part_id) ); Sample rows from `Asset_Parts`: (5, 3), (3, 3), (10, 1), CREATE TABLE `Maintenance_Engineers` ( engineer_id INTEGER, company_id INTEGER REFERENCES Third_Party_Companies(company_id), first_name VARCHAR(50), last_name VARCHAR(50), other_details VARCHAR(255) ); Sample rows from `Maintenance_Engineers`: (1, 14, Etha, Reinger, Skilled), (2, 2, Clemens, Orn, None), (3, 6, Samanta, Hauck, None), CREATE TABLE `Engineer_Skills` ( engineer_id INTEGER REFERENCES Maintenance_Engineers(engineer_id), skill_id INTEGER REFERENCES Skills(skill_id) ); Sample rows from `Engineer_Skills`: (10, 2), (10, 1), (15, 1), CREATE TABLE `Fault_Log` ( fault_log_entry_id INTEGER, asset_id INTEGER REFERENCES Assets(asset_id), recorded_by_staff_id INTEGER REFERENCES Staff(staff_id), fault_log_entry_datetime DATETIME, fault_description VARCHAR(255), other_fault_details VARCHAR(255) ); Sample rows from `Fault_Log`: (1, 3, 14, 2018-03-21 04:25:00, system error, None), (2, 7, 4, 2018-03-13 09:43:05, system error, None), (3, 6, 9, 2018-02-24 09:28:20, system error, None), CREATE TABLE `Engineer_Visits` ( engineer_visit_id INTEGER, contact_staff_id INTEGER REFERENCES Staff(staff_id), engineer_id INTEGER REFERENCES Maintenance_Engineers(engineer_id), fault_log_entry_id INTEGER REFERENCES Fault_Log(fault_log_entry_id), fault_status VARCHAR(10), visit_start_datetime DATETIME, visit_end_datetime DATETIME, other_visit_details VARCHAR(255) ); Sample rows from `Engineer_Visits`: (1, 8, 8, 13, Waiting, 1978-10-12 23:14:40, 1988-01-07 06:41:51, None), (2, 7, 15, 13, Return, 1980-05-02 23:31:18, 1990-08-30 22:44:16, None), (3, 7, 15, 4, Waiting, 2010-02-23 18:16:23, 1982-05-13 02:08:41, None), CREATE TABLE `Part_Faults` ( part_fault_id INTEGER, part_id INTEGER REFERENCES Parts(part_id), fault_short_name VARCHAR(20), fault_description VARCHAR(255), other_fault_details VARCHAR(255) ); Sample rows from `Part_Faults`: (1, 1, PW, Package Wrong, None), (2, 1, PW, Package Wrong, None), (3, 3, TW, Top Parts Wrong, None), CREATE TABLE `Fault_Log_Parts` ( fault_log_entry_id INTEGER REFERENCES Fault_Log(fault_log_entry_id), part_fault_id INTEGER REFERENCES Part_Faults(part_fault_id), fault_status VARCHAR(10) ); Sample rows from `Fault_Log_Parts`: (12, 3, Reported), (7, 4, Reported), (1, 9, Return), CREATE TABLE `Skills_Required_To_Fix` ( part_fault_id INTEGER REFERENCES Part_Faults(part_fault_id), skill_id INTEGER REFERENCES Skills(skill_id) ); Sample rows from `Skills_Required_To_Fix`: (3, 2), (12, 3), (6, 1), ",
        "output": "SELECT asset_acquired_date FROM assets ORDER BY asset_acquired_date ASC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of scientists who are not working on the project with the highest hours. ###filtered_database_schema: CREATE TABLE `Scientists` ( SSN INT PRIMARY KEY, Name Char(30) ); Sample rows from `Scientists`: (123234877, Michael Rogers), (152934485, Anand Manikutty), (222364883, Carol Smith), CREATE TABLE `Projects` ( Code Char(4) PRIMARY KEY, Name Char(50), Hours INT ); Sample rows from `Projects`: (AeH1, Winds: Studying Bernoullis Principle, 156), (AeH2, Aerodynamics and Bridge Design, 189), (AeH3, Aerodynamics and Gas Mileage, 256), CREATE TABLE `AssignedTo` ( Scientist INT PRIMARY KEY REFERENCES Scientists(SSN), Project char(4) PRIMARY KEY REFERENCES Projects(Code) ); Sample rows from `AssignedTo`: (123234877, AeH1), (152934485, AeH3), (222364883, Ast3), ",
        "output": "SELECT name FROM scientists EXCEPT SELECT t3.name FROM assignedto as t1 JOIN projects as t2 ON t1.project  =  t2.code JOIN scientists as t3 ON t1.scientist  =  t3.ssn WHERE t2.hours  =  (SELECT MAX(hours) FROM projects)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names and number of hours spent training for each player who trains for less than 1500 hours? ###filtered_database_schema: CREATE TABLE `College` ( cName varchar(20) PRIMARY KEY, state varchar(2), enr numeric(5,0) ); Sample rows from `College`: (LSU, LA, 18000), (ASU, AZ, 12000), (OU, OK, 22000), CREATE TABLE `Player` ( pID numeric(5,0) PRIMARY KEY, pName varchar(20), yCard varchar(3), HS numeric(5,0) ); Sample rows from `Player`: (10001, Andrew, no, 1200), (20002, Blake, no, 1600), (30003, Charles, no, 300), CREATE TABLE `Tryout` ( pID numeric(5,0) PRIMARY KEY REFERENCES Player(pID), cName varchar(20) PRIMARY KEY REFERENCES College(cName), pPos varchar(8), decision varchar(3) ); Sample rows from `Tryout`: (10001, LSU, goalie, no), (10001, ASU, goalie, yes), (20002, FSU, striker, yes), ",
        "output": "SELECT pname ,  hs FROM player WHERE hs  <  1500"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of the different artists from Bangladesh who never received a rating higher than a 7? ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find all reviews for businesses rated 2.5 ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT t2.text FROM review as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  =  2.5;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the largest and smallest customer codes? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 28481 Crist Circle East Burdettestad, IA 21232), (2, 0292 Mitchel Pike Port Abefurt, IA 84402-4249), (3, 4062 Mante Place West Lindsey, DE 76199-8015), CREATE TABLE `Staff` ( staff_id INTEGER, staff_gender VARCHAR(1), staff_name VARCHAR(80) ); Sample rows from `Staff`: (1, 1, Tom), (2, 1, Malika), (3, 1, Katelynn), CREATE TABLE `Suppliers` ( supplier_id INTEGER, supplier_name VARCHAR(80), supplier_phone VARCHAR(80) ); Sample rows from `Suppliers`: (1, Lidl, (692)009-5928), (2, AB Store, 1-483-283-4742), (3, Tesco, 287-071-1153x254), CREATE TABLE `Department_Store_Chain` ( dept_store_chain_id INTEGER, dept_store_chain_name VARCHAR(80) ); Sample rows from `Department_Store_Chain`: (1, South), (2, West), (3, East), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method_code VARCHAR(10), customer_code VARCHAR(20), customer_name VARCHAR(80), customer_address VARCHAR(255), customer_phone VARCHAR(80), customer_email VARCHAR(80) ); Sample rows from `Customers`: (1, Credit Card, 401, Ahmed, 75099 Tremblay Port Apt. 163 South Norrisland, SC 80546, 254-072-4068x33935, margarett.vonrueden@example.com), (2, Credit Card, 665, Chauncey, 8408 Lindsay Court East Dasiabury, IL 72656-3552, +41(8)1897032009, stiedemann.sigrid@example.com), (3, Direct Debit, 844, Lukas, 7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871, 197-417-3557, joelle.monahan@example.com), CREATE TABLE `Products` ( product_id INTEGER, product_type_code VARCHAR(10), product_name VARCHAR(80), product_price DECIMAL(19,4) ); Sample rows from `Products`: (1, Clothes, red jeans, 734.73), (2, Clothes, yellow jeans, 687.23), (3, Clothes, black jeans, 695.16), CREATE TABLE `Supplier_Addresses` ( supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Supplier_Addresses`: (4, 5, 2016-09-22 16:41:31, 2018-03-14 20:06:37), (3, 9, 2014-11-07 19:18:49, 2018-03-16 16:39:58), (3, 2, 2008-11-22 12:01:25, 2018-03-02 19:50:22), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 9, 2017-12-11 05:00:22, 2018-03-20 20:52:34), (1, 6, 2017-10-07 23:00:26, 2018-02-28 14:53:52), (10, 8, 2017-04-04 20:00:27, 2018-02-27 20:08:33), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status_code VARCHAR(10), order_date DATETIME ); Sample rows from `Customer_Orders`: (1, 12, Completed, 2018-02-10 15:44:48), (2, 4, New, 2018-01-31 17:49:18), (3, 1, PartFilled, 2018-02-26 12:39:33), CREATE TABLE `Department_Stores` ( dept_store_id INTEGER, dept_store_chain_id INTEGER REFERENCES Department_Store_Chain(dept_store_chain_id), store_name VARCHAR(80), store_address VARCHAR(255), store_phone VARCHAR(80), store_email VARCHAR(80) ); Sample rows from `Department_Stores`: (1, 1, store_name, 01290 Jeremie Parkway Suite 753 North Arielle, MS 51249, (948)944-5099x2027, bmaggio@example.com), (2, 3, store_name, 082 Purdy Expressway O'Connellshire, IL 31732, 877-917-5029, larissa10@example.org), (3, 4, store_name, 994 Travis Plains North Wadeton, WV 27575-3951, 1-216-312-0375, alexandro.mcclure@example.net), CREATE TABLE `Departments` ( department_id INTEGER, dept_store_id INTEGER REFERENCES Department_Stores(dept_store_id), department_name VARCHAR(80) ); Sample rows from `Departments`: (1, 5, human resource), (2, 11, purchasing), (3, 4, marketing), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id) ); Sample rows from `Order_Items`: (1, 9, 7), (2, 1, 3), (3, 5, 2), CREATE TABLE `Product_Suppliers` ( product_id INTEGER PRIMARY KEY REFERENCES Products(product_id), supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), date_supplied_from DATETIME, date_supplied_to DATETIME, total_amount_purchased VARCHAR(80), total_value_purchased DECIMAL(19,4) ); Sample rows from `Product_Suppliers`: (4, 3, 2017-06-19 00:49:05, 2018-03-24 19:29:18, 89366.05, 36014.6), (8, 4, 2017-07-02 00:35:12, 2018-03-25 07:30:49, 25085.57, 36274.56), (3, 3, 2017-10-14 19:15:37, 2018-03-24 02:29:44, 15752.45, 7273.74), CREATE TABLE `Staff_Department_Assignments` ( staff_id INTEGER PRIMARY KEY REFERENCES Staff(staff_id), department_id INTEGER PRIMARY KEY REFERENCES Departments(department_id), date_assigned_from DATETIME, job_title_code VARCHAR(10), date_assigned_to DATETIME ); Sample rows from `Staff_Department_Assignments`: (5, 4, 2017-06-11 22:55:20, Department Manager, 2018-03-23 21:59:11), (10, 5, 2017-12-18 19:12:15, Sales Person, 2018-03-23 20:25:24), (1, 5, 2018-02-14 03:15:29, Clerical Staff, 2018-03-24 19:57:56), ",
        "output": "SELECT MAX(customer_code) ,  MIN(customer_code) FROM customers"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the total checking and saving balance of all accounts sorted by the total balance in ascending order. ###filtered_database_schema: CREATE TABLE `ACCOUNTS` ( custid BIGINT PRIMARY KEY, name VARCHAR(64) ); Sample rows from `ACCOUNTS`: (1, Brown), (2, Wang), (3, O'mahony), CREATE TABLE `SAVINGS` ( custid BIGINT PRIMARY KEY REFERENCES ACCOUNTS(custid), balance FLOAT ); Sample rows from `SAVINGS`: (1, 200000.0), (2, 999999999.0), (3, 230000.0), CREATE TABLE `CHECKING` ( custid BIGINT PRIMARY KEY REFERENCES ACCOUNTS(custid), balance FLOAT ); Sample rows from `CHECKING`: (1, 10000.0), (2, 2000.0), (3, 3000.0), ",
        "output": "SELECT t1.balance + t2.balance FROM checking as t1 JOIN savings as t2 ON t1.custid  =  t2.custid ORDER BY t1.balance + t2.balance"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average age for each dorm and what are the names of each dorm? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT AVG(t1.age) ,  t3.dorm_name FROM student as t1 JOIN lives_in as t2 ON t1.stuid  =  t2.stuid JOIN dorm as t3 ON t3.dormid  =  t2.dormid GROUP BY t3.dorm_name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many customers are there? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 3904 Stroman Passage, Port Melyssa, 14445, Georgia, USA), (2, 053 Quigley Island, Hagenesfurt, 22194, Kentucky, USA), (3, 00704 Zoe Alley, Lake Elaina, 08938, Georgia, USA), CREATE TABLE `Staff` ( staff_id INTEGER, staff_address_id INTEGER REFERENCES Addresses(address_id), nickname VARCHAR(80), first_name VARCHAR(80), middle_name VARCHAR(80), last_name VARCHAR(80), date_of_birth DATETIME, date_joined_staff DATETIME, date_left_staff DATETIME ); Sample rows from `Staff`: (1, 14, thompson.constantin, Janessa, Amara, Sawayn, 2010-12-08 16:55:14, 2017-04-27 03:21:26, 2018-03-23 22:53:12), (2, 3, santos45, Camylle, Icie, Weissnat, 2015-08-01 13:22:43, 2016-06-06 08:54:28, 2018-03-10 15:25:00), (3, 5, ynader, Kaitlin, Stephania, Mertz, 1994-05-17 05:32:11, 2018-01-02 12:24:24, 2018-03-24 10:11:08), CREATE TABLE `Vehicles` ( vehicle_id INTEGER, vehicle_details VARCHAR(255) ); Sample rows from `Vehicles`: (1, Van), (2, Truck), (3, Car), CREATE TABLE `Customers` ( customer_id INTEGER, customer_address_id INTEGER REFERENCES Addresses(address_id), customer_status_code VARCHAR(15), date_became_customer DATETIME, date_of_birth DATETIME, first_name VARCHAR(80), last_name VARCHAR(80), amount_outstanding DOUBLE, email_address VARCHAR(250), phone_number VARCHAR(255), cell_mobile_phone_number VARCHAR(255) ); Sample rows from `Customers`: (1, 13, Bad Customer, 2016-05-11 17:03:48, 1998-12-15 13:24:40, Carole, Bernhard, 255.0, everette.goyette@example.org, 07278206718, 861-638-9797), (2, 10, Bad Customer, 2015-11-16 22:52:14, 1995-07-17 12:13:16, Genevieve, Terry, 7256.0, huel.jana@example.org, +14(5)2351480248, 578-518-4785x612), (3, 10, Good Customer, 2016-04-08 00:28:15, 1994-06-21 01:34:56, Clara, Ortiz, 9443.0, hilario.sporer@example.org, 374-483-2758x85087, 1-197-686-2849x8761), CREATE TABLE `Customer_Payments` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), datetime_payment DATETIME PRIMARY KEY, payment_method_code VARCHAR(10), amount_payment DOUBLE ); Sample rows from `Customer_Payments`: (11, 2018-02-05 18:44:46, Direct Debit, 9570.93), (2, 2018-02-24 10:07:05, Direct Debit, 8180.26), (14, 2018-02-27 20:08:53, Direct Debit, 4610.26), CREATE TABLE `Lessons` ( lesson_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), lesson_status_code VARCHAR(15), staff_id INTEGER REFERENCES Staff(staff_id), vehicle_id INTEGER REFERENCES Vehicles(vehicle_id), lesson_date DATETIME, lesson_time VARCHAR(10), price DOUBLE ); Sample rows from `Lessons`: (1, 6, Cancelled, 8, 3, 2018-02-28 10:55:36, 5, 199.0), (2, 8, Cancelled, 14, 3, 2018-03-07 16:12:36, 6, 167.0), (3, 6, Cancelled, 11, 2, 2018-03-03 15:10:16, 3, 352.0), ",
        "output": "SELECT COUNT(*) FROM customers;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: number of citations of noah a smith ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009. ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Year_Join INT, Age INT ); Sample rows from `artist`: (1, Vijay Singh, Fiji, 1998, 45), (2, John Daly, United States, 1991, 46), (3, Paul Azinger, United States, 1993, 47), CREATE TABLE `exhibition` ( Exhibition_ID INT PRIMARY KEY, Year INT, Theme TEXT, Artist_ID INT REFERENCES artist(Artist_ID), Ticket_Price REAL ); Sample rows from `exhibition`: (1, 2004, Santa Claus, 1, 19.95), (2, 2005, Christmas stocking, 2, 19.95), (3, 2006, Santa Claus and Rudolph the Red-Nosed Reindeer, 4, 14.95), CREATE TABLE `exhibition_record` ( Exhibition_ID INT PRIMARY KEY REFERENCES exhibition(Exhibition_ID), Date TEXT PRIMARY KEY, Attendance INT ); Sample rows from `exhibition_record`: (1, December 2, 965), (1, December 5, 1098), (1, December 7, 2983), ",
        "output": "SELECT AVG(ticket_price) ,  MIN(ticket_price) ,  MAX(ticket_price) FROM exhibition WHERE year  <  2009"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the country name and capital of all countries. ###filtered_database_schema: CREATE TABLE `country` ( Country_id INT PRIMARY KEY, Country_name TEXT, Capital TEXT, Official_native_language TEXT ); Sample rows from `country`: (1, Indonesia, Jakarta, Bahasa Indonesia), (2, Iran, Tehran, Persian ( Arabic script )), (3, Iraq, Baghdad, Arabic ( Arabic script ) Kurdish), CREATE TABLE `team` ( Team_id INT PRIMARY KEY, Name TEXT ); Sample rows from `team`: (1, Columbus Crew), (2, Evalyn Feil), (3, Anais VonRueden), CREATE TABLE `match_season` ( Season REAL PRIMARY KEY, Player TEXT, Position TEXT, Country INT REFERENCES country(Country_id), Team INT REFERENCES team(Team_id), Draft_Pick_Number INT, Draft_Class TEXT, College TEXT ); Sample rows from `match_season`: (1996.0, Steve Ralston Category:Articles with hCards, Midfielder, 6, 1, 18, 1996 MLS College Draft, Florida International), (1997.0, Mike Duhaney Category:Articles with hCards, Defender, 6, 2, 87, 1996 MLS Inaugural Player Draft, UNLV), (1998.0, Ben Olsen Category:Articles with hCards, Midfielder, 4, 3, 2, Project-40, Virginia), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Years_Played TEXT, Total_WL TEXT, Singles_WL TEXT, Doubles_WL TEXT, Team INT REFERENCES team(Team_id) ); Sample rows from `player`: (1, Cho Soong-Jae (630), 1 (2011), 2–0, 1–0, 1–0, 1), (2, Chung Hong (717), 1 (2011), 0–0, 0–0, 0–0, 1), (3, Im Kyu-tae (492), 8 (2003–2005, 2007–2011), 6–9, 5–7, 1–2, 1), ",
        "output": "SELECT country_name ,  capital FROM country"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of candidates. ###filtered_database_schema: CREATE TABLE `candidate` ( Candidate_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Poll_Source TEXT, Date TEXT, Support_rate REAL, Consider_rate REAL, Oppose_rate REAL, Unsure_rate REAL ); Sample rows from `candidate`: (1, 1, WNBC/Marist Poll, Feb 12–15, 2007, 0.25, 0.3, 0.43, 0.2), (2, 3, WNBC/Marist Poll, Feb 12–15, 2007, 0.17, 0.42, 0.32, 0.9), (3, 4, FOX News/Opinion Dynamics Poll, Feb 13–14, 2007, 0.18, 0.34, 0.44, 0.3), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Sex TEXT, Name TEXT, Date_of_Birth TEXT, Height REAL, Weight REAL ); Sample rows from `people`: (1, M, Hubert Henno, 06.10.1976, 188.0, 83.0), (2, M, Dominique Daquin, 10.11.1972, 197.0, 85.0), (3, F, Stéphane Antiga, 03.02.1976, 200.0, 94.0), ",
        "output": "SELECT COUNT(*) FROM candidate"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the average, maximum and total revenues of all companies? ###filtered_database_schema: CREATE TABLE `Manufacturers` ( Code INTEGER, Name VARCHAR(255), Headquarter VARCHAR(255), Founder VARCHAR(255), Revenue REAL ); Sample rows from `Manufacturers`: (1, Sony, Tokyo, Andy, 120.0), (2, Creative Labs, Austin, Owen, 100.0), (3, Hewlett-Packard, Los Angeles, James, 50.0), CREATE TABLE `Products` ( Code INTEGER, Name VARCHAR(255), Price DECIMAL, Manufacturer INTEGER REFERENCES Manufacturers(Code) ); Sample rows from `Products`: (1, Hard drive, 240, 5), (2, Memory, 120, 6), (3, ZIP drive, 150, 4), ",
        "output": "SELECT AVG(revenue) ,  MAX(revenue) ,  SUM(revenue) FROM manufacturers"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name of the album that has the track Ball to the Wall? ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT t1.title FROM albums as t1 JOIN tracks as t2 ON t1.id = t2.genre_id WHERE t2.name = \"Balls to the Wall\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000. ###filtered_database_schema: CREATE TABLE `aircraft` ( Aircraft_ID INT PRIMARY KEY, Order_Year INT, Manufacturer TEXT, Model TEXT, Fleet_Series TEXT, Powertrain TEXT, Fuel_Propulsion TEXT ); Sample rows from `aircraft`: (1, 1992, Gillig, Phantom (High Floor), 444-464 (21), DD S50EGR Allison WB-400R, Diesel), (2, 1996, Gillig, Phantom (High Floor), 465-467 (3), DD S50 Allison WB-400R, Diesel), (3, 1998, Gillig, Phantom (High Floor), 468-473 (6), DD S50 Allison WB-400R, Diesel), CREATE TABLE `pilot` ( Pilot_ID INT PRIMARY KEY, Pilot_name TEXT, Rank INT, Age INT, Nationality TEXT, Position TEXT, Join_Year INT, Team TEXT ); Sample rows from `pilot`: (1, Patrick O'Bryant, 13, 33, United States, Center Team, 2009, Bradley), (2, Jermaine O'Neal, 6, 40, United States, Forward-Center Team, 2008, Eau Claire High School), (3, Dan O'Sullivan, 45, 37, United States, Center Team, 1999, Fordham), CREATE TABLE `pilot_record` ( Record_ID INT, Pilot_ID INT PRIMARY KEY REFERENCES pilot(Pilot_ID), Aircraft_ID INT PRIMARY KEY REFERENCES aircraft(Aircraft_ID), Date TEXT PRIMARY KEY ); Sample rows from `pilot_record`: (1, 1, 1, 2003/01/04), (2, 2, 1, 2004/01/04), (3, 1, 4, 2005/01/04), ",
        "output": "SELECT position FROM pilot WHERE join_year\t <  2000 INTERSECT SELECT position FROM pilot WHERE join_year\t >  2005"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List all the neighbourhoods with Italian restaurant rated less than 2.5 in Madison ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT t1.neighbourhood_name FROM category as t3 JOIN business as t2 ON t3.business_id  =  t2.business_id JOIN category as t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood as t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t2.rating  <  2.5 AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Who is the nominee who has been nominated for the most musicals? ###filtered_database_schema: CREATE TABLE `musical` ( Musical_ID INT PRIMARY KEY, Name TEXT, Year INT, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT ); Sample rows from `musical`: (1, The Phantom of the Opera, 1986, Tony Award, Best Book of a Musical, Bob Fosse, Nominated), (2, Les Misérables, 1986, Tony Award, Best Performance by a Leading Actor in a Musical, Cleavant Derricks, Nominated), (3, Wicked, 1986, Tony Award, Best Direction of a Musical, Bob Fosse, Nominated), CREATE TABLE `actor` ( Actor_ID INT PRIMARY KEY, Name TEXT, Musical_ID INT REFERENCES actor(Actor_ID), Character TEXT, Duration TEXT, age INT ); Sample rows from `actor`: (1, Ray Meagher, 1, Alf Stewart, 1988—, 26), (2, Tom Oliver, 1, Lou Carpenter, 1988, 1992—, 22), (3, Lynne McGranger, 2, Irene Roberts, 1993—, 21), ",
        "output": "SELECT nominee FROM musical GROUP BY nominee ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name of the artist who joined latest? ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Year_Join INT, Age INT ); Sample rows from `artist`: (1, Vijay Singh, Fiji, 1998, 45), (2, John Daly, United States, 1991, 46), (3, Paul Azinger, United States, 1993, 47), CREATE TABLE `exhibition` ( Exhibition_ID INT PRIMARY KEY, Year INT, Theme TEXT, Artist_ID INT REFERENCES artist(Artist_ID), Ticket_Price REAL ); Sample rows from `exhibition`: (1, 2004, Santa Claus, 1, 19.95), (2, 2005, Christmas stocking, 2, 19.95), (3, 2006, Santa Claus and Rudolph the Red-Nosed Reindeer, 4, 14.95), CREATE TABLE `exhibition_record` ( Exhibition_ID INT PRIMARY KEY REFERENCES exhibition(Exhibition_ID), Date TEXT PRIMARY KEY, Attendance INT ); Sample rows from `exhibition_record`: (1, December 2, 965), (1, December 5, 1098), (1, December 7, 2983), ",
        "output": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: which is the density of the state that the largest river in the united states runs through ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT density FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river ) );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what state has the largest city ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name of the entrepreneur with the greatest weight? ###filtered_database_schema: CREATE TABLE `entrepreneur` ( Entrepreneur_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Company TEXT, Money_Requested REAL, Investor TEXT ); Sample rows from `entrepreneur`: (1, 1, Umbrolly, 150000.0, Duncan Bannatyne), (2, 2, Grails Ltd, 120000.0, Doug Richard), (3, 3, Le Beanock, 54000.0, Rachel Elnaugh), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Height REAL, Weight REAL, Date_of_Birth TEXT ); Sample rows from `people`: (1, Francesco Postiglione, 1.9, 80.0, 1972-04-29), (2, Leonardo Binchi, 1.86, 57.0, 1975-08-27), (3, Fabrizio Buonocore, 1.83, 45.0, 1977-04-28), ",
        "output": "SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.weight DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of accounts. ###filtered_database_schema: CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 6, 338, Regular), (2, 14, 562, VIP), (3, 9, 162, VIP), CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(20), customer_last_name VARCHAR(20), customer_address VARCHAR(255), customer_phone VARCHAR(255), customer_email VARCHAR(255), other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Aniyah, Feest, 55975 Theodore Estates Lake Brody, VT 57078, (673)872-5338, fahey.dorian@example.com, None), (2, Susie, Wiza, 6478 Moen Isle Suite 910 Schimmelmouth, VT 96364-4898, 679-845-8645x94312, idickinson@example.com, None), (3, Marcel, Brekke, 1965 Abernathy Plains Port Lilla, LA 44867, 1-511-656-6664, nichole.rodriguez@example.com, None), CREATE TABLE `Customers_Cards` ( card_id INTEGER, customer_id INTEGER, card_type_code VARCHAR(15), card_number VARCHAR(80), date_valid_from DATETIME, date_valid_to DATETIME, other_card_details VARCHAR(255) ); Sample rows from `Customers_Cards`: (1, 14, Credit, 4560596484842, 2011-04-17 09:05:28, 2018-03-07 17:06:19, 5567915676420343), (2, 9, Credit, 4859448397570735, 2012-05-22 02:05:41, 2018-02-25 15:43:32, 4539333582760), (3, 6, Debit, 348237249146948, 2014-08-01 14:26:45, 2018-03-24 15:29:00, 4916210554814), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, previous_transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), card_id INTEGER REFERENCES Customers_Cards(card_id), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DOUBLE, transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 925, 15, 1, Payment, 2018-03-24 06:41:41, 1701.23, None, None), (2, 494, 3, 2, Refund, 2018-03-24 12:08:55, 1931.76, None, None), (3, 642, 4, 3, Payment, 2018-03-24 09:08:27, 486.56, None, None), ",
        "output": "SELECT COUNT(*) FROM accounts"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: TAIL papers in NIPS ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which payment method is used by most customers? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_content VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), other_address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 9443 Boyle Route Suite 857, Lucasville, 416, Colorado, USA, None), (2, 1969 Jabari Port Suite 393, New Sabryna, 721, SouthCarolina, USA, None), (3, 295 Hackett Curve, Reingertown, 255, NewJersey, USA, None), CREATE TABLE `Products` ( product_id INTEGER, product_details VARCHAR(255) ); Sample rows from `Products`: (1, Americano), (2, Dove Chocolate), (3, Latte), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method VARCHAR(15), customer_name VARCHAR(80), date_became_customer DATETIME, other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Cash, Dr. Julia Wuckert MD, 2018-03-01 23:20:10, None), (2, Cheque, Tillman Ernser, 2018-02-28 11:37:44, None), (3, Credit Card, Rodrick Heaney, 2018-03-09 17:41:58, None), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_address_from DATETIME, address_type VARCHAR(15), date_address_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 11, 1985-03-29 20:31:43, Billing, 1993-02-17 17:55:18), (13, 11, 2010-08-25 04:24:35, Billing, 1972-02-17 22:23:38), (2, 14, 2010-12-26 08:52:50, Residential, 1979-07-16 18:22:39), CREATE TABLE `Customer_Contact_Channels` ( customer_id INTEGER REFERENCES Customers(customer_id), channel_code VARCHAR(15), active_from_date DATETIME, active_to_date DATETIME, contact_number VARCHAR(50) ); Sample rows from `Customer_Contact_Channels`: (9, Email, 2017-12-07 18:18:15, 2018-03-23 13:37:14, 940.035.6435x0225), (2, Email, 2017-04-07 04:51:41, 2018-03-23 01:30:52, 189.449.8326x7607), (9, Email, 2017-05-25 16:08:45, 2018-03-13 07:32:25, 958-653-2640), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(15), order_date DATETIME, order_details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 15, Cancelled, 2018-03-21 11:20:46, None), (2, 3, Cancelled, 2018-03-05 06:35:33, None), (3, 5, Delivered, 2018-03-04 07:16:22, Second time), CREATE TABLE `Order_Items` ( order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), order_quantity VARCHAR(15) ); Sample rows from `Order_Items`: (14, 2, 5), (5, 2, 9), (14, 3, 2), ",
        "output": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the description and unit of measurement for products in the 'Herbs' category. ###filtered_database_schema: CREATE TABLE `Ref_Characteristic_Types` ( characteristic_type_code VARCHAR(15) PRIMARY KEY, characteristic_type_description VARCHAR(80) ); Sample rows from `Ref_Characteristic_Types`: (Grade, Grade), (Purity, Purity), CREATE TABLE `Ref_Colors` ( color_code VARCHAR(15) PRIMARY KEY, color_description VARCHAR(80) ); Sample rows from `Ref_Colors`: (9, red), (5, green), (1, yellow), CREATE TABLE `Ref_Product_Categories` ( product_category_code VARCHAR(15) PRIMARY KEY, product_category_description VARCHAR(80), unit_of_measure VARCHAR(20) ); Sample rows from `Ref_Product_Categories`: (Herbs, Herbs, Handful ), (Seeds, Seeds, Weight - pound,kilo.), (Spices, Spices, Weight - pound,kilo.), CREATE TABLE `Characteristics` ( characteristic_id INTEGER, characteristic_type_code VARCHAR(15) REFERENCES Ref_Characteristic_Types(characteristic_type_code), characteristic_data_type VARCHAR(10), characteristic_name VARCHAR(80), other_characteristic_details VARCHAR(255) ); Sample rows from `Characteristics`: (1, Grade, numquam, slow, None), (2, Grade, doloribus, fast, None), (3, Purity, rem, warm, None), CREATE TABLE `Products` ( product_id INTEGER, color_code VARCHAR(15) REFERENCES Ref_Colors(color_code), product_category_code VARCHAR(15) REFERENCES Ref_Product_Categories(product_category_code), product_name VARCHAR(80), typical_buying_price VARCHAR(20), typical_selling_price VARCHAR(20), product_description VARCHAR(255), other_product_details VARCHAR(255) ); Sample rows from `Products`: (1, 4, Spices, cumin, , 2878.3, et, None), (2, 2, Spices, peper, 352447.2874677, 1892070.2803543, rerum, None), (3, 9, Herbs, basil, 503.8431967, 0.1859512, officia, None), CREATE TABLE `Product_Characteristics` ( product_id INTEGER REFERENCES Products(product_id), characteristic_id INTEGER REFERENCES Characteristics(characteristic_id), product_characteristic_value VARCHAR(50) ); Sample rows from `Product_Characteristics`: (13, 13, low), (11, 2, low), (5, 15, low), ",
        "output": "SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the id of the problem log that is created most recently? ###filtered_database_schema: CREATE TABLE `Problem_Category_Codes` ( problem_category_code VARCHAR(20) PRIMARY KEY, problem_category_description VARCHAR(80) ); Sample rows from `Problem_Category_Codes`: (Datatabase, Database design or contents.), (GUI, User Interface.), (Middleware, Infrastructrure and Architecture), CREATE TABLE `Problem_Log` ( problem_log_id INTEGER, assigned_to_staff_id INTEGER REFERENCES Staff(staff_id), problem_id INTEGER REFERENCES Problems(problem_id), problem_category_code VARCHAR(20) REFERENCES Problem_Category_Codes(problem_category_code), problem_status_code VARCHAR(20) REFERENCES Problem_Status_Codes(problem_status_code), log_entry_date DATETIME, log_entry_description VARCHAR(255), log_entry_fix VARCHAR(255), other_log_details VARCHAR(255) ); Sample rows from `Problem_Log`: (1, 11, 11, Middleware, Solved, 2011-03-13 13:11:57, t, k, p), (2, 11, 8, GUI, Solved, 1976-03-31 14:03:02, a, k, s), (3, 12, 1, GUI, Solved, 1974-12-11 01:06:22, b, j, e), CREATE TABLE `Problem_Status_Codes` ( problem_status_code VARCHAR(20) PRIMARY KEY, problem_status_description VARCHAR(80) ); Sample rows from `Problem_Status_Codes`: (Reported, Reported), (Solved, Solved), CREATE TABLE `Product` ( product_id INTEGER, product_name VARCHAR(80), product_details VARCHAR(255) ); Sample rows from `Product`: (1, rose, k), (2, yellow, q), (3, chat, e), CREATE TABLE `Staff` ( staff_id INTEGER, staff_first_name VARCHAR(80), staff_last_name VARCHAR(80), other_staff_details VARCHAR(255) ); Sample rows from `Staff`: (1, Lacey, Bosco, m), (2, Dameon, Frami, x), (3, Ashley, Medhurst, w), CREATE TABLE `Problems` ( problem_id INTEGER, product_id INTEGER REFERENCES Product(product_id), closure_authorised_by_staff_id INTEGER REFERENCES Staff(staff_id), reported_by_staff_id INTEGER REFERENCES Staff(staff_id), date_problem_reported DATETIME, date_problem_closed DATETIME, problem_description VARCHAR(255), other_problem_details VARCHAR(255) ); Sample rows from `Problems`: (1, 4, 4, 2, 1978-06-26 19:10:17, 2012-07-22 19:24:26, x, p), (2, 8, 3, 10, 1988-11-07 16:09:31, 1973-06-07 04:13:51, w, p), (3, 1, 4, 1, 1995-05-14 08:32:56, 1997-02-26 05:06:15, r, i), ",
        "output": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80. ###filtered_database_schema: CREATE TABLE `workshop` ( Workshop_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Name TEXT ); Sample rows from `workshop`: (1, August 18, 2007, London UK, ABC 2007), (2, August 21, 2007, London UK, Conference 2007), (3, August 25, 2007, New Jersey USA, Workshop 2007), CREATE TABLE `submission` ( Submission_ID INT PRIMARY KEY, Scores REAL, Author TEXT, College TEXT ); Sample rows from `submission`: (1, 72.0, Steve Niehaus, Notre Dame), (2, 79.0, Sammy Green, Florida), (3, 78.0, Sherman Smith, Miami (OH)), CREATE TABLE `Acceptance` ( Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID), Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID), Result TEXT ); Sample rows from `Acceptance`: (2, 5, Accepted), (2, 3, Rejected), (3, 2, Rejected), ",
        "output": "SELECT college FROM submission WHERE scores  >  90 INTERSECT SELECT college FROM submission WHERE scores  <  80"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which college has any student who is a goalie and succeeded in the tryout. ###filtered_database_schema: CREATE TABLE `College` ( cName varchar(20) PRIMARY KEY, state varchar(2), enr numeric(5,0) ); Sample rows from `College`: (LSU, LA, 18000), (ASU, AZ, 12000), (OU, OK, 22000), CREATE TABLE `Player` ( pID numeric(5,0) PRIMARY KEY, pName varchar(20), yCard varchar(3), HS numeric(5,0) ); Sample rows from `Player`: (10001, Andrew, no, 1200), (20002, Blake, no, 1600), (30003, Charles, no, 300), CREATE TABLE `Tryout` ( pID numeric(5,0) PRIMARY KEY REFERENCES Player(pID), cName varchar(20) PRIMARY KEY REFERENCES College(cName), pPos varchar(8), decision varchar(3) ); Sample rows from `Tryout`: (10001, LSU, goalie, no), (10001, ASU, goalie, yes), (20002, FSU, striker, yes), ",
        "output": "SELECT cname FROM  tryout WHERE decision  =  'yes' AND ppos  =  'goalie'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the id and star rating of each hotel and sort them in increasing order of price. ###filtered_database_schema: CREATE TABLE `Ref_Hotel_Star_Ratings` ( star_rating_code CHAR(15) PRIMARY KEY, star_rating_description VARCHAR(80) ); Sample rows from `Ref_Hotel_Star_Ratings`: (1, star), (2, star), (3, star), CREATE TABLE `Locations` ( Location_ID INTEGER, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Locations`: (333, Astro Orbiter, 660 Shea Crescent, None), (368, African Animals, 254 Ottilie Junction, None), (417, American Adventure, 53815 Sawayn Tunnel Apt. 297, None), CREATE TABLE `Ref_Attraction_Types` ( Attraction_Type_Code CHAR(15) PRIMARY KEY, Attraction_Type_Description VARCHAR(255) ); Sample rows from `Ref_Attraction_Types`: (2, park), (3, garden), (5, gallery), CREATE TABLE `Visitors` ( Tourist_ID INTEGER PRIMARY KEY, Tourist_Details VARCHAR(255) ); Sample rows from `Visitors`: (164, Toney), (189, Graciela), (204, Vincent), CREATE TABLE `Features` ( Feature_ID INTEGER, Feature_Details VARCHAR(255) ); Sample rows from `Features`: (523, cafe), (528, park), (543, garden), CREATE TABLE `Hotels` ( hotel_id INTEGER, star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code), pets_allowed_yn CHAR(1), price_range REAL, other_hotel_details VARCHAR(255) ); Sample rows from `Hotels`: (123, 5, 1, 2914989.571, None), (144, 4, , , None), (172, 5, , 17012.682586009, None), CREATE TABLE `Tourist_Attractions` ( Tourist_Attraction_ID INTEGER, Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code), Location_ID INTEGER REFERENCES Locations(Location_ID), How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Tourist_Attractions`: (2113, 2, 579, bus, art museum, None, None, None), (2701, 6, 417, walk, UK gallery, None, None, None), (5076, 2, 868, shuttle, flying elephant, None, None, None), CREATE TABLE `Street_Markets` ( Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Market_Details VARCHAR(255) ); Sample rows from `Street_Markets`: (6852, Broadway), (7067, Fish Farm Market), CREATE TABLE `Shops` ( Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Shop_Details VARCHAR(255) ); Sample rows from `Shops`: (8429, soup), (8449, coffee), (8698, Flower), CREATE TABLE `Museums` ( Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Museum_Details VARCHAR(255) ); Sample rows from `Museums`: (2113, Yale Center for British Art), (2701, The Metropolitan Museum of Art), (5076, MoMA), CREATE TABLE `Royal_Family` ( Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Royal_Family_Details VARCHAR(255) ); Sample rows from `Royal_Family`: (9561, None), (9919, None), CREATE TABLE `Theme_Parks` ( Theme_Park_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Theme_Park_Details VARCHAR(255) ); Sample rows from `Theme_Parks`: (5265, Disney), (6476, Sea World), (6523, Universal Studios), CREATE TABLE `Visits` ( Visit_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID), Visit_Date DATETIME, Visit_Details VARCHAR(40) ); Sample rows from `Visits`: (183, 6653, 377, 2004-08-21 03:06:14, ), (268, 5076, 204, 2013-08-06 05:35:51, ), (273, 9360, 211, 2013-10-27 09:56:08, ), CREATE TABLE `Photos` ( Photo_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Photos`: (211, 8449, game1, None, 702, None), (280, 7067, game2, None, 762, None), (303, 5076, game3, None, 392, None), CREATE TABLE `Staff` ( Staff_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(40), Other_Details VARCHAR(255) ); Sample rows from `Staff`: (170, 6476, Whitney, None), (219, 6476, Kaela, None), (237, 7067, Eunice, None), CREATE TABLE `Tourist_Attraction_Features` ( Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID) ); Sample rows from `Tourist_Attraction_Features`: (5076, 528), (5076, 681), (5265, 523), ",
        "output": "SELECT hotel_id ,  star_rating_code FROM hotels ORDER BY price_range ASC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: how many states are there in united states ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT COUNT(state_name) FROM state;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the label that has the most albums? ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT label FROM albums GROUP BY label ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits? ###filtered_database_schema: CREATE TABLE `company` ( Company_ID INT PRIMARY KEY, Rank INT, Company TEXT, Headquarters TEXT, Main_Industry TEXT, Sales_billion REAL, Profits_billion REAL, Assets_billion REAL, Market_Value REAL ); Sample rows from `company`: (1, 1, ExxonMobil, USA, Oil and gas, 433.5, 41.1, 331.1, 407.4), (2, 3, General Electric, USA, Conglomerate, 147.3, 14.2, 717.2, 213.7), (3, 4, Royal Dutch Shell, Netherlands, Oil and gas, 470.2, 30.9, 340.5, 227.6), CREATE TABLE `gas_station` ( Station_ID INT PRIMARY KEY, Open_Year INT, Location TEXT, Manager_Name TEXT, Vice_Manager_Name TEXT, Representative_Name TEXT ); Sample rows from `gas_station`: (1, 1998, Herne Hill, BrianWingrave, Russell Denman, Clive Burr), (2, 1999, Channel Hill, SimonMarloe, Russell Brown, Rob Jefferies ), (3, 2000, Reading North, Simon Cope Derek Marloe, James Colin , Dave Edwards Roger ), CREATE TABLE `station_company` ( Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID), Company_ID INT PRIMARY KEY REFERENCES company(Company_ID), Rank_of_the_Year INT ); Sample rows from `station_company`: (11, 1, 1), (1, 3, 2), (6, 6, 3), ",
        "output": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which customers have orders with status \"Packing\"? Give me the customer names. ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_name VARCHAR(80), customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Savannah, rerum), (2, George, est), (3, Alberto, deleniti), CREATE TABLE `Invoices` ( invoice_number INTEGER, invoice_date DATETIME, invoice_details VARCHAR(255) ); Sample rows from `Invoices`: (1, 1989-09-03 16:03:05, vitae), (2, 1989-12-11 16:40:57, magnam), (3, 1995-10-07 14:13:05, et), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(10), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 2, Shipped, 2009-02-21 15:26:19, None), (2, 11, Shipped, 1974-06-24 22:10:26, None), (3, 4, Shipped, 1982-12-29 21:10:11, None), CREATE TABLE `Products` ( product_id INTEGER, product_name VARCHAR(80), product_details VARCHAR(255) ); Sample rows from `Products`: (1, food, None), (2, book, None), (3, food, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, product_id INTEGER REFERENCES Products(product_id), order_id INTEGER REFERENCES Orders(order_id), order_item_status VARCHAR(10), order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 6, Finish, None), (2, 15, 6, Finish, None), (3, 12, 15, Finish, None), CREATE TABLE `Shipments` ( shipment_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), shipment_tracking_number VARCHAR(80), shipment_date DATETIME, other_shipment_details VARCHAR(255) ); Sample rows from `Shipments`: (1, 5, 13, 3452, 1983-08-13 22:34:11, None), (2, 7, 2, 0114, 1977-11-10 12:11:25, None), (3, 10, 5, 478, 2006-01-17 03:08:05, None), CREATE TABLE `Shipment_Items` ( shipment_id INTEGER REFERENCES Shipments(shipment_id), order_item_id INTEGER REFERENCES Order_Items(order_item_id) ); Sample rows from `Shipment_Items`: (11, 12), (10, 15), (10, 12), ",
        "output": "SELECT DISTINCT t1.customer_name FROM customers as t1 JOIN orders as t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status = \"Packing\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For each faculty rank, show the number of faculty members who have it. ###filtered_database_schema: CREATE TABLE `Activity` ( actid INTEGER, activity_name varchar(25) ); Sample rows from `Activity`: (770, Mountain Climbing), (771, Canoeing), (772, Kayaking), CREATE TABLE `Participates_in` ( stuid INTEGER REFERENCES Student(StuID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Participates_in`: (1001, 770), (1001, 771), (1001, 777), CREATE TABLE `Faculty_Participates_in` ( FacID INTEGER REFERENCES Faculty(FacID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Faculty_Participates_in`: (1082, 784), (1082, 785), (1082, 790), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), ",
        "output": "SELECT rank ,  COUNT(*) FROM faculty GROUP BY rank"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of all the catalog entries. ###filtered_database_schema: CREATE TABLE `Attribute_Definitions` ( attribute_id INTEGER, attribute_name VARCHAR(30), attribute_data_type VARCHAR(10) ); Sample rows from `Attribute_Definitions`: (1, Green, Bool), (2, Black, Bool), (3, Yellow, Bool), CREATE TABLE `Catalogs` ( catalog_id INTEGER, catalog_name VARCHAR(50), catalog_publisher VARCHAR(80), date_of_publication DATETIME, date_of_latest_revision DATETIME ); Sample rows from `Catalogs`: (1, Chocolate, Koepp-Rutherford handmade chocolate store, 2013-03-15 05:09:17, 2017-09-26 12:10:36), (2, Coffee Bean, Murray Coffee shop, 2012-04-13 06:37:09, 2017-10-26 01:16:51), (3, Lemonade, Russel-Gislason Lemon shop, 2012-11-27 19:29:22, 2017-12-04 06:48:13), CREATE TABLE `Catalog_Structure` ( catalog_level_number INTEGER, catalog_id INTEGER REFERENCES Catalogs(catalog_id), catalog_level_name VARCHAR(50) ); Sample rows from `Catalog_Structure`: (1, 1, Category), (8, 2, Sub-Category), (9, 8, Product), CREATE TABLE `Catalog_Contents` ( catalog_entry_id INTEGER, catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number), parent_entry_id INTEGER, previous_entry_id INTEGER, next_entry_id INTEGER, catalog_entry_name VARCHAR(80), product_stock_number VARCHAR(50), price_in_dollars DOUBLE, price_in_euros DOUBLE, price_in_pounds DOUBLE, capacity VARCHAR(20), length VARCHAR(20), height VARCHAR(20), width VARCHAR(20) ); Sample rows from `Catalog_Contents`: (1, 1, 5, 9, 7, Cola, 89 cp, 200.78, 159.84, 172.17, 1, 3, 9, 5), (2, 8, 6, 9, 8, Root beer, 37 hq, 687.59, 590.11, 471.78, 8, 6, 5, 6), (3, 8, 6, 6, 1, Cream Soda, 52 ee, 360.5, 202.32, 110.32, 5, 9, 7, 8), CREATE TABLE `Catalog_Contents_Additional_Attributes` ( catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id), catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number), attribute_id INTEGER, attribute_value VARCHAR(255) ); Sample rows from `Catalog_Contents_Additional_Attributes`: (5, 8, 4, 1), (15, 9, 3, 0), (11, 1, 2, 0), ",
        "output": "SELECT DISTINCT(catalog_entry_name) FROM catalog_contents"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: which states does the longest river cross ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT traverse FROM river WHERE length  =  ( SELECT MAX(length) FROM river );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: which states border the state with the smallest area ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state ) );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the addresses of all the course authors or tutors. ###filtered_database_schema: CREATE TABLE `Course_Authors_and_Tutors` ( author_id INTEGER, author_tutor_ATB VARCHAR(3), login_name VARCHAR(40), password VARCHAR(40), personal_name VARCHAR(80), middle_name VARCHAR(80), family_name VARCHAR(80), gender_mf VARCHAR(1), address_line_1 VARCHAR(80) ); Sample rows from `Course_Authors_and_Tutors`: (1, 331, jmckenzie, c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b, Cathrine, Ruthie, Grant, 0, 756 Monahan Mews Spinkashire, NJ 64230-5098), (2, 975, heidenreich.ara, 24b0ee84063c3b017ab1839e01b7280f47f7c7c2, Retha, Corene, Armstrong, 0, 98623 Huels Manor Jasttown, DE 31611), (3, 349, clementina29, cdaf6c3483f19e2253659a40a3aab786a3390f78, Darius, Ethyl, Reichel, 0, 99296 Keeling Courts North Audreanne, IL 28272), CREATE TABLE `Students` ( student_id INTEGER, date_of_registration DATETIME, date_of_latest_logon DATETIME, login_name VARCHAR(40), password VARCHAR(10), personal_name VARCHAR(40), middle_name VARCHAR(40), family_name VARCHAR(40) ); Sample rows from `Students`: (1, 2015-07-22 13:32:35, 2017-10-17 22:52:26, annamae.hoppe, db8765bb6f, Wilson, Aubrey, Ward), (2, 2015-07-02 00:21:42, 2017-06-24 22:16:27, wmiller, 35faf8182a, Karson, Luella, Jaskolski), (3, 2015-10-11 03:23:27, 2018-03-10 23:22:23, ahartmann, 8e064ec4e6, Mariela, Brandt, Legros), CREATE TABLE `Subjects` ( subject_id INTEGER, subject_name VARCHAR(120) ); Sample rows from `Subjects`: (1, Computer Science), (2, Arts), (3, Language), CREATE TABLE `Courses` ( course_id INTEGER, author_id INTEGER REFERENCES Course_Authors_and_Tutors(author_id), subject_id INTEGER REFERENCES Subjects(subject_id), course_name VARCHAR(120), course_description VARCHAR(255) ); Sample rows from `Courses`: (1, 8, 1, database, database), (2, 6, 1, advanced database, advanced database), (3, 15, 1, operating system, operating system), CREATE TABLE `Student_Course_Enrolment` ( registration_id INTEGER, student_id INTEGER REFERENCES Students(student_id), course_id INTEGER REFERENCES Courses(course_id), date_of_enrolment DATETIME, date_of_completion DATETIME ); Sample rows from `Student_Course_Enrolment`: (1, 11, 2, 2017-10-09 07:09:02, 2018-02-26 07:48:52), (2, 15, 4, 2017-11-13 12:49:33, 2018-03-04 01:24:56), (3, 10, 8, 2017-10-17 13:50:40, 2018-03-22 02:53:01), CREATE TABLE `Student_Tests_Taken` ( registration_id INTEGER REFERENCES Student_Course_Enrolment(registration_id), date_test_taken DATETIME, test_result VARCHAR(255) ); Sample rows from `Student_Tests_Taken`: (12, 2018-03-25 03:27:16, Fail), (10, 2018-03-25 21:50:22, Pass), (7, 2018-03-21 00:32:25, Pass), ",
        "output": "SELECT address_line_1 FROM course_authors_and_tutors"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many musicals has each nominee been nominated for? ###filtered_database_schema: CREATE TABLE `musical` ( Musical_ID INT PRIMARY KEY, Name TEXT, Year INT, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT ); Sample rows from `musical`: (1, The Phantom of the Opera, 1986, Tony Award, Best Book of a Musical, Bob Fosse, Nominated), (2, Les Misérables, 1986, Tony Award, Best Performance by a Leading Actor in a Musical, Cleavant Derricks, Nominated), (3, Wicked, 1986, Tony Award, Best Direction of a Musical, Bob Fosse, Nominated), CREATE TABLE `actor` ( Actor_ID INT PRIMARY KEY, Name TEXT, Musical_ID INT REFERENCES actor(Actor_ID), Character TEXT, Duration TEXT, age INT ); Sample rows from `actor`: (1, Ray Meagher, 1, Alf Stewart, 1988—, 26), (2, Tom Oliver, 1, Lou Carpenter, 1988, 1992—, 22), (3, Lynne McGranger, 2, Irene Roberts, 1993—, 21), ",
        "output": "SELECT nominee ,  COUNT(*) FROM musical GROUP BY nominee"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the host year of city \"Taizhou ( Zhejiang )\"? ###filtered_database_schema: CREATE TABLE `city` ( City_ID INT PRIMARY KEY, City TEXT, Hanzi TEXT, Hanyu_Pinyin TEXT, Regional_Population INT, GDP REAL ); Sample rows from `city`: (1, Shanghai, 上海, Shànghǎi, 23019148, 1919.57), (2, Nanjing ( Jiangsu ), 南京, Nánjīng, 8004680, 614.55), (3, Hangzhou ( Zhejiang ), 杭州, Hángzhōu, 8700400, 701.18), CREATE TABLE `match` ( Match_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Score TEXT, Result TEXT, Competition TEXT ); Sample rows from `match`: (1, 18 February 1992, Estadio Cuscatlán , San Salvador , El Salvador, 1-0, 2-0, Friendly match), (2, 19 July 1992, Estadio Rigoberto López , Managua , Nicaragua, 3-0, 5-0, 1994 FIFA World Cup qualification), (3, 23 July 1992, Estadio Cuscatlán , San Salvador , El Salvador, 1-0, 5-1, 1994 FIFA World Cup qualification), CREATE TABLE `temperature` ( City_ID INT PRIMARY KEY REFERENCES city(City_ID), Jan REAL, Feb REAL, Mar REAL, Apr REAL, Jun REAL, Jul REAL, Aug REAL, Sep REAL, Oct REAL, Nov REAL, Dec REAL ); Sample rows from `temperature`: (1, 17.8, 17.8, 18.3, 18.9, 20.0, 20.6, 20.6, 20.6, 20.0, 19.4, 18.3), (2, 26.1, 26.1, 26.1, 26.1, 27.8, 27.8, 28.3, 28.3, 28.3, 27.2, 26.7), (3, 18.9, 18.3, 19.4, 20.0, 22.2, 23.3, 23.9, 23.3, 22.8, 21.7, 20.0), CREATE TABLE `hosting_city` ( Year INT PRIMARY KEY, Match_ID INT REFERENCES match(Match_ID), Host_City TEXT REFERENCES city(City_ID) ); Sample rows from `hosting_city`: (2008, 1, 1), (2009, 2, 2), (2010, 3, 2), ",
        "output": "SELECT t2.year FROM city as t1 JOIN hosting_city as t2 ON t1.city_id  =  t2.host_city WHERE t1.city  =  \"Taizhou ( Zhejiang )\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name of the department with the most students enrolled? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT t4.dept_name FROM class as t1 JOIN enroll as t2 ON t1.class_code  =  t2.class_code JOIN course as t3 ON t1.crs_code  =  t3.crs_code JOIN department as t4 ON t3.dept_code  =  t4.dept_code GROUP BY t3.dept_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Tell me the highest, lowest, and average cost of procedures. ###filtered_database_schema: CREATE TABLE `Physician` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), SSN INTEGER ); Sample rows from `Physician`: (1, John Dorian, Staff Internist, 111111111), (2, Elliot Reid, Attending Physician, 222222222), (3, Christopher Turk, Surgical Attending Physician, 333333333), CREATE TABLE `Department` ( DepartmentID INTEGER, Name VARCHAR(30), Head INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Department`: (1, General Medicine, 4), (2, Surgery, 7), (3, Psychiatry, 9), CREATE TABLE `Affiliated_With` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID), PrimaryAffiliation BOOLEAN ); Sample rows from `Affiliated_With`: (1, 1, 1), (2, 1, 1), (3, 1, 0), CREATE TABLE `Procedures` ( Code INTEGER, Name VARCHAR(30), Cost REAL ); Sample rows from `Procedures`: (1, Reverse Rhinopodoplasty, 1500.0), (2, Obtuse Pyloric Recombobulation, 3750.0), (3, Folded Demiophtalmectomy, 4500.0), CREATE TABLE `Trained_In` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code), CertificationDate DATETIME, CertificationExpires DATETIME ); Sample rows from `Trained_In`: (3, 1, 2008-01-01, 2008-12-31), (3, 2, 2008-01-01, 2008-12-31), (3, 5, 2008-01-01, 2008-12-31), CREATE TABLE `Patient` ( SSN INTEGER, Name VARCHAR(30), Address VARCHAR(30), Phone VARCHAR(30), InsuranceID INTEGER, PCP INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Patient`: (100000001, John Smith, 42 Foobar Lane, 555-0256, 68476213, 1), (100000002, Grace Ritchie, 37 Snafu Drive, 555-0512, 36546321, 2), (100000003, Random J. Patient, 101 Omgbbq Street, 555-1204, 65465421, 2), CREATE TABLE `Nurse` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), Registered BOOLEAN, SSN INTEGER ); Sample rows from `Nurse`: (101, Carla Espinosa, Head Nurse, 1, 111111110), (102, Laverne Roberts, Nurse, 1, 222222220), (103, Paul Flowers, Nurse, 0, 333333330), CREATE TABLE `Appointment` ( AppointmentID INTEGER, Patient INTEGER REFERENCES Patient(SSN), PrepNurse INTEGER REFERENCES Nurse(EmployeeID), Physician INTEGER REFERENCES Physician(EmployeeID), Start DATETIME, End DATETIME, ExaminationRoom TEXT ); Sample rows from `Appointment`: (13216584, 100000001, 101, 1, 2008-04-24 10:00, 2008-04-24 11:00, A), (26548913, 100000002, 101, 2, 2008-04-24 10:00, 2008-04-24 11:00, B), (36549879, 100000001, 102, 1, 2008-04-25 10:00, 2008-04-25 11:00, A), CREATE TABLE `Medication` ( Code INTEGER, Name VARCHAR(30), Brand VARCHAR(30), Description VARCHAR(30) ); Sample rows from `Medication`: (1, Procrastin-X, X, N/A), (2, Thesisin, Foo Labs, N/A), (3, Awakin, Bar Laboratories, N/A), CREATE TABLE `Prescribes` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Medication INTEGER PRIMARY KEY REFERENCES Medication(Code), Date DATETIME PRIMARY KEY, Appointment INTEGER REFERENCES Appointment(AppointmentID), Dose VARCHAR(30) ); Sample rows from `Prescribes`: (1, 100000001, 1, 2008-04-24 10:47, 13216584, 5), (9, 100000004, 2, 2008-04-27 10:53, 86213939, 10), (9, 100000004, 2, 2008-04-30 16:53, None, 5), CREATE TABLE `Block` ( BlockFloor INTEGER PRIMARY KEY, BlockCode INTEGER PRIMARY KEY ); Sample rows from `Block`: (1, 1), (1, 2), (1, 3), CREATE TABLE `Room` ( RoomNumber INTEGER, RoomType VARCHAR(30), BlockFloor INTEGER REFERENCES Block(BlockFloor), BlockCode INTEGER REFERENCES Block(BlockCode), Unavailable BOOLEAN ); Sample rows from `Room`: (101, Single, 1, 1, 0), (102, Single, 1, 1, 0), (103, Single, 1, 1, 0), CREATE TABLE `On_Call` ( Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID), BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor), BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode), OnCallStart DATETIME PRIMARY KEY, OnCallEnd DATETIME PRIMARY KEY ); Sample rows from `On_Call`: (101, 1, 1, 2008-11-04 11:00, 2008-11-04 19:00), (101, 1, 2, 2008-11-04 11:00, 2008-11-04 19:00), (102, 1, 3, 2008-11-04 11:00, 2008-11-04 19:00), CREATE TABLE `Stay` ( StayID INTEGER, Patient INTEGER REFERENCES Patient(SSN), Room INTEGER REFERENCES Room(RoomNumber), StayStart DATETIME, StayEnd DATETIME ); Sample rows from `Stay`: (3215, 100000001, 111, 2008-05-01, 2008-05-04), (3216, 100000003, 123, 2008-05-03, 2008-05-14), (3217, 100000004, 112, 2008-05-02, 2008-05-03), CREATE TABLE `Undergoes` ( Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code), Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID), DateUndergoes DATETIME PRIMARY KEY, Physician INTEGER REFERENCES Physician(EmployeeID), AssistingNurse INTEGER REFERENCES Nurse(EmployeeID) ); Sample rows from `Undergoes`: (100000001, 6, 3215, 2008-05-02, 3, 101), (100000001, 2, 3215, 2008-05-03, 7, 101), (100000004, 1, 3217, 2008-05-07, 3, 102), ",
        "output": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of artists who have had volumes. ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Artist TEXT, Age INT, Famous_Title TEXT, Famous_Release_date TEXT ); Sample rows from `artist`: (1, Gorgoroth, 34, Bergen 1996, November 2007), (2, Ophiolatry, 35, Transmutation, January 21, 2008), (3, Ophiolatry, 22, Antievangelistical Process (re-release), 2009), CREATE TABLE `volume` ( Volume_ID INT PRIMARY KEY, Volume_Issue TEXT, Issue_Date TEXT, Weeks_on_Top REAL, Song TEXT, Artist_ID INT REFERENCES artist(Artist_ID) ); Sample rows from `volume`: (1, 45:14 §, 27 December 1986 - 10 January, 3.0, The Way, 1), (2, 45:15, 17 January, 1.0, Everybody Have Fun Tonight , 2), (3, 45:16, 24 January, 1.0, Walk Like an Egyptian , 1), CREATE TABLE `music_festival` ( ID INT PRIMARY KEY, Music_Festival TEXT, Date_of_ceremony TEXT, Category TEXT, Volume INT REFERENCES volume(Volume_ID), Result TEXT ); Sample rows from `music_festival`: (1, 34th England Academy Prize, 18 February 2011, Best Song, 1, Nominated), (2, 34th Japan Academy Prize, 18 February 2011, Best Lyrics, 2, Nominated), (3, 34th European Academy Prize, 18 February 2011, Best Song, 3, Awarded), ",
        "output": "SELECT COUNT(DISTINCT artist_id) FROM volume"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories. ###filtered_database_schema: CREATE TABLE `buildings` ( id INT PRIMARY KEY, name TEXT, City TEXT, Height INT, Stories INT, Status TEXT ); Sample rows from `buildings`: (1, Torre KOI, Monterrey, 220, 67, under construction), (2, Torre Mitikah, Mexico City, 210, 60, under construction), (3, Punto Chapultepec, Mexico City, 210, 59, proposed), CREATE TABLE `Companies` ( id INT PRIMARY KEY, name TEXT, Headquarters TEXT, Industry TEXT, Sales_billion REAL, Profits_billion REAL, Assets_billion REAL, Market_Value_billion TEXT ); Sample rows from `Companies`: (1, JPMorgan Chase, USA, Banking, 115.5, 17.4, 2117.6, 182.2), (2, HSBC, UK, Banking, 103.3, 13.3, 2467.9, 186.5), (3, General Electric, USA, Conglomerate, 156.2, 11.6, 751.2, 216.2), CREATE TABLE `Office_locations` ( building_id INT PRIMARY KEY REFERENCES buildings(id), company_id INT PRIMARY KEY REFERENCES Companies(id), move_in_year INT ); Sample rows from `Office_locations`: (1, 1, 2021), (2, 2, 2022), (3, 4, 2023), ",
        "output": "SELECT name FROM buildings WHERE status  =  \"on-hold\" ORDER BY stories ASC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are all role codes? ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( document_type_code CHAR(15) PRIMARY KEY, document_type_description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CD, b), (Paper, u), (Hard Drive, f), CREATE TABLE `Roles` ( role_code CHAR(15) PRIMARY KEY, role_description VARCHAR(255) ); Sample rows from `Roles`: (ED, Editor), (PT, Photo), (MG, Manager), CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (0, IT), (1, MX), (2, DE), CREATE TABLE `Ref_Document_Status` ( document_status_code CHAR(15) PRIMARY KEY, document_status_description VARCHAR(255) ); Sample rows from `Ref_Document_Status`: (working, currently working on), (done, mailed), (overdue, mailed late), CREATE TABLE `Ref_Shipping_Agents` ( shipping_agent_code CHAR(15) PRIMARY KEY, shipping_agent_name VARCHAR(255), shipping_agent_description VARCHAR(255) ); Sample rows from `Ref_Shipping_Agents`: (UP, UPS, g), (US, USPS, q), (AL, Airline, w), CREATE TABLE `Documents` ( document_id INTEGER, document_status_code CHAR(15) REFERENCES Ref_Document_Status(document_status_code), document_type_code CHAR(15) REFERENCES Ref_Document_Types(document_type_code), shipping_agent_code CHAR(15) REFERENCES Ref_Shipping_Agents(shipping_agent_code), receipt_date DATETIME, receipt_number VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Documents`: (1, working, CD, UP, 2008-04-21 20:42:25, 19, z), (2, done, Paper, US, 1974-05-08 00:00:46, 34, h), (3, done, Paper, UP, 2014-12-25 17:22:44, 93, h), CREATE TABLE `Employees` ( employee_id INTEGER, role_code CHAR(15) REFERENCES Roles(role_code), employee_name VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Employees`: (1, ED, Koby, h), (2, ED, Kenyon, f), (3, PR, Haley, b), CREATE TABLE `Document_Drafts` ( document_id INTEGER PRIMARY KEY REFERENCES Documents(document_id), draft_number INTEGER PRIMARY KEY, draft_details VARCHAR(255) ); Sample rows from `Document_Drafts`: (1, 0, e), (1, 2, k), (2, 1, v), CREATE TABLE `Draft_Copies` ( document_id INTEGER PRIMARY KEY REFERENCES Document_Drafts(document_id), draft_number INTEGER PRIMARY KEY REFERENCES Document_Drafts(draft_number), copy_number INTEGER PRIMARY KEY ); Sample rows from `Draft_Copies`: (2, 8, 5), (4, 9, 6), (23, 9, 15), CREATE TABLE `Circulation_History` ( document_id INTEGER PRIMARY KEY REFERENCES Draft_Copies(document_id), draft_number INTEGER PRIMARY KEY REFERENCES Draft_Copies(draft_number), copy_number INTEGER PRIMARY KEY REFERENCES Draft_Copies(copy_number), employee_id INTEGER PRIMARY KEY REFERENCES Employees(employee_id) ); Sample rows from `Circulation_History`: (20, 17, 15, 8), (1, 2, 5, 1), (2, 1, 4, 2), CREATE TABLE `Documents_Mailed` ( document_id INTEGER PRIMARY KEY REFERENCES Documents(document_id), mailed_to_address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), mailing_date DATETIME ); Sample rows from `Documents_Mailed`: (2, 8, 1977-04-01 17:03:50), (4, 3, 1992-11-07 15:03:41), (4, 9, 1973-02-21 10:17:01), ",
        "output": "SELECT role_code FROM roles;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students. ###filtered_database_schema: CREATE TABLE `list` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Grade INTEGER, Classroom INTEGER ); Sample rows from `list`: (CAR, MAUDE, 2, 101), (KRISTENSEN, STORMY, 6, 112), (VANDERWOUDE, SHERWOOD, 3, 107), CREATE TABLE `teachers` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Classroom INTEGER ); Sample rows from `teachers`: (MACROSTIE, MIN, 101), (COVIN, JEROME, 102), (MOYER, OTHA, 103), ",
        "output": "SELECT t1.firstname ,  t1.lastname FROM list as t1 JOIN teachers as t2 ON t1.classroom  =  t2.classroom WHERE t2.firstname  =  \"OTHA\" AND t2.lastname  =  \"MOYER\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the state, account type, and credit score of the customer whose number of loan is 0. ###filtered_database_schema: CREATE TABLE `bank` ( branch_ID INT PRIMARY KEY, bname varchar(20), no_of_customers INT, city varchar(10), state varchar(20) ); Sample rows from `bank`: (1, morningside, 203, New York City, New York), (2, downtown, 123, Salt Lake City, Utah), (3, broadway, 453, New York City, New York), CREATE TABLE `customer` ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal INT, no_of_loans INT, credit_score INT, branch_ID INT REFERENCES bank(branch_ID), state varchar(20) ); Sample rows from `customer`: (1, Mary, saving, 2000, 2, 30, 2, Utah), (2, Jack, checking, 1000, 1, 20, 1, Texas), (3, Owen, saving, 800000, 0, 210, 3, New York), CREATE TABLE `loan` ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3) REFERENCES customer(Cust_ID), branch_ID varchar(3) REFERENCES bank(branch_ID), amount INT ); Sample rows from `loan`: (1, Mortgages, 1, 1, 2050), (2, Auto, 1, 2, 3000), (3, Business, 3, 3, 5000), ",
        "output": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name of the media type that is least common across all tracks? ###filtered_database_schema: CREATE TABLE `Album` ( AlbumId INTEGER, Title varchar(160), ArtistId INTEGER PRIMARY KEY REFERENCES Artist(ArtistId) ); Sample rows from `Album`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `Artist` ( ArtistId INTEGER, Name varchar(120) ); Sample rows from `Artist`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `Customer` ( CustomerId INTEGER, FirstName varchar(40), LastName varchar(20), Company varchar(80), Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60), SupportRepId INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId) ); Sample rows from `Customer`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `Employee` ( EmployeeId INTEGER, LastName varchar(20), FirstName varchar(20), Title varchar(30), ReportsTo INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId), BirthDate datetime, HireDate datetime, Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60) ); Sample rows from `Employee`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `Genre` ( GenreId INTEGER, Name varchar(120) ); Sample rows from `Genre`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `Invoice` ( InvoiceId INTEGER, CustomerId INTEGER PRIMARY KEY REFERENCES Customer(CustomerId), InvoiceDate datetime, BillingAddress varchar(70), BillingCity varchar(40), BillingState varchar(40), BillingCountry varchar(40), BillingPostalCode varchar(10), Total decimal(10,2) ); Sample rows from `Invoice`: (1, 2, 2009-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2009-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2009-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `InvoiceLine` ( InvoiceLineId INTEGER, InvoiceId INTEGER PRIMARY KEY REFERENCES Invoice(InvoiceId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId), UnitPrice decimal(10,2), Quantity INTEGER ); Sample rows from `InvoiceLine`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `MediaType` ( MediaTypeId INTEGER, Name varchar(120) ); Sample rows from `MediaType`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `Playlist` ( PlaylistId INTEGER, Name varchar(120) ); Sample rows from `Playlist`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `PlaylistTrack` ( PlaylistId INTEGER PRIMARY KEY REFERENCES Playlist(PlaylistId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId) ); Sample rows from `PlaylistTrack`: (1, 1), (8, 1), (17, 1), CREATE TABLE `Track` ( TrackId INTEGER, Name varchar(200), AlbumId INTEGER PRIMARY KEY REFERENCES Album(AlbumId), MediaTypeId INTEGER PRIMARY KEY REFERENCES MediaType(MediaTypeId), GenreId INTEGER PRIMARY KEY REFERENCES Genre(GenreId), Composer varchar(220), Milliseconds INTEGER, Bytes INTEGER, UnitPrice decimal(10,2) ); Sample rows from `Track`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), ",
        "output": "SELECT t1.name FROM mediatype as t1 JOIN track as t2 ON t1.mediatypeid  =  t2.mediatypeid GROUP BY t2.mediatypeid ORDER BY COUNT(*) asC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many citations does noah a smith have ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(t4.citedpaperid) FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids of all songs that have higher resolution of the average resolution in the modern genre? ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT f_id FROM song WHERE resolution  >  (SELECT AVG(resolution) FROM song WHERE genre_is  =  \"modern\")"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average fastest lap speed for races held after 2004, for each race, ordered by year? ###filtered_database_schema: CREATE TABLE `circuits` ( circuitId INTEGER, circuitRef TEXT, name TEXT, location TEXT, country TEXT, lat REAL, lng REAL, alt TEXT, url TEXT ); Sample rows from `circuits`: (1, albert_park, Albert Park Grand Prix Circuit, Melbourne, Australia, -37.8497, 144.968, 10, http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit), (2, sepang, Sepang International Circuit, Kuala Lumpur, Malaysia, 2.76083, 101.738, , http://en.wikipedia.org/wiki/Sepang_International_Circuit), (3, bahrain, Bahrain International Circuit, Sakhir, Bahrain, 26.0325, 50.5106, , http://en.wikipedia.org/wiki/Bahrain_International_Circuit), CREATE TABLE `races` ( raceId INTEGER, year INTEGER, round INTEGER, circuitId INTEGER REFERENCES circuits(circuitId), name TEXT, date TEXT, time TEXT, url TEXT ); Sample rows from `races`: (1, 2009, 1, 1, Australian Grand Prix, 2009-03-29, 06:00:00, http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix), (2, 2009, 2, 2, Malaysian Grand Prix, 2009-04-05, 09:00:00, http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix), (3, 2009, 3, 17, Chinese Grand Prix, 2009-04-19, 07:00:00, http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix), CREATE TABLE `drivers` ( driverId INTEGER, driverRef TEXT, number TEXT, code TEXT, forename TEXT, surname TEXT, dob TEXT, nationality TEXT, url TEXT ); Sample rows from `drivers`: (1, hamilton, 44, HAM, Lewis, Hamilton, 07/01/1985, British, http://en.wikipedia.org/wiki/Lewis_Hamilton), (2, heidfeld, , HEI, Nick, Heidfeld, 10/05/1977, German, http://en.wikipedia.org/wiki/Nick_Heidfeld), (3, rosberg, 6, ROS, Nico, Rosberg, 27/06/1985, German, http://en.wikipedia.org/wiki/Nico_Rosberg), CREATE TABLE `status` ( statusId INTEGER, status TEXT ); Sample rows from `status`: (1, Finished), (2, Disqualified), (3, Accident), CREATE TABLE `seasons` ( year INTEGER, url TEXT ); Sample rows from `seasons`: (1950, http://en.wikipedia.org/wiki/1950_Formula_One_season), (1951, http://en.wikipedia.org/wiki/1951_Formula_One_season), (1952, http://en.wikipedia.org/wiki/1952_Formula_One_season), CREATE TABLE `constructors` ( constructorId INTEGER, constructorRef TEXT, name TEXT, nationality TEXT, url TEXT ); Sample rows from `constructors`: (1, mclaren, McLaren, British, http://en.wikipedia.org/wiki/McLaren), (2, bmw_sauber, BMW Sauber, German, http://en.wikipedia.org/wiki/BMW_Sauber), (3, williams, Williams, British, http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering), CREATE TABLE `constructorStandings` ( constructorStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `constructorStandings`: (1, 18, 1, 14.0, 1, 1, 1), (2, 18, 2, 8.0, 3, 3, 0), (3, 18, 3, 9.0, 2, 2, 0), CREATE TABLE `results` ( resultId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, grid INTEGER, position TEXT, positionText TEXT, positionOrder INTEGER, points REAL, laps TEXT, time TEXT, milliseconds TEXT, fastestLap TEXT, rank TEXT, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId INTEGER ); Sample rows from `results`: (1, 18, 1, 1, 22, 1, 1, 1, 1, 10.0, 58, 34:50.6, 5690616, 39, 2, 01:27.5, 218.3, 1), (2, 18, 2, 2, 3, 5, 2, 2, 2, 8.0, 58, 5.478, 5696094, 41, 3, 01:27.7, 217.586, 1), (3, 18, 3, 3, 7, 7, 3, 3, 3, 6.0, 58, 8.163, 5698779, 41, 5, 01:28.1, 216.719, 1), CREATE TABLE `driverStandings` ( driverStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `driverStandings`: (1, 18, 1, 10.0, 1, 1, 1), (2, 18, 2, 8.0, 2, 2, 0), (3, 18, 3, 6.0, 3, 3, 0), CREATE TABLE `constructorResults` ( constructorResultsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, status TEXT ); Sample rows from `constructorResults`: (1, 18, 1, 14.0, NULL), (2, 18, 2, 8.0, NULL), (3, 18, 3, 9.0, NULL), CREATE TABLE `qualifying` ( qualifyId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, position INTEGER, q1 TEXT, q2 TEXT, q3 TEXT ); Sample rows from `qualifying`: (1, 18, 1, 1, 22, 1, 1:26.572, 1:25.187, 1:26.714), (2, 18, 9, 2, 4, 2, 1:26.103, 1:25.315, 1:26.869), (3, 18, 5, 1, 23, 3, 1:25.664, 1:25.452, 1:27.079), CREATE TABLE `pitStops` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), stop INTEGER PRIMARY KEY, lap INTEGER, time TEXT, duration TEXT, milliseconds INTEGER ); CREATE TABLE `lapTimes` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), lap INTEGER PRIMARY KEY, position INTEGER, time TEXT, milliseconds INTEGER ); ",
        "output": "SELECT AVG(t2.fastestlapspeed) ,  t1.name ,  t1.year FROM races as t1 JOIN results as t2 ON t1.raceid = t2.raceid WHERE t1.year > 2014 GROUP BY t1.name ORDER BY t1.year"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many customers do we have? ###filtered_database_schema: CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 6, 338, Regular), (2, 14, 562, VIP), (3, 9, 162, VIP), CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(20), customer_last_name VARCHAR(20), customer_address VARCHAR(255), customer_phone VARCHAR(255), customer_email VARCHAR(255), other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Aniyah, Feest, 55975 Theodore Estates Lake Brody, VT 57078, (673)872-5338, fahey.dorian@example.com, None), (2, Susie, Wiza, 6478 Moen Isle Suite 910 Schimmelmouth, VT 96364-4898, 679-845-8645x94312, idickinson@example.com, None), (3, Marcel, Brekke, 1965 Abernathy Plains Port Lilla, LA 44867, 1-511-656-6664, nichole.rodriguez@example.com, None), CREATE TABLE `Customers_Cards` ( card_id INTEGER, customer_id INTEGER, card_type_code VARCHAR(15), card_number VARCHAR(80), date_valid_from DATETIME, date_valid_to DATETIME, other_card_details VARCHAR(255) ); Sample rows from `Customers_Cards`: (1, 14, Credit, 4560596484842, 2011-04-17 09:05:28, 2018-03-07 17:06:19, 5567915676420343), (2, 9, Credit, 4859448397570735, 2012-05-22 02:05:41, 2018-02-25 15:43:32, 4539333582760), (3, 6, Debit, 348237249146948, 2014-08-01 14:26:45, 2018-03-24 15:29:00, 4916210554814), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, previous_transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), card_id INTEGER REFERENCES Customers_Cards(card_id), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DOUBLE, transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 925, 15, 1, Payment, 2018-03-24 06:41:41, 1701.23, None, None), (2, 494, 3, 2, Refund, 2018-03-24 12:08:55, 1931.76, None, None), (3, 642, 4, 3, Payment, 2018-03-24 09:08:27, 486.56, None, None), ",
        "output": "SELECT COUNT(*) FROM customers"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names and years of all races that had a driver with the last name Lewis? ###filtered_database_schema: CREATE TABLE `circuits` ( circuitId INTEGER, circuitRef TEXT, name TEXT, location TEXT, country TEXT, lat REAL, lng REAL, alt TEXT, url TEXT ); Sample rows from `circuits`: (1, albert_park, Albert Park Grand Prix Circuit, Melbourne, Australia, -37.8497, 144.968, 10, http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit), (2, sepang, Sepang International Circuit, Kuala Lumpur, Malaysia, 2.76083, 101.738, , http://en.wikipedia.org/wiki/Sepang_International_Circuit), (3, bahrain, Bahrain International Circuit, Sakhir, Bahrain, 26.0325, 50.5106, , http://en.wikipedia.org/wiki/Bahrain_International_Circuit), CREATE TABLE `races` ( raceId INTEGER, year INTEGER, round INTEGER, circuitId INTEGER REFERENCES circuits(circuitId), name TEXT, date TEXT, time TEXT, url TEXT ); Sample rows from `races`: (1, 2009, 1, 1, Australian Grand Prix, 2009-03-29, 06:00:00, http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix), (2, 2009, 2, 2, Malaysian Grand Prix, 2009-04-05, 09:00:00, http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix), (3, 2009, 3, 17, Chinese Grand Prix, 2009-04-19, 07:00:00, http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix), CREATE TABLE `drivers` ( driverId INTEGER, driverRef TEXT, number TEXT, code TEXT, forename TEXT, surname TEXT, dob TEXT, nationality TEXT, url TEXT ); Sample rows from `drivers`: (1, hamilton, 44, HAM, Lewis, Hamilton, 07/01/1985, British, http://en.wikipedia.org/wiki/Lewis_Hamilton), (2, heidfeld, , HEI, Nick, Heidfeld, 10/05/1977, German, http://en.wikipedia.org/wiki/Nick_Heidfeld), (3, rosberg, 6, ROS, Nico, Rosberg, 27/06/1985, German, http://en.wikipedia.org/wiki/Nico_Rosberg), CREATE TABLE `status` ( statusId INTEGER, status TEXT ); Sample rows from `status`: (1, Finished), (2, Disqualified), (3, Accident), CREATE TABLE `seasons` ( year INTEGER, url TEXT ); Sample rows from `seasons`: (1950, http://en.wikipedia.org/wiki/1950_Formula_One_season), (1951, http://en.wikipedia.org/wiki/1951_Formula_One_season), (1952, http://en.wikipedia.org/wiki/1952_Formula_One_season), CREATE TABLE `constructors` ( constructorId INTEGER, constructorRef TEXT, name TEXT, nationality TEXT, url TEXT ); Sample rows from `constructors`: (1, mclaren, McLaren, British, http://en.wikipedia.org/wiki/McLaren), (2, bmw_sauber, BMW Sauber, German, http://en.wikipedia.org/wiki/BMW_Sauber), (3, williams, Williams, British, http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering), CREATE TABLE `constructorStandings` ( constructorStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `constructorStandings`: (1, 18, 1, 14.0, 1, 1, 1), (2, 18, 2, 8.0, 3, 3, 0), (3, 18, 3, 9.0, 2, 2, 0), CREATE TABLE `results` ( resultId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, grid INTEGER, position TEXT, positionText TEXT, positionOrder INTEGER, points REAL, laps TEXT, time TEXT, milliseconds TEXT, fastestLap TEXT, rank TEXT, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId INTEGER ); Sample rows from `results`: (1, 18, 1, 1, 22, 1, 1, 1, 1, 10.0, 58, 34:50.6, 5690616, 39, 2, 01:27.5, 218.3, 1), (2, 18, 2, 2, 3, 5, 2, 2, 2, 8.0, 58, 5.478, 5696094, 41, 3, 01:27.7, 217.586, 1), (3, 18, 3, 3, 7, 7, 3, 3, 3, 6.0, 58, 8.163, 5698779, 41, 5, 01:28.1, 216.719, 1), CREATE TABLE `driverStandings` ( driverStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `driverStandings`: (1, 18, 1, 10.0, 1, 1, 1), (2, 18, 2, 8.0, 2, 2, 0), (3, 18, 3, 6.0, 3, 3, 0), CREATE TABLE `constructorResults` ( constructorResultsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, status TEXT ); Sample rows from `constructorResults`: (1, 18, 1, 14.0, NULL), (2, 18, 2, 8.0, NULL), (3, 18, 3, 9.0, NULL), CREATE TABLE `qualifying` ( qualifyId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, position INTEGER, q1 TEXT, q2 TEXT, q3 TEXT ); Sample rows from `qualifying`: (1, 18, 1, 1, 22, 1, 1:26.572, 1:25.187, 1:26.714), (2, 18, 9, 2, 4, 2, 1:26.103, 1:25.315, 1:26.869), (3, 18, 5, 1, 23, 3, 1:25.664, 1:25.452, 1:27.079), CREATE TABLE `pitStops` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), stop INTEGER PRIMARY KEY, lap INTEGER, time TEXT, duration TEXT, milliseconds INTEGER ); CREATE TABLE `lapTimes` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), lap INTEGER PRIMARY KEY, position INTEGER, time TEXT, milliseconds INTEGER ); ",
        "output": "SELECT t2.name ,  t2.year FROM results as t1 JOIN races as t2 ON t1.raceid = t2.raceid JOIN drivers as t3 ON t1.driverid = t3.driverid WHERE t3.forename = \"Lewis\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names and balances of checking accounts belonging to the customer with the lowest savings balance? ###filtered_database_schema: CREATE TABLE `ACCOUNTS` ( custid BIGINT PRIMARY KEY, name VARCHAR(64) ); Sample rows from `ACCOUNTS`: (1, Brown), (2, Wang), (3, O'mahony), CREATE TABLE `SAVINGS` ( custid BIGINT PRIMARY KEY REFERENCES ACCOUNTS(custid), balance FLOAT ); Sample rows from `SAVINGS`: (1, 200000.0), (2, 999999999.0), (3, 230000.0), CREATE TABLE `CHECKING` ( custid BIGINT PRIMARY KEY REFERENCES ACCOUNTS(custid), balance FLOAT ); Sample rows from `CHECKING`: (1, 10000.0), (2, 2000.0), (3, 3000.0), ",
        "output": "SELECT t1.name ,  t2.balance FROM accounts as t1 JOIN checking as t2 ON t1.custid  =  t2.custid JOIN savings as t3 ON t1.custid  =  t3.custid ORDER BY t3.balance LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: the papers on semantic parsing by li dong at acl in 2016 ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t2.paperid FROM paperkeyphrase as t5 JOIN keyphrase as t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN paper as t2 ON t2.paperid  =  t5.paperid JOIN venue as t6 ON t6.venueid  =  t2.venueid JOIN writes as t4 ON t4.paperid  =  t2.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"li dong\" AND t3.keyphrasename  =  \"semantic parsing\" AND t2.year  =  2016 AND t6.venuename  =  \"acl\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of cities that are in the county with the most police officers? ###filtered_database_schema: CREATE TABLE `county_public_safety` ( County_ID INT PRIMARY KEY, Name TEXT, Population INT, Police_officers INT, Residents_per_officer INT, Case_burden INT, Crime_rate REAL, Police_force TEXT, Location TEXT ); Sample rows from `county_public_safety`: (1, Abbotsford, 128165, 187, 685, 81, 118.0, Abbotsford Police Department, East), (2, Burnaby, 204320, 253, 808, 100, 123.0, RCMP, East), (3, Campbell River, 30810, 40, 770, 137, 178.0, RCMP, West), CREATE TABLE `city` ( City_ID INT PRIMARY KEY, County_ID INT REFERENCES county_public_safety(County_ID), Name TEXT, White REAL, Black REAL, Amerindian REAL, Asian REAL, Multiracial REAL, Hispanic REAL ); Sample rows from `city`: (1, 1, Adjuntas, 93.1, 3.1, 0.3, 0.0, 3.4, 99.6), (2, 1, Aguada, 86.6, 5.3, 0.3, 0.1, 7.7, 99.4), (3, 1, Aguadilla, 83.0, 7.4, 0.3, 0.2, 8.2, 98.5), ",
        "output": "SELECT name FROM city WHERE county_id  =  (SELECT county_id FROM county_public_safety ORDER BY police_officers DESC LIMIT 1)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of department that offers the class whose description has the word \"Statistics\". ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT t2.dept_name FROM course as t1 JOIN department as t2 ON t1.dept_code  =  t2.dept_code WHERE t1.crs_description LIKE '%Statistics%'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of courses that have either 3 credits or 1 credit but 4 hours. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), CREATE TABLE `Department` ( DNO INTEGER, Division VARCHAR(2), DName VARCHAR(25), Room VARCHAR(5), Building VARCHAR(13), DPhone INTEGER ); Sample rows from `Department`: (10, AS, History of Art, 268, Mergenthaler, 7117), (20, AS, Biology, 144, Mudd, 7330), (30, AS, Chemistry, 113, Remsen, 7429), CREATE TABLE `Member_of` ( FacID INTEGER REFERENCES Faculty(FacID), DNO INTEGER REFERENCES Department(DNO), Appt_Type VARCHAR(15) ); Sample rows from `Member_of`: (7792, 600, Primary), (9210, 520, Primary), (9811, 550, Primary), CREATE TABLE `Course` ( CID VARCHAR(7) PRIMARY KEY, CName VARCHAR(40), Credits INTEGER, Instructor INTEGER REFERENCES Faculty(FacID), Days VARCHAR(5), Hours VARCHAR(11), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Course`: (600.101, COMPUTER LITERACY, 3, 6112, MTW, 3, 600), (600.103, INTRODUCTION TO COMPUTER SCIENCE, 1, 4230, Th, 4, 600), (600.107, INTRO TO PROGRAMMING IN JAVA, 3, 1193, MTW, 3, 600), CREATE TABLE `Minor_in` ( StuID INTEGER REFERENCES Student(StuID), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Minor_in`: (1004, 520), (1005, 550), (1006, 50), CREATE TABLE `Enrolled_in` ( StuID INTEGER REFERENCES Student(StuID), CID VARCHAR(7) REFERENCES Course(CID), Grade VARCHAR(2) REFERENCES Gradeconversion(lettergrade) ); Sample rows from `Enrolled_in`: (1001, 550.681, A-), (1001, 600.303, B), (1001, 600.315, B+), CREATE TABLE `Gradeconversion` ( lettergrade VARCHAR(2) PRIMARY KEY, gradepoint FLOAT ); Sample rows from `Gradeconversion`: (A+, 4.0), (A, 4.0), (A-, 3.7), ",
        "output": "SELECT cname FROM course WHERE credits  =  3 UNION SELECT cname FROM course WHERE credits  =  1 AND hours  =  4"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many movie ratings have more than 3 stars? ###filtered_database_schema: CREATE TABLE `Movie` ( mID INT PRIMARY KEY, title TEXT, year INT, director TEXT ); Sample rows from `Movie`: (101, Gone with the Wind, 1939, Victor Fleming), (102, Star Wars, 1977, George Lucas), (103, The Sound of Music, 1965, Robert Wise), CREATE TABLE `Reviewer` ( rID INT PRIMARY KEY, name TEXT ); Sample rows from `Reviewer`: (201, Sarah Martinez), (202, Daniel Lewis), (203, Brittany Harris), CREATE TABLE `Rating` ( rID INT REFERENCES Reviewer(rID), mID INT REFERENCES Movie(mID), stars INT, ratingDate date ); Sample rows from `Rating`: (201, 101, 2, 2011-01-22), (201, 101, 4, 2011-01-27), (202, 106, 4, None), ",
        "output": "SELECT COUNT(*) FROM rating WHERE stars  >  3"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many tracks belong to rock genre? ###filtered_database_schema: CREATE TABLE `Album` ( AlbumId INTEGER, Title varchar(160), ArtistId INTEGER PRIMARY KEY REFERENCES Artist(ArtistId) ); Sample rows from `Album`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `Artist` ( ArtistId INTEGER, Name varchar(120) ); Sample rows from `Artist`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `Customer` ( CustomerId INTEGER, FirstName varchar(40), LastName varchar(20), Company varchar(80), Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60), SupportRepId INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId) ); Sample rows from `Customer`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `Employee` ( EmployeeId INTEGER, LastName varchar(20), FirstName varchar(20), Title varchar(30), ReportsTo INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId), BirthDate datetime, HireDate datetime, Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60) ); Sample rows from `Employee`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `Genre` ( GenreId INTEGER, Name varchar(120) ); Sample rows from `Genre`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `Invoice` ( InvoiceId INTEGER, CustomerId INTEGER PRIMARY KEY REFERENCES Customer(CustomerId), InvoiceDate datetime, BillingAddress varchar(70), BillingCity varchar(40), BillingState varchar(40), BillingCountry varchar(40), BillingPostalCode varchar(10), Total decimal(10,2) ); Sample rows from `Invoice`: (1, 2, 2009-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2009-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2009-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `InvoiceLine` ( InvoiceLineId INTEGER, InvoiceId INTEGER PRIMARY KEY REFERENCES Invoice(InvoiceId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId), UnitPrice decimal(10,2), Quantity INTEGER ); Sample rows from `InvoiceLine`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `MediaType` ( MediaTypeId INTEGER, Name varchar(120) ); Sample rows from `MediaType`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `Playlist` ( PlaylistId INTEGER, Name varchar(120) ); Sample rows from `Playlist`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `PlaylistTrack` ( PlaylistId INTEGER PRIMARY KEY REFERENCES Playlist(PlaylistId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId) ); Sample rows from `PlaylistTrack`: (1, 1), (8, 1), (17, 1), CREATE TABLE `Track` ( TrackId INTEGER, Name varchar(200), AlbumId INTEGER PRIMARY KEY REFERENCES Album(AlbumId), MediaTypeId INTEGER PRIMARY KEY REFERENCES MediaType(MediaTypeId), GenreId INTEGER PRIMARY KEY REFERENCES Genre(GenreId), Composer varchar(220), Milliseconds INTEGER, Bytes INTEGER, UnitPrice decimal(10,2) ); Sample rows from `Track`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), ",
        "output": "SELECT COUNT(*) FROM genre as t1 JOIN track as t2 ON t1.genreid  =  t2.genreid WHERE t1.name  =  \"Rock\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the title of the prerequisite class of International Finance course? ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT title FROM course WHERE course_id IN (SELECT t1.prereq_id FROM prereq as t1 JOIN course as t2 ON t1.course_id  =  t2.course_id WHERE t2.title  =  'International Finance')"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the city with the smallest population ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN(population) FROM city );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which department has the highest average student GPA, and what is the average gpa? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT t2.dept_name ,  AVG(t1.stu_gpa) FROM student as t1 JOIN department as t2 ON t1.dept_code  =  t2.dept_code GROUP BY t1.dept_code ORDER BY AVG(t1.stu_gpa) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the total number of residents for the districts with the 3 largest areas? ###filtered_database_schema: CREATE TABLE `product` ( product_id INT PRIMARY KEY, product TEXT, dimensions TEXT, dpi REAL, pages_per_minute_color REAL, max_page_size TEXT, interface TEXT ); Sample rows from `product`: (1, Fujitsu fi-6130 A4 Series Scanner, 301 x 160 x 158, 600.0, 30.0, A4, USB 2.0), (2, Plustek MobileOffice D28 Corporate, 303 x 94 x 60, 600.0, 28.0, A4, USB 2.0), (3, Xerox Travel Scanner 100, 289 x 51 x 38, 600.0, 4.0, A4, USB 2.0), CREATE TABLE `store` ( Store_ID INT PRIMARY KEY, Store_Name TEXT, Type TEXT, Area_size REAL, Number_of_product_category REAL, Ranking INT ); Sample rows from `store`: (1, Miramichi, City Mall, 179.84, 17811.0, 2), (2, Neguac, Village Store, 26.69, 1678.0, 3), (3, Rogersville, Village Store, 7.23, 1170.0, 1), CREATE TABLE `district` ( District_ID INT PRIMARY KEY, District_name TEXT, Headquartered_City TEXT, City_Population REAL, City_Area REAL ); Sample rows from `district`: (1, Attock District, Attock City, 94620.0, 20.0), (2, Bahawalnagar District, Bahawalnagar City, 134936.0, 13.0), (3, Bahawalpur District, Bahawalpur City, 530438.0, 38.0), CREATE TABLE `store_product` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), Product_ID INT PRIMARY KEY REFERENCES product(Product_ID) ); Sample rows from `store_product`: (1, 1), (1, 2), (1, 3), CREATE TABLE `store_district` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), District_ID INT REFERENCES district(District_ID) ); Sample rows from `store_district`: (1, 15), (2, 15), (3, 11), ",
        "output": "SELECT SUM(city_population) FROM district ORDER BY city_area DESC LIMIT 3"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the names of customers who have the most mailshots. ###filtered_database_schema: CREATE TABLE `Premises` ( premise_id INTEGER, premises_type VARCHAR(15), premise_details VARCHAR(255) ); Sample rows from `Premises`: (1, Warehouse, 036 Lueilwitz Harbor), (2, Warehouse, 676 Kelly Spur), (3, Residence, 27839 Carissa Tunnel Suite 048), CREATE TABLE `Products` ( product_id INTEGER, product_category VARCHAR(15), product_name VARCHAR(80) ); Sample rows from `Products`: (1, Food, Coffee Bean), (2, Electronics, Keyboard), (3, Books, Four Seasons), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method VARCHAR(15), customer_name VARCHAR(80), customer_phone VARCHAR(80), customer_email VARCHAR(80), customer_address VARCHAR(255), customer_login VARCHAR(80), customer_password VARCHAR(10) ); Sample rows from `Customers`: (1, Credit Card, Wendell, (773)971-9411x759, rodriguez.nathanael@example.net, 618 Webster Stream Apt. 161, None, b4459ad261), (2, Direct Debit, Gage, (402)890-2603x6005, stark.elna@example.net, 0260 Walker Trace, None, 7905d7f1b1), (3, Direct Debit, Elvera, 1-878-600-7193x8180, madyson.mclaughlin@example.org, 280 Landen Lake, None, 0b9f651030), CREATE TABLE `Mailshot_Campaigns` ( mailshot_id INTEGER, product_category VARCHAR(15), mailshot_name VARCHAR(80), mailshot_start_date DATETIME, mailshot_end_date DATETIME ); Sample rows from `Mailshot_Campaigns`: (1, food, US, 2018-02-15 09:52:17, 2018-03-08 14:40:20), (2, clothes, US, 2017-09-14 12:05:30, 2018-03-15 01:06:16), (3, food, FED, 2017-06-16 11:18:45, 2018-03-13 14:42:26), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER REFERENCES Customers(customer_id), premise_id INTEGER REFERENCES Premises(premise_id), date_address_from DATETIME, address_type_code VARCHAR(15), date_address_to DATETIME ); Sample rows from `Customer_Addresses`: (15, 1, 1992-08-23 21:17:38, Billing, 2018-02-28 20:54:58), (2, 2, 2010-02-23 02:49:50, Billing, 2018-03-15 18:34:41), (1, 1, 1975-12-24 10:01:37, Shipping, 2018-03-08 08:03:51), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status_code VARCHAR(15), shipping_method_code VARCHAR(15), order_placed_datetime DATETIME, order_delivered_datetime DATETIME, order_shipping_charges VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 2, Cancelled, Unspecified, 2015-06-15 18:19:26, 2018-03-20 12:00:00, 85.79), (2, 8, Cancelled, Unspecified, 2009-07-05 20:02:55, 2018-03-20 12:00:00, 98.4), (3, 9, Cancelled, FedEx, 2008-11-15 12:22:36, 2018-03-20 12:00:00, 36.87), CREATE TABLE `Mailshot_Customers` ( mailshot_id INTEGER REFERENCES Mailshot_Campaigns(mailshot_id), customer_id INTEGER REFERENCES Customers(customer_id), outcome_code VARCHAR(15), mailshot_customer_date DATETIME ); Sample rows from `Mailshot_Customers`: (4, 3, Order, 2018-03-15 15:43:14), (10, 1, No Response, 2018-03-04 13:06:55), (15, 9, No Response, 2018-03-11 11:32:20), CREATE TABLE `Order_Items` ( item_id INTEGER, order_item_status_code VARCHAR(15), order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), item_status_code VARCHAR(15), item_delivered_datetime DATETIME, item_order_quantity VARCHAR(80) ); Sample rows from `Order_Items`: (1, Delivered, 10, 13, good, 2018-02-25 18:22:10, 6), (2, Paid, 6, 7, good, 2018-02-27 18:04:55, 7), (3, Cancelled, 8, 1, good, 2018-03-16 15:58:27, 4), ",
        "output": "SELECT t2.customer_name FROM mailshot_customers as t1 JOIN customers as t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is all the information about employees hired before June 21, 2002? ###filtered_database_schema: CREATE TABLE `regions` ( REGION_ID decimal(5,0) PRIMARY KEY, REGION_NAME varchar(25) ); Sample rows from `regions`: (1, Europe\\r), (2, Americas\\r), (3, Asia\\r), CREATE TABLE `countries` ( COUNTRY_ID varchar(2) PRIMARY KEY, COUNTRY_NAME varchar(40), REGION_ID decimal(10,0) REFERENCES regions(REGION_ID) ); Sample rows from `countries`: (AR, Argentina, 2), (AU, Australia, 3), (BE, Belgium, 1), CREATE TABLE `departments` ( DEPARTMENT_ID decimal(4,0) PRIMARY KEY, DEPARTMENT_NAME varchar(30), MANAGER_ID decimal(6,0), LOCATION_ID decimal(4,0) ); Sample rows from `departments`: (10, Administration, 200, 1700), (20, Marketing, 201, 1800), (30, Purchasing, 114, 1700), CREATE TABLE `jobs` ( JOB_ID varchar(10) PRIMARY KEY, JOB_TITLE varchar(35), MIN_SALARY decimal(6,0), MAX_SALARY decimal(6,0) ); Sample rows from `jobs`: (AD_PRES, President, 20000, 40000), (AD_VP, Administration Vice President, 15000, 30000), (AD_ASST, Administration Assistant, 3000, 6000), CREATE TABLE `employees` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY, FIRST_NAME varchar(20), LAST_NAME varchar(25), EMAIL varchar(25), PHONE_NUMBER varchar(20), HIRE_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), SALARY decimal(8,2), COMMISSION_PCT decimal(2,2), MANAGER_ID decimal(6,0), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `employees`: (100, Steven, King, SKING, 515.123.4567, 1987-06-17, AD_PRES, 24000, 0, 0, 90), (101, Neena, Kochhar, NKOCHHAR, 515.123.4568, 1987-06-18, AD_VP, 17000, 0, 100, 90), (102, Lex, De Haan, LDEHAAN, 515.123.4569, 1987-06-19, AD_VP, 17000, 0, 100, 90), CREATE TABLE `job_history` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY REFERENCES employees(EMPLOYEE_ID), START_DATE date PRIMARY KEY, END_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `job_history`: (102, 1993-01-13, 1998-07-24, IT_PROG, 60), (101, 1989-09-21, 1993-10-27, AC_ACCOUNT, 110), (101, 1993-10-28, 1997-03-15, AC_MGR, 110), CREATE TABLE `locations` ( LOCATION_ID decimal(4,0) PRIMARY KEY, STREET_ADDRESS varchar(40), POSTAL_CODE varchar(12), CITY varchar(30), STATE_PROVINCE varchar(25), COUNTRY_ID varchar(2) REFERENCES countries(COUNTRY_ID) ); Sample rows from `locations`: (1000, 1297 Via Cola di Rie, 989, Roma, , IT), (1100, 93091 Calle della Testa, 10934, Venice, , IT), (1200, 2017 Shinjuku-ku, 1689, Tokyo, Tokyo Prefecture, JP), ",
        "output": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the first name and last name of customers have the amount of outstanding between 1000 and 3000. ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 3904 Stroman Passage, Port Melyssa, 14445, Georgia, USA), (2, 053 Quigley Island, Hagenesfurt, 22194, Kentucky, USA), (3, 00704 Zoe Alley, Lake Elaina, 08938, Georgia, USA), CREATE TABLE `Staff` ( staff_id INTEGER, staff_address_id INTEGER REFERENCES Addresses(address_id), nickname VARCHAR(80), first_name VARCHAR(80), middle_name VARCHAR(80), last_name VARCHAR(80), date_of_birth DATETIME, date_joined_staff DATETIME, date_left_staff DATETIME ); Sample rows from `Staff`: (1, 14, thompson.constantin, Janessa, Amara, Sawayn, 2010-12-08 16:55:14, 2017-04-27 03:21:26, 2018-03-23 22:53:12), (2, 3, santos45, Camylle, Icie, Weissnat, 2015-08-01 13:22:43, 2016-06-06 08:54:28, 2018-03-10 15:25:00), (3, 5, ynader, Kaitlin, Stephania, Mertz, 1994-05-17 05:32:11, 2018-01-02 12:24:24, 2018-03-24 10:11:08), CREATE TABLE `Vehicles` ( vehicle_id INTEGER, vehicle_details VARCHAR(255) ); Sample rows from `Vehicles`: (1, Van), (2, Truck), (3, Car), CREATE TABLE `Customers` ( customer_id INTEGER, customer_address_id INTEGER REFERENCES Addresses(address_id), customer_status_code VARCHAR(15), date_became_customer DATETIME, date_of_birth DATETIME, first_name VARCHAR(80), last_name VARCHAR(80), amount_outstanding DOUBLE, email_address VARCHAR(250), phone_number VARCHAR(255), cell_mobile_phone_number VARCHAR(255) ); Sample rows from `Customers`: (1, 13, Bad Customer, 2016-05-11 17:03:48, 1998-12-15 13:24:40, Carole, Bernhard, 255.0, everette.goyette@example.org, 07278206718, 861-638-9797), (2, 10, Bad Customer, 2015-11-16 22:52:14, 1995-07-17 12:13:16, Genevieve, Terry, 7256.0, huel.jana@example.org, +14(5)2351480248, 578-518-4785x612), (3, 10, Good Customer, 2016-04-08 00:28:15, 1994-06-21 01:34:56, Clara, Ortiz, 9443.0, hilario.sporer@example.org, 374-483-2758x85087, 1-197-686-2849x8761), CREATE TABLE `Customer_Payments` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), datetime_payment DATETIME PRIMARY KEY, payment_method_code VARCHAR(10), amount_payment DOUBLE ); Sample rows from `Customer_Payments`: (11, 2018-02-05 18:44:46, Direct Debit, 9570.93), (2, 2018-02-24 10:07:05, Direct Debit, 8180.26), (14, 2018-02-27 20:08:53, Direct Debit, 4610.26), CREATE TABLE `Lessons` ( lesson_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), lesson_status_code VARCHAR(15), staff_id INTEGER REFERENCES Staff(staff_id), vehicle_id INTEGER REFERENCES Vehicles(vehicle_id), lesson_date DATETIME, lesson_time VARCHAR(10), price DOUBLE ); Sample rows from `Lessons`: (1, 6, Cancelled, 8, 3, 2018-02-28 10:55:36, 5, 199.0), (2, 8, Cancelled, 14, 3, 2018-03-07 16:12:36, 6, 167.0), (3, 6, Cancelled, 11, 2, 2018-03-03 15:10:16, 3, 352.0), ",
        "output": "SELECT first_name ,  last_name FROM customers WHERE amount_outstanding BETWEEN 1000 AND 3000;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the details of the lots which are not used in any transactions? ###filtered_database_schema: CREATE TABLE `Investors` ( investor_id INTEGER, Investor_details VARCHAR(255) ); Sample rows from `Investors`: (1, z), (2, z), (3, d), CREATE TABLE `Lots` ( lot_id INTEGER, investor_id INTEGER REFERENCES Investors(investor_id), lot_details VARCHAR(255) ); Sample rows from `Lots`: (1, 13, r), (2, 16, z), (3, 10, s), CREATE TABLE `Ref_Transaction_Types` ( transaction_type_code VARCHAR(10) PRIMARY KEY, transaction_type_description VARCHAR(80) ); Sample rows from `Ref_Transaction_Types`: (SALE, Sale), (PUR, Purchase), CREATE TABLE `Transactions` ( transaction_id INTEGER, investor_id INTEGER REFERENCES Investors(investor_id), transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code), date_of_transaction DATETIME, amount_of_transaction DECIMAL(19,4), share_count VARCHAR(40), other_details VARCHAR(255) ); Sample rows from `Transactions`: (1, 6, SALE, 1988-09-16 19:02:51, 302507.6996, 8718572, None), (2, 18, PUR, 1982-06-06 17:19:00, 27.257, 9, None), (3, 2, SALE, 1979-04-27 06:03:59, 48777.969, 8580, None), CREATE TABLE `Sales` ( sales_transaction_id INTEGER REFERENCES Transactions(transaction_id), sales_details VARCHAR(255) ); Sample rows from `Sales`: (1, x), (2, o), (3, a), CREATE TABLE `Purchases` ( purchase_transaction_id INTEGER REFERENCES Transactions(transaction_id), purchase_details VARCHAR(255) ); Sample rows from `Purchases`: (1, c), (2, y), (3, i), CREATE TABLE `Transactions_Lots` ( transaction_id INTEGER REFERENCES Transactions(transaction_id), lot_id INTEGER REFERENCES Lots(lot_id) ); Sample rows from `Transactions_Lots`: (3, 11), (3, 8), (2, 11), ",
        "output": "SELECT lot_details FROM lots EXCEPT SELECT t1.lot_details FROM lots as t1 JOIN transactions_lots as t2 ON t1.lot_id  =  t2.lot_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the name and max speed of the storm that affected the most regions. ###filtered_database_schema: CREATE TABLE `storm` ( Storm_ID INT PRIMARY KEY, Name TEXT, Dates_active TEXT, Max_speed INT, Damage_millions_USD REAL, Number_Deaths INT ); Sample rows from `storm`: (1, One, May19–May25, 995, 13.0, 0), (2, Two, August3–August10, 972, 10.75, 7), (3, Three, August5–August14, 972, 13.0, 52), CREATE TABLE `region` ( Region_id INT PRIMARY KEY, Region_code TEXT, Region_name TEXT ); Sample rows from `region`: (1, AF, Afghanistan), (2, AL, Albania), (3, DZ, Algeria), CREATE TABLE `affected_region` ( Region_id INT PRIMARY KEY REFERENCES region(Region_id), Storm_ID INT PRIMARY KEY REFERENCES storm(Storm_ID), Number_city_affected REAL ); Sample rows from `affected_region`: (1, 1, 10.0), (2, 1, 15.0), (3, 3, 30.0), ",
        "output": "SELECT t1.name ,  t1.max_speed FROM storm as t1 JOIN affected_region as t2 ON t1.storm_id  =  t2.storm_id GROUP BY t1.storm_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" on PVLDB . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT t6.title FROM publication as t6 JOIN journal as t4 ON t6.jid  =  t4.jid JOIN writes as t3 ON t3.pid  =  t6.pid JOIN writes as t5 ON t5.pid  =  t6.pid JOIN author as t1 ON t5.aid  =  t1.aid JOIN author as t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t4.name  =  \"PVLDB\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the number of airlines based in Russia? ###filtered_database_schema: CREATE TABLE `routes` ( rid INTEGER, dst_apid INTEGER REFERENCES airports(apid), dst_ap varchar(4), src_apid bigint REFERENCES airports(apid), src_ap varchar(4), alid bigint REFERENCES airlines(alid), airline varchar(4), codeshare TEXT ); Sample rows from `routes`: (37, 2990, KZ, 2965, AER, 410, 2B, None), (38, 2990, KZ, 2966, ASF, 410, 2B, None), (39, 2962, MRV, 2966, ASF, 410, 2B, None), CREATE TABLE `airports` ( apid INTEGER, name TEXT, city TEXT, country TEXT, x REAL, y REAL, elevation bigint, iata character varchar(3), icao character varchar(4) ); Sample rows from `airports`: (1, Goroka Airport, Goroka, Papua New Guinea, 145.391998291, -6.081689834590001, 5282, GKA, AYGA), (2, Madang Airport, Madang, Papua New Guinea, 145.789001465, -5.20707988739, 20, MAG, AYMD), (3, Mount Hagen Kagamuga Airport, Mount Hagen, Papua New Guinea, 144.29600524902344, -5.826789855957031, 5388, HGU, AYMH), CREATE TABLE `airlines` ( alid INTEGER, name TEXT, iata varchar(2), icao varchar(3), callsign TEXT, country TEXT, active varchar(2) ); Sample rows from `airlines`: (-1, Unknown, -, N/A, None, None, Y), (1, Private flight, -, N/A, , , Y), (2, 135 Airways, , GNL, GENERAL, United States, N), ",
        "output": "SELECT COUNT(*) FROM airlines WHERE country  =  'Russia'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what state has the smallest population ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM state WHERE population  =  ( SELECT MIN(population) FROM state );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the sum and average of all settlement amounts. ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_name VARCHAR(40) ); Sample rows from `Customers`: (194, America Jaskolski), (214, Ellsworth Paucek), (256, Mrs. Hanna Willms), CREATE TABLE `Services` ( Service_ID INTEGER, Service_name VARCHAR(40) ); Sample rows from `Services`: (1, New policy application), (4, Close a policy), (6, Change a policy), CREATE TABLE `Available_Policies` ( Policy_ID INTEGER PRIMARY KEY, policy_type_code CHAR(15), Customer_Phone VARCHAR(255) ); Sample rows from `Available_Policies`: (246, Life Insurance, +16(2)5838999222), (257, Property Insurance, 242.763.9214), (300, Property Insurance, 1-416-503-7735x94204), CREATE TABLE `Customers_Policies` ( Customer_ID INTEGER PRIMARY KEY REFERENCES Customers(Customer_ID), Policy_ID INTEGER PRIMARY KEY REFERENCES Available_Policies(Policy_ID), Date_Opened DATE, Date_Closed DATE ); Sample rows from `Customers_Policies`: (214, 257, 2016-11-19, 2018-03-04), (214, 301, 2016-04-12, 2018-02-07), (256, 583, 2016-07-22, 2018-02-20), CREATE TABLE `First_Notification_of_Loss` ( FNOL_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers_Policies(Customer_ID), Policy_ID INTEGER REFERENCES Customers_Policies(Policy_ID), Service_ID INTEGER REFERENCES Services(Service_ID) ); Sample rows from `First_Notification_of_Loss`: (532, 214, 257, 6), (1611, 996, 993, 9), (1722, 996, 879, 6), CREATE TABLE `Claims` ( Claim_ID INTEGER PRIMARY KEY, FNOL_ID INTEGER REFERENCES First_Notification_of_Loss(FNOL_ID), Effective_Date DATE ); Sample rows from `Claims`: (134, 1722, 1973-08-18), (145, 1611, 2014-10-19), (228, 532, 1975-05-07), CREATE TABLE `Settlements` ( Settlement_ID INTEGER PRIMARY KEY, Claim_ID INTEGER REFERENCES Claims(Claim_ID), Effective_Date DATE, Settlement_Amount REAL ); Sample rows from `Settlements`: (161, 717, 2009-11-20, 6451.65), (176, 641, 1971-06-29, 1588.45), (205, 604, 1978-09-09, 9814.39), ",
        "output": "SELECT SUM(settlement_amount) ,  AVG(settlement_amount) FROM settlements"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the name and assets of each company, sorted in ascending order of company name? ###filtered_database_schema: CREATE TABLE `buildings` ( id INT PRIMARY KEY, name TEXT, City TEXT, Height INT, Stories INT, Status TEXT ); Sample rows from `buildings`: (1, Torre KOI, Monterrey, 220, 67, under construction), (2, Torre Mitikah, Mexico City, 210, 60, under construction), (3, Punto Chapultepec, Mexico City, 210, 59, proposed), CREATE TABLE `Companies` ( id INT PRIMARY KEY, name TEXT, Headquarters TEXT, Industry TEXT, Sales_billion REAL, Profits_billion REAL, Assets_billion REAL, Market_Value_billion TEXT ); Sample rows from `Companies`: (1, JPMorgan Chase, USA, Banking, 115.5, 17.4, 2117.6, 182.2), (2, HSBC, UK, Banking, 103.3, 13.3, 2467.9, 186.5), (3, General Electric, USA, Conglomerate, 156.2, 11.6, 751.2, 216.2), CREATE TABLE `Office_locations` ( building_id INT PRIMARY KEY REFERENCES buildings(id), company_id INT PRIMARY KEY REFERENCES Companies(id), move_in_year INT ); Sample rows from `Office_locations`: (1, 1, 2021), (2, 2, 2022), (3, 4, 2023), ",
        "output": "SELECT name ,  assets_billion FROM companies ORDER BY name ASC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the temperature of \"Shanghai\" city in January? ###filtered_database_schema: CREATE TABLE `city` ( City_ID INT PRIMARY KEY, City TEXT, Hanzi TEXT, Hanyu_Pinyin TEXT, Regional_Population INT, GDP REAL ); Sample rows from `city`: (1, Shanghai, 上海, Shànghǎi, 23019148, 1919.57), (2, Nanjing ( Jiangsu ), 南京, Nánjīng, 8004680, 614.55), (3, Hangzhou ( Zhejiang ), 杭州, Hángzhōu, 8700400, 701.18), CREATE TABLE `match` ( Match_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Score TEXT, Result TEXT, Competition TEXT ); Sample rows from `match`: (1, 18 February 1992, Estadio Cuscatlán , San Salvador , El Salvador, 1-0, 2-0, Friendly match), (2, 19 July 1992, Estadio Rigoberto López , Managua , Nicaragua, 3-0, 5-0, 1994 FIFA World Cup qualification), (3, 23 July 1992, Estadio Cuscatlán , San Salvador , El Salvador, 1-0, 5-1, 1994 FIFA World Cup qualification), CREATE TABLE `temperature` ( City_ID INT PRIMARY KEY REFERENCES city(City_ID), Jan REAL, Feb REAL, Mar REAL, Apr REAL, Jun REAL, Jul REAL, Aug REAL, Sep REAL, Oct REAL, Nov REAL, Dec REAL ); Sample rows from `temperature`: (1, 17.8, 17.8, 18.3, 18.9, 20.0, 20.6, 20.6, 20.6, 20.0, 19.4, 18.3), (2, 26.1, 26.1, 26.1, 26.1, 27.8, 27.8, 28.3, 28.3, 28.3, 27.2, 26.7), (3, 18.9, 18.3, 19.4, 20.0, 22.2, 23.3, 23.9, 23.3, 22.8, 21.7, 20.0), CREATE TABLE `hosting_city` ( Year INT PRIMARY KEY, Match_ID INT REFERENCES match(Match_ID), Host_City TEXT REFERENCES city(City_ID) ); Sample rows from `hosting_city`: (2008, 1, 1), (2009, 2, 2), (2010, 3, 2), ",
        "output": "SELECT t2.jan FROM city as t1 JOIN temperature as t2 ON t1.city_id = t2.city_id WHERE t1.city = \"Shanghai\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many distinct teams are involved in match seasons? ###filtered_database_schema: CREATE TABLE `country` ( Country_id INT PRIMARY KEY, Country_name TEXT, Capital TEXT, Official_native_language TEXT ); Sample rows from `country`: (1, Indonesia, Jakarta, Bahasa Indonesia), (2, Iran, Tehran, Persian ( Arabic script )), (3, Iraq, Baghdad, Arabic ( Arabic script ) Kurdish), CREATE TABLE `team` ( Team_id INT PRIMARY KEY, Name TEXT ); Sample rows from `team`: (1, Columbus Crew), (2, Evalyn Feil), (3, Anais VonRueden), CREATE TABLE `match_season` ( Season REAL PRIMARY KEY, Player TEXT, Position TEXT, Country INT REFERENCES country(Country_id), Team INT REFERENCES team(Team_id), Draft_Pick_Number INT, Draft_Class TEXT, College TEXT ); Sample rows from `match_season`: (1996.0, Steve Ralston Category:Articles with hCards, Midfielder, 6, 1, 18, 1996 MLS College Draft, Florida International), (1997.0, Mike Duhaney Category:Articles with hCards, Defender, 6, 2, 87, 1996 MLS Inaugural Player Draft, UNLV), (1998.0, Ben Olsen Category:Articles with hCards, Midfielder, 4, 3, 2, Project-40, Virginia), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Years_Played TEXT, Total_WL TEXT, Singles_WL TEXT, Doubles_WL TEXT, Team INT REFERENCES team(Team_id) ); Sample rows from `player`: (1, Cho Soong-Jae (630), 1 (2011), 2–0, 1–0, 1–0, 1), (2, Chung Hong (717), 1 (2011), 0–0, 0–0, 0–0, 1), (3, Im Kyu-tae (492), 8 (2003–2005, 2007–2011), 6–9, 5–7, 1–2, 1), ",
        "output": "SELECT COUNT(DISTINCT team) FROM match_season"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the list of program origins ordered alphabetically? ###filtered_database_schema: CREATE TABLE `program` ( Program_ID INT PRIMARY KEY, Name TEXT, Origin TEXT, Launch REAL, Owner TEXT ); Sample rows from `program`: (1, Aniworld, Hunan, 2005.0, Hunan Broadcasting System (HBS)), (2, Kaku, Beijing, 2004.0, Beijing Television (BTV)), (3, Toonmax, Shanghai, 2005.0, Shanghai Media Group (SMG)), CREATE TABLE `channel` ( Channel_ID INT PRIMARY KEY, Name TEXT, Owner TEXT, Share_in_percent REAL, Rating_in_percent REAL ); Sample rows from `channel`: (1, CCTV-1, CCTV, 4.9, 0.54), (2, Hunan Satellite TV, HBS, 4.81, 0.53), (3, CCTV-8, CCTV, 3.76, 0.41), CREATE TABLE `broadcast` ( Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID), Program_ID INT PRIMARY KEY REFERENCES program(Program_ID), Time_of_day TEXT ); Sample rows from `broadcast`: (1, 1, Morning), (2, 1, Night), (3, 2, Morning), CREATE TABLE `broadcast_share` ( Channel_ID INT PRIMARY KEY REFERENCES channel(Channel_ID), Program_ID INT PRIMARY KEY REFERENCES program(Program_ID), Date TEXT, Share_in_percent REAL ); Sample rows from `broadcast_share`: (1, 1, 01,May, 3.1), (2, 1, 02,May, 1.8), (3, 2, 03,May, 2.8), ",
        "output": "SELECT origin FROM program ORDER BY origin"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the code of each role and the number of employees in each role? ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CV, CV, ), (BK, Book, ), (PR, Paper, ), CREATE TABLE `Ref_Calendar` ( Calendar_Date DATETIME PRIMARY KEY, Day_Number INTEGER ); Sample rows from `Ref_Calendar`: (1972-03-31 09:47:22, 5), (1976-06-15 03:40:06, 7), (1985-05-13 12:19:43, 7), CREATE TABLE `Ref_Locations` ( Location_Code CHAR(15) PRIMARY KEY, Location_Name VARCHAR(255), Location_Description VARCHAR(255) ); Sample rows from `Ref_Locations`: (b, Brazil, ), (c, Canada, ), (e, Edinburgh, ), CREATE TABLE `Roles` ( Role_Code CHAR(15) PRIMARY KEY, Role_Name VARCHAR(255), Role_Description VARCHAR(255) ); Sample rows from `Roles`: (MG, Manager, Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti.), (ED, Editor, Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos.), (PT, Photo, Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt.), CREATE TABLE `All_Documents` ( Document_ID INTEGER, Date_Stored DATETIME REFERENCES Ref_Calendar(Calendar_Date), Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255) ); Sample rows from `All_Documents`: (7, 1976-06-15 03:40:06, CV, Robin CV, None, None), (11, 1986-10-14 17:53:39, CV, Marry CV, None, None), (25, 2008-06-08 12:45:38, BK, One hundred years of solitude, None, None), CREATE TABLE `Employees` ( Employee_ID INTEGER, Role_Code CHAR(15) REFERENCES Roles(Role_Code), Employee_Name VARCHAR(255), Gender_MFU CHAR(1), Date_of_Birth DATETIME, Other_Details VARCHAR(255) ); Sample rows from `Employees`: (25, HR, Leo, , 1973-02-15 17:16:00, None), (30, MG, Ebba, , 1979-09-20 12:50:15, None), (38, ED, Stephanie, 1, 2012-03-30 23:02:28, None), CREATE TABLE `Document_Locations` ( Document_ID INTEGER PRIMARY KEY REFERENCES All_Documents(Document_ID), Location_Code CHAR(15) PRIMARY KEY REFERENCES Ref_Locations(Location_Code), Date_in_Location_From DATETIME PRIMARY KEY REFERENCES Ref_Calendar(Calendar_Date), Date_in_Locaton_To DATETIME REFERENCES Ref_Calendar(Calendar_Date) ); Sample rows from `Document_Locations`: (7, e, 2017-01-06 23:17:22, 2008-06-08 12:45:38), (11, x, 2017-01-06 23:17:22, 2012-07-03 09:48:46), (81, c, 1972-03-31 09:47:22, 1987-11-05 06:11:22), CREATE TABLE `Documents_to_be_Destroyed` ( Document_ID INTEGER REFERENCES All_Documents(Document_ID), Destruction_Authorised_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Destroyed_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Planned_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Actual_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Other_Details VARCHAR(255) ); Sample rows from `Documents_to_be_Destroyed`: (7, 156, 138, 1988-02-01 14:41:52, 2017-01-06 23:17:22, None), (11, 55, 173, 2010-11-26 19:22:50, 1986-10-14 17:53:39, None), (25, 183, 156, 2009-08-18 03:29:08, 1995-01-01 03:52:11, None), ",
        "output": "SELECT role_code ,  COUNT(*) FROM employees GROUP BY role_code"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List all characteristics of product named \"sesame\" with type code \"Grade\". ###filtered_database_schema: CREATE TABLE `Ref_Characteristic_Types` ( characteristic_type_code VARCHAR(15) PRIMARY KEY, characteristic_type_description VARCHAR(80) ); Sample rows from `Ref_Characteristic_Types`: (Grade, Grade), (Purity, Purity), CREATE TABLE `Ref_Colors` ( color_code VARCHAR(15) PRIMARY KEY, color_description VARCHAR(80) ); Sample rows from `Ref_Colors`: (9, red), (5, green), (1, yellow), CREATE TABLE `Ref_Product_Categories` ( product_category_code VARCHAR(15) PRIMARY KEY, product_category_description VARCHAR(80), unit_of_measure VARCHAR(20) ); Sample rows from `Ref_Product_Categories`: (Herbs, Herbs, Handful ), (Seeds, Seeds, Weight - pound,kilo.), (Spices, Spices, Weight - pound,kilo.), CREATE TABLE `Characteristics` ( characteristic_id INTEGER, characteristic_type_code VARCHAR(15) REFERENCES Ref_Characteristic_Types(characteristic_type_code), characteristic_data_type VARCHAR(10), characteristic_name VARCHAR(80), other_characteristic_details VARCHAR(255) ); Sample rows from `Characteristics`: (1, Grade, numquam, slow, None), (2, Grade, doloribus, fast, None), (3, Purity, rem, warm, None), CREATE TABLE `Products` ( product_id INTEGER, color_code VARCHAR(15) REFERENCES Ref_Colors(color_code), product_category_code VARCHAR(15) REFERENCES Ref_Product_Categories(product_category_code), product_name VARCHAR(80), typical_buying_price VARCHAR(20), typical_selling_price VARCHAR(20), product_description VARCHAR(255), other_product_details VARCHAR(255) ); Sample rows from `Products`: (1, 4, Spices, cumin, , 2878.3, et, None), (2, 2, Spices, peper, 352447.2874677, 1892070.2803543, rerum, None), (3, 9, Herbs, basil, 503.8431967, 0.1859512, officia, None), CREATE TABLE `Product_Characteristics` ( product_id INTEGER REFERENCES Products(product_id), characteristic_id INTEGER REFERENCES Characteristics(characteristic_id), product_characteristic_value VARCHAR(50) ); Sample rows from `Product_Characteristics`: (13, 13, low), (11, 2, low), (5, 15, low), ",
        "output": "SELECT t3.characteristic_name FROM products as t1 JOIN product_characteristics as t2 ON t1.product_id  =  t2.product_id JOIN characteristics as t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of body builders? ###filtered_database_schema: CREATE TABLE `body_builder` ( Body_Builder_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Snatch REAL, Clean_Jerk REAL, Total REAL ); Sample rows from `body_builder`: (1, 1, 142.5, 175.0, 317.5), (2, 2, 137.5, 177.5, 315.0), (3, 3, 140.0, 175.0, 315.0), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Height REAL, Weight REAL, Birth_Date TEXT, Birth_Place TEXT ); Sample rows from `people`: (1, Jack Campbell, 182.0, 80.0, January 1, 1992, Port Huron, Michigan), (2, Ty Conklin, 192.0, 90.0, March 30, 1976, Anchorage, Alaska), (3, Al Montoya, 195.0, 100.0, February 13, 1985, Glenview, Illinois), ",
        "output": "SELECT t2.name FROM body_builder as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000? ###filtered_database_schema: CREATE TABLE `swimmer` ( ID INT PRIMARY KEY, name TEXT, Nationality TEXT, meter_100 REAL, meter_200 TEXT, meter_300 TEXT, meter_400 TEXT, meter_500 TEXT, meter_600 TEXT, meter_700 TEXT, Time TEXT ); Sample rows from `swimmer`: (7, Przemysław Stańczyk, Poland, 57.31, 1:57.10, 2:56.02, 3:55.36, 4:54.21, 5:52.59, 6:50.91, 7:47.91), (4, Craig Stevens, Australia, 57.35, 1:56.34, 2:55.90, 3:55.72, 4:55.08, 5:54.45, 6:52.69, 7:48.67), (5, Federico Colbertaldo, Italy, 57.66, 1:56.77, 2:56.04, 3:55.37, 4:54.48, 5:53.53, 6:52.58, 7:49.98), CREATE TABLE `stadium` ( ID INT PRIMARY KEY, name TEXT, Capacity INT, City TEXT, Country TEXT, Opening_year INT ); Sample rows from `stadium`: (1, Nou Mestalla, 75000, Valencia, Spain, 2004), (2, Gazprom Arena, 69501, Saint Petersburg, Russia, 2005), (3, Baku Olympic Stadium, 68000, Baku, Azerbaijan, 2005), CREATE TABLE `event` ( ID INT PRIMARY KEY, Name TEXT, Stadium_ID INT REFERENCES stadium(ID), Year TEXT ); Sample rows from `event`: (1, FINA, 1, 2016), (2, Pacific, 10, 2011), (3, World Master, 2, 2012), CREATE TABLE `record` ( ID INT, Result TEXT, Swimmer_ID INT PRIMARY KEY REFERENCES swimmer(ID), Event_ID INT PRIMARY KEY REFERENCES event(ID) ); Sample rows from `record`: (1, NC, 1, 1), (2, Win, 1, 2), (3, Loss, 3, 3), ",
        "output": "SELECT country FROM stadium WHERE capacity  >  60000 INTERSECT SELECT country FROM stadium WHERE capacity  <  50000"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show all artist name, age, and country ordered by the yeared they joined. ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Year_Join INT, Age INT ); Sample rows from `artist`: (1, Vijay Singh, Fiji, 1998, 45), (2, John Daly, United States, 1991, 46), (3, Paul Azinger, United States, 1993, 47), CREATE TABLE `exhibition` ( Exhibition_ID INT PRIMARY KEY, Year INT, Theme TEXT, Artist_ID INT REFERENCES artist(Artist_ID), Ticket_Price REAL ); Sample rows from `exhibition`: (1, 2004, Santa Claus, 1, 19.95), (2, 2005, Christmas stocking, 2, 19.95), (3, 2006, Santa Claus and Rudolph the Red-Nosed Reindeer, 4, 14.95), CREATE TABLE `exhibition_record` ( Exhibition_ID INT PRIMARY KEY REFERENCES exhibition(Exhibition_ID), Date TEXT PRIMARY KEY, Attendance INT ); Sample rows from `exhibition_record`: (1, December 2, 965), (1, December 5, 1098), (1, December 7, 2983), ",
        "output": "SELECT name ,  age ,  country FROM artist ORDER BY year_join"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the major cities in kansas ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the different fates of the mission that involved ships from the United States? ###filtered_database_schema: CREATE TABLE `mission` ( Mission_ID INT PRIMARY KEY, Ship_ID INT REFERENCES ship(Ship_ID), Code TEXT, Launched_Year INT, Location TEXT, Speed_knots INT, Fate TEXT ); Sample rows from `mission`: (1, 1, VMV-1, 1930, Germany, 25, Decommissioned 1950), (2, 2, VMV-2, 1930, Germany, 25, Decommissioned 1950), (3, 3, VMV-3, 1930, Helsinki , Finland, 23, Lost (burned) 1931), CREATE TABLE `ship` ( Ship_ID INT PRIMARY KEY, Name TEXT, Type TEXT, Nationality TEXT, Tonnage INT ); Sample rows from `ship`: (1, Corbridge, Cargo ship, United Kingdom, 3687), (2, Farringford, Battle ship, United States, 3146), (3, Dromonby, Cargo ship, United Kingdom, 3627), ",
        "output": "SELECT DISTINCT t1.fate FROM mission as t1 JOIN ship as t2 ON t1.ship_id  =  t2.ship_id WHERE t2.nationality  =  \"United States\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find all the female actors in the movie \" Saving Private Ryan \" ###filtered_database_schema: CREATE TABLE `actor` ( aid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `copyright` ( id INT PRIMARY KEY, msid INT, cid INT ); CREATE TABLE `cast` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), aid INT REFERENCES actor(aid), role INT ); CREATE TABLE `genre` ( gid INT PRIMARY KEY, genre TEXT ); CREATE TABLE `classification` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), gid INT REFERENCES genre(gid) ); CREATE TABLE `company` ( id INT PRIMARY KEY, name TEXT, country_code TEXT ); CREATE TABLE `director` ( did INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `producer` ( pid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `directed_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), did INT REFERENCES director(did) ); CREATE TABLE `keyword` ( id INT PRIMARY KEY, keyword TEXT ); CREATE TABLE `made_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), pid INT REFERENCES producer(pid) ); CREATE TABLE `movie` ( mid INT PRIMARY KEY, title TEXT, release_year INT, title_aka TEXT, budget TEXT ); CREATE TABLE `tags` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), kid INT REFERENCES keyword(kid) ); CREATE TABLE `tv_series` ( sid INT PRIMARY KEY, title TEXT, release_year INT, num_of_seasons INT, num_of_episodes INT, title_aka TEXT, budget TEXT ); CREATE TABLE `writer` ( wid INT PRIMARY KEY, gender TEXT, name INT, nationality INT, num_of_episodes INT, birth_city TEXT, birth_year INT ); CREATE TABLE `written_by` ( id INT, msid INT REFERENCES copyright(msid), wid INT REFERENCES writer(wid) ); ",
        "output": "SELECT t1.name FROM cast as t2 JOIN actor as t1 ON t2.aid  =  t1.aid JOIN movie as t3 ON t3.mid  =  t2.msid WHERE t1.gender  =  \"female\" AND t3.title  =  \"Saving Private Ryan\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the names of journalists and the number of events they reported. ###filtered_database_schema: CREATE TABLE `event` ( Event_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Name TEXT, Event_Attendance INT ); Sample rows from `event`: (1, 13 October 2008, Marathon, Olympia Games Openning, 6650), (2, 11 October 2007, Victoria, Government Hearing, 369), (3, 7 October 2010, Motagua, Public Debating, 1675), CREATE TABLE `journalist` ( journalist_ID INT PRIMARY KEY, Name TEXT, Nationality TEXT, Age TEXT, Years_working INT ); Sample rows from `journalist`: (1, Herbert Swindells, England, 37, 10), (2, Fred Keenor, Wales, 27, 5), (3, George Gilchrist, England, 28, 6), CREATE TABLE `news_report` ( journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID), Event_ID INT PRIMARY KEY REFERENCES event(Event_ID), Work_Type TEXT ); Sample rows from `news_report`: (1, 3, Screening), (11, 5, Screening), (6, 1, Screening), ",
        "output": "SELECT t3.name ,  COUNT(*) FROM news_report as t1 JOIN event as t2 ON t1.event_id  =  t2.event_id JOIN journalist as t3 ON t1.journalist_id  =  t3.journalist_id GROUP BY t3.name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the distinct majors of students who have treasurer votes. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Voting_record` ( StuID INTEGER REFERENCES Student(StuID), Registration_Date VARCHAR(12), Election_Cycle VARCHAR(12), President_Vote INTEGER REFERENCES Student(StuID), Vice_President_Vote INTEGER REFERENCES Student(StuID), Secretary_Vote INTEGER REFERENCES Student(StuID), Treasurer_Vote INTEGER REFERENCES Student(StuID), Class_President_Vote INTEGER REFERENCES Student(StuID), Class_Senator_Vote INTEGER REFERENCES Student(StuID) ); Sample rows from `Voting_record`: (1001, 08/30/2015, Spring, 1004, 1007, 1010, 1035, 1001, 1028), (1002, 08/30/2014, Spring, 1014, 1007, 1020, 1025, 1021, 1028), (1003, 08/30/2013, Spring, 1004, 1017, 1030, 1035, 1031, 1028), ",
        "output": "SELECT DISTINCT t1.major FROM student as t1 JOIN voting_record as t2 ON t1.stuid  =  t2.treasurer_vote"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the themes of parties ordered by the number of hosts in ascending manner? ###filtered_database_schema: CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Party_Theme TEXT, Location TEXT, First_year TEXT, Last_year TEXT, Number_of_hosts INT ); Sample rows from `party`: (1, Spring, Hemkade 48 Zaandam, 2000, 2001, 5), (2, Club Q-BASE, Hemkade 48 Zaandam, 2002, 2002, 23), (3, Hardcore Resurrection, Various locations, 2000, 2003, 4), CREATE TABLE `host` ( Host_ID INT PRIMARY KEY, Name TEXT, Nationality TEXT, Age TEXT ); Sample rows from `host`: (1, Austin Daye, United States, 43), (2, Lloyd Daniels, United States, 37), (3, Kornel David, Hungary, 31), CREATE TABLE `party_host` ( Party_ID INT PRIMARY KEY REFERENCES party(Party_ID), Host_ID INT PRIMARY KEY REFERENCES host(Host_ID), Is_Main_in_Charge bool ); Sample rows from `party_host`: (1, 1, T), (8, 7, T), (6, 10, F), ",
        "output": "SELECT party_theme FROM party ORDER BY number_of_hosts ASC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of all the calendar items. ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CV, CV, ), (BK, Book, ), (PR, Paper, ), CREATE TABLE `Ref_Calendar` ( Calendar_Date DATETIME PRIMARY KEY, Day_Number INTEGER ); Sample rows from `Ref_Calendar`: (1972-03-31 09:47:22, 5), (1976-06-15 03:40:06, 7), (1985-05-13 12:19:43, 7), CREATE TABLE `Ref_Locations` ( Location_Code CHAR(15) PRIMARY KEY, Location_Name VARCHAR(255), Location_Description VARCHAR(255) ); Sample rows from `Ref_Locations`: (b, Brazil, ), (c, Canada, ), (e, Edinburgh, ), CREATE TABLE `Roles` ( Role_Code CHAR(15) PRIMARY KEY, Role_Name VARCHAR(255), Role_Description VARCHAR(255) ); Sample rows from `Roles`: (MG, Manager, Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti.), (ED, Editor, Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos.), (PT, Photo, Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt.), CREATE TABLE `All_Documents` ( Document_ID INTEGER, Date_Stored DATETIME REFERENCES Ref_Calendar(Calendar_Date), Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255) ); Sample rows from `All_Documents`: (7, 1976-06-15 03:40:06, CV, Robin CV, None, None), (11, 1986-10-14 17:53:39, CV, Marry CV, None, None), (25, 2008-06-08 12:45:38, BK, One hundred years of solitude, None, None), CREATE TABLE `Employees` ( Employee_ID INTEGER, Role_Code CHAR(15) REFERENCES Roles(Role_Code), Employee_Name VARCHAR(255), Gender_MFU CHAR(1), Date_of_Birth DATETIME, Other_Details VARCHAR(255) ); Sample rows from `Employees`: (25, HR, Leo, , 1973-02-15 17:16:00, None), (30, MG, Ebba, , 1979-09-20 12:50:15, None), (38, ED, Stephanie, 1, 2012-03-30 23:02:28, None), CREATE TABLE `Document_Locations` ( Document_ID INTEGER PRIMARY KEY REFERENCES All_Documents(Document_ID), Location_Code CHAR(15) PRIMARY KEY REFERENCES Ref_Locations(Location_Code), Date_in_Location_From DATETIME PRIMARY KEY REFERENCES Ref_Calendar(Calendar_Date), Date_in_Locaton_To DATETIME REFERENCES Ref_Calendar(Calendar_Date) ); Sample rows from `Document_Locations`: (7, e, 2017-01-06 23:17:22, 2008-06-08 12:45:38), (11, x, 2017-01-06 23:17:22, 2012-07-03 09:48:46), (81, c, 1972-03-31 09:47:22, 1987-11-05 06:11:22), CREATE TABLE `Documents_to_be_Destroyed` ( Document_ID INTEGER REFERENCES All_Documents(Document_ID), Destruction_Authorised_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Destroyed_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Planned_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Actual_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Other_Details VARCHAR(255) ); Sample rows from `Documents_to_be_Destroyed`: (7, 156, 138, 1988-02-01 14:41:52, 2017-01-06 23:17:22, None), (11, 55, 173, 2010-11-26 19:22:50, 1986-10-14 17:53:39, None), (25, 183, 156, 2009-08-18 03:29:08, 1995-01-01 03:52:11, None), ",
        "output": "SELECT COUNT(*) FROM ref_calendar"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: show the titles, and authors or editors for all books made after the year 1989. ###filtered_database_schema: CREATE TABLE `book_club` ( book_club_id INT PRIMARY KEY, Year INT, Author_or_Editor TEXT, Book_Title TEXT, Publisher TEXT, Category TEXT, Result TEXT ); Sample rows from `book_club`: (1, 1989, Michael Nava, Goldenboy, Alyson, Gay M/SF, Won [A ]), (2, 1989, Donald Ward, Death Takes the Stage, St. Martin's Press, Gay M/SF, Nom), (3, 1989, Michael Bishop, Unicorn Mountain, William Morrow, Gay M/SF, Nom), CREATE TABLE `movie` ( movie_id INT PRIMARY KEY, Title TEXT, Year INT, Director TEXT, Budget_million REAL, Gross_worldwide INT ); Sample rows from `movie`: (1, The Boondock Saints, 1999, Troy Duffy, 6.0, 30471), (2, The Big Kahuna, 1999, John Swanbeck, 7.0, 3728888), (3, Storm Catcher, 1999, Anthony Hickox, 5.0, 40500), CREATE TABLE `culture_company` ( Company_name TEXT PRIMARY KEY, Type TEXT, Incorporated_in TEXT, Group_Equity_Shareholding REAL, book_club_id TEXT REFERENCES book_club(book_club_id), movie_id TEXT REFERENCES movie(movie_id) ); Sample rows from `culture_company`: (Culture China, Corporate, China, 18.77, 1, 2), (Culture China Cargo, Joint Venture, China, 49.0, 2, 3), (Culture Hong Kong, Joint Venture, Hong Kong, 60.0, 3, 4), ",
        "output": "SELECT book_title ,  author_or_editor FROM book_club WHERE year  >  1989"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the most common maximum page size? ###filtered_database_schema: CREATE TABLE `product` ( product_id INT PRIMARY KEY, product TEXT, dimensions TEXT, dpi REAL, pages_per_minute_color REAL, max_page_size TEXT, interface TEXT ); Sample rows from `product`: (1, Fujitsu fi-6130 A4 Series Scanner, 301 x 160 x 158, 600.0, 30.0, A4, USB 2.0), (2, Plustek MobileOffice D28 Corporate, 303 x 94 x 60, 600.0, 28.0, A4, USB 2.0), (3, Xerox Travel Scanner 100, 289 x 51 x 38, 600.0, 4.0, A4, USB 2.0), CREATE TABLE `store` ( Store_ID INT PRIMARY KEY, Store_Name TEXT, Type TEXT, Area_size REAL, Number_of_product_category REAL, Ranking INT ); Sample rows from `store`: (1, Miramichi, City Mall, 179.84, 17811.0, 2), (2, Neguac, Village Store, 26.69, 1678.0, 3), (3, Rogersville, Village Store, 7.23, 1170.0, 1), CREATE TABLE `district` ( District_ID INT PRIMARY KEY, District_name TEXT, Headquartered_City TEXT, City_Population REAL, City_Area REAL ); Sample rows from `district`: (1, Attock District, Attock City, 94620.0, 20.0), (2, Bahawalnagar District, Bahawalnagar City, 134936.0, 13.0), (3, Bahawalpur District, Bahawalpur City, 530438.0, 38.0), CREATE TABLE `store_product` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), Product_ID INT PRIMARY KEY REFERENCES product(Product_ID) ); Sample rows from `store_product`: (1, 1), (1, 2), (1, 3), CREATE TABLE `store_district` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), District_ID INT REFERENCES district(District_ID) ); Sample rows from `store_district`: (1, 15), (2, 15), (3, 11), ",
        "output": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the highest point in the states bordering colorado ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the document type name for the document with name \"How to read a book\"? ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CV, CV, ), (BK, Book, ), (PR, Paper, ), CREATE TABLE `Ref_Calendar` ( Calendar_Date DATETIME PRIMARY KEY, Day_Number INTEGER ); Sample rows from `Ref_Calendar`: (1972-03-31 09:47:22, 5), (1976-06-15 03:40:06, 7), (1985-05-13 12:19:43, 7), CREATE TABLE `Ref_Locations` ( Location_Code CHAR(15) PRIMARY KEY, Location_Name VARCHAR(255), Location_Description VARCHAR(255) ); Sample rows from `Ref_Locations`: (b, Brazil, ), (c, Canada, ), (e, Edinburgh, ), CREATE TABLE `Roles` ( Role_Code CHAR(15) PRIMARY KEY, Role_Name VARCHAR(255), Role_Description VARCHAR(255) ); Sample rows from `Roles`: (MG, Manager, Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti.), (ED, Editor, Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos.), (PT, Photo, Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt.), CREATE TABLE `All_Documents` ( Document_ID INTEGER, Date_Stored DATETIME REFERENCES Ref_Calendar(Calendar_Date), Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255) ); Sample rows from `All_Documents`: (7, 1976-06-15 03:40:06, CV, Robin CV, None, None), (11, 1986-10-14 17:53:39, CV, Marry CV, None, None), (25, 2008-06-08 12:45:38, BK, One hundred years of solitude, None, None), CREATE TABLE `Employees` ( Employee_ID INTEGER, Role_Code CHAR(15) REFERENCES Roles(Role_Code), Employee_Name VARCHAR(255), Gender_MFU CHAR(1), Date_of_Birth DATETIME, Other_Details VARCHAR(255) ); Sample rows from `Employees`: (25, HR, Leo, , 1973-02-15 17:16:00, None), (30, MG, Ebba, , 1979-09-20 12:50:15, None), (38, ED, Stephanie, 1, 2012-03-30 23:02:28, None), CREATE TABLE `Document_Locations` ( Document_ID INTEGER PRIMARY KEY REFERENCES All_Documents(Document_ID), Location_Code CHAR(15) PRIMARY KEY REFERENCES Ref_Locations(Location_Code), Date_in_Location_From DATETIME PRIMARY KEY REFERENCES Ref_Calendar(Calendar_Date), Date_in_Locaton_To DATETIME REFERENCES Ref_Calendar(Calendar_Date) ); Sample rows from `Document_Locations`: (7, e, 2017-01-06 23:17:22, 2008-06-08 12:45:38), (11, x, 2017-01-06 23:17:22, 2012-07-03 09:48:46), (81, c, 1972-03-31 09:47:22, 1987-11-05 06:11:22), CREATE TABLE `Documents_to_be_Destroyed` ( Document_ID INTEGER REFERENCES All_Documents(Document_ID), Destruction_Authorised_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Destroyed_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Planned_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Actual_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Other_Details VARCHAR(255) ); Sample rows from `Documents_to_be_Destroyed`: (7, 156, 138, 1988-02-01 14:41:52, 2017-01-06 23:17:22, None), (11, 55, 173, 2010-11-26 19:22:50, 1986-10-14 17:53:39, None), (25, 183, 156, 2009-08-18 03:29:08, 1995-01-01 03:52:11, None), ",
        "output": "SELECT t2.document_type_name FROM all_documents as t1 JOIN ref_document_types as t2 ON t1.document_type_code  =  t2.document_type_code WHERE t1.document_name  =  \"How to read a book\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the name of all different customers who have some loan sorted by their total loan amount. ###filtered_database_schema: CREATE TABLE `bank` ( branch_ID INT PRIMARY KEY, bname varchar(20), no_of_customers INT, city varchar(10), state varchar(20) ); Sample rows from `bank`: (1, morningside, 203, New York City, New York), (2, downtown, 123, Salt Lake City, Utah), (3, broadway, 453, New York City, New York), CREATE TABLE `customer` ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal INT, no_of_loans INT, credit_score INT, branch_ID INT REFERENCES bank(branch_ID), state varchar(20) ); Sample rows from `customer`: (1, Mary, saving, 2000, 2, 30, 2, Utah), (2, Jack, checking, 1000, 1, 20, 1, Texas), (3, Owen, saving, 800000, 0, 210, 3, New York), CREATE TABLE `loan` ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3) REFERENCES customer(Cust_ID), branch_ID varchar(3) REFERENCES bank(branch_ID), amount INT ); Sample rows from `loan`: (1, Mortgages, 1, 1, 2050), (2, Auto, 1, 2, 3000), (3, Business, 3, 3, 5000), ",
        "output": "SELECT t1.cust_name FROM customer as t1 JOIN loan as t2 ON t1.cust_id  =  t2.cust_id GROUP BY t1.cust_name ORDER BY SUM(t2.amount)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the card type codes and the number of transactions. ###filtered_database_schema: CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 6, 338, Regular), (2, 14, 562, VIP), (3, 9, 162, VIP), CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(20), customer_last_name VARCHAR(20), customer_address VARCHAR(255), customer_phone VARCHAR(255), customer_email VARCHAR(255), other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Aniyah, Feest, 55975 Theodore Estates Lake Brody, VT 57078, (673)872-5338, fahey.dorian@example.com, None), (2, Susie, Wiza, 6478 Moen Isle Suite 910 Schimmelmouth, VT 96364-4898, 679-845-8645x94312, idickinson@example.com, None), (3, Marcel, Brekke, 1965 Abernathy Plains Port Lilla, LA 44867, 1-511-656-6664, nichole.rodriguez@example.com, None), CREATE TABLE `Customers_Cards` ( card_id INTEGER, customer_id INTEGER, card_type_code VARCHAR(15), card_number VARCHAR(80), date_valid_from DATETIME, date_valid_to DATETIME, other_card_details VARCHAR(255) ); Sample rows from `Customers_Cards`: (1, 14, Credit, 4560596484842, 2011-04-17 09:05:28, 2018-03-07 17:06:19, 5567915676420343), (2, 9, Credit, 4859448397570735, 2012-05-22 02:05:41, 2018-02-25 15:43:32, 4539333582760), (3, 6, Debit, 348237249146948, 2014-08-01 14:26:45, 2018-03-24 15:29:00, 4916210554814), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, previous_transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), card_id INTEGER REFERENCES Customers_Cards(card_id), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DOUBLE, transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 925, 15, 1, Payment, 2018-03-24 06:41:41, 1701.23, None, None), (2, 494, 3, 2, Refund, 2018-03-24 12:08:55, 1931.76, None, None), (3, 642, 4, 3, Payment, 2018-03-24 09:08:27, 486.56, None, None), ",
        "output": "SELECT t2.card_type_code ,  COUNT(*) FROM financial_transactions as t1 JOIN customers_cards as t2 ON t1.card_id  =  t2.card_id GROUP BY t2.card_type_code"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show all member names and registered branch names sorted by register year. ###filtered_database_schema: CREATE TABLE `member` ( Member_ID INT PRIMARY KEY, Card_Number TEXT, Name TEXT, Hometown TEXT, Level INT ); Sample rows from `member`: (1, LE99, Jeremy Jarmon, Collierville, Tennessee, 6), (2, LT98, Myron Pryor, Louisville, Kentucky, 6), (3, RT91, Corey Peters, Louisville, Kentucky, 6), CREATE TABLE `branch` ( Branch_ID INT PRIMARY KEY, Name TEXT, Open_year TEXT, Address_road TEXT, City TEXT, membership_amount TEXT ); Sample rows from `branch`: (1, Alexandre, 2001, Valleys Place, London, 112), (2, Popert, 2009, Oaks Crescent, London, 11), (3, Stanley, 2013, Abbott Street, London, 6), CREATE TABLE `membership_register_branch` ( Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Branch_ID TEXT REFERENCES branch(Branch_ID), Register_Year TEXT ); Sample rows from `membership_register_branch`: (1, 1, 2016), (2, 4, 2016), (3, 1, 2017), CREATE TABLE `purchase` ( Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Branch_ID TEXT PRIMARY KEY REFERENCES branch(Branch_ID), Year TEXT PRIMARY KEY, Total_pounds REAL ); Sample rows from `purchase`: (1, 3, 2018, 2013.32), (2, 5, 2018, 321.13), (3, 1, 2017, 988.09), ",
        "output": "SELECT t3.name ,  t2.name FROM membership_register_branch as t1 JOIN branch as t2 ON t1.branch_id  =  t2.branch_id JOIN member as t3 ON t1.member_id  =  t3.member_id ORDER BY t1.register_year"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount. ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_Details VARCHAR(255) ); Sample rows from `Customers`: (1, America Jaskolski), (2, Ellsworth Paucek), (3, Mrs. Hanna Willms), CREATE TABLE `Customer_Policies` ( Policy_ID INTEGER, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Policy_Type_Code CHAR(15), Start_Date DATE, End_Date DATE ); Sample rows from `Customer_Policies`: (119, 1, Car, 2018-01-21, 2017-12-15), (141, 2, Life, 2017-08-21, 2017-09-29), (143, 3, Car, 2017-06-16, 2017-12-09), CREATE TABLE `Claims` ( Claim_ID INTEGER, Policy_ID INTEGER REFERENCES Customer_Policies(Policy_ID), Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER ); Sample rows from `Claims`: (143, 744, 2017-03-11, 2017-11-03, 43884, 1085), (423, 552, 2016-08-12, 2018-01-27, 79134, 1724), (442, 473, 2017-02-24, 2018-01-21, 70088, 1189), CREATE TABLE `Settlements` ( Settlement_ID INTEGER, Claim_ID INTEGER REFERENCES Claims(Claim_ID), Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, Customer_Policy_ID INTEGER ); Sample rows from `Settlements`: (357, 486, 2018-08-07, 2018-01-16, 38543, 1181, 515), (412, 621, 2017-08-27, 2018-02-04, 57669, 1427, 617), (476, 801, 2016-09-05, 2018-03-02, 30954, 1805, 943), CREATE TABLE `Payments` ( Payment_ID INTEGER, Settlement_ID INTEGER REFERENCES Settlements(Settlement_ID), Payment_Method_Code VARCHAR(255), Date_Payment_Made DATE, Amount_Payment INTEGER ); Sample rows from `Payments`: (384, 516, MasterCard, 2018-02-16, 241730), (435, 476, MasterCard, 2017-05-28, 448613), (484, 516, MasterCard, 2017-06-24, 456098), ",
        "output": "SELECT amount_settled ,  amount_claimed FROM claims ORDER BY amount_claimed DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of all the tracks that contain the word \"you\". ###filtered_database_schema: CREATE TABLE `Album` ( AlbumId INTEGER, Title varchar(160), ArtistId INTEGER PRIMARY KEY REFERENCES Artist(ArtistId) ); Sample rows from `Album`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `Artist` ( ArtistId INTEGER, Name varchar(120) ); Sample rows from `Artist`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `Customer` ( CustomerId INTEGER, FirstName varchar(40), LastName varchar(20), Company varchar(80), Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60), SupportRepId INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId) ); Sample rows from `Customer`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `Employee` ( EmployeeId INTEGER, LastName varchar(20), FirstName varchar(20), Title varchar(30), ReportsTo INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId), BirthDate datetime, HireDate datetime, Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60) ); Sample rows from `Employee`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `Genre` ( GenreId INTEGER, Name varchar(120) ); Sample rows from `Genre`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `Invoice` ( InvoiceId INTEGER, CustomerId INTEGER PRIMARY KEY REFERENCES Customer(CustomerId), InvoiceDate datetime, BillingAddress varchar(70), BillingCity varchar(40), BillingState varchar(40), BillingCountry varchar(40), BillingPostalCode varchar(10), Total decimal(10,2) ); Sample rows from `Invoice`: (1, 2, 2009-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2009-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2009-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `InvoiceLine` ( InvoiceLineId INTEGER, InvoiceId INTEGER PRIMARY KEY REFERENCES Invoice(InvoiceId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId), UnitPrice decimal(10,2), Quantity INTEGER ); Sample rows from `InvoiceLine`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `MediaType` ( MediaTypeId INTEGER, Name varchar(120) ); Sample rows from `MediaType`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `Playlist` ( PlaylistId INTEGER, Name varchar(120) ); Sample rows from `Playlist`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `PlaylistTrack` ( PlaylistId INTEGER PRIMARY KEY REFERENCES Playlist(PlaylistId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId) ); Sample rows from `PlaylistTrack`: (1, 1), (8, 1), (17, 1), CREATE TABLE `Track` ( TrackId INTEGER, Name varchar(200), AlbumId INTEGER PRIMARY KEY REFERENCES Album(AlbumId), MediaTypeId INTEGER PRIMARY KEY REFERENCES MediaType(MediaTypeId), GenreId INTEGER PRIMARY KEY REFERENCES Genre(GenreId), Composer varchar(220), Milliseconds INTEGER, Bytes INTEGER, UnitPrice decimal(10,2) ); Sample rows from `Track`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), ",
        "output": "SELECT name FROM track WHERE name LIKE '%you%'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the distinct positions of the players from a country whose capital is Dublin? ###filtered_database_schema: CREATE TABLE `country` ( Country_id INT PRIMARY KEY, Country_name TEXT, Capital TEXT, Official_native_language TEXT ); Sample rows from `country`: (1, Indonesia, Jakarta, Bahasa Indonesia), (2, Iran, Tehran, Persian ( Arabic script )), (3, Iraq, Baghdad, Arabic ( Arabic script ) Kurdish), CREATE TABLE `team` ( Team_id INT PRIMARY KEY, Name TEXT ); Sample rows from `team`: (1, Columbus Crew), (2, Evalyn Feil), (3, Anais VonRueden), CREATE TABLE `match_season` ( Season REAL PRIMARY KEY, Player TEXT, Position TEXT, Country INT REFERENCES country(Country_id), Team INT REFERENCES team(Team_id), Draft_Pick_Number INT, Draft_Class TEXT, College TEXT ); Sample rows from `match_season`: (1996.0, Steve Ralston Category:Articles with hCards, Midfielder, 6, 1, 18, 1996 MLS College Draft, Florida International), (1997.0, Mike Duhaney Category:Articles with hCards, Defender, 6, 2, 87, 1996 MLS Inaugural Player Draft, UNLV), (1998.0, Ben Olsen Category:Articles with hCards, Midfielder, 4, 3, 2, Project-40, Virginia), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Years_Played TEXT, Total_WL TEXT, Singles_WL TEXT, Doubles_WL TEXT, Team INT REFERENCES team(Team_id) ); Sample rows from `player`: (1, Cho Soong-Jae (630), 1 (2011), 2–0, 1–0, 1–0, 1), (2, Chung Hong (717), 1 (2011), 0–0, 0–0, 0–0, 1), (3, Im Kyu-tae (492), 8 (2003–2005, 2007–2011), 6–9, 5–7, 1–2, 1), ",
        "output": "SELECT DISTINCT t2.position FROM country as t1 JOIN match_season as t2 ON t1.country_id  =  t2.country WHERE t1.capital  =  \"Dublin\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the booking start and end dates of the apartments with more than 2 bedrooms? ###filtered_database_schema: CREATE TABLE `Apartment_Buildings` ( building_id INTEGER PRIMARY KEY, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80) ); Sample rows from `Apartment_Buildings`: (133, Normandie Court, Normandie Court, Studio, 7950 Casper Vista Apt. 176 Marquiseberg, CA 70496, Emma, (948)040-1064x387), (153, Mercedes House, Mercedes House, Studio, 354 Otto Villages Charliefort, VT 71664, Brenden, 915-617-2408x832), (191, The Eugene, The Eugene, Flat, 71537 Gorczany Inlet Wisozkburgh, AL 08256, Melyssa, (609)946-0491), CREATE TABLE `Apartments` ( apt_id INTEGER PRIMARY KEY, building_id INTEGER REFERENCES Apartment_Buildings(building_id), apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5) ); Sample rows from `Apartments`: (1, 808, Flat, Suite 645, 1, 3, 7), (2, 624, Flat, Apt. 585, 2, 4, 5), (3, 225, Studio, Apt. 908, 1, 6, 7), CREATE TABLE `Apartment_Facilities` ( apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id), facility_code CHAR(15) PRIMARY KEY ); Sample rows from `Apartment_Facilities`: (1, Boardband), (2, Boardband), (3, Gym), CREATE TABLE `Guests` ( guest_id INTEGER PRIMARY KEY, gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME ); Sample rows from `Guests`: (1, Male, Kip, DuBuque, 1995-11-04 07:09:57), (2, Unknown, Rebeca, Runolfsdottir, 1974-05-12 21:53:58), (3, Female, Keon, Treutel, 1974-08-20 09:28:05), CREATE TABLE `Apartment_Bookings` ( apt_booking_id INTEGER PRIMARY KEY, apt_id INTEGER REFERENCES Apartments(apt_id), guest_id INTEGER REFERENCES Guests(guest_id), booking_status_code CHAR(15), booking_start_date DATETIME, booking_end_date DATETIME ); Sample rows from `Apartment_Bookings`: (258, 10, 2, Provisional, 2016-09-26 17:13:49, 2017-10-07 11:38:48), (279, 15, 15, Provisional, 2016-04-01 06:28:08, 2017-10-25 11:08:42), (337, 8, 5, Provisional, 2017-03-13 16:20:14, 2018-02-19 16:59:08), CREATE TABLE `View_Unit_Status` ( apt_id INTEGER REFERENCES Apartments(apt_id), apt_booking_id INTEGER REFERENCES Apartment_Bookings(apt_booking_id), status_date DATETIME PRIMARY KEY, available_yn BIT ); Sample rows from `View_Unit_Status`: (11, 920, 1970-09-28 10:24:29, 1), (15, 575, 1972-03-23 22:55:53, 1), (15, 924, 1973-10-28 04:30:14, 1), ",
        "output": "SELECT t1.booking_start_date ,  t1.booking_start_date FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t2.bedroom_count  >  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the average age across all artists. ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Artist TEXT, Age INT, Famous_Title TEXT, Famous_Release_date TEXT ); Sample rows from `artist`: (1, Gorgoroth, 34, Bergen 1996, November 2007), (2, Ophiolatry, 35, Transmutation, January 21, 2008), (3, Ophiolatry, 22, Antievangelistical Process (re-release), 2009), CREATE TABLE `volume` ( Volume_ID INT PRIMARY KEY, Volume_Issue TEXT, Issue_Date TEXT, Weeks_on_Top REAL, Song TEXT, Artist_ID INT REFERENCES artist(Artist_ID) ); Sample rows from `volume`: (1, 45:14 §, 27 December 1986 - 10 January, 3.0, The Way, 1), (2, 45:15, 17 January, 1.0, Everybody Have Fun Tonight , 2), (3, 45:16, 24 January, 1.0, Walk Like an Egyptian , 1), CREATE TABLE `music_festival` ( ID INT PRIMARY KEY, Music_Festival TEXT, Date_of_ceremony TEXT, Category TEXT, Volume INT REFERENCES volume(Volume_ID), Result TEXT ); Sample rows from `music_festival`: (1, 34th England Academy Prize, 18 February 2011, Best Song, 1, Nominated), (2, 34th Japan Academy Prize, 18 February 2011, Best Lyrics, 2, Nominated), (3, 34th European Academy Prize, 18 February 2011, Best Song, 3, Awarded), ",
        "output": "SELECT AVG(age) FROM artist"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: datasets mentioned at ACL ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t1.datasetid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"ACL\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the most common role for the staff? ###filtered_database_schema: CREATE TABLE `Document_Types` ( document_type_code VARCHAR(10) PRIMARY KEY, document_description VARCHAR(255) ); Sample rows from `Document_Types`: (APP, Initial Application), (REG, Regular), CREATE TABLE `Documents` ( document_id INTEGER, document_type_code VARCHAR(10) REFERENCES Document_Types(document_type_code), grant_id INTEGER REFERENCES Grants(grant_id), sent_date DATETIME, response_received_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Documents`: (1, APP, 5, 1986-11-30 07:56:35, 1977-12-01 02:18:53, ), (2, APP, 13, 2004-01-23 11:57:08, 1979-12-08 10:38:07, ), (3, REG, 10, 1999-03-03 12:25:58, 1995-09-12 13:13:48, ), CREATE TABLE `Grants` ( grant_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), grant_amount DECIMAL(19,4), grant_start_date DATETIME, grant_end_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Grants`: (1, 10, 4094.542, 2016-11-20 00:18:51, 2004-10-24 09:09:39, et), (2, 3, 281.2446, 1985-10-09 20:08:49, 1985-06-08 00:22:07, occaecati), (3, 14, 4515947.7015, 1970-09-19 22:53:49, 1989-03-16 18:27:16, et), CREATE TABLE `Organisation_Types` ( organisation_type VARCHAR(10) PRIMARY KEY, organisation_type_description VARCHAR(255) ); Sample rows from `Organisation_Types`: (RES, Research), (SPON, Sponsor), CREATE TABLE `Organisations` ( organisation_id INTEGER, organisation_type VARCHAR(10) REFERENCES Organisation_Types(organisation_type), organisation_details VARCHAR(255) ); Sample rows from `Organisations`: (1, RES, et), (2, RES, eius), (3, RES, impedit), CREATE TABLE `Project_Outcomes` ( project_id INTEGER REFERENCES Projects(project_id), outcome_code VARCHAR(10) REFERENCES Research_Outcomes(outcome_code), outcome_details VARCHAR(255) ); Sample rows from `Project_Outcomes`: (4, Paper, None), (3, Patent, None), (9, Paper, None), CREATE TABLE `Project_Staff` ( staff_id DOUBLE PRIMARY KEY, project_id INTEGER REFERENCES Projects(project_id), role_code VARCHAR(10) REFERENCES Staff_Roles(role_code), date_from DATETIME, date_to DATETIME, other_details VARCHAR(255) ); Sample rows from `Project_Staff`: (0.0, 2, leader, 1981-10-04 22:44:50, 1985-05-30 22:26:30, None), (674810.0, 5, leader, 2003-04-19 15:06:20, 2010-12-08 11:55:36, None), (779.0, 2, researcher, 1981-10-09 21:32:53, 2004-12-16 13:03:36, None), CREATE TABLE `Projects` ( project_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), project_details VARCHAR(255) ); Sample rows from `Projects`: (1, 15, porro), (2, 11, et), (3, 7, sint), CREATE TABLE `Research_Outcomes` ( outcome_code VARCHAR(10) PRIMARY KEY, outcome_description VARCHAR(255) ); Sample rows from `Research_Outcomes`: (Paper, Published Research Paper), (Patent, Research Patent), CREATE TABLE `Research_Staff` ( staff_id INTEGER, employer_organisation_id INTEGER REFERENCES Organisations(organisation_id), staff_details VARCHAR(255) ); Sample rows from `Research_Staff`: (1, 1, quo), (2, 4, est), (3, 5, aspernatur), CREATE TABLE `Staff_Roles` ( role_code VARCHAR(10) PRIMARY KEY, role_description VARCHAR(255) ); Sample rows from `Staff_Roles`: (leader, Project Leader), (researcher, Project Researcher), CREATE TABLE `Tasks` ( task_id INTEGER, project_id INTEGER REFERENCES Projects(project_id), task_details VARCHAR(255), eg Agree Objectives VARCHAR(1) ); Sample rows from `Tasks`: (1, 1, a, None), (2, 2, b, None), (3, 3, c, None), ",
        "output": "SELECT role_code FROM project_staff GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the first name and major of the students who are able to consume soy? ###filtered_database_schema: CREATE TABLE `Allergy_Type` ( Allergy VARCHAR(20) PRIMARY KEY, AllergyType VARCHAR(20) ); Sample rows from `Allergy_Type`: (Eggs, food), (Nuts, food), (Milk, food), CREATE TABLE `Has_Allergy` ( StuID INTEGER REFERENCES Student(StuID), Allergy VARCHAR(20) REFERENCES Allergy_Type(Allergy) ); Sample rows from `Has_Allergy`: (1001, Cat), (1002, Shellfish), (1002, Tree Pollen), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), ",
        "output": "SELECT fname ,  major FROM student WHERE stuid NOT IN (SELECT stuid FROM has_allergy WHERE allergy  =  \"Soy\")"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the full names and department ids for the lowest paid employees across all departments. ###filtered_database_schema: CREATE TABLE `regions` ( REGION_ID decimal(5,0) PRIMARY KEY, REGION_NAME varchar(25) ); Sample rows from `regions`: (1, Europe\\r), (2, Americas\\r), (3, Asia\\r), CREATE TABLE `countries` ( COUNTRY_ID varchar(2) PRIMARY KEY, COUNTRY_NAME varchar(40), REGION_ID decimal(10,0) REFERENCES regions(REGION_ID) ); Sample rows from `countries`: (AR, Argentina, 2), (AU, Australia, 3), (BE, Belgium, 1), CREATE TABLE `departments` ( DEPARTMENT_ID decimal(4,0) PRIMARY KEY, DEPARTMENT_NAME varchar(30), MANAGER_ID decimal(6,0), LOCATION_ID decimal(4,0) ); Sample rows from `departments`: (10, Administration, 200, 1700), (20, Marketing, 201, 1800), (30, Purchasing, 114, 1700), CREATE TABLE `jobs` ( JOB_ID varchar(10) PRIMARY KEY, JOB_TITLE varchar(35), MIN_SALARY decimal(6,0), MAX_SALARY decimal(6,0) ); Sample rows from `jobs`: (AD_PRES, President, 20000, 40000), (AD_VP, Administration Vice President, 15000, 30000), (AD_ASST, Administration Assistant, 3000, 6000), CREATE TABLE `employees` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY, FIRST_NAME varchar(20), LAST_NAME varchar(25), EMAIL varchar(25), PHONE_NUMBER varchar(20), HIRE_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), SALARY decimal(8,2), COMMISSION_PCT decimal(2,2), MANAGER_ID decimal(6,0), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `employees`: (100, Steven, King, SKING, 515.123.4567, 1987-06-17, AD_PRES, 24000, 0, 0, 90), (101, Neena, Kochhar, NKOCHHAR, 515.123.4568, 1987-06-18, AD_VP, 17000, 0, 100, 90), (102, Lex, De Haan, LDEHAAN, 515.123.4569, 1987-06-19, AD_VP, 17000, 0, 100, 90), CREATE TABLE `job_history` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY REFERENCES employees(EMPLOYEE_ID), START_DATE date PRIMARY KEY, END_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `job_history`: (102, 1993-01-13, 1998-07-24, IT_PROG, 60), (101, 1989-09-21, 1993-10-27, AC_ACCOUNT, 110), (101, 1993-10-28, 1997-03-15, AC_MGR, 110), CREATE TABLE `locations` ( LOCATION_ID decimal(4,0) PRIMARY KEY, STREET_ADDRESS varchar(40), POSTAL_CODE varchar(12), CITY varchar(30), STATE_PROVINCE varchar(25), COUNTRY_ID varchar(2) REFERENCES countries(COUNTRY_ID) ); Sample rows from `locations`: (1000, 1297 Via Cola di Rie, 989, Roma, , IT), (1100, 93091 Calle della Testa, 10934, Venice, , IT), (1200, 2017 Shinjuku-ku, 1689, Tokyo, Tokyo Prefecture, JP), ",
        "output": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the faculty id and the number of students each faculty has? ###filtered_database_schema: CREATE TABLE `Activity` ( actid INTEGER, activity_name varchar(25) ); Sample rows from `Activity`: (770, Mountain Climbing), (771, Canoeing), (772, Kayaking), CREATE TABLE `Participates_in` ( stuid INTEGER REFERENCES Student(StuID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Participates_in`: (1001, 770), (1001, 771), (1001, 777), CREATE TABLE `Faculty_Participates_in` ( FacID INTEGER REFERENCES Faculty(FacID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Faculty_Participates_in`: (1082, 784), (1082, 785), (1082, 790), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), ",
        "output": "SELECT t1.facid ,  COUNT(*) FROM faculty as t1 JOIN student as t2 ON t1.facid  =  t2.advisor GROUP BY t1.facid"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the papers that used WebKB dataset ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are all distinct country for artists? ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Year_Join INT, Age INT ); Sample rows from `artist`: (1, Vijay Singh, Fiji, 1998, 45), (2, John Daly, United States, 1991, 46), (3, Paul Azinger, United States, 1993, 47), CREATE TABLE `exhibition` ( Exhibition_ID INT PRIMARY KEY, Year INT, Theme TEXT, Artist_ID INT REFERENCES artist(Artist_ID), Ticket_Price REAL ); Sample rows from `exhibition`: (1, 2004, Santa Claus, 1, 19.95), (2, 2005, Christmas stocking, 2, 19.95), (3, 2006, Santa Claus and Rudolph the Red-Nosed Reindeer, 4, 14.95), CREATE TABLE `exhibition_record` ( Exhibition_ID INT PRIMARY KEY REFERENCES exhibition(Exhibition_ID), Date TEXT PRIMARY KEY, Attendance INT ); Sample rows from `exhibition_record`: (1, December 2, 965), (1, December 5, 1098), (1, December 7, 2983), ",
        "output": "SELECT DISTINCT country FROM artist"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the average enrollment of universities founded before 1850. ###filtered_database_schema: CREATE TABLE `basketball_match` ( Team_ID INT PRIMARY KEY, School_ID INT REFERENCES university(School_ID), Team_Name TEXT, ACC_Regular_Season TEXT, ACC_Percent TEXT, ACC_Home TEXT, ACC_Road TEXT, All_Games TEXT, All_Games_Percent INT, All_Home TEXT, All_Road TEXT, All_Neutral TEXT ); Sample rows from `basketball_match`: (1, 1, North Carolina, 14–2, .875, 6–2, 8–0, 35–2, 0.946, 14–2, 13–0, 9–1), (2, 2, Duke, 13–3, .813, 7–1, 6–2, 28–6, 0.824, 15–1, 8–2, 5–3), (3, 4, Clemson, 10–6, .625, 7–1, 3–5, 24–10, 0.706, 14–2, 6–5, 4–3), CREATE TABLE `university` ( School_ID INT PRIMARY KEY, School TEXT, Location TEXT, Founded REAL, Affiliation TEXT, Enrollment REAL, Nickname TEXT, Primary_conference TEXT ); Sample rows from `university`: (1, University of Delaware, Newark, DE, 1743.0, Public, 19067.0, Fightin' Blue Hens, Colonial Athletic Association ( D-I )), (2, Lebanon Valley College, Annville, PA, 1866.0, Private/Methodist, 2100.0, Flying Dutchmen, MAC Commonwealth Conference ( D-III )), (3, University of Rhode Island, Kingston, RI, 1892.0, Public, 19095.0, Rams, Atlantic 10 Conference ( D-I )), ",
        "output": "SELECT AVG(enrollment) FROM university WHERE founded  <  1850"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many departments offer courses? ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT COUNT(DISTINCT dept_name) FROM course"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the name and gender of the staff who was assigned in 2016. ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 28481 Crist Circle East Burdettestad, IA 21232), (2, 0292 Mitchel Pike Port Abefurt, IA 84402-4249), (3, 4062 Mante Place West Lindsey, DE 76199-8015), CREATE TABLE `Staff` ( staff_id INTEGER, staff_gender VARCHAR(1), staff_name VARCHAR(80) ); Sample rows from `Staff`: (1, 1, Tom), (2, 1, Malika), (3, 1, Katelynn), CREATE TABLE `Suppliers` ( supplier_id INTEGER, supplier_name VARCHAR(80), supplier_phone VARCHAR(80) ); Sample rows from `Suppliers`: (1, Lidl, (692)009-5928), (2, AB Store, 1-483-283-4742), (3, Tesco, 287-071-1153x254), CREATE TABLE `Department_Store_Chain` ( dept_store_chain_id INTEGER, dept_store_chain_name VARCHAR(80) ); Sample rows from `Department_Store_Chain`: (1, South), (2, West), (3, East), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method_code VARCHAR(10), customer_code VARCHAR(20), customer_name VARCHAR(80), customer_address VARCHAR(255), customer_phone VARCHAR(80), customer_email VARCHAR(80) ); Sample rows from `Customers`: (1, Credit Card, 401, Ahmed, 75099 Tremblay Port Apt. 163 South Norrisland, SC 80546, 254-072-4068x33935, margarett.vonrueden@example.com), (2, Credit Card, 665, Chauncey, 8408 Lindsay Court East Dasiabury, IL 72656-3552, +41(8)1897032009, stiedemann.sigrid@example.com), (3, Direct Debit, 844, Lukas, 7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871, 197-417-3557, joelle.monahan@example.com), CREATE TABLE `Products` ( product_id INTEGER, product_type_code VARCHAR(10), product_name VARCHAR(80), product_price DECIMAL(19,4) ); Sample rows from `Products`: (1, Clothes, red jeans, 734.73), (2, Clothes, yellow jeans, 687.23), (3, Clothes, black jeans, 695.16), CREATE TABLE `Supplier_Addresses` ( supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Supplier_Addresses`: (4, 5, 2016-09-22 16:41:31, 2018-03-14 20:06:37), (3, 9, 2014-11-07 19:18:49, 2018-03-16 16:39:58), (3, 2, 2008-11-22 12:01:25, 2018-03-02 19:50:22), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 9, 2017-12-11 05:00:22, 2018-03-20 20:52:34), (1, 6, 2017-10-07 23:00:26, 2018-02-28 14:53:52), (10, 8, 2017-04-04 20:00:27, 2018-02-27 20:08:33), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status_code VARCHAR(10), order_date DATETIME ); Sample rows from `Customer_Orders`: (1, 12, Completed, 2018-02-10 15:44:48), (2, 4, New, 2018-01-31 17:49:18), (3, 1, PartFilled, 2018-02-26 12:39:33), CREATE TABLE `Department_Stores` ( dept_store_id INTEGER, dept_store_chain_id INTEGER REFERENCES Department_Store_Chain(dept_store_chain_id), store_name VARCHAR(80), store_address VARCHAR(255), store_phone VARCHAR(80), store_email VARCHAR(80) ); Sample rows from `Department_Stores`: (1, 1, store_name, 01290 Jeremie Parkway Suite 753 North Arielle, MS 51249, (948)944-5099x2027, bmaggio@example.com), (2, 3, store_name, 082 Purdy Expressway O'Connellshire, IL 31732, 877-917-5029, larissa10@example.org), (3, 4, store_name, 994 Travis Plains North Wadeton, WV 27575-3951, 1-216-312-0375, alexandro.mcclure@example.net), CREATE TABLE `Departments` ( department_id INTEGER, dept_store_id INTEGER REFERENCES Department_Stores(dept_store_id), department_name VARCHAR(80) ); Sample rows from `Departments`: (1, 5, human resource), (2, 11, purchasing), (3, 4, marketing), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id) ); Sample rows from `Order_Items`: (1, 9, 7), (2, 1, 3), (3, 5, 2), CREATE TABLE `Product_Suppliers` ( product_id INTEGER PRIMARY KEY REFERENCES Products(product_id), supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), date_supplied_from DATETIME, date_supplied_to DATETIME, total_amount_purchased VARCHAR(80), total_value_purchased DECIMAL(19,4) ); Sample rows from `Product_Suppliers`: (4, 3, 2017-06-19 00:49:05, 2018-03-24 19:29:18, 89366.05, 36014.6), (8, 4, 2017-07-02 00:35:12, 2018-03-25 07:30:49, 25085.57, 36274.56), (3, 3, 2017-10-14 19:15:37, 2018-03-24 02:29:44, 15752.45, 7273.74), CREATE TABLE `Staff_Department_Assignments` ( staff_id INTEGER PRIMARY KEY REFERENCES Staff(staff_id), department_id INTEGER PRIMARY KEY REFERENCES Departments(department_id), date_assigned_from DATETIME, job_title_code VARCHAR(10), date_assigned_to DATETIME ); Sample rows from `Staff_Department_Assignments`: (5, 4, 2017-06-11 22:55:20, Department Manager, 2018-03-23 21:59:11), (10, 5, 2017-12-18 19:12:15, Sales Person, 2018-03-23 20:25:24), (1, 5, 2018-02-14 03:15:29, Clerical Staff, 2018-03-24 19:57:56), ",
        "output": "SELECT t1.staff_name ,  t1.staff_gender FROM staff as t1 JOIN staff_department_assignments as t2 ON t1.staff_id  =  t2.staff_id WHERE t2.date_assigned_from LIKE \"2016%\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions. ###filtered_database_schema: CREATE TABLE `Ref_Hotel_Star_Ratings` ( star_rating_code CHAR(15) PRIMARY KEY, star_rating_description VARCHAR(80) ); Sample rows from `Ref_Hotel_Star_Ratings`: (1, star), (2, star), (3, star), CREATE TABLE `Locations` ( Location_ID INTEGER, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Locations`: (333, Astro Orbiter, 660 Shea Crescent, None), (368, African Animals, 254 Ottilie Junction, None), (417, American Adventure, 53815 Sawayn Tunnel Apt. 297, None), CREATE TABLE `Ref_Attraction_Types` ( Attraction_Type_Code CHAR(15) PRIMARY KEY, Attraction_Type_Description VARCHAR(255) ); Sample rows from `Ref_Attraction_Types`: (2, park), (3, garden), (5, gallery), CREATE TABLE `Visitors` ( Tourist_ID INTEGER PRIMARY KEY, Tourist_Details VARCHAR(255) ); Sample rows from `Visitors`: (164, Toney), (189, Graciela), (204, Vincent), CREATE TABLE `Features` ( Feature_ID INTEGER, Feature_Details VARCHAR(255) ); Sample rows from `Features`: (523, cafe), (528, park), (543, garden), CREATE TABLE `Hotels` ( hotel_id INTEGER, star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code), pets_allowed_yn CHAR(1), price_range REAL, other_hotel_details VARCHAR(255) ); Sample rows from `Hotels`: (123, 5, 1, 2914989.571, None), (144, 4, , , None), (172, 5, , 17012.682586009, None), CREATE TABLE `Tourist_Attractions` ( Tourist_Attraction_ID INTEGER, Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code), Location_ID INTEGER REFERENCES Locations(Location_ID), How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Tourist_Attractions`: (2113, 2, 579, bus, art museum, None, None, None), (2701, 6, 417, walk, UK gallery, None, None, None), (5076, 2, 868, shuttle, flying elephant, None, None, None), CREATE TABLE `Street_Markets` ( Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Market_Details VARCHAR(255) ); Sample rows from `Street_Markets`: (6852, Broadway), (7067, Fish Farm Market), CREATE TABLE `Shops` ( Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Shop_Details VARCHAR(255) ); Sample rows from `Shops`: (8429, soup), (8449, coffee), (8698, Flower), CREATE TABLE `Museums` ( Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Museum_Details VARCHAR(255) ); Sample rows from `Museums`: (2113, Yale Center for British Art), (2701, The Metropolitan Museum of Art), (5076, MoMA), CREATE TABLE `Royal_Family` ( Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Royal_Family_Details VARCHAR(255) ); Sample rows from `Royal_Family`: (9561, None), (9919, None), CREATE TABLE `Theme_Parks` ( Theme_Park_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Theme_Park_Details VARCHAR(255) ); Sample rows from `Theme_Parks`: (5265, Disney), (6476, Sea World), (6523, Universal Studios), CREATE TABLE `Visits` ( Visit_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID), Visit_Date DATETIME, Visit_Details VARCHAR(40) ); Sample rows from `Visits`: (183, 6653, 377, 2004-08-21 03:06:14, ), (268, 5076, 204, 2013-08-06 05:35:51, ), (273, 9360, 211, 2013-10-27 09:56:08, ), CREATE TABLE `Photos` ( Photo_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Photos`: (211, 8449, game1, None, 702, None), (280, 7067, game2, None, 762, None), (303, 5076, game3, None, 392, None), CREATE TABLE `Staff` ( Staff_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(40), Other_Details VARCHAR(255) ); Sample rows from `Staff`: (170, 6476, Whitney, None), (219, 6476, Kaela, None), (237, 7067, Eunice, None), CREATE TABLE `Tourist_Attraction_Features` ( Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID) ); Sample rows from `Tourist_Attraction_Features`: (5076, 528), (5076, 681), (5265, 523), ",
        "output": "SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Vincent\" INTERSECT SELECT t1.name FROM tourist_attractions as t1 JOIN visitors as t2 JOIN visits as t3 ON t1.tourist_attraction_id  =  t3.tourist_attraction_id AND t2.tourist_id  =  t3.tourist_id WHERE t2.tourist_details  =  \"Marcelle\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of companies with revenue between 100 and 150? ###filtered_database_schema: CREATE TABLE `Manufacturers` ( Code INTEGER, Name VARCHAR(255), Headquarter VARCHAR(255), Founder VARCHAR(255), Revenue REAL ); Sample rows from `Manufacturers`: (1, Sony, Tokyo, Andy, 120.0), (2, Creative Labs, Austin, Owen, 100.0), (3, Hewlett-Packard, Los Angeles, James, 50.0), CREATE TABLE `Products` ( Code INTEGER, Name VARCHAR(255), Price DECIMAL, Manufacturer INTEGER REFERENCES Manufacturers(Code) ); Sample rows from `Products`: (1, Hard drive, 240, 5), (2, Memory, 120, 6), (3, ZIP drive, 150, 4), ",
        "output": "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: which state has the largest city ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What articles have been published since 2006 about the effects of juicing for cancer patients ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT paperid  ,  title FROM paper WHERE title LIKE \"the effects of juicing for cancer patients\" AND year  >  2006;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the details of the student who registered for the most number of courses? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1 VARCHAR(80), line_2 VARCHAR(80), city VARCHAR(50), zip_postcode CHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (5, 0900 Roderick Oval New Albina, WA 19200-7914, Suite 096, Linnealand, 862, Montana, USA), (9, 966 Dach Ports Apt. 322 Lake Harmonyhaven, VA 65235, Apt. 163, South Minnie, 716, Texas, USA), (29, 28550 Broderick Underpass Suite 667 Zakaryhaven, WY 22945-1534, Apt. 419, North Trystanborough, 112, Vermont, USA), CREATE TABLE `People` ( person_id INTEGER, first_name VARCHAR(255), middle_name VARCHAR(255), last_name VARCHAR(255), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), login_name VARCHAR(40), password VARCHAR(40) ); Sample rows from `People`: (111, Shannon, Elissa, Senger, 01955267735, javier.trantow@example.net, pgub, 5e4ff49a61b3544da3ad7dc7e2cf28847564c64c), (121, Virginie, Jasmin, Hartmann, (508)319-2970x043, boyer.lonie@example.com, bkkv, b063331ea8116befaa7b84c59c6a22200f5f8caa), (131, Dariana, Hayley, Bednar, (262)347-9364x516, leila14@example.net, zops, b20b6a9f24aadeda70d54e410c3219f61fb063fb), CREATE TABLE `Students` ( student_id INTEGER REFERENCES People(person_id), student_details VARCHAR(255) ); Sample rows from `Students`: (111, Marry), (121, Martin), (131, Barry), CREATE TABLE `Courses` ( course_id VARCHAR(100) PRIMARY KEY, course_name VARCHAR(120), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Courses`: (301, statistics, statistics, None), (302, English, English, None), (303, French, French, None), CREATE TABLE `People_Addresses` ( person_address_id INTEGER, person_id INTEGER REFERENCES People(person_id), address_id INTEGER REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `People_Addresses`: (122, 111, 9, 2012-09-26 13:21:00, 2018-03-21 09:46:30), (257, 121, 5, 2008-07-31 02:17:25, 2018-03-09 02:11:12), (269, 131, 88, 2008-05-26 20:43:41, 2018-03-11 20:26:41), CREATE TABLE `Student_Course_Registrations` ( student_id INTEGER PRIMARY KEY REFERENCES Students(student_id), course_id INTEGER PRIMARY KEY REFERENCES Courses(course_id), registration_date DATETIME ); Sample rows from `Student_Course_Registrations`: (111, 301, 2008-11-04 10:35:13), (121, 301, 2008-10-04 10:35:13), (121, 303, 2008-11-14 10:35:13), CREATE TABLE `Student_Course_Attendance` ( student_id INTEGER PRIMARY KEY REFERENCES Student_Course_Registrations(student_id), course_id INTEGER PRIMARY KEY REFERENCES Student_Course_Registrations(course_id), date_of_attendance DATETIME ); Sample rows from `Student_Course_Attendance`: (111, 301, 2008-11-04 10:35:13), (121, 301, 2012-04-09 11:44:34), (121, 303, 2014-04-09 11:44:34), CREATE TABLE `Candidates` ( candidate_id INTEGER REFERENCES People(person_id), candidate_details VARCHAR(255) ); Sample rows from `Candidates`: (111, Jane), (121, Robert), (131, Alex), CREATE TABLE `Candidate_Assessments` ( candidate_id INTEGER PRIMARY KEY REFERENCES Candidates(candidate_id), qualification CHAR(15) PRIMARY KEY, assessment_date DATETIME, asessment_outcome_code CHAR(15) ); Sample rows from `Candidate_Assessments`: (111, A, 2010-04-07 11:44:34, Pass), (121, B, 2010-04-17 11:44:34, Pass), (131, D, 2010-04-05 11:44:34, Fail), ",
        "output": "SELECT t1.student_details FROM students as t1 JOIN student_course_registrations as t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which problems are reported by the staff with last name \"Bosco\"? Show the ids of the problems. ###filtered_database_schema: CREATE TABLE `Problem_Category_Codes` ( problem_category_code VARCHAR(20) PRIMARY KEY, problem_category_description VARCHAR(80) ); Sample rows from `Problem_Category_Codes`: (Datatabase, Database design or contents.), (GUI, User Interface.), (Middleware, Infrastructrure and Architecture), CREATE TABLE `Problem_Log` ( problem_log_id INTEGER, assigned_to_staff_id INTEGER REFERENCES Staff(staff_id), problem_id INTEGER REFERENCES Problems(problem_id), problem_category_code VARCHAR(20) REFERENCES Problem_Category_Codes(problem_category_code), problem_status_code VARCHAR(20) REFERENCES Problem_Status_Codes(problem_status_code), log_entry_date DATETIME, log_entry_description VARCHAR(255), log_entry_fix VARCHAR(255), other_log_details VARCHAR(255) ); Sample rows from `Problem_Log`: (1, 11, 11, Middleware, Solved, 2011-03-13 13:11:57, t, k, p), (2, 11, 8, GUI, Solved, 1976-03-31 14:03:02, a, k, s), (3, 12, 1, GUI, Solved, 1974-12-11 01:06:22, b, j, e), CREATE TABLE `Problem_Status_Codes` ( problem_status_code VARCHAR(20) PRIMARY KEY, problem_status_description VARCHAR(80) ); Sample rows from `Problem_Status_Codes`: (Reported, Reported), (Solved, Solved), CREATE TABLE `Product` ( product_id INTEGER, product_name VARCHAR(80), product_details VARCHAR(255) ); Sample rows from `Product`: (1, rose, k), (2, yellow, q), (3, chat, e), CREATE TABLE `Staff` ( staff_id INTEGER, staff_first_name VARCHAR(80), staff_last_name VARCHAR(80), other_staff_details VARCHAR(255) ); Sample rows from `Staff`: (1, Lacey, Bosco, m), (2, Dameon, Frami, x), (3, Ashley, Medhurst, w), CREATE TABLE `Problems` ( problem_id INTEGER, product_id INTEGER REFERENCES Product(product_id), closure_authorised_by_staff_id INTEGER REFERENCES Staff(staff_id), reported_by_staff_id INTEGER REFERENCES Staff(staff_id), date_problem_reported DATETIME, date_problem_closed DATETIME, problem_description VARCHAR(255), other_problem_details VARCHAR(255) ); Sample rows from `Problems`: (1, 4, 4, 2, 1978-06-26 19:10:17, 2012-07-22 19:24:26, x, p), (2, 8, 3, 10, 1988-11-07 16:09:31, 1973-06-07 04:13:51, w, p), (3, 1, 4, 1, 1995-05-14 08:32:56, 1997-02-26 05:06:15, r, i), ",
        "output": "SELECT t1.problem_id FROM problems as t1 JOIN staff as t2 ON t1.reported_by_staff_id = t2.staff_id WHERE t2.staff_last_name = \"Bosco\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of the customer who made the order of the largest amount of goods. ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_content VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), other_address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 9443 Boyle Route Suite 857, Lucasville, 416, Colorado, USA, None), (2, 1969 Jabari Port Suite 393, New Sabryna, 721, SouthCarolina, USA, None), (3, 295 Hackett Curve, Reingertown, 255, NewJersey, USA, None), CREATE TABLE `Products` ( product_id INTEGER, product_details VARCHAR(255) ); Sample rows from `Products`: (1, Americano), (2, Dove Chocolate), (3, Latte), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method VARCHAR(15), customer_name VARCHAR(80), date_became_customer DATETIME, other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Cash, Dr. Julia Wuckert MD, 2018-03-01 23:20:10, None), (2, Cheque, Tillman Ernser, 2018-02-28 11:37:44, None), (3, Credit Card, Rodrick Heaney, 2018-03-09 17:41:58, None), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_address_from DATETIME, address_type VARCHAR(15), date_address_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 11, 1985-03-29 20:31:43, Billing, 1993-02-17 17:55:18), (13, 11, 2010-08-25 04:24:35, Billing, 1972-02-17 22:23:38), (2, 14, 2010-12-26 08:52:50, Residential, 1979-07-16 18:22:39), CREATE TABLE `Customer_Contact_Channels` ( customer_id INTEGER REFERENCES Customers(customer_id), channel_code VARCHAR(15), active_from_date DATETIME, active_to_date DATETIME, contact_number VARCHAR(50) ); Sample rows from `Customer_Contact_Channels`: (9, Email, 2017-12-07 18:18:15, 2018-03-23 13:37:14, 940.035.6435x0225), (2, Email, 2017-04-07 04:51:41, 2018-03-23 01:30:52, 189.449.8326x7607), (9, Email, 2017-05-25 16:08:45, 2018-03-13 07:32:25, 958-653-2640), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(15), order_date DATETIME, order_details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 15, Cancelled, 2018-03-21 11:20:46, None), (2, 3, Cancelled, 2018-03-05 06:35:33, None), (3, 5, Delivered, 2018-03-04 07:16:22, Second time), CREATE TABLE `Order_Items` ( order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), order_quantity VARCHAR(15) ); Sample rows from `Order_Items`: (14, 2, 5), (5, 2, 9), (14, 3, 2), ",
        "output": "SELECT t1.customer_name FROM customers as t1 JOIN customer_orders as t2 ON t1.customer_id  =  t2.customer_id JOIN order_items as t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT MAX(order_quantity) FROM order_items)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of banks in the state of New York? ###filtered_database_schema: CREATE TABLE `bank` ( branch_ID INT PRIMARY KEY, bname varchar(20), no_of_customers INT, city varchar(10), state varchar(20) ); Sample rows from `bank`: (1, morningside, 203, New York City, New York), (2, downtown, 123, Salt Lake City, Utah), (3, broadway, 453, New York City, New York), CREATE TABLE `customer` ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal INT, no_of_loans INT, credit_score INT, branch_ID INT REFERENCES bank(branch_ID), state varchar(20) ); Sample rows from `customer`: (1, Mary, saving, 2000, 2, 30, 2, Utah), (2, Jack, checking, 1000, 1, 20, 1, Texas), (3, Owen, saving, 800000, 0, 210, 3, New York), CREATE TABLE `loan` ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3) REFERENCES customer(Cust_ID), branch_ID varchar(3) REFERENCES bank(branch_ID), amount INT ); Sample rows from `loan`: (1, Mortgages, 1, 1, 2050), (2, Auto, 1, 2, 3000), (3, Business, 3, 3, 5000), ",
        "output": "SELECT bname FROM bank WHERE state  =  'New York'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Tell me the the claim date and settlement date for each settlement case. ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_Details VARCHAR(255) ); Sample rows from `Customers`: (1, America Jaskolski), (2, Ellsworth Paucek), (3, Mrs. Hanna Willms), CREATE TABLE `Customer_Policies` ( Policy_ID INTEGER, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Policy_Type_Code CHAR(15), Start_Date DATE, End_Date DATE ); Sample rows from `Customer_Policies`: (119, 1, Car, 2018-01-21, 2017-12-15), (141, 2, Life, 2017-08-21, 2017-09-29), (143, 3, Car, 2017-06-16, 2017-12-09), CREATE TABLE `Claims` ( Claim_ID INTEGER, Policy_ID INTEGER REFERENCES Customer_Policies(Policy_ID), Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER ); Sample rows from `Claims`: (143, 744, 2017-03-11, 2017-11-03, 43884, 1085), (423, 552, 2016-08-12, 2018-01-27, 79134, 1724), (442, 473, 2017-02-24, 2018-01-21, 70088, 1189), CREATE TABLE `Settlements` ( Settlement_ID INTEGER, Claim_ID INTEGER REFERENCES Claims(Claim_ID), Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, Customer_Policy_ID INTEGER ); Sample rows from `Settlements`: (357, 486, 2018-08-07, 2018-01-16, 38543, 1181, 515), (412, 621, 2017-08-27, 2018-02-04, 57669, 1427, 617), (476, 801, 2016-09-05, 2018-03-02, 30954, 1805, 943), CREATE TABLE `Payments` ( Payment_ID INTEGER, Settlement_ID INTEGER REFERENCES Settlements(Settlement_ID), Payment_Method_Code VARCHAR(255), Date_Payment_Made DATE, Amount_Payment INTEGER ); Sample rows from `Payments`: (384, 516, MasterCard, 2018-02-16, 241730), (435, 476, MasterCard, 2017-05-28, 448613), (484, 516, MasterCard, 2017-06-24, 456098), ",
        "output": "SELECT date_claim_made ,  date_claim_settled FROM settlements"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many movies about Iraq war were produced in 2015 ? ###filtered_database_schema: CREATE TABLE `actor` ( aid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `copyright` ( id INT PRIMARY KEY, msid INT, cid INT ); CREATE TABLE `cast` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), aid INT REFERENCES actor(aid), role INT ); CREATE TABLE `genre` ( gid INT PRIMARY KEY, genre TEXT ); CREATE TABLE `classification` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), gid INT REFERENCES genre(gid) ); CREATE TABLE `company` ( id INT PRIMARY KEY, name TEXT, country_code TEXT ); CREATE TABLE `director` ( did INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `producer` ( pid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `directed_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), did INT REFERENCES director(did) ); CREATE TABLE `keyword` ( id INT PRIMARY KEY, keyword TEXT ); CREATE TABLE `made_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), pid INT REFERENCES producer(pid) ); CREATE TABLE `movie` ( mid INT PRIMARY KEY, title TEXT, release_year INT, title_aka TEXT, budget TEXT ); CREATE TABLE `tags` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), kid INT REFERENCES keyword(kid) ); CREATE TABLE `tv_series` ( sid INT PRIMARY KEY, title TEXT, release_year INT, num_of_seasons INT, num_of_episodes INT, title_aka TEXT, budget TEXT ); CREATE TABLE `writer` ( wid INT PRIMARY KEY, gender TEXT, name INT, nationality INT, num_of_episodes INT, birth_city TEXT, birth_year INT ); CREATE TABLE `written_by` ( id INT, msid INT REFERENCES copyright(msid), wid INT REFERENCES writer(wid) ); ",
        "output": "SELECT COUNT(DISTINCT t3.title) FROM tags as t2 JOIN keyword as t1 ON t2.kid  =  t1.id JOIN movie as t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"Iraq war\" AND t3.release_year  =  2015;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many stores are headquarted in each city? ###filtered_database_schema: CREATE TABLE `product` ( product_id INT PRIMARY KEY, product TEXT, dimensions TEXT, dpi REAL, pages_per_minute_color REAL, max_page_size TEXT, interface TEXT ); Sample rows from `product`: (1, Fujitsu fi-6130 A4 Series Scanner, 301 x 160 x 158, 600.0, 30.0, A4, USB 2.0), (2, Plustek MobileOffice D28 Corporate, 303 x 94 x 60, 600.0, 28.0, A4, USB 2.0), (3, Xerox Travel Scanner 100, 289 x 51 x 38, 600.0, 4.0, A4, USB 2.0), CREATE TABLE `store` ( Store_ID INT PRIMARY KEY, Store_Name TEXT, Type TEXT, Area_size REAL, Number_of_product_category REAL, Ranking INT ); Sample rows from `store`: (1, Miramichi, City Mall, 179.84, 17811.0, 2), (2, Neguac, Village Store, 26.69, 1678.0, 3), (3, Rogersville, Village Store, 7.23, 1170.0, 1), CREATE TABLE `district` ( District_ID INT PRIMARY KEY, District_name TEXT, Headquartered_City TEXT, City_Population REAL, City_Area REAL ); Sample rows from `district`: (1, Attock District, Attock City, 94620.0, 20.0), (2, Bahawalnagar District, Bahawalnagar City, 134936.0, 13.0), (3, Bahawalpur District, Bahawalpur City, 530438.0, 38.0), CREATE TABLE `store_product` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), Product_ID INT PRIMARY KEY REFERENCES product(Product_ID) ); Sample rows from `store_product`: (1, 1), (1, 2), (1, 3), CREATE TABLE `store_district` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), District_ID INT REFERENCES district(District_ID) ); Sample rows from `store_district`: (1, 15), (2, 15), (3, 11), ",
        "output": "SELECT t3.headquartered_city ,  COUNT(*) FROM store as t1 JOIN store_district as t2 ON t1.store_id  =  t2.store_id JOIN district as t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids for all sporty students who are on scholarship? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Video_Games` ( GameID INTEGER, GName VARCHAR(40), GType VARCHAR(40) ); Sample rows from `Video_Games`: (1, RNG Stone, Collectible card game), (2, The Vanishing of Eric Calder, Walking Simulator), (3, Grand Term Assignment, Role-playing game), CREATE TABLE `Plays_Games` ( StuID INTEGER REFERENCES Student(StuID), GameID INTEGER REFERENCES Video_Games(GameID), Hours_Played INTEGER ); Sample rows from `Plays_Games`: (1001, 1, 35), (1001, 2, 15), (1001, 5, 1), CREATE TABLE `SportsInfo` ( StuID INTEGER REFERENCES Student(StuID), SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1) ); Sample rows from `SportsInfo`: (1001, Athletics, 2, 5, N), (1002, Football, 7, 20, Y), (1003, Football, 45, 18, Y), ",
        "output": "SELECT stuid FROM sportsinfo WHERE onscholarship  =  'Y'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What were the papers published at pldi 2015 ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t1.paperid FROM venue as t2 JOIN paper as t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\". ###filtered_database_schema: CREATE TABLE `wrestler` ( Wrestler_ID INT PRIMARY KEY, Name TEXT, Reign TEXT, Days_held TEXT, Location TEXT, Event TEXT ); Sample rows from `wrestler`: (1, Rey Misterio Sr., 1, 344, Tijuana , Mexico, Live event), (2, Fishman, 1, 113, Tijuana , Mexico, Live event), (3, Villaño IV, 1, 1285, Tijuana , Mexico, Live event), CREATE TABLE `Elimination` ( Elimination_ID TEXT PRIMARY KEY, Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID), Team TEXT, Eliminated_By TEXT, Elimination_Move TEXT, Time TEXT ); Sample rows from `Elimination`: (1, 1, Team Orton, Punk, Go To Sleep, 00:11), (2, 2, Team Batista, Benjamin, Paydirt, 07:38), (3, 4, Team Batista, Orton, Rope hung DDT, 10:45), ",
        "output": "SELECT team FROM elimination WHERE eliminated_by  =  \"Orton\" INTERSECT SELECT team FROM elimination WHERE eliminated_by  =  \"Benjamin\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Give the name and building of the departments with greater than average budget. ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT AVG(budget) FROM department)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the codes of all courses that take place in room KLR209. ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT class_code FROM class WHERE class_room  =  'KLR209'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Report the distinct advisors who have more than 2 students. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Voting_record` ( StuID INTEGER REFERENCES Student(StuID), Registration_Date VARCHAR(12), Election_Cycle VARCHAR(12), President_Vote INTEGER REFERENCES Student(StuID), Vice_President_Vote INTEGER REFERENCES Student(StuID), Secretary_Vote INTEGER REFERENCES Student(StuID), Treasurer_Vote INTEGER REFERENCES Student(StuID), Class_President_Vote INTEGER REFERENCES Student(StuID), Class_Senator_Vote INTEGER REFERENCES Student(StuID) ); Sample rows from `Voting_record`: (1001, 08/30/2015, Spring, 1004, 1007, 1010, 1035, 1001, 1028), (1002, 08/30/2014, Spring, 1014, 1007, 1020, 1025, 1021, 1028), (1003, 08/30/2013, Spring, 1004, 1017, 1030, 1035, 1031, 1028), ",
        "output": "SELECT advisor FROM student GROUP BY advisor HAVING COUNT(*)  >  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Hom many musicians performed in the song \"Flash\"? ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT COUNT(*) FROM performance as t1 JOIN band as t2 ON t1.bandmate  =  t2.id JOIN songs as t3 ON t3.songid  =  t1.songid WHERE t3.title  =  \"Flash\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the first name and GPA of every student that has a GPA lower than average? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT AVG(stu_gpa) FROM student)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is id of the city that hosted events in the most recent year? ###filtered_database_schema: CREATE TABLE `city` ( City_ID INT PRIMARY KEY, City TEXT, Hanzi TEXT, Hanyu_Pinyin TEXT, Regional_Population INT, GDP REAL ); Sample rows from `city`: (1, Shanghai, 上海, Shànghǎi, 23019148, 1919.57), (2, Nanjing ( Jiangsu ), 南京, Nánjīng, 8004680, 614.55), (3, Hangzhou ( Zhejiang ), 杭州, Hángzhōu, 8700400, 701.18), CREATE TABLE `match` ( Match_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Score TEXT, Result TEXT, Competition TEXT ); Sample rows from `match`: (1, 18 February 1992, Estadio Cuscatlán , San Salvador , El Salvador, 1-0, 2-0, Friendly match), (2, 19 July 1992, Estadio Rigoberto López , Managua , Nicaragua, 3-0, 5-0, 1994 FIFA World Cup qualification), (3, 23 July 1992, Estadio Cuscatlán , San Salvador , El Salvador, 1-0, 5-1, 1994 FIFA World Cup qualification), CREATE TABLE `temperature` ( City_ID INT PRIMARY KEY REFERENCES city(City_ID), Jan REAL, Feb REAL, Mar REAL, Apr REAL, Jun REAL, Jul REAL, Aug REAL, Sep REAL, Oct REAL, Nov REAL, Dec REAL ); Sample rows from `temperature`: (1, 17.8, 17.8, 18.3, 18.9, 20.0, 20.6, 20.6, 20.6, 20.0, 19.4, 18.3), (2, 26.1, 26.1, 26.1, 26.1, 27.8, 27.8, 28.3, 28.3, 28.3, 27.2, 26.7), (3, 18.9, 18.3, 19.4, 20.0, 22.2, 23.3, 23.9, 23.3, 22.8, 21.7, 20.0), CREATE TABLE `hosting_city` ( Year INT PRIMARY KEY, Match_ID INT REFERENCES match(Match_ID), Host_City TEXT REFERENCES city(City_ID) ); Sample rows from `hosting_city`: (2008, 1, 1), (2009, 2, 2), (2010, 3, 2), ",
        "output": "SELECT host_city FROM hosting_city ORDER BY year DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names, locations, and years of opening for tracks with seating higher than average? ###filtered_database_schema: CREATE TABLE `race` ( Race_ID INT PRIMARY KEY, Name TEXT, Class TEXT, Date TEXT, Track_ID TEXT REFERENCES track(Track_ID) ); Sample rows from `race`: (1, Rolex 24 At Daytona, DP/GT, January 26 January 27, 1), (2, Gainsco Grand Prix of Miami, DP/GT, March 29, 2), (3, Mexico City 250, DP/GT, April 19, 2), CREATE TABLE `track` ( Track_ID INT PRIMARY KEY, Name TEXT, Location TEXT, Seating REAL, Year_Opened REAL ); Sample rows from `track`: (1, Auto Club Speedway, Fontana, CA, 92000.0, 1997.0), (2, Chicagoland Speedway, Joliet, IL, 75000.0, 2001.0), (3, Darlington Raceway, Darlington, SC, 63000.0, 1950.0), ",
        "output": "SELECT name ,  location ,  year_opened FROM track WHERE seating  >  (SELECT AVG(seating) FROM track)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all stations with a latitude smaller than 37.5? ###filtered_database_schema: CREATE TABLE `station` ( id INTEGER, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT ); Sample rows from `station`: (2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013), (3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013), (4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013), CREATE TABLE `status` ( station_id INTEGER REFERENCES station(id), bikes_available INTEGER, docks_available INTEGER, time TEXT ); Sample rows from `status`: (3, 12, 3, 2015-06-02 12:46:02), (3, 12, 3, 2015-06-02 12:47:02), (3, 12, 3, 2015-06-02 12:48:02), CREATE TABLE `trip` ( id INTEGER, duration INTEGER, start_date TEXT, start_station_name TEXT, start_station_id INTEGER, end_date TEXT, end_station_name TEXT, end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER ); Sample rows from `trip`: (900504, 384, 8/21/2015 17:03, Howard at 2nd, 63, 8/21/2015 17:10, San Francisco Caltrain 2 (330 Townsend), 69, 454, Subscriber, 94041), (900505, 588, 8/21/2015 17:03, South Van Ness at Market, 66, 8/21/2015 17:13, San Francisco Caltrain 2 (330 Townsend), 69, 574, Subscriber, 95119), (900506, 196, 8/21/2015 17:04, Market at Sansome, 77, 8/21/2015 17:07, Harry Bridges Plaza (Ferry Building), 50, 636, Subscriber, 94925), CREATE TABLE `weather` ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER ); Sample rows from `weather`: (8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107), (8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107), (8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107), ",
        "output": "SELECT name FROM station WHERE lat  <  37.5"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the sum of revenue from companies with headquarters in Austin? ###filtered_database_schema: CREATE TABLE `Manufacturers` ( Code INTEGER, Name VARCHAR(255), Headquarter VARCHAR(255), Founder VARCHAR(255), Revenue REAL ); Sample rows from `Manufacturers`: (1, Sony, Tokyo, Andy, 120.0), (2, Creative Labs, Austin, Owen, 100.0), (3, Hewlett-Packard, Los Angeles, James, 50.0), CREATE TABLE `Products` ( Code INTEGER, Name VARCHAR(255), Price DECIMAL, Manufacturer INTEGER REFERENCES Manufacturers(Code) ); Sample rows from `Products`: (1, Hard drive, 240, 5), (2, Memory, 120, 6), (3, ZIP drive, 150, 4), ",
        "output": "SELECT SUM(revenue) FROM manufacturers WHERE headquarter  =  'Austin'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of students who is older than 20 in each dorm. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT COUNT(*) ,  t3.dorm_name FROM student as t1 JOIN lives_in as t2 ON t1.stuid  =  t2.stuid JOIN dorm as t3 ON t3.dormid  =  t2.dormid WHERE t1.age  >  20 GROUP BY t3.dorm_name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many distinct artists have volumes? ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Artist TEXT, Age INT, Famous_Title TEXT, Famous_Release_date TEXT ); Sample rows from `artist`: (1, Gorgoroth, 34, Bergen 1996, November 2007), (2, Ophiolatry, 35, Transmutation, January 21, 2008), (3, Ophiolatry, 22, Antievangelistical Process (re-release), 2009), CREATE TABLE `volume` ( Volume_ID INT PRIMARY KEY, Volume_Issue TEXT, Issue_Date TEXT, Weeks_on_Top REAL, Song TEXT, Artist_ID INT REFERENCES artist(Artist_ID) ); Sample rows from `volume`: (1, 45:14 §, 27 December 1986 - 10 January, 3.0, The Way, 1), (2, 45:15, 17 January, 1.0, Everybody Have Fun Tonight , 2), (3, 45:16, 24 January, 1.0, Walk Like an Egyptian , 1), CREATE TABLE `music_festival` ( ID INT PRIMARY KEY, Music_Festival TEXT, Date_of_ceremony TEXT, Category TEXT, Volume INT REFERENCES volume(Volume_ID), Result TEXT ); Sample rows from `music_festival`: (1, 34th England Academy Prize, 18 February 2011, Best Song, 1, Nominated), (2, 34th Japan Academy Prize, 18 February 2011, Best Lyrics, 2, Nominated), (3, 34th European Academy Prize, 18 February 2011, Best Song, 3, Awarded), ",
        "output": "SELECT COUNT(DISTINCT artist_id) FROM volume"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find names of all colleges whose enrollment is greater than that of all colleges in the FL state. ###filtered_database_schema: CREATE TABLE `College` ( cName varchar(20) PRIMARY KEY, state varchar(2), enr numeric(5,0) ); Sample rows from `College`: (LSU, LA, 18000), (ASU, AZ, 12000), (OU, OK, 22000), CREATE TABLE `Player` ( pID numeric(5,0) PRIMARY KEY, pName varchar(20), yCard varchar(3), HS numeric(5,0) ); Sample rows from `Player`: (10001, Andrew, no, 1200), (20002, Blake, no, 1600), (30003, Charles, no, 300), CREATE TABLE `Tryout` ( pID numeric(5,0) PRIMARY KEY REFERENCES Player(pID), cName varchar(20) PRIMARY KEY REFERENCES College(cName), pPos varchar(8), decision varchar(3) ); Sample rows from `Tryout`: (10001, LSU, goalie, no), (10001, ASU, goalie, yes), (20002, FSU, striker, yes), ",
        "output": "SELECT cname FROM college WHERE enr  >  (SELECT MAX(enr) FROM college WHERE state  =  'FL')"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the IDs of customers whose name contains \"Diana\". ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_name VARCHAR(40) ); Sample rows from `Customers`: (194, America Jaskolski), (214, Ellsworth Paucek), (256, Mrs. Hanna Willms), CREATE TABLE `Services` ( Service_ID INTEGER, Service_name VARCHAR(40) ); Sample rows from `Services`: (1, New policy application), (4, Close a policy), (6, Change a policy), CREATE TABLE `Available_Policies` ( Policy_ID INTEGER PRIMARY KEY, policy_type_code CHAR(15), Customer_Phone VARCHAR(255) ); Sample rows from `Available_Policies`: (246, Life Insurance, +16(2)5838999222), (257, Property Insurance, 242.763.9214), (300, Property Insurance, 1-416-503-7735x94204), CREATE TABLE `Customers_Policies` ( Customer_ID INTEGER PRIMARY KEY REFERENCES Customers(Customer_ID), Policy_ID INTEGER PRIMARY KEY REFERENCES Available_Policies(Policy_ID), Date_Opened DATE, Date_Closed DATE ); Sample rows from `Customers_Policies`: (214, 257, 2016-11-19, 2018-03-04), (214, 301, 2016-04-12, 2018-02-07), (256, 583, 2016-07-22, 2018-02-20), CREATE TABLE `First_Notification_of_Loss` ( FNOL_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers_Policies(Customer_ID), Policy_ID INTEGER REFERENCES Customers_Policies(Policy_ID), Service_ID INTEGER REFERENCES Services(Service_ID) ); Sample rows from `First_Notification_of_Loss`: (532, 214, 257, 6), (1611, 996, 993, 9), (1722, 996, 879, 6), CREATE TABLE `Claims` ( Claim_ID INTEGER PRIMARY KEY, FNOL_ID INTEGER REFERENCES First_Notification_of_Loss(FNOL_ID), Effective_Date DATE ); Sample rows from `Claims`: (134, 1722, 1973-08-18), (145, 1611, 2014-10-19), (228, 532, 1975-05-07), CREATE TABLE `Settlements` ( Settlement_ID INTEGER PRIMARY KEY, Claim_ID INTEGER REFERENCES Claims(Claim_ID), Effective_Date DATE, Settlement_Amount REAL ); Sample rows from `Settlements`: (161, 717, 2009-11-20, 6451.65), (176, 641, 1971-06-29, 1588.45), (205, 604, 1978-09-09, 9814.39), ",
        "output": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find all the instruments ever used by the musician with last name \"Heilo\"? ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT instrument FROM instruments as t1 JOIN band as t2 ON t1.bandmateid  =  t2.id WHERE t2.lastname  =  \"Heilo\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find all movies produced in 2015 ###filtered_database_schema: CREATE TABLE `actor` ( aid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `copyright` ( id INT PRIMARY KEY, msid INT, cid INT ); CREATE TABLE `cast` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), aid INT REFERENCES actor(aid), role INT ); CREATE TABLE `genre` ( gid INT PRIMARY KEY, genre TEXT ); CREATE TABLE `classification` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), gid INT REFERENCES genre(gid) ); CREATE TABLE `company` ( id INT PRIMARY KEY, name TEXT, country_code TEXT ); CREATE TABLE `director` ( did INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `producer` ( pid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `directed_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), did INT REFERENCES director(did) ); CREATE TABLE `keyword` ( id INT PRIMARY KEY, keyword TEXT ); CREATE TABLE `made_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), pid INT REFERENCES producer(pid) ); CREATE TABLE `movie` ( mid INT PRIMARY KEY, title TEXT, release_year INT, title_aka TEXT, budget TEXT ); CREATE TABLE `tags` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), kid INT REFERENCES keyword(kid) ); CREATE TABLE `tv_series` ( sid INT PRIMARY KEY, title TEXT, release_year INT, num_of_seasons INT, num_of_episodes INT, title_aka TEXT, budget TEXT ); CREATE TABLE `writer` ( wid INT PRIMARY KEY, gender TEXT, name INT, nationality INT, num_of_episodes INT, birth_city TEXT, birth_year INT ); CREATE TABLE `written_by` ( id INT, msid INT REFERENCES copyright(msid), wid INT REFERENCES writer(wid) ); ",
        "output": "SELECT title FROM movie WHERE release_year  =  2015;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the studios which average gross is above 4500000. ###filtered_database_schema: CREATE TABLE `film` ( Film_ID INT PRIMARY KEY, Title TEXT, Studio TEXT, Director TEXT, Gross_in_dollar INT ); Sample rows from `film`: (1, ET the Extra-Terrestrial, Universal, Steven Spielberg, 435110554), (2, Tootsie, Columbia, Sydney Pollack, 177200000), (3, An Officer and a Gentleman, Paramount / Lorimar, Taylor Hackford, 129795554), CREATE TABLE `market` ( Market_ID INT PRIMARY KEY, Country TEXT, Number_cities INT ); Sample rows from `market`: (1, Japan, 209), (2, China, 540), (3, USA, 700), CREATE TABLE `film_market_estimation` ( Estimation_ID INT PRIMARY KEY, Low_Estimate REAL, High_Estimate REAL, Film_ID INT REFERENCES film(Film_ID), Type TEXT, Market_ID INT REFERENCES market(Market_ID), Year INT ); Sample rows from `film_market_estimation`: (1, 80000.0, 80400.0, 1, Mass suicide murder, 1, 1945), (2, 8000.0, 8000.0, 2, Mass suicide, 2, 1944), (3, 3000.0, 80400.0, 3, Mass human sacrifice, 3, 1487), ",
        "output": "SELECT studio FROM film GROUP BY studio HAVING AVG(gross_in_dollar)  >=  4500000"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids of the students who are under 20 years old and are involved in at least one activity. ###filtered_database_schema: CREATE TABLE `Activity` ( actid INTEGER, activity_name varchar(25) ); Sample rows from `Activity`: (770, Mountain Climbing), (771, Canoeing), (772, Kayaking), CREATE TABLE `Participates_in` ( stuid INTEGER REFERENCES Student(StuID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Participates_in`: (1001, 770), (1001, 771), (1001, 777), CREATE TABLE `Faculty_Participates_in` ( FacID INTEGER REFERENCES Faculty(FacID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Faculty_Participates_in`: (1082, 784), (1082, 785), (1082, 790), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), ",
        "output": "SELECT stuid FROM participates_in INTERSECT SELECT stuid FROM student WHERE age  <  20"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the hardware model name for the phones that have screen mode type \"Text\" or RAM size greater than 32. ###filtered_database_schema: CREATE TABLE `chip_model` ( Model_name TEXT PRIMARY KEY, Launch_year REAL, RAM_MiB REAL, ROM_MiB REAL, Slots TEXT, WiFi TEXT, Bluetooth TEXT ); Sample rows from `chip_model`: (X5, 2002.0, 32.0, 32.0, 1CFII,1SD, No, No), (X5 high end, 2002.0, 64.0, 48.0, 1CFII,1SD, No, No), (X3 Basic, 2003.0, 32.0, 32.0, 1SD, No, No), CREATE TABLE `screen_mode` ( Graphics_mode REAL PRIMARY KEY, Char_cells TEXT, Pixels TEXT, Hardware_colours REAL, used_kb REAL, map TEXT, Type TEXT ); Sample rows from `screen_mode`: (0.0, 80 × 32, 640 × 256, 2.0, 20.0, 3000–7FFF, Graphics), (1.0, 40 × 32, 320 × 256, 4.0, 20.0, 3000–7FFF, Graphics), (2.0, 20 × 32, 160 × 256, 8.0, 20.0, 3000–7FFF, Graphics), CREATE TABLE `phone` ( Company_name TEXT, Hardware_Model_name TEXT PRIMARY KEY, Accreditation_type TEXT, Accreditation_level TEXT, Date TEXT, chip_model TEXT REFERENCES chip_model(Model_name), screen_mode TEXT REFERENCES screen_mode(Graphics_mode) ); Sample rows from `phone`: (Sony Mobile Communications, XPERIA T, XPERIA J, Full, joyn Hot Fixes, Approved (awarded 15.11.12), X5, 1), (LG Electronics, LG-P760, Full, joyn Hot Fixes, Approved (awarded 19.11.12), X51v, 3), (Nokia Corporation, Lumia 920, Lumia 820, Lumia 620, Full, joyn Hot Fixes, Approved (awarded 05.12.12), X5, 4), ",
        "output": "SELECT t2.hardware_model_name FROM chip_model as t1 JOIN phone as t2 ON t1.model_name  =  t2.chip_model JOIN screen_mode as t3 ON t2.screen_mode = t3.graphics_mode WHERE t3.type = \"Text\" OR t1.ram_mib  >  32;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: On what dates did the student whose personal name is \"Karson\" enroll in and complete the courses? ###filtered_database_schema: CREATE TABLE `Course_Authors_and_Tutors` ( author_id INTEGER, author_tutor_ATB VARCHAR(3), login_name VARCHAR(40), password VARCHAR(40), personal_name VARCHAR(80), middle_name VARCHAR(80), family_name VARCHAR(80), gender_mf VARCHAR(1), address_line_1 VARCHAR(80) ); Sample rows from `Course_Authors_and_Tutors`: (1, 331, jmckenzie, c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b, Cathrine, Ruthie, Grant, 0, 756 Monahan Mews Spinkashire, NJ 64230-5098), (2, 975, heidenreich.ara, 24b0ee84063c3b017ab1839e01b7280f47f7c7c2, Retha, Corene, Armstrong, 0, 98623 Huels Manor Jasttown, DE 31611), (3, 349, clementina29, cdaf6c3483f19e2253659a40a3aab786a3390f78, Darius, Ethyl, Reichel, 0, 99296 Keeling Courts North Audreanne, IL 28272), CREATE TABLE `Students` ( student_id INTEGER, date_of_registration DATETIME, date_of_latest_logon DATETIME, login_name VARCHAR(40), password VARCHAR(10), personal_name VARCHAR(40), middle_name VARCHAR(40), family_name VARCHAR(40) ); Sample rows from `Students`: (1, 2015-07-22 13:32:35, 2017-10-17 22:52:26, annamae.hoppe, db8765bb6f, Wilson, Aubrey, Ward), (2, 2015-07-02 00:21:42, 2017-06-24 22:16:27, wmiller, 35faf8182a, Karson, Luella, Jaskolski), (3, 2015-10-11 03:23:27, 2018-03-10 23:22:23, ahartmann, 8e064ec4e6, Mariela, Brandt, Legros), CREATE TABLE `Subjects` ( subject_id INTEGER, subject_name VARCHAR(120) ); Sample rows from `Subjects`: (1, Computer Science), (2, Arts), (3, Language), CREATE TABLE `Courses` ( course_id INTEGER, author_id INTEGER REFERENCES Course_Authors_and_Tutors(author_id), subject_id INTEGER REFERENCES Subjects(subject_id), course_name VARCHAR(120), course_description VARCHAR(255) ); Sample rows from `Courses`: (1, 8, 1, database, database), (2, 6, 1, advanced database, advanced database), (3, 15, 1, operating system, operating system), CREATE TABLE `Student_Course_Enrolment` ( registration_id INTEGER, student_id INTEGER REFERENCES Students(student_id), course_id INTEGER REFERENCES Courses(course_id), date_of_enrolment DATETIME, date_of_completion DATETIME ); Sample rows from `Student_Course_Enrolment`: (1, 11, 2, 2017-10-09 07:09:02, 2018-02-26 07:48:52), (2, 15, 4, 2017-11-13 12:49:33, 2018-03-04 01:24:56), (3, 10, 8, 2017-10-17 13:50:40, 2018-03-22 02:53:01), CREATE TABLE `Student_Tests_Taken` ( registration_id INTEGER REFERENCES Student_Course_Enrolment(registration_id), date_test_taken DATETIME, test_result VARCHAR(255) ); Sample rows from `Student_Tests_Taken`: (12, 2018-03-25 03:27:16, Fail), (10, 2018-03-25 21:50:22, Pass), (7, 2018-03-21 00:32:25, Pass), ",
        "output": "SELECT t1.date_of_enrolment ,  t1.date_of_completion FROM student_course_enrolment as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id WHERE t2.personal_name  =  \"Karson\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the lowest point in usa ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the codes of card types that have 5 or more cards? ###filtered_database_schema: CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 6, 338, Regular), (2, 14, 562, VIP), (3, 9, 162, VIP), CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(20), customer_last_name VARCHAR(20), customer_address VARCHAR(255), customer_phone VARCHAR(255), customer_email VARCHAR(255), other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Aniyah, Feest, 55975 Theodore Estates Lake Brody, VT 57078, (673)872-5338, fahey.dorian@example.com, None), (2, Susie, Wiza, 6478 Moen Isle Suite 910 Schimmelmouth, VT 96364-4898, 679-845-8645x94312, idickinson@example.com, None), (3, Marcel, Brekke, 1965 Abernathy Plains Port Lilla, LA 44867, 1-511-656-6664, nichole.rodriguez@example.com, None), CREATE TABLE `Customers_Cards` ( card_id INTEGER, customer_id INTEGER, card_type_code VARCHAR(15), card_number VARCHAR(80), date_valid_from DATETIME, date_valid_to DATETIME, other_card_details VARCHAR(255) ); Sample rows from `Customers_Cards`: (1, 14, Credit, 4560596484842, 2011-04-17 09:05:28, 2018-03-07 17:06:19, 5567915676420343), (2, 9, Credit, 4859448397570735, 2012-05-22 02:05:41, 2018-02-25 15:43:32, 4539333582760), (3, 6, Debit, 348237249146948, 2014-08-01 14:26:45, 2018-03-24 15:29:00, 4916210554814), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, previous_transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), card_id INTEGER REFERENCES Customers_Cards(card_id), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DOUBLE, transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 925, 15, 1, Payment, 2018-03-24 06:41:41, 1701.23, None, None), (2, 494, 3, 2, Refund, 2018-03-24 12:08:55, 1931.76, None, None), (3, 642, 4, 3, Payment, 2018-03-24 09:08:27, 486.56, None, None), ",
        "output": "SELECT card_type_code FROM customers_cards GROUP BY card_type_code HAVING COUNT(*)  >=  5"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the countries for each market ordered by decreasing number of cities? ###filtered_database_schema: CREATE TABLE `film` ( Film_ID INT PRIMARY KEY, Title TEXT, Studio TEXT, Director TEXT, Gross_in_dollar INT ); Sample rows from `film`: (1, ET the Extra-Terrestrial, Universal, Steven Spielberg, 435110554), (2, Tootsie, Columbia, Sydney Pollack, 177200000), (3, An Officer and a Gentleman, Paramount / Lorimar, Taylor Hackford, 129795554), CREATE TABLE `market` ( Market_ID INT PRIMARY KEY, Country TEXT, Number_cities INT ); Sample rows from `market`: (1, Japan, 209), (2, China, 540), (3, USA, 700), CREATE TABLE `film_market_estimation` ( Estimation_ID INT PRIMARY KEY, Low_Estimate REAL, High_Estimate REAL, Film_ID INT REFERENCES film(Film_ID), Type TEXT, Market_ID INT REFERENCES market(Market_ID), Year INT ); Sample rows from `film_market_estimation`: (1, 80000.0, 80400.0, 1, Mass suicide murder, 1, 1945), (2, 8000.0, 8000.0, 2, Mass suicide, 2, 1944), (3, 3000.0, 80400.0, 3, Mass human sacrifice, 3, 1487), ",
        "output": "SELECT country FROM market ORDER BY number_cities DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000. ###filtered_database_schema: CREATE TABLE `Investors` ( investor_id INTEGER, Investor_details VARCHAR(255) ); Sample rows from `Investors`: (1, z), (2, z), (3, d), CREATE TABLE `Lots` ( lot_id INTEGER, investor_id INTEGER REFERENCES Investors(investor_id), lot_details VARCHAR(255) ); Sample rows from `Lots`: (1, 13, r), (2, 16, z), (3, 10, s), CREATE TABLE `Ref_Transaction_Types` ( transaction_type_code VARCHAR(10) PRIMARY KEY, transaction_type_description VARCHAR(80) ); Sample rows from `Ref_Transaction_Types`: (SALE, Sale), (PUR, Purchase), CREATE TABLE `Transactions` ( transaction_id INTEGER, investor_id INTEGER REFERENCES Investors(investor_id), transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code), date_of_transaction DATETIME, amount_of_transaction DECIMAL(19,4), share_count VARCHAR(40), other_details VARCHAR(255) ); Sample rows from `Transactions`: (1, 6, SALE, 1988-09-16 19:02:51, 302507.6996, 8718572, None), (2, 18, PUR, 1982-06-06 17:19:00, 27.257, 9, None), (3, 2, SALE, 1979-04-27 06:03:59, 48777.969, 8580, None), CREATE TABLE `Sales` ( sales_transaction_id INTEGER REFERENCES Transactions(transaction_id), sales_details VARCHAR(255) ); Sample rows from `Sales`: (1, x), (2, o), (3, a), CREATE TABLE `Purchases` ( purchase_transaction_id INTEGER REFERENCES Transactions(transaction_id), purchase_details VARCHAR(255) ); Sample rows from `Purchases`: (1, c), (2, y), (3, i), CREATE TABLE `Transactions_Lots` ( transaction_id INTEGER REFERENCES Transactions(transaction_id), lot_id INTEGER REFERENCES Lots(lot_id) ); Sample rows from `Transactions_Lots`: (3, 11), (3, 8), (2, 11), ",
        "output": "SELECT date_of_transaction FROM transactions WHERE share_count  >  100 OR amount_of_transaction  >  1000"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the descriptions of the courses with name \"database\"? ###filtered_database_schema: CREATE TABLE `Course_Authors_and_Tutors` ( author_id INTEGER, author_tutor_ATB VARCHAR(3), login_name VARCHAR(40), password VARCHAR(40), personal_name VARCHAR(80), middle_name VARCHAR(80), family_name VARCHAR(80), gender_mf VARCHAR(1), address_line_1 VARCHAR(80) ); Sample rows from `Course_Authors_and_Tutors`: (1, 331, jmckenzie, c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b, Cathrine, Ruthie, Grant, 0, 756 Monahan Mews Spinkashire, NJ 64230-5098), (2, 975, heidenreich.ara, 24b0ee84063c3b017ab1839e01b7280f47f7c7c2, Retha, Corene, Armstrong, 0, 98623 Huels Manor Jasttown, DE 31611), (3, 349, clementina29, cdaf6c3483f19e2253659a40a3aab786a3390f78, Darius, Ethyl, Reichel, 0, 99296 Keeling Courts North Audreanne, IL 28272), CREATE TABLE `Students` ( student_id INTEGER, date_of_registration DATETIME, date_of_latest_logon DATETIME, login_name VARCHAR(40), password VARCHAR(10), personal_name VARCHAR(40), middle_name VARCHAR(40), family_name VARCHAR(40) ); Sample rows from `Students`: (1, 2015-07-22 13:32:35, 2017-10-17 22:52:26, annamae.hoppe, db8765bb6f, Wilson, Aubrey, Ward), (2, 2015-07-02 00:21:42, 2017-06-24 22:16:27, wmiller, 35faf8182a, Karson, Luella, Jaskolski), (3, 2015-10-11 03:23:27, 2018-03-10 23:22:23, ahartmann, 8e064ec4e6, Mariela, Brandt, Legros), CREATE TABLE `Subjects` ( subject_id INTEGER, subject_name VARCHAR(120) ); Sample rows from `Subjects`: (1, Computer Science), (2, Arts), (3, Language), CREATE TABLE `Courses` ( course_id INTEGER, author_id INTEGER REFERENCES Course_Authors_and_Tutors(author_id), subject_id INTEGER REFERENCES Subjects(subject_id), course_name VARCHAR(120), course_description VARCHAR(255) ); Sample rows from `Courses`: (1, 8, 1, database, database), (2, 6, 1, advanced database, advanced database), (3, 15, 1, operating system, operating system), CREATE TABLE `Student_Course_Enrolment` ( registration_id INTEGER, student_id INTEGER REFERENCES Students(student_id), course_id INTEGER REFERENCES Courses(course_id), date_of_enrolment DATETIME, date_of_completion DATETIME ); Sample rows from `Student_Course_Enrolment`: (1, 11, 2, 2017-10-09 07:09:02, 2018-02-26 07:48:52), (2, 15, 4, 2017-11-13 12:49:33, 2018-03-04 01:24:56), (3, 10, 8, 2017-10-17 13:50:40, 2018-03-22 02:53:01), CREATE TABLE `Student_Tests_Taken` ( registration_id INTEGER REFERENCES Student_Course_Enrolment(registration_id), date_test_taken DATETIME, test_result VARCHAR(255) ); Sample rows from `Student_Tests_Taken`: (12, 2018-03-25 03:27:16, Fail), (10, 2018-03-25 21:50:22, Pass), (7, 2018-03-21 00:32:25, Pass), ",
        "output": "SELECT course_description FROM courses WHERE course_name  =  \"database\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the id of students who registered courses or attended courses? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1 VARCHAR(80), line_2 VARCHAR(80), city VARCHAR(50), zip_postcode CHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (5, 0900 Roderick Oval New Albina, WA 19200-7914, Suite 096, Linnealand, 862, Montana, USA), (9, 966 Dach Ports Apt. 322 Lake Harmonyhaven, VA 65235, Apt. 163, South Minnie, 716, Texas, USA), (29, 28550 Broderick Underpass Suite 667 Zakaryhaven, WY 22945-1534, Apt. 419, North Trystanborough, 112, Vermont, USA), CREATE TABLE `People` ( person_id INTEGER, first_name VARCHAR(255), middle_name VARCHAR(255), last_name VARCHAR(255), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), login_name VARCHAR(40), password VARCHAR(40) ); Sample rows from `People`: (111, Shannon, Elissa, Senger, 01955267735, javier.trantow@example.net, pgub, 5e4ff49a61b3544da3ad7dc7e2cf28847564c64c), (121, Virginie, Jasmin, Hartmann, (508)319-2970x043, boyer.lonie@example.com, bkkv, b063331ea8116befaa7b84c59c6a22200f5f8caa), (131, Dariana, Hayley, Bednar, (262)347-9364x516, leila14@example.net, zops, b20b6a9f24aadeda70d54e410c3219f61fb063fb), CREATE TABLE `Students` ( student_id INTEGER REFERENCES People(person_id), student_details VARCHAR(255) ); Sample rows from `Students`: (111, Marry), (121, Martin), (131, Barry), CREATE TABLE `Courses` ( course_id VARCHAR(100) PRIMARY KEY, course_name VARCHAR(120), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Courses`: (301, statistics, statistics, None), (302, English, English, None), (303, French, French, None), CREATE TABLE `People_Addresses` ( person_address_id INTEGER, person_id INTEGER REFERENCES People(person_id), address_id INTEGER REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `People_Addresses`: (122, 111, 9, 2012-09-26 13:21:00, 2018-03-21 09:46:30), (257, 121, 5, 2008-07-31 02:17:25, 2018-03-09 02:11:12), (269, 131, 88, 2008-05-26 20:43:41, 2018-03-11 20:26:41), CREATE TABLE `Student_Course_Registrations` ( student_id INTEGER PRIMARY KEY REFERENCES Students(student_id), course_id INTEGER PRIMARY KEY REFERENCES Courses(course_id), registration_date DATETIME ); Sample rows from `Student_Course_Registrations`: (111, 301, 2008-11-04 10:35:13), (121, 301, 2008-10-04 10:35:13), (121, 303, 2008-11-14 10:35:13), CREATE TABLE `Student_Course_Attendance` ( student_id INTEGER PRIMARY KEY REFERENCES Student_Course_Registrations(student_id), course_id INTEGER PRIMARY KEY REFERENCES Student_Course_Registrations(course_id), date_of_attendance DATETIME ); Sample rows from `Student_Course_Attendance`: (111, 301, 2008-11-04 10:35:13), (121, 301, 2012-04-09 11:44:34), (121, 303, 2014-04-09 11:44:34), CREATE TABLE `Candidates` ( candidate_id INTEGER REFERENCES People(person_id), candidate_details VARCHAR(255) ); Sample rows from `Candidates`: (111, Jane), (121, Robert), (131, Alex), CREATE TABLE `Candidate_Assessments` ( candidate_id INTEGER PRIMARY KEY REFERENCES Candidates(candidate_id), qualification CHAR(15) PRIMARY KEY, assessment_date DATETIME, asessment_outcome_code CHAR(15) ); Sample rows from `Candidate_Assessments`: (111, A, 2010-04-07 11:44:34, Pass), (121, B, 2010-04-17 11:44:34, Pass), (131, D, 2010-04-05 11:44:34, Fail), ",
        "output": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the days that had the smallest temperature range, and what was that range? ###filtered_database_schema: CREATE TABLE `station` ( id INTEGER, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT ); Sample rows from `station`: (2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013), (3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013), (4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013), CREATE TABLE `status` ( station_id INTEGER REFERENCES station(id), bikes_available INTEGER, docks_available INTEGER, time TEXT ); Sample rows from `status`: (3, 12, 3, 2015-06-02 12:46:02), (3, 12, 3, 2015-06-02 12:47:02), (3, 12, 3, 2015-06-02 12:48:02), CREATE TABLE `trip` ( id INTEGER, duration INTEGER, start_date TEXT, start_station_name TEXT, start_station_id INTEGER, end_date TEXT, end_station_name TEXT, end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER ); Sample rows from `trip`: (900504, 384, 8/21/2015 17:03, Howard at 2nd, 63, 8/21/2015 17:10, San Francisco Caltrain 2 (330 Townsend), 69, 454, Subscriber, 94041), (900505, 588, 8/21/2015 17:03, South Van Ness at Market, 66, 8/21/2015 17:13, San Francisco Caltrain 2 (330 Townsend), 69, 574, Subscriber, 95119), (900506, 196, 8/21/2015 17:04, Market at Sansome, 77, 8/21/2015 17:07, Harry Bridges Plaza (Ferry Building), 50, 636, Subscriber, 94925), CREATE TABLE `weather` ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER ); Sample rows from `weather`: (8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107), (8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107), (8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107), ",
        "output": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many students have advisors? ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT COUNT(DISTINCT s_id) FROM advisor"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\". ###filtered_database_schema: CREATE TABLE `Apartment_Buildings` ( building_id INTEGER PRIMARY KEY, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80) ); Sample rows from `Apartment_Buildings`: (133, Normandie Court, Normandie Court, Studio, 7950 Casper Vista Apt. 176 Marquiseberg, CA 70496, Emma, (948)040-1064x387), (153, Mercedes House, Mercedes House, Studio, 354 Otto Villages Charliefort, VT 71664, Brenden, 915-617-2408x832), (191, The Eugene, The Eugene, Flat, 71537 Gorczany Inlet Wisozkburgh, AL 08256, Melyssa, (609)946-0491), CREATE TABLE `Apartments` ( apt_id INTEGER PRIMARY KEY, building_id INTEGER REFERENCES Apartment_Buildings(building_id), apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5) ); Sample rows from `Apartments`: (1, 808, Flat, Suite 645, 1, 3, 7), (2, 624, Flat, Apt. 585, 2, 4, 5), (3, 225, Studio, Apt. 908, 1, 6, 7), CREATE TABLE `Apartment_Facilities` ( apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id), facility_code CHAR(15) PRIMARY KEY ); Sample rows from `Apartment_Facilities`: (1, Boardband), (2, Boardband), (3, Gym), CREATE TABLE `Guests` ( guest_id INTEGER PRIMARY KEY, gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME ); Sample rows from `Guests`: (1, Male, Kip, DuBuque, 1995-11-04 07:09:57), (2, Unknown, Rebeca, Runolfsdottir, 1974-05-12 21:53:58), (3, Female, Keon, Treutel, 1974-08-20 09:28:05), CREATE TABLE `Apartment_Bookings` ( apt_booking_id INTEGER PRIMARY KEY, apt_id INTEGER REFERENCES Apartments(apt_id), guest_id INTEGER REFERENCES Guests(guest_id), booking_status_code CHAR(15), booking_start_date DATETIME, booking_end_date DATETIME ); Sample rows from `Apartment_Bookings`: (258, 10, 2, Provisional, 2016-09-26 17:13:49, 2017-10-07 11:38:48), (279, 15, 15, Provisional, 2016-04-01 06:28:08, 2017-10-25 11:08:42), (337, 8, 5, Provisional, 2017-03-13 16:20:14, 2018-02-19 16:59:08), CREATE TABLE `View_Unit_Status` ( apt_id INTEGER REFERENCES Apartments(apt_id), apt_booking_id INTEGER REFERENCES Apartment_Bookings(apt_booking_id), status_date DATETIME PRIMARY KEY, available_yn BIT ); Sample rows from `View_Unit_Status`: (11, 920, 1970-09-28 10:24:29, 1), (15, 575, 1972-03-23 22:55:53, 1), (15, 924, 1973-10-28 04:30:14, 1), ",
        "output": "SELECT DISTINCT t2.apt_number FROM apartment_bookings as t1 JOIN apartments as t2 ON t1.apt_id  =  t2.apt_id WHERE t1.booking_status_code  =  \"Confirmed\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many sections does each course have? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT COUNT(*) ,  crs_code FROM class GROUP BY crs_code"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the phone, room, and building for the faculty named Jerry Prince. ###filtered_database_schema: CREATE TABLE `Activity` ( actid INTEGER, activity_name varchar(25) ); Sample rows from `Activity`: (770, Mountain Climbing), (771, Canoeing), (772, Kayaking), CREATE TABLE `Participates_in` ( stuid INTEGER REFERENCES Student(StuID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Participates_in`: (1001, 770), (1001, 771), (1001, 777), CREATE TABLE `Faculty_Participates_in` ( FacID INTEGER REFERENCES Faculty(FacID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Faculty_Participates_in`: (1082, 784), (1082, 785), (1082, 790), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), ",
        "output": "SELECT phone ,  room ,  building FROM faculty WHERE fname  =  \"Jerry\" AND lname  =  \"Prince\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many musicians play in the song \"Flash\"? ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT COUNT(*) FROM performance as t1 JOIN band as t2 ON t1.bandmate  =  t2.id JOIN songs as t3 ON t3.songid  =  t1.songid WHERE t3.title  =  \"Flash\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many students have a food allergy? ###filtered_database_schema: CREATE TABLE `Allergy_Type` ( Allergy VARCHAR(20) PRIMARY KEY, AllergyType VARCHAR(20) ); Sample rows from `Allergy_Type`: (Eggs, food), (Nuts, food), (Milk, food), CREATE TABLE `Has_Allergy` ( StuID INTEGER REFERENCES Student(StuID), Allergy VARCHAR(20) REFERENCES Allergy_Type(Allergy) ); Sample rows from `Has_Allergy`: (1001, Cat), (1002, Shellfish), (1002, Tree Pollen), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), ",
        "output": "SELECT COUNT(*) FROM has_allergy as t1 JOIN allergy_type as t2 ON t1.allergy  =  t2.allergy WHERE t2.allergytype  =  \"food\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the titles of the books whose writer is not \"Elaine Lee\"? ###filtered_database_schema: CREATE TABLE `publication` ( Publication_ID INT PRIMARY KEY, Book_ID INT REFERENCES book(Book_ID), Publisher TEXT, Publication_Date TEXT, Price REAL ); Sample rows from `publication`: (1, 1, Pearson, August 2008, 15000000.0), (2, 3, Thomson Reuters, March 2008, 6000000.0), (3, 4, Wiley, June 2006, 4100000.0), CREATE TABLE `book` ( Book_ID INT PRIMARY KEY, Title TEXT, Issues REAL, Writer TEXT ); Sample rows from `book`: (1, The Black Lamb, 6.0, Timothy Truman), (2, Bloody Mary, 4.0, Garth Ennis), (3, Bloody Mary : Lady Liberty, 4.0, Garth Ennis), ",
        "output": "SELECT title FROM book WHERE writer != \"Elaine Lee\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the id, name of each editor and the number of journal committees they are on. ###filtered_database_schema: CREATE TABLE `journal` ( Journal_ID INT PRIMARY KEY, Date TEXT, Theme TEXT, Sales INT ); Sample rows from `journal`: (1, September 9, 2001, Miami Dolphins, 798), (2, September 23, 2001, at Jacksonville Jaguars, 994), (4, October 7, 2001, at Baltimore Ravens, 7494), CREATE TABLE `editor` ( Editor_ID INT PRIMARY KEY, Name TEXT, Age REAL ); Sample rows from `editor`: (1, Kamila Porczyk, 34.0), (2, Anna Powierza, 35.0), (3, Marek Siudym, 21.0), CREATE TABLE `journal_committee` ( Editor_ID INT PRIMARY KEY REFERENCES editor(Editor_ID), Journal_ID INT PRIMARY KEY REFERENCES journal(Journal_ID), Work_Type TEXT ); Sample rows from `journal_committee`: (1, 13, Photo), (8, 17, Article), (6, 11, Photo), ",
        "output": "SELECT t1.editor_id ,  t1.name ,  COUNT(*) FROM editor as t1 JOIN journal_committee as t2 ON t1.editor_id  =  t2.editor_id GROUP BY t1.editor_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of students in each major. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT COUNT(*) ,  major FROM student GROUP BY major"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of rooms with price higher than 120 for different decor. ###filtered_database_schema: CREATE TABLE `Rooms` ( RoomId TEXT PRIMARY KEY, roomName TEXT, beds INTEGER, bedType TEXT, maxOccupancy INTEGER, basePrice INTEGER, decor TEXT ); Sample rows from `Rooms`: (RND, Recluse and defiance, 1, King, 2, 150, modern), (IBS, Interim but salutary, 1, King, 2, 150, traditional), (AOB, Abscond or bolster, 2, Queen, 4, 175, traditional), CREATE TABLE `Reservations` ( Code INTEGER, Room TEXT REFERENCES Rooms(RoomId), CheckIn TEXT, CheckOut TEXT, Rate REAL, LastName TEXT, FirstName TEXT, Adults INTEGER, Kids INTEGER ); Sample rows from `Reservations`: (10105, HBB, 23-OCT-10, 25-OCT-10, 100.0, SELBIG, CONRAD, 1, 0), (10183, IBD, 19-SEP-10, 20-SEP-10, 150.0, GABLER, DOLLIE, 2, 0), (10449, RND, 30-SEP-10, 01-OCT-10, 150.0, KLESS, NELSON, 1, 0), ",
        "output": "SELECT decor , COUNT(*) FROM rooms WHERE baseprice  >  120 GROUP BY decor;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For each country and airline name, how many routes are there? ###filtered_database_schema: CREATE TABLE `routes` ( rid INTEGER, dst_apid INTEGER REFERENCES airports(apid), dst_ap varchar(4), src_apid bigint REFERENCES airports(apid), src_ap varchar(4), alid bigint REFERENCES airlines(alid), airline varchar(4), codeshare TEXT ); Sample rows from `routes`: (37, 2990, KZ, 2965, AER, 410, 2B, None), (38, 2990, KZ, 2966, ASF, 410, 2B, None), (39, 2962, MRV, 2966, ASF, 410, 2B, None), CREATE TABLE `airports` ( apid INTEGER, name TEXT, city TEXT, country TEXT, x REAL, y REAL, elevation bigint, iata character varchar(3), icao character varchar(4) ); Sample rows from `airports`: (1, Goroka Airport, Goroka, Papua New Guinea, 145.391998291, -6.081689834590001, 5282, GKA, AYGA), (2, Madang Airport, Madang, Papua New Guinea, 145.789001465, -5.20707988739, 20, MAG, AYMD), (3, Mount Hagen Kagamuga Airport, Mount Hagen, Papua New Guinea, 144.29600524902344, -5.826789855957031, 5388, HGU, AYMH), CREATE TABLE `airlines` ( alid INTEGER, name TEXT, iata varchar(2), icao varchar(3), callsign TEXT, country TEXT, active varchar(2) ); Sample rows from `airlines`: (-1, Unknown, -, N/A, None, None, Y), (1, Private flight, -, N/A, , , Y), (2, 135 Airways, , GNL, GENERAL, United States, N), ",
        "output": "SELECT t1.country ,  t1.name ,  COUNT(*) FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t1.country ,  t1.name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the capital of the state texas ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT capital FROM state WHERE state_name  =  \"texas\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the name of pilots aged 25 or older? ###filtered_database_schema: CREATE TABLE `pilot` ( Pilot_Id int(11) PRIMARY KEY, Name varchar(50), Age int(11) ); Sample rows from `pilot`: (1, Prof. Zackery Collins, 23), (2, Katheryn Gorczany IV, 20), (3, Mr. Cristian Halvorson II, 23), CREATE TABLE `aircraft` ( Aircraft_ID int(11) PRIMARY KEY, Aircraft varchar(50), Description varchar(50), Max_Gross_Weight varchar(50), Total_disk_area varchar(50), Max_disk_Loading varchar(50) ); Sample rows from `aircraft`: (1, Robinson R-22, Light utility helicopter, 1,370 lb (635 kg), 497 ft² (46.2 m²), 2.6 lb/ft² (14 kg/m²)), (2, Bell 206B3 JetRanger, Turboshaft utility helicopter, 3,200 lb (1,451 kg), 872 ft² (81.1 m²), 3.7 lb/ft² (18 kg/m²)), (3, CH-47D Chinook, Tandem rotor helicopter, 50,000 lb (22,680 kg), 5,655 ft² (526 m²), 8.8 lb/ft² (43 kg/m²)), CREATE TABLE `match` ( Round REAL PRIMARY KEY, Location TEXT, Country TEXT, Date TEXT, Fastest_Qualifying TEXT, Winning_Pilot TEXT REFERENCES pilot(Pilot_Id), Winning_Aircraft TEXT REFERENCES aircraft(Aircraft_ID) ); Sample rows from `match`: (1.0, Mina' Zayid , Abu Dhabi, United Arab Emirates, March 26–27, Hannes Arch, 1, 1), (2.0, Swan River , Perth, Australia, April 17–18, Paul Bonhomme, 4, 1), (3.0, Flamengo Beach , Rio de Janeiro, Brazil, May 8–9, Hannes Arch, 6, 2), CREATE TABLE `airport` ( Airport_ID INT PRIMARY KEY, Airport_Name TEXT, Total_Passengers REAL, %_Change_2007 TEXT, International_Passengers REAL, Domestic_Passengers REAL, Transit_Passengers REAL, Aircraft_Movements REAL, Freight_Metric_Tonnes REAL ); Sample rows from `airport`: (1, London Heathrow, 67054745.0, 1.5%, 61344438.0, 5562516.0, 147791.0, 478693.0, 1397054.0), (2, London Gatwick, 34205887.0, 2.9%, 30431051.0, 3730963.0, 43873.0, 263653.0, 107702.0), (3, London Stansted, 22360364.0, 6.0%, 19996947.0, 2343428.0, 19989.0, 193282.0, 197738.0), CREATE TABLE `airport_aircraft` ( ID INT, Airport_ID INT PRIMARY KEY REFERENCES airport(Airport_ID), Aircraft_ID INT PRIMARY KEY REFERENCES aircraft(Aircraft_ID) ); Sample rows from `airport_aircraft`: (1, 6, 5), (2, 2, 1), (3, 1, 2), ",
        "output": "SELECT name FROM pilot WHERE age  >=  25"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the titles of the papers that contain the word \"ML\". ###filtered_database_schema: CREATE TABLE `Inst` ( instID INTEGER, name TEXT, country TEXT ); Sample rows from `Inst`: (1000, University of Oxford, UK), (1010, Northeastern University, USA), (1020, Indiana University, USA), CREATE TABLE `Authors` ( authID INTEGER, lname TEXT, fname TEXT ); Sample rows from `Authors`: (50, Gibbons, Jeremy), (51, Hinze, Ralf), (52, James, Daniel W. H.), CREATE TABLE `Papers` ( paperID INTEGER, title TEXT ); Sample rows from `Papers`: (200, Just do it: Simple Monadic Equational Reasoning), (201, Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory), (202, Functional Pearl: Modular Rollback through Control Logging), CREATE TABLE `Authorship` ( authID INTEGER PRIMARY KEY REFERENCES Authors(authID), instID INTEGER PRIMARY KEY REFERENCES Inst(instID), paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID), authOrder INTEGER ); Sample rows from `Authorship`: (50, 1000, 200, 1), (51, 1000, 200, 2), (51, 1000, 201, 1), ",
        "output": "SELECT title FROM papers WHERE title LIKE \"%ML%\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the component amounts and names of all furnitures that have more than 10 components. ###filtered_database_schema: CREATE TABLE `manufacturer` ( Manufacturer_ID INT PRIMARY KEY, Open_Year REAL, Name TEXT, Num_of_Factories INT, Num_of_Shops INT ); Sample rows from `manufacturer`: (1, 1980.0, Chevrolet House, 36, 8), (2, 1990.0, IKEA, 21, 19), (3, 1991.0, Ford Make, 12, 2), CREATE TABLE `furniture` ( Furniture_ID INT PRIMARY KEY, Name TEXT, Num_of_Component INT, Market_Rate REAL ); Sample rows from `furniture`: (1, Billiard table, 14, 52.5), (2, Chabudai, 4, 40.0), (3, Bookcase, 6, 1.0), CREATE TABLE `furniture_manufacte` ( Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID), Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID), Price_in_Dollar REAL ); Sample rows from `furniture_manufacte`: (1, 3, 239.0), (4, 2, 450.0), (7, 7, 2124.0), ",
        "output": "SELECT num_of_component ,  name FROM furniture WHERE num_of_component  >  10"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the different statuses and the numbers of roller coasters for each status. ###filtered_database_schema: CREATE TABLE `roller_coaster` ( Roller_Coaster_ID INT PRIMARY KEY, Name TEXT, Park TEXT, Country_ID INT REFERENCES country(Country_ID), Length REAL, Height REAL, Speed TEXT, Opened TEXT, Status TEXT ); Sample rows from `roller_coaster`: (1, Boardwalk Bullet, Kemah Boardwalk, 1, 3236.0, 96.0, 51, August 31, 2007, Operating), (2, Dauling Dragon, Happy Valley, 1, 3914.0, 105.0, 55, 2012, Operating), (3, Hades 360, Mt. Olympus, 1, 4726.0, 136.0, 70, May 14, 2005, Operating), CREATE TABLE `country` ( Country_ID INT PRIMARY KEY, Name TEXT, Population INT, Area INT, Languages TEXT ); Sample rows from `country`: (1, Austria, 8206524, 83871, German), (2, Finland, 5261008, 338145, Finnish Swedish), (3, Sweden, 9047752, 449964, Swedish), ",
        "output": "SELECT status ,  COUNT(*) FROM roller_coaster GROUP BY status"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is a good restaurant in the bay area ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT t2.house_number  ,  t1.name FROM location as t2 JOIN restaurant as t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what are the details of the cmi masters that have the cross reference code 'Tax'? ###filtered_database_schema: CREATE TABLE `Customer_Master_Index` ( master_customer_id INTEGER, cmi_details VARCHAR(255) ); Sample rows from `Customer_Master_Index`: (1, Schmitt-Lang), (2, Volkman, Mills and Ferry), (3, Gusikowski PLC), CREATE TABLE `CMI_Cross_References` ( cmi_cross_ref_id INTEGER, master_customer_id INTEGER REFERENCES Customer_Master_Index(master_customer_id), source_system_code CHAR(15) ); Sample rows from `CMI_Cross_References`: (2, 4, Rent), (4, 5, Parking), (8, 1, Rent), CREATE TABLE `Council_Tax` ( council_tax_id INTEGER, cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id) ); Sample rows from `Council_Tax`: (1, 101), (2, 103), (3, 104), CREATE TABLE `Business_Rates` ( business_rates_id INTEGER, cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id) ); Sample rows from `Business_Rates`: (2, 99), (5, 49), (8, 95), CREATE TABLE `Benefits_Overpayments` ( council_tax_id INTEGER, cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id) ); Sample rows from `Benefits_Overpayments`: (3, 65), (6, 41), (7, 83), CREATE TABLE `Parking_Fines` ( council_tax_id INTEGER, cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id) ); Sample rows from `Parking_Fines`: (9, 4), (10, 81), CREATE TABLE `Rent_Arrears` ( council_tax_id INTEGER, cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id) ); Sample rows from `Rent_Arrears`: (1, 100), (2, 8), (6, 59), CREATE TABLE `Electoral_Register` ( electoral_register_id INTEGER, cmi_cross_ref_id INTEGER REFERENCES CMI_Cross_References(cmi_cross_ref_id) ); Sample rows from `Electoral_Register`: (2, 83), (3, 65), (4, 100), ",
        "output": "SELECT t1.cmi_details FROM customer_master_index as t1 JOIN cmi_cross_references as t2 ON t1.master_customer_id  =  t2.master_customer_id WHERE t2.source_system_code  =  'Tax'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the name and prominence of the mountains whose picture is not taken by a lens of brand 'Sigma'. ###filtered_database_schema: CREATE TABLE `mountain` ( id INT PRIMARY KEY, name TEXT, Height REAL, Prominence REAL, Range TEXT, Country TEXT ); Sample rows from `mountain`: (1, Abune Yosef / Guliba Amba, 4260.0, 1909.0, Lasta Massif, Ethiopia), (2, Ioll / Yoll, 4220.0, 350.0, Kollo Massif, Ethiopia), (3, Bada, 4195.0, 1605.0, Arsi Mountains, Ethiopia), CREATE TABLE `camera_lens` ( id INT PRIMARY KEY, brand TEXT, name TEXT, focal_length_mm REAL, max_aperture REAL ); Sample rows from `camera_lens`: (1, Olympus, Olympus 15mm f/8.0 Body Cap, 15.0, 8.0), (2, Olympus, Olympus M.Zuiko Digital ED 45mm f/1.8, 45.0, 1.8), (3, Olympus, Olympus M.Zuiko Digital ED 75mm f/1.8, 75.0, 1.8), CREATE TABLE `photos` ( id INT PRIMARY KEY, camera_lens_id INT REFERENCES camera_lens(id), mountain_id INT REFERENCES mountain(id), color TEXT, name TEXT ); Sample rows from `photos`: (1, 1, 20, RBG, monkey), (2, 10, 2, RBG, rabbits), (3, 10, 1, Black/White, deers), ",
        "output": "SELECT name ,  prominence FROM mountain EXCEPT SELECT t1.name ,  t1.prominence FROM mountain as t1 JOIN photos as t2 ON t1.id  =  t2.mountain_id JOIN camera_lens as t3 ON t2.camera_lens_id  =  t3.id WHERE t3.brand  =  'Sigma'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the height of mount mckinley ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT mountain_altitude FROM mountain WHERE mountain_name  =  \"mckinley\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the product type and name for the products with price higher than 1000 or lower than 500. ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 4315 Kerluke Canyon Apt. 800, Hertafurt, 740, Nevada, USA), (2, 319 Kozey Highway Suite 973, Edgardoberg, 282, Colorado, USA), (3, 592 Frederique Ridge, Gilbertmouth, 167, Virginia, USA), CREATE TABLE `Products` ( product_id INTEGER, product_type_code VARCHAR(15), product_name VARCHAR(80), product_price DOUBLE ); Sample rows from `Products`: (1, Hardware, Apple, 54753982.574522), (2, Clothes, jcrew, 30590929.528306), (3, Hardware, Apple, 10268.85297069), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method_code VARCHAR(15), customer_number VARCHAR(20), customer_name VARCHAR(80), customer_address VARCHAR(255), customer_phone VARCHAR(80), customer_email VARCHAR(80) ); Sample rows from `Customers`: (1, Credit Card, 456, Kayley, 636 Chanelle Isle Apt. 846, +87(9)5279161988, antonette73@example.com), (2, Credit Card, 553, Sterling, 12174 Boyer Crossroad, 896.685.8228x2786, stroman.chadd@example.net), (3, Credit Card, 951, Buford, 650 Spencer Way Apt. 584, (192)144-4687, pattie.mayer@example.net), CREATE TABLE `Contacts` ( contact_id INTEGER, customer_id INTEGER, gender VARCHAR(1), first_name VARCHAR(80), last_name VARCHAR(50), contact_phone VARCHAR(80) ); Sample rows from `Contacts`: (1, 4, male, Cierra, Collins, +73(2)0854391820), (2, 6, male, Jennifer, Doyle, 482-949-1364x17500), (3, 8, female, Carli, Blick, (608)868-5069x554), CREATE TABLE `Customer_Address_History` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Customer_Address_History`: (12, 7, 2015-07-23 14:37:18, 2018-03-07 12:04:20), (12, 2, 2016-11-06 14:33:12, 2018-03-14 21:36:28), (3, 9, 2011-11-19 12:17:36, 2018-03-22 10:20:16), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_date DATETIME, order_status_code VARCHAR(15) ); Sample rows from `Customer_Orders`: (1, 2, 2009-07-19 13:40:49, Completed), (2, 2, 1976-05-28 15:02:44, Part), (3, 6, 1979-03-29 02:47:13, Completed), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), order_quantity VARCHAR(80) ); Sample rows from `Order_Items`: (1, 9, 15, 3), (2, 8, 12, 7), (3, 11, 9, 9), ",
        "output": "SELECT product_type_code ,  product_name FROM products WHERE product_price  >  1000 OR product_price  <  500"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many stadiums are not in country \"Russia\"? ###filtered_database_schema: CREATE TABLE `swimmer` ( ID INT PRIMARY KEY, name TEXT, Nationality TEXT, meter_100 REAL, meter_200 TEXT, meter_300 TEXT, meter_400 TEXT, meter_500 TEXT, meter_600 TEXT, meter_700 TEXT, Time TEXT ); Sample rows from `swimmer`: (7, Przemysław Stańczyk, Poland, 57.31, 1:57.10, 2:56.02, 3:55.36, 4:54.21, 5:52.59, 6:50.91, 7:47.91), (4, Craig Stevens, Australia, 57.35, 1:56.34, 2:55.90, 3:55.72, 4:55.08, 5:54.45, 6:52.69, 7:48.67), (5, Federico Colbertaldo, Italy, 57.66, 1:56.77, 2:56.04, 3:55.37, 4:54.48, 5:53.53, 6:52.58, 7:49.98), CREATE TABLE `stadium` ( ID INT PRIMARY KEY, name TEXT, Capacity INT, City TEXT, Country TEXT, Opening_year INT ); Sample rows from `stadium`: (1, Nou Mestalla, 75000, Valencia, Spain, 2004), (2, Gazprom Arena, 69501, Saint Petersburg, Russia, 2005), (3, Baku Olympic Stadium, 68000, Baku, Azerbaijan, 2005), CREATE TABLE `event` ( ID INT PRIMARY KEY, Name TEXT, Stadium_ID INT REFERENCES stadium(ID), Year TEXT ); Sample rows from `event`: (1, FINA, 1, 2016), (2, Pacific, 10, 2011), (3, World Master, 2, 2012), CREATE TABLE `record` ( ID INT, Result TEXT, Swimmer_ID INT PRIMARY KEY REFERENCES swimmer(ID), Event_ID INT PRIMARY KEY REFERENCES event(ID) ); Sample rows from `record`: (1, NC, 1, 1), (2, Win, 1, 2), (3, Loss, 3, 3), ",
        "output": "SELECT COUNT(*) FROM stadium WHERE country != 'Russia'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\". ###filtered_database_schema: CREATE TABLE `swimmer` ( ID INT PRIMARY KEY, name TEXT, Nationality TEXT, meter_100 REAL, meter_200 TEXT, meter_300 TEXT, meter_400 TEXT, meter_500 TEXT, meter_600 TEXT, meter_700 TEXT, Time TEXT ); Sample rows from `swimmer`: (7, Przemysław Stańczyk, Poland, 57.31, 1:57.10, 2:56.02, 3:55.36, 4:54.21, 5:52.59, 6:50.91, 7:47.91), (4, Craig Stevens, Australia, 57.35, 1:56.34, 2:55.90, 3:55.72, 4:55.08, 5:54.45, 6:52.69, 7:48.67), (5, Federico Colbertaldo, Italy, 57.66, 1:56.77, 2:56.04, 3:55.37, 4:54.48, 5:53.53, 6:52.58, 7:49.98), CREATE TABLE `stadium` ( ID INT PRIMARY KEY, name TEXT, Capacity INT, City TEXT, Country TEXT, Opening_year INT ); Sample rows from `stadium`: (1, Nou Mestalla, 75000, Valencia, Spain, 2004), (2, Gazprom Arena, 69501, Saint Petersburg, Russia, 2005), (3, Baku Olympic Stadium, 68000, Baku, Azerbaijan, 2005), CREATE TABLE `event` ( ID INT PRIMARY KEY, Name TEXT, Stadium_ID INT REFERENCES stadium(ID), Year TEXT ); Sample rows from `event`: (1, FINA, 1, 2016), (2, Pacific, 10, 2011), (3, World Master, 2, 2012), CREATE TABLE `record` ( ID INT, Result TEXT, Swimmer_ID INT PRIMARY KEY REFERENCES swimmer(ID), Event_ID INT PRIMARY KEY REFERENCES event(ID) ); Sample rows from `record`: (1, NC, 1, 1), (2, Win, 1, 2), (3, Loss, 3, 3), ",
        "output": "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many document types are there? ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CV, CV, ), (BK, Book, ), (PR, Paper, ), CREATE TABLE `Ref_Calendar` ( Calendar_Date DATETIME PRIMARY KEY, Day_Number INTEGER ); Sample rows from `Ref_Calendar`: (1972-03-31 09:47:22, 5), (1976-06-15 03:40:06, 7), (1985-05-13 12:19:43, 7), CREATE TABLE `Ref_Locations` ( Location_Code CHAR(15) PRIMARY KEY, Location_Name VARCHAR(255), Location_Description VARCHAR(255) ); Sample rows from `Ref_Locations`: (b, Brazil, ), (c, Canada, ), (e, Edinburgh, ), CREATE TABLE `Roles` ( Role_Code CHAR(15) PRIMARY KEY, Role_Name VARCHAR(255), Role_Description VARCHAR(255) ); Sample rows from `Roles`: (MG, Manager, Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti.), (ED, Editor, Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos.), (PT, Photo, Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt.), CREATE TABLE `All_Documents` ( Document_ID INTEGER, Date_Stored DATETIME REFERENCES Ref_Calendar(Calendar_Date), Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255) ); Sample rows from `All_Documents`: (7, 1976-06-15 03:40:06, CV, Robin CV, None, None), (11, 1986-10-14 17:53:39, CV, Marry CV, None, None), (25, 2008-06-08 12:45:38, BK, One hundred years of solitude, None, None), CREATE TABLE `Employees` ( Employee_ID INTEGER, Role_Code CHAR(15) REFERENCES Roles(Role_Code), Employee_Name VARCHAR(255), Gender_MFU CHAR(1), Date_of_Birth DATETIME, Other_Details VARCHAR(255) ); Sample rows from `Employees`: (25, HR, Leo, , 1973-02-15 17:16:00, None), (30, MG, Ebba, , 1979-09-20 12:50:15, None), (38, ED, Stephanie, 1, 2012-03-30 23:02:28, None), CREATE TABLE `Document_Locations` ( Document_ID INTEGER PRIMARY KEY REFERENCES All_Documents(Document_ID), Location_Code CHAR(15) PRIMARY KEY REFERENCES Ref_Locations(Location_Code), Date_in_Location_From DATETIME PRIMARY KEY REFERENCES Ref_Calendar(Calendar_Date), Date_in_Locaton_To DATETIME REFERENCES Ref_Calendar(Calendar_Date) ); Sample rows from `Document_Locations`: (7, e, 2017-01-06 23:17:22, 2008-06-08 12:45:38), (11, x, 2017-01-06 23:17:22, 2012-07-03 09:48:46), (81, c, 1972-03-31 09:47:22, 1987-11-05 06:11:22), CREATE TABLE `Documents_to_be_Destroyed` ( Document_ID INTEGER REFERENCES All_Documents(Document_ID), Destruction_Authorised_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Destroyed_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Planned_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Actual_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Other_Details VARCHAR(255) ); Sample rows from `Documents_to_be_Destroyed`: (7, 156, 138, 1988-02-01 14:41:52, 2017-01-06 23:17:22, None), (11, 55, 173, 2010-11-26 19:22:50, 1986-10-14 17:53:39, None), (25, 183, 156, 2009-08-18 03:29:08, 1995-01-01 03:52:11, None), ",
        "output": "SELECT COUNT(*) FROM ref_document_types"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the id and local authority of the station whose maximum precipitation is higher than 50. ###filtered_database_schema: CREATE TABLE `train` ( id INT PRIMARY KEY, train_number INT, name TEXT, origin TEXT, destination TEXT, time TEXT, interval TEXT ); Sample rows from `train`: (1, 16724, Ananthapuri Express, Trivandrum, Chennai, 17:15, Daily), (2, 16127, Guruvayur Express, Chennai, Guruvayur, 22:10, Daily), (3, 16128, Guruvayur Express, Guruvayur, Chennai, 4:49, Daily), CREATE TABLE `station` ( id INT PRIMARY KEY, network_name TEXT, services TEXT, local_authority TEXT ); Sample rows from `station`: (1, Amersham, Metropolitan line and Chiltern Railways, Chiltern), (2, Bushey, London Overground and London Midland, Watford), (3, Brentwood, Greater Anglia, Brentwood), CREATE TABLE `route` ( train_id INT PRIMARY KEY REFERENCES train(id), station_id INT PRIMARY KEY REFERENCES station(id) ); Sample rows from `route`: (1, 1), (1, 2), (1, 3), CREATE TABLE `weekly_weather` ( station_id INT PRIMARY KEY REFERENCES station(id), day_of_week TEXT PRIMARY KEY, high_temperature INT, low_temperature INT, precipitation REAL, wind_speed_mph INT ); Sample rows from `weekly_weather`: (1, Monday, 59, 54, 90.0, 13), (1, Tuesday, 66, 55, 20.0, 12), (1, Wednesday, 60, 52, 10.0, 14), ",
        "output": "SELECT t2.id ,  t2.local_authority FROM weekly_weather as t1 JOIN station as t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING MAX(t1.precipitation)  >  50"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the most common nationality of hosts. ###filtered_database_schema: CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Party_Theme TEXT, Location TEXT, First_year TEXT, Last_year TEXT, Number_of_hosts INT ); Sample rows from `party`: (1, Spring, Hemkade 48 Zaandam, 2000, 2001, 5), (2, Club Q-BASE, Hemkade 48 Zaandam, 2002, 2002, 23), (3, Hardcore Resurrection, Various locations, 2000, 2003, 4), CREATE TABLE `host` ( Host_ID INT PRIMARY KEY, Name TEXT, Nationality TEXT, Age TEXT ); Sample rows from `host`: (1, Austin Daye, United States, 43), (2, Lloyd Daniels, United States, 37), (3, Kornel David, Hungary, 31), CREATE TABLE `party_host` ( Party_ID INT PRIMARY KEY REFERENCES party(Party_ID), Host_ID INT PRIMARY KEY REFERENCES host(Host_ID), Is_Main_in_Charge bool ); Sample rows from `party_host`: (1, 1, T), (8, 7, T), (6, 10, F), ",
        "output": "SELECT nationality FROM host GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show different types of ships and the average tonnage of ships of each type. ###filtered_database_schema: CREATE TABLE `mission` ( Mission_ID INT PRIMARY KEY, Ship_ID INT REFERENCES ship(Ship_ID), Code TEXT, Launched_Year INT, Location TEXT, Speed_knots INT, Fate TEXT ); Sample rows from `mission`: (1, 1, VMV-1, 1930, Germany, 25, Decommissioned 1950), (2, 2, VMV-2, 1930, Germany, 25, Decommissioned 1950), (3, 3, VMV-3, 1930, Helsinki , Finland, 23, Lost (burned) 1931), CREATE TABLE `ship` ( Ship_ID INT PRIMARY KEY, Name TEXT, Type TEXT, Nationality TEXT, Tonnage INT ); Sample rows from `ship`: (1, Corbridge, Cargo ship, United Kingdom, 3687), (2, Farringford, Battle ship, United States, 3146), (3, Dromonby, Cargo ship, United Kingdom, 3627), ",
        "output": "SELECT type ,  AVG(tonnage) FROM ship GROUP BY type"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the biggest city in the usa ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name and distance for the aircraft that has an id of 12? ###filtered_database_schema: CREATE TABLE `flight` ( flno number(4,0) PRIMARY KEY, origin varchar2(20), destination varchar2(20), distance number(6,0), departure_date date, arrival_date date, price number(7,2), aid number(9,0) REFERENCES aircraft(aid) ); Sample rows from `flight`: (99, Los Angeles, Washington D.C., 2308, 04/12/2005 09:30, 04/12/2005 09:40, 235.98, 1), (13, Los Angeles, Chicago, 1749, 04/12/2005 08:45, 04/12/2005 08:45, 220.98, 3), (346, Los Angeles, Dallas, 1251, 04/12/2005 11:50, 04/12/2005 07:05, 182, 2), CREATE TABLE `aircraft` ( aid number(9,0) PRIMARY KEY, name varchar2(30), distance number(6,0) ); Sample rows from `aircraft`: (1, Boeing 747-400, 8430), (2, Boeing 737-800, 3383), (3, Airbus A340-300, 7120), CREATE TABLE `employee` ( eid number(9,0) PRIMARY KEY, name varchar2(30), salary number(10,2) ); Sample rows from `employee`: (242518965, James Smith, 120433), (141582651, Mary Johnson, 178345), (11564812, John Williams, 153972), CREATE TABLE `certificate` ( eid number(9,0) PRIMARY KEY REFERENCES employee(eid), aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid) ); Sample rows from `certificate`: (11564812, 2), (11564812, 10), (90873519, 6), ",
        "output": "SELECT name ,  distance FROM aircraft WHERE aid  =  12"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names and revenues of the companies with the highest revenues in each headquarter city? ###filtered_database_schema: CREATE TABLE `Manufacturers` ( Code INTEGER, Name VARCHAR(255), Headquarter VARCHAR(255), Founder VARCHAR(255), Revenue REAL ); Sample rows from `Manufacturers`: (1, Sony, Tokyo, Andy, 120.0), (2, Creative Labs, Austin, Owen, 100.0), (3, Hewlett-Packard, Los Angeles, James, 50.0), CREATE TABLE `Products` ( Code INTEGER, Name VARCHAR(255), Price DECIMAL, Manufacturer INTEGER REFERENCES Manufacturers(Code) ); Sample rows from `Products`: (1, Hard drive, 240, 5), (2, Memory, 120, 6), (3, ZIP drive, 150, 4), ",
        "output": "SELECT name ,  MAX(revenue) ,  headquarter FROM manufacturers GROUP BY headquarter"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the total number of professors with a Ph.D. ? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT COUNT(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the average number of factories and maximum number of shops for manufacturers that opened before 1990. ###filtered_database_schema: CREATE TABLE `manufacturer` ( Manufacturer_ID INT PRIMARY KEY, Open_Year REAL, Name TEXT, Num_of_Factories INT, Num_of_Shops INT ); Sample rows from `manufacturer`: (1, 1980.0, Chevrolet House, 36, 8), (2, 1990.0, IKEA, 21, 19), (3, 1991.0, Ford Make, 12, 2), CREATE TABLE `furniture` ( Furniture_ID INT PRIMARY KEY, Name TEXT, Num_of_Component INT, Market_Rate REAL ); Sample rows from `furniture`: (1, Billiard table, 14, 52.5), (2, Chabudai, 4, 40.0), (3, Bookcase, 6, 1.0), CREATE TABLE `furniture_manufacte` ( Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID), Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID), Price_in_Dollar REAL ); Sample rows from `furniture_manufacte`: (1, 3, 239.0), (4, 2, 450.0), (7, 7, 2124.0), ",
        "output": "SELECT MAX(num_of_shops) ,  AVG(num_of_factories) FROM manufacturer WHERE open_year  <  1990"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many schools have some students playing in goalie and mid positions. ###filtered_database_schema: CREATE TABLE `College` ( cName varchar(20) PRIMARY KEY, state varchar(2), enr numeric(5,0) ); Sample rows from `College`: (LSU, LA, 18000), (ASU, AZ, 12000), (OU, OK, 22000), CREATE TABLE `Player` ( pID numeric(5,0) PRIMARY KEY, pName varchar(20), yCard varchar(3), HS numeric(5,0) ); Sample rows from `Player`: (10001, Andrew, no, 1200), (20002, Blake, no, 1600), (30003, Charles, no, 300), CREATE TABLE `Tryout` ( pID numeric(5,0) PRIMARY KEY REFERENCES Player(pID), cName varchar(20) PRIMARY KEY REFERENCES College(cName), pPos varchar(8), decision varchar(3) ); Sample rows from `Tryout`: (10001, LSU, goalie, no), (10001, ASU, goalie, yes), (20002, FSU, striker, yes), ",
        "output": "SELECT COUNT(*) FROM (SELECT cname FROM  tryout WHERE ppos  =  'goalie' INTERSECT SELECT cname FROM  tryout WHERE ppos  =  'mid')"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of products whose availability equals to 1? ###filtered_database_schema: CREATE TABLE `Discount_Coupons` ( coupon_id INTEGER, date_issued DATETIME, coupon_amount DECIMAL(19,4) ); Sample rows from `Discount_Coupons`: (1, 2017-09-06 01:33:27, 500), (2, 2018-02-20 09:40:56, 686.25), (3, 2017-09-17 23:31:36, 501.3), CREATE TABLE `Customers` ( customer_id INTEGER, coupon_id INTEGER REFERENCES Discount_Coupons(coupon_id), good_or_bad_customer VARCHAR(4), first_name VARCHAR(80), last_name VARCHAR(80), gender_mf VARCHAR(1), date_became_customer DATETIME, date_last_hire DATETIME ); Sample rows from `Customers`: (1, 12, good, Geovany, Homenick, 0, 2017-10-20 12:13:17, 2018-02-27 18:55:26), (2, 14, good, Jailyn, Gerlach, 0, 2015-04-06 21:18:37, 2018-01-30 04:47:13), (3, 7, good, Rosalee, Kessler, 0, 2016-02-03 16:58:11, 2018-03-04 21:30:23), CREATE TABLE `Bookings` ( booking_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), booking_status_code VARCHAR(10), returned_damaged_yn VARCHAR(40), booking_start_date DATETIME, booking_end_date DATETIME, count_hired VARCHAR(40), amount_payable DECIMAL(19,4), amount_of_discount DECIMAL(19,4), amount_outstanding DECIMAL(19,4), amount_of_refund DECIMAL(19,4) ); Sample rows from `Bookings`: (1, 7, Provisional, 1, 2016-12-07 23:39:17, 2018-02-01 16:39:13, 298, 214.39, 71.45, 28.22, 179.14), (2, 15, Confirmed, 1, 2017-06-16 11:42:31, 2018-02-19 21:53:31, 331, 386.92, 83.82, 57.62, 183.68), (3, 3, Confirmed, 1, 2017-04-04 11:02:43, 2018-02-01 09:30:50, 729, 351.32, 49.26, 66.01, 135.94), CREATE TABLE `Products_for_Hire` ( product_id INTEGER, product_type_code VARCHAR(15), daily_hire_cost DECIMAL(19,4), product_name VARCHAR(80), product_description VARCHAR(255) ); Sample rows from `Products_for_Hire`: (1, Cutlery, 26.15, Book collection C, Anna Karenina), (2, Cutlery, 15.62, Book collection B, War and Peace), (3, Cutlery, 39.73, Book collection A, The Great Gatsby), CREATE TABLE `Payments` ( payment_id INTEGER, booking_id INTEGER REFERENCES Bookings(booking_id), customer_id INTEGER REFERENCES Customers(customer_id), payment_type_code VARCHAR(15), amount_paid_in_full_yn VARCHAR(1), payment_date DATETIME, amount_due DECIMAL(19,4), amount_paid DECIMAL(19,4) ); Sample rows from `Payments`: (1, 6, 15, Check, 1, 2018-03-09 16:28:00, 369.52, 206.27), (2, 9, 12, Cash, 1, 2018-03-03 13:39:44, 278.6, 666.45), (3, 5, 7, Credit Card, 0, 2018-03-22 15:00:23, 840.06, 135.7), CREATE TABLE `Products_Booked` ( booking_id INTEGER PRIMARY KEY REFERENCES Bookings(booking_id), product_id INTEGER PRIMARY KEY REFERENCES Products_for_Hire(product_id), returned_yn VARCHAR(1), returned_late_yn VARCHAR(1), booked_count INTEGER, booked_amount FLOAT ); Sample rows from `Products_Booked`: (4, 1, 1, 1, 5, 309.73), (14, 1, 1, 0, 3, 102.76), (13, 3, 1, 0, 4, 151.68), CREATE TABLE `View_Product_Availability` ( product_id INTEGER REFERENCES Products_for_Hire(product_id), booking_id INTEGER REFERENCES Bookings(booking_id), status_date DATETIME PRIMARY KEY, available_yn VARCHAR(1) ); Sample rows from `View_Product_Availability`: (1, 5, 2018-03-18 05:25:55, 1), (2, 5, 2018-03-21 15:20:32, 0), (3, 11, 2018-03-25 10:20:15, 1), ",
        "output": "SELECT t2.product_name FROM view_product_availability as t1 JOIN products_for_hire as t2 ON t1.product_id  =  t2.product_id WHERE t1.available_yn  =  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which minister left office the latest? ###filtered_database_schema: CREATE TABLE `region` ( Region_ID INT PRIMARY KEY, Region_name TEXT, Date TEXT, Label TEXT, Format TEXT, Catalogue TEXT ); Sample rows from `region`: (1, United Kingdom, 1 July 2002, Parlophone, CD, 540 3622), (2, United Kingdom, 1 July 2002, Parlophone, 2× LP, 539 9821), (3, Japan, 3 July 2002, Toshiba-EMI, CD, TOCP-66045), CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Minister TEXT, Took_office TEXT, Left_office TEXT, Region_ID INT REFERENCES region(Region_ID), Party_name TEXT ); Sample rows from `party`: (1, Dr. Kwame Nkrumah (MP), 1957, 1958, 1, Convention Peoples Party), (2, Kojo Botsio (MP), 1958, 1959, 2, Progress Party), (3, Ebenezer Ako-Adjei (MP), 1959, 1960, 3, 3), CREATE TABLE `member` ( Member_ID INT PRIMARY KEY, Member_Name TEXT, Party_ID TEXT REFERENCES party(Party_ID), In_office TEXT ); Sample rows from `member`: (1, Hon Tony Abbott, 3, 1994–present), (2, Hon Dick Adams, 2, 1993–2013), (3, Anthony Albanese, 2, 1996–present), CREATE TABLE `party_events` ( Event_ID INT PRIMARY KEY, Event_Name TEXT, Party_ID INT REFERENCES party(Party_ID), Member_in_charge_ID INT REFERENCES member(Member_ID) ); Sample rows from `party_events`: (1, Annaual Meeting, 1, 4), (2, Conference, 1, 12), (3, Annaual Meeting, 2, 2), ",
        "output": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the names of buildings in descending order of building height. ###filtered_database_schema: CREATE TABLE `buildings` ( id INT PRIMARY KEY, name TEXT, City TEXT, Height INT, Stories INT, Status TEXT ); Sample rows from `buildings`: (1, Torre KOI, Monterrey, 220, 67, under construction), (2, Torre Mitikah, Mexico City, 210, 60, under construction), (3, Punto Chapultepec, Mexico City, 210, 59, proposed), CREATE TABLE `Companies` ( id INT PRIMARY KEY, name TEXT, Headquarters TEXT, Industry TEXT, Sales_billion REAL, Profits_billion REAL, Assets_billion REAL, Market_Value_billion TEXT ); Sample rows from `Companies`: (1, JPMorgan Chase, USA, Banking, 115.5, 17.4, 2117.6, 182.2), (2, HSBC, UK, Banking, 103.3, 13.3, 2467.9, 186.5), (3, General Electric, USA, Conglomerate, 156.2, 11.6, 751.2, 216.2), CREATE TABLE `Office_locations` ( building_id INT PRIMARY KEY REFERENCES buildings(id), company_id INT PRIMARY KEY REFERENCES Companies(id), move_in_year INT ); Sample rows from `Office_locations`: (1, 1, 2021), (2, 2, 2022), (3, 4, 2023), ",
        "output": "SELECT name FROM buildings ORDER BY height DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many reviewers are there? ###filtered_database_schema: CREATE TABLE `Movie` ( mID INT PRIMARY KEY, title TEXT, year INT, director TEXT ); Sample rows from `Movie`: (101, Gone with the Wind, 1939, Victor Fleming), (102, Star Wars, 1977, George Lucas), (103, The Sound of Music, 1965, Robert Wise), CREATE TABLE `Reviewer` ( rID INT PRIMARY KEY, name TEXT ); Sample rows from `Reviewer`: (201, Sarah Martinez), (202, Daniel Lewis), (203, Brittany Harris), CREATE TABLE `Rating` ( rID INT REFERENCES Reviewer(rID), mID INT REFERENCES Movie(mID), stars INT, ratingDate date ); Sample rows from `Rating`: (201, 101, 2, 2011-01-22), (201, 101, 4, 2011-01-27), (202, 106, 4, None), ",
        "output": "SELECT COUNT(*) FROM reviewer"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of dorms which have TV Lounge but no Study Room as amenity. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT t1.dorm_name FROM dorm as t1 JOIN has_amenity as t2 ON t1.dormid  =  t2.dormid JOIN dorm_amenity as t3 ON t2.amenid  =  t3.amenid WHERE t3.amenity_name  =  'TV Lounge' EXCEPT SELECT t1.dorm_name FROM dorm as t1 JOIN has_amenity as t2 ON t1.dormid  =  t2.dormid JOIN dorm_amenity as t3 ON t2.amenid  =  t3.amenid WHERE t3.amenity_name  =  'Study Room'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many different songs have shared vocals? ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT COUNT(DISTINCT title) FROM vocals as t1 JOIN songs as t2 ON t1.songid  =  t2.songid WHERE type  =  \"shared\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what are some good places in mountain view for arabic food ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: acl papers in 2012 in Parsing ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the paper in Databases area with the most citations . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT t3.title FROM domain as t2 JOIN domain_publication as t1 ON t2.did  =  t1.did JOIN publication as t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" ORDER BY t3.citation_num DESC LIMIT 1;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What products are sold at the store named Miramichi? ###filtered_database_schema: CREATE TABLE `product` ( product_id INT PRIMARY KEY, product TEXT, dimensions TEXT, dpi REAL, pages_per_minute_color REAL, max_page_size TEXT, interface TEXT ); Sample rows from `product`: (1, Fujitsu fi-6130 A4 Series Scanner, 301 x 160 x 158, 600.0, 30.0, A4, USB 2.0), (2, Plustek MobileOffice D28 Corporate, 303 x 94 x 60, 600.0, 28.0, A4, USB 2.0), (3, Xerox Travel Scanner 100, 289 x 51 x 38, 600.0, 4.0, A4, USB 2.0), CREATE TABLE `store` ( Store_ID INT PRIMARY KEY, Store_Name TEXT, Type TEXT, Area_size REAL, Number_of_product_category REAL, Ranking INT ); Sample rows from `store`: (1, Miramichi, City Mall, 179.84, 17811.0, 2), (2, Neguac, Village Store, 26.69, 1678.0, 3), (3, Rogersville, Village Store, 7.23, 1170.0, 1), CREATE TABLE `district` ( District_ID INT PRIMARY KEY, District_name TEXT, Headquartered_City TEXT, City_Population REAL, City_Area REAL ); Sample rows from `district`: (1, Attock District, Attock City, 94620.0, 20.0), (2, Bahawalnagar District, Bahawalnagar City, 134936.0, 13.0), (3, Bahawalpur District, Bahawalpur City, 530438.0, 38.0), CREATE TABLE `store_product` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), Product_ID INT PRIMARY KEY REFERENCES product(Product_ID) ); Sample rows from `store_product`: (1, 1), (1, 2), (1, 3), CREATE TABLE `store_district` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), District_ID INT REFERENCES district(District_ID) ); Sample rows from `store_district`: (1, 15), (2, 15), (3, 11), ",
        "output": "SELECT t1.product FROM product as t1 JOIN store_product as t2 ON t1.product_id  =  t2.product_id JOIN store as t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"Miramichi\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: how many states have a higher point than the highest point of the state with the largest capital city in the us ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT COUNT(state_name) FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  ( SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city ) ) ) );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of stadiums whose capacity is smaller than the average capacity. ###filtered_database_schema: CREATE TABLE `swimmer` ( ID INT PRIMARY KEY, name TEXT, Nationality TEXT, meter_100 REAL, meter_200 TEXT, meter_300 TEXT, meter_400 TEXT, meter_500 TEXT, meter_600 TEXT, meter_700 TEXT, Time TEXT ); Sample rows from `swimmer`: (7, Przemysław Stańczyk, Poland, 57.31, 1:57.10, 2:56.02, 3:55.36, 4:54.21, 5:52.59, 6:50.91, 7:47.91), (4, Craig Stevens, Australia, 57.35, 1:56.34, 2:55.90, 3:55.72, 4:55.08, 5:54.45, 6:52.69, 7:48.67), (5, Federico Colbertaldo, Italy, 57.66, 1:56.77, 2:56.04, 3:55.37, 4:54.48, 5:53.53, 6:52.58, 7:49.98), CREATE TABLE `stadium` ( ID INT PRIMARY KEY, name TEXT, Capacity INT, City TEXT, Country TEXT, Opening_year INT ); Sample rows from `stadium`: (1, Nou Mestalla, 75000, Valencia, Spain, 2004), (2, Gazprom Arena, 69501, Saint Petersburg, Russia, 2005), (3, Baku Olympic Stadium, 68000, Baku, Azerbaijan, 2005), CREATE TABLE `event` ( ID INT PRIMARY KEY, Name TEXT, Stadium_ID INT REFERENCES stadium(ID), Year TEXT ); Sample rows from `event`: (1, FINA, 1, 2016), (2, Pacific, 10, 2011), (3, World Master, 2, 2012), CREATE TABLE `record` ( ID INT, Result TEXT, Swimmer_ID INT PRIMARY KEY REFERENCES swimmer(ID), Event_ID INT PRIMARY KEY REFERENCES event(ID) ); Sample rows from `record`: (1, NC, 1, 1), (2, Win, 1, 2), (3, Loss, 3, 3), ",
        "output": "SELECT name FROM stadium WHERE capacity  <  (SELECT AVG(capacity) FROM stadium)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of instructors who didn't teach? ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of the workshop groups that have bookings with status code \"stop\"? ###filtered_database_schema: CREATE TABLE `Ref_Payment_Methods` ( payment_method_code CHAR(10) PRIMARY KEY, payment_method_description VARCHAR(80) ); Sample rows from `Ref_Payment_Methods`: (American E, credit), (MasterCard, debit), (Visa, Visa), CREATE TABLE `Ref_Service_Types` ( Service_Type_Code CHAR(15) PRIMARY KEY, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255) ); Sample rows from `Ref_Service_Types`: (1, 1, provide photo service), (2, 1, provide dinning service), (3, 1, provide filming service), CREATE TABLE `Addresses` ( Address_ID VARCHAR(100) PRIMARY KEY, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Addresses`: (110, 4753 Dach Highway, Suite 846, Feliciaberg, Florida, None), (124, 391 Vandervort Fall Apt. 446, Apt. 107, West Sherwoodstad, Indiana, None), (148, 809 Izabella Islands, Suite 271, Schadenville, Ohio, None), CREATE TABLE `Products` ( Product_ID VARCHAR(100) PRIMARY KEY, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Products`: (11, photo, 4448536, None, None), (154, film, 2302, None, None), (156, film, 17622723, None, None), CREATE TABLE `Marketing_Regions` ( Marketing_Region_Code CHAR(15) PRIMARY KEY, Marketing_Region_Name VARCHAR(255), Marketing_Region_Descriptrion VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Marketing_Regions`: (CA, Canada, Our target market, None), (CN, China, Our largest market, None), (ES, Spain, , None), CREATE TABLE `Clients` ( Client_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Clients`: (423, 201, branson94@example.net, Clifford, (042)912-3404x5135, VIP), (426, 383, alba04@example.com, Bettye, (604)849-0214, None), (478, 15, westley30@example.net, Reinhold, 1-048-214-4640x64380, None), CREATE TABLE `Drama_Workshop_Groups` ( Workshop_Group_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Currency_Code CHAR(15), Marketing_Region_Code CHAR(15), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Drama_Workshop_Groups`: (136, 383, EU, FR, Amely Cafe, 122-084-8029, amely.ruecker@example.com, None), (140, 180, EU, DE, Veda Film, 793-966-9311x5303, breitenberg.veda@example.com, None), (176, 286, EU, RU, Queen Art, 492-463-5967, quigley.queen@example.org, Good), CREATE TABLE `Performers` ( Performer_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Performers`: (153, 124, Shawna, 664.495.1939, krogahn@example.com, None), (211, 124, Ashley, 893-536-8857, preston45@example.net, None), (313, 39, Oren, 1-952-052-6685x28082, ferry.carolina@example.net, None), CREATE TABLE `Customers` ( Customer_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Customers`: (240, 286, Harold, 624-096-7791, jerde.harmon@example.com, None), (267, 98, Federico, 914-915-7483, johnson27@example.com, None), (304, 369, Samson, 1-463-121-4086x655, dalton75@example.com, None), CREATE TABLE `Stores` ( Store_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Marketing_Region_Code CHAR(15) REFERENCES Marketing_Regions(Marketing_Region_Code), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Stores`: (150, 286, IN, FJA Filming, +65(1)3590790358, fjacobson@example.com, None), (229, 266, CA, Rob Dinning, 1-327-185-9368, rborer@example.org, 5 stars), (231, 230, ES, Adan Dinning, 896-931-9633x869, adan93@example.com, None), CREATE TABLE `Bookings` ( Booking_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Clients(Client_ID), Workshop_Group_ID VARCHAR(100) REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Status_Code CHAR(15), Store_ID INTEGER, Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Bookings`: (1, 938, 140, good, 8, 2016-12-12 10:43:01, 2013-03-10 18:47:05, 1997-11-21 10:07:40, None), (2, 868, 838, stop, 7, 1976-08-20 00:33:08, 2009-07-09 09:18:38, 1976-01-08 07:19:23, None), (3, 735, 176, good, 9, 1975-11-23 06:28:47, 1989-01-05 19:24:45, 1990-03-16 19:38:47, None), CREATE TABLE `Performers_in_Bookings` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Performer_ID INTEGER PRIMARY KEY REFERENCES Performers(Performer_ID) ); Sample rows from `Performers_in_Bookings`: (1, 153), (1, 341), (2, 466), CREATE TABLE `Customer_Orders` ( Order_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Store_ID INTEGER REFERENCES Stores(Store_ID), Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 516, 231, 1994-08-03 12:34:58, 1977-03-11 03:58:19, 1992-07-21 22:11:11, None), (2, 418, 229, 2014-07-10 10:56:01, 1996-08-26 19:19:59, 1998-08-22 17:57:32, None), (3, 712, 229, 1981-06-20 16:29:43, 1980-12-19 05:49:35, 2011-04-13 07:15:35, None), CREATE TABLE `Order_Items` ( Order_Item_ID INTEGER, Order_ID INTEGER REFERENCES Customer_Orders(Order_ID), Product_ID INTEGER REFERENCES Products(Product_ID), Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 3, 233, 1, None), (2, 15, 300, 2, None), (3, 12, 300, 1, None), CREATE TABLE `Invoices` ( Invoice_ID INTEGER, Order_ID INTEGER REFERENCES Bookings(Booking_ID) REFERENCES Customer_Orders(Order_ID), payment_method_code CHAR(15) REFERENCES Ref_Payment_Methods(payment_method_code), Product_ID INTEGER, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER ); Sample rows from `Invoices`: (128, 14, MasterCard, 4, 2, None, 1), (162, 13, MasterCard, 9, 2, None, 9), (164, 7, Visa, 7, 2, None, 1), CREATE TABLE `Services` ( Service_ID INTEGER PRIMARY KEY, Service_Type_Code CHAR(15) REFERENCES Ref_Service_Types(Service_Type_Code), Workshop_Group_ID INTEGER REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Services`: (191, 1, 415, None, film, 58932775.8822, None), (219, 2, 838, None, film, 2704.4719, None), (220, 1, 708, None, dinning, 6888.8306, None), CREATE TABLE `Bookings_Services` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Product_ID INTEGER PRIMARY KEY REFERENCES Services(Service_ID) ); Sample rows from `Bookings_Services`: (1, 396), (1, 779), (4, 191), CREATE TABLE `Invoice_Items` ( Invoice_Item_ID INTEGER, Invoice_ID INTEGER REFERENCES Invoices(Invoice_ID), Order_ID INTEGER REFERENCES Bookings_Services(Order_ID), Order_Item_ID INTEGER REFERENCES Order_Items(Order_Item_ID), Product_ID INTEGER REFERENCES Bookings_Services(Product_ID), Order_Quantity INTEGER, Other_Item_Details VARCHAR(255) ); Sample rows from `Invoice_Items`: (1, 128, 1, 5, 396, 2, None), (2, 162, 4, 6, 191, 6, Good quality), ",
        "output": "SELECT t2.store_name FROM bookings as t1 JOIN drama_workshop_groups as t2 ON t1.workshop_group_id  =  t2.workshop_group_id WHERE t1.status_code  =  \"stop\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which organizations are not a parent organization of others? List the organization id. ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_details VARCHAR(255) ); Sample rows from `Customers`: (4, Mr. Raul Prosacco), (5, Esteban Senger), (16, Tyrique Durgan II), CREATE TABLE `Properties` ( property_id INTEGER, property_type_code CHAR(15), property_address VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Properties`: (24, apartment, 85456 Annie Lodge Suite 449, USA), (107, house, 2580 Yundt Plains, USA), (108, house, 5983 Fleta Throughway, USA), CREATE TABLE `Residents` ( resident_id INTEGER PRIMARY KEY, property_id INTEGER PRIMARY KEY REFERENCES Properties(property_id), date_moved_in DATETIME PRIMARY KEY, date_moved_out DATETIME, other_details VARCHAR(255) ); Sample rows from `Residents`: (6, 954, 2017-06-17 15:43:33, 2017-12-18 03:46:04, Anderson Batz), (10, 605, 2015-03-27 12:00:00, 2018-03-17 07:48:09, Miss Naomie Osinski), (23, 879, 2015-03-27 12:00:00, 2017-11-14 06:28:48, Jess Wyman), CREATE TABLE `Organizations` ( organization_id INTEGER, parent_organization_id INTEGER, organization_details VARCHAR(255) ); Sample rows from `Organizations`: (7, 7, Reinger, Hudson and Nolan Group), (8, 7, Denesik and Sons Party), (10, 8, Robel-Schulist Group), CREATE TABLE `Services` ( service_id INTEGER, organization_id INTEGER REFERENCES Organizations(organization_id), service_type_code CHAR(15), service_details VARCHAR(255) ); Sample rows from `Services`: (10, 10, Cleanning, Satisfied), (11, 7, Check, Satisfied), (13, 8, Moving Out, Satisfied), CREATE TABLE `Residents_Services` ( resident_id INTEGER PRIMARY KEY REFERENCES Residents(resident_id), service_id INTEGER PRIMARY KEY REFERENCES Services(service_id), date_moved_in DATETIME REFERENCES Residents(date_moved_in), property_id INTEGER REFERENCES Residents(property_id), date_requested DATETIME, date_provided DATETIME, other_details VARCHAR(255) ); Sample rows from `Residents_Services`: (6, 49, 2017-06-17 15:43:33, 954, 2016-07-25 01:32:23, 2018-02-26 00:27:11, Satisfied), (23, 41, 2015-03-27 12:00:00, 879, 2016-10-10 21:42:21, 2017-08-21 06:23:06, Unsatisfied), (28, 11, 2015-03-27 12:00:00, 629, 2017-07-14 19:03:47, 2017-08-28 03:43:56, Unsatisfied), CREATE TABLE `Things` ( thing_id INTEGER, organization_id INTEGER REFERENCES Organizations(organization_id), Type_of_Thing_Code CHAR(15), service_type_code CHAR(10), service_details VARCHAR(255) ); Sample rows from `Things`: (1, 8, Electronics, Check, Unsatisfied), (2, 8, Electronics, Cleanning, Satisfied), (10, 8, Commen, Check, Satisfied), CREATE TABLE `Customer_Events` ( Customer_Event_ID INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_moved_in DATETIME REFERENCES Residents(date_moved_in), property_id INTEGER REFERENCES Residents(property_id), resident_id INTEGER REFERENCES Residents(resident_id), thing_id INTEGER REFERENCES Things(thing_id) ); Sample rows from `Customer_Events`: (70, 19, 2015-03-27 12:00:00, 605, 10, 1), (160, 5, 2015-03-27 12:00:00, 879, 23, 80), (166, 16, 2015-03-27 12:00:00, 629, 28, 14), CREATE TABLE `Customer_Event_Notes` ( Customer_Event_Note_ID INTEGER, Customer_Event_ID INTEGER REFERENCES Customer_Events(Customer_Event_ID), service_type_code CHAR(15), resident_id INTEGER, property_id INTEGER, date_moved_in DATETIME ); Sample rows from `Customer_Event_Notes`: (18, 70, Cleanning, 58, 107, 2016-08-04 01:06:05), (21, 428, Check, 87, 445, 2016-12-11 01:05:14), (32, 70, Check, 37, 669, 2016-07-10 04:09:56), CREATE TABLE `Timed_Status_of_Things` ( thing_id INTEGER PRIMARY KEY REFERENCES Things(thing_id), Date_and_Date DATETIME PRIMARY KEY, Status_of_Thing_Code CHAR(15) PRIMARY KEY ); Sample rows from `Timed_Status_of_Things`: (2, 2016-05-27 23:33:34, Open), (2, 2016-07-17 08:35:27, Close), (2, 2017-06-19 02:59:21, In Progress), CREATE TABLE `Timed_Locations_of_Things` ( thing_id INTEGER PRIMARY KEY REFERENCES Things(thing_id), Date_and_Time DATETIME PRIMARY KEY, Location_Code CHAR(15) PRIMARY KEY ); Sample rows from `Timed_Locations_of_Things`: (2, 2016-10-12 12:03:07, 064 Charles Mou), (10, 2016-12-29 00:39:19, 288 Lang Ferry), (10, 2017-10-21 04:21:54, 854 Keeling Sho), ",
        "output": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find all the songs whose name contains the word \"the\". ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT title FROM songs WHERE title LIKE '% the %'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of different software platforms. ###filtered_database_schema: CREATE TABLE `device` ( Device_ID INT PRIMARY KEY, Device TEXT, Carrier TEXT, Package_Version TEXT, Applications TEXT, Software_Platform TEXT ); Sample rows from `device`: (1, BlackBerry Storm 9530, MTS Mobility, 5.0.0.808, 5.0.0.419, Android), (2, Apple, Verizon Wireless, 5.0.0.328, 5.0.0.328, iOS), (3, Huawei, Telus Mobility, 5.0.0.419, 5.0.0.419, Android), CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Shop_Name TEXT, Location TEXT, Open_Date TEXT, Open_Year INT ); Sample rows from `shop`: (1, Dinas Device, Dinas, 1 January, 2014), (2, Best Buy, Cymmer, 15 July, 2006), (3, Ferndale, Blaenllechau, 8 November, 2009), CREATE TABLE `stock` ( Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID), Device_ID INT PRIMARY KEY REFERENCES device(Device_ID), Quantity INT ); Sample rows from `stock`: (1, 6, 100), (2, 6, 110), (3, 6, 134), ",
        "output": "SELECT COUNT(DISTINCT software_platform) FROM device"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names. ###filtered_database_schema: CREATE TABLE `list` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Grade INTEGER, Classroom INTEGER ); Sample rows from `list`: (CAR, MAUDE, 2, 101), (KRISTENSEN, STORMY, 6, 112), (VANDERWOUDE, SHERWOOD, 3, 107), CREATE TABLE `teachers` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Classroom INTEGER ); Sample rows from `teachers`: (MACROSTIE, MIN, 101), (COVIN, JEROME, 102), (MOYER, OTHA, 103), ",
        "output": "SELECT DISTINCT t1.firstname ,  t1.lastname FROM list as t1 JOIN teachers as t2 ON t1.classroom  =  t2.classroom WHERE t1.grade  =  1 EXCEPT SELECT t1.firstname ,  t1.lastname FROM list as t1 JOIN teachers as t2 ON t1.classroom  =  t2.classroom WHERE t2.firstname  =  \"OTHA\" AND t2.lastname  =  \"MOYER\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which contact channel has been used by the customer with name \"Tillman Ernser\"? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_content VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), other_address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 9443 Boyle Route Suite 857, Lucasville, 416, Colorado, USA, None), (2, 1969 Jabari Port Suite 393, New Sabryna, 721, SouthCarolina, USA, None), (3, 295 Hackett Curve, Reingertown, 255, NewJersey, USA, None), CREATE TABLE `Products` ( product_id INTEGER, product_details VARCHAR(255) ); Sample rows from `Products`: (1, Americano), (2, Dove Chocolate), (3, Latte), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method VARCHAR(15), customer_name VARCHAR(80), date_became_customer DATETIME, other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Cash, Dr. Julia Wuckert MD, 2018-03-01 23:20:10, None), (2, Cheque, Tillman Ernser, 2018-02-28 11:37:44, None), (3, Credit Card, Rodrick Heaney, 2018-03-09 17:41:58, None), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_address_from DATETIME, address_type VARCHAR(15), date_address_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 11, 1985-03-29 20:31:43, Billing, 1993-02-17 17:55:18), (13, 11, 2010-08-25 04:24:35, Billing, 1972-02-17 22:23:38), (2, 14, 2010-12-26 08:52:50, Residential, 1979-07-16 18:22:39), CREATE TABLE `Customer_Contact_Channels` ( customer_id INTEGER REFERENCES Customers(customer_id), channel_code VARCHAR(15), active_from_date DATETIME, active_to_date DATETIME, contact_number VARCHAR(50) ); Sample rows from `Customer_Contact_Channels`: (9, Email, 2017-12-07 18:18:15, 2018-03-23 13:37:14, 940.035.6435x0225), (2, Email, 2017-04-07 04:51:41, 2018-03-23 01:30:52, 189.449.8326x7607), (9, Email, 2017-05-25 16:08:45, 2018-03-13 07:32:25, 958-653-2640), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(15), order_date DATETIME, order_details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 15, Cancelled, 2018-03-21 11:20:46, None), (2, 3, Cancelled, 2018-03-05 06:35:33, None), (3, 5, Delivered, 2018-03-04 07:16:22, Second time), CREATE TABLE `Order_Items` ( order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), order_quantity VARCHAR(15) ); Sample rows from `Order_Items`: (14, 2, 5), (5, 2, 9), (14, 3, 2), ",
        "output": "SELECT DISTINCT channel_code FROM customers as t1 JOIN customer_contact_channels as t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many schools are there? ###filtered_database_schema: CREATE TABLE `School` ( School_id TEXT PRIMARY KEY, School_name TEXT, Location TEXT, Mascot TEXT, Enrollment INT, IHSAA_Class TEXT, IHSAA_Football_Class TEXT, County TEXT ); Sample rows from `School`: (1, Bremen, Bremen, Lions, 495, AA, AA, 50 Marshall), (2, Culver Community, Culver, Cavaliers, 287, A, A, 50 Marshall), (3, Glenn, Walkerton, Falcons, 605, AAA, AAA, 71 St. Joseph), CREATE TABLE `budget` ( School_id INT PRIMARY KEY REFERENCES School(School_id), Year INT PRIMARY KEY, Budgeted INT, total_budget_percent_budgeted REAL, Invested INT, total_budget_percent_invested REAL, Budget_invested_percent TEXT ); Sample rows from `budget`: (2, 1999, 4979, 2.0, 2134, 2.0, 42.9), (2, 2000, 3666, 2.0, 5840, 2.0, 159.3), (2, 2001, 6803, 2.0, 8335, 2.0, 122.5), CREATE TABLE `endowment` ( endowment_id INT PRIMARY KEY, School_id INT REFERENCES School(School_id), donator_name TEXT, amount REAL ); Sample rows from `endowment`: (1, 1, Monte Plata, 9.51), (2, 2, San José de Ocoa, 9.83), (3, 3, Distrito Nacional, 9.55), ",
        "output": "SELECT COUNT(*) FROM school"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all the scientists in alphabetical order? ###filtered_database_schema: CREATE TABLE `Scientists` ( SSN INT PRIMARY KEY, Name Char(30) ); Sample rows from `Scientists`: (123234877, Michael Rogers), (152934485, Anand Manikutty), (222364883, Carol Smith), CREATE TABLE `Projects` ( Code Char(4) PRIMARY KEY, Name Char(50), Hours INT ); Sample rows from `Projects`: (AeH1, Winds: Studying Bernoullis Principle, 156), (AeH2, Aerodynamics and Bridge Design, 189), (AeH3, Aerodynamics and Gas Mileage, 256), CREATE TABLE `AssignedTo` ( Scientist INT PRIMARY KEY REFERENCES Scientists(SSN), Project char(4) PRIMARY KEY REFERENCES Projects(Code) ); Sample rows from `AssignedTo`: (123234877, AeH1), (152934485, AeH3), (222364883, Ast3), ",
        "output": "SELECT name FROM scientists ORDER BY name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids of the students who registered for course 301? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1 VARCHAR(80), line_2 VARCHAR(80), city VARCHAR(50), zip_postcode CHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (5, 0900 Roderick Oval New Albina, WA 19200-7914, Suite 096, Linnealand, 862, Montana, USA), (9, 966 Dach Ports Apt. 322 Lake Harmonyhaven, VA 65235, Apt. 163, South Minnie, 716, Texas, USA), (29, 28550 Broderick Underpass Suite 667 Zakaryhaven, WY 22945-1534, Apt. 419, North Trystanborough, 112, Vermont, USA), CREATE TABLE `People` ( person_id INTEGER, first_name VARCHAR(255), middle_name VARCHAR(255), last_name VARCHAR(255), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), login_name VARCHAR(40), password VARCHAR(40) ); Sample rows from `People`: (111, Shannon, Elissa, Senger, 01955267735, javier.trantow@example.net, pgub, 5e4ff49a61b3544da3ad7dc7e2cf28847564c64c), (121, Virginie, Jasmin, Hartmann, (508)319-2970x043, boyer.lonie@example.com, bkkv, b063331ea8116befaa7b84c59c6a22200f5f8caa), (131, Dariana, Hayley, Bednar, (262)347-9364x516, leila14@example.net, zops, b20b6a9f24aadeda70d54e410c3219f61fb063fb), CREATE TABLE `Students` ( student_id INTEGER REFERENCES People(person_id), student_details VARCHAR(255) ); Sample rows from `Students`: (111, Marry), (121, Martin), (131, Barry), CREATE TABLE `Courses` ( course_id VARCHAR(100) PRIMARY KEY, course_name VARCHAR(120), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Courses`: (301, statistics, statistics, None), (302, English, English, None), (303, French, French, None), CREATE TABLE `People_Addresses` ( person_address_id INTEGER, person_id INTEGER REFERENCES People(person_id), address_id INTEGER REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `People_Addresses`: (122, 111, 9, 2012-09-26 13:21:00, 2018-03-21 09:46:30), (257, 121, 5, 2008-07-31 02:17:25, 2018-03-09 02:11:12), (269, 131, 88, 2008-05-26 20:43:41, 2018-03-11 20:26:41), CREATE TABLE `Student_Course_Registrations` ( student_id INTEGER PRIMARY KEY REFERENCES Students(student_id), course_id INTEGER PRIMARY KEY REFERENCES Courses(course_id), registration_date DATETIME ); Sample rows from `Student_Course_Registrations`: (111, 301, 2008-11-04 10:35:13), (121, 301, 2008-10-04 10:35:13), (121, 303, 2008-11-14 10:35:13), CREATE TABLE `Student_Course_Attendance` ( student_id INTEGER PRIMARY KEY REFERENCES Student_Course_Registrations(student_id), course_id INTEGER PRIMARY KEY REFERENCES Student_Course_Registrations(course_id), date_of_attendance DATETIME ); Sample rows from `Student_Course_Attendance`: (111, 301, 2008-11-04 10:35:13), (121, 301, 2012-04-09 11:44:34), (121, 303, 2014-04-09 11:44:34), CREATE TABLE `Candidates` ( candidate_id INTEGER REFERENCES People(person_id), candidate_details VARCHAR(255) ); Sample rows from `Candidates`: (111, Jane), (121, Robert), (131, Alex), CREATE TABLE `Candidate_Assessments` ( candidate_id INTEGER PRIMARY KEY REFERENCES Candidates(candidate_id), qualification CHAR(15) PRIMARY KEY, assessment_date DATETIME, asessment_outcome_code CHAR(15) ); Sample rows from `Candidate_Assessments`: (111, A, 2010-04-07 11:44:34, Pass), (121, B, 2010-04-17 11:44:34, Pass), (131, D, 2010-04-05 11:44:34, Fail), ",
        "output": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the official names of the cities that have hosted more than one competition. ###filtered_database_schema: CREATE TABLE `city` ( City_ID INT PRIMARY KEY, Official_Name TEXT, Status TEXT, Area_km_2 REAL, Population REAL, Census_Ranking TEXT ); Sample rows from `city`: (1, Grand Falls/Grand-Sault, Town, 18.06, 5706.0, 636 of 5008), (2, Perth-Andover, Village, 8.89, 1778.0, 1442 of 5,008), (3, Plaster Rock, Village, 3.09, 1135.0, 1936 of 5,008), CREATE TABLE `farm` ( Farm_ID INT PRIMARY KEY, Year INT, Total_Horses REAL, Working_Horses REAL, Total_Cattle REAL, Oxen REAL, Bulls REAL, Cows REAL, Pigs REAL, Sheep_and_Goats REAL ); Sample rows from `farm`: (1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8), CREATE TABLE `farm_competition` ( Competition_ID INT PRIMARY KEY, Year INT, Theme TEXT, Host_city_ID INT REFERENCES city(City_ID), Hosts TEXT ); Sample rows from `farm_competition`: (1, 2013, Carnival M is back!, 1, Miley Cyrus Jared Leto and Karen Mok), (2, 2006, Codehunters, 2, Leehom Wang and Kelly Rowland), (3, 2005, MTV Asia Aid, 3, Alicia Keys), CREATE TABLE `competition_record` ( Competition_ID INT PRIMARY KEY REFERENCES farm_competition(Competition_ID), Farm_ID INT PRIMARY KEY REFERENCES farm(Farm_ID), Rank INT ); Sample rows from `competition_record`: (1, 8, 1), (1, 2, 2), (1, 3, 3), ",
        "output": "SELECT t1.official_name FROM city as t1 JOIN farm_competition as t2 ON t1.city_id  =  t2.host_city_id GROUP BY t2.host_city_id HAVING COUNT(*)  >  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the full names and hire dates for employees in the same department as someone with the first name Clara? ###filtered_database_schema: CREATE TABLE `regions` ( REGION_ID decimal(5,0) PRIMARY KEY, REGION_NAME varchar(25) ); Sample rows from `regions`: (1, Europe\\r), (2, Americas\\r), (3, Asia\\r), CREATE TABLE `countries` ( COUNTRY_ID varchar(2) PRIMARY KEY, COUNTRY_NAME varchar(40), REGION_ID decimal(10,0) REFERENCES regions(REGION_ID) ); Sample rows from `countries`: (AR, Argentina, 2), (AU, Australia, 3), (BE, Belgium, 1), CREATE TABLE `departments` ( DEPARTMENT_ID decimal(4,0) PRIMARY KEY, DEPARTMENT_NAME varchar(30), MANAGER_ID decimal(6,0), LOCATION_ID decimal(4,0) ); Sample rows from `departments`: (10, Administration, 200, 1700), (20, Marketing, 201, 1800), (30, Purchasing, 114, 1700), CREATE TABLE `jobs` ( JOB_ID varchar(10) PRIMARY KEY, JOB_TITLE varchar(35), MIN_SALARY decimal(6,0), MAX_SALARY decimal(6,0) ); Sample rows from `jobs`: (AD_PRES, President, 20000, 40000), (AD_VP, Administration Vice President, 15000, 30000), (AD_ASST, Administration Assistant, 3000, 6000), CREATE TABLE `employees` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY, FIRST_NAME varchar(20), LAST_NAME varchar(25), EMAIL varchar(25), PHONE_NUMBER varchar(20), HIRE_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), SALARY decimal(8,2), COMMISSION_PCT decimal(2,2), MANAGER_ID decimal(6,0), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `employees`: (100, Steven, King, SKING, 515.123.4567, 1987-06-17, AD_PRES, 24000, 0, 0, 90), (101, Neena, Kochhar, NKOCHHAR, 515.123.4568, 1987-06-18, AD_VP, 17000, 0, 100, 90), (102, Lex, De Haan, LDEHAAN, 515.123.4569, 1987-06-19, AD_VP, 17000, 0, 100, 90), CREATE TABLE `job_history` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY REFERENCES employees(EMPLOYEE_ID), START_DATE date PRIMARY KEY, END_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `job_history`: (102, 1993-01-13, 1998-07-24, IT_PROG, 60), (101, 1989-09-21, 1993-10-27, AC_ACCOUNT, 110), (101, 1993-10-28, 1997-03-15, AC_MGR, 110), CREATE TABLE `locations` ( LOCATION_ID decimal(4,0) PRIMARY KEY, STREET_ADDRESS varchar(40), POSTAL_CODE varchar(12), CITY varchar(30), STATE_PROVINCE varchar(25), COUNTRY_ID varchar(2) REFERENCES countries(COUNTRY_ID) ); Sample rows from `locations`: (1000, 1297 Via Cola di Rie, 989, Roma, , IT), (1100, 93091 Calle della Testa, 10934, Venice, , IT), (1200, 2017 Shinjuku-ku, 1689, Tokyo, Tokyo Prefecture, JP), ",
        "output": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the id, forename, and number of races for all drivers that have participated in at least 2 races? ###filtered_database_schema: CREATE TABLE `circuits` ( circuitId INTEGER, circuitRef TEXT, name TEXT, location TEXT, country TEXT, lat REAL, lng REAL, alt TEXT, url TEXT ); Sample rows from `circuits`: (1, albert_park, Albert Park Grand Prix Circuit, Melbourne, Australia, -37.8497, 144.968, 10, http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit), (2, sepang, Sepang International Circuit, Kuala Lumpur, Malaysia, 2.76083, 101.738, , http://en.wikipedia.org/wiki/Sepang_International_Circuit), (3, bahrain, Bahrain International Circuit, Sakhir, Bahrain, 26.0325, 50.5106, , http://en.wikipedia.org/wiki/Bahrain_International_Circuit), CREATE TABLE `races` ( raceId INTEGER, year INTEGER, round INTEGER, circuitId INTEGER REFERENCES circuits(circuitId), name TEXT, date TEXT, time TEXT, url TEXT ); Sample rows from `races`: (1, 2009, 1, 1, Australian Grand Prix, 2009-03-29, 06:00:00, http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix), (2, 2009, 2, 2, Malaysian Grand Prix, 2009-04-05, 09:00:00, http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix), (3, 2009, 3, 17, Chinese Grand Prix, 2009-04-19, 07:00:00, http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix), CREATE TABLE `drivers` ( driverId INTEGER, driverRef TEXT, number TEXT, code TEXT, forename TEXT, surname TEXT, dob TEXT, nationality TEXT, url TEXT ); Sample rows from `drivers`: (1, hamilton, 44, HAM, Lewis, Hamilton, 07/01/1985, British, http://en.wikipedia.org/wiki/Lewis_Hamilton), (2, heidfeld, , HEI, Nick, Heidfeld, 10/05/1977, German, http://en.wikipedia.org/wiki/Nick_Heidfeld), (3, rosberg, 6, ROS, Nico, Rosberg, 27/06/1985, German, http://en.wikipedia.org/wiki/Nico_Rosberg), CREATE TABLE `status` ( statusId INTEGER, status TEXT ); Sample rows from `status`: (1, Finished), (2, Disqualified), (3, Accident), CREATE TABLE `seasons` ( year INTEGER, url TEXT ); Sample rows from `seasons`: (1950, http://en.wikipedia.org/wiki/1950_Formula_One_season), (1951, http://en.wikipedia.org/wiki/1951_Formula_One_season), (1952, http://en.wikipedia.org/wiki/1952_Formula_One_season), CREATE TABLE `constructors` ( constructorId INTEGER, constructorRef TEXT, name TEXT, nationality TEXT, url TEXT ); Sample rows from `constructors`: (1, mclaren, McLaren, British, http://en.wikipedia.org/wiki/McLaren), (2, bmw_sauber, BMW Sauber, German, http://en.wikipedia.org/wiki/BMW_Sauber), (3, williams, Williams, British, http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering), CREATE TABLE `constructorStandings` ( constructorStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `constructorStandings`: (1, 18, 1, 14.0, 1, 1, 1), (2, 18, 2, 8.0, 3, 3, 0), (3, 18, 3, 9.0, 2, 2, 0), CREATE TABLE `results` ( resultId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, grid INTEGER, position TEXT, positionText TEXT, positionOrder INTEGER, points REAL, laps TEXT, time TEXT, milliseconds TEXT, fastestLap TEXT, rank TEXT, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId INTEGER ); Sample rows from `results`: (1, 18, 1, 1, 22, 1, 1, 1, 1, 10.0, 58, 34:50.6, 5690616, 39, 2, 01:27.5, 218.3, 1), (2, 18, 2, 2, 3, 5, 2, 2, 2, 8.0, 58, 5.478, 5696094, 41, 3, 01:27.7, 217.586, 1), (3, 18, 3, 3, 7, 7, 3, 3, 3, 6.0, 58, 8.163, 5698779, 41, 5, 01:28.1, 216.719, 1), CREATE TABLE `driverStandings` ( driverStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `driverStandings`: (1, 18, 1, 10.0, 1, 1, 1), (2, 18, 2, 8.0, 2, 2, 0), (3, 18, 3, 6.0, 3, 3, 0), CREATE TABLE `constructorResults` ( constructorResultsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, status TEXT ); Sample rows from `constructorResults`: (1, 18, 1, 14.0, NULL), (2, 18, 2, 8.0, NULL), (3, 18, 3, 9.0, NULL), CREATE TABLE `qualifying` ( qualifyId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, position INTEGER, q1 TEXT, q2 TEXT, q3 TEXT ); Sample rows from `qualifying`: (1, 18, 1, 1, 22, 1, 1:26.572, 1:25.187, 1:26.714), (2, 18, 9, 2, 4, 2, 1:26.103, 1:25.315, 1:26.869), (3, 18, 5, 1, 23, 3, 1:25.664, 1:25.452, 1:27.079), CREATE TABLE `pitStops` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), stop INTEGER PRIMARY KEY, lap INTEGER, time TEXT, duration TEXT, milliseconds INTEGER ); CREATE TABLE `lapTimes` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), lap INTEGER PRIMARY KEY, position INTEGER, time TEXT, milliseconds INTEGER ); ",
        "output": "SELECT t1.driverid ,  t1.forename ,  COUNT(*) FROM drivers as t1 JOIN results as t2 ON t1.driverid = t2.driverid JOIN races as t3 ON t2.raceid = t3.raceid GROUP BY t1.driverid HAVING COUNT(*)  >=  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: in what conferences does Daniella Coelho publish ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.venueid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Please show the songs that have result \"nominated\" at music festivals. ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Artist TEXT, Age INT, Famous_Title TEXT, Famous_Release_date TEXT ); Sample rows from `artist`: (1, Gorgoroth, 34, Bergen 1996, November 2007), (2, Ophiolatry, 35, Transmutation, January 21, 2008), (3, Ophiolatry, 22, Antievangelistical Process (re-release), 2009), CREATE TABLE `volume` ( Volume_ID INT PRIMARY KEY, Volume_Issue TEXT, Issue_Date TEXT, Weeks_on_Top REAL, Song TEXT, Artist_ID INT REFERENCES artist(Artist_ID) ); Sample rows from `volume`: (1, 45:14 §, 27 December 1986 - 10 January, 3.0, The Way, 1), (2, 45:15, 17 January, 1.0, Everybody Have Fun Tonight , 2), (3, 45:16, 24 January, 1.0, Walk Like an Egyptian , 1), CREATE TABLE `music_festival` ( ID INT PRIMARY KEY, Music_Festival TEXT, Date_of_ceremony TEXT, Category TEXT, Volume INT REFERENCES volume(Volume_ID), Result TEXT ); Sample rows from `music_festival`: (1, 34th England Academy Prize, 18 February 2011, Best Song, 1, Nominated), (2, 34th Japan Academy Prize, 18 February 2011, Best Lyrics, 2, Nominated), (3, 34th European Academy Prize, 18 February 2011, Best Song, 3, Awarded), ",
        "output": "SELECT t2.song FROM music_festival as t1 JOIN volume as t2 ON t1.volume  =  t2.volume_ID WHERE t1.result  =  \"Nominated\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the numbers of the shortest flights? ###filtered_database_schema: CREATE TABLE `flight` ( flno number(4,0) PRIMARY KEY, origin varchar2(20), destination varchar2(20), distance number(6,0), departure_date date, arrival_date date, price number(7,2), aid number(9,0) REFERENCES aircraft(aid) ); Sample rows from `flight`: (99, Los Angeles, Washington D.C., 2308, 04/12/2005 09:30, 04/12/2005 09:40, 235.98, 1), (13, Los Angeles, Chicago, 1749, 04/12/2005 08:45, 04/12/2005 08:45, 220.98, 3), (346, Los Angeles, Dallas, 1251, 04/12/2005 11:50, 04/12/2005 07:05, 182, 2), CREATE TABLE `aircraft` ( aid number(9,0) PRIMARY KEY, name varchar2(30), distance number(6,0) ); Sample rows from `aircraft`: (1, Boeing 747-400, 8430), (2, Boeing 737-800, 3383), (3, Airbus A340-300, 7120), CREATE TABLE `employee` ( eid number(9,0) PRIMARY KEY, name varchar2(30), salary number(10,2) ); Sample rows from `employee`: (242518965, James Smith, 120433), (141582651, Mary Johnson, 178345), (11564812, John Williams, 153972), CREATE TABLE `certificate` ( eid number(9,0) PRIMARY KEY REFERENCES employee(eid), aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid) ); Sample rows from `certificate`: (11564812, 2), (11564812, 10), (90873519, 6), ",
        "output": "SELECT flno FROM flight ORDER BY distance ASC LIMIT 3"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type. ###filtered_database_schema: CREATE TABLE `basketball_match` ( Team_ID INT PRIMARY KEY, School_ID INT REFERENCES university(School_ID), Team_Name TEXT, ACC_Regular_Season TEXT, ACC_Percent TEXT, ACC_Home TEXT, ACC_Road TEXT, All_Games TEXT, All_Games_Percent INT, All_Home TEXT, All_Road TEXT, All_Neutral TEXT ); Sample rows from `basketball_match`: (1, 1, North Carolina, 14–2, .875, 6–2, 8–0, 35–2, 0.946, 14–2, 13–0, 9–1), (2, 2, Duke, 13–3, .813, 7–1, 6–2, 28–6, 0.824, 15–1, 8–2, 5–3), (3, 4, Clemson, 10–6, .625, 7–1, 3–5, 24–10, 0.706, 14–2, 6–5, 4–3), CREATE TABLE `university` ( School_ID INT PRIMARY KEY, School TEXT, Location TEXT, Founded REAL, Affiliation TEXT, Enrollment REAL, Nickname TEXT, Primary_conference TEXT ); Sample rows from `university`: (1, University of Delaware, Newark, DE, 1743.0, Public, 19067.0, Fightin' Blue Hens, Colonial Athletic Association ( D-I )), (2, Lebanon Valley College, Annville, PA, 1866.0, Private/Methodist, 2100.0, Flying Dutchmen, MAC Commonwealth Conference ( D-III )), (3, University of Rhode Island, Kingston, RI, 1892.0, Public, 19095.0, Rams, Atlantic 10 Conference ( D-I )), ",
        "output": "SELECT SUM(enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the titles of the papers the author \"Stephanie Weirich\" wrote. ###filtered_database_schema: CREATE TABLE `Inst` ( instID INTEGER, name TEXT, country TEXT ); Sample rows from `Inst`: (1000, University of Oxford, UK), (1010, Northeastern University, USA), (1020, Indiana University, USA), CREATE TABLE `Authors` ( authID INTEGER, lname TEXT, fname TEXT ); Sample rows from `Authors`: (50, Gibbons, Jeremy), (51, Hinze, Ralf), (52, James, Daniel W. H.), CREATE TABLE `Papers` ( paperID INTEGER, title TEXT ); Sample rows from `Papers`: (200, Just do it: Simple Monadic Equational Reasoning), (201, Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory), (202, Functional Pearl: Modular Rollback through Control Logging), CREATE TABLE `Authorship` ( authID INTEGER PRIMARY KEY REFERENCES Authors(authID), instID INTEGER PRIMARY KEY REFERENCES Inst(instID), paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID), authOrder INTEGER ); Sample rows from `Authorship`: (50, 1000, 200, 1), (51, 1000, 200, 2), (51, 1000, 201, 1), ",
        "output": "SELECT t3.title FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN papers as t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show each author and the number of workshops they submitted to. ###filtered_database_schema: CREATE TABLE `workshop` ( Workshop_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Name TEXT ); Sample rows from `workshop`: (1, August 18, 2007, London UK, ABC 2007), (2, August 21, 2007, London UK, Conference 2007), (3, August 25, 2007, New Jersey USA, Workshop 2007), CREATE TABLE `submission` ( Submission_ID INT PRIMARY KEY, Scores REAL, Author TEXT, College TEXT ); Sample rows from `submission`: (1, 72.0, Steve Niehaus, Notre Dame), (2, 79.0, Sammy Green, Florida), (3, 78.0, Sherman Smith, Miami (OH)), CREATE TABLE `Acceptance` ( Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID), Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID), Result TEXT ); Sample rows from `Acceptance`: (2, 5, Accepted), (2, 3, Rejected), (3, 2, Rejected), ",
        "output": "SELECT t2.author ,  COUNT(DISTINCT t1.workshop_id) FROM acceptance as t1 JOIN submission as t2 ON t1.submission_id  =  t2.submission_id GROUP BY t2.author"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the order dates of all the bookings. ###filtered_database_schema: CREATE TABLE `Ref_Payment_Methods` ( payment_method_code CHAR(10) PRIMARY KEY, payment_method_description VARCHAR(80) ); Sample rows from `Ref_Payment_Methods`: (American E, credit), (MasterCard, debit), (Visa, Visa), CREATE TABLE `Ref_Service_Types` ( Service_Type_Code CHAR(15) PRIMARY KEY, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255) ); Sample rows from `Ref_Service_Types`: (1, 1, provide photo service), (2, 1, provide dinning service), (3, 1, provide filming service), CREATE TABLE `Addresses` ( Address_ID VARCHAR(100) PRIMARY KEY, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Addresses`: (110, 4753 Dach Highway, Suite 846, Feliciaberg, Florida, None), (124, 391 Vandervort Fall Apt. 446, Apt. 107, West Sherwoodstad, Indiana, None), (148, 809 Izabella Islands, Suite 271, Schadenville, Ohio, None), CREATE TABLE `Products` ( Product_ID VARCHAR(100) PRIMARY KEY, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Products`: (11, photo, 4448536, None, None), (154, film, 2302, None, None), (156, film, 17622723, None, None), CREATE TABLE `Marketing_Regions` ( Marketing_Region_Code CHAR(15) PRIMARY KEY, Marketing_Region_Name VARCHAR(255), Marketing_Region_Descriptrion VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Marketing_Regions`: (CA, Canada, Our target market, None), (CN, China, Our largest market, None), (ES, Spain, , None), CREATE TABLE `Clients` ( Client_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Clients`: (423, 201, branson94@example.net, Clifford, (042)912-3404x5135, VIP), (426, 383, alba04@example.com, Bettye, (604)849-0214, None), (478, 15, westley30@example.net, Reinhold, 1-048-214-4640x64380, None), CREATE TABLE `Drama_Workshop_Groups` ( Workshop_Group_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Currency_Code CHAR(15), Marketing_Region_Code CHAR(15), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Drama_Workshop_Groups`: (136, 383, EU, FR, Amely Cafe, 122-084-8029, amely.ruecker@example.com, None), (140, 180, EU, DE, Veda Film, 793-966-9311x5303, breitenberg.veda@example.com, None), (176, 286, EU, RU, Queen Art, 492-463-5967, quigley.queen@example.org, Good), CREATE TABLE `Performers` ( Performer_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Performers`: (153, 124, Shawna, 664.495.1939, krogahn@example.com, None), (211, 124, Ashley, 893-536-8857, preston45@example.net, None), (313, 39, Oren, 1-952-052-6685x28082, ferry.carolina@example.net, None), CREATE TABLE `Customers` ( Customer_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Customers`: (240, 286, Harold, 624-096-7791, jerde.harmon@example.com, None), (267, 98, Federico, 914-915-7483, johnson27@example.com, None), (304, 369, Samson, 1-463-121-4086x655, dalton75@example.com, None), CREATE TABLE `Stores` ( Store_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Marketing_Region_Code CHAR(15) REFERENCES Marketing_Regions(Marketing_Region_Code), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Stores`: (150, 286, IN, FJA Filming, +65(1)3590790358, fjacobson@example.com, None), (229, 266, CA, Rob Dinning, 1-327-185-9368, rborer@example.org, 5 stars), (231, 230, ES, Adan Dinning, 896-931-9633x869, adan93@example.com, None), CREATE TABLE `Bookings` ( Booking_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Clients(Client_ID), Workshop_Group_ID VARCHAR(100) REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Status_Code CHAR(15), Store_ID INTEGER, Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Bookings`: (1, 938, 140, good, 8, 2016-12-12 10:43:01, 2013-03-10 18:47:05, 1997-11-21 10:07:40, None), (2, 868, 838, stop, 7, 1976-08-20 00:33:08, 2009-07-09 09:18:38, 1976-01-08 07:19:23, None), (3, 735, 176, good, 9, 1975-11-23 06:28:47, 1989-01-05 19:24:45, 1990-03-16 19:38:47, None), CREATE TABLE `Performers_in_Bookings` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Performer_ID INTEGER PRIMARY KEY REFERENCES Performers(Performer_ID) ); Sample rows from `Performers_in_Bookings`: (1, 153), (1, 341), (2, 466), CREATE TABLE `Customer_Orders` ( Order_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Store_ID INTEGER REFERENCES Stores(Store_ID), Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 516, 231, 1994-08-03 12:34:58, 1977-03-11 03:58:19, 1992-07-21 22:11:11, None), (2, 418, 229, 2014-07-10 10:56:01, 1996-08-26 19:19:59, 1998-08-22 17:57:32, None), (3, 712, 229, 1981-06-20 16:29:43, 1980-12-19 05:49:35, 2011-04-13 07:15:35, None), CREATE TABLE `Order_Items` ( Order_Item_ID INTEGER, Order_ID INTEGER REFERENCES Customer_Orders(Order_ID), Product_ID INTEGER REFERENCES Products(Product_ID), Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 3, 233, 1, None), (2, 15, 300, 2, None), (3, 12, 300, 1, None), CREATE TABLE `Invoices` ( Invoice_ID INTEGER, Order_ID INTEGER REFERENCES Bookings(Booking_ID) REFERENCES Customer_Orders(Order_ID), payment_method_code CHAR(15) REFERENCES Ref_Payment_Methods(payment_method_code), Product_ID INTEGER, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER ); Sample rows from `Invoices`: (128, 14, MasterCard, 4, 2, None, 1), (162, 13, MasterCard, 9, 2, None, 9), (164, 7, Visa, 7, 2, None, 1), CREATE TABLE `Services` ( Service_ID INTEGER PRIMARY KEY, Service_Type_Code CHAR(15) REFERENCES Ref_Service_Types(Service_Type_Code), Workshop_Group_ID INTEGER REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Services`: (191, 1, 415, None, film, 58932775.8822, None), (219, 2, 838, None, film, 2704.4719, None), (220, 1, 708, None, dinning, 6888.8306, None), CREATE TABLE `Bookings_Services` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Product_ID INTEGER PRIMARY KEY REFERENCES Services(Service_ID) ); Sample rows from `Bookings_Services`: (1, 396), (1, 779), (4, 191), CREATE TABLE `Invoice_Items` ( Invoice_Item_ID INTEGER, Invoice_ID INTEGER REFERENCES Invoices(Invoice_ID), Order_ID INTEGER REFERENCES Bookings_Services(Order_ID), Order_Item_ID INTEGER REFERENCES Order_Items(Order_Item_ID), Product_ID INTEGER REFERENCES Bookings_Services(Product_ID), Order_Quantity INTEGER, Other_Item_Details VARCHAR(255) ); Sample rows from `Invoice_Items`: (1, 128, 1, 5, 396, 2, None), (2, 162, 4, 6, 191, 6, Good quality), ",
        "output": "SELECT order_date FROM bookings"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show teams that have suffered more than three eliminations. ###filtered_database_schema: CREATE TABLE `wrestler` ( Wrestler_ID INT PRIMARY KEY, Name TEXT, Reign TEXT, Days_held TEXT, Location TEXT, Event TEXT ); Sample rows from `wrestler`: (1, Rey Misterio Sr., 1, 344, Tijuana , Mexico, Live event), (2, Fishman, 1, 113, Tijuana , Mexico, Live event), (3, Villaño IV, 1, 1285, Tijuana , Mexico, Live event), CREATE TABLE `Elimination` ( Elimination_ID TEXT PRIMARY KEY, Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID), Team TEXT, Eliminated_By TEXT, Elimination_Move TEXT, Time TEXT ); Sample rows from `Elimination`: (1, 1, Team Orton, Punk, Go To Sleep, 00:11), (2, 2, Team Batista, Benjamin, Paydirt, 07:38), (3, 4, Team Batista, Orton, Rope hung DDT, 10:45), ",
        "output": "SELECT team FROM elimination GROUP BY team HAVING COUNT(*)  >  3"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are all info of students who registered courses but not attended courses? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1 VARCHAR(80), line_2 VARCHAR(80), city VARCHAR(50), zip_postcode CHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (5, 0900 Roderick Oval New Albina, WA 19200-7914, Suite 096, Linnealand, 862, Montana, USA), (9, 966 Dach Ports Apt. 322 Lake Harmonyhaven, VA 65235, Apt. 163, South Minnie, 716, Texas, USA), (29, 28550 Broderick Underpass Suite 667 Zakaryhaven, WY 22945-1534, Apt. 419, North Trystanborough, 112, Vermont, USA), CREATE TABLE `People` ( person_id INTEGER, first_name VARCHAR(255), middle_name VARCHAR(255), last_name VARCHAR(255), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), login_name VARCHAR(40), password VARCHAR(40) ); Sample rows from `People`: (111, Shannon, Elissa, Senger, 01955267735, javier.trantow@example.net, pgub, 5e4ff49a61b3544da3ad7dc7e2cf28847564c64c), (121, Virginie, Jasmin, Hartmann, (508)319-2970x043, boyer.lonie@example.com, bkkv, b063331ea8116befaa7b84c59c6a22200f5f8caa), (131, Dariana, Hayley, Bednar, (262)347-9364x516, leila14@example.net, zops, b20b6a9f24aadeda70d54e410c3219f61fb063fb), CREATE TABLE `Students` ( student_id INTEGER REFERENCES People(person_id), student_details VARCHAR(255) ); Sample rows from `Students`: (111, Marry), (121, Martin), (131, Barry), CREATE TABLE `Courses` ( course_id VARCHAR(100) PRIMARY KEY, course_name VARCHAR(120), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Courses`: (301, statistics, statistics, None), (302, English, English, None), (303, French, French, None), CREATE TABLE `People_Addresses` ( person_address_id INTEGER, person_id INTEGER REFERENCES People(person_id), address_id INTEGER REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `People_Addresses`: (122, 111, 9, 2012-09-26 13:21:00, 2018-03-21 09:46:30), (257, 121, 5, 2008-07-31 02:17:25, 2018-03-09 02:11:12), (269, 131, 88, 2008-05-26 20:43:41, 2018-03-11 20:26:41), CREATE TABLE `Student_Course_Registrations` ( student_id INTEGER PRIMARY KEY REFERENCES Students(student_id), course_id INTEGER PRIMARY KEY REFERENCES Courses(course_id), registration_date DATETIME ); Sample rows from `Student_Course_Registrations`: (111, 301, 2008-11-04 10:35:13), (121, 301, 2008-10-04 10:35:13), (121, 303, 2008-11-14 10:35:13), CREATE TABLE `Student_Course_Attendance` ( student_id INTEGER PRIMARY KEY REFERENCES Student_Course_Registrations(student_id), course_id INTEGER PRIMARY KEY REFERENCES Student_Course_Registrations(course_id), date_of_attendance DATETIME ); Sample rows from `Student_Course_Attendance`: (111, 301, 2008-11-04 10:35:13), (121, 301, 2012-04-09 11:44:34), (121, 303, 2014-04-09 11:44:34), CREATE TABLE `Candidates` ( candidate_id INTEGER REFERENCES People(person_id), candidate_details VARCHAR(255) ); Sample rows from `Candidates`: (111, Jane), (121, Robert), (131, Alex), CREATE TABLE `Candidate_Assessments` ( candidate_id INTEGER PRIMARY KEY REFERENCES Candidates(candidate_id), qualification CHAR(15) PRIMARY KEY, assessment_date DATETIME, asessment_outcome_code CHAR(15) ); Sample rows from `Candidate_Assessments`: (111, A, 2010-04-07 11:44:34, Pass), (121, B, 2010-04-17 11:44:34, Pass), (131, D, 2010-04-05 11:44:34, Fail), ",
        "output": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the total amount of grants given by each organisations? Also list the organisation id. ###filtered_database_schema: CREATE TABLE `Document_Types` ( document_type_code VARCHAR(10) PRIMARY KEY, document_description VARCHAR(255) ); Sample rows from `Document_Types`: (APP, Initial Application), (REG, Regular), CREATE TABLE `Documents` ( document_id INTEGER, document_type_code VARCHAR(10) REFERENCES Document_Types(document_type_code), grant_id INTEGER REFERENCES Grants(grant_id), sent_date DATETIME, response_received_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Documents`: (1, APP, 5, 1986-11-30 07:56:35, 1977-12-01 02:18:53, ), (2, APP, 13, 2004-01-23 11:57:08, 1979-12-08 10:38:07, ), (3, REG, 10, 1999-03-03 12:25:58, 1995-09-12 13:13:48, ), CREATE TABLE `Grants` ( grant_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), grant_amount DECIMAL(19,4), grant_start_date DATETIME, grant_end_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Grants`: (1, 10, 4094.542, 2016-11-20 00:18:51, 2004-10-24 09:09:39, et), (2, 3, 281.2446, 1985-10-09 20:08:49, 1985-06-08 00:22:07, occaecati), (3, 14, 4515947.7015, 1970-09-19 22:53:49, 1989-03-16 18:27:16, et), CREATE TABLE `Organisation_Types` ( organisation_type VARCHAR(10) PRIMARY KEY, organisation_type_description VARCHAR(255) ); Sample rows from `Organisation_Types`: (RES, Research), (SPON, Sponsor), CREATE TABLE `Organisations` ( organisation_id INTEGER, organisation_type VARCHAR(10) REFERENCES Organisation_Types(organisation_type), organisation_details VARCHAR(255) ); Sample rows from `Organisations`: (1, RES, et), (2, RES, eius), (3, RES, impedit), CREATE TABLE `Project_Outcomes` ( project_id INTEGER REFERENCES Projects(project_id), outcome_code VARCHAR(10) REFERENCES Research_Outcomes(outcome_code), outcome_details VARCHAR(255) ); Sample rows from `Project_Outcomes`: (4, Paper, None), (3, Patent, None), (9, Paper, None), CREATE TABLE `Project_Staff` ( staff_id DOUBLE PRIMARY KEY, project_id INTEGER REFERENCES Projects(project_id), role_code VARCHAR(10) REFERENCES Staff_Roles(role_code), date_from DATETIME, date_to DATETIME, other_details VARCHAR(255) ); Sample rows from `Project_Staff`: (0.0, 2, leader, 1981-10-04 22:44:50, 1985-05-30 22:26:30, None), (674810.0, 5, leader, 2003-04-19 15:06:20, 2010-12-08 11:55:36, None), (779.0, 2, researcher, 1981-10-09 21:32:53, 2004-12-16 13:03:36, None), CREATE TABLE `Projects` ( project_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), project_details VARCHAR(255) ); Sample rows from `Projects`: (1, 15, porro), (2, 11, et), (3, 7, sint), CREATE TABLE `Research_Outcomes` ( outcome_code VARCHAR(10) PRIMARY KEY, outcome_description VARCHAR(255) ); Sample rows from `Research_Outcomes`: (Paper, Published Research Paper), (Patent, Research Patent), CREATE TABLE `Research_Staff` ( staff_id INTEGER, employer_organisation_id INTEGER REFERENCES Organisations(organisation_id), staff_details VARCHAR(255) ); Sample rows from `Research_Staff`: (1, 1, quo), (2, 4, est), (3, 5, aspernatur), CREATE TABLE `Staff_Roles` ( role_code VARCHAR(10) PRIMARY KEY, role_description VARCHAR(255) ); Sample rows from `Staff_Roles`: (leader, Project Leader), (researcher, Project Researcher), CREATE TABLE `Tasks` ( task_id INTEGER, project_id INTEGER REFERENCES Projects(project_id), task_details VARCHAR(255), eg Agree Objectives VARCHAR(1) ); Sample rows from `Tasks`: (1, 1, a, None), (2, 2, b, None), (3, 3, c, None), ",
        "output": "SELECT SUM(grant_amount) ,  organisation_id FROM grants GROUP BY organisation_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the customer phone numbers under the policy \"Life Insurance\"? ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_name VARCHAR(40) ); Sample rows from `Customers`: (194, America Jaskolski), (214, Ellsworth Paucek), (256, Mrs. Hanna Willms), CREATE TABLE `Services` ( Service_ID INTEGER, Service_name VARCHAR(40) ); Sample rows from `Services`: (1, New policy application), (4, Close a policy), (6, Change a policy), CREATE TABLE `Available_Policies` ( Policy_ID INTEGER PRIMARY KEY, policy_type_code CHAR(15), Customer_Phone VARCHAR(255) ); Sample rows from `Available_Policies`: (246, Life Insurance, +16(2)5838999222), (257, Property Insurance, 242.763.9214), (300, Property Insurance, 1-416-503-7735x94204), CREATE TABLE `Customers_Policies` ( Customer_ID INTEGER PRIMARY KEY REFERENCES Customers(Customer_ID), Policy_ID INTEGER PRIMARY KEY REFERENCES Available_Policies(Policy_ID), Date_Opened DATE, Date_Closed DATE ); Sample rows from `Customers_Policies`: (214, 257, 2016-11-19, 2018-03-04), (214, 301, 2016-04-12, 2018-02-07), (256, 583, 2016-07-22, 2018-02-20), CREATE TABLE `First_Notification_of_Loss` ( FNOL_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers_Policies(Customer_ID), Policy_ID INTEGER REFERENCES Customers_Policies(Policy_ID), Service_ID INTEGER REFERENCES Services(Service_ID) ); Sample rows from `First_Notification_of_Loss`: (532, 214, 257, 6), (1611, 996, 993, 9), (1722, 996, 879, 6), CREATE TABLE `Claims` ( Claim_ID INTEGER PRIMARY KEY, FNOL_ID INTEGER REFERENCES First_Notification_of_Loss(FNOL_ID), Effective_Date DATE ); Sample rows from `Claims`: (134, 1722, 1973-08-18), (145, 1611, 2014-10-19), (228, 532, 1975-05-07), CREATE TABLE `Settlements` ( Settlement_ID INTEGER PRIMARY KEY, Claim_ID INTEGER REFERENCES Claims(Claim_ID), Effective_Date DATE, Settlement_Amount REAL ); Sample rows from `Settlements`: (161, 717, 2009-11-20, 6451.65), (176, 641, 1971-06-29, 1588.45), (205, 604, 1978-09-09, 9814.39), ",
        "output": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the paper in PVLDB with more than 200 citations . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT t2.title FROM publication as t2 JOIN journal as t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.citation_num  >  200;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the first names and last names of teachers in alphabetical order of last name. ###filtered_database_schema: CREATE TABLE `Ref_Address_Types` ( address_type_code VARCHAR(15) PRIMARY KEY, address_type_description VARCHAR(80) ); Sample rows from `Ref_Address_Types`: (BILL, Billing), (HOME, Home or Residence), CREATE TABLE `Ref_Detention_Type` ( detention_type_code VARCHAR(10) PRIMARY KEY, detention_type_description VARCHAR(80) ); Sample rows from `Ref_Detention_Type`: (BREAK , During Break time), (AFTER, After School), (LUNCH, Lunch-time), CREATE TABLE `Ref_Incident_Type` ( incident_type_code VARCHAR(10) PRIMARY KEY, incident_type_description VARCHAR(80) ); Sample rows from `Ref_Incident_Type`: (NOISE, Noise), (VIOLENCE, Violence), (DISTURB, Disturbance), CREATE TABLE `Addresses` ( address_id INTEGER, line_1 VARCHAR(120), line_2 VARCHAR(120), line_3 VARCHAR(120), city VARCHAR(80), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), other_address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 020 Orie Canyon, None, None, North Loyceville, 197, Hawaii, USA, None), (2, 1333 Boyle Lane, None, None, West Sean, 937, Illinois, USA, None), (3, 027 Kim Divide Apt. 492, None, None, Beierview, 918, Texas, USA, None), CREATE TABLE `Students` ( student_id INTEGER, address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(40), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), date_first_rental DATETIME, date_left_university DATETIME, other_student_details VARCHAR(255) ); Sample rows from `Students`: (1, 19, Emma, Frederic, Rohan, 235.899.9744, derrick.jenkins@example.com, 2017-12-05 15:20:04, 2018-03-03 03:33:05, None), (2, 9, Louvenia, Fatima, Hansen, 1-247-673-8446, rohan.clarabelle@example.org, 2017-08-08 22:30:36, 2018-02-24 11:12:11, None), (3, 10, Rhea, Gardner, Bergnaum, 1-751-162-9676x115, kkirlin@example.org, 2017-11-15 04:57:28, 2018-03-19 12:49:20, None), CREATE TABLE `Teachers` ( teacher_id INTEGER, address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(80), last_name VARCHAR(80), gender VARCHAR(1), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), other_details VARCHAR(255) ); Sample rows from `Teachers`: (1, 15, Lyla, Wilson, Medhurst, 1, 792.333.7714, ohammes@example.com, None), (2, 7, Sid, Tremayne, Brakus, 1, 202.626.1698x9242, deborah37@example.com, None), (3, 8, Trystan, Alexane, Schuster, 1, 583-467-0403x647, hilll.kitty@example.com, None), CREATE TABLE `Assessment_Notes` ( notes_id INTEGER, student_id INTEGER REFERENCES Students(student_id), teacher_id INTEGER REFERENCES Teachers(teacher_id), date_of_notes DATETIME, text_of_notes VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Assessment_Notes`: (1, 7, 3, 1978-04-15 04:49:18, None, None), (2, 11, 10, 2005-06-30 02:48:35, None, None), (3, 15, 3, 1988-06-09 00:24:01, None, None), CREATE TABLE `Behavior_Incident` ( incident_id INTEGER, incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code), student_id INTEGER REFERENCES Students(student_id), date_incident_start DATETIME, date_incident_end DATETIME, incident_summary VARCHAR(255), recommendations VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Behavior_Incident`: (1, NOISE, 6, 2017-07-09 10:04:13, 2018-03-08 14:08:54, None, None, None), (2, DISTURB, 13, 2018-01-31 10:51:13, 2018-03-18 18:40:05, None, None, None), (3, VIOLENCE, 1, 2017-10-10 22:43:54, 2018-03-22 02:10:35, None, Transfer schools, None), CREATE TABLE `Detention` ( detention_id INTEGER, detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code), teacher_id INTEGER REFERENCES Teachers(teacher_id), datetime_detention_start DATETIME, datetime_detention_end DATETIME, detention_summary VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Detention`: (1, AFTER, 7, 2017-09-05 00:38:25, 2018-03-08 02:08:32, None, None), (2, AFTER, 14, 2018-01-10 08:09:02, 2018-03-07 04:24:48, None, None), (3, BREAK , 11, 2017-12-14 06:40:29, 2018-03-08 09:16:38, None, None), CREATE TABLE `Student_Addresses` ( student_id INTEGER REFERENCES Students(student_id), address_id INTEGER REFERENCES Addresses(address_id), date_address_from DATETIME, date_address_to DATETIME, monthly_rental DECIMAL(19,4), other_details VARCHAR(255) ); Sample rows from `Student_Addresses`: (6, 12, 2017-10-16 13:56:34, 2018-03-15 10:37:19, 826.4319, house), (3, 18, 2017-06-19 12:39:39, 2018-03-02 00:19:57, 1113.0996, house), (8, 1, 2017-10-31 12:40:34, 2018-02-25 05:21:34, 1297.3186, apartment), CREATE TABLE `Students_in_Detention` ( student_id INTEGER REFERENCES Students(student_id), detention_id INTEGER REFERENCES Detention(detention_id), incident_id INTEGER REFERENCES Behavior_Incident(incident_id) ); Sample rows from `Students_in_Detention`: (3, 15, 1), (8, 13, 3), (11, 6, 11), ",
        "output": "SELECT first_name ,  last_name FROM teachers ORDER BY last_name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the clubs having \"Davis Steven\" as a member. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Club` ( ClubID INTEGER, ClubName VARCHAR(40), ClubDesc VARCHAR(1024), ClubLocation VARCHAR(40) ); Sample rows from `Club`: (1, Bootup Baltimore, Refurbish computers; teach kids and adults about computer basics., AKW), (2, Hopkins Student Enterprises, Venture capital fund for student business., AKW), (3, Pen and Paper Gaming, Play pen and paper games on campus., HHH), CREATE TABLE `Member_of_club` ( StuID INTEGER REFERENCES Student(StuID), ClubID INTEGER REFERENCES Club(ClubID), Position VARCHAR(40) ); Sample rows from `Member_of_club`: (1001, 1, President), (1007, 4, Vice-President), (1008, 2, CTO), ",
        "output": "SELECT DISTINCT t1.clubname FROM club as t1 JOIN member_of_club as t2 ON t1.clubid  =  t2.clubid JOIN student as t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the total population for all the districts that have an area larger tahn the average city area? ###filtered_database_schema: CREATE TABLE `product` ( product_id INT PRIMARY KEY, product TEXT, dimensions TEXT, dpi REAL, pages_per_minute_color REAL, max_page_size TEXT, interface TEXT ); Sample rows from `product`: (1, Fujitsu fi-6130 A4 Series Scanner, 301 x 160 x 158, 600.0, 30.0, A4, USB 2.0), (2, Plustek MobileOffice D28 Corporate, 303 x 94 x 60, 600.0, 28.0, A4, USB 2.0), (3, Xerox Travel Scanner 100, 289 x 51 x 38, 600.0, 4.0, A4, USB 2.0), CREATE TABLE `store` ( Store_ID INT PRIMARY KEY, Store_Name TEXT, Type TEXT, Area_size REAL, Number_of_product_category REAL, Ranking INT ); Sample rows from `store`: (1, Miramichi, City Mall, 179.84, 17811.0, 2), (2, Neguac, Village Store, 26.69, 1678.0, 3), (3, Rogersville, Village Store, 7.23, 1170.0, 1), CREATE TABLE `district` ( District_ID INT PRIMARY KEY, District_name TEXT, Headquartered_City TEXT, City_Population REAL, City_Area REAL ); Sample rows from `district`: (1, Attock District, Attock City, 94620.0, 20.0), (2, Bahawalnagar District, Bahawalnagar City, 134936.0, 13.0), (3, Bahawalpur District, Bahawalpur City, 530438.0, 38.0), CREATE TABLE `store_product` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), Product_ID INT PRIMARY KEY REFERENCES product(Product_ID) ); Sample rows from `store_product`: (1, 1), (1, 2), (1, 3), CREATE TABLE `store_district` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), District_ID INT REFERENCES district(District_ID) ); Sample rows from `store_district`: (1, 15), (2, 15), (3, 11), ",
        "output": "SELECT SUM(city_population) FROM district WHERE city_area  >  (SELECT AVG(city_area) FROM district)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif' ###filtered_database_schema: CREATE TABLE `mountain` ( id INT PRIMARY KEY, name TEXT, Height REAL, Prominence REAL, Range TEXT, Country TEXT ); Sample rows from `mountain`: (1, Abune Yosef / Guliba Amba, 4260.0, 1909.0, Lasta Massif, Ethiopia), (2, Ioll / Yoll, 4220.0, 350.0, Kollo Massif, Ethiopia), (3, Bada, 4195.0, 1605.0, Arsi Mountains, Ethiopia), CREATE TABLE `camera_lens` ( id INT PRIMARY KEY, brand TEXT, name TEXT, focal_length_mm REAL, max_aperture REAL ); Sample rows from `camera_lens`: (1, Olympus, Olympus 15mm f/8.0 Body Cap, 15.0, 8.0), (2, Olympus, Olympus M.Zuiko Digital ED 45mm f/1.8, 45.0, 1.8), (3, Olympus, Olympus M.Zuiko Digital ED 75mm f/1.8, 75.0, 1.8), CREATE TABLE `photos` ( id INT PRIMARY KEY, camera_lens_id INT REFERENCES camera_lens(id), mountain_id INT REFERENCES mountain(id), color TEXT, name TEXT ); Sample rows from `photos`: (1, 1, 20, RBG, monkey), (2, 10, 2, RBG, rabbits), (3, 10, 1, Black/White, deers), ",
        "output": "SELECT t3.brand FROM mountain as t1 JOIN photos as t2 ON t1.id  =  t2.mountain_id JOIN camera_lens as t3 ON t2.camera_lens_id  =  t3.id WHERE t1.range  =  'Toubkal Atlas' INTERSECT SELECT t3.brand FROM mountain as t1 JOIN photos as t2 ON t1.id  =  t2.mountain_id JOIN camera_lens as t3 ON t2.camera_lens_id  =  t3.id WHERE t1.range  =  'Lasta Massif'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the country in which the customer Carole Bernhard lived? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 3904 Stroman Passage, Port Melyssa, 14445, Georgia, USA), (2, 053 Quigley Island, Hagenesfurt, 22194, Kentucky, USA), (3, 00704 Zoe Alley, Lake Elaina, 08938, Georgia, USA), CREATE TABLE `Staff` ( staff_id INTEGER, staff_address_id INTEGER REFERENCES Addresses(address_id), nickname VARCHAR(80), first_name VARCHAR(80), middle_name VARCHAR(80), last_name VARCHAR(80), date_of_birth DATETIME, date_joined_staff DATETIME, date_left_staff DATETIME ); Sample rows from `Staff`: (1, 14, thompson.constantin, Janessa, Amara, Sawayn, 2010-12-08 16:55:14, 2017-04-27 03:21:26, 2018-03-23 22:53:12), (2, 3, santos45, Camylle, Icie, Weissnat, 2015-08-01 13:22:43, 2016-06-06 08:54:28, 2018-03-10 15:25:00), (3, 5, ynader, Kaitlin, Stephania, Mertz, 1994-05-17 05:32:11, 2018-01-02 12:24:24, 2018-03-24 10:11:08), CREATE TABLE `Vehicles` ( vehicle_id INTEGER, vehicle_details VARCHAR(255) ); Sample rows from `Vehicles`: (1, Van), (2, Truck), (3, Car), CREATE TABLE `Customers` ( customer_id INTEGER, customer_address_id INTEGER REFERENCES Addresses(address_id), customer_status_code VARCHAR(15), date_became_customer DATETIME, date_of_birth DATETIME, first_name VARCHAR(80), last_name VARCHAR(80), amount_outstanding DOUBLE, email_address VARCHAR(250), phone_number VARCHAR(255), cell_mobile_phone_number VARCHAR(255) ); Sample rows from `Customers`: (1, 13, Bad Customer, 2016-05-11 17:03:48, 1998-12-15 13:24:40, Carole, Bernhard, 255.0, everette.goyette@example.org, 07278206718, 861-638-9797), (2, 10, Bad Customer, 2015-11-16 22:52:14, 1995-07-17 12:13:16, Genevieve, Terry, 7256.0, huel.jana@example.org, +14(5)2351480248, 578-518-4785x612), (3, 10, Good Customer, 2016-04-08 00:28:15, 1994-06-21 01:34:56, Clara, Ortiz, 9443.0, hilario.sporer@example.org, 374-483-2758x85087, 1-197-686-2849x8761), CREATE TABLE `Customer_Payments` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), datetime_payment DATETIME PRIMARY KEY, payment_method_code VARCHAR(10), amount_payment DOUBLE ); Sample rows from `Customer_Payments`: (11, 2018-02-05 18:44:46, Direct Debit, 9570.93), (2, 2018-02-24 10:07:05, Direct Debit, 8180.26), (14, 2018-02-27 20:08:53, Direct Debit, 4610.26), CREATE TABLE `Lessons` ( lesson_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), lesson_status_code VARCHAR(15), staff_id INTEGER REFERENCES Staff(staff_id), vehicle_id INTEGER REFERENCES Vehicles(vehicle_id), lesson_date DATETIME, lesson_time VARCHAR(10), price DOUBLE ); Sample rows from `Lessons`: (1, 6, Cancelled, 8, 3, 2018-02-28 10:55:36, 5, 199.0), (2, 8, Cancelled, 14, 3, 2018-03-07 16:12:36, 6, 167.0), (3, 6, Cancelled, 11, 2, 2018-03-03 15:10:16, 3, 352.0), ",
        "output": "SELECT t2.country FROM customers as t1 JOIN addresses as t2 ON t1.customer_address_id = t2.address_id WHERE t1.first_name = \"Carole\" AND t1.last_name = \"Bernhard\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: whats the largest city ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the area of new mexico ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT area FROM state WHERE state_name  =  \"new mexico\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the names of journalists and the dates of the events they reported. ###filtered_database_schema: CREATE TABLE `event` ( Event_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Name TEXT, Event_Attendance INT ); Sample rows from `event`: (1, 13 October 2008, Marathon, Olympia Games Openning, 6650), (2, 11 October 2007, Victoria, Government Hearing, 369), (3, 7 October 2010, Motagua, Public Debating, 1675), CREATE TABLE `journalist` ( journalist_ID INT PRIMARY KEY, Name TEXT, Nationality TEXT, Age TEXT, Years_working INT ); Sample rows from `journalist`: (1, Herbert Swindells, England, 37, 10), (2, Fred Keenor, Wales, 27, 5), (3, George Gilchrist, England, 28, 6), CREATE TABLE `news_report` ( journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID), Event_ID INT PRIMARY KEY REFERENCES event(Event_ID), Work_Type TEXT ); Sample rows from `news_report`: (1, 3, Screening), (11, 5, Screening), (6, 1, Screening), ",
        "output": "SELECT t3.name ,  t2.date FROM news_report as t1 JOIN event as t2 ON t1.event_id  =  t2.event_id JOIN journalist as t3 ON t1.journalist_id  =  t3.journalist_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the papers by \" H. V. Jagadish \" on VLDB conference after 2000 . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT t4.title FROM publication as t4 JOIN conference as t2 ON t4.cid  =  t2.cid JOIN writes as t3 ON t3.pid  =  t4.pid JOIN author as t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.year  >  2000;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many cities are there in state \"Colorado\"? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), town_city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 25518 Ortiz Centers, West Stacy, 193, NorthCarolina, USA), (2, 033 Stracke Parkways, Lake Meaghan, 227, Colorado, USA), (3, 269 Flatley Port Suite 062, Breanneberg, 527, NewHampshire, USA), CREATE TABLE `Services` ( service_id INTEGER, service_type_code VARCHAR(15), service_name VARCHAR(80), service_descriptio VARCHAR(255) ); Sample rows from `Services`: (1, Education, Education, Education), (2, Welfare, Health, Welfare), (3, Education, Education, Health), CREATE TABLE `Forms` ( form_id INTEGER, form_type_code VARCHAR(15), service_id INTEGER REFERENCES Services(service_id), form_number VARCHAR(50), form_name VARCHAR(80), form_description VARCHAR(255) ); Sample rows from `Forms`: (1, Basic, 13, 8069, SSN Application, Form for SSN Application), (2, Complex, 9, 2675, Marriage Certificate, Marriage Certificate), (3, Complex, 2, 9837, Divorce Certificate, Divorce Certificate), CREATE TABLE `Individuals` ( individual_id INTEGER, individual_first_name VARCHAR(80), individual_middle_name VARCHAR(80), inidividual_phone VARCHAR(80), individual_email VARCHAR(80), individual_address VARCHAR(255), individual_last_name VARCHAR(80) ); Sample rows from `Individuals`: (1, Oscar, Hosea, 1-925-696-5232, amie.okuneva@example.org, 6956 Lia Plaza, Maggio), (2, Geovanny, Antonia, 075.012.6775x409, jamey.effertz@example.net, 69578 Baylee Prairie, Kerluke), (3, Casper, Mitchell, 1-818-062-2837, brandon.hermiston@example.com, 4555 Hane Orchard, Kutch), CREATE TABLE `Organizations` ( organization_id INTEGER, date_formed DATETIME, organization_name VARCHAR(255), uk_vat_number VARCHAR(20) ); Sample rows from `Organizations`: (1, 2016-08-24 23:52:48, Labour Party, 2157), (2, 2016-10-01 12:42:01, Plaid Cymru, 7459), (3, 2016-10-09 07:22:53, Conservative, 1211), CREATE TABLE `Parties` ( party_id INTEGER, payment_method_code VARCHAR(15), party_phone VARCHAR(80), party_email VARCHAR(80) ); Sample rows from `Parties`: (1, Cheque, 05374656172, enrico09@example.com), (2, Credit Card, 1-525-947-7867x51521, brakus.aliya@example.com), (3, Cheque, 1-606-232-3728x3568, frida57@example.org), CREATE TABLE `Organization_Contact_Individuals` ( individual_id INTEGER PRIMARY KEY REFERENCES Individuals(individual_id), organization_id INTEGER PRIMARY KEY REFERENCES Organizations(organization_id), date_contact_from DATETIME, date_contact_to DATETIME ); Sample rows from `Organization_Contact_Individuals`: (13, 1, 2016-08-16 22:09:11, 2018-03-25 10:27:18), (11, 1, 2017-03-02 00:00:16, 2018-03-06 05:39:43), (10, 3, 2016-08-23 03:24:24, 2018-03-12 07:55:28), CREATE TABLE `Party_Addresses` ( party_id INTEGER PRIMARY KEY REFERENCES Parties(party_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_address_from DATETIME, address_type_code VARCHAR(15), date_address_to DATETIME ); Sample rows from `Party_Addresses`: (10, 8, 2016-04-08 22:40:02, Residence, 2018-02-28 23:14:41), (15, 5, 2016-05-20 23:22:06, Billing, 2018-01-29 16:48:01), (4, 4, 2016-05-14 15:13:30, Delivery, 2018-02-25 19:39:16), CREATE TABLE `Party_Forms` ( party_id INTEGER PRIMARY KEY REFERENCES Parties(party_id), form_id INTEGER PRIMARY KEY REFERENCES Forms(form_id), date_completion_started DATETIME, form_status_code VARCHAR(15), date_fully_completed DATETIME ); Sample rows from `Party_Forms`: (2, 4, 2017-12-17 11:29:47, Completed, 2018-02-11 16:46:10), (15, 4, 2017-12-16 15:25:48, Partially Completed, 2018-02-18 16:09:04), (8, 5, 2017-12-09 21:26:11, Partially Completed, 2018-02-05 16:16:58), CREATE TABLE `Party_Services` ( booking_id INTEGER, customer_id INTEGER REFERENCES Parties(party_id), service_id INTEGER REFERENCES Services(service_id), service_datetime DATETIME, booking_made_date DATETIME ); Sample rows from `Party_Services`: (1, 10, 12, 2018-03-10 22:43:12, 2018-03-23 23:56:51), (2, 14, 11, 2018-03-05 15:06:23, 2018-03-25 11:08:29), (3, 4, 7, 2018-03-08 10:39:29, 2018-03-24 11:09:52), ",
        "output": "SELECT COUNT(*) FROM addresses WHERE state_province_county  =  \"Colorado\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many unique classes are offered? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT COUNT(DISTINCT class_code) FROM class"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which organisation hired the most number of research staff? List the organisation id, type and detail. ###filtered_database_schema: CREATE TABLE `Document_Types` ( document_type_code VARCHAR(10) PRIMARY KEY, document_description VARCHAR(255) ); Sample rows from `Document_Types`: (APP, Initial Application), (REG, Regular), CREATE TABLE `Documents` ( document_id INTEGER, document_type_code VARCHAR(10) REFERENCES Document_Types(document_type_code), grant_id INTEGER REFERENCES Grants(grant_id), sent_date DATETIME, response_received_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Documents`: (1, APP, 5, 1986-11-30 07:56:35, 1977-12-01 02:18:53, ), (2, APP, 13, 2004-01-23 11:57:08, 1979-12-08 10:38:07, ), (3, REG, 10, 1999-03-03 12:25:58, 1995-09-12 13:13:48, ), CREATE TABLE `Grants` ( grant_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), grant_amount DECIMAL(19,4), grant_start_date DATETIME, grant_end_date DATETIME, other_details VARCHAR(255) ); Sample rows from `Grants`: (1, 10, 4094.542, 2016-11-20 00:18:51, 2004-10-24 09:09:39, et), (2, 3, 281.2446, 1985-10-09 20:08:49, 1985-06-08 00:22:07, occaecati), (3, 14, 4515947.7015, 1970-09-19 22:53:49, 1989-03-16 18:27:16, et), CREATE TABLE `Organisation_Types` ( organisation_type VARCHAR(10) PRIMARY KEY, organisation_type_description VARCHAR(255) ); Sample rows from `Organisation_Types`: (RES, Research), (SPON, Sponsor), CREATE TABLE `Organisations` ( organisation_id INTEGER, organisation_type VARCHAR(10) REFERENCES Organisation_Types(organisation_type), organisation_details VARCHAR(255) ); Sample rows from `Organisations`: (1, RES, et), (2, RES, eius), (3, RES, impedit), CREATE TABLE `Project_Outcomes` ( project_id INTEGER REFERENCES Projects(project_id), outcome_code VARCHAR(10) REFERENCES Research_Outcomes(outcome_code), outcome_details VARCHAR(255) ); Sample rows from `Project_Outcomes`: (4, Paper, None), (3, Patent, None), (9, Paper, None), CREATE TABLE `Project_Staff` ( staff_id DOUBLE PRIMARY KEY, project_id INTEGER REFERENCES Projects(project_id), role_code VARCHAR(10) REFERENCES Staff_Roles(role_code), date_from DATETIME, date_to DATETIME, other_details VARCHAR(255) ); Sample rows from `Project_Staff`: (0.0, 2, leader, 1981-10-04 22:44:50, 1985-05-30 22:26:30, None), (674810.0, 5, leader, 2003-04-19 15:06:20, 2010-12-08 11:55:36, None), (779.0, 2, researcher, 1981-10-09 21:32:53, 2004-12-16 13:03:36, None), CREATE TABLE `Projects` ( project_id INTEGER, organisation_id INTEGER REFERENCES Organisations(organisation_id), project_details VARCHAR(255) ); Sample rows from `Projects`: (1, 15, porro), (2, 11, et), (3, 7, sint), CREATE TABLE `Research_Outcomes` ( outcome_code VARCHAR(10) PRIMARY KEY, outcome_description VARCHAR(255) ); Sample rows from `Research_Outcomes`: (Paper, Published Research Paper), (Patent, Research Patent), CREATE TABLE `Research_Staff` ( staff_id INTEGER, employer_organisation_id INTEGER REFERENCES Organisations(organisation_id), staff_details VARCHAR(255) ); Sample rows from `Research_Staff`: (1, 1, quo), (2, 4, est), (3, 5, aspernatur), CREATE TABLE `Staff_Roles` ( role_code VARCHAR(10) PRIMARY KEY, role_description VARCHAR(255) ); Sample rows from `Staff_Roles`: (leader, Project Leader), (researcher, Project Researcher), CREATE TABLE `Tasks` ( task_id INTEGER, project_id INTEGER REFERENCES Projects(project_id), task_details VARCHAR(255), eg Agree Objectives VARCHAR(1) ); Sample rows from `Tasks`: (1, 1, a, None), (2, 2, b, None), (3, 3, c, None), ",
        "output": "SELECT t1.organisation_id ,  t1.organisation_type ,  t1.organisation_details FROM organisations as t1 JOIN research_staff as t2 ON t1.organisation_id  =  t2.employer_organisation_id GROUP BY t1.organisation_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the number of papers on VLDB conference after 2000 . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT COUNT(DISTINCT t2.title) FROM publication as t2 JOIN conference as t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average and maximum number of total passengers for train stations in London or Glasgow? ###filtered_database_schema: CREATE TABLE `station` ( Station_ID INT PRIMARY KEY, Name TEXT, Annual_entry_exit REAL, Annual_interchanges REAL, Total_Passengers REAL, Location TEXT, Main_Services TEXT, Number_of_Platforms INT ); Sample rows from `station`: (1, London Waterloo, 94.046, 9.489, 103.534, London, South Western Main Line West of England Main Line, 19), (2, London Victoria, 76.231, 9.157, 85.38, London, Brighton Main Line Chatham Main Line, 19), (3, London Bridge, 52.634, 8.742, 61.376, London, South Eastern Main Line Thameslink, 12), CREATE TABLE `train` ( Train_ID INT PRIMARY KEY, Name TEXT, Time TEXT, Service TEXT ); Sample rows from `train`: (1, Ananthapuri Express, 17:15, Daily), (2, Guruvayur Express, 22:10, Daily), (3, Guruvayur Express, 4:49, Daily), CREATE TABLE `train_station` ( Train_ID INT PRIMARY KEY REFERENCES train(Train_ID), Station_ID INT PRIMARY KEY REFERENCES station(Station_ID) ); Sample rows from `train_station`: (1, 1), (2, 1), (3, 1), ",
        "output": "SELECT AVG(total_passengers) ,  MAX(total_passengers) FROM station WHERE location  =  'London' OR location  =  'Glasgow'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are all the labels? ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT DISTINCT label FROM albums"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the origins from which more than 1 train starts. ###filtered_database_schema: CREATE TABLE `train` ( id INT PRIMARY KEY, train_number INT, name TEXT, origin TEXT, destination TEXT, time TEXT, interval TEXT ); Sample rows from `train`: (1, 16724, Ananthapuri Express, Trivandrum, Chennai, 17:15, Daily), (2, 16127, Guruvayur Express, Chennai, Guruvayur, 22:10, Daily), (3, 16128, Guruvayur Express, Guruvayur, Chennai, 4:49, Daily), CREATE TABLE `station` ( id INT PRIMARY KEY, network_name TEXT, services TEXT, local_authority TEXT ); Sample rows from `station`: (1, Amersham, Metropolitan line and Chiltern Railways, Chiltern), (2, Bushey, London Overground and London Midland, Watford), (3, Brentwood, Greater Anglia, Brentwood), CREATE TABLE `route` ( train_id INT PRIMARY KEY REFERENCES train(id), station_id INT PRIMARY KEY REFERENCES station(id) ); Sample rows from `route`: (1, 1), (1, 2), (1, 3), CREATE TABLE `weekly_weather` ( station_id INT PRIMARY KEY REFERENCES station(id), day_of_week TEXT PRIMARY KEY, high_temperature INT, low_temperature INT, precipitation REAL, wind_speed_mph INT ); Sample rows from `weekly_weather`: (1, Monday, 59, 54, 90.0, 13), (1, Tuesday, 66, 55, 20.0, 12), (1, Wednesday, 60, 52, 10.0, 14), ",
        "output": "SELECT origin FROM train GROUP BY origin HAVING COUNT(*)  >  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of users that are logged in. ###filtered_database_schema: CREATE TABLE `Roles` ( role_code VARCHAR(15) PRIMARY KEY, role_description VARCHAR(80) ); Sample rows from `Roles`: (DBA, Database Administrator), (PROJ-MGR, Project Manager), CREATE TABLE `Users` ( user_id INTEGER, role_code VARCHAR(15) REFERENCES Roles(role_code), user_name VARCHAR(40), user_login VARCHAR(40), password VARCHAR(40) ); Sample rows from `Users`: (1, PROJ-MGR, dickens.elta, 0, e72b5a2d50b39a8760764a5f7a9d68ca2f076877), (2, DBA, tremblay.raheem, 1, 9bc25a040d5647ced5ec32e1a455e90fafc10bcb), (3, DBA, lynn.haley, 0, 90db8f51449e6c39e2a01f0b649d5a92fe76bbbb), CREATE TABLE `Document_Structures` ( document_structure_code VARCHAR(15) PRIMARY KEY, parent_document_structure_code VARCHAR(15), document_structure_description VARCHAR(80) ); Sample rows from `Document_Structures`: (1, 1, Header), (6, 1, Main section), (8, 1, Bib), CREATE TABLE `Functional_Areas` ( functional_area_code VARCHAR(15) PRIMARY KEY, parent_functional_area_code VARCHAR(15), functional_area_description VARCHAR(80) ); Sample rows from `Functional_Areas`: (8, 8, Signature), (1, 8, Acknowledgement), (9, 8, Keep blank), CREATE TABLE `Images` ( image_id INTEGER, image_alt_text VARCHAR(80), image_name VARCHAR(40), image_url VARCHAR(255) ); Sample rows from `Images`: (1, Lea, top1, http://www.rempelnader.com/1.jpg), (2, Arden, top2, http://connellykertzmann.org/1.jpg), (3, Mohamed, top3, http://www.bernierconnelly.com/1.jpg), CREATE TABLE `Documents` ( document_code VARCHAR(15) PRIMARY KEY, document_structure_code VARCHAR(15) REFERENCES Document_Structures(document_structure_code), document_type_code VARCHAR(15), access_count INTEGER, document_name VARCHAR(80) ); Sample rows from `Documents`: (217, 8, Book, 1864, Learning English), (621, 1, Paper, 8208, Research about Art history), (958, 8, Book, 3769, Learning Database), CREATE TABLE `Document_Functional_Areas` ( document_code VARCHAR(15) REFERENCES Documents(document_code), functional_area_code VARCHAR(15) REFERENCES Functional_Areas(functional_area_code) ); Sample rows from `Document_Functional_Areas`: (675, 9), (930, 1), (217, 1), CREATE TABLE `Document_Sections` ( section_id INTEGER, document_code VARCHAR(15) REFERENCES Documents(document_code), section_sequence INTEGER, section_code VARCHAR(20), section_title VARCHAR(80) ); Sample rows from `Document_Sections`: (12, 714, 6072, 70, after), (15, 217, 4510, 14, after), (19, 675, 7236, 90, after), CREATE TABLE `Document_Sections_Images` ( section_id INTEGER PRIMARY KEY REFERENCES Document_Sections(section_id), image_id INTEGER PRIMARY KEY REFERENCES Images(image_id) ); Sample rows from `Document_Sections_Images`: (93, 6), (86, 2), (27, 3), ",
        "output": "SELECT COUNT(*) FROM users WHERE user_login  =  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which customer made the smallest amount of claim in one claim? Return the customer details. ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_Details VARCHAR(255) ); Sample rows from `Customers`: (252, America Jaskolski), (263, Ellsworth Paucek), (334, Mrs. Hanna Willms), CREATE TABLE `Staff` ( Staff_ID INTEGER, Staff_Details VARCHAR(255) ); Sample rows from `Staff`: (406, Clifton), (427, Cathryn), (510, Kaci), CREATE TABLE `Policies` ( Policy_ID INTEGER, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Policy_Type_Code CHAR(15), Start_Date DATETIME, End_Date DATETIME ); Sample rows from `Policies`: (125, 808, Deputy, 2018-02-10 08:56:30, 2018-03-18 09:17:26), (151, 380, Jurisdiction, 2017-12-20 06:02:31, 2017-09-16 22:04:13), (287, 334, Jurisdiction, 2017-03-16 18:16:52, 2017-11-24 06:36:51), CREATE TABLE `Claim_Headers` ( Claim_Header_ID INTEGER, Claim_Status_Code CHAR(15), Claim_Type_Code CHAR(15), Policy_ID INTEGER REFERENCES Policies(Policy_ID), Date_of_Claim DATETIME, Date_of_Settlement DATETIME, Amount_Claimed DECIMAL(20,4), Amount_Piad DECIMAL(20,4) ); Sample rows from `Claim_Headers`: (15, Settled, Handphone Subsidy, 518, 2016-05-31 06:07:11, 2018-02-23 03:46:38, 349.15, 582.03), (24, Disputed, Child Birth, 518, 2016-12-30 21:43:21, 2017-10-08 21:43:14, 318.16, 309.2), (27, Disputed, Overtime Meal Subsidy, 518, 2017-05-01 13:34:43, 2017-11-16 04:06:05, 362.71, 132.97), CREATE TABLE `Claims_Documents` ( Claim_ID INTEGER PRIMARY KEY REFERENCES Claim_Headers(Claim_Header_ID), Document_Type_Code CHAR(15) PRIMARY KEY, Created_by_Staff_ID INTEGER REFERENCES Staff(Staff_ID), Created_Date INTEGER ); Sample rows from `Claims_Documents`: (24, Document, 718, 8), (27, Document, 986, 6), (27, Medical, 427, 8), CREATE TABLE `Claims_Processing_Stages` ( Claim_Stage_ID INTEGER, Next_Claim_Stage_ID INTEGER, Claim_Status_Name VARCHAR(255), Claim_Status_Description VARCHAR(255) ); Sample rows from `Claims_Processing_Stages`: (1, 1, Open, Open a new claim), (3, 1, Close, Close a claim), CREATE TABLE `Claims_Processing` ( Claim_Processing_ID INTEGER, Claim_ID INTEGER REFERENCES Claim_Headers(Claim_Header_ID), Claim_Outcome_Code CHAR(15), Claim_Stage_ID INTEGER, Staff_ID INTEGER REFERENCES Staff(Staff_ID) ); Sample rows from `Claims_Processing`: (118, 28, In progress, 1, 771), (145, 62, In progress, 1, 589), (213, 27, In progress, 1, 589), ",
        "output": "SELECT t3.customer_details FROM claim_headers as t1 JOIN policies as t2 ON t1.policy_id  =  t2.policy_id JOIN customers as t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT MIN(amount_piad) FROM claim_headers)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: where is the lowest point in the us ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN(lowest_elevation) FROM highlow );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the members of the club \"Tennis Club\". ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Club` ( ClubID INTEGER, ClubName VARCHAR(40), ClubDesc VARCHAR(1024), ClubLocation VARCHAR(40) ); Sample rows from `Club`: (1, Bootup Baltimore, Refurbish computers; teach kids and adults about computer basics., AKW), (2, Hopkins Student Enterprises, Venture capital fund for student business., AKW), (3, Pen and Paper Gaming, Play pen and paper games on campus., HHH), CREATE TABLE `Member_of_club` ( StuID INTEGER REFERENCES Student(StuID), ClubID INTEGER REFERENCES Club(ClubID), Position VARCHAR(40) ); Sample rows from `Member_of_club`: (1001, 1, President), (1007, 4, Vice-President), (1008, 2, CTO), ",
        "output": "SELECT COUNT(*) FROM club as t1 JOIN member_of_club as t2 ON t1.clubid  =  t2.clubid JOIN student as t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the titles of items whose rating is higher than the average review rating of all items. ###filtered_database_schema: CREATE TABLE `item` ( i_id INTEGER, title varchar(20) ); Sample rows from `item`: (0, pear), (1, orange), (2, apple), CREATE TABLE `review` ( a_id INTEGER PRIMARY KEY, u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), i_id INTEGER PRIMARY KEY REFERENCES item(i_id), rating INTEGER, rank INTEGER ); Sample rows from `review`: (1, 1, 1, 10, 1), (2, 2, 1, 5, 2), (3, 1, 4, 7, 3), CREATE TABLE `useracct` ( u_id INTEGER, name varchar(128) ); Sample rows from `useracct`: (1, Helen), (2, Mark), (3, Terry), CREATE TABLE `trust` ( source_u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), target_u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), trust INTEGER ); Sample rows from `trust`: (1, 2, 10), (1, 3, 6), (2, 4, 8), ",
        "output": "SELECT t1.title FROM item as t1 JOIN review as t2 ON t1.i_id  =  t2.i_id WHERE t2.rating  >  (SELECT AVG(rating) FROM review)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the schools that were either founded before 1850 or are public? ###filtered_database_schema: CREATE TABLE `basketball_match` ( Team_ID INT PRIMARY KEY, School_ID INT REFERENCES university(School_ID), Team_Name TEXT, ACC_Regular_Season TEXT, ACC_Percent TEXT, ACC_Home TEXT, ACC_Road TEXT, All_Games TEXT, All_Games_Percent INT, All_Home TEXT, All_Road TEXT, All_Neutral TEXT ); Sample rows from `basketball_match`: (1, 1, North Carolina, 14–2, .875, 6–2, 8–0, 35–2, 0.946, 14–2, 13–0, 9–1), (2, 2, Duke, 13–3, .813, 7–1, 6–2, 28–6, 0.824, 15–1, 8–2, 5–3), (3, 4, Clemson, 10–6, .625, 7–1, 3–5, 24–10, 0.706, 14–2, 6–5, 4–3), CREATE TABLE `university` ( School_ID INT PRIMARY KEY, School TEXT, Location TEXT, Founded REAL, Affiliation TEXT, Enrollment REAL, Nickname TEXT, Primary_conference TEXT ); Sample rows from `university`: (1, University of Delaware, Newark, DE, 1743.0, Public, 19067.0, Fightin' Blue Hens, Colonial Athletic Association ( D-I )), (2, Lebanon Valley College, Annville, PA, 1866.0, Private/Methodist, 2100.0, Flying Dutchmen, MAC Commonwealth Conference ( D-III )), (3, University of Rhode Island, Kingston, RI, 1892.0, Public, 19095.0, Rams, Atlantic 10 Conference ( D-I )), ",
        "output": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the authors who have papers in VLDB conference before 2002 after 1995 . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT t1.name FROM publication as t4 JOIN conference as t2 ON t4.cid  =  t2.cid JOIN writes as t3 ON t3.pid  =  t4.pid JOIN author as t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  <  2002 AND t4.year  >  1995;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name of the ship with the largest tonnage? ###filtered_database_schema: CREATE TABLE `mission` ( Mission_ID INT PRIMARY KEY, Ship_ID INT REFERENCES ship(Ship_ID), Code TEXT, Launched_Year INT, Location TEXT, Speed_knots INT, Fate TEXT ); Sample rows from `mission`: (1, 1, VMV-1, 1930, Germany, 25, Decommissioned 1950), (2, 2, VMV-2, 1930, Germany, 25, Decommissioned 1950), (3, 3, VMV-3, 1930, Helsinki , Finland, 23, Lost (burned) 1931), CREATE TABLE `ship` ( Ship_ID INT PRIMARY KEY, Name TEXT, Type TEXT, Nationality TEXT, Tonnage INT ); Sample rows from `ship`: (1, Corbridge, Cargo ship, United Kingdom, 3687), (2, Farringford, Battle ship, United States, 3146), (3, Dromonby, Cargo ship, United Kingdom, 3627), ",
        "output": "SELECT name FROM ship ORDER BY tonnage DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of items whose rank is higher than 3 and whose average rating is above 5. ###filtered_database_schema: CREATE TABLE `item` ( i_id INTEGER, title varchar(20) ); Sample rows from `item`: (0, pear), (1, orange), (2, apple), CREATE TABLE `review` ( a_id INTEGER PRIMARY KEY, u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), i_id INTEGER PRIMARY KEY REFERENCES item(i_id), rating INTEGER, rank INTEGER ); Sample rows from `review`: (1, 1, 1, 10, 1), (2, 2, 1, 5, 2), (3, 1, 4, 7, 3), CREATE TABLE `useracct` ( u_id INTEGER, name varchar(128) ); Sample rows from `useracct`: (1, Helen), (2, Mark), (3, Terry), CREATE TABLE `trust` ( source_u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), target_u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), trust INTEGER ); Sample rows from `trust`: (1, 2, 10), (1, 3, 6), (2, 4, 8), ",
        "output": "SELECT t1.title FROM item as t1 JOIN review as t2 ON t1.i_id  =  t2.i_id WHERE t2.rank  >  3 INTERSECT SELECT t1.title FROM item as t1 JOIN review as t2 ON t1.i_id  =  t2.i_id GROUP BY t2.i_id HAVING AVG(t2.rating)  >  5"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids and trade names of the medicine that can interact with at least 3 enzymes? ###filtered_database_schema: CREATE TABLE `medicine` ( id INT PRIMARY KEY, name TEXT, Trade_Name TEXT, FDA_approved TEXT ); Sample rows from `medicine`: (1, Amisulpride, Solian, No), (2, Aripiprazole, Abilify, Yes), (3, Asenapine, Saphris, Yes), CREATE TABLE `enzyme` ( id INT PRIMARY KEY, name TEXT, Location TEXT, Product TEXT, Chromosome TEXT, OMIM INT, Porphyria TEXT ); Sample rows from `enzyme`: (1, ALA synthase, Mitochondrion, δ-Aminolevulinic acid, 3p21.1, 125290, none), (2, ALA dehydratase, Cytosol, Porphobilinogen, 9q34, 125270, ALA-Dehydratase deficiency), (3, PBG deaminase, Cytosol, Hydroxymethyl bilane, 11q23.3, 176000, acute intermittent porphyria), CREATE TABLE `medicine_enzyme_interaction` ( enzyme_id INT PRIMARY KEY REFERENCES enzyme(id), medicine_id INT PRIMARY KEY REFERENCES medicine(id), interaction_type TEXT ); Sample rows from `medicine_enzyme_interaction`: (1, 1, inhibitor), (1, 2, inhibitor), (1, 3, inhibitor), ",
        "output": "SELECT t1.id ,  t1.trade_name FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id HAVING COUNT(*)  >=  3"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many colors are there? ###filtered_database_schema: CREATE TABLE `Ref_Characteristic_Types` ( characteristic_type_code VARCHAR(15) PRIMARY KEY, characteristic_type_description VARCHAR(80) ); Sample rows from `Ref_Characteristic_Types`: (Grade, Grade), (Purity, Purity), CREATE TABLE `Ref_Colors` ( color_code VARCHAR(15) PRIMARY KEY, color_description VARCHAR(80) ); Sample rows from `Ref_Colors`: (9, red), (5, green), (1, yellow), CREATE TABLE `Ref_Product_Categories` ( product_category_code VARCHAR(15) PRIMARY KEY, product_category_description VARCHAR(80), unit_of_measure VARCHAR(20) ); Sample rows from `Ref_Product_Categories`: (Herbs, Herbs, Handful ), (Seeds, Seeds, Weight - pound,kilo.), (Spices, Spices, Weight - pound,kilo.), CREATE TABLE `Characteristics` ( characteristic_id INTEGER, characteristic_type_code VARCHAR(15) REFERENCES Ref_Characteristic_Types(characteristic_type_code), characteristic_data_type VARCHAR(10), characteristic_name VARCHAR(80), other_characteristic_details VARCHAR(255) ); Sample rows from `Characteristics`: (1, Grade, numquam, slow, None), (2, Grade, doloribus, fast, None), (3, Purity, rem, warm, None), CREATE TABLE `Products` ( product_id INTEGER, color_code VARCHAR(15) REFERENCES Ref_Colors(color_code), product_category_code VARCHAR(15) REFERENCES Ref_Product_Categories(product_category_code), product_name VARCHAR(80), typical_buying_price VARCHAR(20), typical_selling_price VARCHAR(20), product_description VARCHAR(255), other_product_details VARCHAR(255) ); Sample rows from `Products`: (1, 4, Spices, cumin, , 2878.3, et, None), (2, 2, Spices, peper, 352447.2874677, 1892070.2803543, rerum, None), (3, 9, Herbs, basil, 503.8431967, 0.1859512, officia, None), CREATE TABLE `Product_Characteristics` ( product_id INTEGER REFERENCES Products(product_id), characteristic_id INTEGER REFERENCES Characteristics(characteristic_id), product_characteristic_value VARCHAR(50) ); Sample rows from `Product_Characteristics`: (13, 13, low), (11, 2, low), (5, 15, low), ",
        "output": "SELECT COUNT(*) FROM ref_colors"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the details of all sales and purchases? ###filtered_database_schema: CREATE TABLE `Investors` ( investor_id INTEGER, Investor_details VARCHAR(255) ); Sample rows from `Investors`: (1, z), (2, z), (3, d), CREATE TABLE `Lots` ( lot_id INTEGER, investor_id INTEGER REFERENCES Investors(investor_id), lot_details VARCHAR(255) ); Sample rows from `Lots`: (1, 13, r), (2, 16, z), (3, 10, s), CREATE TABLE `Ref_Transaction_Types` ( transaction_type_code VARCHAR(10) PRIMARY KEY, transaction_type_description VARCHAR(80) ); Sample rows from `Ref_Transaction_Types`: (SALE, Sale), (PUR, Purchase), CREATE TABLE `Transactions` ( transaction_id INTEGER, investor_id INTEGER REFERENCES Investors(investor_id), transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code), date_of_transaction DATETIME, amount_of_transaction DECIMAL(19,4), share_count VARCHAR(40), other_details VARCHAR(255) ); Sample rows from `Transactions`: (1, 6, SALE, 1988-09-16 19:02:51, 302507.6996, 8718572, None), (2, 18, PUR, 1982-06-06 17:19:00, 27.257, 9, None), (3, 2, SALE, 1979-04-27 06:03:59, 48777.969, 8580, None), CREATE TABLE `Sales` ( sales_transaction_id INTEGER REFERENCES Transactions(transaction_id), sales_details VARCHAR(255) ); Sample rows from `Sales`: (1, x), (2, o), (3, a), CREATE TABLE `Purchases` ( purchase_transaction_id INTEGER REFERENCES Transactions(transaction_id), purchase_details VARCHAR(255) ); Sample rows from `Purchases`: (1, c), (2, y), (3, i), CREATE TABLE `Transactions_Lots` ( transaction_id INTEGER REFERENCES Transactions(transaction_id), lot_id INTEGER REFERENCES Lots(lot_id) ); Sample rows from `Transactions_Lots`: (3, 11), (3, 8), (2, 11), ",
        "output": "SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the full names and salaries for any employees earning less than 6000? ###filtered_database_schema: CREATE TABLE `regions` ( REGION_ID decimal(5,0) PRIMARY KEY, REGION_NAME varchar(25) ); Sample rows from `regions`: (1, Europe\\r), (2, Americas\\r), (3, Asia\\r), CREATE TABLE `countries` ( COUNTRY_ID varchar(2) PRIMARY KEY, COUNTRY_NAME varchar(40), REGION_ID decimal(10,0) REFERENCES regions(REGION_ID) ); Sample rows from `countries`: (AR, Argentina, 2), (AU, Australia, 3), (BE, Belgium, 1), CREATE TABLE `departments` ( DEPARTMENT_ID decimal(4,0) PRIMARY KEY, DEPARTMENT_NAME varchar(30), MANAGER_ID decimal(6,0), LOCATION_ID decimal(4,0) ); Sample rows from `departments`: (10, Administration, 200, 1700), (20, Marketing, 201, 1800), (30, Purchasing, 114, 1700), CREATE TABLE `jobs` ( JOB_ID varchar(10) PRIMARY KEY, JOB_TITLE varchar(35), MIN_SALARY decimal(6,0), MAX_SALARY decimal(6,0) ); Sample rows from `jobs`: (AD_PRES, President, 20000, 40000), (AD_VP, Administration Vice President, 15000, 30000), (AD_ASST, Administration Assistant, 3000, 6000), CREATE TABLE `employees` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY, FIRST_NAME varchar(20), LAST_NAME varchar(25), EMAIL varchar(25), PHONE_NUMBER varchar(20), HIRE_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), SALARY decimal(8,2), COMMISSION_PCT decimal(2,2), MANAGER_ID decimal(6,0), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `employees`: (100, Steven, King, SKING, 515.123.4567, 1987-06-17, AD_PRES, 24000, 0, 0, 90), (101, Neena, Kochhar, NKOCHHAR, 515.123.4568, 1987-06-18, AD_VP, 17000, 0, 100, 90), (102, Lex, De Haan, LDEHAAN, 515.123.4569, 1987-06-19, AD_VP, 17000, 0, 100, 90), CREATE TABLE `job_history` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY REFERENCES employees(EMPLOYEE_ID), START_DATE date PRIMARY KEY, END_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `job_history`: (102, 1993-01-13, 1998-07-24, IT_PROG, 60), (101, 1989-09-21, 1993-10-27, AC_ACCOUNT, 110), (101, 1993-10-28, 1997-03-15, AC_MGR, 110), CREATE TABLE `locations` ( LOCATION_ID decimal(4,0) PRIMARY KEY, STREET_ADDRESS varchar(40), POSTAL_CODE varchar(12), CITY varchar(30), STATE_PROVINCE varchar(25), COUNTRY_ID varchar(2) REFERENCES countries(COUNTRY_ID) ); Sample rows from `locations`: (1000, 1297 Via Cola di Rie, 989, Roma, , IT), (1100, 93091 Calle della Testa, 10934, Venice, , IT), (1200, 2017 Shinjuku-ku, 1689, Tokyo, Tokyo Prefecture, JP), ",
        "output": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the first and last name of students whose age is younger than the average age. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT fname ,  lname FROM student WHERE age  <  (SELECT AVG(age) FROM student)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the gender of the student Linda Smith? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Restaurant` ( ResID INTEGER, ResName VARCHAR(100), Address VARCHAR(100), Rating INTEGER ); Sample rows from `Restaurant`: (1, Subway, 3233 St Paul St, Baltimore, MD 21218, 3), (2, Honeygrow, 3212 St Paul St, Baltimore, MD 21218, 4), CREATE TABLE `Type_Of_Restaurant` ( ResID INTEGER REFERENCES Restaurant(ResID), ResTypeID INTEGER REFERENCES Restaurant_Type(ResTypeID) ); Sample rows from `Type_Of_Restaurant`: (1, 1), (2, 2), CREATE TABLE `Restaurant_Type` ( ResTypeID INTEGER, ResTypeName VARCHAR(40), ResTypeDescription VARCHAR(100) ); Sample rows from `Restaurant_Type`: (1, Sandwich, Simplest there is.), (2, Stir-fry, Classic Chinese cooking.), CREATE TABLE `Visits_Restaurant` ( StuID INTEGER REFERENCES Student(StuID), ResID INTEGER REFERENCES Restaurant(ResID), Time TIMESTAMP, Spent FLOAT ); Sample rows from `Visits_Restaurant`: (1001, 1, 2017-10-09 18:15:00, 6.53), (1032, 2, 2017-10-08 13:00:30, 13.2), ",
        "output": "SELECT sex FROM student WHERE fname = \"Linda\" AND lname = \"Smith\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name of the youngest male? ###filtered_database_schema: CREATE TABLE `Person` ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT ); Sample rows from `Person`: (Alice, 25, new york city, female, student), (Bob, 35, salt lake city, male, engineer), (Zach, 45, austin, male, doctor), CREATE TABLE `PersonFriend` ( name varchar(20) REFERENCES Person(name), friend varchar(20) REFERENCES Person(name), year INTEGER ); Sample rows from `PersonFriend`: (Alice, Bob, 10), (Zach, Dan, 12), (Bob, Zach, 5), ",
        "output": "SELECT name FROM person WHERE gender  =  'male' AND age  =  (SELECT MIN(age) FROM person WHERE gender  =  'male' )"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of all the cities and states. ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), town_city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 25518 Ortiz Centers, West Stacy, 193, NorthCarolina, USA), (2, 033 Stracke Parkways, Lake Meaghan, 227, Colorado, USA), (3, 269 Flatley Port Suite 062, Breanneberg, 527, NewHampshire, USA), CREATE TABLE `Services` ( service_id INTEGER, service_type_code VARCHAR(15), service_name VARCHAR(80), service_descriptio VARCHAR(255) ); Sample rows from `Services`: (1, Education, Education, Education), (2, Welfare, Health, Welfare), (3, Education, Education, Health), CREATE TABLE `Forms` ( form_id INTEGER, form_type_code VARCHAR(15), service_id INTEGER REFERENCES Services(service_id), form_number VARCHAR(50), form_name VARCHAR(80), form_description VARCHAR(255) ); Sample rows from `Forms`: (1, Basic, 13, 8069, SSN Application, Form for SSN Application), (2, Complex, 9, 2675, Marriage Certificate, Marriage Certificate), (3, Complex, 2, 9837, Divorce Certificate, Divorce Certificate), CREATE TABLE `Individuals` ( individual_id INTEGER, individual_first_name VARCHAR(80), individual_middle_name VARCHAR(80), inidividual_phone VARCHAR(80), individual_email VARCHAR(80), individual_address VARCHAR(255), individual_last_name VARCHAR(80) ); Sample rows from `Individuals`: (1, Oscar, Hosea, 1-925-696-5232, amie.okuneva@example.org, 6956 Lia Plaza, Maggio), (2, Geovanny, Antonia, 075.012.6775x409, jamey.effertz@example.net, 69578 Baylee Prairie, Kerluke), (3, Casper, Mitchell, 1-818-062-2837, brandon.hermiston@example.com, 4555 Hane Orchard, Kutch), CREATE TABLE `Organizations` ( organization_id INTEGER, date_formed DATETIME, organization_name VARCHAR(255), uk_vat_number VARCHAR(20) ); Sample rows from `Organizations`: (1, 2016-08-24 23:52:48, Labour Party, 2157), (2, 2016-10-01 12:42:01, Plaid Cymru, 7459), (3, 2016-10-09 07:22:53, Conservative, 1211), CREATE TABLE `Parties` ( party_id INTEGER, payment_method_code VARCHAR(15), party_phone VARCHAR(80), party_email VARCHAR(80) ); Sample rows from `Parties`: (1, Cheque, 05374656172, enrico09@example.com), (2, Credit Card, 1-525-947-7867x51521, brakus.aliya@example.com), (3, Cheque, 1-606-232-3728x3568, frida57@example.org), CREATE TABLE `Organization_Contact_Individuals` ( individual_id INTEGER PRIMARY KEY REFERENCES Individuals(individual_id), organization_id INTEGER PRIMARY KEY REFERENCES Organizations(organization_id), date_contact_from DATETIME, date_contact_to DATETIME ); Sample rows from `Organization_Contact_Individuals`: (13, 1, 2016-08-16 22:09:11, 2018-03-25 10:27:18), (11, 1, 2017-03-02 00:00:16, 2018-03-06 05:39:43), (10, 3, 2016-08-23 03:24:24, 2018-03-12 07:55:28), CREATE TABLE `Party_Addresses` ( party_id INTEGER PRIMARY KEY REFERENCES Parties(party_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_address_from DATETIME, address_type_code VARCHAR(15), date_address_to DATETIME ); Sample rows from `Party_Addresses`: (10, 8, 2016-04-08 22:40:02, Residence, 2018-02-28 23:14:41), (15, 5, 2016-05-20 23:22:06, Billing, 2018-01-29 16:48:01), (4, 4, 2016-05-14 15:13:30, Delivery, 2018-02-25 19:39:16), CREATE TABLE `Party_Forms` ( party_id INTEGER PRIMARY KEY REFERENCES Parties(party_id), form_id INTEGER PRIMARY KEY REFERENCES Forms(form_id), date_completion_started DATETIME, form_status_code VARCHAR(15), date_fully_completed DATETIME ); Sample rows from `Party_Forms`: (2, 4, 2017-12-17 11:29:47, Completed, 2018-02-11 16:46:10), (15, 4, 2017-12-16 15:25:48, Partially Completed, 2018-02-18 16:09:04), (8, 5, 2017-12-09 21:26:11, Partially Completed, 2018-02-05 16:16:58), CREATE TABLE `Party_Services` ( booking_id INTEGER, customer_id INTEGER REFERENCES Parties(party_id), service_id INTEGER REFERENCES Services(service_id), service_datetime DATETIME, booking_made_date DATETIME ); Sample rows from `Party_Services`: (1, 10, 12, 2018-03-10 22:43:12, 2018-03-23 23:56:51), (2, 14, 11, 2018-03-05 15:06:23, 2018-03-25 11:08:29), (3, 4, 7, 2018-03-08 10:39:29, 2018-03-24 11:09:52), ",
        "output": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the highest point of the usa ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For the airline ids with the top 10 most routes operated, what are their names? ###filtered_database_schema: CREATE TABLE `routes` ( rid INTEGER, dst_apid INTEGER REFERENCES airports(apid), dst_ap varchar(4), src_apid bigint REFERENCES airports(apid), src_ap varchar(4), alid bigint REFERENCES airlines(alid), airline varchar(4), codeshare TEXT ); Sample rows from `routes`: (37, 2990, KZ, 2965, AER, 410, 2B, None), (38, 2990, KZ, 2966, ASF, 410, 2B, None), (39, 2962, MRV, 2966, ASF, 410, 2B, None), CREATE TABLE `airports` ( apid INTEGER, name TEXT, city TEXT, country TEXT, x REAL, y REAL, elevation bigint, iata character varchar(3), icao character varchar(4) ); Sample rows from `airports`: (1, Goroka Airport, Goroka, Papua New Guinea, 145.391998291, -6.081689834590001, 5282, GKA, AYGA), (2, Madang Airport, Madang, Papua New Guinea, 145.789001465, -5.20707988739, 20, MAG, AYMD), (3, Mount Hagen Kagamuga Airport, Mount Hagen, Papua New Guinea, 144.29600524902344, -5.826789855957031, 5388, HGU, AYMH), CREATE TABLE `airlines` ( alid INTEGER, name TEXT, iata varchar(2), icao varchar(3), callsign TEXT, country TEXT, active varchar(2) ); Sample rows from `airlines`: (-1, Unknown, -, N/A, None, None, Y), (1, Private flight, -, N/A, , , Y), (2, 135 Airways, , GNL, GENERAL, United States, N), ",
        "output": "SELECT t1.name ,  t2.alid FROM airlines as t1 JOIN routes as t2 ON t1.alid  =  t2.alid GROUP BY t2.alid ORDER BY COUNT(*) DESC LIMIT 10"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average number of customers across banks in the state of Utah? ###filtered_database_schema: CREATE TABLE `bank` ( branch_ID INT PRIMARY KEY, bname varchar(20), no_of_customers INT, city varchar(10), state varchar(20) ); Sample rows from `bank`: (1, morningside, 203, New York City, New York), (2, downtown, 123, Salt Lake City, Utah), (3, broadway, 453, New York City, New York), CREATE TABLE `customer` ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal INT, no_of_loans INT, credit_score INT, branch_ID INT REFERENCES bank(branch_ID), state varchar(20) ); Sample rows from `customer`: (1, Mary, saving, 2000, 2, 30, 2, Utah), (2, Jack, checking, 1000, 1, 20, 1, Texas), (3, Owen, saving, 800000, 0, 210, 3, New York), CREATE TABLE `loan` ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3) REFERENCES customer(Cust_ID), branch_ID varchar(3) REFERENCES bank(branch_ID), amount INT ); Sample rows from `loan`: (1, Mortgages, 1, 1, 2050), (2, Auto, 1, 2, 3000), (3, Business, 3, 3, 5000), ",
        "output": "SELECT AVG(no_of_customers) FROM bank WHERE state  =  'Utah'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the customer who started a policy most recently. ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_Details VARCHAR(255) ); Sample rows from `Customers`: (252, America Jaskolski), (263, Ellsworth Paucek), (334, Mrs. Hanna Willms), CREATE TABLE `Staff` ( Staff_ID INTEGER, Staff_Details VARCHAR(255) ); Sample rows from `Staff`: (406, Clifton), (427, Cathryn), (510, Kaci), CREATE TABLE `Policies` ( Policy_ID INTEGER, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Policy_Type_Code CHAR(15), Start_Date DATETIME, End_Date DATETIME ); Sample rows from `Policies`: (125, 808, Deputy, 2018-02-10 08:56:30, 2018-03-18 09:17:26), (151, 380, Jurisdiction, 2017-12-20 06:02:31, 2017-09-16 22:04:13), (287, 334, Jurisdiction, 2017-03-16 18:16:52, 2017-11-24 06:36:51), CREATE TABLE `Claim_Headers` ( Claim_Header_ID INTEGER, Claim_Status_Code CHAR(15), Claim_Type_Code CHAR(15), Policy_ID INTEGER REFERENCES Policies(Policy_ID), Date_of_Claim DATETIME, Date_of_Settlement DATETIME, Amount_Claimed DECIMAL(20,4), Amount_Piad DECIMAL(20,4) ); Sample rows from `Claim_Headers`: (15, Settled, Handphone Subsidy, 518, 2016-05-31 06:07:11, 2018-02-23 03:46:38, 349.15, 582.03), (24, Disputed, Child Birth, 518, 2016-12-30 21:43:21, 2017-10-08 21:43:14, 318.16, 309.2), (27, Disputed, Overtime Meal Subsidy, 518, 2017-05-01 13:34:43, 2017-11-16 04:06:05, 362.71, 132.97), CREATE TABLE `Claims_Documents` ( Claim_ID INTEGER PRIMARY KEY REFERENCES Claim_Headers(Claim_Header_ID), Document_Type_Code CHAR(15) PRIMARY KEY, Created_by_Staff_ID INTEGER REFERENCES Staff(Staff_ID), Created_Date INTEGER ); Sample rows from `Claims_Documents`: (24, Document, 718, 8), (27, Document, 986, 6), (27, Medical, 427, 8), CREATE TABLE `Claims_Processing_Stages` ( Claim_Stage_ID INTEGER, Next_Claim_Stage_ID INTEGER, Claim_Status_Name VARCHAR(255), Claim_Status_Description VARCHAR(255) ); Sample rows from `Claims_Processing_Stages`: (1, 1, Open, Open a new claim), (3, 1, Close, Close a claim), CREATE TABLE `Claims_Processing` ( Claim_Processing_ID INTEGER, Claim_ID INTEGER REFERENCES Claim_Headers(Claim_Header_ID), Claim_Outcome_Code CHAR(15), Claim_Stage_ID INTEGER, Staff_ID INTEGER REFERENCES Staff(Staff_ID) ); Sample rows from `Claims_Processing`: (118, 28, In progress, 1, 771), (145, 62, In progress, 1, 589), (213, 27, In progress, 1, 589), ",
        "output": "SELECT t2.customer_details FROM policies as t1 JOIN customers as t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT MAX(start_date) FROM policies)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"? ###filtered_database_schema: CREATE TABLE `Ref_Address_Types` ( address_type_code VARCHAR(15) PRIMARY KEY, address_type_description VARCHAR(80) ); Sample rows from `Ref_Address_Types`: (BILL, Billing), (HOME, Home or Residence), CREATE TABLE `Ref_Detention_Type` ( detention_type_code VARCHAR(10) PRIMARY KEY, detention_type_description VARCHAR(80) ); Sample rows from `Ref_Detention_Type`: (BREAK , During Break time), (AFTER, After School), (LUNCH, Lunch-time), CREATE TABLE `Ref_Incident_Type` ( incident_type_code VARCHAR(10) PRIMARY KEY, incident_type_description VARCHAR(80) ); Sample rows from `Ref_Incident_Type`: (NOISE, Noise), (VIOLENCE, Violence), (DISTURB, Disturbance), CREATE TABLE `Addresses` ( address_id INTEGER, line_1 VARCHAR(120), line_2 VARCHAR(120), line_3 VARCHAR(120), city VARCHAR(80), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), other_address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 020 Orie Canyon, None, None, North Loyceville, 197, Hawaii, USA, None), (2, 1333 Boyle Lane, None, None, West Sean, 937, Illinois, USA, None), (3, 027 Kim Divide Apt. 492, None, None, Beierview, 918, Texas, USA, None), CREATE TABLE `Students` ( student_id INTEGER, address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(40), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), date_first_rental DATETIME, date_left_university DATETIME, other_student_details VARCHAR(255) ); Sample rows from `Students`: (1, 19, Emma, Frederic, Rohan, 235.899.9744, derrick.jenkins@example.com, 2017-12-05 15:20:04, 2018-03-03 03:33:05, None), (2, 9, Louvenia, Fatima, Hansen, 1-247-673-8446, rohan.clarabelle@example.org, 2017-08-08 22:30:36, 2018-02-24 11:12:11, None), (3, 10, Rhea, Gardner, Bergnaum, 1-751-162-9676x115, kkirlin@example.org, 2017-11-15 04:57:28, 2018-03-19 12:49:20, None), CREATE TABLE `Teachers` ( teacher_id INTEGER, address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(80), last_name VARCHAR(80), gender VARCHAR(1), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), other_details VARCHAR(255) ); Sample rows from `Teachers`: (1, 15, Lyla, Wilson, Medhurst, 1, 792.333.7714, ohammes@example.com, None), (2, 7, Sid, Tremayne, Brakus, 1, 202.626.1698x9242, deborah37@example.com, None), (3, 8, Trystan, Alexane, Schuster, 1, 583-467-0403x647, hilll.kitty@example.com, None), CREATE TABLE `Assessment_Notes` ( notes_id INTEGER, student_id INTEGER REFERENCES Students(student_id), teacher_id INTEGER REFERENCES Teachers(teacher_id), date_of_notes DATETIME, text_of_notes VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Assessment_Notes`: (1, 7, 3, 1978-04-15 04:49:18, None, None), (2, 11, 10, 2005-06-30 02:48:35, None, None), (3, 15, 3, 1988-06-09 00:24:01, None, None), CREATE TABLE `Behavior_Incident` ( incident_id INTEGER, incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code), student_id INTEGER REFERENCES Students(student_id), date_incident_start DATETIME, date_incident_end DATETIME, incident_summary VARCHAR(255), recommendations VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Behavior_Incident`: (1, NOISE, 6, 2017-07-09 10:04:13, 2018-03-08 14:08:54, None, None, None), (2, DISTURB, 13, 2018-01-31 10:51:13, 2018-03-18 18:40:05, None, None, None), (3, VIOLENCE, 1, 2017-10-10 22:43:54, 2018-03-22 02:10:35, None, Transfer schools, None), CREATE TABLE `Detention` ( detention_id INTEGER, detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code), teacher_id INTEGER REFERENCES Teachers(teacher_id), datetime_detention_start DATETIME, datetime_detention_end DATETIME, detention_summary VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Detention`: (1, AFTER, 7, 2017-09-05 00:38:25, 2018-03-08 02:08:32, None, None), (2, AFTER, 14, 2018-01-10 08:09:02, 2018-03-07 04:24:48, None, None), (3, BREAK , 11, 2017-12-14 06:40:29, 2018-03-08 09:16:38, None, None), CREATE TABLE `Student_Addresses` ( student_id INTEGER REFERENCES Students(student_id), address_id INTEGER REFERENCES Addresses(address_id), date_address_from DATETIME, date_address_to DATETIME, monthly_rental DECIMAL(19,4), other_details VARCHAR(255) ); Sample rows from `Student_Addresses`: (6, 12, 2017-10-16 13:56:34, 2018-03-15 10:37:19, 826.4319, house), (3, 18, 2017-06-19 12:39:39, 2018-03-02 00:19:57, 1113.0996, house), (8, 1, 2017-10-31 12:40:34, 2018-02-25 05:21:34, 1297.3186, apartment), CREATE TABLE `Students_in_Detention` ( student_id INTEGER REFERENCES Students(student_id), detention_id INTEGER REFERENCES Detention(detention_id), incident_id INTEGER REFERENCES Behavior_Incident(incident_id) ); Sample rows from `Students_in_Detention`: (3, 15, 1), (8, 13, 3), (11, 6, 11), ",
        "output": "SELECT t1.teacher_id ,  t2.last_name FROM detention as t1 JOIN teachers as t2 ON t1.teacher_id  =  t2.teacher_id WHERE t1.detention_type_code  =  \"AFTER\" GROUP BY t1.teacher_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of rooms that do not have any reservation. ###filtered_database_schema: CREATE TABLE `Rooms` ( RoomId TEXT PRIMARY KEY, roomName TEXT, beds INTEGER, bedType TEXT, maxOccupancy INTEGER, basePrice INTEGER, decor TEXT ); Sample rows from `Rooms`: (RND, Recluse and defiance, 1, King, 2, 150, modern), (IBS, Interim but salutary, 1, King, 2, 150, traditional), (AOB, Abscond or bolster, 2, Queen, 4, 175, traditional), CREATE TABLE `Reservations` ( Code INTEGER, Room TEXT REFERENCES Rooms(RoomId), CheckIn TEXT, CheckOut TEXT, Rate REAL, LastName TEXT, FirstName TEXT, Adults INTEGER, Kids INTEGER ); Sample rows from `Reservations`: (10105, HBB, 23-OCT-10, 25-OCT-10, 100.0, SELBIG, CONRAD, 1, 0), (10183, IBD, 19-SEP-10, 20-SEP-10, 150.0, GABLER, DOLLIE, 2, 0), (10449, RND, 30-SEP-10, 01-OCT-10, 150.0, KLESS, NELSON, 1, 0), ",
        "output": "SELECT COUNT(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER? ###filtered_database_schema: CREATE TABLE `list` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Grade INTEGER, Classroom INTEGER ); Sample rows from `list`: (CAR, MAUDE, 2, 101), (KRISTENSEN, STORMY, 6, 112), (VANDERWOUDE, SHERWOOD, 3, 107), CREATE TABLE `teachers` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Classroom INTEGER ); Sample rows from `teachers`: (MACROSTIE, MIN, 101), (COVIN, JEROME, 102), (MOYER, OTHA, 103), ",
        "output": "SELECT DISTINCT t1.firstname ,  t1.lastname FROM list as t1 JOIN teachers as t2 ON t1.classroom  =  t2.classroom WHERE t1.grade  =  1 EXCEPT SELECT t1.firstname ,  t1.lastname FROM list as t1 JOIN teachers as t2 ON t1.classroom  =  t2.classroom WHERE t2.firstname  =  \"OTHA\" AND t2.lastname  =  \"MOYER\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the papers by \" H. V. Jagadish \" on PVLDB with more than 200 citations . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT t4.title FROM publication as t4 JOIN journal as t2 ON t4.jid  =  t2.jid JOIN writes as t3 ON t3.pid  =  t4.pid JOIN author as t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.citation_num  >  200;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of students whose age is older than the average age for each gender. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT COUNT(*) ,  sex FROM student WHERE age  >  (SELECT AVG(age) FROM student) GROUP BY sex"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the names of artworks in ascending order of the year they are nominated in. ###filtered_database_schema: CREATE TABLE `festival_detail` ( Festival_ID INT PRIMARY KEY, Festival_Name TEXT, Chair_Name TEXT, Location TEXT, Year INT, Num_of_Audience INT ); Sample rows from `festival_detail`: (1, Panasonic Awards, Raymond Floyd, United States, 2006, 152), (2, Flower Awards, Charles Coody, United States, 2007, 155), (3, Cherry Awards, Doug Ford, United States, 2007, 160), CREATE TABLE `artwork` ( Artwork_ID INT PRIMARY KEY, Type TEXT, Name TEXT ); Sample rows from `artwork`: (1, Program Music/Variety Show, Indonesian Idol), (2, Program Music/Variety Show, I Know), (3, Presenter Music/Variety Show, Loving you), CREATE TABLE `nomination` ( Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID), Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID), Result TEXT ); Sample rows from `nomination`: (1, 2, Nominated), (2, 2, Won), (3, 1, Nominated), ",
        "output": "SELECT t2.name FROM nomination as t1 JOIN artwork as t2 ON t1.artwork_id  =  t2.artwork_id JOIN festival_detail as t3 ON t1.festival_id  =  t3.festival_id ORDER BY t3.year"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the shop name corresponding to the shop that opened in the most recent year? ###filtered_database_schema: CREATE TABLE `device` ( Device_ID INT PRIMARY KEY, Device TEXT, Carrier TEXT, Package_Version TEXT, Applications TEXT, Software_Platform TEXT ); Sample rows from `device`: (1, BlackBerry Storm 9530, MTS Mobility, 5.0.0.808, 5.0.0.419, Android), (2, Apple, Verizon Wireless, 5.0.0.328, 5.0.0.328, iOS), (3, Huawei, Telus Mobility, 5.0.0.419, 5.0.0.419, Android), CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Shop_Name TEXT, Location TEXT, Open_Date TEXT, Open_Year INT ); Sample rows from `shop`: (1, Dinas Device, Dinas, 1 January, 2014), (2, Best Buy, Cymmer, 15 July, 2006), (3, Ferndale, Blaenllechau, 8 November, 2009), CREATE TABLE `stock` ( Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID), Device_ID INT PRIMARY KEY REFERENCES device(Device_ID), Quantity INT ); Sample rows from `stock`: (1, 6, 100), (2, 6, 110), (3, 6, 134), ",
        "output": "SELECT shop_name FROM shop ORDER BY open_year DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many different FDA approval statuses exist for medicines? ###filtered_database_schema: CREATE TABLE `medicine` ( id INT PRIMARY KEY, name TEXT, Trade_Name TEXT, FDA_approved TEXT ); Sample rows from `medicine`: (1, Amisulpride, Solian, No), (2, Aripiprazole, Abilify, Yes), (3, Asenapine, Saphris, Yes), CREATE TABLE `enzyme` ( id INT PRIMARY KEY, name TEXT, Location TEXT, Product TEXT, Chromosome TEXT, OMIM INT, Porphyria TEXT ); Sample rows from `enzyme`: (1, ALA synthase, Mitochondrion, δ-Aminolevulinic acid, 3p21.1, 125290, none), (2, ALA dehydratase, Cytosol, Porphobilinogen, 9q34, 125270, ALA-Dehydratase deficiency), (3, PBG deaminase, Cytosol, Hydroxymethyl bilane, 11q23.3, 176000, acute intermittent porphyria), CREATE TABLE `medicine_enzyme_interaction` ( enzyme_id INT PRIMARY KEY REFERENCES enzyme(id), medicine_id INT PRIMARY KEY REFERENCES medicine(id), interaction_type TEXT ); Sample rows from `medicine_enzyme_interaction`: (1, 1, inhibitor), (1, 2, inhibitor), (1, 3, inhibitor), ",
        "output": "SELECT COUNT(DISTINCT fda_approved) FROM medicine"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the paper after 2000 with the most citations . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT title FROM publication WHERE year  >  2000 ORDER BY citation_num DESC LIMIT 1;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the full names of faculties with sex M and who live in building NEB? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), CREATE TABLE `Department` ( DNO INTEGER, Division VARCHAR(2), DName VARCHAR(25), Room VARCHAR(5), Building VARCHAR(13), DPhone INTEGER ); Sample rows from `Department`: (10, AS, History of Art, 268, Mergenthaler, 7117), (20, AS, Biology, 144, Mudd, 7330), (30, AS, Chemistry, 113, Remsen, 7429), CREATE TABLE `Member_of` ( FacID INTEGER REFERENCES Faculty(FacID), DNO INTEGER REFERENCES Department(DNO), Appt_Type VARCHAR(15) ); Sample rows from `Member_of`: (7792, 600, Primary), (9210, 520, Primary), (9811, 550, Primary), CREATE TABLE `Course` ( CID VARCHAR(7) PRIMARY KEY, CName VARCHAR(40), Credits INTEGER, Instructor INTEGER REFERENCES Faculty(FacID), Days VARCHAR(5), Hours VARCHAR(11), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Course`: (600.101, COMPUTER LITERACY, 3, 6112, MTW, 3, 600), (600.103, INTRODUCTION TO COMPUTER SCIENCE, 1, 4230, Th, 4, 600), (600.107, INTRO TO PROGRAMMING IN JAVA, 3, 1193, MTW, 3, 600), CREATE TABLE `Minor_in` ( StuID INTEGER REFERENCES Student(StuID), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Minor_in`: (1004, 520), (1005, 550), (1006, 50), CREATE TABLE `Enrolled_in` ( StuID INTEGER REFERENCES Student(StuID), CID VARCHAR(7) REFERENCES Course(CID), Grade VARCHAR(2) REFERENCES Gradeconversion(lettergrade) ); Sample rows from `Enrolled_in`: (1001, 550.681, A-), (1001, 600.303, B), (1001, 600.315, B+), CREATE TABLE `Gradeconversion` ( lettergrade VARCHAR(2) PRIMARY KEY, gradepoint FLOAT ); Sample rows from `Gradeconversion`: (A+, 4.0), (A, 4.0), (A-, 3.7), ",
        "output": "SELECT fname ,  lname FROm faculty WHERE sex  =  \"m\" AND building  =  \"NEB\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show all video games and their types in the order of their names. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Video_Games` ( GameID INTEGER, GName VARCHAR(40), GType VARCHAR(40) ); Sample rows from `Video_Games`: (1, RNG Stone, Collectible card game), (2, The Vanishing of Eric Calder, Walking Simulator), (3, Grand Term Assignment, Role-playing game), CREATE TABLE `Plays_Games` ( StuID INTEGER REFERENCES Student(StuID), GameID INTEGER REFERENCES Video_Games(GameID), Hours_Played INTEGER ); Sample rows from `Plays_Games`: (1001, 1, 35), (1001, 2, 15), (1001, 5, 1), CREATE TABLE `SportsInfo` ( StuID INTEGER REFERENCES Student(StuID), SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1) ); Sample rows from `SportsInfo`: (1001, Athletics, 2, 5, N), (1002, Football, 7, 20, Y), (1003, Football, 45, 18, Y), ",
        "output": "SELECT gname ,  gtype FROM video_games ORDER BY gname"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: where is the best restaurant in the bay area for american food ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT t3.house_number  ,  t1.name FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name JOIN location as t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX(t1.rating) FROM restaurant as t1 JOIN geographic as t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the year in which there are more than one festivals. ###filtered_database_schema: CREATE TABLE `festival_detail` ( Festival_ID INT PRIMARY KEY, Festival_Name TEXT, Chair_Name TEXT, Location TEXT, Year INT, Num_of_Audience INT ); Sample rows from `festival_detail`: (1, Panasonic Awards, Raymond Floyd, United States, 2006, 152), (2, Flower Awards, Charles Coody, United States, 2007, 155), (3, Cherry Awards, Doug Ford, United States, 2007, 160), CREATE TABLE `artwork` ( Artwork_ID INT PRIMARY KEY, Type TEXT, Name TEXT ); Sample rows from `artwork`: (1, Program Music/Variety Show, Indonesian Idol), (2, Program Music/Variety Show, I Know), (3, Presenter Music/Variety Show, Loving you), CREATE TABLE `nomination` ( Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID), Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID), Result TEXT ); Sample rows from `nomination`: (1, 2, Nominated), (2, 2, Won), (3, 1, Nominated), ",
        "output": "SELECT year FROM festival_detail GROUP BY year HAVING COUNT(*)  >  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Give me the first name and last name for all the female members of the club \"Bootup Baltimore\". ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Club` ( ClubID INTEGER, ClubName VARCHAR(40), ClubDesc VARCHAR(1024), ClubLocation VARCHAR(40) ); Sample rows from `Club`: (1, Bootup Baltimore, Refurbish computers; teach kids and adults about computer basics., AKW), (2, Hopkins Student Enterprises, Venture capital fund for student business., AKW), (3, Pen and Paper Gaming, Play pen and paper games on campus., HHH), CREATE TABLE `Member_of_club` ( StuID INTEGER REFERENCES Student(StuID), ClubID INTEGER REFERENCES Club(ClubID), Position VARCHAR(40) ); Sample rows from `Member_of_club`: (1001, 1, President), (1007, 4, Vice-President), (1008, 2, CTO), ",
        "output": "SELECT t3.fname ,  t3.lname fROM club as t1 JOIN member_of_club as t2 ON t1.clubid  =  t2.clubid JOIN student as t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"f\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List all the possible ways to get to attractions, together with the number of attractions accessible by these methods. ###filtered_database_schema: CREATE TABLE `Ref_Hotel_Star_Ratings` ( star_rating_code CHAR(15) PRIMARY KEY, star_rating_description VARCHAR(80) ); Sample rows from `Ref_Hotel_Star_Ratings`: (1, star), (2, star), (3, star), CREATE TABLE `Locations` ( Location_ID INTEGER, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Locations`: (333, Astro Orbiter, 660 Shea Crescent, None), (368, African Animals, 254 Ottilie Junction, None), (417, American Adventure, 53815 Sawayn Tunnel Apt. 297, None), CREATE TABLE `Ref_Attraction_Types` ( Attraction_Type_Code CHAR(15) PRIMARY KEY, Attraction_Type_Description VARCHAR(255) ); Sample rows from `Ref_Attraction_Types`: (2, park), (3, garden), (5, gallery), CREATE TABLE `Visitors` ( Tourist_ID INTEGER PRIMARY KEY, Tourist_Details VARCHAR(255) ); Sample rows from `Visitors`: (164, Toney), (189, Graciela), (204, Vincent), CREATE TABLE `Features` ( Feature_ID INTEGER, Feature_Details VARCHAR(255) ); Sample rows from `Features`: (523, cafe), (528, park), (543, garden), CREATE TABLE `Hotels` ( hotel_id INTEGER, star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code), pets_allowed_yn CHAR(1), price_range REAL, other_hotel_details VARCHAR(255) ); Sample rows from `Hotels`: (123, 5, 1, 2914989.571, None), (144, 4, , , None), (172, 5, , 17012.682586009, None), CREATE TABLE `Tourist_Attractions` ( Tourist_Attraction_ID INTEGER, Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code), Location_ID INTEGER REFERENCES Locations(Location_ID), How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Tourist_Attractions`: (2113, 2, 579, bus, art museum, None, None, None), (2701, 6, 417, walk, UK gallery, None, None, None), (5076, 2, 868, shuttle, flying elephant, None, None, None), CREATE TABLE `Street_Markets` ( Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Market_Details VARCHAR(255) ); Sample rows from `Street_Markets`: (6852, Broadway), (7067, Fish Farm Market), CREATE TABLE `Shops` ( Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Shop_Details VARCHAR(255) ); Sample rows from `Shops`: (8429, soup), (8449, coffee), (8698, Flower), CREATE TABLE `Museums` ( Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Museum_Details VARCHAR(255) ); Sample rows from `Museums`: (2113, Yale Center for British Art), (2701, The Metropolitan Museum of Art), (5076, MoMA), CREATE TABLE `Royal_Family` ( Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Royal_Family_Details VARCHAR(255) ); Sample rows from `Royal_Family`: (9561, None), (9919, None), CREATE TABLE `Theme_Parks` ( Theme_Park_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Theme_Park_Details VARCHAR(255) ); Sample rows from `Theme_Parks`: (5265, Disney), (6476, Sea World), (6523, Universal Studios), CREATE TABLE `Visits` ( Visit_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID), Visit_Date DATETIME, Visit_Details VARCHAR(40) ); Sample rows from `Visits`: (183, 6653, 377, 2004-08-21 03:06:14, ), (268, 5076, 204, 2013-08-06 05:35:51, ), (273, 9360, 211, 2013-10-27 09:56:08, ), CREATE TABLE `Photos` ( Photo_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Photos`: (211, 8449, game1, None, 702, None), (280, 7067, game2, None, 762, None), (303, 5076, game3, None, 392, None), CREATE TABLE `Staff` ( Staff_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(40), Other_Details VARCHAR(255) ); Sample rows from `Staff`: (170, 6476, Whitney, None), (219, 6476, Kaela, None), (237, 7067, Eunice, None), CREATE TABLE `Tourist_Attraction_Features` ( Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID) ); Sample rows from `Tourist_Attraction_Features`: (5076, 528), (5076, 681), (5265, 523), ",
        "output": "SELECT how_to_get_there ,  COUNT(*) FROM tourist_attractions GROUP BY how_to_get_there"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: semantic parsing dataset ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t2.datasetid FROM paperdataset as t3 JOIN dataset as t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase as t1 ON t1.paperid  =  t3.paperid JOIN keyphrase as t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the names of entrepreneurs do no not have the investor Rachel Elnaugh. ###filtered_database_schema: CREATE TABLE `entrepreneur` ( Entrepreneur_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Company TEXT, Money_Requested REAL, Investor TEXT ); Sample rows from `entrepreneur`: (1, 1, Umbrolly, 150000.0, Duncan Bannatyne), (2, 2, Grails Ltd, 120000.0, Doug Richard), (3, 3, Le Beanock, 54000.0, Rachel Elnaugh), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Height REAL, Weight REAL, Date_of_Birth TEXT ); Sample rows from `people`: (1, Francesco Postiglione, 1.9, 80.0, 1972-04-29), (2, Leonardo Binchi, 1.86, 57.0, 1975-08-27), (3, Fabrizio Buonocore, 1.83, 45.0, 1977-04-28), ",
        "output": "SELECT t2.name FROM entrepreneur as t1 JOIN people as t2 ON t1.people_id  =  t2.people_id WHERE t1.investor != \"Rachel Elnaugh\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the names of all the distinct product names in alphabetical order? ###filtered_database_schema: CREATE TABLE `Problem_Category_Codes` ( problem_category_code VARCHAR(20) PRIMARY KEY, problem_category_description VARCHAR(80) ); Sample rows from `Problem_Category_Codes`: (Datatabase, Database design or contents.), (GUI, User Interface.), (Middleware, Infrastructrure and Architecture), CREATE TABLE `Problem_Log` ( problem_log_id INTEGER, assigned_to_staff_id INTEGER REFERENCES Staff(staff_id), problem_id INTEGER REFERENCES Problems(problem_id), problem_category_code VARCHAR(20) REFERENCES Problem_Category_Codes(problem_category_code), problem_status_code VARCHAR(20) REFERENCES Problem_Status_Codes(problem_status_code), log_entry_date DATETIME, log_entry_description VARCHAR(255), log_entry_fix VARCHAR(255), other_log_details VARCHAR(255) ); Sample rows from `Problem_Log`: (1, 11, 11, Middleware, Solved, 2011-03-13 13:11:57, t, k, p), (2, 11, 8, GUI, Solved, 1976-03-31 14:03:02, a, k, s), (3, 12, 1, GUI, Solved, 1974-12-11 01:06:22, b, j, e), CREATE TABLE `Problem_Status_Codes` ( problem_status_code VARCHAR(20) PRIMARY KEY, problem_status_description VARCHAR(80) ); Sample rows from `Problem_Status_Codes`: (Reported, Reported), (Solved, Solved), CREATE TABLE `Product` ( product_id INTEGER, product_name VARCHAR(80), product_details VARCHAR(255) ); Sample rows from `Product`: (1, rose, k), (2, yellow, q), (3, chat, e), CREATE TABLE `Staff` ( staff_id INTEGER, staff_first_name VARCHAR(80), staff_last_name VARCHAR(80), other_staff_details VARCHAR(255) ); Sample rows from `Staff`: (1, Lacey, Bosco, m), (2, Dameon, Frami, x), (3, Ashley, Medhurst, w), CREATE TABLE `Problems` ( problem_id INTEGER, product_id INTEGER REFERENCES Product(product_id), closure_authorised_by_staff_id INTEGER REFERENCES Staff(staff_id), reported_by_staff_id INTEGER REFERENCES Staff(staff_id), date_problem_reported DATETIME, date_problem_closed DATETIME, problem_description VARCHAR(255), other_problem_details VARCHAR(255) ); Sample rows from `Problems`: (1, 4, 4, 2, 1978-06-26 19:10:17, 2012-07-22 19:24:26, x, p), (2, 8, 3, 10, 1988-11-07 16:09:31, 1973-06-07 04:13:51, w, p), (3, 1, 4, 1, 1995-05-14 08:32:56, 1997-02-26 05:06:15, r, i), ",
        "output": "SELECT DISTINCT product_name FROM product ORDER BY product_name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the first and last names of the customers with the 10 cheapest invoices? ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT t1.first_name ,  t1.last_name FROM customers as t1 JOIN invoices as t2 ON t2.customer_id  =  t1.id ORDER BY total LIMIT 10;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the titles of the papers whose authors are from the institution \"Indiana University\". ###filtered_database_schema: CREATE TABLE `Inst` ( instID INTEGER, name TEXT, country TEXT ); Sample rows from `Inst`: (1000, University of Oxford, UK), (1010, Northeastern University, USA), (1020, Indiana University, USA), CREATE TABLE `Authors` ( authID INTEGER, lname TEXT, fname TEXT ); Sample rows from `Authors`: (50, Gibbons, Jeremy), (51, Hinze, Ralf), (52, James, Daniel W. H.), CREATE TABLE `Papers` ( paperID INTEGER, title TEXT ); Sample rows from `Papers`: (200, Just do it: Simple Monadic Equational Reasoning), (201, Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory), (202, Functional Pearl: Modular Rollback through Control Logging), CREATE TABLE `Authorship` ( authID INTEGER PRIMARY KEY REFERENCES Authors(authID), instID INTEGER PRIMARY KEY REFERENCES Inst(instID), paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID), authOrder INTEGER ); Sample rows from `Authorship`: (50, 1000, 200, 1), (51, 1000, 200, 2), (51, 1000, 201, 1), ",
        "output": "SELECT DISTINCT t1.title FROM papers as t1 JOIN authorship as t2 ON t1.paperid  =  t2.paperid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what states have towns named springfield ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the status of the city that has hosted the most competitions? ###filtered_database_schema: CREATE TABLE `city` ( City_ID INT PRIMARY KEY, Official_Name TEXT, Status TEXT, Area_km_2 REAL, Population REAL, Census_Ranking TEXT ); Sample rows from `city`: (1, Grand Falls/Grand-Sault, Town, 18.06, 5706.0, 636 of 5008), (2, Perth-Andover, Village, 8.89, 1778.0, 1442 of 5,008), (3, Plaster Rock, Village, 3.09, 1135.0, 1936 of 5,008), CREATE TABLE `farm` ( Farm_ID INT PRIMARY KEY, Year INT, Total_Horses REAL, Working_Horses REAL, Total_Cattle REAL, Oxen REAL, Bulls REAL, Cows REAL, Pigs REAL, Sheep_and_Goats REAL ); Sample rows from `farm`: (1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8), CREATE TABLE `farm_competition` ( Competition_ID INT PRIMARY KEY, Year INT, Theme TEXT, Host_city_ID INT REFERENCES city(City_ID), Hosts TEXT ); Sample rows from `farm_competition`: (1, 2013, Carnival M is back!, 1, Miley Cyrus Jared Leto and Karen Mok), (2, 2006, Codehunters, 2, Leehom Wang and Kelly Rowland), (3, 2005, MTV Asia Aid, 3, Alicia Keys), CREATE TABLE `competition_record` ( Competition_ID INT PRIMARY KEY REFERENCES farm_competition(Competition_ID), Farm_ID INT PRIMARY KEY REFERENCES farm(Farm_ID), Rank INT ); Sample rows from `competition_record`: (1, 8, 1), (1, 2, 2), (1, 3, 3), ",
        "output": "SELECT t1.status FROM city as t1 JOIN farm_competition as t2 ON t1.city_id  =  t2.host_city_id GROUP BY t2.host_city_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the size of the capital of texas ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  \"texas\" );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many students are affected by cat allergies? ###filtered_database_schema: CREATE TABLE `Allergy_Type` ( Allergy VARCHAR(20) PRIMARY KEY, AllergyType VARCHAR(20) ); Sample rows from `Allergy_Type`: (Eggs, food), (Nuts, food), (Milk, food), CREATE TABLE `Has_Allergy` ( StuID INTEGER REFERENCES Student(StuID), Allergy VARCHAR(20) REFERENCES Allergy_Type(Allergy) ); Sample rows from `Has_Allergy`: (1001, Cat), (1002, Shellfish), (1002, Tree Pollen), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), ",
        "output": "SELECT COUNT(*) FROM has_allergy WHERE allergy  =  \"Cat\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find all the product whose name contains the word \"Scanner\". ###filtered_database_schema: CREATE TABLE `product` ( product_id INT PRIMARY KEY, product TEXT, dimensions TEXT, dpi REAL, pages_per_minute_color REAL, max_page_size TEXT, interface TEXT ); Sample rows from `product`: (1, Fujitsu fi-6130 A4 Series Scanner, 301 x 160 x 158, 600.0, 30.0, A4, USB 2.0), (2, Plustek MobileOffice D28 Corporate, 303 x 94 x 60, 600.0, 28.0, A4, USB 2.0), (3, Xerox Travel Scanner 100, 289 x 51 x 38, 600.0, 4.0, A4, USB 2.0), CREATE TABLE `store` ( Store_ID INT PRIMARY KEY, Store_Name TEXT, Type TEXT, Area_size REAL, Number_of_product_category REAL, Ranking INT ); Sample rows from `store`: (1, Miramichi, City Mall, 179.84, 17811.0, 2), (2, Neguac, Village Store, 26.69, 1678.0, 3), (3, Rogersville, Village Store, 7.23, 1170.0, 1), CREATE TABLE `district` ( District_ID INT PRIMARY KEY, District_name TEXT, Headquartered_City TEXT, City_Population REAL, City_Area REAL ); Sample rows from `district`: (1, Attock District, Attock City, 94620.0, 20.0), (2, Bahawalnagar District, Bahawalnagar City, 134936.0, 13.0), (3, Bahawalpur District, Bahawalpur City, 530438.0, 38.0), CREATE TABLE `store_product` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), Product_ID INT PRIMARY KEY REFERENCES product(Product_ID) ); Sample rows from `store_product`: (1, 1), (1, 2), (1, 3), CREATE TABLE `store_district` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), District_ID INT REFERENCES district(District_ID) ); Sample rows from `store_district`: (1, 15), (2, 15), (3, 11), ",
        "output": "SELECT product FROM product WHERE product LIKE \"%Scanner%\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Where is the club \"Pen and Paper Gaming\" located? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Club` ( ClubID INTEGER, ClubName VARCHAR(40), ClubDesc VARCHAR(1024), ClubLocation VARCHAR(40) ); Sample rows from `Club`: (1, Bootup Baltimore, Refurbish computers; teach kids and adults about computer basics., AKW), (2, Hopkins Student Enterprises, Venture capital fund for student business., AKW), (3, Pen and Paper Gaming, Play pen and paper games on campus., HHH), CREATE TABLE `Member_of_club` ( StuID INTEGER REFERENCES Student(StuID), ClubID INTEGER REFERENCES Club(ClubID), Position VARCHAR(40) ); Sample rows from `Member_of_club`: (1001, 1, President), (1007, 4, Vice-President), (1008, 2, CTO), ",
        "output": "SELECT clublocation FROM club WHERE clubname  =  \"Pen and Paper Gaming\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary. ###filtered_database_schema: CREATE TABLE `regions` ( REGION_ID decimal(5,0) PRIMARY KEY, REGION_NAME varchar(25) ); Sample rows from `regions`: (1, Europe\\r), (2, Americas\\r), (3, Asia\\r), CREATE TABLE `countries` ( COUNTRY_ID varchar(2) PRIMARY KEY, COUNTRY_NAME varchar(40), REGION_ID decimal(10,0) REFERENCES regions(REGION_ID) ); Sample rows from `countries`: (AR, Argentina, 2), (AU, Australia, 3), (BE, Belgium, 1), CREATE TABLE `departments` ( DEPARTMENT_ID decimal(4,0) PRIMARY KEY, DEPARTMENT_NAME varchar(30), MANAGER_ID decimal(6,0), LOCATION_ID decimal(4,0) ); Sample rows from `departments`: (10, Administration, 200, 1700), (20, Marketing, 201, 1800), (30, Purchasing, 114, 1700), CREATE TABLE `jobs` ( JOB_ID varchar(10) PRIMARY KEY, JOB_TITLE varchar(35), MIN_SALARY decimal(6,0), MAX_SALARY decimal(6,0) ); Sample rows from `jobs`: (AD_PRES, President, 20000, 40000), (AD_VP, Administration Vice President, 15000, 30000), (AD_ASST, Administration Assistant, 3000, 6000), CREATE TABLE `employees` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY, FIRST_NAME varchar(20), LAST_NAME varchar(25), EMAIL varchar(25), PHONE_NUMBER varchar(20), HIRE_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), SALARY decimal(8,2), COMMISSION_PCT decimal(2,2), MANAGER_ID decimal(6,0), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `employees`: (100, Steven, King, SKING, 515.123.4567, 1987-06-17, AD_PRES, 24000, 0, 0, 90), (101, Neena, Kochhar, NKOCHHAR, 515.123.4568, 1987-06-18, AD_VP, 17000, 0, 100, 90), (102, Lex, De Haan, LDEHAAN, 515.123.4569, 1987-06-19, AD_VP, 17000, 0, 100, 90), CREATE TABLE `job_history` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY REFERENCES employees(EMPLOYEE_ID), START_DATE date PRIMARY KEY, END_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `job_history`: (102, 1993-01-13, 1998-07-24, IT_PROG, 60), (101, 1989-09-21, 1993-10-27, AC_ACCOUNT, 110), (101, 1993-10-28, 1997-03-15, AC_MGR, 110), CREATE TABLE `locations` ( LOCATION_ID decimal(4,0) PRIMARY KEY, STREET_ADDRESS varchar(40), POSTAL_CODE varchar(12), CITY varchar(30), STATE_PROVINCE varchar(25), COUNTRY_ID varchar(2) REFERENCES countries(COUNTRY_ID) ); Sample rows from `locations`: (1000, 1297 Via Cola di Rie, 989, Roma, , IT), (1100, 93091 Calle della Testa, 10934, Venice, , IT), (1200, 2017 Shinjuku-ku, 1689, Tokyo, Tokyo Prefecture, JP), ",
        "output": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: who does Noah A Smith author with ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t1.authorid FROM writes as t3 JOIN author as t2 ON t3.authorid  =  t2.authorid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the names of donors who donated to both school \"Glenn\" and \"Triton.\" ###filtered_database_schema: CREATE TABLE `School` ( School_id TEXT PRIMARY KEY, School_name TEXT, Location TEXT, Mascot TEXT, Enrollment INT, IHSAA_Class TEXT, IHSAA_Football_Class TEXT, County TEXT ); Sample rows from `School`: (1, Bremen, Bremen, Lions, 495, AA, AA, 50 Marshall), (2, Culver Community, Culver, Cavaliers, 287, A, A, 50 Marshall), (3, Glenn, Walkerton, Falcons, 605, AAA, AAA, 71 St. Joseph), CREATE TABLE `budget` ( School_id INT PRIMARY KEY REFERENCES School(School_id), Year INT PRIMARY KEY, Budgeted INT, total_budget_percent_budgeted REAL, Invested INT, total_budget_percent_invested REAL, Budget_invested_percent TEXT ); Sample rows from `budget`: (2, 1999, 4979, 2.0, 2134, 2.0, 42.9), (2, 2000, 3666, 2.0, 5840, 2.0, 159.3), (2, 2001, 6803, 2.0, 8335, 2.0, 122.5), CREATE TABLE `endowment` ( endowment_id INT PRIMARY KEY, School_id INT REFERENCES School(School_id), donator_name TEXT, amount REAL ); Sample rows from `endowment`: (1, 1, Monte Plata, 9.51), (2, 2, San José de Ocoa, 9.83), (3, 3, Distrito Nacional, 9.55), ",
        "output": "SELECT t1.donator_name FROM endowment as t1 JOIN school as t2 ON t1.school_id  =  t2.school_id WHERE t2.school_name  =  'Glenn' INTERSECT SELECT t1.donator_name FROM endowment as t1 JOIN school as t2 ON t1.school_id  =  t2.school_id WHERE t2.school_name  =  'Triton'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Display the first and last name, and salary for those employees whose first name is ending with the letter m. ###filtered_database_schema: CREATE TABLE `regions` ( REGION_ID decimal(5,0) PRIMARY KEY, REGION_NAME varchar(25) ); Sample rows from `regions`: (1, Europe\\r), (2, Americas\\r), (3, Asia\\r), CREATE TABLE `countries` ( COUNTRY_ID varchar(2) PRIMARY KEY, COUNTRY_NAME varchar(40), REGION_ID decimal(10,0) REFERENCES regions(REGION_ID) ); Sample rows from `countries`: (AR, Argentina, 2), (AU, Australia, 3), (BE, Belgium, 1), CREATE TABLE `departments` ( DEPARTMENT_ID decimal(4,0) PRIMARY KEY, DEPARTMENT_NAME varchar(30), MANAGER_ID decimal(6,0), LOCATION_ID decimal(4,0) ); Sample rows from `departments`: (10, Administration, 200, 1700), (20, Marketing, 201, 1800), (30, Purchasing, 114, 1700), CREATE TABLE `jobs` ( JOB_ID varchar(10) PRIMARY KEY, JOB_TITLE varchar(35), MIN_SALARY decimal(6,0), MAX_SALARY decimal(6,0) ); Sample rows from `jobs`: (AD_PRES, President, 20000, 40000), (AD_VP, Administration Vice President, 15000, 30000), (AD_ASST, Administration Assistant, 3000, 6000), CREATE TABLE `employees` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY, FIRST_NAME varchar(20), LAST_NAME varchar(25), EMAIL varchar(25), PHONE_NUMBER varchar(20), HIRE_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), SALARY decimal(8,2), COMMISSION_PCT decimal(2,2), MANAGER_ID decimal(6,0), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `employees`: (100, Steven, King, SKING, 515.123.4567, 1987-06-17, AD_PRES, 24000, 0, 0, 90), (101, Neena, Kochhar, NKOCHHAR, 515.123.4568, 1987-06-18, AD_VP, 17000, 0, 100, 90), (102, Lex, De Haan, LDEHAAN, 515.123.4569, 1987-06-19, AD_VP, 17000, 0, 100, 90), CREATE TABLE `job_history` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY REFERENCES employees(EMPLOYEE_ID), START_DATE date PRIMARY KEY, END_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `job_history`: (102, 1993-01-13, 1998-07-24, IT_PROG, 60), (101, 1989-09-21, 1993-10-27, AC_ACCOUNT, 110), (101, 1993-10-28, 1997-03-15, AC_MGR, 110), CREATE TABLE `locations` ( LOCATION_ID decimal(4,0) PRIMARY KEY, STREET_ADDRESS varchar(40), POSTAL_CODE varchar(12), CITY varchar(30), STATE_PROVINCE varchar(25), COUNTRY_ID varchar(2) REFERENCES countries(COUNTRY_ID) ); Sample rows from `locations`: (1000, 1297 Via Cola di Rie, 989, Roma, , IT), (1100, 93091 Calle della Testa, 10934, Venice, , IT), (1200, 2017 Shinjuku-ku, 1689, Tokyo, Tokyo Prefecture, JP), ",
        "output": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the wifi and screen mode type of the hardware model named \"LG-P760\"? ###filtered_database_schema: CREATE TABLE `chip_model` ( Model_name TEXT PRIMARY KEY, Launch_year REAL, RAM_MiB REAL, ROM_MiB REAL, Slots TEXT, WiFi TEXT, Bluetooth TEXT ); Sample rows from `chip_model`: (X5, 2002.0, 32.0, 32.0, 1CFII,1SD, No, No), (X5 high end, 2002.0, 64.0, 48.0, 1CFII,1SD, No, No), (X3 Basic, 2003.0, 32.0, 32.0, 1SD, No, No), CREATE TABLE `screen_mode` ( Graphics_mode REAL PRIMARY KEY, Char_cells TEXT, Pixels TEXT, Hardware_colours REAL, used_kb REAL, map TEXT, Type TEXT ); Sample rows from `screen_mode`: (0.0, 80 × 32, 640 × 256, 2.0, 20.0, 3000–7FFF, Graphics), (1.0, 40 × 32, 320 × 256, 4.0, 20.0, 3000–7FFF, Graphics), (2.0, 20 × 32, 160 × 256, 8.0, 20.0, 3000–7FFF, Graphics), CREATE TABLE `phone` ( Company_name TEXT, Hardware_Model_name TEXT PRIMARY KEY, Accreditation_type TEXT, Accreditation_level TEXT, Date TEXT, chip_model TEXT REFERENCES chip_model(Model_name), screen_mode TEXT REFERENCES screen_mode(Graphics_mode) ); Sample rows from `phone`: (Sony Mobile Communications, XPERIA T, XPERIA J, Full, joyn Hot Fixes, Approved (awarded 15.11.12), X5, 1), (LG Electronics, LG-P760, Full, joyn Hot Fixes, Approved (awarded 19.11.12), X51v, 3), (Nokia Corporation, Lumia 920, Lumia 820, Lumia 620, Full, joyn Hot Fixes, Approved (awarded 05.12.12), X5, 4), ",
        "output": "SELECT t1.wifi , t3.type FROM chip_model as t1 JOIN phone as t2 ON t1.model_name  =  t2.chip_model JOIN screen_mode as t3 ON t2.screen_mode = t3.graphics_mode WHERE t2.Hardware_model_name = \"LG-P760\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the title, phone number and hire date for the employee named Nancy Edwards? ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of departments either in division AS, or in division EN and in building NEB? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), CREATE TABLE `Department` ( DNO INTEGER, Division VARCHAR(2), DName VARCHAR(25), Room VARCHAR(5), Building VARCHAR(13), DPhone INTEGER ); Sample rows from `Department`: (10, AS, History of Art, 268, Mergenthaler, 7117), (20, AS, Biology, 144, Mudd, 7330), (30, AS, Chemistry, 113, Remsen, 7429), CREATE TABLE `Member_of` ( FacID INTEGER REFERENCES Faculty(FacID), DNO INTEGER REFERENCES Department(DNO), Appt_Type VARCHAR(15) ); Sample rows from `Member_of`: (7792, 600, Primary), (9210, 520, Primary), (9811, 550, Primary), CREATE TABLE `Course` ( CID VARCHAR(7) PRIMARY KEY, CName VARCHAR(40), Credits INTEGER, Instructor INTEGER REFERENCES Faculty(FacID), Days VARCHAR(5), Hours VARCHAR(11), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Course`: (600.101, COMPUTER LITERACY, 3, 6112, MTW, 3, 600), (600.103, INTRODUCTION TO COMPUTER SCIENCE, 1, 4230, Th, 4, 600), (600.107, INTRO TO PROGRAMMING IN JAVA, 3, 1193, MTW, 3, 600), CREATE TABLE `Minor_in` ( StuID INTEGER REFERENCES Student(StuID), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Minor_in`: (1004, 520), (1005, 550), (1006, 50), CREATE TABLE `Enrolled_in` ( StuID INTEGER REFERENCES Student(StuID), CID VARCHAR(7) REFERENCES Course(CID), Grade VARCHAR(2) REFERENCES Gradeconversion(lettergrade) ); Sample rows from `Enrolled_in`: (1001, 550.681, A-), (1001, 600.303, B), (1001, 600.315, B+), CREATE TABLE `Gradeconversion` ( lettergrade VARCHAR(2) PRIMARY KEY, gradepoint FLOAT ); Sample rows from `Gradeconversion`: (A+, 4.0), (A, 4.0), (A-, 3.7), ",
        "output": "SELECT dname FROM department WHERE division  =  \"AS\" UNION SELECT dname FROM department WHERE division  =  \"EN\" AND building  =  \"NEB\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Give the number of students living in either HKG or CHI. ###filtered_database_schema: CREATE TABLE `Allergy_Type` ( Allergy VARCHAR(20) PRIMARY KEY, AllergyType VARCHAR(20) ); Sample rows from `Allergy_Type`: (Eggs, food), (Nuts, food), (Milk, food), CREATE TABLE `Has_Allergy` ( StuID INTEGER REFERENCES Student(StuID), Allergy VARCHAR(20) REFERENCES Allergy_Type(Allergy) ); Sample rows from `Has_Allergy`: (1001, Cat), (1002, Shellfish), (1002, Tree Pollen), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), ",
        "output": "SELECT COUNT(*) FROM student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the total budgets of the Marketing or Finance department. ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT SUM(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the total student capacity of all dorms? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT SUM(student_capacity) FROM dorm"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the id, name and nationality of the architect who built most mills? ###filtered_database_schema: CREATE TABLE `architect` ( id TEXT PRIMARY KEY, name TEXT, nationality TEXT, gender TEXT ); Sample rows from `architect`: (1, Frank Lloyd Wright, American, male), (2, Frank Gehry, Canadian, male), (3, Zaha Hadid, Iraqi, British, female), CREATE TABLE `bridge` ( architect_id INT REFERENCES architect(id), id INT PRIMARY KEY, name TEXT, location TEXT, length_meters REAL, length_feet REAL ); Sample rows from `bridge`: (1, 1, Xian Ren Qiao (Fairy Bridge), Guangxi , China, 121.0, 400.0), (2, 2, Landscape Arch, Arches National Park , Utah , USA, 88.0, 290.0), (3, 3, Kolob Arch, Zion National Park , Utah , USA, 87.0, 287.0), CREATE TABLE `mill` ( architect_id INT REFERENCES architect(id), id INT PRIMARY KEY, location TEXT, name TEXT, type TEXT, built_year INT, notes TEXT ); Sample rows from `mill`: (1, 1, Coswarem, Le Vieux Molen, Grondzeiler, 1840, Molenechos (Dutch)), (1, 2, Donceel, Moulin Bertrand, Grondzeiler, 1890, Molenechos (Dutch)), (2, 3, Fexhe-le-haut-Clocher, Moulin de Fexhe, Grondzeiler, 1843, Molenechos (Dutch)), ",
        "output": "SELECT t1.id ,  t1.name ,  t1.nationality FROM architect as t1 JOIN mill as t2 ON t1.id  =  t2.architect_id GROUP BY t1.id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name, account type, and account balance corresponding to the customer with the highest credit score? ###filtered_database_schema: CREATE TABLE `bank` ( branch_ID INT PRIMARY KEY, bname varchar(20), no_of_customers INT, city varchar(10), state varchar(20) ); Sample rows from `bank`: (1, morningside, 203, New York City, New York), (2, downtown, 123, Salt Lake City, Utah), (3, broadway, 453, New York City, New York), CREATE TABLE `customer` ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal INT, no_of_loans INT, credit_score INT, branch_ID INT REFERENCES bank(branch_ID), state varchar(20) ); Sample rows from `customer`: (1, Mary, saving, 2000, 2, 30, 2, Utah), (2, Jack, checking, 1000, 1, 20, 1, Texas), (3, Owen, saving, 800000, 0, 210, 3, New York), CREATE TABLE `loan` ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3) REFERENCES customer(Cust_ID), branch_ID varchar(3) REFERENCES bank(branch_ID), amount INT ); Sample rows from `loan`: (1, Mortgages, 1, 1, 2050), (2, Auto, 1, 2, 3000), (3, Business, 3, 3, 5000), ",
        "output": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: datasets used in papers written by jitendra malik ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t2.datasetid FROM paper as t3 JOIN paperdataset as t2 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what states border kentucky ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many sections does course ACCT-211 has? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT COUNT(DISTINCT class_section) FROM class WHERE crs_code  =  'ACCT-211'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what are the populations of the major cities of wisconsin ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT population FROM city WHERE population  >  150000 AND state_name  =  \"wisconsin\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the description for the budget type with code ORG? ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (BK, Book, excellent), (CV, CV, excellent), (PT, Presentation, very good), CREATE TABLE `Ref_Budget_Codes` ( Budget_Type_Code CHAR(15) PRIMARY KEY, Budget_Type_Description VARCHAR(255) ); Sample rows from `Ref_Budget_Codes`: (GV, Government), (ORG, Organisation), (SF, Self founded), CREATE TABLE `Projects` ( Project_ID INTEGER, Project_Details VARCHAR(255) ); Sample rows from `Projects`: (30, Society Research project), (35, Internet of Things project), (105, Graph Database project), CREATE TABLE `Documents` ( Document_ID INTEGER, Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Project_ID INTEGER REFERENCES Projects(Project_ID), Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Documents`: (29, CV, 30, 2004-08-28 06:59:19, Review on UK files, None, None), (42, BK, 105, 2012-12-27 19:09:18, Review on Canadian files, None, None), (57, CV, 195, 1980-10-22 14:17:11, Review on French files, None, None), CREATE TABLE `Statements` ( Statement_ID INTEGER REFERENCES Documents(Document_ID), Statement_Details VARCHAR(255) ); Sample rows from `Statements`: (57, Open Project), (192, Private Project), CREATE TABLE `Documents_with_Expenses` ( Document_ID INTEGER REFERENCES Documents(Document_ID), Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code), Document_Details VARCHAR(255) ); Sample rows from `Documents_with_Expenses`: (57, GV, government), (192, GV, government), (226, GV, government), CREATE TABLE `Accounts` ( Account_ID INTEGER, Statement_ID INTEGER REFERENCES Statements(Statement_ID), Account_Details VARCHAR(255) ); Sample rows from `Accounts`: (7, 57, 495.063), (61, 57, 930.14), (98, 57, 6035.84), ",
        "output": "SELECT budget_type_description FROM ref_budget_codes WHERE budget_type_code  =  \"ORG\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the companies and investors that correspond to each entrepreneur? ###filtered_database_schema: CREATE TABLE `entrepreneur` ( Entrepreneur_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Company TEXT, Money_Requested REAL, Investor TEXT ); Sample rows from `entrepreneur`: (1, 1, Umbrolly, 150000.0, Duncan Bannatyne), (2, 2, Grails Ltd, 120000.0, Doug Richard), (3, 3, Le Beanock, 54000.0, Rachel Elnaugh), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Height REAL, Weight REAL, Date_of_Birth TEXT ); Sample rows from `people`: (1, Francesco Postiglione, 1.9, 80.0, 1972-04-29), (2, Leonardo Binchi, 1.86, 57.0, 1975-08-27), (3, Fabrizio Buonocore, 1.83, 45.0, 1977-04-28), ",
        "output": "SELECT company ,  investor FROM entrepreneur"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the locations that have more than one railways. ###filtered_database_schema: CREATE TABLE `railway` ( Railway_ID INT PRIMARY KEY, Railway TEXT, Builder TEXT, Built TEXT, Wheels TEXT, Location TEXT, ObjectNumber TEXT ); Sample rows from `railway`: (1, SECR, SECR Ashford, 1901, 4-4-0, York, 1975-7006), (2, MR, MR Derby, 1902 Midland Railway 1000 was rebuilt in 1914., 4-4-0, Bo'ness, 1975-7018), (3, GNRD, GNR Doncaster, 1902, 4-4-2, Barrow Hill, 1975-7005), CREATE TABLE `train` ( Train_ID INT PRIMARY KEY, Train_Num TEXT, Name TEXT, From TEXT, Arrival TEXT, Railway_ID INT REFERENCES railway(Railway_ID) ); Sample rows from `train`: (1, 51195, Wardha-Ballarshah Pass, Wardha, 08:54, 1), (2, 12139, Sewagram Exp, Mumbai CST, 09:08, 1), (3, 12140, Ballarshah-Mumbai Pass, Ballarshah, 09:48, 2), CREATE TABLE `manager` ( Manager_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Working_year_starts TEXT, Age INT, Level INT ); Sample rows from `manager`: (1, Ben Curtis, United States, 2003, 45, 5), (2, Todd Hamilton, United States, 2004, 55, 5), (3, Tiger Woods, United States, 2006, 46, 5), CREATE TABLE `railway_manage` ( Railway_ID INT PRIMARY KEY REFERENCES railway(Railway_ID), Manager_ID INT PRIMARY KEY REFERENCES manager(Manager_ID), From_Year TEXT ); Sample rows from `railway_manage`: (8, 1, 2010), (9, 2, 2011), (7, 3, 2012), ",
        "output": "SELECT location FROM railway GROUP BY location HAVING COUNT(*)  >  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the names and locations of institutions that are founded after 1990 and have the type \"Private\". ###filtered_database_schema: CREATE TABLE `building` ( building_id TEXT PRIMARY KEY, Name TEXT, Street_address TEXT, Years_as_tallest TEXT, Height_feet INT, Floors INT ); Sample rows from `building`: (0, Citizens Bank Building, 701 North Franklin Street, 1913–1915, 145, 12), (1, Tampa City Hall, 315 John F. Kennedy Boulevard, 1915–1926, 160, 10), (2, Floridan Hotel, 905 Franklin Street, 1926–1966, 204, 17), CREATE TABLE `Institution` ( Institution_id TEXT PRIMARY KEY, Institution TEXT, Location TEXT, Founded REAL, Type TEXT, Enrollment INT, Team TEXT, Primary_Conference TEXT, building_id TEXT REFERENCES building(building_id) ); Sample rows from `Institution`: (0, Ave Maria University, Ave Maria, Florida, 1998.0, Private, 1200, Gyrenes, The Sun, 1), (1, Dakota State University, Madison, South Dakota, 1881.0, Public, 3102, Trojans, none, 1), (2, Edward Waters College, Jacksonville, Florida, 1866.0, Private, 800, Tigers, Gulf Coast (GCAC), 3), CREATE TABLE `protein` ( common_name TEXT PRIMARY KEY, protein_name TEXT, divergence_from_human_lineage REAL, accession_number TEXT, sequence_length REAL, sequence_identity_to_human_protein TEXT, Institution_id TEXT REFERENCES Institution(Institution_id) ); Sample rows from `protein`: (Tropical Clawed Frog, uncharacterized protein C20orf117-like, 371.2, XP_002942331.1, 1584.0, 39%, 1), (purple sea urchin, uncharacterized protein LOC578090, 742.9, XP_783370.2, 1587.0, 47%, 3), (body louse, Centromeric protein E, putative, 782.7, XP_002429877.1, 2086.0, 30%, 5), ",
        "output": "SELECT institution ,  location FROM institution WHERE founded  >  1990 AND type  =  'Private'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show each premise type and the number of premises in that type. ###filtered_database_schema: CREATE TABLE `Premises` ( premise_id INTEGER, premises_type VARCHAR(15), premise_details VARCHAR(255) ); Sample rows from `Premises`: (1, Warehouse, 036 Lueilwitz Harbor), (2, Warehouse, 676 Kelly Spur), (3, Residence, 27839 Carissa Tunnel Suite 048), CREATE TABLE `Products` ( product_id INTEGER, product_category VARCHAR(15), product_name VARCHAR(80) ); Sample rows from `Products`: (1, Food, Coffee Bean), (2, Electronics, Keyboard), (3, Books, Four Seasons), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method VARCHAR(15), customer_name VARCHAR(80), customer_phone VARCHAR(80), customer_email VARCHAR(80), customer_address VARCHAR(255), customer_login VARCHAR(80), customer_password VARCHAR(10) ); Sample rows from `Customers`: (1, Credit Card, Wendell, (773)971-9411x759, rodriguez.nathanael@example.net, 618 Webster Stream Apt. 161, None, b4459ad261), (2, Direct Debit, Gage, (402)890-2603x6005, stark.elna@example.net, 0260 Walker Trace, None, 7905d7f1b1), (3, Direct Debit, Elvera, 1-878-600-7193x8180, madyson.mclaughlin@example.org, 280 Landen Lake, None, 0b9f651030), CREATE TABLE `Mailshot_Campaigns` ( mailshot_id INTEGER, product_category VARCHAR(15), mailshot_name VARCHAR(80), mailshot_start_date DATETIME, mailshot_end_date DATETIME ); Sample rows from `Mailshot_Campaigns`: (1, food, US, 2018-02-15 09:52:17, 2018-03-08 14:40:20), (2, clothes, US, 2017-09-14 12:05:30, 2018-03-15 01:06:16), (3, food, FED, 2017-06-16 11:18:45, 2018-03-13 14:42:26), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER REFERENCES Customers(customer_id), premise_id INTEGER REFERENCES Premises(premise_id), date_address_from DATETIME, address_type_code VARCHAR(15), date_address_to DATETIME ); Sample rows from `Customer_Addresses`: (15, 1, 1992-08-23 21:17:38, Billing, 2018-02-28 20:54:58), (2, 2, 2010-02-23 02:49:50, Billing, 2018-03-15 18:34:41), (1, 1, 1975-12-24 10:01:37, Shipping, 2018-03-08 08:03:51), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status_code VARCHAR(15), shipping_method_code VARCHAR(15), order_placed_datetime DATETIME, order_delivered_datetime DATETIME, order_shipping_charges VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 2, Cancelled, Unspecified, 2015-06-15 18:19:26, 2018-03-20 12:00:00, 85.79), (2, 8, Cancelled, Unspecified, 2009-07-05 20:02:55, 2018-03-20 12:00:00, 98.4), (3, 9, Cancelled, FedEx, 2008-11-15 12:22:36, 2018-03-20 12:00:00, 36.87), CREATE TABLE `Mailshot_Customers` ( mailshot_id INTEGER REFERENCES Mailshot_Campaigns(mailshot_id), customer_id INTEGER REFERENCES Customers(customer_id), outcome_code VARCHAR(15), mailshot_customer_date DATETIME ); Sample rows from `Mailshot_Customers`: (4, 3, Order, 2018-03-15 15:43:14), (10, 1, No Response, 2018-03-04 13:06:55), (15, 9, No Response, 2018-03-11 11:32:20), CREATE TABLE `Order_Items` ( item_id INTEGER, order_item_status_code VARCHAR(15), order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), item_status_code VARCHAR(15), item_delivered_datetime DATETIME, item_order_quantity VARCHAR(80) ); Sample rows from `Order_Items`: (1, Delivered, 10, 13, good, 2018-02-25 18:22:10, 6), (2, Paid, 6, 7, good, 2018-02-27 18:04:55, 7), (3, Cancelled, 8, 1, good, 2018-03-16 15:58:27, 4), ",
        "output": "SELECT premises_type ,  COUNT(*) FROM premises GROUP BY premises_type"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text. ###filtered_database_schema: CREATE TABLE `chip_model` ( Model_name TEXT PRIMARY KEY, Launch_year REAL, RAM_MiB REAL, ROM_MiB REAL, Slots TEXT, WiFi TEXT, Bluetooth TEXT ); Sample rows from `chip_model`: (X5, 2002.0, 32.0, 32.0, 1CFII,1SD, No, No), (X5 high end, 2002.0, 64.0, 48.0, 1CFII,1SD, No, No), (X3 Basic, 2003.0, 32.0, 32.0, 1SD, No, No), CREATE TABLE `screen_mode` ( Graphics_mode REAL PRIMARY KEY, Char_cells TEXT, Pixels TEXT, Hardware_colours REAL, used_kb REAL, map TEXT, Type TEXT ); Sample rows from `screen_mode`: (0.0, 80 × 32, 640 × 256, 2.0, 20.0, 3000–7FFF, Graphics), (1.0, 40 × 32, 320 × 256, 4.0, 20.0, 3000–7FFF, Graphics), (2.0, 20 × 32, 160 × 256, 8.0, 20.0, 3000–7FFF, Graphics), CREATE TABLE `phone` ( Company_name TEXT, Hardware_Model_name TEXT PRIMARY KEY, Accreditation_type TEXT, Accreditation_level TEXT, Date TEXT, chip_model TEXT REFERENCES chip_model(Model_name), screen_mode TEXT REFERENCES screen_mode(Graphics_mode) ); Sample rows from `phone`: (Sony Mobile Communications, XPERIA T, XPERIA J, Full, joyn Hot Fixes, Approved (awarded 15.11.12), X5, 1), (LG Electronics, LG-P760, Full, joyn Hot Fixes, Approved (awarded 19.11.12), X51v, 3), (Nokia Corporation, Lumia 920, Lumia 820, Lumia 620, Full, joyn Hot Fixes, Approved (awarded 05.12.12), X5, 4), ",
        "output": "SELECT DISTINCT t2.hardware_model_name FROM screen_mode as t1 JOIN phone as t2 ON t1.graphics_mode = t2.screen_mode WHERE t2.company_name  =  \"Nokia Corporation\" AND t1.type != \"Text\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the capital of the smallest state ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT capital FROM state WHERE area  =  ( SELECT MIN(area) FROM state );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the order ids and details for orderes with two or more invoices. ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(50), customer_middle_initial VARCHAR(1), customer_last_name VARCHAR(50), gender VARCHAR(1), email_address VARCHAR(255), login_name VARCHAR(80), login_password VARCHAR(20), phone_number VARCHAR(255), town_city VARCHAR(50), state_county_province VARCHAR(50), country VARCHAR(50) ); Sample rows from `Customers`: (1, Dee, A, Larkin, 1, thora.torphy@example.org, xhartmann, 77789d292604ea04406f, 241.796.1219x37862, North Nellie, WestVirginia, USA), (2, Brennon, H, Weimann, 0, roosevelt.collier@example.org, shayne.lesch, ce97a3e4539347daab96, (943)219-4234x415, South Isabell, Oklahoma, USA), (3, Joesph, K, Schaefer, 0, homenick.ambrose@example.net, feeney.lauriane, a6c7a7064c36b038d402, (488)524-5345, New Nikolas, Arkansas, USA), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 12, 2012-06-27 20:49:56, None), (2, 12, 2012-08-25 07:51:54, None), (3, 8, 2017-11-05 15:32:38, None), CREATE TABLE `Invoices` ( invoice_number INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_date DATETIME ); Sample rows from `Invoices`: (1, 9, 2018-03-01 16:40:48), (2, 9, 2018-03-20 00:21:41), (3, 3, 2018-03-05 08:47:33), CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_account_opened DATETIME, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 8, 2016-07-30 22:22:24, 900, Regular), (2, 3, 2017-05-29 16:45:17, 520, VIP), (3, 8, 2012-05-04 18:50:32, 323, Regular), CREATE TABLE `Product_Categories` ( production_type_code VARCHAR(15) PRIMARY KEY, product_type_description VARCHAR(80), vat_rating DECIMAL(19,4) ); Sample rows from `Product_Categories`: (Food, Food, 15.84), (DVDs, Dvd products, 11.4), (Books, Books, 13.95), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, production_type_code VARCHAR(15) REFERENCES Product_Categories(production_type_code), unit_price DECIMAL(19,4), product_name VARCHAR(80), product_color VARCHAR(20), product_size VARCHAR(20) ); Sample rows from `Products`: (1, 4, Food, 617.95, Coffee Bean, Red, Medium), (2, 4, Books, 558.49, Learning French, Yellow, Medium), (3, 8, Electronics, 563.58, Fans, Black, Medium), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DECIMAL(19,4), transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 13, 12, Payment, 2018-03-15 21:13:57, 613.96, None, None), (2, 9, 1, Payment, 2018-03-13 13:27:46, 368.46, None, None), (3, 6, 1, Refund, 2018-03-03 01:50:25, 1598.25, None, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), product_id INTEGER REFERENCES Products(product_id), product_quantity VARCHAR(50), other_order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 4, 6, None), (2, 4, 10, 7, None), (3, 15, 5, 4, None), CREATE TABLE `Invoice_Line_Items` ( order_item_id INTEGER REFERENCES Order_Items(order_item_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), product_id INTEGER REFERENCES Products(product_id), product_title VARCHAR(80), product_quantity VARCHAR(50), product_price DECIMAL(19,4), derived_product_cost DECIMAL(19,4), derived_vat_payable DECIMAL(19,4), derived_total_cost DECIMAL(19,4) ); Sample rows from `Invoice_Line_Items`: (14, 9, 5, prod_name, 4, 742.37, 191.11, None, 69.82), (3, 9, 15, prod_name, 1, 814.87, 176.29, None, 59.56), (4, 10, 15, prod_name, 8, 943.07, 73.14, None, 59.93), ",
        "output": "SELECT t2.order_id ,  t2.order_details FROM invoices as t1 JOIN orders as t2 ON t1.order_id  =  t2.order_id GROUP BY t2.order_id HAVING COUNT(*)  >  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of customers whose name contains \"Diana\". ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_Details VARCHAR(255) ); Sample rows from `Customers`: (252, America Jaskolski), (263, Ellsworth Paucek), (334, Mrs. Hanna Willms), CREATE TABLE `Staff` ( Staff_ID INTEGER, Staff_Details VARCHAR(255) ); Sample rows from `Staff`: (406, Clifton), (427, Cathryn), (510, Kaci), CREATE TABLE `Policies` ( Policy_ID INTEGER, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Policy_Type_Code CHAR(15), Start_Date DATETIME, End_Date DATETIME ); Sample rows from `Policies`: (125, 808, Deputy, 2018-02-10 08:56:30, 2018-03-18 09:17:26), (151, 380, Jurisdiction, 2017-12-20 06:02:31, 2017-09-16 22:04:13), (287, 334, Jurisdiction, 2017-03-16 18:16:52, 2017-11-24 06:36:51), CREATE TABLE `Claim_Headers` ( Claim_Header_ID INTEGER, Claim_Status_Code CHAR(15), Claim_Type_Code CHAR(15), Policy_ID INTEGER REFERENCES Policies(Policy_ID), Date_of_Claim DATETIME, Date_of_Settlement DATETIME, Amount_Claimed DECIMAL(20,4), Amount_Piad DECIMAL(20,4) ); Sample rows from `Claim_Headers`: (15, Settled, Handphone Subsidy, 518, 2016-05-31 06:07:11, 2018-02-23 03:46:38, 349.15, 582.03), (24, Disputed, Child Birth, 518, 2016-12-30 21:43:21, 2017-10-08 21:43:14, 318.16, 309.2), (27, Disputed, Overtime Meal Subsidy, 518, 2017-05-01 13:34:43, 2017-11-16 04:06:05, 362.71, 132.97), CREATE TABLE `Claims_Documents` ( Claim_ID INTEGER PRIMARY KEY REFERENCES Claim_Headers(Claim_Header_ID), Document_Type_Code CHAR(15) PRIMARY KEY, Created_by_Staff_ID INTEGER REFERENCES Staff(Staff_ID), Created_Date INTEGER ); Sample rows from `Claims_Documents`: (24, Document, 718, 8), (27, Document, 986, 6), (27, Medical, 427, 8), CREATE TABLE `Claims_Processing_Stages` ( Claim_Stage_ID INTEGER, Next_Claim_Stage_ID INTEGER, Claim_Status_Name VARCHAR(255), Claim_Status_Description VARCHAR(255) ); Sample rows from `Claims_Processing_Stages`: (1, 1, Open, Open a new claim), (3, 1, Close, Close a claim), CREATE TABLE `Claims_Processing` ( Claim_Processing_ID INTEGER, Claim_ID INTEGER REFERENCES Claim_Headers(Claim_Header_ID), Claim_Outcome_Code CHAR(15), Claim_Stage_ID INTEGER, Staff_ID INTEGER REFERENCES Staff(Staff_ID) ); Sample rows from `Claims_Processing`: (118, 28, In progress, 1, 771), (145, 62, In progress, 1, 589), (213, 27, In progress, 1, 589), ",
        "output": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of artist who have the letter 'a' in their names? ###filtered_database_schema: CREATE TABLE `Album` ( AlbumId INTEGER, Title varchar(160), ArtistId INTEGER PRIMARY KEY REFERENCES Artist(ArtistId) ); Sample rows from `Album`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `Artist` ( ArtistId INTEGER, Name varchar(120) ); Sample rows from `Artist`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `Customer` ( CustomerId INTEGER, FirstName varchar(40), LastName varchar(20), Company varchar(80), Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60), SupportRepId INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId) ); Sample rows from `Customer`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `Employee` ( EmployeeId INTEGER, LastName varchar(20), FirstName varchar(20), Title varchar(30), ReportsTo INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId), BirthDate datetime, HireDate datetime, Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60) ); Sample rows from `Employee`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `Genre` ( GenreId INTEGER, Name varchar(120) ); Sample rows from `Genre`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `Invoice` ( InvoiceId INTEGER, CustomerId INTEGER PRIMARY KEY REFERENCES Customer(CustomerId), InvoiceDate datetime, BillingAddress varchar(70), BillingCity varchar(40), BillingState varchar(40), BillingCountry varchar(40), BillingPostalCode varchar(10), Total decimal(10,2) ); Sample rows from `Invoice`: (1, 2, 2009-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2009-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2009-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `InvoiceLine` ( InvoiceLineId INTEGER, InvoiceId INTEGER PRIMARY KEY REFERENCES Invoice(InvoiceId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId), UnitPrice decimal(10,2), Quantity INTEGER ); Sample rows from `InvoiceLine`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `MediaType` ( MediaTypeId INTEGER, Name varchar(120) ); Sample rows from `MediaType`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `Playlist` ( PlaylistId INTEGER, Name varchar(120) ); Sample rows from `Playlist`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `PlaylistTrack` ( PlaylistId INTEGER PRIMARY KEY REFERENCES Playlist(PlaylistId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId) ); Sample rows from `PlaylistTrack`: (1, 1), (8, 1), (17, 1), CREATE TABLE `Track` ( TrackId INTEGER, Name varchar(200), AlbumId INTEGER PRIMARY KEY REFERENCES Album(AlbumId), MediaTypeId INTEGER PRIMARY KEY REFERENCES MediaType(MediaTypeId), GenreId INTEGER PRIMARY KEY REFERENCES Genre(GenreId), Composer varchar(220), Milliseconds INTEGER, Bytes INTEGER, UnitPrice decimal(10,2) ); Sample rows from `Track`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), ",
        "output": "SELECT name FROM artist WHERE name LIKE \"%a%\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Hom many albums does the artist \"Metallica\" have? ###filtered_database_schema: CREATE TABLE `Album` ( AlbumId INTEGER, Title varchar(160), ArtistId INTEGER PRIMARY KEY REFERENCES Artist(ArtistId) ); Sample rows from `Album`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `Artist` ( ArtistId INTEGER, Name varchar(120) ); Sample rows from `Artist`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `Customer` ( CustomerId INTEGER, FirstName varchar(40), LastName varchar(20), Company varchar(80), Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60), SupportRepId INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId) ); Sample rows from `Customer`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `Employee` ( EmployeeId INTEGER, LastName varchar(20), FirstName varchar(20), Title varchar(30), ReportsTo INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId), BirthDate datetime, HireDate datetime, Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60) ); Sample rows from `Employee`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `Genre` ( GenreId INTEGER, Name varchar(120) ); Sample rows from `Genre`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `Invoice` ( InvoiceId INTEGER, CustomerId INTEGER PRIMARY KEY REFERENCES Customer(CustomerId), InvoiceDate datetime, BillingAddress varchar(70), BillingCity varchar(40), BillingState varchar(40), BillingCountry varchar(40), BillingPostalCode varchar(10), Total decimal(10,2) ); Sample rows from `Invoice`: (1, 2, 2009-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2009-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2009-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `InvoiceLine` ( InvoiceLineId INTEGER, InvoiceId INTEGER PRIMARY KEY REFERENCES Invoice(InvoiceId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId), UnitPrice decimal(10,2), Quantity INTEGER ); Sample rows from `InvoiceLine`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `MediaType` ( MediaTypeId INTEGER, Name varchar(120) ); Sample rows from `MediaType`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `Playlist` ( PlaylistId INTEGER, Name varchar(120) ); Sample rows from `Playlist`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `PlaylistTrack` ( PlaylistId INTEGER PRIMARY KEY REFERENCES Playlist(PlaylistId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId) ); Sample rows from `PlaylistTrack`: (1, 1), (8, 1), (17, 1), CREATE TABLE `Track` ( TrackId INTEGER, Name varchar(200), AlbumId INTEGER PRIMARY KEY REFERENCES Album(AlbumId), MediaTypeId INTEGER PRIMARY KEY REFERENCES MediaType(MediaTypeId), GenreId INTEGER PRIMARY KEY REFERENCES Genre(GenreId), Composer varchar(220), Milliseconds INTEGER, Bytes INTEGER, UnitPrice decimal(10,2) ); Sample rows from `Track`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), ",
        "output": "SELECT COUNT(*) FROM album as t1 JOIN artist as t2 ON t1.artistid  =  t2.artistid WHERE t2.name  =  \"Metallica\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of the technicians by ascending order of age? ###filtered_database_schema: CREATE TABLE `repair` ( repair_ID INT PRIMARY KEY, name TEXT, Launch_Date TEXT, Notes TEXT ); Sample rows from `repair`: (1, Discoverer, 21 Jan 2009, repair Failed. Failed to achieve orbit), (2, Discoverer 1, 28 Feb 2009, First object in polar orbit), (3, Discoverer 3, 03 Jun 2009, repair failed. Failed to achieve orbit), CREATE TABLE `machine` ( Machine_ID INT PRIMARY KEY, Making_Year INT, Class TEXT, Team TEXT, Machine_series TEXT, value_points REAL, quality_rank INT ); Sample rows from `machine`: (1, 1991, 125cc, Hero Sports TS- Honda, RS125, 105.0, 2), (2, 1992, 125cc, Marlboro Pileri - Honda, RS125, 57.0, 1), (3, 1993, 125cc, Marlboro Pileri - Honda, RS125, 129.0, 4), CREATE TABLE `technician` ( technician_id REAL PRIMARY KEY, Name TEXT, Team TEXT, Starting_Year REAL, Age INT ); Sample rows from `technician`: (1.0, Joe Sewell, NYY, 2012.0, 37), (2.0, John Brown, NYY, 2013.0, 36), (3.0, Tony Sewell, CLE, 2005.0, 43), CREATE TABLE `repair_assignment` ( technician_id INT PRIMARY KEY REFERENCES technician(technician_id), repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID), Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID) ); Sample rows from `repair_assignment`: (1, 1, 1), (2, 2, 2), (3, 3, 3), ",
        "output": "SELECT name FROM technician ORDER BY age ASC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Who are the prominent researchers in Neutralizing Antibody in 2012 ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(t4.paperid)  ,  t3.authorid FROM paperkeyphrase as t1 JOIN keyphrase as t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper as t4 ON t4.paperid  =  t1.paperid JOIN writes as t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"Neutralizing Antibody\" AND t4.year  =  2012 GROUP BY t3.authorid ORDER BY COUNT(t4.paperid) DESC;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of the songs whose rating is below the rating of all songs in English? ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT song_name FROM song WHERE rating  <   (SELECT MIN(rating) FROM song WHERE languages  =  'english')"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the names of the gymnasts. ###filtered_database_schema: CREATE TABLE `gymnast` ( Gymnast_ID INT PRIMARY KEY REFERENCES people(People_ID), Floor_Exercise_Points REAL, Pommel_Horse_Points REAL, Rings_Points REAL, Vault_Points REAL, Parallel_Bars_Points REAL, Horizontal_Bar_Points REAL, Total_Points REAL ); Sample rows from `gymnast`: (1, 9.725, 9.737, 9.512, 9.575, 9.762, 9.75, 58.061), (2, 9.7, 9.625, 9.625, 9.65, 9.587, 9.737, 57.924), (4, 8.987, 9.75, 9.75, 9.65, 9.787, 9.725, 57.649), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Age REAL, Height REAL, Hometown TEXT ); Sample rows from `people`: (1, Paul Hamm, 24.0, 1.71, Santo Domingo), (2, Lorraine Súarez Carmona, 21.0, 1.75, Bonao), (3, Ashley Pérez Cabrera, 19.0, 1.7, Miami), ",
        "output": "SELECT t2.name FROM gymnast as t1 JOIN people as t2 ON t1.gymnast_id  =  t2.people_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find all restaurant with Valet Service in Dallas Texas ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT t1.name FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id JOIN category as t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"Valet Service\" AND t3.category_name  =  \"restaurant\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Tell me the the date when the first claim was made. ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_Details VARCHAR(255) ); Sample rows from `Customers`: (1, America Jaskolski), (2, Ellsworth Paucek), (3, Mrs. Hanna Willms), CREATE TABLE `Customer_Policies` ( Policy_ID INTEGER, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Policy_Type_Code CHAR(15), Start_Date DATE, End_Date DATE ); Sample rows from `Customer_Policies`: (119, 1, Car, 2018-01-21, 2017-12-15), (141, 2, Life, 2017-08-21, 2017-09-29), (143, 3, Car, 2017-06-16, 2017-12-09), CREATE TABLE `Claims` ( Claim_ID INTEGER, Policy_ID INTEGER REFERENCES Customer_Policies(Policy_ID), Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER ); Sample rows from `Claims`: (143, 744, 2017-03-11, 2017-11-03, 43884, 1085), (423, 552, 2016-08-12, 2018-01-27, 79134, 1724), (442, 473, 2017-02-24, 2018-01-21, 70088, 1189), CREATE TABLE `Settlements` ( Settlement_ID INTEGER, Claim_ID INTEGER REFERENCES Claims(Claim_ID), Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, Customer_Policy_ID INTEGER ); Sample rows from `Settlements`: (357, 486, 2018-08-07, 2018-01-16, 38543, 1181, 515), (412, 621, 2017-08-27, 2018-02-04, 57669, 1427, 617), (476, 801, 2016-09-05, 2018-03-02, 30954, 1805, 943), CREATE TABLE `Payments` ( Payment_ID INTEGER, Settlement_ID INTEGER REFERENCES Settlements(Settlement_ID), Payment_Method_Code VARCHAR(255), Date_Payment_Made DATE, Amount_Payment INTEGER ); Sample rows from `Payments`: (384, 516, MasterCard, 2018-02-16, 241730), (435, 476, MasterCard, 2017-05-28, 448613), (484, 516, MasterCard, 2017-06-24, 456098), ",
        "output": "SELECT date_claim_made FROM claims ORDER BY date_claim_made ASC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the receipt date of the document with id 3? ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( document_type_code CHAR(15) PRIMARY KEY, document_type_description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CD, b), (Paper, u), (Hard Drive, f), CREATE TABLE `Roles` ( role_code CHAR(15) PRIMARY KEY, role_description VARCHAR(255) ); Sample rows from `Roles`: (ED, Editor), (PT, Photo), (MG, Manager), CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (0, IT), (1, MX), (2, DE), CREATE TABLE `Ref_Document_Status` ( document_status_code CHAR(15) PRIMARY KEY, document_status_description VARCHAR(255) ); Sample rows from `Ref_Document_Status`: (working, currently working on), (done, mailed), (overdue, mailed late), CREATE TABLE `Ref_Shipping_Agents` ( shipping_agent_code CHAR(15) PRIMARY KEY, shipping_agent_name VARCHAR(255), shipping_agent_description VARCHAR(255) ); Sample rows from `Ref_Shipping_Agents`: (UP, UPS, g), (US, USPS, q), (AL, Airline, w), CREATE TABLE `Documents` ( document_id INTEGER, document_status_code CHAR(15) REFERENCES Ref_Document_Status(document_status_code), document_type_code CHAR(15) REFERENCES Ref_Document_Types(document_type_code), shipping_agent_code CHAR(15) REFERENCES Ref_Shipping_Agents(shipping_agent_code), receipt_date DATETIME, receipt_number VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Documents`: (1, working, CD, UP, 2008-04-21 20:42:25, 19, z), (2, done, Paper, US, 1974-05-08 00:00:46, 34, h), (3, done, Paper, UP, 2014-12-25 17:22:44, 93, h), CREATE TABLE `Employees` ( employee_id INTEGER, role_code CHAR(15) REFERENCES Roles(role_code), employee_name VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Employees`: (1, ED, Koby, h), (2, ED, Kenyon, f), (3, PR, Haley, b), CREATE TABLE `Document_Drafts` ( document_id INTEGER PRIMARY KEY REFERENCES Documents(document_id), draft_number INTEGER PRIMARY KEY, draft_details VARCHAR(255) ); Sample rows from `Document_Drafts`: (1, 0, e), (1, 2, k), (2, 1, v), CREATE TABLE `Draft_Copies` ( document_id INTEGER PRIMARY KEY REFERENCES Document_Drafts(document_id), draft_number INTEGER PRIMARY KEY REFERENCES Document_Drafts(draft_number), copy_number INTEGER PRIMARY KEY ); Sample rows from `Draft_Copies`: (2, 8, 5), (4, 9, 6), (23, 9, 15), CREATE TABLE `Circulation_History` ( document_id INTEGER PRIMARY KEY REFERENCES Draft_Copies(document_id), draft_number INTEGER PRIMARY KEY REFERENCES Draft_Copies(draft_number), copy_number INTEGER PRIMARY KEY REFERENCES Draft_Copies(copy_number), employee_id INTEGER PRIMARY KEY REFERENCES Employees(employee_id) ); Sample rows from `Circulation_History`: (20, 17, 15, 8), (1, 2, 5, 1), (2, 1, 4, 2), CREATE TABLE `Documents_Mailed` ( document_id INTEGER PRIMARY KEY REFERENCES Documents(document_id), mailed_to_address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), mailing_date DATETIME ); Sample rows from `Documents_Mailed`: (2, 8, 1977-04-01 17:03:50), (4, 3, 1992-11-07 15:03:41), (4, 9, 1973-02-21 10:17:01), ",
        "output": "SELECT receipt_date FROM documents WHERE document_id = 3;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre? ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT f_id FROM song WHERE resolution  >  (SELECT AVG(resolution) FROM song WHERE genre_is  =  \"modern\")"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the shipping agent code of shipping agent UPS? ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( document_type_code CHAR(15) PRIMARY KEY, document_type_description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CD, b), (Paper, u), (Hard Drive, f), CREATE TABLE `Roles` ( role_code CHAR(15) PRIMARY KEY, role_description VARCHAR(255) ); Sample rows from `Roles`: (ED, Editor), (PT, Photo), (MG, Manager), CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (0, IT), (1, MX), (2, DE), CREATE TABLE `Ref_Document_Status` ( document_status_code CHAR(15) PRIMARY KEY, document_status_description VARCHAR(255) ); Sample rows from `Ref_Document_Status`: (working, currently working on), (done, mailed), (overdue, mailed late), CREATE TABLE `Ref_Shipping_Agents` ( shipping_agent_code CHAR(15) PRIMARY KEY, shipping_agent_name VARCHAR(255), shipping_agent_description VARCHAR(255) ); Sample rows from `Ref_Shipping_Agents`: (UP, UPS, g), (US, USPS, q), (AL, Airline, w), CREATE TABLE `Documents` ( document_id INTEGER, document_status_code CHAR(15) REFERENCES Ref_Document_Status(document_status_code), document_type_code CHAR(15) REFERENCES Ref_Document_Types(document_type_code), shipping_agent_code CHAR(15) REFERENCES Ref_Shipping_Agents(shipping_agent_code), receipt_date DATETIME, receipt_number VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Documents`: (1, working, CD, UP, 2008-04-21 20:42:25, 19, z), (2, done, Paper, US, 1974-05-08 00:00:46, 34, h), (3, done, Paper, UP, 2014-12-25 17:22:44, 93, h), CREATE TABLE `Employees` ( employee_id INTEGER, role_code CHAR(15) REFERENCES Roles(role_code), employee_name VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Employees`: (1, ED, Koby, h), (2, ED, Kenyon, f), (3, PR, Haley, b), CREATE TABLE `Document_Drafts` ( document_id INTEGER PRIMARY KEY REFERENCES Documents(document_id), draft_number INTEGER PRIMARY KEY, draft_details VARCHAR(255) ); Sample rows from `Document_Drafts`: (1, 0, e), (1, 2, k), (2, 1, v), CREATE TABLE `Draft_Copies` ( document_id INTEGER PRIMARY KEY REFERENCES Document_Drafts(document_id), draft_number INTEGER PRIMARY KEY REFERENCES Document_Drafts(draft_number), copy_number INTEGER PRIMARY KEY ); Sample rows from `Draft_Copies`: (2, 8, 5), (4, 9, 6), (23, 9, 15), CREATE TABLE `Circulation_History` ( document_id INTEGER PRIMARY KEY REFERENCES Draft_Copies(document_id), draft_number INTEGER PRIMARY KEY REFERENCES Draft_Copies(draft_number), copy_number INTEGER PRIMARY KEY REFERENCES Draft_Copies(copy_number), employee_id INTEGER PRIMARY KEY REFERENCES Employees(employee_id) ); Sample rows from `Circulation_History`: (20, 17, 15, 8), (1, 2, 5, 1), (2, 1, 4, 2), CREATE TABLE `Documents_Mailed` ( document_id INTEGER PRIMARY KEY REFERENCES Documents(document_id), mailed_to_address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), mailing_date DATETIME ); Sample rows from `Documents_Mailed`: (2, 8, 1977-04-01 17:03:50), (4, 3, 1992-11-07 15:03:41), (4, 9, 1973-02-21 10:17:01), ",
        "output": "SELECT shipping_agent_code FROM ref_shipping_agents WHERE shipping_agent_name = \"UPS\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of different last names actors have. ###filtered_database_schema: CREATE TABLE `actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), last_update TIMESTAMP ); Sample rows from `actor`: (1, PENELOPE, GUINESS, 2006-02-15 04:34:33), (2, NICK, WAHLBERG, 2006-02-15 04:34:33), (3, ED, CHASE, 2006-02-15 04:34:33), CREATE TABLE `address` ( address_id SMALLINT UNSIGNED PRIMARY KEY, address VARCHAR(50), address2 VARCHAR(50), district VARCHAR(20), city_id SMALLINT UNSIGNED REFERENCES city(city_id), postal_code VARCHAR(10), phone VARCHAR(20), last_update TIMESTAMP ); Sample rows from `address`: (1, 47 MySakila Drive, None, Alberta, 300, , , 2006-02-15 04:45:30), (2, 28 MySQL Boulevard, None, QLD, 576, , , 2006-02-15 04:45:30), (3, 23 Workhaven Lane, None, Alberta, 300, , 14033335568, 2006-02-15 04:45:30), CREATE TABLE `category` ( category_id TINYINT UNSIGNED PRIMARY KEY, name VARCHAR(25), last_update TIMESTAMP ); Sample rows from `category`: (1, Action, 2006-02-15 04:46:27), (2, Animation, 2006-02-15 04:46:27), (3, Children, 2006-02-15 04:46:27), CREATE TABLE `city` ( city_id SMALLINT UNSIGNED PRIMARY KEY, city VARCHAR(50), country_id SMALLINT UNSIGNED REFERENCES country(country_id), last_update TIMESTAMP ); Sample rows from `city`: (1, A Corua (La Corua), 87, 2006-02-15 04:45:25), (2, Abha, 82, 2006-02-15 04:45:25), (3, Abu Dhabi, 101, 2006-02-15 04:45:25), CREATE TABLE `country` ( country_id SMALLINT UNSIGNED PRIMARY KEY, country VARCHAR(50), last_update TIMESTAMP ); Sample rows from `country`: (1, Afghanistan, 2006-02-15 04:44:00), (2, Algeria, 2006-02-15 04:44:00), (3, American Samoa, 2006-02-15 04:44:00), CREATE TABLE `customer` ( customer_id SMALLINT UNSIGNED PRIMARY KEY, store_id TINYINT UNSIGNED REFERENCES store(store_id), first_name VARCHAR(45), last_name VARCHAR(45), email VARCHAR(50), address_id SMALLINT UNSIGNED REFERENCES address(address_id), active BOOLEAN, create_date DATETIME, last_update TIMESTAMP ); Sample rows from `customer`: (1, 1, MARY, SMITH, MARY.SMITH@sakilacustomer.org, 5, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (2, 1, PATRICIA, JOHNSON, PATRICIA.JOHNSON@sakilacustomer.org, 6, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), (3, 1, LINDA, WILLIAMS, LINDA.WILLIAMS@sakilacustomer.org, 7, 1, 2006-02-14 22:04:36, 2006-02-15 04:57:20), CREATE TABLE `film` ( film_id SMALLINT UNSIGNED PRIMARY KEY, title VARCHAR(255), description TEXT, release_year YEAR, language_id TINYINT UNSIGNED REFERENCES language(language_id), original_language_id TINYINT UNSIGNED REFERENCES language(language_id), rental_duration TINYINT UNSIGNED, rental_rate DECIMAL(4,2), length SMALLINT UNSIGNED, replacement_cost DECIMAL(5,2), rating , special_features , last_update TIMESTAMP ); Sample rows from `film`: (1, ACADEMY DINOSAUR, A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies, 2006, 1, None, 6, 0.99, 86, 20.99, PG, Deleted Scenes,Behind the Scenes, 2006-02-15 05:03:42), (2, ACE GOLDFINGER, A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China, 2006, 1, None, 3, 4.99, 48, 12.99, G, Trailers,Deleted Scenes, 2006-02-15 05:03:42), (3, ADAPTATION HOLES, A Astounding Reflection of a Lumberjack And a Car who must Sink a Lumberjack in A Baloon Factory, 2006, 1, None, 7, 2.99, 50, 18.99, NC-17, Trailers,Deleted Scenes, 2006-02-15 05:03:42), CREATE TABLE `film_actor` ( actor_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES actor(actor_id), film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), last_update TIMESTAMP ); Sample rows from `film_actor`: (1, 1, 2006-02-15 05:05:03), (1, 23, 2006-02-15 05:05:03), (1, 25, 2006-02-15 05:05:03), CREATE TABLE `film_category` ( film_id SMALLINT UNSIGNED PRIMARY KEY REFERENCES film(film_id), category_id TINYINT UNSIGNED PRIMARY KEY REFERENCES category(category_id), last_update TIMESTAMP ); Sample rows from `film_category`: (1, 6, 2006-02-15 05:07:09), (2, 11, 2006-02-15 05:07:09), (3, 6, 2006-02-15 05:07:09), CREATE TABLE `film_text` ( film_id SMALLINT PRIMARY KEY, title VARCHAR(255), description TEXT ); CREATE TABLE `inventory` ( inventory_id MEDIUMINT UNSIGNED PRIMARY KEY, film_id SMALLINT UNSIGNED REFERENCES film(film_id), store_id TINYINT UNSIGNED REFERENCES store(store_id), last_update TIMESTAMP ); Sample rows from `inventory`: (1, 1, 1, 2006-02-15 05:09:17), (2, 1, 1, 2006-02-15 05:09:17), (3, 1, 1, 2006-02-15 05:09:17), CREATE TABLE `language` ( language_id TINYINT UNSIGNED PRIMARY KEY, name CHAR(20), last_update TIMESTAMP ); CREATE TABLE `payment` ( payment_id SMALLINT UNSIGNED PRIMARY KEY, customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), rental_id INT REFERENCES rental(rental_id), amount DECIMAL(5,2), payment_date DATETIME, last_update TIMESTAMP ); Sample rows from `payment`: (1, 1, 1, 76, 2.99, 2005-05-25 11:30:37, 2006-02-15 22:12:30), (2, 1, 1, 573, 0.99, 2005-05-28 10:35:23, 2006-02-15 22:12:30), (3, 1, 1, 1185, 5.99, 2005-06-15 00:54:12, 2006-02-15 22:12:30), CREATE TABLE `rental` ( rental_id INT PRIMARY KEY, rental_date DATETIME, inventory_id MEDIUMINT UNSIGNED REFERENCES inventory(inventory_id), customer_id SMALLINT UNSIGNED REFERENCES customer(customer_id), return_date DATETIME, staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), last_update TIMESTAMP ); Sample rows from `rental`: (1, 2005-05-24 22:53:30, 367, 130, 2005-05-26 22:04:30, 1, 2006-02-15 21:30:53), (2, 2005-05-24 22:54:33, 1525, 459, 2005-05-28 19:40:33, 1, 2006-02-15 21:30:53), (3, 2005-05-24 23:03:39, 1711, 408, 2005-06-01 22:12:39, 1, 2006-02-15 21:30:53), CREATE TABLE `staff` ( staff_id TINYINT UNSIGNED PRIMARY KEY, first_name VARCHAR(45), last_name VARCHAR(45), address_id SMALLINT UNSIGNED REFERENCES address(address_id), picture BLOB, email VARCHAR(50), store_id TINYINT UNSIGNED, active BOOLEAN, username VARCHAR(16), password VARCHAR(40), last_update TIMESTAMP ); CREATE TABLE `store` ( store_id TINYINT UNSIGNED PRIMARY KEY, manager_staff_id TINYINT UNSIGNED REFERENCES staff(staff_id), address_id SMALLINT UNSIGNED REFERENCES address(address_id), last_update TIMESTAMP ); ",
        "output": "SELECT COUNT(DISTINCT last_name) FROM actor"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there. ###filtered_database_schema: CREATE TABLE `perpetrator` ( Perpetrator_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Date TEXT, Year REAL, Location TEXT, Country TEXT, Killed INT, Injured INT ); Sample rows from `perpetrator`: (1, 1, 04.26 April 26/27, 1982.0, Uiryeong, South Korea, 56, 37), (2, 3, 11.18 Nov. 18, 1995.0, Zhaodong, China, 32, 16), (3, 4, 05.21 May 21, 1938.0, Kaio, Japan, 30, 3), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Height REAL, Weight REAL, Home Town TEXT ); Sample rows from `people`: (1, Ron Baxter, 6.4, 205.0, Los Angeles, CA), (2, Brent Boyd, 6.3, 185.0, Baton Rouge, LA), (3, Tyrone Brayan, 6.7, 220.0, Placentia, CA), ",
        "output": "SELECT country ,  COUNT(*) FROM perpetrator GROUP BY country"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of the ships that have more than one captain. ###filtered_database_schema: CREATE TABLE `captain` ( Captain_ID INT PRIMARY KEY, Name TEXT, Ship_ID INT REFERENCES Ship(Ship_ID), age TEXT, Class TEXT, Rank TEXT ); Sample rows from `captain`: (1, Captain Sir Henry Langford, 1, 40, Third-rate ship of the line, Midshipman), (2, Captain Beves Conway, 2, 54, Third-rate ship of the line, Midshipman), (3, Lieutenant Hugh Bolitho, 3, 43, Cutter, Midshipman), CREATE TABLE `Ship` ( Ship_ID INT PRIMARY KEY, Name TEXT, Type TEXT, Built_Year REAL, Class TEXT, Flag TEXT ); Sample rows from `Ship`: (1, HMS Manxman, Panamax, 1997.0, KR, Panama), (2, HMS Gorgon, Panamax, 1998.0, KR, Panama), (3, HM Cutter Avenger, Panamax, 1997.0, KR, Panama), ",
        "output": "SELECT t1.name FROM ship as t1 JOIN captain as t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING COUNT(*)  >  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What papers were published at acl in 2012 were about Parsing ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"? ###filtered_database_schema: CREATE TABLE `city` ( City_ID INT PRIMARY KEY, City TEXT, Hanzi TEXT, Hanyu_Pinyin TEXT, Regional_Population INT, GDP REAL ); Sample rows from `city`: (1, Shanghai, 上海, Shànghǎi, 23019148, 1919.57), (2, Nanjing ( Jiangsu ), 南京, Nánjīng, 8004680, 614.55), (3, Hangzhou ( Zhejiang ), 杭州, Hángzhōu, 8700400, 701.18), CREATE TABLE `match` ( Match_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Score TEXT, Result TEXT, Competition TEXT ); Sample rows from `match`: (1, 18 February 1992, Estadio Cuscatlán , San Salvador , El Salvador, 1-0, 2-0, Friendly match), (2, 19 July 1992, Estadio Rigoberto López , Managua , Nicaragua, 3-0, 5-0, 1994 FIFA World Cup qualification), (3, 23 July 1992, Estadio Cuscatlán , San Salvador , El Salvador, 1-0, 5-1, 1994 FIFA World Cup qualification), CREATE TABLE `temperature` ( City_ID INT PRIMARY KEY REFERENCES city(City_ID), Jan REAL, Feb REAL, Mar REAL, Apr REAL, Jun REAL, Jul REAL, Aug REAL, Sep REAL, Oct REAL, Nov REAL, Dec REAL ); Sample rows from `temperature`: (1, 17.8, 17.8, 18.3, 18.9, 20.0, 20.6, 20.6, 20.6, 20.0, 19.4, 18.3), (2, 26.1, 26.1, 26.1, 26.1, 27.8, 27.8, 28.3, 28.3, 28.3, 27.2, 26.7), (3, 18.9, 18.3, 19.4, 20.0, 22.2, 23.3, 23.9, 23.3, 22.8, 21.7, 20.0), CREATE TABLE `hosting_city` ( Year INT PRIMARY KEY, Match_ID INT REFERENCES match(Match_ID), Host_City TEXT REFERENCES city(City_ID) ); Sample rows from `hosting_city`: (2008, 1, 1), (2009, 2, 2), (2010, 3, 2), ",
        "output": "SELECT t3.venue FROM city as t1 JOIN hosting_city as t2 ON t1.city_id = t2.host_city JOIN match as t3 ON t2.match_id = t3.match_id WHERE t1.city = \"Nanjing ( Jiangsu )\" AND t3.competition = \"1994 FIFA World Cup qualification\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the branch names of banks in the New York state. ###filtered_database_schema: CREATE TABLE `bank` ( branch_ID INT PRIMARY KEY, bname varchar(20), no_of_customers INT, city varchar(10), state varchar(20) ); Sample rows from `bank`: (1, morningside, 203, New York City, New York), (2, downtown, 123, Salt Lake City, Utah), (3, broadway, 453, New York City, New York), CREATE TABLE `customer` ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal INT, no_of_loans INT, credit_score INT, branch_ID INT REFERENCES bank(branch_ID), state varchar(20) ); Sample rows from `customer`: (1, Mary, saving, 2000, 2, 30, 2, Utah), (2, Jack, checking, 1000, 1, 20, 1, Texas), (3, Owen, saving, 800000, 0, 210, 3, New York), CREATE TABLE `loan` ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3) REFERENCES customer(Cust_ID), branch_ID varchar(3) REFERENCES bank(branch_ID), amount INT ); Sample rows from `loan`: (1, Mortgages, 1, 1, 2050), (2, Auto, 1, 2, 3000), (3, Business, 3, 3, 5000), ",
        "output": "SELECT bname FROM bank WHERE state  =  'New York'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names and salaries of instructors who advise students in the Math department? ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT t2.name ,  t2.salary FROM advisor as t1 JOIN instructor as t2 ON t1.i_id  =  t2.id JOIN student as t3 ON t1.s_id  =  t3.id WHERE t3.dept_name  =  'Math'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the homepage of \" University of Michigan \" . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT homepage FROM organization WHERE name  =  \"University of Michigan\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the customer id, first and last name with most number of accounts. ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(50), customer_middle_initial VARCHAR(1), customer_last_name VARCHAR(50), gender VARCHAR(1), email_address VARCHAR(255), login_name VARCHAR(80), login_password VARCHAR(20), phone_number VARCHAR(255), town_city VARCHAR(50), state_county_province VARCHAR(50), country VARCHAR(50) ); Sample rows from `Customers`: (1, Dee, A, Larkin, 1, thora.torphy@example.org, xhartmann, 77789d292604ea04406f, 241.796.1219x37862, North Nellie, WestVirginia, USA), (2, Brennon, H, Weimann, 0, roosevelt.collier@example.org, shayne.lesch, ce97a3e4539347daab96, (943)219-4234x415, South Isabell, Oklahoma, USA), (3, Joesph, K, Schaefer, 0, homenick.ambrose@example.net, feeney.lauriane, a6c7a7064c36b038d402, (488)524-5345, New Nikolas, Arkansas, USA), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 12, 2012-06-27 20:49:56, None), (2, 12, 2012-08-25 07:51:54, None), (3, 8, 2017-11-05 15:32:38, None), CREATE TABLE `Invoices` ( invoice_number INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_date DATETIME ); Sample rows from `Invoices`: (1, 9, 2018-03-01 16:40:48), (2, 9, 2018-03-20 00:21:41), (3, 3, 2018-03-05 08:47:33), CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_account_opened DATETIME, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 8, 2016-07-30 22:22:24, 900, Regular), (2, 3, 2017-05-29 16:45:17, 520, VIP), (3, 8, 2012-05-04 18:50:32, 323, Regular), CREATE TABLE `Product_Categories` ( production_type_code VARCHAR(15) PRIMARY KEY, product_type_description VARCHAR(80), vat_rating DECIMAL(19,4) ); Sample rows from `Product_Categories`: (Food, Food, 15.84), (DVDs, Dvd products, 11.4), (Books, Books, 13.95), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, production_type_code VARCHAR(15) REFERENCES Product_Categories(production_type_code), unit_price DECIMAL(19,4), product_name VARCHAR(80), product_color VARCHAR(20), product_size VARCHAR(20) ); Sample rows from `Products`: (1, 4, Food, 617.95, Coffee Bean, Red, Medium), (2, 4, Books, 558.49, Learning French, Yellow, Medium), (3, 8, Electronics, 563.58, Fans, Black, Medium), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DECIMAL(19,4), transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 13, 12, Payment, 2018-03-15 21:13:57, 613.96, None, None), (2, 9, 1, Payment, 2018-03-13 13:27:46, 368.46, None, None), (3, 6, 1, Refund, 2018-03-03 01:50:25, 1598.25, None, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), product_id INTEGER REFERENCES Products(product_id), product_quantity VARCHAR(50), other_order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 4, 6, None), (2, 4, 10, 7, None), (3, 15, 5, 4, None), CREATE TABLE `Invoice_Line_Items` ( order_item_id INTEGER REFERENCES Order_Items(order_item_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), product_id INTEGER REFERENCES Products(product_id), product_title VARCHAR(80), product_quantity VARCHAR(50), product_price DECIMAL(19,4), derived_product_cost DECIMAL(19,4), derived_vat_payable DECIMAL(19,4), derived_total_cost DECIMAL(19,4) ); Sample rows from `Invoice_Line_Items`: (14, 9, 5, prod_name, 4, 742.37, 191.11, None, 69.82), (3, 9, 15, prod_name, 1, 814.87, 176.29, None, 59.56), (4, 10, 15, prod_name, 8, 943.07, 73.14, None, 59.93), ",
        "output": "SELECT t1.customer_id ,  t2.customer_first_name ,  t2.customer_last_name FROM accounts as t1 JOIN customers as t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what state is springfield located in ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What country is the artist who made the fewest songs from? ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name GROUP BY t2.artist_name ORDER BY COUNT(*) LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the maximum and average capacity among rooms in each building. ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT MAX(capacity) ,  AVG(capacity) ,  building FROM classroom GROUP BY building"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the title and director of the films without any schedule? ###filtered_database_schema: CREATE TABLE `film` ( Film_ID INT PRIMARY KEY, Rank_in_series INT, Number_in_season INT, Title TEXT, Directed_by TEXT, Original_air_date TEXT, Production_code TEXT ); Sample rows from `film`: (1, 26, 1, The Case of the Mystery Weekend, Bill Schreiner, September 21–25, 1992, 50021–50025), (2, 27, 2, The Case of the Smart Dummy, Bill Schreiner, September 28–October 2, 1992, 50231–50235), (3, 28, 3, The Case: Off the Record, Bill Schreiner, October 5–9, 1992, 50011–50015), CREATE TABLE `cinema` ( Cinema_ID INT PRIMARY KEY, Name TEXT, Openning_year INT, Capacity INT, Location TEXT ); Sample rows from `cinema`: (1, Codling, 2010, 1100, County Wicklow), (2, Carrowleagh, 2012, 368, County Cork), (3, Dublin Array, 2015, 364, County Dublin), CREATE TABLE `schedule` ( Cinema_ID INT PRIMARY KEY REFERENCES cinema(Cinema_ID), Film_ID INT PRIMARY KEY REFERENCES film(Film_ID), Date TEXT, Show_times_per_day INT, Price float ); Sample rows from `schedule`: (1, 1, 21 May, 5, 12.99), (1, 2, 21 May, 3, 12.99), (1, 3, 21 Jun, 2, 8.99), ",
        "output": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the total citations of papers in PVLDB before 2005 . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT SUM(t2.citation_num) FROM publication as t2 JOIN journal as t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  <  2005;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the station name with greatest number of trains. ###filtered_database_schema: CREATE TABLE `station` ( Station_ID INT PRIMARY KEY, Name TEXT, Annual_entry_exit REAL, Annual_interchanges REAL, Total_Passengers REAL, Location TEXT, Main_Services TEXT, Number_of_Platforms INT ); Sample rows from `station`: (1, London Waterloo, 94.046, 9.489, 103.534, London, South Western Main Line West of England Main Line, 19), (2, London Victoria, 76.231, 9.157, 85.38, London, Brighton Main Line Chatham Main Line, 19), (3, London Bridge, 52.634, 8.742, 61.376, London, South Eastern Main Line Thameslink, 12), CREATE TABLE `train` ( Train_ID INT PRIMARY KEY, Name TEXT, Time TEXT, Service TEXT ); Sample rows from `train`: (1, Ananthapuri Express, 17:15, Daily), (2, Guruvayur Express, 22:10, Daily), (3, Guruvayur Express, 4:49, Daily), CREATE TABLE `train_station` ( Train_ID INT PRIMARY KEY REFERENCES train(Train_ID), Station_ID INT PRIMARY KEY REFERENCES station(Station_ID) ); Sample rows from `train_station`: (1, 1), (2, 1), (3, 1), ",
        "output": "SELECT t2.name FROM train_station as t1 JOIN station as t2 ON t1.station_id  =  t2.station_id GROUP BY t1.station_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Club` ( ClubID INTEGER, ClubName VARCHAR(40), ClubDesc VARCHAR(1024), ClubLocation VARCHAR(40) ); Sample rows from `Club`: (1, Bootup Baltimore, Refurbish computers; teach kids and adults about computer basics., AKW), (2, Hopkins Student Enterprises, Venture capital fund for student business., AKW), (3, Pen and Paper Gaming, Play pen and paper games on campus., HHH), CREATE TABLE `Member_of_club` ( StuID INTEGER REFERENCES Student(StuID), ClubID INTEGER REFERENCES Club(ClubID), Position VARCHAR(40) ); Sample rows from `Member_of_club`: (1001, 1, President), (1007, 4, Vice-President), (1008, 2, CTO), ",
        "output": "SELECT t3.fname ,  t3.lname FROM club as t1 JOIN member_of_club as t2 ON t1.clubid  =  t2.clubid JOIN student as t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the id, forename and number of races of all drivers who have at least participated in two races? ###filtered_database_schema: CREATE TABLE `circuits` ( circuitId INTEGER, circuitRef TEXT, name TEXT, location TEXT, country TEXT, lat REAL, lng REAL, alt TEXT, url TEXT ); Sample rows from `circuits`: (1, albert_park, Albert Park Grand Prix Circuit, Melbourne, Australia, -37.8497, 144.968, 10, http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit), (2, sepang, Sepang International Circuit, Kuala Lumpur, Malaysia, 2.76083, 101.738, , http://en.wikipedia.org/wiki/Sepang_International_Circuit), (3, bahrain, Bahrain International Circuit, Sakhir, Bahrain, 26.0325, 50.5106, , http://en.wikipedia.org/wiki/Bahrain_International_Circuit), CREATE TABLE `races` ( raceId INTEGER, year INTEGER, round INTEGER, circuitId INTEGER REFERENCES circuits(circuitId), name TEXT, date TEXT, time TEXT, url TEXT ); Sample rows from `races`: (1, 2009, 1, 1, Australian Grand Prix, 2009-03-29, 06:00:00, http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix), (2, 2009, 2, 2, Malaysian Grand Prix, 2009-04-05, 09:00:00, http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix), (3, 2009, 3, 17, Chinese Grand Prix, 2009-04-19, 07:00:00, http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix), CREATE TABLE `drivers` ( driverId INTEGER, driverRef TEXT, number TEXT, code TEXT, forename TEXT, surname TEXT, dob TEXT, nationality TEXT, url TEXT ); Sample rows from `drivers`: (1, hamilton, 44, HAM, Lewis, Hamilton, 07/01/1985, British, http://en.wikipedia.org/wiki/Lewis_Hamilton), (2, heidfeld, , HEI, Nick, Heidfeld, 10/05/1977, German, http://en.wikipedia.org/wiki/Nick_Heidfeld), (3, rosberg, 6, ROS, Nico, Rosberg, 27/06/1985, German, http://en.wikipedia.org/wiki/Nico_Rosberg), CREATE TABLE `status` ( statusId INTEGER, status TEXT ); Sample rows from `status`: (1, Finished), (2, Disqualified), (3, Accident), CREATE TABLE `seasons` ( year INTEGER, url TEXT ); Sample rows from `seasons`: (1950, http://en.wikipedia.org/wiki/1950_Formula_One_season), (1951, http://en.wikipedia.org/wiki/1951_Formula_One_season), (1952, http://en.wikipedia.org/wiki/1952_Formula_One_season), CREATE TABLE `constructors` ( constructorId INTEGER, constructorRef TEXT, name TEXT, nationality TEXT, url TEXT ); Sample rows from `constructors`: (1, mclaren, McLaren, British, http://en.wikipedia.org/wiki/McLaren), (2, bmw_sauber, BMW Sauber, German, http://en.wikipedia.org/wiki/BMW_Sauber), (3, williams, Williams, British, http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering), CREATE TABLE `constructorStandings` ( constructorStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `constructorStandings`: (1, 18, 1, 14.0, 1, 1, 1), (2, 18, 2, 8.0, 3, 3, 0), (3, 18, 3, 9.0, 2, 2, 0), CREATE TABLE `results` ( resultId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, grid INTEGER, position TEXT, positionText TEXT, positionOrder INTEGER, points REAL, laps TEXT, time TEXT, milliseconds TEXT, fastestLap TEXT, rank TEXT, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId INTEGER ); Sample rows from `results`: (1, 18, 1, 1, 22, 1, 1, 1, 1, 10.0, 58, 34:50.6, 5690616, 39, 2, 01:27.5, 218.3, 1), (2, 18, 2, 2, 3, 5, 2, 2, 2, 8.0, 58, 5.478, 5696094, 41, 3, 01:27.7, 217.586, 1), (3, 18, 3, 3, 7, 7, 3, 3, 3, 6.0, 58, 8.163, 5698779, 41, 5, 01:28.1, 216.719, 1), CREATE TABLE `driverStandings` ( driverStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `driverStandings`: (1, 18, 1, 10.0, 1, 1, 1), (2, 18, 2, 8.0, 2, 2, 0), (3, 18, 3, 6.0, 3, 3, 0), CREATE TABLE `constructorResults` ( constructorResultsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, status TEXT ); Sample rows from `constructorResults`: (1, 18, 1, 14.0, NULL), (2, 18, 2, 8.0, NULL), (3, 18, 3, 9.0, NULL), CREATE TABLE `qualifying` ( qualifyId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, position INTEGER, q1 TEXT, q2 TEXT, q3 TEXT ); Sample rows from `qualifying`: (1, 18, 1, 1, 22, 1, 1:26.572, 1:25.187, 1:26.714), (2, 18, 9, 2, 4, 2, 1:26.103, 1:25.315, 1:26.869), (3, 18, 5, 1, 23, 3, 1:25.664, 1:25.452, 1:27.079), CREATE TABLE `pitStops` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), stop INTEGER PRIMARY KEY, lap INTEGER, time TEXT, duration TEXT, milliseconds INTEGER ); CREATE TABLE `lapTimes` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), lap INTEGER PRIMARY KEY, position INTEGER, time TEXT, milliseconds INTEGER ); ",
        "output": "SELECT t1.driverid ,  t1.forename ,  COUNT(*) FROM drivers as t1 JOIN results as t2 ON t1.driverid = t2.driverid JOIN races as t3 ON t2.raceid = t3.raceid GROUP BY t1.driverid HAVING COUNT(*)  >=  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of the candidates whose support percentage is lower than their oppose rate. ###filtered_database_schema: CREATE TABLE `candidate` ( Candidate_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Poll_Source TEXT, Date TEXT, Support_rate REAL, Consider_rate REAL, Oppose_rate REAL, Unsure_rate REAL ); Sample rows from `candidate`: (1, 1, WNBC/Marist Poll, Feb 12–15, 2007, 0.25, 0.3, 0.43, 0.2), (2, 3, WNBC/Marist Poll, Feb 12–15, 2007, 0.17, 0.42, 0.32, 0.9), (3, 4, FOX News/Opinion Dynamics Poll, Feb 13–14, 2007, 0.18, 0.34, 0.44, 0.3), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Sex TEXT, Name TEXT, Date_of_Birth TEXT, Height REAL, Weight REAL ); Sample rows from `people`: (1, M, Hubert Henno, 06.10.1976, 188.0, 83.0), (2, M, Dominique Daquin, 10.11.1972, 197.0, 85.0), (3, F, Stéphane Antiga, 03.02.1976, 200.0, 94.0), ",
        "output": "SELECT t1.name FROM people as t1 JOIN candidate as t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What address was the document with id 4 mailed to? ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( document_type_code CHAR(15) PRIMARY KEY, document_type_description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CD, b), (Paper, u), (Hard Drive, f), CREATE TABLE `Roles` ( role_code CHAR(15) PRIMARY KEY, role_description VARCHAR(255) ); Sample rows from `Roles`: (ED, Editor), (PT, Photo), (MG, Manager), CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (0, IT), (1, MX), (2, DE), CREATE TABLE `Ref_Document_Status` ( document_status_code CHAR(15) PRIMARY KEY, document_status_description VARCHAR(255) ); Sample rows from `Ref_Document_Status`: (working, currently working on), (done, mailed), (overdue, mailed late), CREATE TABLE `Ref_Shipping_Agents` ( shipping_agent_code CHAR(15) PRIMARY KEY, shipping_agent_name VARCHAR(255), shipping_agent_description VARCHAR(255) ); Sample rows from `Ref_Shipping_Agents`: (UP, UPS, g), (US, USPS, q), (AL, Airline, w), CREATE TABLE `Documents` ( document_id INTEGER, document_status_code CHAR(15) REFERENCES Ref_Document_Status(document_status_code), document_type_code CHAR(15) REFERENCES Ref_Document_Types(document_type_code), shipping_agent_code CHAR(15) REFERENCES Ref_Shipping_Agents(shipping_agent_code), receipt_date DATETIME, receipt_number VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Documents`: (1, working, CD, UP, 2008-04-21 20:42:25, 19, z), (2, done, Paper, US, 1974-05-08 00:00:46, 34, h), (3, done, Paper, UP, 2014-12-25 17:22:44, 93, h), CREATE TABLE `Employees` ( employee_id INTEGER, role_code CHAR(15) REFERENCES Roles(role_code), employee_name VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Employees`: (1, ED, Koby, h), (2, ED, Kenyon, f), (3, PR, Haley, b), CREATE TABLE `Document_Drafts` ( document_id INTEGER PRIMARY KEY REFERENCES Documents(document_id), draft_number INTEGER PRIMARY KEY, draft_details VARCHAR(255) ); Sample rows from `Document_Drafts`: (1, 0, e), (1, 2, k), (2, 1, v), CREATE TABLE `Draft_Copies` ( document_id INTEGER PRIMARY KEY REFERENCES Document_Drafts(document_id), draft_number INTEGER PRIMARY KEY REFERENCES Document_Drafts(draft_number), copy_number INTEGER PRIMARY KEY ); Sample rows from `Draft_Copies`: (2, 8, 5), (4, 9, 6), (23, 9, 15), CREATE TABLE `Circulation_History` ( document_id INTEGER PRIMARY KEY REFERENCES Draft_Copies(document_id), draft_number INTEGER PRIMARY KEY REFERENCES Draft_Copies(draft_number), copy_number INTEGER PRIMARY KEY REFERENCES Draft_Copies(copy_number), employee_id INTEGER PRIMARY KEY REFERENCES Employees(employee_id) ); Sample rows from `Circulation_History`: (20, 17, 15, 8), (1, 2, 5, 1), (2, 1, 4, 2), CREATE TABLE `Documents_Mailed` ( document_id INTEGER PRIMARY KEY REFERENCES Documents(document_id), mailed_to_address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), mailing_date DATETIME ); Sample rows from `Documents_Mailed`: (2, 8, 1977-04-01 17:03:50), (4, 3, 1992-11-07 15:03:41), (4, 9, 1973-02-21 10:17:01), ",
        "output": "SELECT addresses.address_details FROM addresses JOIN documents_mailed ON documents_mailed.mailed_to_address_id = addresses.address_id WHERE document_id = 4;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which paper did Richard Ladner present at chi ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the total points of the gymnast with the lowest age. ###filtered_database_schema: CREATE TABLE `gymnast` ( Gymnast_ID INT PRIMARY KEY REFERENCES people(People_ID), Floor_Exercise_Points REAL, Pommel_Horse_Points REAL, Rings_Points REAL, Vault_Points REAL, Parallel_Bars_Points REAL, Horizontal_Bar_Points REAL, Total_Points REAL ); Sample rows from `gymnast`: (1, 9.725, 9.737, 9.512, 9.575, 9.762, 9.75, 58.061), (2, 9.7, 9.625, 9.625, 9.65, 9.587, 9.737, 57.924), (4, 8.987, 9.75, 9.75, 9.65, 9.787, 9.725, 57.649), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Age REAL, Height REAL, Hometown TEXT ); Sample rows from `people`: (1, Paul Hamm, 24.0, 1.71, Santo Domingo), (2, Lorraine Súarez Carmona, 21.0, 1.75, Bonao), (3, Ashley Pérez Cabrera, 19.0, 1.7, Miami), ",
        "output": "SELECT t1.total_points FROM gymnast as t1 JOIN people as t2 ON t1.gymnast_id  =  t2.people_id ORDER BY t2.age asC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the degrees conferred in \"San Francisco State University\" in 2001. ###filtered_database_schema: CREATE TABLE `Campuses` ( Id INTEGER, Campus TEXT, Location TEXT, County TEXT, Year INTEGER ); Sample rows from `Campuses`: (1, California State University-Bakersfield, Bakersfield, Kern, 1965), (2, California State University-Channel Islands, Camarillo, Ventura, 2002), (3, California State University-Chico, Chico, Butte, 1887), CREATE TABLE `csu_fees` ( Campus INTEGER REFERENCES Campuses(Id), Year INTEGER, CampusFee INTEGER ); Sample rows from `csu_fees`: (1, 1996, 1951), (2, 2003, 1868), (3, 1996, 2042), CREATE TABLE `degrees` ( Year INTEGER PRIMARY KEY, Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Degrees INTEGER ); Sample rows from `degrees`: (1990, 1, 701), (1991, 1, 681), (1992, 1, 791), CREATE TABLE `discipline_enrollments` ( Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Discipline INTEGER PRIMARY KEY, Year INTEGER, Undergraduate INTEGER, Graduate INTEGER ); Sample rows from `discipline_enrollments`: (1, 4, 2004, 248, 0), (1, 5, 2004, 811, 73), (1, 6, 2004, 199, 0), CREATE TABLE `enrollments` ( Campus INTEGER PRIMARY KEY REFERENCES Campuses(Id), Year INTEGER PRIMARY KEY, TotalEnrollment_AY INTEGER, FTE_AY INTEGER ); Sample rows from `enrollments`: (1, 1956, 384, 123), (1, 1957, 432, 151), (1, 1958, 422, 178), CREATE TABLE `faculty` ( Campus INTEGER REFERENCES Campuses(Id), Year INTEGER, Faculty REAL ); Sample rows from `faculty`: (1, 2002, 357.1), (2, 2002, 48.4), (3, 2002, 742.8), ",
        "output": "SELECT degrees FROM campuses as t1 JOIN degrees as t2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103? ###filtered_database_schema: CREATE TABLE `station` ( id INTEGER, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT ); Sample rows from `station`: (2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013), (3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013), (4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013), CREATE TABLE `status` ( station_id INTEGER REFERENCES station(id), bikes_available INTEGER, docks_available INTEGER, time TEXT ); Sample rows from `status`: (3, 12, 3, 2015-06-02 12:46:02), (3, 12, 3, 2015-06-02 12:47:02), (3, 12, 3, 2015-06-02 12:48:02), CREATE TABLE `trip` ( id INTEGER, duration INTEGER, start_date TEXT, start_station_name TEXT, start_station_id INTEGER, end_date TEXT, end_station_name TEXT, end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER ); Sample rows from `trip`: (900504, 384, 8/21/2015 17:03, Howard at 2nd, 63, 8/21/2015 17:10, San Francisco Caltrain 2 (330 Townsend), 69, 454, Subscriber, 94041), (900505, 588, 8/21/2015 17:03, South Van Ness at Market, 66, 8/21/2015 17:13, San Francisco Caltrain 2 (330 Townsend), 69, 574, Subscriber, 95119), (900506, 196, 8/21/2015 17:04, Market at Sansome, 77, 8/21/2015 17:07, Harry Bridges Plaza (Ferry Building), 50, 636, Subscriber, 94925), CREATE TABLE `weather` ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER ); Sample rows from `weather`: (8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107), (8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107), (8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107), ",
        "output": "SELECT id FROM trip WHERE duration  >=  (SELECT AVG(duration) FROM trip WHERE zip_code  =  94103)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the name of rooms with king or queen bed. ###filtered_database_schema: CREATE TABLE `Rooms` ( RoomId TEXT PRIMARY KEY, roomName TEXT, beds INTEGER, bedType TEXT, maxOccupancy INTEGER, basePrice INTEGER, decor TEXT ); Sample rows from `Rooms`: (RND, Recluse and defiance, 1, King, 2, 150, modern), (IBS, Interim but salutary, 1, King, 2, 150, traditional), (AOB, Abscond or bolster, 2, Queen, 4, 175, traditional), CREATE TABLE `Reservations` ( Code INTEGER, Room TEXT REFERENCES Rooms(RoomId), CheckIn TEXT, CheckOut TEXT, Rate REAL, LastName TEXT, FirstName TEXT, Adults INTEGER, Kids INTEGER ); Sample rows from `Reservations`: (10105, HBB, 23-OCT-10, 25-OCT-10, 100.0, SELBIG, CONRAD, 1, 0), (10183, IBD, 19-SEP-10, 20-SEP-10, 150.0, GABLER, DOLLIE, 2, 0), (10449, RND, 30-SEP-10, 01-OCT-10, 150.0, KLESS, NELSON, 1, 0), ",
        "output": "SELECT roomname FROM rooms WHERE bedtype  =  \"King\" OR bedtype  =  \"Queen\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the area and county of all appelations. ###filtered_database_schema: CREATE TABLE `grapes` ( ID INTEGER, Grape TEXT PRIMARY KEY, Color TEXT ); Sample rows from `grapes`: (1, Barbera, Red), (2, Cabernet Franc, Red), (3, Cabernet Sauvingnon, Red), CREATE TABLE `appellations` ( No INTEGER, Appelation TEXT PRIMARY KEY, County TEXT, State TEXT, Area TEXT, isAVA TEXT ); Sample rows from `appellations`: (1, Alexander Valley, Sonoma, California, North Coast, Yes), (2, Amador County, Amador, California, Sierra Foothills, No), (3, Amador-Mendocino-Sonoma Counties, N/A, California, N/A, No), CREATE TABLE `wine` ( No INTEGER, Grape TEXT REFERENCES grapes(Grape), Winery TEXT, Appelation TEXT REFERENCES appellations(Appelation), State TEXT, Name TEXT, Year INTEGER, Price INTEGER, Score INTEGER, Cases INTEGER, Drink TEXT ); Sample rows from `wine`: (1, Zinfandel, Robert Biale, St. Helena, California, Old Kraft Vineyard, 2008, 44, 93, 275, now), (2, Zinfandel, Chiarello Family, Napa Valley, California, Giana, 2008, 35, 93, 480, now), (3, Zinfandel, Robert Biale, Napa Valley, California, Black Chicken, 2008, 40, 91, 2700, 2012), ",
        "output": "SELECT area ,  county FROM appellations"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many clubs does \"Linda Smith\" belong to? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Club` ( ClubID INTEGER, ClubName VARCHAR(40), ClubDesc VARCHAR(1024), ClubLocation VARCHAR(40) ); Sample rows from `Club`: (1, Bootup Baltimore, Refurbish computers; teach kids and adults about computer basics., AKW), (2, Hopkins Student Enterprises, Venture capital fund for student business., AKW), (3, Pen and Paper Gaming, Play pen and paper games on campus., HHH), CREATE TABLE `Member_of_club` ( StuID INTEGER REFERENCES Student(StuID), ClubID INTEGER REFERENCES Club(ClubID), Position VARCHAR(40) ); Sample rows from `Member_of_club`: (1001, 1, President), (1007, 4, Vice-President), (1008, 2, CTO), ",
        "output": "SELECT COUNT(*) FROM club as t1 JOIN member_of_club as t2 ON t1.clubid  =  t2.clubid JOIN student as t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: list the card number of all members whose hometown address includes word \"Kentucky\". ###filtered_database_schema: CREATE TABLE `member` ( Member_ID INT PRIMARY KEY, Card_Number TEXT, Name TEXT, Hometown TEXT, Level INT ); Sample rows from `member`: (1, LE99, Jeremy Jarmon, Collierville, Tennessee, 6), (2, LT98, Myron Pryor, Louisville, Kentucky, 6), (3, RT91, Corey Peters, Louisville, Kentucky, 6), CREATE TABLE `branch` ( Branch_ID INT PRIMARY KEY, Name TEXT, Open_year TEXT, Address_road TEXT, City TEXT, membership_amount TEXT ); Sample rows from `branch`: (1, Alexandre, 2001, Valleys Place, London, 112), (2, Popert, 2009, Oaks Crescent, London, 11), (3, Stanley, 2013, Abbott Street, London, 6), CREATE TABLE `membership_register_branch` ( Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Branch_ID TEXT REFERENCES branch(Branch_ID), Register_Year TEXT ); Sample rows from `membership_register_branch`: (1, 1, 2016), (2, 4, 2016), (3, 1, 2017), CREATE TABLE `purchase` ( Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Branch_ID TEXT PRIMARY KEY REFERENCES branch(Branch_ID), Year TEXT PRIMARY KEY, Total_pounds REAL ); Sample rows from `purchase`: (1, 3, 2018, 2013.32), (2, 5, 2018, 321.13), (3, 1, 2017, 988.09), ",
        "output": "SELECT card_number FROM member WHERE hometown LIKE \"%Kentucky%\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the themes of farm competitions sorted by year in ascending order? ###filtered_database_schema: CREATE TABLE `city` ( City_ID INT PRIMARY KEY, Official_Name TEXT, Status TEXT, Area_km_2 REAL, Population REAL, Census_Ranking TEXT ); Sample rows from `city`: (1, Grand Falls/Grand-Sault, Town, 18.06, 5706.0, 636 of 5008), (2, Perth-Andover, Village, 8.89, 1778.0, 1442 of 5,008), (3, Plaster Rock, Village, 3.09, 1135.0, 1936 of 5,008), CREATE TABLE `farm` ( Farm_ID INT PRIMARY KEY, Year INT, Total_Horses REAL, Working_Horses REAL, Total_Cattle REAL, Oxen REAL, Bulls REAL, Cows REAL, Pigs REAL, Sheep_and_Goats REAL ); Sample rows from `farm`: (1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8), CREATE TABLE `farm_competition` ( Competition_ID INT PRIMARY KEY, Year INT, Theme TEXT, Host_city_ID INT REFERENCES city(City_ID), Hosts TEXT ); Sample rows from `farm_competition`: (1, 2013, Carnival M is back!, 1, Miley Cyrus Jared Leto and Karen Mok), (2, 2006, Codehunters, 2, Leehom Wang and Kelly Rowland), (3, 2005, MTV Asia Aid, 3, Alicia Keys), CREATE TABLE `competition_record` ( Competition_ID INT PRIMARY KEY REFERENCES farm_competition(Competition_ID), Farm_ID INT PRIMARY KEY REFERENCES farm(Farm_ID), Rank INT ); Sample rows from `competition_record`: (1, 8, 1), (1, 2, 2), (1, 3, 3), ",
        "output": "SELECT theme FROM farm_competition ORDER BY year ASC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many customers don't have an account? ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(50), customer_middle_initial VARCHAR(1), customer_last_name VARCHAR(50), gender VARCHAR(1), email_address VARCHAR(255), login_name VARCHAR(80), login_password VARCHAR(20), phone_number VARCHAR(255), town_city VARCHAR(50), state_county_province VARCHAR(50), country VARCHAR(50) ); Sample rows from `Customers`: (1, Dee, A, Larkin, 1, thora.torphy@example.org, xhartmann, 77789d292604ea04406f, 241.796.1219x37862, North Nellie, WestVirginia, USA), (2, Brennon, H, Weimann, 0, roosevelt.collier@example.org, shayne.lesch, ce97a3e4539347daab96, (943)219-4234x415, South Isabell, Oklahoma, USA), (3, Joesph, K, Schaefer, 0, homenick.ambrose@example.net, feeney.lauriane, a6c7a7064c36b038d402, (488)524-5345, New Nikolas, Arkansas, USA), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 12, 2012-06-27 20:49:56, None), (2, 12, 2012-08-25 07:51:54, None), (3, 8, 2017-11-05 15:32:38, None), CREATE TABLE `Invoices` ( invoice_number INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_date DATETIME ); Sample rows from `Invoices`: (1, 9, 2018-03-01 16:40:48), (2, 9, 2018-03-20 00:21:41), (3, 3, 2018-03-05 08:47:33), CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_account_opened DATETIME, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 8, 2016-07-30 22:22:24, 900, Regular), (2, 3, 2017-05-29 16:45:17, 520, VIP), (3, 8, 2012-05-04 18:50:32, 323, Regular), CREATE TABLE `Product_Categories` ( production_type_code VARCHAR(15) PRIMARY KEY, product_type_description VARCHAR(80), vat_rating DECIMAL(19,4) ); Sample rows from `Product_Categories`: (Food, Food, 15.84), (DVDs, Dvd products, 11.4), (Books, Books, 13.95), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, production_type_code VARCHAR(15) REFERENCES Product_Categories(production_type_code), unit_price DECIMAL(19,4), product_name VARCHAR(80), product_color VARCHAR(20), product_size VARCHAR(20) ); Sample rows from `Products`: (1, 4, Food, 617.95, Coffee Bean, Red, Medium), (2, 4, Books, 558.49, Learning French, Yellow, Medium), (3, 8, Electronics, 563.58, Fans, Black, Medium), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DECIMAL(19,4), transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 13, 12, Payment, 2018-03-15 21:13:57, 613.96, None, None), (2, 9, 1, Payment, 2018-03-13 13:27:46, 368.46, None, None), (3, 6, 1, Refund, 2018-03-03 01:50:25, 1598.25, None, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), product_id INTEGER REFERENCES Products(product_id), product_quantity VARCHAR(50), other_order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 4, 6, None), (2, 4, 10, 7, None), (3, 15, 5, 4, None), CREATE TABLE `Invoice_Line_Items` ( order_item_id INTEGER REFERENCES Order_Items(order_item_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), product_id INTEGER REFERENCES Products(product_id), product_title VARCHAR(80), product_quantity VARCHAR(50), product_price DECIMAL(19,4), derived_product_cost DECIMAL(19,4), derived_vat_payable DECIMAL(19,4), derived_total_cost DECIMAL(19,4) ); Sample rows from `Invoice_Line_Items`: (14, 9, 5, prod_name, 4, 742.37, 191.11, None, 69.82), (3, 9, 15, prod_name, 1, 814.87, 176.29, None, 59.56), (4, 10, 15, prod_name, 8, 943.07, 73.14, None, 59.93), ",
        "output": "SELECT COUNT(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM accounts)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For each team, how many technicians are there? ###filtered_database_schema: CREATE TABLE `repair` ( repair_ID INT PRIMARY KEY, name TEXT, Launch_Date TEXT, Notes TEXT ); Sample rows from `repair`: (1, Discoverer, 21 Jan 2009, repair Failed. Failed to achieve orbit), (2, Discoverer 1, 28 Feb 2009, First object in polar orbit), (3, Discoverer 3, 03 Jun 2009, repair failed. Failed to achieve orbit), CREATE TABLE `machine` ( Machine_ID INT PRIMARY KEY, Making_Year INT, Class TEXT, Team TEXT, Machine_series TEXT, value_points REAL, quality_rank INT ); Sample rows from `machine`: (1, 1991, 125cc, Hero Sports TS- Honda, RS125, 105.0, 2), (2, 1992, 125cc, Marlboro Pileri - Honda, RS125, 57.0, 1), (3, 1993, 125cc, Marlboro Pileri - Honda, RS125, 129.0, 4), CREATE TABLE `technician` ( technician_id REAL PRIMARY KEY, Name TEXT, Team TEXT, Starting_Year REAL, Age INT ); Sample rows from `technician`: (1.0, Joe Sewell, NYY, 2012.0, 37), (2.0, John Brown, NYY, 2013.0, 36), (3.0, Tony Sewell, CLE, 2005.0, 43), CREATE TABLE `repair_assignment` ( technician_id INT PRIMARY KEY REFERENCES technician(technician_id), repair_ID INT PRIMARY KEY REFERENCES repair(repair_ID), Machine_ID INT PRIMARY KEY REFERENCES machine(Machine_ID) ); Sample rows from `repair_assignment`: (1, 1, 1), (2, 2, 2), (3, 3, 3), ",
        "output": "SELECT team ,  COUNT(*) FROM technician GROUP BY team"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the best NLP conferences ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(DISTINCT t4.citingpaperid)  ,  t3.venueid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"NLP\" GROUP BY t3.venueid ORDER BY COUNT(DISTINCT t4.citingpaperid) DESC;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the level name of the cheapest catalog (in USD)? ###filtered_database_schema: CREATE TABLE `Attribute_Definitions` ( attribute_id INTEGER, attribute_name VARCHAR(30), attribute_data_type VARCHAR(10) ); Sample rows from `Attribute_Definitions`: (1, Green, Bool), (2, Black, Bool), (3, Yellow, Bool), CREATE TABLE `Catalogs` ( catalog_id INTEGER, catalog_name VARCHAR(50), catalog_publisher VARCHAR(80), date_of_publication DATETIME, date_of_latest_revision DATETIME ); Sample rows from `Catalogs`: (1, Chocolate, Koepp-Rutherford handmade chocolate store, 2013-03-15 05:09:17, 2017-09-26 12:10:36), (2, Coffee Bean, Murray Coffee shop, 2012-04-13 06:37:09, 2017-10-26 01:16:51), (3, Lemonade, Russel-Gislason Lemon shop, 2012-11-27 19:29:22, 2017-12-04 06:48:13), CREATE TABLE `Catalog_Structure` ( catalog_level_number INTEGER, catalog_id INTEGER REFERENCES Catalogs(catalog_id), catalog_level_name VARCHAR(50) ); Sample rows from `Catalog_Structure`: (1, 1, Category), (8, 2, Sub-Category), (9, 8, Product), CREATE TABLE `Catalog_Contents` ( catalog_entry_id INTEGER, catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number), parent_entry_id INTEGER, previous_entry_id INTEGER, next_entry_id INTEGER, catalog_entry_name VARCHAR(80), product_stock_number VARCHAR(50), price_in_dollars DOUBLE, price_in_euros DOUBLE, price_in_pounds DOUBLE, capacity VARCHAR(20), length VARCHAR(20), height VARCHAR(20), width VARCHAR(20) ); Sample rows from `Catalog_Contents`: (1, 1, 5, 9, 7, Cola, 89 cp, 200.78, 159.84, 172.17, 1, 3, 9, 5), (2, 8, 6, 9, 8, Root beer, 37 hq, 687.59, 590.11, 471.78, 8, 6, 5, 6), (3, 8, 6, 6, 1, Cream Soda, 52 ee, 360.5, 202.32, 110.32, 5, 9, 7, 8), CREATE TABLE `Catalog_Contents_Additional_Attributes` ( catalog_entry_id INTEGER REFERENCES Catalog_Contents(catalog_entry_id), catalog_level_number INTEGER REFERENCES Catalog_Structure(catalog_level_number), attribute_id INTEGER, attribute_value VARCHAR(255) ); Sample rows from `Catalog_Contents_Additional_Attributes`: (5, 8, 4, 1), (15, 9, 3, 0), (11, 1, 2, 0), ",
        "output": "SELECT t2.catalog_level_name FROM catalog_contents as t1 JOIN catalog_structure as t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: first deep learning paper ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.year FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year asC;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name of all tracks in the Rock genre? ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT t2.name FROM genres as t1 JOIN tracks as t2 ON t1.id = t2.genre_id WHERE t1.name = \"Rock\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many escape games are there in Madison ? ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT COUNT(DISTINCT t1.name) FROM category as t2 JOIN business as t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which papers have the substring \"Database\" in their titles? Show the titles of the papers. ###filtered_database_schema: CREATE TABLE `Inst` ( instID INTEGER, name TEXT, country TEXT ); Sample rows from `Inst`: (1000, University of Oxford, UK), (1010, Northeastern University, USA), (1020, Indiana University, USA), CREATE TABLE `Authors` ( authID INTEGER, lname TEXT, fname TEXT ); Sample rows from `Authors`: (50, Gibbons, Jeremy), (51, Hinze, Ralf), (52, James, Daniel W. H.), CREATE TABLE `Papers` ( paperID INTEGER, title TEXT ); Sample rows from `Papers`: (200, Just do it: Simple Monadic Equational Reasoning), (201, Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory), (202, Functional Pearl: Modular Rollback through Control Logging), CREATE TABLE `Authorship` ( authID INTEGER PRIMARY KEY REFERENCES Authors(authID), instID INTEGER PRIMARY KEY REFERENCES Inst(instID), paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID), authOrder INTEGER ); Sample rows from `Authorship`: (50, 1000, 200, 1), (51, 1000, 200, 2), (51, 1000, 201, 1), ",
        "output": "SELECT title FROM papers WHERE title LIKE \"%Database%\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the code of the role that have the most employees. ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CV, CV, ), (BK, Book, ), (PR, Paper, ), CREATE TABLE `Ref_Calendar` ( Calendar_Date DATETIME PRIMARY KEY, Day_Number INTEGER ); Sample rows from `Ref_Calendar`: (1972-03-31 09:47:22, 5), (1976-06-15 03:40:06, 7), (1985-05-13 12:19:43, 7), CREATE TABLE `Ref_Locations` ( Location_Code CHAR(15) PRIMARY KEY, Location_Name VARCHAR(255), Location_Description VARCHAR(255) ); Sample rows from `Ref_Locations`: (b, Brazil, ), (c, Canada, ), (e, Edinburgh, ), CREATE TABLE `Roles` ( Role_Code CHAR(15) PRIMARY KEY, Role_Name VARCHAR(255), Role_Description VARCHAR(255) ); Sample rows from `Roles`: (MG, Manager, Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti.), (ED, Editor, Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos.), (PT, Photo, Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt.), CREATE TABLE `All_Documents` ( Document_ID INTEGER, Date_Stored DATETIME REFERENCES Ref_Calendar(Calendar_Date), Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255) ); Sample rows from `All_Documents`: (7, 1976-06-15 03:40:06, CV, Robin CV, None, None), (11, 1986-10-14 17:53:39, CV, Marry CV, None, None), (25, 2008-06-08 12:45:38, BK, One hundred years of solitude, None, None), CREATE TABLE `Employees` ( Employee_ID INTEGER, Role_Code CHAR(15) REFERENCES Roles(Role_Code), Employee_Name VARCHAR(255), Gender_MFU CHAR(1), Date_of_Birth DATETIME, Other_Details VARCHAR(255) ); Sample rows from `Employees`: (25, HR, Leo, , 1973-02-15 17:16:00, None), (30, MG, Ebba, , 1979-09-20 12:50:15, None), (38, ED, Stephanie, 1, 2012-03-30 23:02:28, None), CREATE TABLE `Document_Locations` ( Document_ID INTEGER PRIMARY KEY REFERENCES All_Documents(Document_ID), Location_Code CHAR(15) PRIMARY KEY REFERENCES Ref_Locations(Location_Code), Date_in_Location_From DATETIME PRIMARY KEY REFERENCES Ref_Calendar(Calendar_Date), Date_in_Locaton_To DATETIME REFERENCES Ref_Calendar(Calendar_Date) ); Sample rows from `Document_Locations`: (7, e, 2017-01-06 23:17:22, 2008-06-08 12:45:38), (11, x, 2017-01-06 23:17:22, 2012-07-03 09:48:46), (81, c, 1972-03-31 09:47:22, 1987-11-05 06:11:22), CREATE TABLE `Documents_to_be_Destroyed` ( Document_ID INTEGER REFERENCES All_Documents(Document_ID), Destruction_Authorised_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Destroyed_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Planned_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Actual_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Other_Details VARCHAR(255) ); Sample rows from `Documents_to_be_Destroyed`: (7, 156, 138, 1988-02-01 14:41:52, 2017-01-06 23:17:22, None), (11, 55, 173, 2010-11-26 19:22:50, 1986-10-14 17:53:39, None), (25, 183, 156, 2009-08-18 03:29:08, 1995-01-01 03:52:11, None), ",
        "output": "SELECT role_code FROM employees GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the id of each employee and the number of document destruction authorised by that employee. ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CV, CV, ), (BK, Book, ), (PR, Paper, ), CREATE TABLE `Ref_Calendar` ( Calendar_Date DATETIME PRIMARY KEY, Day_Number INTEGER ); Sample rows from `Ref_Calendar`: (1972-03-31 09:47:22, 5), (1976-06-15 03:40:06, 7), (1985-05-13 12:19:43, 7), CREATE TABLE `Ref_Locations` ( Location_Code CHAR(15) PRIMARY KEY, Location_Name VARCHAR(255), Location_Description VARCHAR(255) ); Sample rows from `Ref_Locations`: (b, Brazil, ), (c, Canada, ), (e, Edinburgh, ), CREATE TABLE `Roles` ( Role_Code CHAR(15) PRIMARY KEY, Role_Name VARCHAR(255), Role_Description VARCHAR(255) ); Sample rows from `Roles`: (MG, Manager, Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti.), (ED, Editor, Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos.), (PT, Photo, Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt.), CREATE TABLE `All_Documents` ( Document_ID INTEGER, Date_Stored DATETIME REFERENCES Ref_Calendar(Calendar_Date), Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255) ); Sample rows from `All_Documents`: (7, 1976-06-15 03:40:06, CV, Robin CV, None, None), (11, 1986-10-14 17:53:39, CV, Marry CV, None, None), (25, 2008-06-08 12:45:38, BK, One hundred years of solitude, None, None), CREATE TABLE `Employees` ( Employee_ID INTEGER, Role_Code CHAR(15) REFERENCES Roles(Role_Code), Employee_Name VARCHAR(255), Gender_MFU CHAR(1), Date_of_Birth DATETIME, Other_Details VARCHAR(255) ); Sample rows from `Employees`: (25, HR, Leo, , 1973-02-15 17:16:00, None), (30, MG, Ebba, , 1979-09-20 12:50:15, None), (38, ED, Stephanie, 1, 2012-03-30 23:02:28, None), CREATE TABLE `Document_Locations` ( Document_ID INTEGER PRIMARY KEY REFERENCES All_Documents(Document_ID), Location_Code CHAR(15) PRIMARY KEY REFERENCES Ref_Locations(Location_Code), Date_in_Location_From DATETIME PRIMARY KEY REFERENCES Ref_Calendar(Calendar_Date), Date_in_Locaton_To DATETIME REFERENCES Ref_Calendar(Calendar_Date) ); Sample rows from `Document_Locations`: (7, e, 2017-01-06 23:17:22, 2008-06-08 12:45:38), (11, x, 2017-01-06 23:17:22, 2012-07-03 09:48:46), (81, c, 1972-03-31 09:47:22, 1987-11-05 06:11:22), CREATE TABLE `Documents_to_be_Destroyed` ( Document_ID INTEGER REFERENCES All_Documents(Document_ID), Destruction_Authorised_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Destroyed_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Planned_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Actual_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Other_Details VARCHAR(255) ); Sample rows from `Documents_to_be_Destroyed`: (7, 156, 138, 1988-02-01 14:41:52, 2017-01-06 23:17:22, None), (11, 55, 173, 2010-11-26 19:22:50, 1986-10-14 17:53:39, None), (25, 183, 156, 2009-08-18 03:29:08, 1995-01-01 03:52:11, None), ",
        "output": "SELECT destruction_authorised_by_employee_id ,  COUNT(*) FROM documents_to_be_destroyed GROUP BY destruction_authorised_by_employee_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show names for all employees who do not have certificate of Boeing 737-800. ###filtered_database_schema: CREATE TABLE `flight` ( flno number(4,0) PRIMARY KEY, origin varchar2(20), destination varchar2(20), distance number(6,0), departure_date date, arrival_date date, price number(7,2), aid number(9,0) REFERENCES aircraft(aid) ); Sample rows from `flight`: (99, Los Angeles, Washington D.C., 2308, 04/12/2005 09:30, 04/12/2005 09:40, 235.98, 1), (13, Los Angeles, Chicago, 1749, 04/12/2005 08:45, 04/12/2005 08:45, 220.98, 3), (346, Los Angeles, Dallas, 1251, 04/12/2005 11:50, 04/12/2005 07:05, 182, 2), CREATE TABLE `aircraft` ( aid number(9,0) PRIMARY KEY, name varchar2(30), distance number(6,0) ); Sample rows from `aircraft`: (1, Boeing 747-400, 8430), (2, Boeing 737-800, 3383), (3, Airbus A340-300, 7120), CREATE TABLE `employee` ( eid number(9,0) PRIMARY KEY, name varchar2(30), salary number(10,2) ); Sample rows from `employee`: (242518965, James Smith, 120433), (141582651, Mary Johnson, 178345), (11564812, John Williams, 153972), CREATE TABLE `certificate` ( eid number(9,0) PRIMARY KEY REFERENCES employee(eid), aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid) ); Sample rows from `certificate`: (11564812, 2), (11564812, 10), (90873519, 6), ",
        "output": "SELECT name FROM employee EXCEPT SELECT t1.name FROM employee as t1 JOIN certificate as t2 ON t1.eid  =  t2.eid JOIN aircraft as t3 ON t3.aid  =  t2.aid WHERE t3.name  =  \"Boeing 737-800\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the majors of male (sex is M) students? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Voting_record` ( StuID INTEGER REFERENCES Student(StuID), Registration_Date VARCHAR(12), Election_Cycle VARCHAR(12), President_Vote INTEGER REFERENCES Student(StuID), Vice_President_Vote INTEGER REFERENCES Student(StuID), Secretary_Vote INTEGER REFERENCES Student(StuID), Treasurer_Vote INTEGER REFERENCES Student(StuID), Class_President_Vote INTEGER REFERENCES Student(StuID), Class_Senator_Vote INTEGER REFERENCES Student(StuID) ); Sample rows from `Voting_record`: (1001, 08/30/2015, Spring, 1004, 1007, 1010, 1035, 1001, 1028), (1002, 08/30/2014, Spring, 1014, 1007, 1020, 1025, 1021, 1028), (1003, 08/30/2013, Spring, 1004, 1017, 1030, 1035, 1031, 1028), ",
        "output": "SELECT major FROm student WHERE sex  =  \"m\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name of the room that can accommodate the most people? ###filtered_database_schema: CREATE TABLE `Rooms` ( RoomId TEXT PRIMARY KEY, roomName TEXT, beds INTEGER, bedType TEXT, maxOccupancy INTEGER, basePrice INTEGER, decor TEXT ); Sample rows from `Rooms`: (RND, Recluse and defiance, 1, King, 2, 150, modern), (IBS, Interim but salutary, 1, King, 2, 150, traditional), (AOB, Abscond or bolster, 2, Queen, 4, 175, traditional), CREATE TABLE `Reservations` ( Code INTEGER, Room TEXT REFERENCES Rooms(RoomId), CheckIn TEXT, CheckOut TEXT, Rate REAL, LastName TEXT, FirstName TEXT, Adults INTEGER, Kids INTEGER ); Sample rows from `Reservations`: (10105, HBB, 23-OCT-10, 25-OCT-10, 100.0, SELBIG, CONRAD, 1, 0), (10183, IBD, 19-SEP-10, 20-SEP-10, 150.0, GABLER, DOLLIE, 2, 0), (10449, RND, 30-SEP-10, 01-OCT-10, 150.0, KLESS, NELSON, 1, 0), ",
        "output": "SELECT roomname FROM rooms ORDER BY maxoccupancy DESC LIMIT 1;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the the customer details and id for the customers who had more than one policy. ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_Details VARCHAR(255) ); Sample rows from `Customers`: (1, America Jaskolski), (2, Ellsworth Paucek), (3, Mrs. Hanna Willms), CREATE TABLE `Customer_Policies` ( Policy_ID INTEGER, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Policy_Type_Code CHAR(15), Start_Date DATE, End_Date DATE ); Sample rows from `Customer_Policies`: (119, 1, Car, 2018-01-21, 2017-12-15), (141, 2, Life, 2017-08-21, 2017-09-29), (143, 3, Car, 2017-06-16, 2017-12-09), CREATE TABLE `Claims` ( Claim_ID INTEGER, Policy_ID INTEGER REFERENCES Customer_Policies(Policy_ID), Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER ); Sample rows from `Claims`: (143, 744, 2017-03-11, 2017-11-03, 43884, 1085), (423, 552, 2016-08-12, 2018-01-27, 79134, 1724), (442, 473, 2017-02-24, 2018-01-21, 70088, 1189), CREATE TABLE `Settlements` ( Settlement_ID INTEGER, Claim_ID INTEGER REFERENCES Claims(Claim_ID), Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, Customer_Policy_ID INTEGER ); Sample rows from `Settlements`: (357, 486, 2018-08-07, 2018-01-16, 38543, 1181, 515), (412, 621, 2017-08-27, 2018-02-04, 57669, 1427, 617), (476, 801, 2016-09-05, 2018-03-02, 30954, 1805, 943), CREATE TABLE `Payments` ( Payment_ID INTEGER, Settlement_ID INTEGER REFERENCES Settlements(Settlement_ID), Payment_Method_Code VARCHAR(255), Date_Payment_Made DATE, Amount_Payment INTEGER ); Sample rows from `Payments`: (384, 516, MasterCard, 2018-02-16, 241730), (435, 476, MasterCard, 2017-05-28, 448613), (484, 516, MasterCard, 2017-06-24, 456098), ",
        "output": "SELECT t1.customer_details ,  t1.customer_id FROM customers as t1 JOIN customer_policies as t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id HAVING COUNT(*)  >  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List all cities of addresses in alphabetical order. ###filtered_database_schema: CREATE TABLE `Ref_Address_Types` ( address_type_code VARCHAR(15) PRIMARY KEY, address_type_description VARCHAR(80) ); Sample rows from `Ref_Address_Types`: (BILL, Billing), (HOME, Home or Residence), CREATE TABLE `Ref_Detention_Type` ( detention_type_code VARCHAR(10) PRIMARY KEY, detention_type_description VARCHAR(80) ); Sample rows from `Ref_Detention_Type`: (BREAK , During Break time), (AFTER, After School), (LUNCH, Lunch-time), CREATE TABLE `Ref_Incident_Type` ( incident_type_code VARCHAR(10) PRIMARY KEY, incident_type_description VARCHAR(80) ); Sample rows from `Ref_Incident_Type`: (NOISE, Noise), (VIOLENCE, Violence), (DISTURB, Disturbance), CREATE TABLE `Addresses` ( address_id INTEGER, line_1 VARCHAR(120), line_2 VARCHAR(120), line_3 VARCHAR(120), city VARCHAR(80), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), other_address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 020 Orie Canyon, None, None, North Loyceville, 197, Hawaii, USA, None), (2, 1333 Boyle Lane, None, None, West Sean, 937, Illinois, USA, None), (3, 027 Kim Divide Apt. 492, None, None, Beierview, 918, Texas, USA, None), CREATE TABLE `Students` ( student_id INTEGER, address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(40), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), date_first_rental DATETIME, date_left_university DATETIME, other_student_details VARCHAR(255) ); Sample rows from `Students`: (1, 19, Emma, Frederic, Rohan, 235.899.9744, derrick.jenkins@example.com, 2017-12-05 15:20:04, 2018-03-03 03:33:05, None), (2, 9, Louvenia, Fatima, Hansen, 1-247-673-8446, rohan.clarabelle@example.org, 2017-08-08 22:30:36, 2018-02-24 11:12:11, None), (3, 10, Rhea, Gardner, Bergnaum, 1-751-162-9676x115, kkirlin@example.org, 2017-11-15 04:57:28, 2018-03-19 12:49:20, None), CREATE TABLE `Teachers` ( teacher_id INTEGER, address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(80), last_name VARCHAR(80), gender VARCHAR(1), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), other_details VARCHAR(255) ); Sample rows from `Teachers`: (1, 15, Lyla, Wilson, Medhurst, 1, 792.333.7714, ohammes@example.com, None), (2, 7, Sid, Tremayne, Brakus, 1, 202.626.1698x9242, deborah37@example.com, None), (3, 8, Trystan, Alexane, Schuster, 1, 583-467-0403x647, hilll.kitty@example.com, None), CREATE TABLE `Assessment_Notes` ( notes_id INTEGER, student_id INTEGER REFERENCES Students(student_id), teacher_id INTEGER REFERENCES Teachers(teacher_id), date_of_notes DATETIME, text_of_notes VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Assessment_Notes`: (1, 7, 3, 1978-04-15 04:49:18, None, None), (2, 11, 10, 2005-06-30 02:48:35, None, None), (3, 15, 3, 1988-06-09 00:24:01, None, None), CREATE TABLE `Behavior_Incident` ( incident_id INTEGER, incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code), student_id INTEGER REFERENCES Students(student_id), date_incident_start DATETIME, date_incident_end DATETIME, incident_summary VARCHAR(255), recommendations VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Behavior_Incident`: (1, NOISE, 6, 2017-07-09 10:04:13, 2018-03-08 14:08:54, None, None, None), (2, DISTURB, 13, 2018-01-31 10:51:13, 2018-03-18 18:40:05, None, None, None), (3, VIOLENCE, 1, 2017-10-10 22:43:54, 2018-03-22 02:10:35, None, Transfer schools, None), CREATE TABLE `Detention` ( detention_id INTEGER, detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code), teacher_id INTEGER REFERENCES Teachers(teacher_id), datetime_detention_start DATETIME, datetime_detention_end DATETIME, detention_summary VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Detention`: (1, AFTER, 7, 2017-09-05 00:38:25, 2018-03-08 02:08:32, None, None), (2, AFTER, 14, 2018-01-10 08:09:02, 2018-03-07 04:24:48, None, None), (3, BREAK , 11, 2017-12-14 06:40:29, 2018-03-08 09:16:38, None, None), CREATE TABLE `Student_Addresses` ( student_id INTEGER REFERENCES Students(student_id), address_id INTEGER REFERENCES Addresses(address_id), date_address_from DATETIME, date_address_to DATETIME, monthly_rental DECIMAL(19,4), other_details VARCHAR(255) ); Sample rows from `Student_Addresses`: (6, 12, 2017-10-16 13:56:34, 2018-03-15 10:37:19, 826.4319, house), (3, 18, 2017-06-19 12:39:39, 2018-03-02 00:19:57, 1113.0996, house), (8, 1, 2017-10-31 12:40:34, 2018-02-25 05:21:34, 1297.3186, apartment), CREATE TABLE `Students_in_Detention` ( student_id INTEGER REFERENCES Students(student_id), detention_id INTEGER REFERENCES Detention(detention_id), incident_id INTEGER REFERENCES Behavior_Incident(incident_id) ); Sample rows from `Students_in_Detention`: (3, 15, 1), (8, 13, 3), (11, 6, 11), ",
        "output": "SELECT city FROM addresses ORDER BY city"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the low and high estimates for all film markets. ###filtered_database_schema: CREATE TABLE `film` ( Film_ID INT PRIMARY KEY, Title TEXT, Studio TEXT, Director TEXT, Gross_in_dollar INT ); Sample rows from `film`: (1, ET the Extra-Terrestrial, Universal, Steven Spielberg, 435110554), (2, Tootsie, Columbia, Sydney Pollack, 177200000), (3, An Officer and a Gentleman, Paramount / Lorimar, Taylor Hackford, 129795554), CREATE TABLE `market` ( Market_ID INT PRIMARY KEY, Country TEXT, Number_cities INT ); Sample rows from `market`: (1, Japan, 209), (2, China, 540), (3, USA, 700), CREATE TABLE `film_market_estimation` ( Estimation_ID INT PRIMARY KEY, Low_Estimate REAL, High_Estimate REAL, Film_ID INT REFERENCES film(Film_ID), Type TEXT, Market_ID INT REFERENCES market(Market_ID), Year INT ); Sample rows from `film_market_estimation`: (1, 80000.0, 80400.0, 1, Mass suicide murder, 1, 1945), (2, 8000.0, 8000.0, 2, Mass suicide, 2, 1944), (3, 3000.0, 80400.0, 3, Mass human sacrifice, 3, 1487), ",
        "output": "SELECT low_estimate ,  high_estimate FROM film_market_estimation"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the different nationalities and the number of journalists of each nationality. ###filtered_database_schema: CREATE TABLE `event` ( Event_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Name TEXT, Event_Attendance INT ); Sample rows from `event`: (1, 13 October 2008, Marathon, Olympia Games Openning, 6650), (2, 11 October 2007, Victoria, Government Hearing, 369), (3, 7 October 2010, Motagua, Public Debating, 1675), CREATE TABLE `journalist` ( journalist_ID INT PRIMARY KEY, Name TEXT, Nationality TEXT, Age TEXT, Years_working INT ); Sample rows from `journalist`: (1, Herbert Swindells, England, 37, 10), (2, Fred Keenor, Wales, 27, 5), (3, George Gilchrist, England, 28, 6), CREATE TABLE `news_report` ( journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID), Event_ID INT PRIMARY KEY REFERENCES event(Event_ID), Work_Type TEXT ); Sample rows from `news_report`: (1, 3, Screening), (11, 5, Screening), (6, 1, Screening), ",
        "output": "SELECT nationality ,  COUNT(*) FROM journalist GROUP BY nationality"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the total amount of settlement made for all the settlements? ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_Details VARCHAR(255) ); Sample rows from `Customers`: (1, America Jaskolski), (2, Ellsworth Paucek), (3, Mrs. Hanna Willms), CREATE TABLE `Customer_Policies` ( Policy_ID INTEGER, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Policy_Type_Code CHAR(15), Start_Date DATE, End_Date DATE ); Sample rows from `Customer_Policies`: (119, 1, Car, 2018-01-21, 2017-12-15), (141, 2, Life, 2017-08-21, 2017-09-29), (143, 3, Car, 2017-06-16, 2017-12-09), CREATE TABLE `Claims` ( Claim_ID INTEGER, Policy_ID INTEGER REFERENCES Customer_Policies(Policy_ID), Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER ); Sample rows from `Claims`: (143, 744, 2017-03-11, 2017-11-03, 43884, 1085), (423, 552, 2016-08-12, 2018-01-27, 79134, 1724), (442, 473, 2017-02-24, 2018-01-21, 70088, 1189), CREATE TABLE `Settlements` ( Settlement_ID INTEGER, Claim_ID INTEGER REFERENCES Claims(Claim_ID), Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, Customer_Policy_ID INTEGER ); Sample rows from `Settlements`: (357, 486, 2018-08-07, 2018-01-16, 38543, 1181, 515), (412, 621, 2017-08-27, 2018-02-04, 57669, 1427, 617), (476, 801, 2016-09-05, 2018-03-02, 30954, 1805, 943), CREATE TABLE `Payments` ( Payment_ID INTEGER, Settlement_ID INTEGER REFERENCES Settlements(Settlement_ID), Payment_Method_Code VARCHAR(255), Date_Payment_Made DATE, Amount_Payment INTEGER ); Sample rows from `Payments`: (384, 516, MasterCard, 2018-02-16, 241730), (435, 476, MasterCard, 2017-05-28, 448613), (484, 516, MasterCard, 2017-06-24, 456098), ",
        "output": "SELECT SUM(amount_settled) FROM settlements"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the number of movies produced in 2013 ? ###filtered_database_schema: CREATE TABLE `actor` ( aid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `copyright` ( id INT PRIMARY KEY, msid INT, cid INT ); CREATE TABLE `cast` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), aid INT REFERENCES actor(aid), role INT ); CREATE TABLE `genre` ( gid INT PRIMARY KEY, genre TEXT ); CREATE TABLE `classification` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), gid INT REFERENCES genre(gid) ); CREATE TABLE `company` ( id INT PRIMARY KEY, name TEXT, country_code TEXT ); CREATE TABLE `director` ( did INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `producer` ( pid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `directed_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), did INT REFERENCES director(did) ); CREATE TABLE `keyword` ( id INT PRIMARY KEY, keyword TEXT ); CREATE TABLE `made_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), pid INT REFERENCES producer(pid) ); CREATE TABLE `movie` ( mid INT PRIMARY KEY, title TEXT, release_year INT, title_aka TEXT, budget TEXT ); CREATE TABLE `tags` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), kid INT REFERENCES keyword(kid) ); CREATE TABLE `tv_series` ( sid INT PRIMARY KEY, title TEXT, release_year INT, num_of_seasons INT, num_of_episodes INT, title_aka TEXT, budget TEXT ); CREATE TABLE `writer` ( wid INT PRIMARY KEY, gender TEXT, name INT, nationality INT, num_of_episodes INT, birth_city TEXT, birth_year INT ); CREATE TABLE `written_by` ( id INT, msid INT REFERENCES copyright(msid), wid INT REFERENCES writer(wid) ); ",
        "output": "SELECT COUNT(DISTINCT title) FROM movie WHERE release_year  =  2013;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: how many papers does David M. Blei have in AISTATS ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(t3.paperid) FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the id and the amount of refund of the booking that incurred the most times of payments? ###filtered_database_schema: CREATE TABLE `Discount_Coupons` ( coupon_id INTEGER, date_issued DATETIME, coupon_amount DECIMAL(19,4) ); Sample rows from `Discount_Coupons`: (1, 2017-09-06 01:33:27, 500), (2, 2018-02-20 09:40:56, 686.25), (3, 2017-09-17 23:31:36, 501.3), CREATE TABLE `Customers` ( customer_id INTEGER, coupon_id INTEGER REFERENCES Discount_Coupons(coupon_id), good_or_bad_customer VARCHAR(4), first_name VARCHAR(80), last_name VARCHAR(80), gender_mf VARCHAR(1), date_became_customer DATETIME, date_last_hire DATETIME ); Sample rows from `Customers`: (1, 12, good, Geovany, Homenick, 0, 2017-10-20 12:13:17, 2018-02-27 18:55:26), (2, 14, good, Jailyn, Gerlach, 0, 2015-04-06 21:18:37, 2018-01-30 04:47:13), (3, 7, good, Rosalee, Kessler, 0, 2016-02-03 16:58:11, 2018-03-04 21:30:23), CREATE TABLE `Bookings` ( booking_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), booking_status_code VARCHAR(10), returned_damaged_yn VARCHAR(40), booking_start_date DATETIME, booking_end_date DATETIME, count_hired VARCHAR(40), amount_payable DECIMAL(19,4), amount_of_discount DECIMAL(19,4), amount_outstanding DECIMAL(19,4), amount_of_refund DECIMAL(19,4) ); Sample rows from `Bookings`: (1, 7, Provisional, 1, 2016-12-07 23:39:17, 2018-02-01 16:39:13, 298, 214.39, 71.45, 28.22, 179.14), (2, 15, Confirmed, 1, 2017-06-16 11:42:31, 2018-02-19 21:53:31, 331, 386.92, 83.82, 57.62, 183.68), (3, 3, Confirmed, 1, 2017-04-04 11:02:43, 2018-02-01 09:30:50, 729, 351.32, 49.26, 66.01, 135.94), CREATE TABLE `Products_for_Hire` ( product_id INTEGER, product_type_code VARCHAR(15), daily_hire_cost DECIMAL(19,4), product_name VARCHAR(80), product_description VARCHAR(255) ); Sample rows from `Products_for_Hire`: (1, Cutlery, 26.15, Book collection C, Anna Karenina), (2, Cutlery, 15.62, Book collection B, War and Peace), (3, Cutlery, 39.73, Book collection A, The Great Gatsby), CREATE TABLE `Payments` ( payment_id INTEGER, booking_id INTEGER REFERENCES Bookings(booking_id), customer_id INTEGER REFERENCES Customers(customer_id), payment_type_code VARCHAR(15), amount_paid_in_full_yn VARCHAR(1), payment_date DATETIME, amount_due DECIMAL(19,4), amount_paid DECIMAL(19,4) ); Sample rows from `Payments`: (1, 6, 15, Check, 1, 2018-03-09 16:28:00, 369.52, 206.27), (2, 9, 12, Cash, 1, 2018-03-03 13:39:44, 278.6, 666.45), (3, 5, 7, Credit Card, 0, 2018-03-22 15:00:23, 840.06, 135.7), CREATE TABLE `Products_Booked` ( booking_id INTEGER PRIMARY KEY REFERENCES Bookings(booking_id), product_id INTEGER PRIMARY KEY REFERENCES Products_for_Hire(product_id), returned_yn VARCHAR(1), returned_late_yn VARCHAR(1), booked_count INTEGER, booked_amount FLOAT ); Sample rows from `Products_Booked`: (4, 1, 1, 1, 5, 309.73), (14, 1, 1, 0, 3, 102.76), (13, 3, 1, 0, 4, 151.68), CREATE TABLE `View_Product_Availability` ( product_id INTEGER REFERENCES Products_for_Hire(product_id), booking_id INTEGER REFERENCES Bookings(booking_id), status_date DATETIME PRIMARY KEY, available_yn VARCHAR(1) ); Sample rows from `View_Product_Availability`: (1, 5, 2018-03-18 05:25:55, 1), (2, 5, 2018-03-21 15:20:32, 0), (3, 11, 2018-03-25 10:20:15, 1), ",
        "output": "SELECT t1.booking_id ,  t1.amount_of_refund FROM bookings as t1 JOIN payments as t2 ON t1.booking_id  =  t2.booking_id GROUP BY t1.booking_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the dates of performances with attending members whose roles are \"Violin\". ###filtered_database_schema: CREATE TABLE `member` ( Member_ID TEXT PRIMARY KEY, Name TEXT, Nationality TEXT, Role TEXT ); Sample rows from `member`: (1, Wilfredo Ruiz, Uruguay, Prime Violin), (2, Luis González, Argentina, Violin), (3, Héctor Campana, Argentina, Violin), CREATE TABLE `performance` ( Performance_ID REAL PRIMARY KEY, Date TEXT, Host TEXT, Location TEXT, Attendance INT ); Sample rows from `performance`: (1.0, February 2, Boston Bruins, TD Garden, 165), (2.0, February 4, New York Rangers, Madison Square Garden, 1820), (3.0, February 5, Atlanta Thrashers, Verizon Center, 1878), CREATE TABLE `member_attendance` ( Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Performance_ID INT PRIMARY KEY REFERENCES performance(Performance_ID), Num_of_Pieces INT ); Sample rows from `member_attendance`: (11, 3, 2), (7, 2, 3), (4, 6, 4), ",
        "output": "SELECT t3.date FROM member_attendance as t1 JOIN member as t2 ON t1.member_id  =  t2.member_id JOIN performance as t3 ON t1.performance_id  =  t3.performance_id WHERE t2.role  =  \"Violin\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50. ###filtered_database_schema: CREATE TABLE `regions` ( REGION_ID decimal(5,0) PRIMARY KEY, REGION_NAME varchar(25) ); Sample rows from `regions`: (1, Europe\\r), (2, Americas\\r), (3, Asia\\r), CREATE TABLE `countries` ( COUNTRY_ID varchar(2) PRIMARY KEY, COUNTRY_NAME varchar(40), REGION_ID decimal(10,0) REFERENCES regions(REGION_ID) ); Sample rows from `countries`: (AR, Argentina, 2), (AU, Australia, 3), (BE, Belgium, 1), CREATE TABLE `departments` ( DEPARTMENT_ID decimal(4,0) PRIMARY KEY, DEPARTMENT_NAME varchar(30), MANAGER_ID decimal(6,0), LOCATION_ID decimal(4,0) ); Sample rows from `departments`: (10, Administration, 200, 1700), (20, Marketing, 201, 1800), (30, Purchasing, 114, 1700), CREATE TABLE `jobs` ( JOB_ID varchar(10) PRIMARY KEY, JOB_TITLE varchar(35), MIN_SALARY decimal(6,0), MAX_SALARY decimal(6,0) ); Sample rows from `jobs`: (AD_PRES, President, 20000, 40000), (AD_VP, Administration Vice President, 15000, 30000), (AD_ASST, Administration Assistant, 3000, 6000), CREATE TABLE `employees` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY, FIRST_NAME varchar(20), LAST_NAME varchar(25), EMAIL varchar(25), PHONE_NUMBER varchar(20), HIRE_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), SALARY decimal(8,2), COMMISSION_PCT decimal(2,2), MANAGER_ID decimal(6,0), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `employees`: (100, Steven, King, SKING, 515.123.4567, 1987-06-17, AD_PRES, 24000, 0, 0, 90), (101, Neena, Kochhar, NKOCHHAR, 515.123.4568, 1987-06-18, AD_VP, 17000, 0, 100, 90), (102, Lex, De Haan, LDEHAAN, 515.123.4569, 1987-06-19, AD_VP, 17000, 0, 100, 90), CREATE TABLE `job_history` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY REFERENCES employees(EMPLOYEE_ID), START_DATE date PRIMARY KEY, END_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `job_history`: (102, 1993-01-13, 1998-07-24, IT_PROG, 60), (101, 1989-09-21, 1993-10-27, AC_ACCOUNT, 110), (101, 1993-10-28, 1997-03-15, AC_MGR, 110), CREATE TABLE `locations` ( LOCATION_ID decimal(4,0) PRIMARY KEY, STREET_ADDRESS varchar(40), POSTAL_CODE varchar(12), CITY varchar(30), STATE_PROVINCE varchar(25), COUNTRY_ID varchar(2) REFERENCES countries(COUNTRY_ID) ); Sample rows from `locations`: (1000, 1297 Via Cola di Rie, 989, Roma, , IT), (1100, 93091 Calle della Testa, 10934, Venice, , IT), (1200, 2017 Shinjuku-ku, 1689, Tokyo, Tokyo Prefecture, JP), ",
        "output": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'. ###filtered_database_schema: CREATE TABLE `Web_client_accelerator` ( id INT PRIMARY KEY, name TEXT, Operating_system TEXT, Client TEXT, Connection TEXT ); Sample rows from `Web_client_accelerator`: (1, CACHEbox, Appliance (Linux), End user, ISP, Broadband, Satellite, Wireless, Fiber, DSL), (2, CProxy, Windows, user, up to 756kbit/s), (3, Fasterfox, Windows, Mac, Linux and Mobile devices, user, Dialup, Wireless, Broadband, DSL), CREATE TABLE `browser` ( id INT PRIMARY KEY, name TEXT, market_share REAL ); Sample rows from `browser`: (1, Internet Explorer, 28.96), (2, Firefox, 18.11), (3, Safari, 8.54), CREATE TABLE `accelerator_compatible_browser` ( accelerator_id INT PRIMARY KEY REFERENCES Web_client_accelerator(id), browser_id INT PRIMARY KEY REFERENCES browser(id), compatible_since_year INT ); Sample rows from `accelerator_compatible_browser`: (1, 1, 1995), (1, 2, 1996), (2, 3, 1996), ",
        "output": "SELECT t3.name FROM web_client_accelerator as t1 JOIN accelerator_compatible_browser as t2 ON t2.accelerator_id  =  t1.id JOIN browser as t3 ON t2.browser_id  =  t3.id WHERE t1.name  =  'CACHEbox' INTERSECT SELECT t3.name FROM web_client_accelerator as t1 JOIN accelerator_compatible_browser as t2 ON t2.accelerator_id  =  t1.id JOIN browser as t3 ON t2.browser_id  =  t3.id WHERE t1.name  =  'Fasterfox'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return me the number of tips that are written by Michelle . ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT COUNT(DISTINCT t1.text) FROM user as t2 JOIN tip as t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Michelle\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many orders have detail \"Second time\"? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_content VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), other_address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 9443 Boyle Route Suite 857, Lucasville, 416, Colorado, USA, None), (2, 1969 Jabari Port Suite 393, New Sabryna, 721, SouthCarolina, USA, None), (3, 295 Hackett Curve, Reingertown, 255, NewJersey, USA, None), CREATE TABLE `Products` ( product_id INTEGER, product_details VARCHAR(255) ); Sample rows from `Products`: (1, Americano), (2, Dove Chocolate), (3, Latte), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method VARCHAR(15), customer_name VARCHAR(80), date_became_customer DATETIME, other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Cash, Dr. Julia Wuckert MD, 2018-03-01 23:20:10, None), (2, Cheque, Tillman Ernser, 2018-02-28 11:37:44, None), (3, Credit Card, Rodrick Heaney, 2018-03-09 17:41:58, None), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_address_from DATETIME, address_type VARCHAR(15), date_address_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 11, 1985-03-29 20:31:43, Billing, 1993-02-17 17:55:18), (13, 11, 2010-08-25 04:24:35, Billing, 1972-02-17 22:23:38), (2, 14, 2010-12-26 08:52:50, Residential, 1979-07-16 18:22:39), CREATE TABLE `Customer_Contact_Channels` ( customer_id INTEGER REFERENCES Customers(customer_id), channel_code VARCHAR(15), active_from_date DATETIME, active_to_date DATETIME, contact_number VARCHAR(50) ); Sample rows from `Customer_Contact_Channels`: (9, Email, 2017-12-07 18:18:15, 2018-03-23 13:37:14, 940.035.6435x0225), (2, Email, 2017-04-07 04:51:41, 2018-03-23 01:30:52, 189.449.8326x7607), (9, Email, 2017-05-25 16:08:45, 2018-03-13 07:32:25, 958-653-2640), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(15), order_date DATETIME, order_details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 15, Cancelled, 2018-03-21 11:20:46, None), (2, 3, Cancelled, 2018-03-05 06:35:33, None), (3, 5, Delivered, 2018-03-04 07:16:22, Second time), CREATE TABLE `Order_Items` ( order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), order_quantity VARCHAR(15) ); Sample rows from `Order_Items`: (14, 2, 5), (5, 2, 9), (14, 3, 2), ",
        "output": "SELECT COUNT(*) FROM customer_orders WHERE order_details  =  \"Second time\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the first and last names of the top 10 longest-serving employees? ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all tracks that belong to the Rock genre and whose media type is MPEG? ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT t2.name FROM genres as t1 JOIN tracks as t2 ON t1.id = t2.genre_id JOIN media_types as t3 ON t3.id = t2.media_type_id WHERE t1.name = \"Rock\" OR t3.name = \"MPEG audio file\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average price of clothes? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 28481 Crist Circle East Burdettestad, IA 21232), (2, 0292 Mitchel Pike Port Abefurt, IA 84402-4249), (3, 4062 Mante Place West Lindsey, DE 76199-8015), CREATE TABLE `Staff` ( staff_id INTEGER, staff_gender VARCHAR(1), staff_name VARCHAR(80) ); Sample rows from `Staff`: (1, 1, Tom), (2, 1, Malika), (3, 1, Katelynn), CREATE TABLE `Suppliers` ( supplier_id INTEGER, supplier_name VARCHAR(80), supplier_phone VARCHAR(80) ); Sample rows from `Suppliers`: (1, Lidl, (692)009-5928), (2, AB Store, 1-483-283-4742), (3, Tesco, 287-071-1153x254), CREATE TABLE `Department_Store_Chain` ( dept_store_chain_id INTEGER, dept_store_chain_name VARCHAR(80) ); Sample rows from `Department_Store_Chain`: (1, South), (2, West), (3, East), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method_code VARCHAR(10), customer_code VARCHAR(20), customer_name VARCHAR(80), customer_address VARCHAR(255), customer_phone VARCHAR(80), customer_email VARCHAR(80) ); Sample rows from `Customers`: (1, Credit Card, 401, Ahmed, 75099 Tremblay Port Apt. 163 South Norrisland, SC 80546, 254-072-4068x33935, margarett.vonrueden@example.com), (2, Credit Card, 665, Chauncey, 8408 Lindsay Court East Dasiabury, IL 72656-3552, +41(8)1897032009, stiedemann.sigrid@example.com), (3, Direct Debit, 844, Lukas, 7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871, 197-417-3557, joelle.monahan@example.com), CREATE TABLE `Products` ( product_id INTEGER, product_type_code VARCHAR(10), product_name VARCHAR(80), product_price DECIMAL(19,4) ); Sample rows from `Products`: (1, Clothes, red jeans, 734.73), (2, Clothes, yellow jeans, 687.23), (3, Clothes, black jeans, 695.16), CREATE TABLE `Supplier_Addresses` ( supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Supplier_Addresses`: (4, 5, 2016-09-22 16:41:31, 2018-03-14 20:06:37), (3, 9, 2014-11-07 19:18:49, 2018-03-16 16:39:58), (3, 2, 2008-11-22 12:01:25, 2018-03-02 19:50:22), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 9, 2017-12-11 05:00:22, 2018-03-20 20:52:34), (1, 6, 2017-10-07 23:00:26, 2018-02-28 14:53:52), (10, 8, 2017-04-04 20:00:27, 2018-02-27 20:08:33), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status_code VARCHAR(10), order_date DATETIME ); Sample rows from `Customer_Orders`: (1, 12, Completed, 2018-02-10 15:44:48), (2, 4, New, 2018-01-31 17:49:18), (3, 1, PartFilled, 2018-02-26 12:39:33), CREATE TABLE `Department_Stores` ( dept_store_id INTEGER, dept_store_chain_id INTEGER REFERENCES Department_Store_Chain(dept_store_chain_id), store_name VARCHAR(80), store_address VARCHAR(255), store_phone VARCHAR(80), store_email VARCHAR(80) ); Sample rows from `Department_Stores`: (1, 1, store_name, 01290 Jeremie Parkway Suite 753 North Arielle, MS 51249, (948)944-5099x2027, bmaggio@example.com), (2, 3, store_name, 082 Purdy Expressway O'Connellshire, IL 31732, 877-917-5029, larissa10@example.org), (3, 4, store_name, 994 Travis Plains North Wadeton, WV 27575-3951, 1-216-312-0375, alexandro.mcclure@example.net), CREATE TABLE `Departments` ( department_id INTEGER, dept_store_id INTEGER REFERENCES Department_Stores(dept_store_id), department_name VARCHAR(80) ); Sample rows from `Departments`: (1, 5, human resource), (2, 11, purchasing), (3, 4, marketing), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id) ); Sample rows from `Order_Items`: (1, 9, 7), (2, 1, 3), (3, 5, 2), CREATE TABLE `Product_Suppliers` ( product_id INTEGER PRIMARY KEY REFERENCES Products(product_id), supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), date_supplied_from DATETIME, date_supplied_to DATETIME, total_amount_purchased VARCHAR(80), total_value_purchased DECIMAL(19,4) ); Sample rows from `Product_Suppliers`: (4, 3, 2017-06-19 00:49:05, 2018-03-24 19:29:18, 89366.05, 36014.6), (8, 4, 2017-07-02 00:35:12, 2018-03-25 07:30:49, 25085.57, 36274.56), (3, 3, 2017-10-14 19:15:37, 2018-03-24 02:29:44, 15752.45, 7273.74), CREATE TABLE `Staff_Department_Assignments` ( staff_id INTEGER PRIMARY KEY REFERENCES Staff(staff_id), department_id INTEGER PRIMARY KEY REFERENCES Departments(department_id), date_assigned_from DATETIME, job_title_code VARCHAR(10), date_assigned_to DATETIME ); Sample rows from `Staff_Department_Assignments`: (5, 4, 2017-06-11 22:55:20, Department Manager, 2018-03-23 21:59:11), (10, 5, 2017-12-18 19:12:15, Sales Person, 2018-03-23 20:25:24), (1, 5, 2018-02-14 03:15:29, Clerical Staff, 2018-03-24 19:57:56), ",
        "output": "SELECT AVG(product_price) FROM products WHERE product_type_code  =  'Clothes'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the description and code of the attraction type most tourist attractions belong to. ###filtered_database_schema: CREATE TABLE `Ref_Hotel_Star_Ratings` ( star_rating_code CHAR(15) PRIMARY KEY, star_rating_description VARCHAR(80) ); Sample rows from `Ref_Hotel_Star_Ratings`: (1, star), (2, star), (3, star), CREATE TABLE `Locations` ( Location_ID INTEGER, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Locations`: (333, Astro Orbiter, 660 Shea Crescent, None), (368, African Animals, 254 Ottilie Junction, None), (417, American Adventure, 53815 Sawayn Tunnel Apt. 297, None), CREATE TABLE `Ref_Attraction_Types` ( Attraction_Type_Code CHAR(15) PRIMARY KEY, Attraction_Type_Description VARCHAR(255) ); Sample rows from `Ref_Attraction_Types`: (2, park), (3, garden), (5, gallery), CREATE TABLE `Visitors` ( Tourist_ID INTEGER PRIMARY KEY, Tourist_Details VARCHAR(255) ); Sample rows from `Visitors`: (164, Toney), (189, Graciela), (204, Vincent), CREATE TABLE `Features` ( Feature_ID INTEGER, Feature_Details VARCHAR(255) ); Sample rows from `Features`: (523, cafe), (528, park), (543, garden), CREATE TABLE `Hotels` ( hotel_id INTEGER, star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code), pets_allowed_yn CHAR(1), price_range REAL, other_hotel_details VARCHAR(255) ); Sample rows from `Hotels`: (123, 5, 1, 2914989.571, None), (144, 4, , , None), (172, 5, , 17012.682586009, None), CREATE TABLE `Tourist_Attractions` ( Tourist_Attraction_ID INTEGER, Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code), Location_ID INTEGER REFERENCES Locations(Location_ID), How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Tourist_Attractions`: (2113, 2, 579, bus, art museum, None, None, None), (2701, 6, 417, walk, UK gallery, None, None, None), (5076, 2, 868, shuttle, flying elephant, None, None, None), CREATE TABLE `Street_Markets` ( Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Market_Details VARCHAR(255) ); Sample rows from `Street_Markets`: (6852, Broadway), (7067, Fish Farm Market), CREATE TABLE `Shops` ( Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Shop_Details VARCHAR(255) ); Sample rows from `Shops`: (8429, soup), (8449, coffee), (8698, Flower), CREATE TABLE `Museums` ( Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Museum_Details VARCHAR(255) ); Sample rows from `Museums`: (2113, Yale Center for British Art), (2701, The Metropolitan Museum of Art), (5076, MoMA), CREATE TABLE `Royal_Family` ( Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Royal_Family_Details VARCHAR(255) ); Sample rows from `Royal_Family`: (9561, None), (9919, None), CREATE TABLE `Theme_Parks` ( Theme_Park_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Theme_Park_Details VARCHAR(255) ); Sample rows from `Theme_Parks`: (5265, Disney), (6476, Sea World), (6523, Universal Studios), CREATE TABLE `Visits` ( Visit_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID), Visit_Date DATETIME, Visit_Details VARCHAR(40) ); Sample rows from `Visits`: (183, 6653, 377, 2004-08-21 03:06:14, ), (268, 5076, 204, 2013-08-06 05:35:51, ), (273, 9360, 211, 2013-10-27 09:56:08, ), CREATE TABLE `Photos` ( Photo_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Photos`: (211, 8449, game1, None, 702, None), (280, 7067, game2, None, 762, None), (303, 5076, game3, None, 392, None), CREATE TABLE `Staff` ( Staff_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(40), Other_Details VARCHAR(255) ); Sample rows from `Staff`: (170, 6476, Whitney, None), (219, 6476, Kaela, None), (237, 7067, Eunice, None), CREATE TABLE `Tourist_Attraction_Features` ( Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID) ); Sample rows from `Tourist_Attraction_Features`: (5076, 528), (5076, 681), (5265, 523), ",
        "output": "SELECT t1.attraction_type_description ,  t2.attraction_type_code FROM ref_attraction_types as t1 JOIN tourist_attractions as t2 ON t1.attraction_type_code  =  t2.attraction_type_code GROUP BY t2.attraction_type_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name and country of origin for each artist who has released a song with a resolution higher than 900? ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT t1.artist_name ,  t1.country FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.resolution  >  900 GROUP BY t2.artist_name HAVING COUNT(*)  >=  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids of all students who played video games and sports? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Video_Games` ( GameID INTEGER, GName VARCHAR(40), GType VARCHAR(40) ); Sample rows from `Video_Games`: (1, RNG Stone, Collectible card game), (2, The Vanishing of Eric Calder, Walking Simulator), (3, Grand Term Assignment, Role-playing game), CREATE TABLE `Plays_Games` ( StuID INTEGER REFERENCES Student(StuID), GameID INTEGER REFERENCES Video_Games(GameID), Hours_Played INTEGER ); Sample rows from `Plays_Games`: (1001, 1, 35), (1001, 2, 15), (1001, 5, 1), CREATE TABLE `SportsInfo` ( StuID INTEGER REFERENCES Student(StuID), SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1) ); Sample rows from `SportsInfo`: (1001, Athletics, 2, 5, N), (1002, Football, 7, 20, Y), (1003, Football, 45, 18, Y), ",
        "output": "SELECT stuid FROM sportsinfo INTERSECT SELECT stuid FROM plays_games"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many members have the black membership card? ###filtered_database_schema: CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Address TEXT, Num_of_staff TEXT, Score REAL, Open_Year TEXT ); Sample rows from `shop`: (1, 1200 Main Street, 13, 42.0, 2010), (2, 1111 Main Street, 19, 38.0, 2008), (3, 1330 Baltimore Street, 42, 36.0, 2010), CREATE TABLE `member` ( Member_ID INT PRIMARY KEY, Name TEXT, Membership_card TEXT, Age INT, Time_of_purchase INT, Level_of_membership INT, Address TEXT ); Sample rows from `member`: (1, Ashby, Lazale, Black, 29, 18, 5, Hartford), (2, Breton, Robert, White, 67, 41, 4, Waterbury), (3, Campbell, Jessie, Black, 34, 20, 6, Hartford), CREATE TABLE `happy_hour` ( HH_ID INT PRIMARY KEY, Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID), Month TEXT PRIMARY KEY, Num_of_shaff_in_charge INT ); Sample rows from `happy_hour`: (1, 1, May, 10), (2, 1, April, 12), (3, 10, June, 15), CREATE TABLE `happy_hour_member` ( HH_ID INT PRIMARY KEY, Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Total_amount REAL ); Sample rows from `happy_hour_member`: (1, 3, 20.9), (4, 3, 20.92), (7, 9, 4.9), ",
        "output": "SELECT COUNT(*) FROM member WHERE membership_card  =  'Black'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Who is the oldest person whose job is student? ###filtered_database_schema: CREATE TABLE `Person` ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT ); Sample rows from `Person`: (Alice, 25, new york city, female, student), (Bob, 35, salt lake city, male, engineer), (Zach, 45, austin, male, doctor), CREATE TABLE `PersonFriend` ( name varchar(20) REFERENCES Person(name), friend varchar(20) REFERENCES Person(name), year INTEGER ); Sample rows from `PersonFriend`: (Alice, Bob, 10), (Zach, Dan, 12), (Bob, Zach, 5), ",
        "output": "SELECT name FROM person WHERE job  =  'student' AND age  =  (SELECT MAX(age) FROM person WHERE job  =  'student' )"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin. ###filtered_database_schema: CREATE TABLE `Manufacturers` ( Code INTEGER, Name VARCHAR(255), Headquarter VARCHAR(255), Founder VARCHAR(255), Revenue REAL ); Sample rows from `Manufacturers`: (1, Sony, Tokyo, Andy, 120.0), (2, Creative Labs, Austin, Owen, 100.0), (3, Hewlett-Packard, Los Angeles, James, 50.0), CREATE TABLE `Products` ( Code INTEGER, Name VARCHAR(255), Price DECIMAL, Manufacturer INTEGER REFERENCES Manufacturers(Code) ); Sample rows from `Products`: (1, Hard drive, 240, 5), (2, Memory, 120, 6), (3, ZIP drive, 150, 4), ",
        "output": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT MIN(revenue) FROM manufacturers WHERE headquarter  =  'Austin')"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all departments in alphabetical order? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT dept_name FROM department ORDER BY dept_name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Sort all the distinct products in alphabetical order. ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_name VARCHAR(80), customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Savannah, rerum), (2, George, est), (3, Alberto, deleniti), CREATE TABLE `Invoices` ( invoice_number INTEGER, invoice_date DATETIME, invoice_details VARCHAR(255) ); Sample rows from `Invoices`: (1, 1989-09-03 16:03:05, vitae), (2, 1989-12-11 16:40:57, magnam), (3, 1995-10-07 14:13:05, et), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(10), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 2, Shipped, 2009-02-21 15:26:19, None), (2, 11, Shipped, 1974-06-24 22:10:26, None), (3, 4, Shipped, 1982-12-29 21:10:11, None), CREATE TABLE `Products` ( product_id INTEGER, product_name VARCHAR(80), product_details VARCHAR(255) ); Sample rows from `Products`: (1, food, None), (2, book, None), (3, food, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, product_id INTEGER REFERENCES Products(product_id), order_id INTEGER REFERENCES Orders(order_id), order_item_status VARCHAR(10), order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 6, Finish, None), (2, 15, 6, Finish, None), (3, 12, 15, Finish, None), CREATE TABLE `Shipments` ( shipment_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), shipment_tracking_number VARCHAR(80), shipment_date DATETIME, other_shipment_details VARCHAR(255) ); Sample rows from `Shipments`: (1, 5, 13, 3452, 1983-08-13 22:34:11, None), (2, 7, 2, 0114, 1977-11-10 12:11:25, None), (3, 10, 5, 478, 2006-01-17 03:08:05, None), CREATE TABLE `Shipment_Items` ( shipment_id INTEGER REFERENCES Shipments(shipment_id), order_item_id INTEGER REFERENCES Order_Items(order_item_id) ); Sample rows from `Shipment_Items`: (11, 12), (10, 15), (10, 12), ",
        "output": "SELECT DISTINCT product_name FROM products ORDER BY product_name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 28481 Crist Circle East Burdettestad, IA 21232), (2, 0292 Mitchel Pike Port Abefurt, IA 84402-4249), (3, 4062 Mante Place West Lindsey, DE 76199-8015), CREATE TABLE `Staff` ( staff_id INTEGER, staff_gender VARCHAR(1), staff_name VARCHAR(80) ); Sample rows from `Staff`: (1, 1, Tom), (2, 1, Malika), (3, 1, Katelynn), CREATE TABLE `Suppliers` ( supplier_id INTEGER, supplier_name VARCHAR(80), supplier_phone VARCHAR(80) ); Sample rows from `Suppliers`: (1, Lidl, (692)009-5928), (2, AB Store, 1-483-283-4742), (3, Tesco, 287-071-1153x254), CREATE TABLE `Department_Store_Chain` ( dept_store_chain_id INTEGER, dept_store_chain_name VARCHAR(80) ); Sample rows from `Department_Store_Chain`: (1, South), (2, West), (3, East), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method_code VARCHAR(10), customer_code VARCHAR(20), customer_name VARCHAR(80), customer_address VARCHAR(255), customer_phone VARCHAR(80), customer_email VARCHAR(80) ); Sample rows from `Customers`: (1, Credit Card, 401, Ahmed, 75099 Tremblay Port Apt. 163 South Norrisland, SC 80546, 254-072-4068x33935, margarett.vonrueden@example.com), (2, Credit Card, 665, Chauncey, 8408 Lindsay Court East Dasiabury, IL 72656-3552, +41(8)1897032009, stiedemann.sigrid@example.com), (3, Direct Debit, 844, Lukas, 7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871, 197-417-3557, joelle.monahan@example.com), CREATE TABLE `Products` ( product_id INTEGER, product_type_code VARCHAR(10), product_name VARCHAR(80), product_price DECIMAL(19,4) ); Sample rows from `Products`: (1, Clothes, red jeans, 734.73), (2, Clothes, yellow jeans, 687.23), (3, Clothes, black jeans, 695.16), CREATE TABLE `Supplier_Addresses` ( supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Supplier_Addresses`: (4, 5, 2016-09-22 16:41:31, 2018-03-14 20:06:37), (3, 9, 2014-11-07 19:18:49, 2018-03-16 16:39:58), (3, 2, 2008-11-22 12:01:25, 2018-03-02 19:50:22), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 9, 2017-12-11 05:00:22, 2018-03-20 20:52:34), (1, 6, 2017-10-07 23:00:26, 2018-02-28 14:53:52), (10, 8, 2017-04-04 20:00:27, 2018-02-27 20:08:33), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status_code VARCHAR(10), order_date DATETIME ); Sample rows from `Customer_Orders`: (1, 12, Completed, 2018-02-10 15:44:48), (2, 4, New, 2018-01-31 17:49:18), (3, 1, PartFilled, 2018-02-26 12:39:33), CREATE TABLE `Department_Stores` ( dept_store_id INTEGER, dept_store_chain_id INTEGER REFERENCES Department_Store_Chain(dept_store_chain_id), store_name VARCHAR(80), store_address VARCHAR(255), store_phone VARCHAR(80), store_email VARCHAR(80) ); Sample rows from `Department_Stores`: (1, 1, store_name, 01290 Jeremie Parkway Suite 753 North Arielle, MS 51249, (948)944-5099x2027, bmaggio@example.com), (2, 3, store_name, 082 Purdy Expressway O'Connellshire, IL 31732, 877-917-5029, larissa10@example.org), (3, 4, store_name, 994 Travis Plains North Wadeton, WV 27575-3951, 1-216-312-0375, alexandro.mcclure@example.net), CREATE TABLE `Departments` ( department_id INTEGER, dept_store_id INTEGER REFERENCES Department_Stores(dept_store_id), department_name VARCHAR(80) ); Sample rows from `Departments`: (1, 5, human resource), (2, 11, purchasing), (3, 4, marketing), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id) ); Sample rows from `Order_Items`: (1, 9, 7), (2, 1, 3), (3, 5, 2), CREATE TABLE `Product_Suppliers` ( product_id INTEGER PRIMARY KEY REFERENCES Products(product_id), supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), date_supplied_from DATETIME, date_supplied_to DATETIME, total_amount_purchased VARCHAR(80), total_value_purchased DECIMAL(19,4) ); Sample rows from `Product_Suppliers`: (4, 3, 2017-06-19 00:49:05, 2018-03-24 19:29:18, 89366.05, 36014.6), (8, 4, 2017-07-02 00:35:12, 2018-03-25 07:30:49, 25085.57, 36274.56), (3, 3, 2017-10-14 19:15:37, 2018-03-24 02:29:44, 15752.45, 7273.74), CREATE TABLE `Staff_Department_Assignments` ( staff_id INTEGER PRIMARY KEY REFERENCES Staff(staff_id), department_id INTEGER PRIMARY KEY REFERENCES Departments(department_id), date_assigned_from DATETIME, job_title_code VARCHAR(10), date_assigned_to DATETIME ); Sample rows from `Staff_Department_Assignments`: (5, 4, 2017-06-11 22:55:20, Department Manager, 2018-03-23 21:59:11), (10, 5, 2017-12-18 19:12:15, Sales Person, 2018-03-23 20:25:24), (1, 5, 2018-02-14 03:15:29, Clerical Staff, 2018-03-24 19:57:56), ",
        "output": "SELECT MAX(product_price) ,  MIN(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are names of stations that have average bike availability above 10 and are not located in San Jose city? ###filtered_database_schema: CREATE TABLE `station` ( id INTEGER, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT ); Sample rows from `station`: (2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013), (3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013), (4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013), CREATE TABLE `status` ( station_id INTEGER REFERENCES station(id), bikes_available INTEGER, docks_available INTEGER, time TEXT ); Sample rows from `status`: (3, 12, 3, 2015-06-02 12:46:02), (3, 12, 3, 2015-06-02 12:47:02), (3, 12, 3, 2015-06-02 12:48:02), CREATE TABLE `trip` ( id INTEGER, duration INTEGER, start_date TEXT, start_station_name TEXT, start_station_id INTEGER, end_date TEXT, end_station_name TEXT, end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER ); Sample rows from `trip`: (900504, 384, 8/21/2015 17:03, Howard at 2nd, 63, 8/21/2015 17:10, San Francisco Caltrain 2 (330 Townsend), 69, 454, Subscriber, 94041), (900505, 588, 8/21/2015 17:03, South Van Ness at Market, 66, 8/21/2015 17:13, San Francisco Caltrain 2 (330 Townsend), 69, 574, Subscriber, 95119), (900506, 196, 8/21/2015 17:04, Market at Sansome, 77, 8/21/2015 17:07, Harry Bridges Plaza (Ferry Building), 50, 636, Subscriber, 94925), CREATE TABLE `weather` ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER ); Sample rows from `weather`: (8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107), (8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107), (8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107), ",
        "output": "SELECT t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id HAVING AVG(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are characteristic names used at least twice across all products? ###filtered_database_schema: CREATE TABLE `Ref_Characteristic_Types` ( characteristic_type_code VARCHAR(15) PRIMARY KEY, characteristic_type_description VARCHAR(80) ); Sample rows from `Ref_Characteristic_Types`: (Grade, Grade), (Purity, Purity), CREATE TABLE `Ref_Colors` ( color_code VARCHAR(15) PRIMARY KEY, color_description VARCHAR(80) ); Sample rows from `Ref_Colors`: (9, red), (5, green), (1, yellow), CREATE TABLE `Ref_Product_Categories` ( product_category_code VARCHAR(15) PRIMARY KEY, product_category_description VARCHAR(80), unit_of_measure VARCHAR(20) ); Sample rows from `Ref_Product_Categories`: (Herbs, Herbs, Handful ), (Seeds, Seeds, Weight - pound,kilo.), (Spices, Spices, Weight - pound,kilo.), CREATE TABLE `Characteristics` ( characteristic_id INTEGER, characteristic_type_code VARCHAR(15) REFERENCES Ref_Characteristic_Types(characteristic_type_code), characteristic_data_type VARCHAR(10), characteristic_name VARCHAR(80), other_characteristic_details VARCHAR(255) ); Sample rows from `Characteristics`: (1, Grade, numquam, slow, None), (2, Grade, doloribus, fast, None), (3, Purity, rem, warm, None), CREATE TABLE `Products` ( product_id INTEGER, color_code VARCHAR(15) REFERENCES Ref_Colors(color_code), product_category_code VARCHAR(15) REFERENCES Ref_Product_Categories(product_category_code), product_name VARCHAR(80), typical_buying_price VARCHAR(20), typical_selling_price VARCHAR(20), product_description VARCHAR(255), other_product_details VARCHAR(255) ); Sample rows from `Products`: (1, 4, Spices, cumin, , 2878.3, et, None), (2, 2, Spices, peper, 352447.2874677, 1892070.2803543, rerum, None), (3, 9, Herbs, basil, 503.8431967, 0.1859512, officia, None), CREATE TABLE `Product_Characteristics` ( product_id INTEGER REFERENCES Products(product_id), characteristic_id INTEGER REFERENCES Characteristics(characteristic_id), product_characteristic_value VARCHAR(50) ); Sample rows from `Product_Characteristics`: (13, 13, low), (11, 2, low), (5, 15, low), ",
        "output": "SELECT t3.characteristic_name FROM products as t1 JOIN product_characteristics as t2 ON t1.product_id  =  t2.product_id JOIN characteristics as t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING COUNT(*)  >= 2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many video games do you have? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Video_Games` ( GameID INTEGER, GName VARCHAR(40), GType VARCHAR(40) ); Sample rows from `Video_Games`: (1, RNG Stone, Collectible card game), (2, The Vanishing of Eric Calder, Walking Simulator), (3, Grand Term Assignment, Role-playing game), CREATE TABLE `Plays_Games` ( StuID INTEGER REFERENCES Student(StuID), GameID INTEGER REFERENCES Video_Games(GameID), Hours_Played INTEGER ); Sample rows from `Plays_Games`: (1001, 1, 35), (1001, 2, 15), (1001, 5, 1), CREATE TABLE `SportsInfo` ( StuID INTEGER REFERENCES Student(StuID), SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1) ); Sample rows from `SportsInfo`: (1001, Athletics, 2, 5, N), (1002, Football, 7, 20, Y), (1003, Football, 45, 18, Y), ",
        "output": "SELECT COUNT(*) FROM video_games"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List each test result and its count in descending order of count. ###filtered_database_schema: CREATE TABLE `Course_Authors_and_Tutors` ( author_id INTEGER, author_tutor_ATB VARCHAR(3), login_name VARCHAR(40), password VARCHAR(40), personal_name VARCHAR(80), middle_name VARCHAR(80), family_name VARCHAR(80), gender_mf VARCHAR(1), address_line_1 VARCHAR(80) ); Sample rows from `Course_Authors_and_Tutors`: (1, 331, jmckenzie, c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b, Cathrine, Ruthie, Grant, 0, 756 Monahan Mews Spinkashire, NJ 64230-5098), (2, 975, heidenreich.ara, 24b0ee84063c3b017ab1839e01b7280f47f7c7c2, Retha, Corene, Armstrong, 0, 98623 Huels Manor Jasttown, DE 31611), (3, 349, clementina29, cdaf6c3483f19e2253659a40a3aab786a3390f78, Darius, Ethyl, Reichel, 0, 99296 Keeling Courts North Audreanne, IL 28272), CREATE TABLE `Students` ( student_id INTEGER, date_of_registration DATETIME, date_of_latest_logon DATETIME, login_name VARCHAR(40), password VARCHAR(10), personal_name VARCHAR(40), middle_name VARCHAR(40), family_name VARCHAR(40) ); Sample rows from `Students`: (1, 2015-07-22 13:32:35, 2017-10-17 22:52:26, annamae.hoppe, db8765bb6f, Wilson, Aubrey, Ward), (2, 2015-07-02 00:21:42, 2017-06-24 22:16:27, wmiller, 35faf8182a, Karson, Luella, Jaskolski), (3, 2015-10-11 03:23:27, 2018-03-10 23:22:23, ahartmann, 8e064ec4e6, Mariela, Brandt, Legros), CREATE TABLE `Subjects` ( subject_id INTEGER, subject_name VARCHAR(120) ); Sample rows from `Subjects`: (1, Computer Science), (2, Arts), (3, Language), CREATE TABLE `Courses` ( course_id INTEGER, author_id INTEGER REFERENCES Course_Authors_and_Tutors(author_id), subject_id INTEGER REFERENCES Subjects(subject_id), course_name VARCHAR(120), course_description VARCHAR(255) ); Sample rows from `Courses`: (1, 8, 1, database, database), (2, 6, 1, advanced database, advanced database), (3, 15, 1, operating system, operating system), CREATE TABLE `Student_Course_Enrolment` ( registration_id INTEGER, student_id INTEGER REFERENCES Students(student_id), course_id INTEGER REFERENCES Courses(course_id), date_of_enrolment DATETIME, date_of_completion DATETIME ); Sample rows from `Student_Course_Enrolment`: (1, 11, 2, 2017-10-09 07:09:02, 2018-02-26 07:48:52), (2, 15, 4, 2017-11-13 12:49:33, 2018-03-04 01:24:56), (3, 10, 8, 2017-10-17 13:50:40, 2018-03-22 02:53:01), CREATE TABLE `Student_Tests_Taken` ( registration_id INTEGER REFERENCES Student_Course_Enrolment(registration_id), date_test_taken DATETIME, test_result VARCHAR(255) ); Sample rows from `Student_Tests_Taken`: (12, 2018-03-25 03:27:16, Fail), (10, 2018-03-25 21:50:22, Pass), (7, 2018-03-21 00:32:25, Pass), ",
        "output": "SELECT test_result ,  COUNT(*) FROM student_tests_taken GROUP BY test_result ORDER BY COUNT(*) DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the marketing region code that has the most drama workshop groups? ###filtered_database_schema: CREATE TABLE `Ref_Payment_Methods` ( payment_method_code CHAR(10) PRIMARY KEY, payment_method_description VARCHAR(80) ); Sample rows from `Ref_Payment_Methods`: (American E, credit), (MasterCard, debit), (Visa, Visa), CREATE TABLE `Ref_Service_Types` ( Service_Type_Code CHAR(15) PRIMARY KEY, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255) ); Sample rows from `Ref_Service_Types`: (1, 1, provide photo service), (2, 1, provide dinning service), (3, 1, provide filming service), CREATE TABLE `Addresses` ( Address_ID VARCHAR(100) PRIMARY KEY, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Addresses`: (110, 4753 Dach Highway, Suite 846, Feliciaberg, Florida, None), (124, 391 Vandervort Fall Apt. 446, Apt. 107, West Sherwoodstad, Indiana, None), (148, 809 Izabella Islands, Suite 271, Schadenville, Ohio, None), CREATE TABLE `Products` ( Product_ID VARCHAR(100) PRIMARY KEY, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Products`: (11, photo, 4448536, None, None), (154, film, 2302, None, None), (156, film, 17622723, None, None), CREATE TABLE `Marketing_Regions` ( Marketing_Region_Code CHAR(15) PRIMARY KEY, Marketing_Region_Name VARCHAR(255), Marketing_Region_Descriptrion VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Marketing_Regions`: (CA, Canada, Our target market, None), (CN, China, Our largest market, None), (ES, Spain, , None), CREATE TABLE `Clients` ( Client_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Clients`: (423, 201, branson94@example.net, Clifford, (042)912-3404x5135, VIP), (426, 383, alba04@example.com, Bettye, (604)849-0214, None), (478, 15, westley30@example.net, Reinhold, 1-048-214-4640x64380, None), CREATE TABLE `Drama_Workshop_Groups` ( Workshop_Group_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Currency_Code CHAR(15), Marketing_Region_Code CHAR(15), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Drama_Workshop_Groups`: (136, 383, EU, FR, Amely Cafe, 122-084-8029, amely.ruecker@example.com, None), (140, 180, EU, DE, Veda Film, 793-966-9311x5303, breitenberg.veda@example.com, None), (176, 286, EU, RU, Queen Art, 492-463-5967, quigley.queen@example.org, Good), CREATE TABLE `Performers` ( Performer_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Performers`: (153, 124, Shawna, 664.495.1939, krogahn@example.com, None), (211, 124, Ashley, 893-536-8857, preston45@example.net, None), (313, 39, Oren, 1-952-052-6685x28082, ferry.carolina@example.net, None), CREATE TABLE `Customers` ( Customer_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Customers`: (240, 286, Harold, 624-096-7791, jerde.harmon@example.com, None), (267, 98, Federico, 914-915-7483, johnson27@example.com, None), (304, 369, Samson, 1-463-121-4086x655, dalton75@example.com, None), CREATE TABLE `Stores` ( Store_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Marketing_Region_Code CHAR(15) REFERENCES Marketing_Regions(Marketing_Region_Code), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Stores`: (150, 286, IN, FJA Filming, +65(1)3590790358, fjacobson@example.com, None), (229, 266, CA, Rob Dinning, 1-327-185-9368, rborer@example.org, 5 stars), (231, 230, ES, Adan Dinning, 896-931-9633x869, adan93@example.com, None), CREATE TABLE `Bookings` ( Booking_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Clients(Client_ID), Workshop_Group_ID VARCHAR(100) REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Status_Code CHAR(15), Store_ID INTEGER, Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Bookings`: (1, 938, 140, good, 8, 2016-12-12 10:43:01, 2013-03-10 18:47:05, 1997-11-21 10:07:40, None), (2, 868, 838, stop, 7, 1976-08-20 00:33:08, 2009-07-09 09:18:38, 1976-01-08 07:19:23, None), (3, 735, 176, good, 9, 1975-11-23 06:28:47, 1989-01-05 19:24:45, 1990-03-16 19:38:47, None), CREATE TABLE `Performers_in_Bookings` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Performer_ID INTEGER PRIMARY KEY REFERENCES Performers(Performer_ID) ); Sample rows from `Performers_in_Bookings`: (1, 153), (1, 341), (2, 466), CREATE TABLE `Customer_Orders` ( Order_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Store_ID INTEGER REFERENCES Stores(Store_ID), Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 516, 231, 1994-08-03 12:34:58, 1977-03-11 03:58:19, 1992-07-21 22:11:11, None), (2, 418, 229, 2014-07-10 10:56:01, 1996-08-26 19:19:59, 1998-08-22 17:57:32, None), (3, 712, 229, 1981-06-20 16:29:43, 1980-12-19 05:49:35, 2011-04-13 07:15:35, None), CREATE TABLE `Order_Items` ( Order_Item_ID INTEGER, Order_ID INTEGER REFERENCES Customer_Orders(Order_ID), Product_ID INTEGER REFERENCES Products(Product_ID), Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 3, 233, 1, None), (2, 15, 300, 2, None), (3, 12, 300, 1, None), CREATE TABLE `Invoices` ( Invoice_ID INTEGER, Order_ID INTEGER REFERENCES Bookings(Booking_ID) REFERENCES Customer_Orders(Order_ID), payment_method_code CHAR(15) REFERENCES Ref_Payment_Methods(payment_method_code), Product_ID INTEGER, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER ); Sample rows from `Invoices`: (128, 14, MasterCard, 4, 2, None, 1), (162, 13, MasterCard, 9, 2, None, 9), (164, 7, Visa, 7, 2, None, 1), CREATE TABLE `Services` ( Service_ID INTEGER PRIMARY KEY, Service_Type_Code CHAR(15) REFERENCES Ref_Service_Types(Service_Type_Code), Workshop_Group_ID INTEGER REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Services`: (191, 1, 415, None, film, 58932775.8822, None), (219, 2, 838, None, film, 2704.4719, None), (220, 1, 708, None, dinning, 6888.8306, None), CREATE TABLE `Bookings_Services` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Product_ID INTEGER PRIMARY KEY REFERENCES Services(Service_ID) ); Sample rows from `Bookings_Services`: (1, 396), (1, 779), (4, 191), CREATE TABLE `Invoice_Items` ( Invoice_Item_ID INTEGER, Invoice_ID INTEGER REFERENCES Invoices(Invoice_ID), Order_ID INTEGER REFERENCES Bookings_Services(Order_ID), Order_Item_ID INTEGER REFERENCES Order_Items(Order_Item_ID), Product_ID INTEGER REFERENCES Bookings_Services(Product_ID), Order_Quantity INTEGER, Other_Item_Details VARCHAR(255) ); Sample rows from `Invoice_Items`: (1, 128, 1, 5, 396, 2, None), (2, 162, 4, 6, 191, 6, Good quality), ",
        "output": "SELECT marketing_region_code FROM drama_workshop_groups GROUP BY marketing_region_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all singers that are from the UK and released a song in English? ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT t1.artist_name FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t2.languages  =  \"english\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the full names and gradepoints for all enrollments? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), CREATE TABLE `Department` ( DNO INTEGER, Division VARCHAR(2), DName VARCHAR(25), Room VARCHAR(5), Building VARCHAR(13), DPhone INTEGER ); Sample rows from `Department`: (10, AS, History of Art, 268, Mergenthaler, 7117), (20, AS, Biology, 144, Mudd, 7330), (30, AS, Chemistry, 113, Remsen, 7429), CREATE TABLE `Member_of` ( FacID INTEGER REFERENCES Faculty(FacID), DNO INTEGER REFERENCES Department(DNO), Appt_Type VARCHAR(15) ); Sample rows from `Member_of`: (7792, 600, Primary), (9210, 520, Primary), (9811, 550, Primary), CREATE TABLE `Course` ( CID VARCHAR(7) PRIMARY KEY, CName VARCHAR(40), Credits INTEGER, Instructor INTEGER REFERENCES Faculty(FacID), Days VARCHAR(5), Hours VARCHAR(11), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Course`: (600.101, COMPUTER LITERACY, 3, 6112, MTW, 3, 600), (600.103, INTRODUCTION TO COMPUTER SCIENCE, 1, 4230, Th, 4, 600), (600.107, INTRO TO PROGRAMMING IN JAVA, 3, 1193, MTW, 3, 600), CREATE TABLE `Minor_in` ( StuID INTEGER REFERENCES Student(StuID), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Minor_in`: (1004, 520), (1005, 550), (1006, 50), CREATE TABLE `Enrolled_in` ( StuID INTEGER REFERENCES Student(StuID), CID VARCHAR(7) REFERENCES Course(CID), Grade VARCHAR(2) REFERENCES Gradeconversion(lettergrade) ); Sample rows from `Enrolled_in`: (1001, 550.681, A-), (1001, 600.303, B), (1001, 600.315, B+), CREATE TABLE `Gradeconversion` ( lettergrade VARCHAR(2) PRIMARY KEY, gradepoint FLOAT ); Sample rows from `Gradeconversion`: (A+, 4.0), (A, 4.0), (A-, 3.7), ",
        "output": "SELECT t3.fname ,  t3.lname ,  t2.gradepoint FROM enrolled_in as t1 JOIN gradeconversion as t2 JOIN student as t3 ON t1.grade  =  t2.lettergrade AND t1.stuid  =  t3.stuid"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the list of school locations sorted in descending order of school foundation year? ###filtered_database_schema: CREATE TABLE `school` ( School_ID INT PRIMARY KEY, School TEXT, Location TEXT, Enrollment REAL, Founded REAL, Denomination TEXT, Boys_or_Girls TEXT, Day_or_Boarding TEXT, Year_Entered_Competition REAL, School_Colors TEXT ); Sample rows from `school`: (1, St Aloysius' College, Milsons Point, 1200.0, 1879.0, Catholic, Boys, Day, 1929.0, Royal Blue and Gold), (2, Barker College, Hornsby, 2300.0, 1890.0, Anglican, Boys only to Yr 9 Co-ed Year 10 to 12, Day & Boarding, 1929.0, Red & Blue), (3, Cranbrook School, Bellevue Hill, 1000.0, 1918.0, Anglican, Boys, Day & Boarding, 1929.0, Red, White & Blue), CREATE TABLE `school_details` ( School_ID INT PRIMARY KEY REFERENCES school(School_ID), Nickname TEXT, Colors TEXT, League TEXT, Class TEXT, Division TEXT ); Sample rows from `school_details`: (1, Tigers, Blue and Yellow, DSHA, Flight A, Division 1), (2, Auks, Dark Green and White, DSHA, Flight B, Division 3), (3, Buccaneers, Garnet and White, DSHA, Fight A, Division 1), CREATE TABLE `school_performance` ( School_Id INT PRIMARY KEY REFERENCES school(School_ID), School_Year TEXT PRIMARY KEY, Class_A TEXT, Class_AA TEXT ); Sample rows from `school_performance`: (1, 1987-88, Yantis, Blanco), (1, 1988-89, Happy, Blanco), (1, 1989-90, Skidmore-Tynan, Bishop), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Player TEXT, Team TEXT, Age INT, Position TEXT, School_ID INT REFERENCES school(School_ID) ); Sample rows from `player`: (1, Timothy Beckham, Tampa Bay Devil Rays, 15, Shortstop, 1), (2, Pedro Álvarez, Pittsburgh Pirates, 14, Third baseman, 2), (3, Eric Hosmer, Kansas City Royals, 16, First Baseman, 1), ",
        "output": "SELECT location FROM school ORDER BY founded DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many papers does Christopher D. Manning have ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(DISTINCT t2.paperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the different card types, and how many transactions have been made with each? ###filtered_database_schema: CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 6, 338, Regular), (2, 14, 562, VIP), (3, 9, 162, VIP), CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(20), customer_last_name VARCHAR(20), customer_address VARCHAR(255), customer_phone VARCHAR(255), customer_email VARCHAR(255), other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Aniyah, Feest, 55975 Theodore Estates Lake Brody, VT 57078, (673)872-5338, fahey.dorian@example.com, None), (2, Susie, Wiza, 6478 Moen Isle Suite 910 Schimmelmouth, VT 96364-4898, 679-845-8645x94312, idickinson@example.com, None), (3, Marcel, Brekke, 1965 Abernathy Plains Port Lilla, LA 44867, 1-511-656-6664, nichole.rodriguez@example.com, None), CREATE TABLE `Customers_Cards` ( card_id INTEGER, customer_id INTEGER, card_type_code VARCHAR(15), card_number VARCHAR(80), date_valid_from DATETIME, date_valid_to DATETIME, other_card_details VARCHAR(255) ); Sample rows from `Customers_Cards`: (1, 14, Credit, 4560596484842, 2011-04-17 09:05:28, 2018-03-07 17:06:19, 5567915676420343), (2, 9, Credit, 4859448397570735, 2012-05-22 02:05:41, 2018-02-25 15:43:32, 4539333582760), (3, 6, Debit, 348237249146948, 2014-08-01 14:26:45, 2018-03-24 15:29:00, 4916210554814), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, previous_transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), card_id INTEGER REFERENCES Customers_Cards(card_id), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DOUBLE, transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 925, 15, 1, Payment, 2018-03-24 06:41:41, 1701.23, None, None), (2, 494, 3, 2, Refund, 2018-03-24 12:08:55, 1931.76, None, None), (3, 642, 4, 3, Payment, 2018-03-24 09:08:27, 486.56, None, None), ",
        "output": "SELECT t2.card_type_code ,  COUNT(*) FROM financial_transactions as t1 JOIN customers_cards as t2 ON t1.card_id  =  t2.card_id GROUP BY t2.card_type_code"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the biggest state in the usa ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the ids and names of stations from which at least 200 trips started. ###filtered_database_schema: CREATE TABLE `station` ( id INTEGER, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT ); Sample rows from `station`: (2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013), (3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013), (4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013), CREATE TABLE `status` ( station_id INTEGER REFERENCES station(id), bikes_available INTEGER, docks_available INTEGER, time TEXT ); Sample rows from `status`: (3, 12, 3, 2015-06-02 12:46:02), (3, 12, 3, 2015-06-02 12:47:02), (3, 12, 3, 2015-06-02 12:48:02), CREATE TABLE `trip` ( id INTEGER, duration INTEGER, start_date TEXT, start_station_name TEXT, start_station_id INTEGER, end_date TEXT, end_station_name TEXT, end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER ); Sample rows from `trip`: (900504, 384, 8/21/2015 17:03, Howard at 2nd, 63, 8/21/2015 17:10, San Francisco Caltrain 2 (330 Townsend), 69, 454, Subscriber, 94041), (900505, 588, 8/21/2015 17:03, South Van Ness at Market, 66, 8/21/2015 17:13, San Francisco Caltrain 2 (330 Townsend), 69, 574, Subscriber, 95119), (900506, 196, 8/21/2015 17:04, Market at Sansome, 77, 8/21/2015 17:07, Harry Bridges Plaza (Ferry Building), 50, 636, Subscriber, 94925), CREATE TABLE `weather` ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER ); Sample rows from `weather`: (8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107), (8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107), (8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107), ",
        "output": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the id and name of the photos for mountains? ###filtered_database_schema: CREATE TABLE `mountain` ( id INT PRIMARY KEY, name TEXT, Height REAL, Prominence REAL, Range TEXT, Country TEXT ); Sample rows from `mountain`: (1, Abune Yosef / Guliba Amba, 4260.0, 1909.0, Lasta Massif, Ethiopia), (2, Ioll / Yoll, 4220.0, 350.0, Kollo Massif, Ethiopia), (3, Bada, 4195.0, 1605.0, Arsi Mountains, Ethiopia), CREATE TABLE `camera_lens` ( id INT PRIMARY KEY, brand TEXT, name TEXT, focal_length_mm REAL, max_aperture REAL ); Sample rows from `camera_lens`: (1, Olympus, Olympus 15mm f/8.0 Body Cap, 15.0, 8.0), (2, Olympus, Olympus M.Zuiko Digital ED 45mm f/1.8, 45.0, 1.8), (3, Olympus, Olympus M.Zuiko Digital ED 75mm f/1.8, 75.0, 1.8), CREATE TABLE `photos` ( id INT PRIMARY KEY, camera_lens_id INT REFERENCES camera_lens(id), mountain_id INT REFERENCES mountain(id), color TEXT, name TEXT ); Sample rows from `photos`: (1, 1, 20, RBG, monkey), (2, 10, 2, RBG, rabbits), (3, 10, 1, Black/White, deers), ",
        "output": "SELECT t1.id ,  t1.name FROM mountain as t1 JOIN photos as t2 ON t1.id  =  t2.mountain_id WHERE t1.height  >  4000"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of students who haven't taken any Biology courses? ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT name FROM student WHERE id NOT IN (SELECT t1.id FROM takes as t1 JOIN course as t2 ON t1.course_id  =  t2.course_id WHERE t2.dept_name  =  'Biology')"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the location of the perpetrator with the largest kills. ###filtered_database_schema: CREATE TABLE `perpetrator` ( Perpetrator_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Date TEXT, Year REAL, Location TEXT, Country TEXT, Killed INT, Injured INT ); Sample rows from `perpetrator`: (1, 1, 04.26 April 26/27, 1982.0, Uiryeong, South Korea, 56, 37), (2, 3, 11.18 Nov. 18, 1995.0, Zhaodong, China, 32, 16), (3, 4, 05.21 May 21, 1938.0, Kaio, Japan, 30, 3), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Height REAL, Weight REAL, Home Town TEXT ); Sample rows from `people`: (1, Ron Baxter, 6.4, 205.0, Los Angeles, CA), (2, Brent Boyd, 6.3, 185.0, Baton Rouge, LA), (3, Tyrone Brayan, 6.7, 220.0, Placentia, CA), ",
        "output": "SELECT location FROM perpetrator ORDER BY killed DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. ###filtered_database_schema: CREATE TABLE `Movie` ( mID INT PRIMARY KEY, title TEXT, year INT, director TEXT ); Sample rows from `Movie`: (101, Gone with the Wind, 1939, Victor Fleming), (102, Star Wars, 1977, George Lucas), (103, The Sound of Music, 1965, Robert Wise), CREATE TABLE `Reviewer` ( rID INT PRIMARY KEY, name TEXT ); Sample rows from `Reviewer`: (201, Sarah Martinez), (202, Daniel Lewis), (203, Brittany Harris), CREATE TABLE `Rating` ( rID INT REFERENCES Reviewer(rID), mID INT REFERENCES Movie(mID), stars INT, ratingDate date ); Sample rows from `Rating`: (201, 101, 2, 2011-01-22), (201, 101, 4, 2011-01-27), (202, 106, 4, None), ",
        "output": "SELECT t1.title ,  t1.director FROM movie as t1 JOIN movie as t2 ON t1.director  =  t2.director WHERE t1.title != t2.title ORDER BY t1.director ,  t1.title"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what are the name of players who get more than the average points. ###filtered_database_schema: CREATE TABLE `club` ( Club_ID INT PRIMARY KEY, name TEXT, Region TEXT, Start_year TEXT ); Sample rows from `club`: (1, AIB, USA, 2009), (2, BK Slide, UK, 1998), (3, IFG, China, 2005), CREATE TABLE `club_rank` ( Rank REAL PRIMARY KEY, Club_ID INT PRIMARY KEY REFERENCES club(Club_ID), Gold REAL, Silver REAL, Bronze REAL, Total REAL ); Sample rows from `club_rank`: (1.0, 2, 11.0, 11.0, 9.0, 31.0), (2.0, 3, 8.0, 7.0, 6.0, 21.0), (3.0, 1, 7.0, 4.0, 2.0, 13.0), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, name TEXT, Position TEXT, Club_ID INT REFERENCES club(Club_ID), Apps REAL, Tries REAL, Goals TEXT, Points REAL ); Sample rows from `player`: (1, Michael Platt, Full Back, 1, 20.0, 5.0, 0, 20.0), (2, Dave Halley, Right Wing, 2, 23.0, 9.0, 0, 36.0), (3, James Evans, Right Centre, 1, 30.0, 9.0, 0, 36.0), CREATE TABLE `competition` ( Competition_ID INT PRIMARY KEY, Year REAL, Competition_type TEXT, Country TEXT ); Sample rows from `competition`: (1, 2006.0, Friendly, Italy), (2, 2006.0, Friendly, Spain), (3, 2006.0, Friendly, Australia), CREATE TABLE `competition_result` ( Competition_ID INT PRIMARY KEY REFERENCES competition(Competition_ID), Club_ID_1 INT PRIMARY KEY REFERENCES club(Club_ID), Club_ID_2 INT PRIMARY KEY REFERENCES club(Club_ID), Score TEXT ); Sample rows from `competition_result`: (1, 1, 2, 11:10), (2, 3, 2, 25:2), (10, 4, 2, 13:10), ",
        "output": "SELECT name FROM player WHERE points  >  (SELECT AVG(points) FROM player)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841. ###filtered_database_schema: CREATE TABLE `circuits` ( circuitId INTEGER, circuitRef TEXT, name TEXT, location TEXT, country TEXT, lat REAL, lng REAL, alt TEXT, url TEXT ); Sample rows from `circuits`: (1, albert_park, Albert Park Grand Prix Circuit, Melbourne, Australia, -37.8497, 144.968, 10, http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit), (2, sepang, Sepang International Circuit, Kuala Lumpur, Malaysia, 2.76083, 101.738, , http://en.wikipedia.org/wiki/Sepang_International_Circuit), (3, bahrain, Bahrain International Circuit, Sakhir, Bahrain, 26.0325, 50.5106, , http://en.wikipedia.org/wiki/Bahrain_International_Circuit), CREATE TABLE `races` ( raceId INTEGER, year INTEGER, round INTEGER, circuitId INTEGER REFERENCES circuits(circuitId), name TEXT, date TEXT, time TEXT, url TEXT ); Sample rows from `races`: (1, 2009, 1, 1, Australian Grand Prix, 2009-03-29, 06:00:00, http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix), (2, 2009, 2, 2, Malaysian Grand Prix, 2009-04-05, 09:00:00, http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix), (3, 2009, 3, 17, Chinese Grand Prix, 2009-04-19, 07:00:00, http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix), CREATE TABLE `drivers` ( driverId INTEGER, driverRef TEXT, number TEXT, code TEXT, forename TEXT, surname TEXT, dob TEXT, nationality TEXT, url TEXT ); Sample rows from `drivers`: (1, hamilton, 44, HAM, Lewis, Hamilton, 07/01/1985, British, http://en.wikipedia.org/wiki/Lewis_Hamilton), (2, heidfeld, , HEI, Nick, Heidfeld, 10/05/1977, German, http://en.wikipedia.org/wiki/Nick_Heidfeld), (3, rosberg, 6, ROS, Nico, Rosberg, 27/06/1985, German, http://en.wikipedia.org/wiki/Nico_Rosberg), CREATE TABLE `status` ( statusId INTEGER, status TEXT ); Sample rows from `status`: (1, Finished), (2, Disqualified), (3, Accident), CREATE TABLE `seasons` ( year INTEGER, url TEXT ); Sample rows from `seasons`: (1950, http://en.wikipedia.org/wiki/1950_Formula_One_season), (1951, http://en.wikipedia.org/wiki/1951_Formula_One_season), (1952, http://en.wikipedia.org/wiki/1952_Formula_One_season), CREATE TABLE `constructors` ( constructorId INTEGER, constructorRef TEXT, name TEXT, nationality TEXT, url TEXT ); Sample rows from `constructors`: (1, mclaren, McLaren, British, http://en.wikipedia.org/wiki/McLaren), (2, bmw_sauber, BMW Sauber, German, http://en.wikipedia.org/wiki/BMW_Sauber), (3, williams, Williams, British, http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering), CREATE TABLE `constructorStandings` ( constructorStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `constructorStandings`: (1, 18, 1, 14.0, 1, 1, 1), (2, 18, 2, 8.0, 3, 3, 0), (3, 18, 3, 9.0, 2, 2, 0), CREATE TABLE `results` ( resultId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, grid INTEGER, position TEXT, positionText TEXT, positionOrder INTEGER, points REAL, laps TEXT, time TEXT, milliseconds TEXT, fastestLap TEXT, rank TEXT, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId INTEGER ); Sample rows from `results`: (1, 18, 1, 1, 22, 1, 1, 1, 1, 10.0, 58, 34:50.6, 5690616, 39, 2, 01:27.5, 218.3, 1), (2, 18, 2, 2, 3, 5, 2, 2, 2, 8.0, 58, 5.478, 5696094, 41, 3, 01:27.7, 217.586, 1), (3, 18, 3, 3, 7, 7, 3, 3, 3, 6.0, 58, 8.163, 5698779, 41, 5, 01:28.1, 216.719, 1), CREATE TABLE `driverStandings` ( driverStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `driverStandings`: (1, 18, 1, 10.0, 1, 1, 1), (2, 18, 2, 8.0, 2, 2, 0), (3, 18, 3, 6.0, 3, 3, 0), CREATE TABLE `constructorResults` ( constructorResultsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, status TEXT ); Sample rows from `constructorResults`: (1, 18, 1, 14.0, NULL), (2, 18, 2, 8.0, NULL), (3, 18, 3, 9.0, NULL), CREATE TABLE `qualifying` ( qualifyId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, position INTEGER, q1 TEXT, q2 TEXT, q3 TEXT ); Sample rows from `qualifying`: (1, 18, 1, 1, 22, 1, 1:26.572, 1:25.187, 1:26.714), (2, 18, 9, 2, 4, 2, 1:26.103, 1:25.315, 1:26.869), (3, 18, 5, 1, 23, 3, 1:25.664, 1:25.452, 1:27.079), CREATE TABLE `pitStops` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), stop INTEGER PRIMARY KEY, lap INTEGER, time TEXT, duration TEXT, milliseconds INTEGER ); CREATE TABLE `lapTimes` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), lap INTEGER PRIMARY KEY, position INTEGER, time TEXT, milliseconds INTEGER ); ",
        "output": "SELECT DISTINCT driverid ,  stop FROM pitstops WHERE duration  <  (SELECT MAX(duration) FROM pitstops WHERE raceid  =  841)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: citations for Daniel Jurafsky ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM paper as t3 JOIN cite as t4 ON t3.paperid  =  t4.citingpaperid JOIN writes as t2 ON t2.paperid  =  t4.citedpaperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which position is most popular among players in the tryout? ###filtered_database_schema: CREATE TABLE `College` ( cName varchar(20) PRIMARY KEY, state varchar(2), enr numeric(5,0) ); Sample rows from `College`: (LSU, LA, 18000), (ASU, AZ, 12000), (OU, OK, 22000), CREATE TABLE `Player` ( pID numeric(5,0) PRIMARY KEY, pName varchar(20), yCard varchar(3), HS numeric(5,0) ); Sample rows from `Player`: (10001, Andrew, no, 1200), (20002, Blake, no, 1600), (30003, Charles, no, 300), CREATE TABLE `Tryout` ( pID numeric(5,0) PRIMARY KEY REFERENCES Player(pID), cName varchar(20) PRIMARY KEY REFERENCES College(cName), pPos varchar(8), decision varchar(3) ); Sample rows from `Tryout`: (10001, LSU, goalie, no), (10001, ASU, goalie, yes), (20002, FSU, striker, yes), ",
        "output": "SELECT ppos FROM tryout GROUP BY ppos ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the total amount of products ordered before 2018-03-17 07:13:53. ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_content VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), other_address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 9443 Boyle Route Suite 857, Lucasville, 416, Colorado, USA, None), (2, 1969 Jabari Port Suite 393, New Sabryna, 721, SouthCarolina, USA, None), (3, 295 Hackett Curve, Reingertown, 255, NewJersey, USA, None), CREATE TABLE `Products` ( product_id INTEGER, product_details VARCHAR(255) ); Sample rows from `Products`: (1, Americano), (2, Dove Chocolate), (3, Latte), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method VARCHAR(15), customer_name VARCHAR(80), date_became_customer DATETIME, other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Cash, Dr. Julia Wuckert MD, 2018-03-01 23:20:10, None), (2, Cheque, Tillman Ernser, 2018-02-28 11:37:44, None), (3, Credit Card, Rodrick Heaney, 2018-03-09 17:41:58, None), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_address_from DATETIME, address_type VARCHAR(15), date_address_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 11, 1985-03-29 20:31:43, Billing, 1993-02-17 17:55:18), (13, 11, 2010-08-25 04:24:35, Billing, 1972-02-17 22:23:38), (2, 14, 2010-12-26 08:52:50, Residential, 1979-07-16 18:22:39), CREATE TABLE `Customer_Contact_Channels` ( customer_id INTEGER REFERENCES Customers(customer_id), channel_code VARCHAR(15), active_from_date DATETIME, active_to_date DATETIME, contact_number VARCHAR(50) ); Sample rows from `Customer_Contact_Channels`: (9, Email, 2017-12-07 18:18:15, 2018-03-23 13:37:14, 940.035.6435x0225), (2, Email, 2017-04-07 04:51:41, 2018-03-23 01:30:52, 189.449.8326x7607), (9, Email, 2017-05-25 16:08:45, 2018-03-13 07:32:25, 958-653-2640), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(15), order_date DATETIME, order_details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 15, Cancelled, 2018-03-21 11:20:46, None), (2, 3, Cancelled, 2018-03-05 06:35:33, None), (3, 5, Delivered, 2018-03-04 07:16:22, Second time), CREATE TABLE `Order_Items` ( order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), order_quantity VARCHAR(15) ); Sample rows from `Order_Items`: (14, 2, 5), (5, 2, 9), (14, 3, 2), ",
        "output": "SELECT SUM(t2.order_quantity) FROM customer_orders as t1 JOIN order_items as t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: From the trip record, find the number of unique bikes. ###filtered_database_schema: CREATE TABLE `station` ( id INTEGER, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT ); Sample rows from `station`: (2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013), (3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013), (4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013), CREATE TABLE `status` ( station_id INTEGER REFERENCES station(id), bikes_available INTEGER, docks_available INTEGER, time TEXT ); Sample rows from `status`: (3, 12, 3, 2015-06-02 12:46:02), (3, 12, 3, 2015-06-02 12:47:02), (3, 12, 3, 2015-06-02 12:48:02), CREATE TABLE `trip` ( id INTEGER, duration INTEGER, start_date TEXT, start_station_name TEXT, start_station_id INTEGER, end_date TEXT, end_station_name TEXT, end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER ); Sample rows from `trip`: (900504, 384, 8/21/2015 17:03, Howard at 2nd, 63, 8/21/2015 17:10, San Francisco Caltrain 2 (330 Townsend), 69, 454, Subscriber, 94041), (900505, 588, 8/21/2015 17:03, South Van Ness at Market, 66, 8/21/2015 17:13, San Francisco Caltrain 2 (330 Townsend), 69, 574, Subscriber, 95119), (900506, 196, 8/21/2015 17:04, Market at Sansome, 77, 8/21/2015 17:07, Harry Bridges Plaza (Ferry Building), 50, 636, Subscriber, 94925), CREATE TABLE `weather` ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER ); Sample rows from `weather`: (8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107), (8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107), (8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107), ",
        "output": "SELECT COUNT(DISTINCT bike_id) FROM trip"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which country has at most 3 stadiums listed? ###filtered_database_schema: CREATE TABLE `swimmer` ( ID INT PRIMARY KEY, name TEXT, Nationality TEXT, meter_100 REAL, meter_200 TEXT, meter_300 TEXT, meter_400 TEXT, meter_500 TEXT, meter_600 TEXT, meter_700 TEXT, Time TEXT ); Sample rows from `swimmer`: (7, Przemysław Stańczyk, Poland, 57.31, 1:57.10, 2:56.02, 3:55.36, 4:54.21, 5:52.59, 6:50.91, 7:47.91), (4, Craig Stevens, Australia, 57.35, 1:56.34, 2:55.90, 3:55.72, 4:55.08, 5:54.45, 6:52.69, 7:48.67), (5, Federico Colbertaldo, Italy, 57.66, 1:56.77, 2:56.04, 3:55.37, 4:54.48, 5:53.53, 6:52.58, 7:49.98), CREATE TABLE `stadium` ( ID INT PRIMARY KEY, name TEXT, Capacity INT, City TEXT, Country TEXT, Opening_year INT ); Sample rows from `stadium`: (1, Nou Mestalla, 75000, Valencia, Spain, 2004), (2, Gazprom Arena, 69501, Saint Petersburg, Russia, 2005), (3, Baku Olympic Stadium, 68000, Baku, Azerbaijan, 2005), CREATE TABLE `event` ( ID INT PRIMARY KEY, Name TEXT, Stadium_ID INT REFERENCES stadium(ID), Year TEXT ); Sample rows from `event`: (1, FINA, 1, 2016), (2, Pacific, 10, 2011), (3, World Master, 2, 2012), CREATE TABLE `record` ( ID INT, Result TEXT, Swimmer_ID INT PRIMARY KEY REFERENCES swimmer(ID), Event_ID INT PRIMARY KEY REFERENCES event(ID) ); Sample rows from `record`: (1, NC, 1, 1), (2, Win, 1, 2), (3, Loss, 3, 3), ",
        "output": "SELECT country FROM stadium GROUP BY country HAVING COUNT(*)  <=  3"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all the subjects. ###filtered_database_schema: CREATE TABLE `Course_Authors_and_Tutors` ( author_id INTEGER, author_tutor_ATB VARCHAR(3), login_name VARCHAR(40), password VARCHAR(40), personal_name VARCHAR(80), middle_name VARCHAR(80), family_name VARCHAR(80), gender_mf VARCHAR(1), address_line_1 VARCHAR(80) ); Sample rows from `Course_Authors_and_Tutors`: (1, 331, jmckenzie, c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b, Cathrine, Ruthie, Grant, 0, 756 Monahan Mews Spinkashire, NJ 64230-5098), (2, 975, heidenreich.ara, 24b0ee84063c3b017ab1839e01b7280f47f7c7c2, Retha, Corene, Armstrong, 0, 98623 Huels Manor Jasttown, DE 31611), (3, 349, clementina29, cdaf6c3483f19e2253659a40a3aab786a3390f78, Darius, Ethyl, Reichel, 0, 99296 Keeling Courts North Audreanne, IL 28272), CREATE TABLE `Students` ( student_id INTEGER, date_of_registration DATETIME, date_of_latest_logon DATETIME, login_name VARCHAR(40), password VARCHAR(10), personal_name VARCHAR(40), middle_name VARCHAR(40), family_name VARCHAR(40) ); Sample rows from `Students`: (1, 2015-07-22 13:32:35, 2017-10-17 22:52:26, annamae.hoppe, db8765bb6f, Wilson, Aubrey, Ward), (2, 2015-07-02 00:21:42, 2017-06-24 22:16:27, wmiller, 35faf8182a, Karson, Luella, Jaskolski), (3, 2015-10-11 03:23:27, 2018-03-10 23:22:23, ahartmann, 8e064ec4e6, Mariela, Brandt, Legros), CREATE TABLE `Subjects` ( subject_id INTEGER, subject_name VARCHAR(120) ); Sample rows from `Subjects`: (1, Computer Science), (2, Arts), (3, Language), CREATE TABLE `Courses` ( course_id INTEGER, author_id INTEGER REFERENCES Course_Authors_and_Tutors(author_id), subject_id INTEGER REFERENCES Subjects(subject_id), course_name VARCHAR(120), course_description VARCHAR(255) ); Sample rows from `Courses`: (1, 8, 1, database, database), (2, 6, 1, advanced database, advanced database), (3, 15, 1, operating system, operating system), CREATE TABLE `Student_Course_Enrolment` ( registration_id INTEGER, student_id INTEGER REFERENCES Students(student_id), course_id INTEGER REFERENCES Courses(course_id), date_of_enrolment DATETIME, date_of_completion DATETIME ); Sample rows from `Student_Course_Enrolment`: (1, 11, 2, 2017-10-09 07:09:02, 2018-02-26 07:48:52), (2, 15, 4, 2017-11-13 12:49:33, 2018-03-04 01:24:56), (3, 10, 8, 2017-10-17 13:50:40, 2018-03-22 02:53:01), CREATE TABLE `Student_Tests_Taken` ( registration_id INTEGER REFERENCES Student_Course_Enrolment(registration_id), date_test_taken DATETIME, test_result VARCHAR(255) ); Sample rows from `Student_Tests_Taken`: (12, 2018-03-25 03:27:16, Fail), (10, 2018-03-25 21:50:22, Pass), (7, 2018-03-21 00:32:25, Pass), ",
        "output": "SELECT subject_name FROM subjects"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the number of papers published in the VLDB conference before 2000 . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT COUNT(DISTINCT t2.title) FROM publication as t2 JOIN conference as t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  <  2000;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids and locations of all circuits in France or Belgium? ###filtered_database_schema: CREATE TABLE `circuits` ( circuitId INTEGER, circuitRef TEXT, name TEXT, location TEXT, country TEXT, lat REAL, lng REAL, alt TEXT, url TEXT ); Sample rows from `circuits`: (1, albert_park, Albert Park Grand Prix Circuit, Melbourne, Australia, -37.8497, 144.968, 10, http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit), (2, sepang, Sepang International Circuit, Kuala Lumpur, Malaysia, 2.76083, 101.738, , http://en.wikipedia.org/wiki/Sepang_International_Circuit), (3, bahrain, Bahrain International Circuit, Sakhir, Bahrain, 26.0325, 50.5106, , http://en.wikipedia.org/wiki/Bahrain_International_Circuit), CREATE TABLE `races` ( raceId INTEGER, year INTEGER, round INTEGER, circuitId INTEGER REFERENCES circuits(circuitId), name TEXT, date TEXT, time TEXT, url TEXT ); Sample rows from `races`: (1, 2009, 1, 1, Australian Grand Prix, 2009-03-29, 06:00:00, http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix), (2, 2009, 2, 2, Malaysian Grand Prix, 2009-04-05, 09:00:00, http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix), (3, 2009, 3, 17, Chinese Grand Prix, 2009-04-19, 07:00:00, http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix), CREATE TABLE `drivers` ( driverId INTEGER, driverRef TEXT, number TEXT, code TEXT, forename TEXT, surname TEXT, dob TEXT, nationality TEXT, url TEXT ); Sample rows from `drivers`: (1, hamilton, 44, HAM, Lewis, Hamilton, 07/01/1985, British, http://en.wikipedia.org/wiki/Lewis_Hamilton), (2, heidfeld, , HEI, Nick, Heidfeld, 10/05/1977, German, http://en.wikipedia.org/wiki/Nick_Heidfeld), (3, rosberg, 6, ROS, Nico, Rosberg, 27/06/1985, German, http://en.wikipedia.org/wiki/Nico_Rosberg), CREATE TABLE `status` ( statusId INTEGER, status TEXT ); Sample rows from `status`: (1, Finished), (2, Disqualified), (3, Accident), CREATE TABLE `seasons` ( year INTEGER, url TEXT ); Sample rows from `seasons`: (1950, http://en.wikipedia.org/wiki/1950_Formula_One_season), (1951, http://en.wikipedia.org/wiki/1951_Formula_One_season), (1952, http://en.wikipedia.org/wiki/1952_Formula_One_season), CREATE TABLE `constructors` ( constructorId INTEGER, constructorRef TEXT, name TEXT, nationality TEXT, url TEXT ); Sample rows from `constructors`: (1, mclaren, McLaren, British, http://en.wikipedia.org/wiki/McLaren), (2, bmw_sauber, BMW Sauber, German, http://en.wikipedia.org/wiki/BMW_Sauber), (3, williams, Williams, British, http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering), CREATE TABLE `constructorStandings` ( constructorStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `constructorStandings`: (1, 18, 1, 14.0, 1, 1, 1), (2, 18, 2, 8.0, 3, 3, 0), (3, 18, 3, 9.0, 2, 2, 0), CREATE TABLE `results` ( resultId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, grid INTEGER, position TEXT, positionText TEXT, positionOrder INTEGER, points REAL, laps TEXT, time TEXT, milliseconds TEXT, fastestLap TEXT, rank TEXT, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId INTEGER ); Sample rows from `results`: (1, 18, 1, 1, 22, 1, 1, 1, 1, 10.0, 58, 34:50.6, 5690616, 39, 2, 01:27.5, 218.3, 1), (2, 18, 2, 2, 3, 5, 2, 2, 2, 8.0, 58, 5.478, 5696094, 41, 3, 01:27.7, 217.586, 1), (3, 18, 3, 3, 7, 7, 3, 3, 3, 6.0, 58, 8.163, 5698779, 41, 5, 01:28.1, 216.719, 1), CREATE TABLE `driverStandings` ( driverStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `driverStandings`: (1, 18, 1, 10.0, 1, 1, 1), (2, 18, 2, 8.0, 2, 2, 0), (3, 18, 3, 6.0, 3, 3, 0), CREATE TABLE `constructorResults` ( constructorResultsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, status TEXT ); Sample rows from `constructorResults`: (1, 18, 1, 14.0, NULL), (2, 18, 2, 8.0, NULL), (3, 18, 3, 9.0, NULL), CREATE TABLE `qualifying` ( qualifyId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, position INTEGER, q1 TEXT, q2 TEXT, q3 TEXT ); Sample rows from `qualifying`: (1, 18, 1, 1, 22, 1, 1:26.572, 1:25.187, 1:26.714), (2, 18, 9, 2, 4, 2, 1:26.103, 1:25.315, 1:26.869), (3, 18, 5, 1, 23, 3, 1:25.664, 1:25.452, 1:27.079), CREATE TABLE `pitStops` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), stop INTEGER PRIMARY KEY, lap INTEGER, time TEXT, duration TEXT, milliseconds INTEGER ); CREATE TABLE `lapTimes` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), lap INTEGER PRIMARY KEY, position INTEGER, time TEXT, milliseconds INTEGER ); ",
        "output": "SELECT circuitid ,  location FROM circuits WHERE country = \"France\" OR country = \"Belgium\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the email of the student with first name \"Emma\" and last name \"Rohan\"? ###filtered_database_schema: CREATE TABLE `Ref_Address_Types` ( address_type_code VARCHAR(15) PRIMARY KEY, address_type_description VARCHAR(80) ); Sample rows from `Ref_Address_Types`: (BILL, Billing), (HOME, Home or Residence), CREATE TABLE `Ref_Detention_Type` ( detention_type_code VARCHAR(10) PRIMARY KEY, detention_type_description VARCHAR(80) ); Sample rows from `Ref_Detention_Type`: (BREAK , During Break time), (AFTER, After School), (LUNCH, Lunch-time), CREATE TABLE `Ref_Incident_Type` ( incident_type_code VARCHAR(10) PRIMARY KEY, incident_type_description VARCHAR(80) ); Sample rows from `Ref_Incident_Type`: (NOISE, Noise), (VIOLENCE, Violence), (DISTURB, Disturbance), CREATE TABLE `Addresses` ( address_id INTEGER, line_1 VARCHAR(120), line_2 VARCHAR(120), line_3 VARCHAR(120), city VARCHAR(80), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), other_address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 020 Orie Canyon, None, None, North Loyceville, 197, Hawaii, USA, None), (2, 1333 Boyle Lane, None, None, West Sean, 937, Illinois, USA, None), (3, 027 Kim Divide Apt. 492, None, None, Beierview, 918, Texas, USA, None), CREATE TABLE `Students` ( student_id INTEGER, address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(40), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), date_first_rental DATETIME, date_left_university DATETIME, other_student_details VARCHAR(255) ); Sample rows from `Students`: (1, 19, Emma, Frederic, Rohan, 235.899.9744, derrick.jenkins@example.com, 2017-12-05 15:20:04, 2018-03-03 03:33:05, None), (2, 9, Louvenia, Fatima, Hansen, 1-247-673-8446, rohan.clarabelle@example.org, 2017-08-08 22:30:36, 2018-02-24 11:12:11, None), (3, 10, Rhea, Gardner, Bergnaum, 1-751-162-9676x115, kkirlin@example.org, 2017-11-15 04:57:28, 2018-03-19 12:49:20, None), CREATE TABLE `Teachers` ( teacher_id INTEGER, address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(80), last_name VARCHAR(80), gender VARCHAR(1), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), other_details VARCHAR(255) ); Sample rows from `Teachers`: (1, 15, Lyla, Wilson, Medhurst, 1, 792.333.7714, ohammes@example.com, None), (2, 7, Sid, Tremayne, Brakus, 1, 202.626.1698x9242, deborah37@example.com, None), (3, 8, Trystan, Alexane, Schuster, 1, 583-467-0403x647, hilll.kitty@example.com, None), CREATE TABLE `Assessment_Notes` ( notes_id INTEGER, student_id INTEGER REFERENCES Students(student_id), teacher_id INTEGER REFERENCES Teachers(teacher_id), date_of_notes DATETIME, text_of_notes VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Assessment_Notes`: (1, 7, 3, 1978-04-15 04:49:18, None, None), (2, 11, 10, 2005-06-30 02:48:35, None, None), (3, 15, 3, 1988-06-09 00:24:01, None, None), CREATE TABLE `Behavior_Incident` ( incident_id INTEGER, incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code), student_id INTEGER REFERENCES Students(student_id), date_incident_start DATETIME, date_incident_end DATETIME, incident_summary VARCHAR(255), recommendations VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Behavior_Incident`: (1, NOISE, 6, 2017-07-09 10:04:13, 2018-03-08 14:08:54, None, None, None), (2, DISTURB, 13, 2018-01-31 10:51:13, 2018-03-18 18:40:05, None, None, None), (3, VIOLENCE, 1, 2017-10-10 22:43:54, 2018-03-22 02:10:35, None, Transfer schools, None), CREATE TABLE `Detention` ( detention_id INTEGER, detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code), teacher_id INTEGER REFERENCES Teachers(teacher_id), datetime_detention_start DATETIME, datetime_detention_end DATETIME, detention_summary VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Detention`: (1, AFTER, 7, 2017-09-05 00:38:25, 2018-03-08 02:08:32, None, None), (2, AFTER, 14, 2018-01-10 08:09:02, 2018-03-07 04:24:48, None, None), (3, BREAK , 11, 2017-12-14 06:40:29, 2018-03-08 09:16:38, None, None), CREATE TABLE `Student_Addresses` ( student_id INTEGER REFERENCES Students(student_id), address_id INTEGER REFERENCES Addresses(address_id), date_address_from DATETIME, date_address_to DATETIME, monthly_rental DECIMAL(19,4), other_details VARCHAR(255) ); Sample rows from `Student_Addresses`: (6, 12, 2017-10-16 13:56:34, 2018-03-15 10:37:19, 826.4319, house), (3, 18, 2017-06-19 12:39:39, 2018-03-02 00:19:57, 1113.0996, house), (8, 1, 2017-10-31 12:40:34, 2018-02-25 05:21:34, 1297.3186, apartment), CREATE TABLE `Students_in_Detention` ( student_id INTEGER REFERENCES Students(student_id), detention_id INTEGER REFERENCES Detention(detention_id), incident_id INTEGER REFERENCES Behavior_Incident(incident_id) ); Sample rows from `Students_in_Detention`: (3, 15, 1), (8, 13, 3), (11, 6, 11), ",
        "output": "SELECT email_address FROM students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the id of instructors who didn't teach any courses? ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the name of artworks whose type is not \"Program Talent Show\". ###filtered_database_schema: CREATE TABLE `festival_detail` ( Festival_ID INT PRIMARY KEY, Festival_Name TEXT, Chair_Name TEXT, Location TEXT, Year INT, Num_of_Audience INT ); Sample rows from `festival_detail`: (1, Panasonic Awards, Raymond Floyd, United States, 2006, 152), (2, Flower Awards, Charles Coody, United States, 2007, 155), (3, Cherry Awards, Doug Ford, United States, 2007, 160), CREATE TABLE `artwork` ( Artwork_ID INT PRIMARY KEY, Type TEXT, Name TEXT ); Sample rows from `artwork`: (1, Program Music/Variety Show, Indonesian Idol), (2, Program Music/Variety Show, I Know), (3, Presenter Music/Variety Show, Loving you), CREATE TABLE `nomination` ( Artwork_ID INT PRIMARY KEY REFERENCES artwork(Artwork_ID), Festival_ID INT PRIMARY KEY REFERENCES festival_detail(Festival_ID), Result TEXT ); Sample rows from `nomination`: (1, 2, Nominated), (2, 2, Won), (3, 1, Nominated), ",
        "output": "SELECT name FROM artwork WHERE type != \"Program Talent Show\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the city the store named \"FJA Filming\" is in. ###filtered_database_schema: CREATE TABLE `Ref_Payment_Methods` ( payment_method_code CHAR(10) PRIMARY KEY, payment_method_description VARCHAR(80) ); Sample rows from `Ref_Payment_Methods`: (American E, credit), (MasterCard, debit), (Visa, Visa), CREATE TABLE `Ref_Service_Types` ( Service_Type_Code CHAR(15) PRIMARY KEY, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255) ); Sample rows from `Ref_Service_Types`: (1, 1, provide photo service), (2, 1, provide dinning service), (3, 1, provide filming service), CREATE TABLE `Addresses` ( Address_ID VARCHAR(100) PRIMARY KEY, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Addresses`: (110, 4753 Dach Highway, Suite 846, Feliciaberg, Florida, None), (124, 391 Vandervort Fall Apt. 446, Apt. 107, West Sherwoodstad, Indiana, None), (148, 809 Izabella Islands, Suite 271, Schadenville, Ohio, None), CREATE TABLE `Products` ( Product_ID VARCHAR(100) PRIMARY KEY, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Products`: (11, photo, 4448536, None, None), (154, film, 2302, None, None), (156, film, 17622723, None, None), CREATE TABLE `Marketing_Regions` ( Marketing_Region_Code CHAR(15) PRIMARY KEY, Marketing_Region_Name VARCHAR(255), Marketing_Region_Descriptrion VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Marketing_Regions`: (CA, Canada, Our target market, None), (CN, China, Our largest market, None), (ES, Spain, , None), CREATE TABLE `Clients` ( Client_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Clients`: (423, 201, branson94@example.net, Clifford, (042)912-3404x5135, VIP), (426, 383, alba04@example.com, Bettye, (604)849-0214, None), (478, 15, westley30@example.net, Reinhold, 1-048-214-4640x64380, None), CREATE TABLE `Drama_Workshop_Groups` ( Workshop_Group_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Currency_Code CHAR(15), Marketing_Region_Code CHAR(15), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Drama_Workshop_Groups`: (136, 383, EU, FR, Amely Cafe, 122-084-8029, amely.ruecker@example.com, None), (140, 180, EU, DE, Veda Film, 793-966-9311x5303, breitenberg.veda@example.com, None), (176, 286, EU, RU, Queen Art, 492-463-5967, quigley.queen@example.org, Good), CREATE TABLE `Performers` ( Performer_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Performers`: (153, 124, Shawna, 664.495.1939, krogahn@example.com, None), (211, 124, Ashley, 893-536-8857, preston45@example.net, None), (313, 39, Oren, 1-952-052-6685x28082, ferry.carolina@example.net, None), CREATE TABLE `Customers` ( Customer_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Customers`: (240, 286, Harold, 624-096-7791, jerde.harmon@example.com, None), (267, 98, Federico, 914-915-7483, johnson27@example.com, None), (304, 369, Samson, 1-463-121-4086x655, dalton75@example.com, None), CREATE TABLE `Stores` ( Store_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Marketing_Region_Code CHAR(15) REFERENCES Marketing_Regions(Marketing_Region_Code), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Stores`: (150, 286, IN, FJA Filming, +65(1)3590790358, fjacobson@example.com, None), (229, 266, CA, Rob Dinning, 1-327-185-9368, rborer@example.org, 5 stars), (231, 230, ES, Adan Dinning, 896-931-9633x869, adan93@example.com, None), CREATE TABLE `Bookings` ( Booking_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Clients(Client_ID), Workshop_Group_ID VARCHAR(100) REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Status_Code CHAR(15), Store_ID INTEGER, Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Bookings`: (1, 938, 140, good, 8, 2016-12-12 10:43:01, 2013-03-10 18:47:05, 1997-11-21 10:07:40, None), (2, 868, 838, stop, 7, 1976-08-20 00:33:08, 2009-07-09 09:18:38, 1976-01-08 07:19:23, None), (3, 735, 176, good, 9, 1975-11-23 06:28:47, 1989-01-05 19:24:45, 1990-03-16 19:38:47, None), CREATE TABLE `Performers_in_Bookings` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Performer_ID INTEGER PRIMARY KEY REFERENCES Performers(Performer_ID) ); Sample rows from `Performers_in_Bookings`: (1, 153), (1, 341), (2, 466), CREATE TABLE `Customer_Orders` ( Order_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Store_ID INTEGER REFERENCES Stores(Store_ID), Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 516, 231, 1994-08-03 12:34:58, 1977-03-11 03:58:19, 1992-07-21 22:11:11, None), (2, 418, 229, 2014-07-10 10:56:01, 1996-08-26 19:19:59, 1998-08-22 17:57:32, None), (3, 712, 229, 1981-06-20 16:29:43, 1980-12-19 05:49:35, 2011-04-13 07:15:35, None), CREATE TABLE `Order_Items` ( Order_Item_ID INTEGER, Order_ID INTEGER REFERENCES Customer_Orders(Order_ID), Product_ID INTEGER REFERENCES Products(Product_ID), Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 3, 233, 1, None), (2, 15, 300, 2, None), (3, 12, 300, 1, None), CREATE TABLE `Invoices` ( Invoice_ID INTEGER, Order_ID INTEGER REFERENCES Bookings(Booking_ID) REFERENCES Customer_Orders(Order_ID), payment_method_code CHAR(15) REFERENCES Ref_Payment_Methods(payment_method_code), Product_ID INTEGER, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER ); Sample rows from `Invoices`: (128, 14, MasterCard, 4, 2, None, 1), (162, 13, MasterCard, 9, 2, None, 9), (164, 7, Visa, 7, 2, None, 1), CREATE TABLE `Services` ( Service_ID INTEGER PRIMARY KEY, Service_Type_Code CHAR(15) REFERENCES Ref_Service_Types(Service_Type_Code), Workshop_Group_ID INTEGER REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Services`: (191, 1, 415, None, film, 58932775.8822, None), (219, 2, 838, None, film, 2704.4719, None), (220, 1, 708, None, dinning, 6888.8306, None), CREATE TABLE `Bookings_Services` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Product_ID INTEGER PRIMARY KEY REFERENCES Services(Service_ID) ); Sample rows from `Bookings_Services`: (1, 396), (1, 779), (4, 191), CREATE TABLE `Invoice_Items` ( Invoice_Item_ID INTEGER, Invoice_ID INTEGER REFERENCES Invoices(Invoice_ID), Order_ID INTEGER REFERENCES Bookings_Services(Order_ID), Order_Item_ID INTEGER REFERENCES Order_Items(Order_Item_ID), Product_ID INTEGER REFERENCES Bookings_Services(Product_ID), Order_Quantity INTEGER, Other_Item_Details VARCHAR(255) ); Sample rows from `Invoice_Items`: (1, 128, 1, 5, 396, 2, None), (2, 162, 4, 6, 191, 6, Good quality), ",
        "output": "SELECT t1.city_town FROM addresses as t1 JOIN stores as t2 ON t1.address_id  =  t2.address_id WHERE t2.store_name  =  \"FJA Filming\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What instrument is used the most? ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the name of the instructor who is in Statistics department and earns the lowest salary? ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many different teams have had eliminated wrestlers? ###filtered_database_schema: CREATE TABLE `wrestler` ( Wrestler_ID INT PRIMARY KEY, Name TEXT, Reign TEXT, Days_held TEXT, Location TEXT, Event TEXT ); Sample rows from `wrestler`: (1, Rey Misterio Sr., 1, 344, Tijuana , Mexico, Live event), (2, Fishman, 1, 113, Tijuana , Mexico, Live event), (3, Villaño IV, 1, 1285, Tijuana , Mexico, Live event), CREATE TABLE `Elimination` ( Elimination_ID TEXT PRIMARY KEY, Wrestler_ID TEXT REFERENCES wrestler(Wrestler_ID), Team TEXT, Eliminated_By TEXT, Elimination_Move TEXT, Time TEXT ); Sample rows from `Elimination`: (1, 1, Team Orton, Punk, Go To Sleep, 00:11), (2, 2, Team Batista, Benjamin, Paydirt, 07:38), (3, 4, Team Batista, Orton, Rope hung DDT, 10:45), ",
        "output": "SELECT COUNT(DISTINCT team) FROM elimination"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many customers live in Prague city? ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT COUNT(*) FROM customers WHERE city = \"Prague\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name and checking balance of the account with the lowest savings balance. ###filtered_database_schema: CREATE TABLE `ACCOUNTS` ( custid BIGINT PRIMARY KEY, name VARCHAR(64) ); Sample rows from `ACCOUNTS`: (1, Brown), (2, Wang), (3, O'mahony), CREATE TABLE `SAVINGS` ( custid BIGINT PRIMARY KEY REFERENCES ACCOUNTS(custid), balance FLOAT ); Sample rows from `SAVINGS`: (1, 200000.0), (2, 999999999.0), (3, 230000.0), CREATE TABLE `CHECKING` ( custid BIGINT PRIMARY KEY REFERENCES ACCOUNTS(custid), balance FLOAT ); Sample rows from `CHECKING`: (1, 10000.0), (2, 2000.0), (3, 3000.0), ",
        "output": "SELECT t1.name ,  t2.balance FROM accounts as t1 JOIN checking as t2 ON t1.custid  =  t2.custid JOIN savings as t3 ON t1.custid  =  t3.custid ORDER BY t3.balance LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the cities that have a branch that opened in 2001 and a branch with more than 100 members? ###filtered_database_schema: CREATE TABLE `member` ( Member_ID INT PRIMARY KEY, Card_Number TEXT, Name TEXT, Hometown TEXT, Level INT ); Sample rows from `member`: (1, LE99, Jeremy Jarmon, Collierville, Tennessee, 6), (2, LT98, Myron Pryor, Louisville, Kentucky, 6), (3, RT91, Corey Peters, Louisville, Kentucky, 6), CREATE TABLE `branch` ( Branch_ID INT PRIMARY KEY, Name TEXT, Open_year TEXT, Address_road TEXT, City TEXT, membership_amount TEXT ); Sample rows from `branch`: (1, Alexandre, 2001, Valleys Place, London, 112), (2, Popert, 2009, Oaks Crescent, London, 11), (3, Stanley, 2013, Abbott Street, London, 6), CREATE TABLE `membership_register_branch` ( Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Branch_ID TEXT REFERENCES branch(Branch_ID), Register_Year TEXT ); Sample rows from `membership_register_branch`: (1, 1, 2016), (2, 4, 2016), (3, 1, 2017), CREATE TABLE `purchase` ( Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Branch_ID TEXT PRIMARY KEY REFERENCES branch(Branch_ID), Year TEXT PRIMARY KEY, Total_pounds REAL ); Sample rows from `purchase`: (1, 3, 2018, 2013.32), (2, 5, 2018, 321.13), (3, 1, 2017, 988.09), ",
        "output": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many students are there? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Club` ( ClubID INTEGER, ClubName VARCHAR(40), ClubDesc VARCHAR(1024), ClubLocation VARCHAR(40) ); Sample rows from `Club`: (1, Bootup Baltimore, Refurbish computers; teach kids and adults about computer basics., AKW), (2, Hopkins Student Enterprises, Venture capital fund for student business., AKW), (3, Pen and Paper Gaming, Play pen and paper games on campus., HHH), CREATE TABLE `Member_of_club` ( StuID INTEGER REFERENCES Student(StuID), ClubID INTEGER REFERENCES Club(ClubID), Position VARCHAR(40) ); Sample rows from `Member_of_club`: (1001, 1, President), (1007, 4, Vice-President), (1008, 2, CTO), ",
        "output": "SELECT COUNT(*) FROM student"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Give the average number of working horses on farms with more than 5000 total horses. ###filtered_database_schema: CREATE TABLE `city` ( City_ID INT PRIMARY KEY, Official_Name TEXT, Status TEXT, Area_km_2 REAL, Population REAL, Census_Ranking TEXT ); Sample rows from `city`: (1, Grand Falls/Grand-Sault, Town, 18.06, 5706.0, 636 of 5008), (2, Perth-Andover, Village, 8.89, 1778.0, 1442 of 5,008), (3, Plaster Rock, Village, 3.09, 1135.0, 1936 of 5,008), CREATE TABLE `farm` ( Farm_ID INT PRIMARY KEY, Year INT, Total_Horses REAL, Working_Horses REAL, Total_Cattle REAL, Oxen REAL, Bulls REAL, Cows REAL, Pigs REAL, Sheep_and_Goats REAL ); Sample rows from `farm`: (1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8), CREATE TABLE `farm_competition` ( Competition_ID INT PRIMARY KEY, Year INT, Theme TEXT, Host_city_ID INT REFERENCES city(City_ID), Hosts TEXT ); Sample rows from `farm_competition`: (1, 2013, Carnival M is back!, 1, Miley Cyrus Jared Leto and Karen Mok), (2, 2006, Codehunters, 2, Leehom Wang and Kelly Rowland), (3, 2005, MTV Asia Aid, 3, Alicia Keys), CREATE TABLE `competition_record` ( Competition_ID INT PRIMARY KEY REFERENCES farm_competition(Competition_ID), Farm_ID INT PRIMARY KEY REFERENCES farm(Farm_ID), Rank INT ); Sample rows from `competition_record`: (1, 8, 1), (1, 2, 2), (1, 3, 3), ",
        "output": "SELECT AVG(working_horses) FROM farm WHERE total_horses  >  5000"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many different services are provided by all stations? ###filtered_database_schema: CREATE TABLE `train` ( id INT PRIMARY KEY, train_number INT, name TEXT, origin TEXT, destination TEXT, time TEXT, interval TEXT ); Sample rows from `train`: (1, 16724, Ananthapuri Express, Trivandrum, Chennai, 17:15, Daily), (2, 16127, Guruvayur Express, Chennai, Guruvayur, 22:10, Daily), (3, 16128, Guruvayur Express, Guruvayur, Chennai, 4:49, Daily), CREATE TABLE `station` ( id INT PRIMARY KEY, network_name TEXT, services TEXT, local_authority TEXT ); Sample rows from `station`: (1, Amersham, Metropolitan line and Chiltern Railways, Chiltern), (2, Bushey, London Overground and London Midland, Watford), (3, Brentwood, Greater Anglia, Brentwood), CREATE TABLE `route` ( train_id INT PRIMARY KEY REFERENCES train(id), station_id INT PRIMARY KEY REFERENCES station(id) ); Sample rows from `route`: (1, 1), (1, 2), (1, 3), CREATE TABLE `weekly_weather` ( station_id INT PRIMARY KEY REFERENCES station(id), day_of_week TEXT PRIMARY KEY, high_temperature INT, low_temperature INT, precipitation REAL, wind_speed_mph INT ); Sample rows from `weekly_weather`: (1, Monday, 59, 54, 90.0, 13), (1, Tuesday, 66, 55, 20.0, 12), (1, Wednesday, 60, 52, 10.0, 14), ",
        "output": "SELECT COUNT(DISTINCT services) FROM station"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed? ###filtered_database_schema: CREATE TABLE `Roles` ( role_code VARCHAR(15) PRIMARY KEY, role_description VARCHAR(80) ); Sample rows from `Roles`: (DBA, Database Administrator), (PROJ-MGR, Project Manager), CREATE TABLE `Users` ( user_id INTEGER, role_code VARCHAR(15) REFERENCES Roles(role_code), user_name VARCHAR(40), user_login VARCHAR(40), password VARCHAR(40) ); Sample rows from `Users`: (1, PROJ-MGR, dickens.elta, 0, e72b5a2d50b39a8760764a5f7a9d68ca2f076877), (2, DBA, tremblay.raheem, 1, 9bc25a040d5647ced5ec32e1a455e90fafc10bcb), (3, DBA, lynn.haley, 0, 90db8f51449e6c39e2a01f0b649d5a92fe76bbbb), CREATE TABLE `Document_Structures` ( document_structure_code VARCHAR(15) PRIMARY KEY, parent_document_structure_code VARCHAR(15), document_structure_description VARCHAR(80) ); Sample rows from `Document_Structures`: (1, 1, Header), (6, 1, Main section), (8, 1, Bib), CREATE TABLE `Functional_Areas` ( functional_area_code VARCHAR(15) PRIMARY KEY, parent_functional_area_code VARCHAR(15), functional_area_description VARCHAR(80) ); Sample rows from `Functional_Areas`: (8, 8, Signature), (1, 8, Acknowledgement), (9, 8, Keep blank), CREATE TABLE `Images` ( image_id INTEGER, image_alt_text VARCHAR(80), image_name VARCHAR(40), image_url VARCHAR(255) ); Sample rows from `Images`: (1, Lea, top1, http://www.rempelnader.com/1.jpg), (2, Arden, top2, http://connellykertzmann.org/1.jpg), (3, Mohamed, top3, http://www.bernierconnelly.com/1.jpg), CREATE TABLE `Documents` ( document_code VARCHAR(15) PRIMARY KEY, document_structure_code VARCHAR(15) REFERENCES Document_Structures(document_structure_code), document_type_code VARCHAR(15), access_count INTEGER, document_name VARCHAR(80) ); Sample rows from `Documents`: (217, 8, Book, 1864, Learning English), (621, 1, Paper, 8208, Research about Art history), (958, 8, Book, 3769, Learning Database), CREATE TABLE `Document_Functional_Areas` ( document_code VARCHAR(15) REFERENCES Documents(document_code), functional_area_code VARCHAR(15) REFERENCES Functional_Areas(functional_area_code) ); Sample rows from `Document_Functional_Areas`: (675, 9), (930, 1), (217, 1), CREATE TABLE `Document_Sections` ( section_id INTEGER, document_code VARCHAR(15) REFERENCES Documents(document_code), section_sequence INTEGER, section_code VARCHAR(20), section_title VARCHAR(80) ); Sample rows from `Document_Sections`: (12, 714, 6072, 70, after), (15, 217, 4510, 14, after), (19, 675, 7236, 90, after), CREATE TABLE `Document_Sections_Images` ( section_id INTEGER PRIMARY KEY REFERENCES Document_Sections(section_id), image_id INTEGER PRIMARY KEY REFERENCES Images(image_id) ); Sample rows from `Document_Sections_Images`: (93, 6), (86, 2), (27, 3), ",
        "output": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the employee ids of the employees whose role name is \"Human Resource\" or \"Manager\"? ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CV, CV, ), (BK, Book, ), (PR, Paper, ), CREATE TABLE `Ref_Calendar` ( Calendar_Date DATETIME PRIMARY KEY, Day_Number INTEGER ); Sample rows from `Ref_Calendar`: (1972-03-31 09:47:22, 5), (1976-06-15 03:40:06, 7), (1985-05-13 12:19:43, 7), CREATE TABLE `Ref_Locations` ( Location_Code CHAR(15) PRIMARY KEY, Location_Name VARCHAR(255), Location_Description VARCHAR(255) ); Sample rows from `Ref_Locations`: (b, Brazil, ), (c, Canada, ), (e, Edinburgh, ), CREATE TABLE `Roles` ( Role_Code CHAR(15) PRIMARY KEY, Role_Name VARCHAR(255), Role_Description VARCHAR(255) ); Sample rows from `Roles`: (MG, Manager, Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti.), (ED, Editor, Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos.), (PT, Photo, Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt.), CREATE TABLE `All_Documents` ( Document_ID INTEGER, Date_Stored DATETIME REFERENCES Ref_Calendar(Calendar_Date), Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255) ); Sample rows from `All_Documents`: (7, 1976-06-15 03:40:06, CV, Robin CV, None, None), (11, 1986-10-14 17:53:39, CV, Marry CV, None, None), (25, 2008-06-08 12:45:38, BK, One hundred years of solitude, None, None), CREATE TABLE `Employees` ( Employee_ID INTEGER, Role_Code CHAR(15) REFERENCES Roles(Role_Code), Employee_Name VARCHAR(255), Gender_MFU CHAR(1), Date_of_Birth DATETIME, Other_Details VARCHAR(255) ); Sample rows from `Employees`: (25, HR, Leo, , 1973-02-15 17:16:00, None), (30, MG, Ebba, , 1979-09-20 12:50:15, None), (38, ED, Stephanie, 1, 2012-03-30 23:02:28, None), CREATE TABLE `Document_Locations` ( Document_ID INTEGER PRIMARY KEY REFERENCES All_Documents(Document_ID), Location_Code CHAR(15) PRIMARY KEY REFERENCES Ref_Locations(Location_Code), Date_in_Location_From DATETIME PRIMARY KEY REFERENCES Ref_Calendar(Calendar_Date), Date_in_Locaton_To DATETIME REFERENCES Ref_Calendar(Calendar_Date) ); Sample rows from `Document_Locations`: (7, e, 2017-01-06 23:17:22, 2008-06-08 12:45:38), (11, x, 2017-01-06 23:17:22, 2012-07-03 09:48:46), (81, c, 1972-03-31 09:47:22, 1987-11-05 06:11:22), CREATE TABLE `Documents_to_be_Destroyed` ( Document_ID INTEGER REFERENCES All_Documents(Document_ID), Destruction_Authorised_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Destroyed_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Planned_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Actual_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Other_Details VARCHAR(255) ); Sample rows from `Documents_to_be_Destroyed`: (7, 156, 138, 1988-02-01 14:41:52, 2017-01-06 23:17:22, None), (11, 55, 173, 2010-11-26 19:22:50, 1986-10-14 17:53:39, None), (25, 183, 156, 2009-08-18 03:29:08, 1995-01-01 03:52:11, None), ",
        "output": "SELECT t1.employee_id FROM employees as t1 JOIN roles as t2 ON t1.role_code  =  t2.role_code WHERE t2.role_name  =  \"Human Resource\" OR t2.role_name  =  \"Manager\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the phone numbers of customers using the policy with the code \"Life Insurance\"? ###filtered_database_schema: CREATE TABLE `Customers` ( Customer_ID INTEGER, Customer_name VARCHAR(40) ); Sample rows from `Customers`: (194, America Jaskolski), (214, Ellsworth Paucek), (256, Mrs. Hanna Willms), CREATE TABLE `Services` ( Service_ID INTEGER, Service_name VARCHAR(40) ); Sample rows from `Services`: (1, New policy application), (4, Close a policy), (6, Change a policy), CREATE TABLE `Available_Policies` ( Policy_ID INTEGER PRIMARY KEY, policy_type_code CHAR(15), Customer_Phone VARCHAR(255) ); Sample rows from `Available_Policies`: (246, Life Insurance, +16(2)5838999222), (257, Property Insurance, 242.763.9214), (300, Property Insurance, 1-416-503-7735x94204), CREATE TABLE `Customers_Policies` ( Customer_ID INTEGER PRIMARY KEY REFERENCES Customers(Customer_ID), Policy_ID INTEGER PRIMARY KEY REFERENCES Available_Policies(Policy_ID), Date_Opened DATE, Date_Closed DATE ); Sample rows from `Customers_Policies`: (214, 257, 2016-11-19, 2018-03-04), (214, 301, 2016-04-12, 2018-02-07), (256, 583, 2016-07-22, 2018-02-20), CREATE TABLE `First_Notification_of_Loss` ( FNOL_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers_Policies(Customer_ID), Policy_ID INTEGER REFERENCES Customers_Policies(Policy_ID), Service_ID INTEGER REFERENCES Services(Service_ID) ); Sample rows from `First_Notification_of_Loss`: (532, 214, 257, 6), (1611, 996, 993, 9), (1722, 996, 879, 6), CREATE TABLE `Claims` ( Claim_ID INTEGER PRIMARY KEY, FNOL_ID INTEGER REFERENCES First_Notification_of_Loss(FNOL_ID), Effective_Date DATE ); Sample rows from `Claims`: (134, 1722, 1973-08-18), (145, 1611, 2014-10-19), (228, 532, 1975-05-07), CREATE TABLE `Settlements` ( Settlement_ID INTEGER PRIMARY KEY, Claim_ID INTEGER REFERENCES Claims(Claim_ID), Effective_Date DATE, Settlement_Amount REAL ); Sample rows from `Settlements`: (161, 717, 2009-11-20, 6451.65), (176, 641, 1971-06-29, 1588.45), (205, 604, 1978-09-09, 9814.39), ",
        "output": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the product description of the product booked with an amount of 102.76? ###filtered_database_schema: CREATE TABLE `Discount_Coupons` ( coupon_id INTEGER, date_issued DATETIME, coupon_amount DECIMAL(19,4) ); Sample rows from `Discount_Coupons`: (1, 2017-09-06 01:33:27, 500), (2, 2018-02-20 09:40:56, 686.25), (3, 2017-09-17 23:31:36, 501.3), CREATE TABLE `Customers` ( customer_id INTEGER, coupon_id INTEGER REFERENCES Discount_Coupons(coupon_id), good_or_bad_customer VARCHAR(4), first_name VARCHAR(80), last_name VARCHAR(80), gender_mf VARCHAR(1), date_became_customer DATETIME, date_last_hire DATETIME ); Sample rows from `Customers`: (1, 12, good, Geovany, Homenick, 0, 2017-10-20 12:13:17, 2018-02-27 18:55:26), (2, 14, good, Jailyn, Gerlach, 0, 2015-04-06 21:18:37, 2018-01-30 04:47:13), (3, 7, good, Rosalee, Kessler, 0, 2016-02-03 16:58:11, 2018-03-04 21:30:23), CREATE TABLE `Bookings` ( booking_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), booking_status_code VARCHAR(10), returned_damaged_yn VARCHAR(40), booking_start_date DATETIME, booking_end_date DATETIME, count_hired VARCHAR(40), amount_payable DECIMAL(19,4), amount_of_discount DECIMAL(19,4), amount_outstanding DECIMAL(19,4), amount_of_refund DECIMAL(19,4) ); Sample rows from `Bookings`: (1, 7, Provisional, 1, 2016-12-07 23:39:17, 2018-02-01 16:39:13, 298, 214.39, 71.45, 28.22, 179.14), (2, 15, Confirmed, 1, 2017-06-16 11:42:31, 2018-02-19 21:53:31, 331, 386.92, 83.82, 57.62, 183.68), (3, 3, Confirmed, 1, 2017-04-04 11:02:43, 2018-02-01 09:30:50, 729, 351.32, 49.26, 66.01, 135.94), CREATE TABLE `Products_for_Hire` ( product_id INTEGER, product_type_code VARCHAR(15), daily_hire_cost DECIMAL(19,4), product_name VARCHAR(80), product_description VARCHAR(255) ); Sample rows from `Products_for_Hire`: (1, Cutlery, 26.15, Book collection C, Anna Karenina), (2, Cutlery, 15.62, Book collection B, War and Peace), (3, Cutlery, 39.73, Book collection A, The Great Gatsby), CREATE TABLE `Payments` ( payment_id INTEGER, booking_id INTEGER REFERENCES Bookings(booking_id), customer_id INTEGER REFERENCES Customers(customer_id), payment_type_code VARCHAR(15), amount_paid_in_full_yn VARCHAR(1), payment_date DATETIME, amount_due DECIMAL(19,4), amount_paid DECIMAL(19,4) ); Sample rows from `Payments`: (1, 6, 15, Check, 1, 2018-03-09 16:28:00, 369.52, 206.27), (2, 9, 12, Cash, 1, 2018-03-03 13:39:44, 278.6, 666.45), (3, 5, 7, Credit Card, 0, 2018-03-22 15:00:23, 840.06, 135.7), CREATE TABLE `Products_Booked` ( booking_id INTEGER PRIMARY KEY REFERENCES Bookings(booking_id), product_id INTEGER PRIMARY KEY REFERENCES Products_for_Hire(product_id), returned_yn VARCHAR(1), returned_late_yn VARCHAR(1), booked_count INTEGER, booked_amount FLOAT ); Sample rows from `Products_Booked`: (4, 1, 1, 1, 5, 309.73), (14, 1, 1, 0, 3, 102.76), (13, 3, 1, 0, 4, 151.68), CREATE TABLE `View_Product_Availability` ( product_id INTEGER REFERENCES Products_for_Hire(product_id), booking_id INTEGER REFERENCES Bookings(booking_id), status_date DATETIME PRIMARY KEY, available_yn VARCHAR(1) ); Sample rows from `View_Product_Availability`: (1, 5, 2018-03-18 05:25:55, 1), (2, 5, 2018-03-21 15:20:32, 0), (3, 11, 2018-03-25 10:20:15, 1), ",
        "output": "SELECT t2.product_description FROM products_booked as t1 JOIN products_for_hire as t2 ON t1.product_id  =  t2.product_id WHERE t1.booked_amount  =  102.76"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions? ###filtered_database_schema: CREATE TABLE `medicine` ( id INT PRIMARY KEY, name TEXT, Trade_Name TEXT, FDA_approved TEXT ); Sample rows from `medicine`: (1, Amisulpride, Solian, No), (2, Aripiprazole, Abilify, Yes), (3, Asenapine, Saphris, Yes), CREATE TABLE `enzyme` ( id INT PRIMARY KEY, name TEXT, Location TEXT, Product TEXT, Chromosome TEXT, OMIM INT, Porphyria TEXT ); Sample rows from `enzyme`: (1, ALA synthase, Mitochondrion, δ-Aminolevulinic acid, 3p21.1, 125290, none), (2, ALA dehydratase, Cytosol, Porphobilinogen, 9q34, 125270, ALA-Dehydratase deficiency), (3, PBG deaminase, Cytosol, Hydroxymethyl bilane, 11q23.3, 176000, acute intermittent porphyria), CREATE TABLE `medicine_enzyme_interaction` ( enzyme_id INT PRIMARY KEY REFERENCES enzyme(id), medicine_id INT PRIMARY KEY REFERENCES medicine(id), interaction_type TEXT ); Sample rows from `medicine_enzyme_interaction`: (1, 1, inhibitor), (1, 2, inhibitor), (1, 3, inhibitor), ",
        "output": "SELECT t1.id ,  t1.name ,  t1.fda_approved FROM medicine as t1 JOIN medicine_enzyme_interaction as t2 ON t2.medicine_id  =  t1.id GROUP BY t1.id ORDER BY COUNT(*) DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Give me the descriptions of the service types that cost more than 100. ###filtered_database_schema: CREATE TABLE `Ref_Payment_Methods` ( payment_method_code CHAR(10) PRIMARY KEY, payment_method_description VARCHAR(80) ); Sample rows from `Ref_Payment_Methods`: (American E, credit), (MasterCard, debit), (Visa, Visa), CREATE TABLE `Ref_Service_Types` ( Service_Type_Code CHAR(15) PRIMARY KEY, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255) ); Sample rows from `Ref_Service_Types`: (1, 1, provide photo service), (2, 1, provide dinning service), (3, 1, provide filming service), CREATE TABLE `Addresses` ( Address_ID VARCHAR(100) PRIMARY KEY, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Addresses`: (110, 4753 Dach Highway, Suite 846, Feliciaberg, Florida, None), (124, 391 Vandervort Fall Apt. 446, Apt. 107, West Sherwoodstad, Indiana, None), (148, 809 Izabella Islands, Suite 271, Schadenville, Ohio, None), CREATE TABLE `Products` ( Product_ID VARCHAR(100) PRIMARY KEY, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Products`: (11, photo, 4448536, None, None), (154, film, 2302, None, None), (156, film, 17622723, None, None), CREATE TABLE `Marketing_Regions` ( Marketing_Region_Code CHAR(15) PRIMARY KEY, Marketing_Region_Name VARCHAR(255), Marketing_Region_Descriptrion VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Marketing_Regions`: (CA, Canada, Our target market, None), (CN, China, Our largest market, None), (ES, Spain, , None), CREATE TABLE `Clients` ( Client_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Clients`: (423, 201, branson94@example.net, Clifford, (042)912-3404x5135, VIP), (426, 383, alba04@example.com, Bettye, (604)849-0214, None), (478, 15, westley30@example.net, Reinhold, 1-048-214-4640x64380, None), CREATE TABLE `Drama_Workshop_Groups` ( Workshop_Group_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Currency_Code CHAR(15), Marketing_Region_Code CHAR(15), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Drama_Workshop_Groups`: (136, 383, EU, FR, Amely Cafe, 122-084-8029, amely.ruecker@example.com, None), (140, 180, EU, DE, Veda Film, 793-966-9311x5303, breitenberg.veda@example.com, None), (176, 286, EU, RU, Queen Art, 492-463-5967, quigley.queen@example.org, Good), CREATE TABLE `Performers` ( Performer_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Performers`: (153, 124, Shawna, 664.495.1939, krogahn@example.com, None), (211, 124, Ashley, 893-536-8857, preston45@example.net, None), (313, 39, Oren, 1-952-052-6685x28082, ferry.carolina@example.net, None), CREATE TABLE `Customers` ( Customer_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Customers`: (240, 286, Harold, 624-096-7791, jerde.harmon@example.com, None), (267, 98, Federico, 914-915-7483, johnson27@example.com, None), (304, 369, Samson, 1-463-121-4086x655, dalton75@example.com, None), CREATE TABLE `Stores` ( Store_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Marketing_Region_Code CHAR(15) REFERENCES Marketing_Regions(Marketing_Region_Code), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Stores`: (150, 286, IN, FJA Filming, +65(1)3590790358, fjacobson@example.com, None), (229, 266, CA, Rob Dinning, 1-327-185-9368, rborer@example.org, 5 stars), (231, 230, ES, Adan Dinning, 896-931-9633x869, adan93@example.com, None), CREATE TABLE `Bookings` ( Booking_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Clients(Client_ID), Workshop_Group_ID VARCHAR(100) REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Status_Code CHAR(15), Store_ID INTEGER, Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Bookings`: (1, 938, 140, good, 8, 2016-12-12 10:43:01, 2013-03-10 18:47:05, 1997-11-21 10:07:40, None), (2, 868, 838, stop, 7, 1976-08-20 00:33:08, 2009-07-09 09:18:38, 1976-01-08 07:19:23, None), (3, 735, 176, good, 9, 1975-11-23 06:28:47, 1989-01-05 19:24:45, 1990-03-16 19:38:47, None), CREATE TABLE `Performers_in_Bookings` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Performer_ID INTEGER PRIMARY KEY REFERENCES Performers(Performer_ID) ); Sample rows from `Performers_in_Bookings`: (1, 153), (1, 341), (2, 466), CREATE TABLE `Customer_Orders` ( Order_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Store_ID INTEGER REFERENCES Stores(Store_ID), Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 516, 231, 1994-08-03 12:34:58, 1977-03-11 03:58:19, 1992-07-21 22:11:11, None), (2, 418, 229, 2014-07-10 10:56:01, 1996-08-26 19:19:59, 1998-08-22 17:57:32, None), (3, 712, 229, 1981-06-20 16:29:43, 1980-12-19 05:49:35, 2011-04-13 07:15:35, None), CREATE TABLE `Order_Items` ( Order_Item_ID INTEGER, Order_ID INTEGER REFERENCES Customer_Orders(Order_ID), Product_ID INTEGER REFERENCES Products(Product_ID), Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 3, 233, 1, None), (2, 15, 300, 2, None), (3, 12, 300, 1, None), CREATE TABLE `Invoices` ( Invoice_ID INTEGER, Order_ID INTEGER REFERENCES Bookings(Booking_ID) REFERENCES Customer_Orders(Order_ID), payment_method_code CHAR(15) REFERENCES Ref_Payment_Methods(payment_method_code), Product_ID INTEGER, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER ); Sample rows from `Invoices`: (128, 14, MasterCard, 4, 2, None, 1), (162, 13, MasterCard, 9, 2, None, 9), (164, 7, Visa, 7, 2, None, 1), CREATE TABLE `Services` ( Service_ID INTEGER PRIMARY KEY, Service_Type_Code CHAR(15) REFERENCES Ref_Service_Types(Service_Type_Code), Workshop_Group_ID INTEGER REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Services`: (191, 1, 415, None, film, 58932775.8822, None), (219, 2, 838, None, film, 2704.4719, None), (220, 1, 708, None, dinning, 6888.8306, None), CREATE TABLE `Bookings_Services` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Product_ID INTEGER PRIMARY KEY REFERENCES Services(Service_ID) ); Sample rows from `Bookings_Services`: (1, 396), (1, 779), (4, 191), CREATE TABLE `Invoice_Items` ( Invoice_Item_ID INTEGER, Invoice_ID INTEGER REFERENCES Invoices(Invoice_ID), Order_ID INTEGER REFERENCES Bookings_Services(Order_ID), Order_Item_ID INTEGER REFERENCES Order_Items(Order_Item_ID), Product_ID INTEGER REFERENCES Bookings_Services(Product_ID), Order_Quantity INTEGER, Other_Item_Details VARCHAR(255) ); Sample rows from `Invoice_Items`: (1, 128, 1, 5, 396, 2, None), (2, 162, 4, 6, 191, 6, Good quality), ",
        "output": "SELECT t1.service_type_description FROM ref_service_types as t1 JOIN services as t2 ON t1.service_type_code  =  t2.service_type_code WHERE t2.product_price  >  100"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the average price and score of wines grouped by appelation? ###filtered_database_schema: CREATE TABLE `grapes` ( ID INTEGER, Grape TEXT PRIMARY KEY, Color TEXT ); Sample rows from `grapes`: (1, Barbera, Red), (2, Cabernet Franc, Red), (3, Cabernet Sauvingnon, Red), CREATE TABLE `appellations` ( No INTEGER, Appelation TEXT PRIMARY KEY, County TEXT, State TEXT, Area TEXT, isAVA TEXT ); Sample rows from `appellations`: (1, Alexander Valley, Sonoma, California, North Coast, Yes), (2, Amador County, Amador, California, Sierra Foothills, No), (3, Amador-Mendocino-Sonoma Counties, N/A, California, N/A, No), CREATE TABLE `wine` ( No INTEGER, Grape TEXT REFERENCES grapes(Grape), Winery TEXT, Appelation TEXT REFERENCES appellations(Appelation), State TEXT, Name TEXT, Year INTEGER, Price INTEGER, Score INTEGER, Cases INTEGER, Drink TEXT ); Sample rows from `wine`: (1, Zinfandel, Robert Biale, St. Helena, California, Old Kraft Vineyard, 2008, 44, 93, 275, now), (2, Zinfandel, Chiarello Family, Napa Valley, California, Giana, 2008, 35, 93, 480, now), (3, Zinfandel, Robert Biale, Napa Valley, California, Black Chicken, 2008, 40, 91, 2700, 2012), ",
        "output": "SELECT AVG(price) ,  AVG(score) ,  appelation FROM wine GROUP BY appelation"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the student ID and login name of the student who are enrolled in the most courses? ###filtered_database_schema: CREATE TABLE `Course_Authors_and_Tutors` ( author_id INTEGER, author_tutor_ATB VARCHAR(3), login_name VARCHAR(40), password VARCHAR(40), personal_name VARCHAR(80), middle_name VARCHAR(80), family_name VARCHAR(80), gender_mf VARCHAR(1), address_line_1 VARCHAR(80) ); Sample rows from `Course_Authors_and_Tutors`: (1, 331, jmckenzie, c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b, Cathrine, Ruthie, Grant, 0, 756 Monahan Mews Spinkashire, NJ 64230-5098), (2, 975, heidenreich.ara, 24b0ee84063c3b017ab1839e01b7280f47f7c7c2, Retha, Corene, Armstrong, 0, 98623 Huels Manor Jasttown, DE 31611), (3, 349, clementina29, cdaf6c3483f19e2253659a40a3aab786a3390f78, Darius, Ethyl, Reichel, 0, 99296 Keeling Courts North Audreanne, IL 28272), CREATE TABLE `Students` ( student_id INTEGER, date_of_registration DATETIME, date_of_latest_logon DATETIME, login_name VARCHAR(40), password VARCHAR(10), personal_name VARCHAR(40), middle_name VARCHAR(40), family_name VARCHAR(40) ); Sample rows from `Students`: (1, 2015-07-22 13:32:35, 2017-10-17 22:52:26, annamae.hoppe, db8765bb6f, Wilson, Aubrey, Ward), (2, 2015-07-02 00:21:42, 2017-06-24 22:16:27, wmiller, 35faf8182a, Karson, Luella, Jaskolski), (3, 2015-10-11 03:23:27, 2018-03-10 23:22:23, ahartmann, 8e064ec4e6, Mariela, Brandt, Legros), CREATE TABLE `Subjects` ( subject_id INTEGER, subject_name VARCHAR(120) ); Sample rows from `Subjects`: (1, Computer Science), (2, Arts), (3, Language), CREATE TABLE `Courses` ( course_id INTEGER, author_id INTEGER REFERENCES Course_Authors_and_Tutors(author_id), subject_id INTEGER REFERENCES Subjects(subject_id), course_name VARCHAR(120), course_description VARCHAR(255) ); Sample rows from `Courses`: (1, 8, 1, database, database), (2, 6, 1, advanced database, advanced database), (3, 15, 1, operating system, operating system), CREATE TABLE `Student_Course_Enrolment` ( registration_id INTEGER, student_id INTEGER REFERENCES Students(student_id), course_id INTEGER REFERENCES Courses(course_id), date_of_enrolment DATETIME, date_of_completion DATETIME ); Sample rows from `Student_Course_Enrolment`: (1, 11, 2, 2017-10-09 07:09:02, 2018-02-26 07:48:52), (2, 15, 4, 2017-11-13 12:49:33, 2018-03-04 01:24:56), (3, 10, 8, 2017-10-17 13:50:40, 2018-03-22 02:53:01), CREATE TABLE `Student_Tests_Taken` ( registration_id INTEGER REFERENCES Student_Course_Enrolment(registration_id), date_test_taken DATETIME, test_result VARCHAR(255) ); Sample rows from `Student_Tests_Taken`: (12, 2018-03-25 03:27:16, Fail), (10, 2018-03-25 21:50:22, Pass), (7, 2018-03-21 00:32:25, Pass), ",
        "output": "SELECT t1.student_id ,  t2.login_name FROM student_course_enrolment as t1 JOIN students as t2 ON t1.student_id  =  t2.student_id GROUP BY t1.student_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many customers use each payment method? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 28481 Crist Circle East Burdettestad, IA 21232), (2, 0292 Mitchel Pike Port Abefurt, IA 84402-4249), (3, 4062 Mante Place West Lindsey, DE 76199-8015), CREATE TABLE `Staff` ( staff_id INTEGER, staff_gender VARCHAR(1), staff_name VARCHAR(80) ); Sample rows from `Staff`: (1, 1, Tom), (2, 1, Malika), (3, 1, Katelynn), CREATE TABLE `Suppliers` ( supplier_id INTEGER, supplier_name VARCHAR(80), supplier_phone VARCHAR(80) ); Sample rows from `Suppliers`: (1, Lidl, (692)009-5928), (2, AB Store, 1-483-283-4742), (3, Tesco, 287-071-1153x254), CREATE TABLE `Department_Store_Chain` ( dept_store_chain_id INTEGER, dept_store_chain_name VARCHAR(80) ); Sample rows from `Department_Store_Chain`: (1, South), (2, West), (3, East), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method_code VARCHAR(10), customer_code VARCHAR(20), customer_name VARCHAR(80), customer_address VARCHAR(255), customer_phone VARCHAR(80), customer_email VARCHAR(80) ); Sample rows from `Customers`: (1, Credit Card, 401, Ahmed, 75099 Tremblay Port Apt. 163 South Norrisland, SC 80546, 254-072-4068x33935, margarett.vonrueden@example.com), (2, Credit Card, 665, Chauncey, 8408 Lindsay Court East Dasiabury, IL 72656-3552, +41(8)1897032009, stiedemann.sigrid@example.com), (3, Direct Debit, 844, Lukas, 7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871, 197-417-3557, joelle.monahan@example.com), CREATE TABLE `Products` ( product_id INTEGER, product_type_code VARCHAR(10), product_name VARCHAR(80), product_price DECIMAL(19,4) ); Sample rows from `Products`: (1, Clothes, red jeans, 734.73), (2, Clothes, yellow jeans, 687.23), (3, Clothes, black jeans, 695.16), CREATE TABLE `Supplier_Addresses` ( supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Supplier_Addresses`: (4, 5, 2016-09-22 16:41:31, 2018-03-14 20:06:37), (3, 9, 2014-11-07 19:18:49, 2018-03-16 16:39:58), (3, 2, 2008-11-22 12:01:25, 2018-03-02 19:50:22), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 9, 2017-12-11 05:00:22, 2018-03-20 20:52:34), (1, 6, 2017-10-07 23:00:26, 2018-02-28 14:53:52), (10, 8, 2017-04-04 20:00:27, 2018-02-27 20:08:33), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status_code VARCHAR(10), order_date DATETIME ); Sample rows from `Customer_Orders`: (1, 12, Completed, 2018-02-10 15:44:48), (2, 4, New, 2018-01-31 17:49:18), (3, 1, PartFilled, 2018-02-26 12:39:33), CREATE TABLE `Department_Stores` ( dept_store_id INTEGER, dept_store_chain_id INTEGER REFERENCES Department_Store_Chain(dept_store_chain_id), store_name VARCHAR(80), store_address VARCHAR(255), store_phone VARCHAR(80), store_email VARCHAR(80) ); Sample rows from `Department_Stores`: (1, 1, store_name, 01290 Jeremie Parkway Suite 753 North Arielle, MS 51249, (948)944-5099x2027, bmaggio@example.com), (2, 3, store_name, 082 Purdy Expressway O'Connellshire, IL 31732, 877-917-5029, larissa10@example.org), (3, 4, store_name, 994 Travis Plains North Wadeton, WV 27575-3951, 1-216-312-0375, alexandro.mcclure@example.net), CREATE TABLE `Departments` ( department_id INTEGER, dept_store_id INTEGER REFERENCES Department_Stores(dept_store_id), department_name VARCHAR(80) ); Sample rows from `Departments`: (1, 5, human resource), (2, 11, purchasing), (3, 4, marketing), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id) ); Sample rows from `Order_Items`: (1, 9, 7), (2, 1, 3), (3, 5, 2), CREATE TABLE `Product_Suppliers` ( product_id INTEGER PRIMARY KEY REFERENCES Products(product_id), supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), date_supplied_from DATETIME, date_supplied_to DATETIME, total_amount_purchased VARCHAR(80), total_value_purchased DECIMAL(19,4) ); Sample rows from `Product_Suppliers`: (4, 3, 2017-06-19 00:49:05, 2018-03-24 19:29:18, 89366.05, 36014.6), (8, 4, 2017-07-02 00:35:12, 2018-03-25 07:30:49, 25085.57, 36274.56), (3, 3, 2017-10-14 19:15:37, 2018-03-24 02:29:44, 15752.45, 7273.74), CREATE TABLE `Staff_Department_Assignments` ( staff_id INTEGER PRIMARY KEY REFERENCES Staff(staff_id), department_id INTEGER PRIMARY KEY REFERENCES Departments(department_id), date_assigned_from DATETIME, job_title_code VARCHAR(10), date_assigned_to DATETIME ); Sample rows from `Staff_Department_Assignments`: (5, 4, 2017-06-11 22:55:20, Department Manager, 2018-03-23 21:59:11), (10, 5, 2017-12-18 19:12:15, Sales Person, 2018-03-23 20:25:24), (1, 5, 2018-02-14 03:15:29, Clerical Staff, 2018-03-24 19:57:56), ",
        "output": "SELECT payment_method_code ,  COUNT(*) FROM customers GROUP BY payment_method_code"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the state with the largest population density ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX(density) FROM state );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: display the ID for those employees who did two or more jobs in the past. ###filtered_database_schema: CREATE TABLE `regions` ( REGION_ID decimal(5,0) PRIMARY KEY, REGION_NAME varchar(25) ); Sample rows from `regions`: (1, Europe\\r), (2, Americas\\r), (3, Asia\\r), CREATE TABLE `countries` ( COUNTRY_ID varchar(2) PRIMARY KEY, COUNTRY_NAME varchar(40), REGION_ID decimal(10,0) REFERENCES regions(REGION_ID) ); Sample rows from `countries`: (AR, Argentina, 2), (AU, Australia, 3), (BE, Belgium, 1), CREATE TABLE `departments` ( DEPARTMENT_ID decimal(4,0) PRIMARY KEY, DEPARTMENT_NAME varchar(30), MANAGER_ID decimal(6,0), LOCATION_ID decimal(4,0) ); Sample rows from `departments`: (10, Administration, 200, 1700), (20, Marketing, 201, 1800), (30, Purchasing, 114, 1700), CREATE TABLE `jobs` ( JOB_ID varchar(10) PRIMARY KEY, JOB_TITLE varchar(35), MIN_SALARY decimal(6,0), MAX_SALARY decimal(6,0) ); Sample rows from `jobs`: (AD_PRES, President, 20000, 40000), (AD_VP, Administration Vice President, 15000, 30000), (AD_ASST, Administration Assistant, 3000, 6000), CREATE TABLE `employees` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY, FIRST_NAME varchar(20), LAST_NAME varchar(25), EMAIL varchar(25), PHONE_NUMBER varchar(20), HIRE_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), SALARY decimal(8,2), COMMISSION_PCT decimal(2,2), MANAGER_ID decimal(6,0), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `employees`: (100, Steven, King, SKING, 515.123.4567, 1987-06-17, AD_PRES, 24000, 0, 0, 90), (101, Neena, Kochhar, NKOCHHAR, 515.123.4568, 1987-06-18, AD_VP, 17000, 0, 100, 90), (102, Lex, De Haan, LDEHAAN, 515.123.4569, 1987-06-19, AD_VP, 17000, 0, 100, 90), CREATE TABLE `job_history` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY REFERENCES employees(EMPLOYEE_ID), START_DATE date PRIMARY KEY, END_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `job_history`: (102, 1993-01-13, 1998-07-24, IT_PROG, 60), (101, 1989-09-21, 1993-10-27, AC_ACCOUNT, 110), (101, 1993-10-28, 1997-03-15, AC_MGR, 110), CREATE TABLE `locations` ( LOCATION_ID decimal(4,0) PRIMARY KEY, STREET_ADDRESS varchar(40), POSTAL_CODE varchar(12), CITY varchar(30), STATE_PROVINCE varchar(25), COUNTRY_ID varchar(2) REFERENCES countries(COUNTRY_ID) ); Sample rows from `locations`: (1000, 1297 Via Cola di Rie, 989, Roma, , IT), (1100, 93091 Calle della Testa, 10934, Venice, , IT), (1200, 2017 Shinjuku-ku, 1689, Tokyo, Tokyo Prefecture, JP), ",
        "output": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names and ids of products costing between 600 and 700? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 28481 Crist Circle East Burdettestad, IA 21232), (2, 0292 Mitchel Pike Port Abefurt, IA 84402-4249), (3, 4062 Mante Place West Lindsey, DE 76199-8015), CREATE TABLE `Staff` ( staff_id INTEGER, staff_gender VARCHAR(1), staff_name VARCHAR(80) ); Sample rows from `Staff`: (1, 1, Tom), (2, 1, Malika), (3, 1, Katelynn), CREATE TABLE `Suppliers` ( supplier_id INTEGER, supplier_name VARCHAR(80), supplier_phone VARCHAR(80) ); Sample rows from `Suppliers`: (1, Lidl, (692)009-5928), (2, AB Store, 1-483-283-4742), (3, Tesco, 287-071-1153x254), CREATE TABLE `Department_Store_Chain` ( dept_store_chain_id INTEGER, dept_store_chain_name VARCHAR(80) ); Sample rows from `Department_Store_Chain`: (1, South), (2, West), (3, East), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method_code VARCHAR(10), customer_code VARCHAR(20), customer_name VARCHAR(80), customer_address VARCHAR(255), customer_phone VARCHAR(80), customer_email VARCHAR(80) ); Sample rows from `Customers`: (1, Credit Card, 401, Ahmed, 75099 Tremblay Port Apt. 163 South Norrisland, SC 80546, 254-072-4068x33935, margarett.vonrueden@example.com), (2, Credit Card, 665, Chauncey, 8408 Lindsay Court East Dasiabury, IL 72656-3552, +41(8)1897032009, stiedemann.sigrid@example.com), (3, Direct Debit, 844, Lukas, 7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871, 197-417-3557, joelle.monahan@example.com), CREATE TABLE `Products` ( product_id INTEGER, product_type_code VARCHAR(10), product_name VARCHAR(80), product_price DECIMAL(19,4) ); Sample rows from `Products`: (1, Clothes, red jeans, 734.73), (2, Clothes, yellow jeans, 687.23), (3, Clothes, black jeans, 695.16), CREATE TABLE `Supplier_Addresses` ( supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Supplier_Addresses`: (4, 5, 2016-09-22 16:41:31, 2018-03-14 20:06:37), (3, 9, 2014-11-07 19:18:49, 2018-03-16 16:39:58), (3, 2, 2008-11-22 12:01:25, 2018-03-02 19:50:22), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 9, 2017-12-11 05:00:22, 2018-03-20 20:52:34), (1, 6, 2017-10-07 23:00:26, 2018-02-28 14:53:52), (10, 8, 2017-04-04 20:00:27, 2018-02-27 20:08:33), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status_code VARCHAR(10), order_date DATETIME ); Sample rows from `Customer_Orders`: (1, 12, Completed, 2018-02-10 15:44:48), (2, 4, New, 2018-01-31 17:49:18), (3, 1, PartFilled, 2018-02-26 12:39:33), CREATE TABLE `Department_Stores` ( dept_store_id INTEGER, dept_store_chain_id INTEGER REFERENCES Department_Store_Chain(dept_store_chain_id), store_name VARCHAR(80), store_address VARCHAR(255), store_phone VARCHAR(80), store_email VARCHAR(80) ); Sample rows from `Department_Stores`: (1, 1, store_name, 01290 Jeremie Parkway Suite 753 North Arielle, MS 51249, (948)944-5099x2027, bmaggio@example.com), (2, 3, store_name, 082 Purdy Expressway O'Connellshire, IL 31732, 877-917-5029, larissa10@example.org), (3, 4, store_name, 994 Travis Plains North Wadeton, WV 27575-3951, 1-216-312-0375, alexandro.mcclure@example.net), CREATE TABLE `Departments` ( department_id INTEGER, dept_store_id INTEGER REFERENCES Department_Stores(dept_store_id), department_name VARCHAR(80) ); Sample rows from `Departments`: (1, 5, human resource), (2, 11, purchasing), (3, 4, marketing), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id) ); Sample rows from `Order_Items`: (1, 9, 7), (2, 1, 3), (3, 5, 2), CREATE TABLE `Product_Suppliers` ( product_id INTEGER PRIMARY KEY REFERENCES Products(product_id), supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), date_supplied_from DATETIME, date_supplied_to DATETIME, total_amount_purchased VARCHAR(80), total_value_purchased DECIMAL(19,4) ); Sample rows from `Product_Suppliers`: (4, 3, 2017-06-19 00:49:05, 2018-03-24 19:29:18, 89366.05, 36014.6), (8, 4, 2017-07-02 00:35:12, 2018-03-25 07:30:49, 25085.57, 36274.56), (3, 3, 2017-10-14 19:15:37, 2018-03-24 02:29:44, 15752.45, 7273.74), CREATE TABLE `Staff_Department_Assignments` ( staff_id INTEGER PRIMARY KEY REFERENCES Staff(staff_id), department_id INTEGER PRIMARY KEY REFERENCES Departments(department_id), date_assigned_from DATETIME, job_title_code VARCHAR(10), date_assigned_to DATETIME ); Sample rows from `Staff_Department_Assignments`: (5, 4, 2017-06-11 22:55:20, Department Manager, 2018-03-23 21:59:11), (10, 5, 2017-12-18 19:12:15, Sales Person, 2018-03-23 20:25:24), (1, 5, 2018-02-14 03:15:29, Clerical Staff, 2018-03-24 19:57:56), ",
        "output": "SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of students who took some course offered by Statistics department. ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT t3.name FROM course as t1 JOIN takes as t2 ON t1.course_id  =  t2.course_id JOIN student as t3 ON t2.id  =  t3.id WHERE t1.dept_name  =  'Statistics'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many characteristics does the product named \"laurel\" have? ###filtered_database_schema: CREATE TABLE `Ref_Characteristic_Types` ( characteristic_type_code VARCHAR(15) PRIMARY KEY, characteristic_type_description VARCHAR(80) ); Sample rows from `Ref_Characteristic_Types`: (Grade, Grade), (Purity, Purity), CREATE TABLE `Ref_Colors` ( color_code VARCHAR(15) PRIMARY KEY, color_description VARCHAR(80) ); Sample rows from `Ref_Colors`: (9, red), (5, green), (1, yellow), CREATE TABLE `Ref_Product_Categories` ( product_category_code VARCHAR(15) PRIMARY KEY, product_category_description VARCHAR(80), unit_of_measure VARCHAR(20) ); Sample rows from `Ref_Product_Categories`: (Herbs, Herbs, Handful ), (Seeds, Seeds, Weight - pound,kilo.), (Spices, Spices, Weight - pound,kilo.), CREATE TABLE `Characteristics` ( characteristic_id INTEGER, characteristic_type_code VARCHAR(15) REFERENCES Ref_Characteristic_Types(characteristic_type_code), characteristic_data_type VARCHAR(10), characteristic_name VARCHAR(80), other_characteristic_details VARCHAR(255) ); Sample rows from `Characteristics`: (1, Grade, numquam, slow, None), (2, Grade, doloribus, fast, None), (3, Purity, rem, warm, None), CREATE TABLE `Products` ( product_id INTEGER, color_code VARCHAR(15) REFERENCES Ref_Colors(color_code), product_category_code VARCHAR(15) REFERENCES Ref_Product_Categories(product_category_code), product_name VARCHAR(80), typical_buying_price VARCHAR(20), typical_selling_price VARCHAR(20), product_description VARCHAR(255), other_product_details VARCHAR(255) ); Sample rows from `Products`: (1, 4, Spices, cumin, , 2878.3, et, None), (2, 2, Spices, peper, 352447.2874677, 1892070.2803543, rerum, None), (3, 9, Herbs, basil, 503.8431967, 0.1859512, officia, None), CREATE TABLE `Product_Characteristics` ( product_id INTEGER REFERENCES Products(product_id), characteristic_id INTEGER REFERENCES Characteristics(characteristic_id), product_characteristic_value VARCHAR(50) ); Sample rows from `Product_Characteristics`: (13, 13, low), (11, 2, low), (5, 15, low), ",
        "output": "SELECT COUNT(*) FROM products as t1 JOIN product_characteristics as t2 ON t1.product_id  =  t2.product_id JOIN characteristics as t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the most populous state ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX(population) FROM state );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How old is the average person for each job? ###filtered_database_schema: CREATE TABLE `Person` ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT ); Sample rows from `Person`: (Alice, 25, new york city, female, student), (Bob, 35, salt lake city, male, engineer), (Zach, 45, austin, male, doctor), CREATE TABLE `PersonFriend` ( name varchar(20) REFERENCES Person(name), friend varchar(20) REFERENCES Person(name), year INTEGER ); Sample rows from `PersonFriend`: (Alice, Bob, 10), (Zach, Dan, 12), (Bob, Zach, 5), ",
        "output": "SELECT AVG(age) ,  job FROM person GROUP BY job"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many departments are in the division AS? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), CREATE TABLE `Department` ( DNO INTEGER, Division VARCHAR(2), DName VARCHAR(25), Room VARCHAR(5), Building VARCHAR(13), DPhone INTEGER ); Sample rows from `Department`: (10, AS, History of Art, 268, Mergenthaler, 7117), (20, AS, Biology, 144, Mudd, 7330), (30, AS, Chemistry, 113, Remsen, 7429), CREATE TABLE `Member_of` ( FacID INTEGER REFERENCES Faculty(FacID), DNO INTEGER REFERENCES Department(DNO), Appt_Type VARCHAR(15) ); Sample rows from `Member_of`: (7792, 600, Primary), (9210, 520, Primary), (9811, 550, Primary), CREATE TABLE `Course` ( CID VARCHAR(7) PRIMARY KEY, CName VARCHAR(40), Credits INTEGER, Instructor INTEGER REFERENCES Faculty(FacID), Days VARCHAR(5), Hours VARCHAR(11), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Course`: (600.101, COMPUTER LITERACY, 3, 6112, MTW, 3, 600), (600.103, INTRODUCTION TO COMPUTER SCIENCE, 1, 4230, Th, 4, 600), (600.107, INTRO TO PROGRAMMING IN JAVA, 3, 1193, MTW, 3, 600), CREATE TABLE `Minor_in` ( StuID INTEGER REFERENCES Student(StuID), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Minor_in`: (1004, 520), (1005, 550), (1006, 50), CREATE TABLE `Enrolled_in` ( StuID INTEGER REFERENCES Student(StuID), CID VARCHAR(7) REFERENCES Course(CID), Grade VARCHAR(2) REFERENCES Gradeconversion(lettergrade) ); Sample rows from `Enrolled_in`: (1001, 550.681, A-), (1001, 600.303, B), (1001, 600.315, B+), CREATE TABLE `Gradeconversion` ( lettergrade VARCHAR(2) PRIMARY KEY, gradepoint FLOAT ); Sample rows from `Gradeconversion`: (A+, 4.0), (A, 4.0), (A-, 3.7), ",
        "output": "SELECT COUNT(*) FROM department WHERE division  =  \"AS\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the open dates and years for the shop named Apple? ###filtered_database_schema: CREATE TABLE `device` ( Device_ID INT PRIMARY KEY, Device TEXT, Carrier TEXT, Package_Version TEXT, Applications TEXT, Software_Platform TEXT ); Sample rows from `device`: (1, BlackBerry Storm 9530, MTS Mobility, 5.0.0.808, 5.0.0.419, Android), (2, Apple, Verizon Wireless, 5.0.0.328, 5.0.0.328, iOS), (3, Huawei, Telus Mobility, 5.0.0.419, 5.0.0.419, Android), CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Shop_Name TEXT, Location TEXT, Open_Date TEXT, Open_Year INT ); Sample rows from `shop`: (1, Dinas Device, Dinas, 1 January, 2014), (2, Best Buy, Cymmer, 15 July, 2006), (3, Ferndale, Blaenllechau, 8 November, 2009), CREATE TABLE `stock` ( Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID), Device_ID INT PRIMARY KEY REFERENCES device(Device_ID), Quantity INT ); Sample rows from `stock`: (1, 6, 100), (2, 6, 110), (3, 6, 134), ",
        "output": "SELECT open_date ,  open_year FROM shop WHERE shop_name  =  \"Apple\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids of the problems which are reported before 1978-06-26? ###filtered_database_schema: CREATE TABLE `Problem_Category_Codes` ( problem_category_code VARCHAR(20) PRIMARY KEY, problem_category_description VARCHAR(80) ); Sample rows from `Problem_Category_Codes`: (Datatabase, Database design or contents.), (GUI, User Interface.), (Middleware, Infrastructrure and Architecture), CREATE TABLE `Problem_Log` ( problem_log_id INTEGER, assigned_to_staff_id INTEGER REFERENCES Staff(staff_id), problem_id INTEGER REFERENCES Problems(problem_id), problem_category_code VARCHAR(20) REFERENCES Problem_Category_Codes(problem_category_code), problem_status_code VARCHAR(20) REFERENCES Problem_Status_Codes(problem_status_code), log_entry_date DATETIME, log_entry_description VARCHAR(255), log_entry_fix VARCHAR(255), other_log_details VARCHAR(255) ); Sample rows from `Problem_Log`: (1, 11, 11, Middleware, Solved, 2011-03-13 13:11:57, t, k, p), (2, 11, 8, GUI, Solved, 1976-03-31 14:03:02, a, k, s), (3, 12, 1, GUI, Solved, 1974-12-11 01:06:22, b, j, e), CREATE TABLE `Problem_Status_Codes` ( problem_status_code VARCHAR(20) PRIMARY KEY, problem_status_description VARCHAR(80) ); Sample rows from `Problem_Status_Codes`: (Reported, Reported), (Solved, Solved), CREATE TABLE `Product` ( product_id INTEGER, product_name VARCHAR(80), product_details VARCHAR(255) ); Sample rows from `Product`: (1, rose, k), (2, yellow, q), (3, chat, e), CREATE TABLE `Staff` ( staff_id INTEGER, staff_first_name VARCHAR(80), staff_last_name VARCHAR(80), other_staff_details VARCHAR(255) ); Sample rows from `Staff`: (1, Lacey, Bosco, m), (2, Dameon, Frami, x), (3, Ashley, Medhurst, w), CREATE TABLE `Problems` ( problem_id INTEGER, product_id INTEGER REFERENCES Product(product_id), closure_authorised_by_staff_id INTEGER REFERENCES Staff(staff_id), reported_by_staff_id INTEGER REFERENCES Staff(staff_id), date_problem_reported DATETIME, date_problem_closed DATETIME, problem_description VARCHAR(255), other_problem_details VARCHAR(255) ); Sample rows from `Problems`: (1, 4, 4, 2, 1978-06-26 19:10:17, 2012-07-22 19:24:26, x, p), (2, 8, 3, 10, 1988-11-07 16:09:31, 1973-06-07 04:13:51, w, p), (3, 1, 4, 1, 1995-05-14 08:32:56, 1997-02-26 05:06:15, r, i), ",
        "output": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many rooms does each block floor have? ###filtered_database_schema: CREATE TABLE `Physician` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), SSN INTEGER ); Sample rows from `Physician`: (1, John Dorian, Staff Internist, 111111111), (2, Elliot Reid, Attending Physician, 222222222), (3, Christopher Turk, Surgical Attending Physician, 333333333), CREATE TABLE `Department` ( DepartmentID INTEGER, Name VARCHAR(30), Head INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Department`: (1, General Medicine, 4), (2, Surgery, 7), (3, Psychiatry, 9), CREATE TABLE `Affiliated_With` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID), PrimaryAffiliation BOOLEAN ); Sample rows from `Affiliated_With`: (1, 1, 1), (2, 1, 1), (3, 1, 0), CREATE TABLE `Procedures` ( Code INTEGER, Name VARCHAR(30), Cost REAL ); Sample rows from `Procedures`: (1, Reverse Rhinopodoplasty, 1500.0), (2, Obtuse Pyloric Recombobulation, 3750.0), (3, Folded Demiophtalmectomy, 4500.0), CREATE TABLE `Trained_In` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code), CertificationDate DATETIME, CertificationExpires DATETIME ); Sample rows from `Trained_In`: (3, 1, 2008-01-01, 2008-12-31), (3, 2, 2008-01-01, 2008-12-31), (3, 5, 2008-01-01, 2008-12-31), CREATE TABLE `Patient` ( SSN INTEGER, Name VARCHAR(30), Address VARCHAR(30), Phone VARCHAR(30), InsuranceID INTEGER, PCP INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Patient`: (100000001, John Smith, 42 Foobar Lane, 555-0256, 68476213, 1), (100000002, Grace Ritchie, 37 Snafu Drive, 555-0512, 36546321, 2), (100000003, Random J. Patient, 101 Omgbbq Street, 555-1204, 65465421, 2), CREATE TABLE `Nurse` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), Registered BOOLEAN, SSN INTEGER ); Sample rows from `Nurse`: (101, Carla Espinosa, Head Nurse, 1, 111111110), (102, Laverne Roberts, Nurse, 1, 222222220), (103, Paul Flowers, Nurse, 0, 333333330), CREATE TABLE `Appointment` ( AppointmentID INTEGER, Patient INTEGER REFERENCES Patient(SSN), PrepNurse INTEGER REFERENCES Nurse(EmployeeID), Physician INTEGER REFERENCES Physician(EmployeeID), Start DATETIME, End DATETIME, ExaminationRoom TEXT ); Sample rows from `Appointment`: (13216584, 100000001, 101, 1, 2008-04-24 10:00, 2008-04-24 11:00, A), (26548913, 100000002, 101, 2, 2008-04-24 10:00, 2008-04-24 11:00, B), (36549879, 100000001, 102, 1, 2008-04-25 10:00, 2008-04-25 11:00, A), CREATE TABLE `Medication` ( Code INTEGER, Name VARCHAR(30), Brand VARCHAR(30), Description VARCHAR(30) ); Sample rows from `Medication`: (1, Procrastin-X, X, N/A), (2, Thesisin, Foo Labs, N/A), (3, Awakin, Bar Laboratories, N/A), CREATE TABLE `Prescribes` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Medication INTEGER PRIMARY KEY REFERENCES Medication(Code), Date DATETIME PRIMARY KEY, Appointment INTEGER REFERENCES Appointment(AppointmentID), Dose VARCHAR(30) ); Sample rows from `Prescribes`: (1, 100000001, 1, 2008-04-24 10:47, 13216584, 5), (9, 100000004, 2, 2008-04-27 10:53, 86213939, 10), (9, 100000004, 2, 2008-04-30 16:53, None, 5), CREATE TABLE `Block` ( BlockFloor INTEGER PRIMARY KEY, BlockCode INTEGER PRIMARY KEY ); Sample rows from `Block`: (1, 1), (1, 2), (1, 3), CREATE TABLE `Room` ( RoomNumber INTEGER, RoomType VARCHAR(30), BlockFloor INTEGER REFERENCES Block(BlockFloor), BlockCode INTEGER REFERENCES Block(BlockCode), Unavailable BOOLEAN ); Sample rows from `Room`: (101, Single, 1, 1, 0), (102, Single, 1, 1, 0), (103, Single, 1, 1, 0), CREATE TABLE `On_Call` ( Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID), BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor), BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode), OnCallStart DATETIME PRIMARY KEY, OnCallEnd DATETIME PRIMARY KEY ); Sample rows from `On_Call`: (101, 1, 1, 2008-11-04 11:00, 2008-11-04 19:00), (101, 1, 2, 2008-11-04 11:00, 2008-11-04 19:00), (102, 1, 3, 2008-11-04 11:00, 2008-11-04 19:00), CREATE TABLE `Stay` ( StayID INTEGER, Patient INTEGER REFERENCES Patient(SSN), Room INTEGER REFERENCES Room(RoomNumber), StayStart DATETIME, StayEnd DATETIME ); Sample rows from `Stay`: (3215, 100000001, 111, 2008-05-01, 2008-05-04), (3216, 100000003, 123, 2008-05-03, 2008-05-14), (3217, 100000004, 112, 2008-05-02, 2008-05-03), CREATE TABLE `Undergoes` ( Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code), Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID), DateUndergoes DATETIME PRIMARY KEY, Physician INTEGER REFERENCES Physician(EmployeeID), AssistingNurse INTEGER REFERENCES Nurse(EmployeeID) ); Sample rows from `Undergoes`: (100000001, 6, 3215, 2008-05-02, 3, 101), (100000001, 2, 3215, 2008-05-03, 7, 101), (100000004, 1, 3217, 2008-05-07, 3, 102), ",
        "output": "SELECT COUNT(*) ,  t1.blockfloor FROM block as t1 JOIN room as t2 ON t1.blockfloor  =  t2.blockfloor AND t1.blockcode  =  t2.blockcode GROUP BY t1.blockfloor"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the different card type codes? ###filtered_database_schema: CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 6, 338, Regular), (2, 14, 562, VIP), (3, 9, 162, VIP), CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(20), customer_last_name VARCHAR(20), customer_address VARCHAR(255), customer_phone VARCHAR(255), customer_email VARCHAR(255), other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Aniyah, Feest, 55975 Theodore Estates Lake Brody, VT 57078, (673)872-5338, fahey.dorian@example.com, None), (2, Susie, Wiza, 6478 Moen Isle Suite 910 Schimmelmouth, VT 96364-4898, 679-845-8645x94312, idickinson@example.com, None), (3, Marcel, Brekke, 1965 Abernathy Plains Port Lilla, LA 44867, 1-511-656-6664, nichole.rodriguez@example.com, None), CREATE TABLE `Customers_Cards` ( card_id INTEGER, customer_id INTEGER, card_type_code VARCHAR(15), card_number VARCHAR(80), date_valid_from DATETIME, date_valid_to DATETIME, other_card_details VARCHAR(255) ); Sample rows from `Customers_Cards`: (1, 14, Credit, 4560596484842, 2011-04-17 09:05:28, 2018-03-07 17:06:19, 5567915676420343), (2, 9, Credit, 4859448397570735, 2012-05-22 02:05:41, 2018-02-25 15:43:32, 4539333582760), (3, 6, Debit, 348237249146948, 2014-08-01 14:26:45, 2018-03-24 15:29:00, 4916210554814), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, previous_transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), card_id INTEGER REFERENCES Customers_Cards(card_id), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DOUBLE, transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 925, 15, 1, Payment, 2018-03-24 06:41:41, 1701.23, None, None), (2, 494, 3, 2, Refund, 2018-03-24 12:08:55, 1931.76, None, None), (3, 642, 4, 3, Payment, 2018-03-24 09:08:27, 486.56, None, None), ",
        "output": "SELECT DISTINCT card_type_code FROM customers_cards"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the customer ids and firstname without a credit card. ###filtered_database_schema: CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 6, 338, Regular), (2, 14, 562, VIP), (3, 9, 162, VIP), CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(20), customer_last_name VARCHAR(20), customer_address VARCHAR(255), customer_phone VARCHAR(255), customer_email VARCHAR(255), other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Aniyah, Feest, 55975 Theodore Estates Lake Brody, VT 57078, (673)872-5338, fahey.dorian@example.com, None), (2, Susie, Wiza, 6478 Moen Isle Suite 910 Schimmelmouth, VT 96364-4898, 679-845-8645x94312, idickinson@example.com, None), (3, Marcel, Brekke, 1965 Abernathy Plains Port Lilla, LA 44867, 1-511-656-6664, nichole.rodriguez@example.com, None), CREATE TABLE `Customers_Cards` ( card_id INTEGER, customer_id INTEGER, card_type_code VARCHAR(15), card_number VARCHAR(80), date_valid_from DATETIME, date_valid_to DATETIME, other_card_details VARCHAR(255) ); Sample rows from `Customers_Cards`: (1, 14, Credit, 4560596484842, 2011-04-17 09:05:28, 2018-03-07 17:06:19, 5567915676420343), (2, 9, Credit, 4859448397570735, 2012-05-22 02:05:41, 2018-02-25 15:43:32, 4539333582760), (3, 6, Debit, 348237249146948, 2014-08-01 14:26:45, 2018-03-24 15:29:00, 4916210554814), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, previous_transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), card_id INTEGER REFERENCES Customers_Cards(card_id), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DOUBLE, transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 925, 15, 1, Payment, 2018-03-24 06:41:41, 1701.23, None, None), (2, 494, 3, 2, Refund, 2018-03-24 12:08:55, 1931.76, None, None), (3, 642, 4, 3, Payment, 2018-03-24 09:08:27, 486.56, None, None), ",
        "output": "SELECT customer_id ,  customer_first_name FROM customers EXCEPT SELECT t1.customer_id ,  t2.customer_first_name FROM customers_cards as t1 JOIN customers as t2 ON t1.customer_id  =  t2.customer_id WHERE card_type_code  =  \"Credit\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many accounts does the customer with first name Art and last name Turcotte have? ###filtered_database_schema: CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 6, 338, Regular), (2, 14, 562, VIP), (3, 9, 162, VIP), CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(20), customer_last_name VARCHAR(20), customer_address VARCHAR(255), customer_phone VARCHAR(255), customer_email VARCHAR(255), other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Aniyah, Feest, 55975 Theodore Estates Lake Brody, VT 57078, (673)872-5338, fahey.dorian@example.com, None), (2, Susie, Wiza, 6478 Moen Isle Suite 910 Schimmelmouth, VT 96364-4898, 679-845-8645x94312, idickinson@example.com, None), (3, Marcel, Brekke, 1965 Abernathy Plains Port Lilla, LA 44867, 1-511-656-6664, nichole.rodriguez@example.com, None), CREATE TABLE `Customers_Cards` ( card_id INTEGER, customer_id INTEGER, card_type_code VARCHAR(15), card_number VARCHAR(80), date_valid_from DATETIME, date_valid_to DATETIME, other_card_details VARCHAR(255) ); Sample rows from `Customers_Cards`: (1, 14, Credit, 4560596484842, 2011-04-17 09:05:28, 2018-03-07 17:06:19, 5567915676420343), (2, 9, Credit, 4859448397570735, 2012-05-22 02:05:41, 2018-02-25 15:43:32, 4539333582760), (3, 6, Debit, 348237249146948, 2014-08-01 14:26:45, 2018-03-24 15:29:00, 4916210554814), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, previous_transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), card_id INTEGER REFERENCES Customers_Cards(card_id), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DOUBLE, transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 925, 15, 1, Payment, 2018-03-24 06:41:41, 1701.23, None, None), (2, 494, 3, 2, Refund, 2018-03-24 12:08:55, 1931.76, None, None), (3, 642, 4, 3, Payment, 2018-03-24 09:08:27, 486.56, None, None), ",
        "output": "SELECT COUNT(*) FROM accounts as t1 JOIN customers as t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_first_name  =  \"Art\" AND t2.customer_last_name  =  \"Turcotte\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For each type of store, how many of them are there? ###filtered_database_schema: CREATE TABLE `product` ( product_id INT PRIMARY KEY, product TEXT, dimensions TEXT, dpi REAL, pages_per_minute_color REAL, max_page_size TEXT, interface TEXT ); Sample rows from `product`: (1, Fujitsu fi-6130 A4 Series Scanner, 301 x 160 x 158, 600.0, 30.0, A4, USB 2.0), (2, Plustek MobileOffice D28 Corporate, 303 x 94 x 60, 600.0, 28.0, A4, USB 2.0), (3, Xerox Travel Scanner 100, 289 x 51 x 38, 600.0, 4.0, A4, USB 2.0), CREATE TABLE `store` ( Store_ID INT PRIMARY KEY, Store_Name TEXT, Type TEXT, Area_size REAL, Number_of_product_category REAL, Ranking INT ); Sample rows from `store`: (1, Miramichi, City Mall, 179.84, 17811.0, 2), (2, Neguac, Village Store, 26.69, 1678.0, 3), (3, Rogersville, Village Store, 7.23, 1170.0, 1), CREATE TABLE `district` ( District_ID INT PRIMARY KEY, District_name TEXT, Headquartered_City TEXT, City_Population REAL, City_Area REAL ); Sample rows from `district`: (1, Attock District, Attock City, 94620.0, 20.0), (2, Bahawalnagar District, Bahawalnagar City, 134936.0, 13.0), (3, Bahawalpur District, Bahawalpur City, 530438.0, 38.0), CREATE TABLE `store_product` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), Product_ID INT PRIMARY KEY REFERENCES product(Product_ID) ); Sample rows from `store_product`: (1, 1), (1, 2), (1, 3), CREATE TABLE `store_district` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), District_ID INT REFERENCES district(District_ID) ); Sample rows from `store_district`: (1, 15), (2, 15), (3, 11), ",
        "output": "SELECT type ,  COUNT(*) FROM store GROUP BY type"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many employees are living in Canada? ###filtered_database_schema: CREATE TABLE `artists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `artists`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (genres, 25), (media_types, 5), (artists, 275), CREATE TABLE `albums` ( id INTEGER PRIMARY KEY, title VARCHAR(160), artist_id INTEGER PRIMARY KEY REFERENCES artists(id) ); Sample rows from `albums`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `employees` ( id INTEGER PRIMARY KEY, last_name VARCHAR(20), first_name VARCHAR(20), title VARCHAR(30), reports_to INTEGER PRIMARY KEY REFERENCES employees(id), birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) ); Sample rows from `employees`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `customers` ( id INTEGER PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(20), company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), support_rep_id INTEGER PRIMARY KEY REFERENCES employees(id) ); Sample rows from `customers`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `genres` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `genres`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `invoices` ( id INTEGER PRIMARY KEY, customer_id INTEGER PRIMARY KEY REFERENCES customers(id), invoice_date TIMESTAMP, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) ); Sample rows from `invoices`: (1, 2, 2007-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2007-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2007-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `media_types` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `media_types`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `tracks` ( id INTEGER PRIMARY KEY, name VARCHAR(200), album_id INTEGER PRIMARY KEY REFERENCES albums(id), media_type_id INTEGER PRIMARY KEY REFERENCES media_types(id), genre_id INTEGER PRIMARY KEY REFERENCES genres(id), composer VARCHAR(220), milliseconds INTEGER, bytes INTEGER, unit_price NUMERIC(10,2) ); Sample rows from `tracks`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), CREATE TABLE `invoice_lines` ( id INTEGER PRIMARY KEY, invoice_id INTEGER PRIMARY KEY REFERENCES invoices(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id), unit_price NUMERIC(10,2), quantity INTEGER ); Sample rows from `invoice_lines`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `playlists` ( id INTEGER PRIMARY KEY, name VARCHAR(120) ); Sample rows from `playlists`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `playlist_tracks` ( playlist_id INTEGER PRIMARY KEY REFERENCES playlists(id), track_id INTEGER PRIMARY KEY REFERENCES tracks(id) ); Sample rows from `playlist_tracks`: (1, 3402), (1, 3389), (1, 3390), ",
        "output": "SELECT COUNT(*) FROM employees WHERE country = \"Canada\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name and hours of the students whose tryout decision is yes. ###filtered_database_schema: CREATE TABLE `College` ( cName varchar(20) PRIMARY KEY, state varchar(2), enr numeric(5,0) ); Sample rows from `College`: (LSU, LA, 18000), (ASU, AZ, 12000), (OU, OK, 22000), CREATE TABLE `Player` ( pID numeric(5,0) PRIMARY KEY, pName varchar(20), yCard varchar(3), HS numeric(5,0) ); Sample rows from `Player`: (10001, Andrew, no, 1200), (20002, Blake, no, 1600), (30003, Charles, no, 300), CREATE TABLE `Tryout` ( pID numeric(5,0) PRIMARY KEY REFERENCES Player(pID), cName varchar(20) PRIMARY KEY REFERENCES College(cName), pPos varchar(8), decision varchar(3) ); Sample rows from `Tryout`: (10001, LSU, goalie, no), (10001, ASU, goalie, yes), (20002, FSU, striker, yes), ",
        "output": "SELECT t1.pname ,  t1.hs FROM player as t1 JOIN tryout as t2 ON t1.pid  =  t2.pid WHERE t2.decision  =  'yes'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the state with the highest elevation in the united states ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron? ###filtered_database_schema: CREATE TABLE `Movie` ( mID INT PRIMARY KEY, title TEXT, year INT, director TEXT ); Sample rows from `Movie`: (101, Gone with the Wind, 1939, Victor Fleming), (102, Star Wars, 1977, George Lucas), (103, The Sound of Music, 1965, Robert Wise), CREATE TABLE `Reviewer` ( rID INT PRIMARY KEY, name TEXT ); Sample rows from `Reviewer`: (201, Sarah Martinez), (202, Daniel Lewis), (203, Brittany Harris), CREATE TABLE `Rating` ( rID INT REFERENCES Reviewer(rID), mID INT REFERENCES Movie(mID), stars INT, ratingDate date ); Sample rows from `Rating`: (201, 101, 2, 2011-01-22), (201, 101, 4, 2011-01-27), (202, 106, 4, None), ",
        "output": "SELECT t2.title ,  t2.director FROM rating as t1 JOIN movie as t2 ON t1.mid  =  t2.mid WHERE t1.stars  >  (SELECT AVG(t1.stars) FROM rating as t1 JOIN movie as t2 ON t1.mid  =  t2.mid WHERE t2.director  =  \"James Cameron\")"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the name of the team and the acc during the regular season for the school that was founded the earliest. ###filtered_database_schema: CREATE TABLE `basketball_match` ( Team_ID INT PRIMARY KEY, School_ID INT REFERENCES university(School_ID), Team_Name TEXT, ACC_Regular_Season TEXT, ACC_Percent TEXT, ACC_Home TEXT, ACC_Road TEXT, All_Games TEXT, All_Games_Percent INT, All_Home TEXT, All_Road TEXT, All_Neutral TEXT ); Sample rows from `basketball_match`: (1, 1, North Carolina, 14–2, .875, 6–2, 8–0, 35–2, 0.946, 14–2, 13–0, 9–1), (2, 2, Duke, 13–3, .813, 7–1, 6–2, 28–6, 0.824, 15–1, 8–2, 5–3), (3, 4, Clemson, 10–6, .625, 7–1, 3–5, 24–10, 0.706, 14–2, 6–5, 4–3), CREATE TABLE `university` ( School_ID INT PRIMARY KEY, School TEXT, Location TEXT, Founded REAL, Affiliation TEXT, Enrollment REAL, Nickname TEXT, Primary_conference TEXT ); Sample rows from `university`: (1, University of Delaware, Newark, DE, 1743.0, Public, 19067.0, Fightin' Blue Hens, Colonial Athletic Association ( D-I )), (2, Lebanon Valley College, Annville, PA, 1866.0, Private/Methodist, 2100.0, Flying Dutchmen, MAC Commonwealth Conference ( D-III )), (3, University of Rhode Island, Kingston, RI, 1892.0, Public, 19095.0, Rams, Atlantic 10 Conference ( D-I )), ",
        "output": "SELECT t2.team_name ,  t2.acc_regular_season FROM university as t1 JOIN basketball_match as t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the last name of the musician that have produced the most songs? ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT t2.lastname FROM performance as t1 JOIN band as t2 ON t1.bandmate  =  t2.id JOIN songs as t3 ON t3.songid  =  t1.songid GROUP BY lastname ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the school code of the accounting department? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which tourist attractions does the visitor with detail 'Vincent' visit? ###filtered_database_schema: CREATE TABLE `Ref_Hotel_Star_Ratings` ( star_rating_code CHAR(15) PRIMARY KEY, star_rating_description VARCHAR(80) ); Sample rows from `Ref_Hotel_Star_Ratings`: (1, star), (2, star), (3, star), CREATE TABLE `Locations` ( Location_ID INTEGER, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Locations`: (333, Astro Orbiter, 660 Shea Crescent, None), (368, African Animals, 254 Ottilie Junction, None), (417, American Adventure, 53815 Sawayn Tunnel Apt. 297, None), CREATE TABLE `Ref_Attraction_Types` ( Attraction_Type_Code CHAR(15) PRIMARY KEY, Attraction_Type_Description VARCHAR(255) ); Sample rows from `Ref_Attraction_Types`: (2, park), (3, garden), (5, gallery), CREATE TABLE `Visitors` ( Tourist_ID INTEGER PRIMARY KEY, Tourist_Details VARCHAR(255) ); Sample rows from `Visitors`: (164, Toney), (189, Graciela), (204, Vincent), CREATE TABLE `Features` ( Feature_ID INTEGER, Feature_Details VARCHAR(255) ); Sample rows from `Features`: (523, cafe), (528, park), (543, garden), CREATE TABLE `Hotels` ( hotel_id INTEGER, star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code), pets_allowed_yn CHAR(1), price_range REAL, other_hotel_details VARCHAR(255) ); Sample rows from `Hotels`: (123, 5, 1, 2914989.571, None), (144, 4, , , None), (172, 5, , 17012.682586009, None), CREATE TABLE `Tourist_Attractions` ( Tourist_Attraction_ID INTEGER, Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code), Location_ID INTEGER REFERENCES Locations(Location_ID), How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Tourist_Attractions`: (2113, 2, 579, bus, art museum, None, None, None), (2701, 6, 417, walk, UK gallery, None, None, None), (5076, 2, 868, shuttle, flying elephant, None, None, None), CREATE TABLE `Street_Markets` ( Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Market_Details VARCHAR(255) ); Sample rows from `Street_Markets`: (6852, Broadway), (7067, Fish Farm Market), CREATE TABLE `Shops` ( Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Shop_Details VARCHAR(255) ); Sample rows from `Shops`: (8429, soup), (8449, coffee), (8698, Flower), CREATE TABLE `Museums` ( Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Museum_Details VARCHAR(255) ); Sample rows from `Museums`: (2113, Yale Center for British Art), (2701, The Metropolitan Museum of Art), (5076, MoMA), CREATE TABLE `Royal_Family` ( Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Royal_Family_Details VARCHAR(255) ); Sample rows from `Royal_Family`: (9561, None), (9919, None), CREATE TABLE `Theme_Parks` ( Theme_Park_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Theme_Park_Details VARCHAR(255) ); Sample rows from `Theme_Parks`: (5265, Disney), (6476, Sea World), (6523, Universal Studios), CREATE TABLE `Visits` ( Visit_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID), Visit_Date DATETIME, Visit_Details VARCHAR(40) ); Sample rows from `Visits`: (183, 6653, 377, 2004-08-21 03:06:14, ), (268, 5076, 204, 2013-08-06 05:35:51, ), (273, 9360, 211, 2013-10-27 09:56:08, ), CREATE TABLE `Photos` ( Photo_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Photos`: (211, 8449, game1, None, 702, None), (280, 7067, game2, None, 762, None), (303, 5076, game3, None, 392, None), CREATE TABLE `Staff` ( Staff_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(40), Other_Details VARCHAR(255) ); Sample rows from `Staff`: (170, 6476, Whitney, None), (219, 6476, Kaela, None), (237, 7067, Eunice, None), CREATE TABLE `Tourist_Attraction_Features` ( Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID) ); Sample rows from `Tourist_Attraction_Features`: (5076, 528), (5076, 681), (5265, 523), ",
        "output": "SELECT t1.name FROM tourist_attractions as t1 JOIN visits as t2 ON t1.tourist_attraction_id  =  t2.tourist_attraction_id JOIN visitors as t3 ON t2.tourist_id  =  t3.tourist_id WHERE t3.tourist_details  =  \"Vincent\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of patients who are not taking the medication of Procrastin-X. ###filtered_database_schema: CREATE TABLE `Physician` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), SSN INTEGER ); Sample rows from `Physician`: (1, John Dorian, Staff Internist, 111111111), (2, Elliot Reid, Attending Physician, 222222222), (3, Christopher Turk, Surgical Attending Physician, 333333333), CREATE TABLE `Department` ( DepartmentID INTEGER, Name VARCHAR(30), Head INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Department`: (1, General Medicine, 4), (2, Surgery, 7), (3, Psychiatry, 9), CREATE TABLE `Affiliated_With` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID), PrimaryAffiliation BOOLEAN ); Sample rows from `Affiliated_With`: (1, 1, 1), (2, 1, 1), (3, 1, 0), CREATE TABLE `Procedures` ( Code INTEGER, Name VARCHAR(30), Cost REAL ); Sample rows from `Procedures`: (1, Reverse Rhinopodoplasty, 1500.0), (2, Obtuse Pyloric Recombobulation, 3750.0), (3, Folded Demiophtalmectomy, 4500.0), CREATE TABLE `Trained_In` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code), CertificationDate DATETIME, CertificationExpires DATETIME ); Sample rows from `Trained_In`: (3, 1, 2008-01-01, 2008-12-31), (3, 2, 2008-01-01, 2008-12-31), (3, 5, 2008-01-01, 2008-12-31), CREATE TABLE `Patient` ( SSN INTEGER, Name VARCHAR(30), Address VARCHAR(30), Phone VARCHAR(30), InsuranceID INTEGER, PCP INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Patient`: (100000001, John Smith, 42 Foobar Lane, 555-0256, 68476213, 1), (100000002, Grace Ritchie, 37 Snafu Drive, 555-0512, 36546321, 2), (100000003, Random J. Patient, 101 Omgbbq Street, 555-1204, 65465421, 2), CREATE TABLE `Nurse` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), Registered BOOLEAN, SSN INTEGER ); Sample rows from `Nurse`: (101, Carla Espinosa, Head Nurse, 1, 111111110), (102, Laverne Roberts, Nurse, 1, 222222220), (103, Paul Flowers, Nurse, 0, 333333330), CREATE TABLE `Appointment` ( AppointmentID INTEGER, Patient INTEGER REFERENCES Patient(SSN), PrepNurse INTEGER REFERENCES Nurse(EmployeeID), Physician INTEGER REFERENCES Physician(EmployeeID), Start DATETIME, End DATETIME, ExaminationRoom TEXT ); Sample rows from `Appointment`: (13216584, 100000001, 101, 1, 2008-04-24 10:00, 2008-04-24 11:00, A), (26548913, 100000002, 101, 2, 2008-04-24 10:00, 2008-04-24 11:00, B), (36549879, 100000001, 102, 1, 2008-04-25 10:00, 2008-04-25 11:00, A), CREATE TABLE `Medication` ( Code INTEGER, Name VARCHAR(30), Brand VARCHAR(30), Description VARCHAR(30) ); Sample rows from `Medication`: (1, Procrastin-X, X, N/A), (2, Thesisin, Foo Labs, N/A), (3, Awakin, Bar Laboratories, N/A), CREATE TABLE `Prescribes` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Medication INTEGER PRIMARY KEY REFERENCES Medication(Code), Date DATETIME PRIMARY KEY, Appointment INTEGER REFERENCES Appointment(AppointmentID), Dose VARCHAR(30) ); Sample rows from `Prescribes`: (1, 100000001, 1, 2008-04-24 10:47, 13216584, 5), (9, 100000004, 2, 2008-04-27 10:53, 86213939, 10), (9, 100000004, 2, 2008-04-30 16:53, None, 5), CREATE TABLE `Block` ( BlockFloor INTEGER PRIMARY KEY, BlockCode INTEGER PRIMARY KEY ); Sample rows from `Block`: (1, 1), (1, 2), (1, 3), CREATE TABLE `Room` ( RoomNumber INTEGER, RoomType VARCHAR(30), BlockFloor INTEGER REFERENCES Block(BlockFloor), BlockCode INTEGER REFERENCES Block(BlockCode), Unavailable BOOLEAN ); Sample rows from `Room`: (101, Single, 1, 1, 0), (102, Single, 1, 1, 0), (103, Single, 1, 1, 0), CREATE TABLE `On_Call` ( Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID), BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor), BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode), OnCallStart DATETIME PRIMARY KEY, OnCallEnd DATETIME PRIMARY KEY ); Sample rows from `On_Call`: (101, 1, 1, 2008-11-04 11:00, 2008-11-04 19:00), (101, 1, 2, 2008-11-04 11:00, 2008-11-04 19:00), (102, 1, 3, 2008-11-04 11:00, 2008-11-04 19:00), CREATE TABLE `Stay` ( StayID INTEGER, Patient INTEGER REFERENCES Patient(SSN), Room INTEGER REFERENCES Room(RoomNumber), StayStart DATETIME, StayEnd DATETIME ); Sample rows from `Stay`: (3215, 100000001, 111, 2008-05-01, 2008-05-04), (3216, 100000003, 123, 2008-05-03, 2008-05-14), (3217, 100000004, 112, 2008-05-02, 2008-05-03), CREATE TABLE `Undergoes` ( Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code), Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID), DateUndergoes DATETIME PRIMARY KEY, Physician INTEGER REFERENCES Physician(EmployeeID), AssistingNurse INTEGER REFERENCES Nurse(EmployeeID) ); Sample rows from `Undergoes`: (100000001, 6, 3215, 2008-05-02, 3, 101), (100000001, 2, 3215, 2008-05-03, 7, 101), (100000004, 1, 3217, 2008-05-07, 3, 102), ",
        "output": "SELECT name FROM patient EXCEPT SELECT t1.name FROM patient as t1 JOIN prescribes as t2 ON t2.patient  =  t1.ssn JOIN medication as t3 ON t2.medication  =  t3.code WHERE t3.name  =  'Procrastin-X'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids of all students who have attended at least one course? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1 VARCHAR(80), line_2 VARCHAR(80), city VARCHAR(50), zip_postcode CHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (5, 0900 Roderick Oval New Albina, WA 19200-7914, Suite 096, Linnealand, 862, Montana, USA), (9, 966 Dach Ports Apt. 322 Lake Harmonyhaven, VA 65235, Apt. 163, South Minnie, 716, Texas, USA), (29, 28550 Broderick Underpass Suite 667 Zakaryhaven, WY 22945-1534, Apt. 419, North Trystanborough, 112, Vermont, USA), CREATE TABLE `People` ( person_id INTEGER, first_name VARCHAR(255), middle_name VARCHAR(255), last_name VARCHAR(255), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), login_name VARCHAR(40), password VARCHAR(40) ); Sample rows from `People`: (111, Shannon, Elissa, Senger, 01955267735, javier.trantow@example.net, pgub, 5e4ff49a61b3544da3ad7dc7e2cf28847564c64c), (121, Virginie, Jasmin, Hartmann, (508)319-2970x043, boyer.lonie@example.com, bkkv, b063331ea8116befaa7b84c59c6a22200f5f8caa), (131, Dariana, Hayley, Bednar, (262)347-9364x516, leila14@example.net, zops, b20b6a9f24aadeda70d54e410c3219f61fb063fb), CREATE TABLE `Students` ( student_id INTEGER REFERENCES People(person_id), student_details VARCHAR(255) ); Sample rows from `Students`: (111, Marry), (121, Martin), (131, Barry), CREATE TABLE `Courses` ( course_id VARCHAR(100) PRIMARY KEY, course_name VARCHAR(120), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Courses`: (301, statistics, statistics, None), (302, English, English, None), (303, French, French, None), CREATE TABLE `People_Addresses` ( person_address_id INTEGER, person_id INTEGER REFERENCES People(person_id), address_id INTEGER REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `People_Addresses`: (122, 111, 9, 2012-09-26 13:21:00, 2018-03-21 09:46:30), (257, 121, 5, 2008-07-31 02:17:25, 2018-03-09 02:11:12), (269, 131, 88, 2008-05-26 20:43:41, 2018-03-11 20:26:41), CREATE TABLE `Student_Course_Registrations` ( student_id INTEGER PRIMARY KEY REFERENCES Students(student_id), course_id INTEGER PRIMARY KEY REFERENCES Courses(course_id), registration_date DATETIME ); Sample rows from `Student_Course_Registrations`: (111, 301, 2008-11-04 10:35:13), (121, 301, 2008-10-04 10:35:13), (121, 303, 2008-11-14 10:35:13), CREATE TABLE `Student_Course_Attendance` ( student_id INTEGER PRIMARY KEY REFERENCES Student_Course_Registrations(student_id), course_id INTEGER PRIMARY KEY REFERENCES Student_Course_Registrations(course_id), date_of_attendance DATETIME ); Sample rows from `Student_Course_Attendance`: (111, 301, 2008-11-04 10:35:13), (121, 301, 2012-04-09 11:44:34), (121, 303, 2014-04-09 11:44:34), CREATE TABLE `Candidates` ( candidate_id INTEGER REFERENCES People(person_id), candidate_details VARCHAR(255) ); Sample rows from `Candidates`: (111, Jane), (121, Robert), (131, Alex), CREATE TABLE `Candidate_Assessments` ( candidate_id INTEGER PRIMARY KEY REFERENCES Candidates(candidate_id), qualification CHAR(15) PRIMARY KEY, assessment_date DATETIME, asessment_outcome_code CHAR(15) ); Sample rows from `Candidate_Assessments`: (111, A, 2010-04-07 11:44:34, Pass), (121, B, 2010-04-17 11:44:34, Pass), (131, D, 2010-04-05 11:44:34, Fail), ",
        "output": "SELECT student_id FROM student_course_attendance"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'. ###filtered_database_schema: CREATE TABLE `routes` ( rid INTEGER, dst_apid INTEGER REFERENCES airports(apid), dst_ap varchar(4), src_apid bigint REFERENCES airports(apid), src_ap varchar(4), alid bigint REFERENCES airlines(alid), airline varchar(4), codeshare TEXT ); Sample rows from `routes`: (37, 2990, KZ, 2965, AER, 410, 2B, None), (38, 2990, KZ, 2966, ASF, 410, 2B, None), (39, 2962, MRV, 2966, ASF, 410, 2B, None), CREATE TABLE `airports` ( apid INTEGER, name TEXT, city TEXT, country TEXT, x REAL, y REAL, elevation bigint, iata character varchar(3), icao character varchar(4) ); Sample rows from `airports`: (1, Goroka Airport, Goroka, Papua New Guinea, 145.391998291, -6.081689834590001, 5282, GKA, AYGA), (2, Madang Airport, Madang, Papua New Guinea, 145.789001465, -5.20707988739, 20, MAG, AYMD), (3, Mount Hagen Kagamuga Airport, Mount Hagen, Papua New Guinea, 144.29600524902344, -5.826789855957031, 5388, HGU, AYMH), CREATE TABLE `airlines` ( alid INTEGER, name TEXT, iata varchar(2), icao varchar(3), callsign TEXT, country TEXT, active varchar(2) ); Sample rows from `airlines`: (-1, Unknown, -, N/A, None, None, Y), (1, Private flight, -, N/A, , , Y), (2, 135 Airways, , GNL, GENERAL, United States, N), ",
        "output": "SELECT COUNT(*) FROM routes as t1 JOIN airports as t2 ON t1.dst_apid  =  t2.apid JOIN airlines as t3 ON t1.alid  =  t3.alid WHERE t2.country  =  'Italy' AND t3.name  =  'American Airlines'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the maximum and minimum budget of the departments? ###filtered_database_schema: CREATE TABLE `department` ( Department_ID INT PRIMARY KEY, Name TEXT, Creation TEXT, Ranking INT, Budget_in_Billions REAL, Num_Employees REAL ); Sample rows from `department`: (1, State, 1789, 1, 9.96, 30266.0), (2, Treasury, 1789, 2, 11.1, 115897.0), (3, Defense, 1947, 3, 439.3, 3000000.0), CREATE TABLE `head` ( head_ID INT PRIMARY KEY, name TEXT, born_state TEXT, age REAL ); Sample rows from `head`: (1, Tiger Woods, Alabama, 67.0), (2, Sergio García, California, 68.0), (3, K. J. Choi, Alabama, 69.0), CREATE TABLE `management` ( department_ID INT PRIMARY KEY REFERENCES department(Department_ID), head_ID INT PRIMARY KEY REFERENCES head(head_ID), temporary_acting TEXT ); Sample rows from `management`: (2, 5, Yes), (15, 4, Yes), (2, 6, Yes), ",
        "output": "SELECT MAX(budget_in_billions) ,  MIN(budget_in_billions) FROM department"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the id of the order which is shipped most recently. ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_name VARCHAR(80), customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Savannah, rerum), (2, George, est), (3, Alberto, deleniti), CREATE TABLE `Invoices` ( invoice_number INTEGER, invoice_date DATETIME, invoice_details VARCHAR(255) ); Sample rows from `Invoices`: (1, 1989-09-03 16:03:05, vitae), (2, 1989-12-11 16:40:57, magnam), (3, 1995-10-07 14:13:05, et), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(10), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 2, Shipped, 2009-02-21 15:26:19, None), (2, 11, Shipped, 1974-06-24 22:10:26, None), (3, 4, Shipped, 1982-12-29 21:10:11, None), CREATE TABLE `Products` ( product_id INTEGER, product_name VARCHAR(80), product_details VARCHAR(255) ); Sample rows from `Products`: (1, food, None), (2, book, None), (3, food, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, product_id INTEGER REFERENCES Products(product_id), order_id INTEGER REFERENCES Orders(order_id), order_item_status VARCHAR(10), order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 6, Finish, None), (2, 15, 6, Finish, None), (3, 12, 15, Finish, None), CREATE TABLE `Shipments` ( shipment_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), shipment_tracking_number VARCHAR(80), shipment_date DATETIME, other_shipment_details VARCHAR(255) ); Sample rows from `Shipments`: (1, 5, 13, 3452, 1983-08-13 22:34:11, None), (2, 7, 2, 0114, 1977-11-10 12:11:25, None), (3, 10, 5, 478, 2006-01-17 03:08:05, None), CREATE TABLE `Shipment_Items` ( shipment_id INTEGER REFERENCES Shipments(shipment_id), order_item_id INTEGER REFERENCES Order_Items(order_item_id) ); Sample rows from `Shipment_Items`: (11, 12), (10, 15), (10, 12), ",
        "output": "SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT MAX(shipment_date) FROM shipments)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many songs have used the instrument \"drums\"? ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT COUNT(*) FROM instruments WHERE instrument  =  \"drums\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the apartment number of the apartment with the most beds? ###filtered_database_schema: CREATE TABLE `Apartment_Buildings` ( building_id INTEGER PRIMARY KEY, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80) ); Sample rows from `Apartment_Buildings`: (133, Normandie Court, Normandie Court, Studio, 7950 Casper Vista Apt. 176 Marquiseberg, CA 70496, Emma, (948)040-1064x387), (153, Mercedes House, Mercedes House, Studio, 354 Otto Villages Charliefort, VT 71664, Brenden, 915-617-2408x832), (191, The Eugene, The Eugene, Flat, 71537 Gorczany Inlet Wisozkburgh, AL 08256, Melyssa, (609)946-0491), CREATE TABLE `Apartments` ( apt_id INTEGER PRIMARY KEY, building_id INTEGER REFERENCES Apartment_Buildings(building_id), apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5) ); Sample rows from `Apartments`: (1, 808, Flat, Suite 645, 1, 3, 7), (2, 624, Flat, Apt. 585, 2, 4, 5), (3, 225, Studio, Apt. 908, 1, 6, 7), CREATE TABLE `Apartment_Facilities` ( apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id), facility_code CHAR(15) PRIMARY KEY ); Sample rows from `Apartment_Facilities`: (1, Boardband), (2, Boardband), (3, Gym), CREATE TABLE `Guests` ( guest_id INTEGER PRIMARY KEY, gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME ); Sample rows from `Guests`: (1, Male, Kip, DuBuque, 1995-11-04 07:09:57), (2, Unknown, Rebeca, Runolfsdottir, 1974-05-12 21:53:58), (3, Female, Keon, Treutel, 1974-08-20 09:28:05), CREATE TABLE `Apartment_Bookings` ( apt_booking_id INTEGER PRIMARY KEY, apt_id INTEGER REFERENCES Apartments(apt_id), guest_id INTEGER REFERENCES Guests(guest_id), booking_status_code CHAR(15), booking_start_date DATETIME, booking_end_date DATETIME ); Sample rows from `Apartment_Bookings`: (258, 10, 2, Provisional, 2016-09-26 17:13:49, 2017-10-07 11:38:48), (279, 15, 15, Provisional, 2016-04-01 06:28:08, 2017-10-25 11:08:42), (337, 8, 5, Provisional, 2017-03-13 16:20:14, 2018-02-19 16:59:08), CREATE TABLE `View_Unit_Status` ( apt_id INTEGER REFERENCES Apartments(apt_id), apt_booking_id INTEGER REFERENCES Apartment_Bookings(apt_booking_id), status_date DATETIME PRIMARY KEY, available_yn BIT ); Sample rows from `View_Unit_Status`: (11, 920, 1970-09-28 10:24:29, 1), (15, 575, 1972-03-23 22:55:53, 1), (15, 924, 1973-10-28 04:30:14, 1), ",
        "output": "SELECT apt_number FROM apartments ORDER BY bedroom_count DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of the nurse who has the largest number of appointments. ###filtered_database_schema: CREATE TABLE `Physician` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), SSN INTEGER ); Sample rows from `Physician`: (1, John Dorian, Staff Internist, 111111111), (2, Elliot Reid, Attending Physician, 222222222), (3, Christopher Turk, Surgical Attending Physician, 333333333), CREATE TABLE `Department` ( DepartmentID INTEGER, Name VARCHAR(30), Head INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Department`: (1, General Medicine, 4), (2, Surgery, 7), (3, Psychiatry, 9), CREATE TABLE `Affiliated_With` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID), PrimaryAffiliation BOOLEAN ); Sample rows from `Affiliated_With`: (1, 1, 1), (2, 1, 1), (3, 1, 0), CREATE TABLE `Procedures` ( Code INTEGER, Name VARCHAR(30), Cost REAL ); Sample rows from `Procedures`: (1, Reverse Rhinopodoplasty, 1500.0), (2, Obtuse Pyloric Recombobulation, 3750.0), (3, Folded Demiophtalmectomy, 4500.0), CREATE TABLE `Trained_In` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code), CertificationDate DATETIME, CertificationExpires DATETIME ); Sample rows from `Trained_In`: (3, 1, 2008-01-01, 2008-12-31), (3, 2, 2008-01-01, 2008-12-31), (3, 5, 2008-01-01, 2008-12-31), CREATE TABLE `Patient` ( SSN INTEGER, Name VARCHAR(30), Address VARCHAR(30), Phone VARCHAR(30), InsuranceID INTEGER, PCP INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Patient`: (100000001, John Smith, 42 Foobar Lane, 555-0256, 68476213, 1), (100000002, Grace Ritchie, 37 Snafu Drive, 555-0512, 36546321, 2), (100000003, Random J. Patient, 101 Omgbbq Street, 555-1204, 65465421, 2), CREATE TABLE `Nurse` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), Registered BOOLEAN, SSN INTEGER ); Sample rows from `Nurse`: (101, Carla Espinosa, Head Nurse, 1, 111111110), (102, Laverne Roberts, Nurse, 1, 222222220), (103, Paul Flowers, Nurse, 0, 333333330), CREATE TABLE `Appointment` ( AppointmentID INTEGER, Patient INTEGER REFERENCES Patient(SSN), PrepNurse INTEGER REFERENCES Nurse(EmployeeID), Physician INTEGER REFERENCES Physician(EmployeeID), Start DATETIME, End DATETIME, ExaminationRoom TEXT ); Sample rows from `Appointment`: (13216584, 100000001, 101, 1, 2008-04-24 10:00, 2008-04-24 11:00, A), (26548913, 100000002, 101, 2, 2008-04-24 10:00, 2008-04-24 11:00, B), (36549879, 100000001, 102, 1, 2008-04-25 10:00, 2008-04-25 11:00, A), CREATE TABLE `Medication` ( Code INTEGER, Name VARCHAR(30), Brand VARCHAR(30), Description VARCHAR(30) ); Sample rows from `Medication`: (1, Procrastin-X, X, N/A), (2, Thesisin, Foo Labs, N/A), (3, Awakin, Bar Laboratories, N/A), CREATE TABLE `Prescribes` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Medication INTEGER PRIMARY KEY REFERENCES Medication(Code), Date DATETIME PRIMARY KEY, Appointment INTEGER REFERENCES Appointment(AppointmentID), Dose VARCHAR(30) ); Sample rows from `Prescribes`: (1, 100000001, 1, 2008-04-24 10:47, 13216584, 5), (9, 100000004, 2, 2008-04-27 10:53, 86213939, 10), (9, 100000004, 2, 2008-04-30 16:53, None, 5), CREATE TABLE `Block` ( BlockFloor INTEGER PRIMARY KEY, BlockCode INTEGER PRIMARY KEY ); Sample rows from `Block`: (1, 1), (1, 2), (1, 3), CREATE TABLE `Room` ( RoomNumber INTEGER, RoomType VARCHAR(30), BlockFloor INTEGER REFERENCES Block(BlockFloor), BlockCode INTEGER REFERENCES Block(BlockCode), Unavailable BOOLEAN ); Sample rows from `Room`: (101, Single, 1, 1, 0), (102, Single, 1, 1, 0), (103, Single, 1, 1, 0), CREATE TABLE `On_Call` ( Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID), BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor), BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode), OnCallStart DATETIME PRIMARY KEY, OnCallEnd DATETIME PRIMARY KEY ); Sample rows from `On_Call`: (101, 1, 1, 2008-11-04 11:00, 2008-11-04 19:00), (101, 1, 2, 2008-11-04 11:00, 2008-11-04 19:00), (102, 1, 3, 2008-11-04 11:00, 2008-11-04 19:00), CREATE TABLE `Stay` ( StayID INTEGER, Patient INTEGER REFERENCES Patient(SSN), Room INTEGER REFERENCES Room(RoomNumber), StayStart DATETIME, StayEnd DATETIME ); Sample rows from `Stay`: (3215, 100000001, 111, 2008-05-01, 2008-05-04), (3216, 100000003, 123, 2008-05-03, 2008-05-14), (3217, 100000004, 112, 2008-05-02, 2008-05-03), CREATE TABLE `Undergoes` ( Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code), Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID), DateUndergoes DATETIME PRIMARY KEY, Physician INTEGER REFERENCES Physician(EmployeeID), AssistingNurse INTEGER REFERENCES Nurse(EmployeeID) ); Sample rows from `Undergoes`: (100000001, 6, 3215, 2008-05-02, 3, 101), (100000001, 2, 3215, 2008-05-03, 7, 101), (100000004, 1, 3217, 2008-05-07, 3, 102), ",
        "output": "SELECT t1.name FROM nurse as t1 JOIN appointment as t2 ON t1.employeeid  =  t2.prepnurse GROUP BY t1.employeeid ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: brian curless 's papers on convolution ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN writes as t4 ON t4.paperid  =  t3.paperid JOIN author as t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the order id, customer id for orders in Cancelled status, ordered by their order dates. ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 28481 Crist Circle East Burdettestad, IA 21232), (2, 0292 Mitchel Pike Port Abefurt, IA 84402-4249), (3, 4062 Mante Place West Lindsey, DE 76199-8015), CREATE TABLE `Staff` ( staff_id INTEGER, staff_gender VARCHAR(1), staff_name VARCHAR(80) ); Sample rows from `Staff`: (1, 1, Tom), (2, 1, Malika), (3, 1, Katelynn), CREATE TABLE `Suppliers` ( supplier_id INTEGER, supplier_name VARCHAR(80), supplier_phone VARCHAR(80) ); Sample rows from `Suppliers`: (1, Lidl, (692)009-5928), (2, AB Store, 1-483-283-4742), (3, Tesco, 287-071-1153x254), CREATE TABLE `Department_Store_Chain` ( dept_store_chain_id INTEGER, dept_store_chain_name VARCHAR(80) ); Sample rows from `Department_Store_Chain`: (1, South), (2, West), (3, East), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method_code VARCHAR(10), customer_code VARCHAR(20), customer_name VARCHAR(80), customer_address VARCHAR(255), customer_phone VARCHAR(80), customer_email VARCHAR(80) ); Sample rows from `Customers`: (1, Credit Card, 401, Ahmed, 75099 Tremblay Port Apt. 163 South Norrisland, SC 80546, 254-072-4068x33935, margarett.vonrueden@example.com), (2, Credit Card, 665, Chauncey, 8408 Lindsay Court East Dasiabury, IL 72656-3552, +41(8)1897032009, stiedemann.sigrid@example.com), (3, Direct Debit, 844, Lukas, 7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871, 197-417-3557, joelle.monahan@example.com), CREATE TABLE `Products` ( product_id INTEGER, product_type_code VARCHAR(10), product_name VARCHAR(80), product_price DECIMAL(19,4) ); Sample rows from `Products`: (1, Clothes, red jeans, 734.73), (2, Clothes, yellow jeans, 687.23), (3, Clothes, black jeans, 695.16), CREATE TABLE `Supplier_Addresses` ( supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Supplier_Addresses`: (4, 5, 2016-09-22 16:41:31, 2018-03-14 20:06:37), (3, 9, 2014-11-07 19:18:49, 2018-03-16 16:39:58), (3, 2, 2008-11-22 12:01:25, 2018-03-02 19:50:22), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 9, 2017-12-11 05:00:22, 2018-03-20 20:52:34), (1, 6, 2017-10-07 23:00:26, 2018-02-28 14:53:52), (10, 8, 2017-04-04 20:00:27, 2018-02-27 20:08:33), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status_code VARCHAR(10), order_date DATETIME ); Sample rows from `Customer_Orders`: (1, 12, Completed, 2018-02-10 15:44:48), (2, 4, New, 2018-01-31 17:49:18), (3, 1, PartFilled, 2018-02-26 12:39:33), CREATE TABLE `Department_Stores` ( dept_store_id INTEGER, dept_store_chain_id INTEGER REFERENCES Department_Store_Chain(dept_store_chain_id), store_name VARCHAR(80), store_address VARCHAR(255), store_phone VARCHAR(80), store_email VARCHAR(80) ); Sample rows from `Department_Stores`: (1, 1, store_name, 01290 Jeremie Parkway Suite 753 North Arielle, MS 51249, (948)944-5099x2027, bmaggio@example.com), (2, 3, store_name, 082 Purdy Expressway O'Connellshire, IL 31732, 877-917-5029, larissa10@example.org), (3, 4, store_name, 994 Travis Plains North Wadeton, WV 27575-3951, 1-216-312-0375, alexandro.mcclure@example.net), CREATE TABLE `Departments` ( department_id INTEGER, dept_store_id INTEGER REFERENCES Department_Stores(dept_store_id), department_name VARCHAR(80) ); Sample rows from `Departments`: (1, 5, human resource), (2, 11, purchasing), (3, 4, marketing), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id) ); Sample rows from `Order_Items`: (1, 9, 7), (2, 1, 3), (3, 5, 2), CREATE TABLE `Product_Suppliers` ( product_id INTEGER PRIMARY KEY REFERENCES Products(product_id), supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), date_supplied_from DATETIME, date_supplied_to DATETIME, total_amount_purchased VARCHAR(80), total_value_purchased DECIMAL(19,4) ); Sample rows from `Product_Suppliers`: (4, 3, 2017-06-19 00:49:05, 2018-03-24 19:29:18, 89366.05, 36014.6), (8, 4, 2017-07-02 00:35:12, 2018-03-25 07:30:49, 25085.57, 36274.56), (3, 3, 2017-10-14 19:15:37, 2018-03-24 02:29:44, 15752.45, 7273.74), CREATE TABLE `Staff_Department_Assignments` ( staff_id INTEGER PRIMARY KEY REFERENCES Staff(staff_id), department_id INTEGER PRIMARY KEY REFERENCES Departments(department_id), date_assigned_from DATETIME, job_title_code VARCHAR(10), date_assigned_to DATETIME ); Sample rows from `Staff_Department_Assignments`: (5, 4, 2017-06-11 22:55:20, Department Manager, 2018-03-23 21:59:11), (10, 5, 2017-12-18 19:12:15, Sales Person, 2018-03-23 20:25:24), (1, 5, 2018-02-14 03:15:29, Clerical Staff, 2018-03-24 19:57:56), ",
        "output": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the names of people aged either 35 or 36. ###filtered_database_schema: CREATE TABLE `people` ( People_ID INT PRIMARY KEY, District TEXT, Name TEXT, Party TEXT, Age INT ); Sample rows from `people`: (1, New York 1, Luther C. Carter, Republican, 35), (2, New York 2, James Humphrey, Republican, 38), (3, New York 3, Daniel Sickles, Democratic, 46), CREATE TABLE `debate` ( Debate_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Num_of_Audience INT ); Sample rows from `debate`: (1, October 21, 2011, Manama , Bahrain, 342), (2, December 17, 2014, Doha , Qatar, 134), (3, August 3, 2015, Manama , Bahrain, 90), CREATE TABLE `debate_people` ( Debate_ID INT PRIMARY KEY REFERENCES debate(Debate_ID), Affirmative INT PRIMARY KEY REFERENCES people(People_ID), Negative INT PRIMARY KEY REFERENCES people(People_ID), If_Affirmative_Win bool ); Sample rows from `debate_people`: (1, 1, 10, F), (5, 2, 8, F), (3, 4, 7, T), ",
        "output": "SELECT name FROM  people WHERE age  =  35 OR age  =  36"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of tracks that are of the media type \"AAC audio file\". ###filtered_database_schema: CREATE TABLE `Album` ( AlbumId INTEGER, Title varchar(160), ArtistId INTEGER PRIMARY KEY REFERENCES Artist(ArtistId) ); Sample rows from `Album`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `Artist` ( ArtistId INTEGER, Name varchar(120) ); Sample rows from `Artist`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `Customer` ( CustomerId INTEGER, FirstName varchar(40), LastName varchar(20), Company varchar(80), Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60), SupportRepId INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId) ); Sample rows from `Customer`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `Employee` ( EmployeeId INTEGER, LastName varchar(20), FirstName varchar(20), Title varchar(30), ReportsTo INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId), BirthDate datetime, HireDate datetime, Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60) ); Sample rows from `Employee`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `Genre` ( GenreId INTEGER, Name varchar(120) ); Sample rows from `Genre`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `Invoice` ( InvoiceId INTEGER, CustomerId INTEGER PRIMARY KEY REFERENCES Customer(CustomerId), InvoiceDate datetime, BillingAddress varchar(70), BillingCity varchar(40), BillingState varchar(40), BillingCountry varchar(40), BillingPostalCode varchar(10), Total decimal(10,2) ); Sample rows from `Invoice`: (1, 2, 2009-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2009-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2009-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `InvoiceLine` ( InvoiceLineId INTEGER, InvoiceId INTEGER PRIMARY KEY REFERENCES Invoice(InvoiceId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId), UnitPrice decimal(10,2), Quantity INTEGER ); Sample rows from `InvoiceLine`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `MediaType` ( MediaTypeId INTEGER, Name varchar(120) ); Sample rows from `MediaType`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `Playlist` ( PlaylistId INTEGER, Name varchar(120) ); Sample rows from `Playlist`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `PlaylistTrack` ( PlaylistId INTEGER PRIMARY KEY REFERENCES Playlist(PlaylistId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId) ); Sample rows from `PlaylistTrack`: (1, 1), (8, 1), (17, 1), CREATE TABLE `Track` ( TrackId INTEGER, Name varchar(200), AlbumId INTEGER PRIMARY KEY REFERENCES Album(AlbumId), MediaTypeId INTEGER PRIMARY KEY REFERENCES MediaType(MediaTypeId), GenreId INTEGER PRIMARY KEY REFERENCES Genre(GenreId), Composer varchar(220), Milliseconds INTEGER, Bytes INTEGER, UnitPrice decimal(10,2) ); Sample rows from `Track`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), ",
        "output": "SELECT COUNT(*) FROM mediatype as t1 JOIN track as t2 ON t1.mediatypeid  =  t2.mediatypeid WHERE t1.name  =  \"AAC audio file\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the length of the longest river in the usa ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT length FROM river WHERE length  =  ( SELECT MAX(length) FROM river );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the distinct names of all wines that have prices higher than some wines from John Anthony winery. ###filtered_database_schema: CREATE TABLE `grapes` ( ID INTEGER, Grape TEXT PRIMARY KEY, Color TEXT ); Sample rows from `grapes`: (1, Barbera, Red), (2, Cabernet Franc, Red), (3, Cabernet Sauvingnon, Red), CREATE TABLE `appellations` ( No INTEGER, Appelation TEXT PRIMARY KEY, County TEXT, State TEXT, Area TEXT, isAVA TEXT ); Sample rows from `appellations`: (1, Alexander Valley, Sonoma, California, North Coast, Yes), (2, Amador County, Amador, California, Sierra Foothills, No), (3, Amador-Mendocino-Sonoma Counties, N/A, California, N/A, No), CREATE TABLE `wine` ( No INTEGER, Grape TEXT REFERENCES grapes(Grape), Winery TEXT, Appelation TEXT REFERENCES appellations(Appelation), State TEXT, Name TEXT, Year INTEGER, Price INTEGER, Score INTEGER, Cases INTEGER, Drink TEXT ); Sample rows from `wine`: (1, Zinfandel, Robert Biale, St. Helena, California, Old Kraft Vineyard, 2008, 44, 93, 275, now), (2, Zinfandel, Chiarello Family, Napa Valley, California, Giana, 2008, 35, 93, 480, now), (3, Zinfandel, Robert Biale, Napa Valley, California, Black Chicken, 2008, 40, 91, 2700, 2012), ",
        "output": "SELECT DISTINCT name FROM wine WHERE price  >  (SELECT MIN(price) FROM wine WHERE winery  =  \"John Anthony\")"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what has Liwen Xiong done in the past year ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN paper as t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of courses without prerequisites? ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are some papers dealing with Semantic Data in YAGO ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t2.paperid FROM paperdataset as t3 JOIN dataset as t1 ON t3.datasetid  =  t1.datasetid JOIN paperkeyphrase as t2 ON t2.paperid  =  t3.paperid JOIN keyphrase as t4 ON t2.keyphraseid  =  t4.keyphraseid WHERE t1.datasetname  =  \"YAGO\" AND t4.keyphrasename  =  \"Semantic Data\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the id and full name of the customer with the most accounts. ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(50), customer_middle_initial VARCHAR(1), customer_last_name VARCHAR(50), gender VARCHAR(1), email_address VARCHAR(255), login_name VARCHAR(80), login_password VARCHAR(20), phone_number VARCHAR(255), town_city VARCHAR(50), state_county_province VARCHAR(50), country VARCHAR(50) ); Sample rows from `Customers`: (1, Dee, A, Larkin, 1, thora.torphy@example.org, xhartmann, 77789d292604ea04406f, 241.796.1219x37862, North Nellie, WestVirginia, USA), (2, Brennon, H, Weimann, 0, roosevelt.collier@example.org, shayne.lesch, ce97a3e4539347daab96, (943)219-4234x415, South Isabell, Oklahoma, USA), (3, Joesph, K, Schaefer, 0, homenick.ambrose@example.net, feeney.lauriane, a6c7a7064c36b038d402, (488)524-5345, New Nikolas, Arkansas, USA), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 12, 2012-06-27 20:49:56, None), (2, 12, 2012-08-25 07:51:54, None), (3, 8, 2017-11-05 15:32:38, None), CREATE TABLE `Invoices` ( invoice_number INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_date DATETIME ); Sample rows from `Invoices`: (1, 9, 2018-03-01 16:40:48), (2, 9, 2018-03-20 00:21:41), (3, 3, 2018-03-05 08:47:33), CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_account_opened DATETIME, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 8, 2016-07-30 22:22:24, 900, Regular), (2, 3, 2017-05-29 16:45:17, 520, VIP), (3, 8, 2012-05-04 18:50:32, 323, Regular), CREATE TABLE `Product_Categories` ( production_type_code VARCHAR(15) PRIMARY KEY, product_type_description VARCHAR(80), vat_rating DECIMAL(19,4) ); Sample rows from `Product_Categories`: (Food, Food, 15.84), (DVDs, Dvd products, 11.4), (Books, Books, 13.95), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, production_type_code VARCHAR(15) REFERENCES Product_Categories(production_type_code), unit_price DECIMAL(19,4), product_name VARCHAR(80), product_color VARCHAR(20), product_size VARCHAR(20) ); Sample rows from `Products`: (1, 4, Food, 617.95, Coffee Bean, Red, Medium), (2, 4, Books, 558.49, Learning French, Yellow, Medium), (3, 8, Electronics, 563.58, Fans, Black, Medium), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DECIMAL(19,4), transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 13, 12, Payment, 2018-03-15 21:13:57, 613.96, None, None), (2, 9, 1, Payment, 2018-03-13 13:27:46, 368.46, None, None), (3, 6, 1, Refund, 2018-03-03 01:50:25, 1598.25, None, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), product_id INTEGER REFERENCES Products(product_id), product_quantity VARCHAR(50), other_order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 4, 6, None), (2, 4, 10, 7, None), (3, 15, 5, 4, None), CREATE TABLE `Invoice_Line_Items` ( order_item_id INTEGER REFERENCES Order_Items(order_item_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), product_id INTEGER REFERENCES Products(product_id), product_title VARCHAR(80), product_quantity VARCHAR(50), product_price DECIMAL(19,4), derived_product_cost DECIMAL(19,4), derived_vat_payable DECIMAL(19,4), derived_total_cost DECIMAL(19,4) ); Sample rows from `Invoice_Line_Items`: (14, 9, 5, prod_name, 4, 742.37, 191.11, None, 69.82), (3, 9, 15, prod_name, 1, 814.87, 176.29, None, 59.56), (4, 10, 15, prod_name, 8, 943.07, 73.14, None, 59.93), ",
        "output": "SELECT t1.customer_id ,  t2.customer_first_name ,  t2.customer_last_name FROM accounts as t1 JOIN customers as t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the positions with both players having more than 20 points and less than 10 points. ###filtered_database_schema: CREATE TABLE `club` ( Club_ID INT PRIMARY KEY, name TEXT, Region TEXT, Start_year TEXT ); Sample rows from `club`: (1, AIB, USA, 2009), (2, BK Slide, UK, 1998), (3, IFG, China, 2005), CREATE TABLE `club_rank` ( Rank REAL PRIMARY KEY, Club_ID INT PRIMARY KEY REFERENCES club(Club_ID), Gold REAL, Silver REAL, Bronze REAL, Total REAL ); Sample rows from `club_rank`: (1.0, 2, 11.0, 11.0, 9.0, 31.0), (2.0, 3, 8.0, 7.0, 6.0, 21.0), (3.0, 1, 7.0, 4.0, 2.0, 13.0), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, name TEXT, Position TEXT, Club_ID INT REFERENCES club(Club_ID), Apps REAL, Tries REAL, Goals TEXT, Points REAL ); Sample rows from `player`: (1, Michael Platt, Full Back, 1, 20.0, 5.0, 0, 20.0), (2, Dave Halley, Right Wing, 2, 23.0, 9.0, 0, 36.0), (3, James Evans, Right Centre, 1, 30.0, 9.0, 0, 36.0), CREATE TABLE `competition` ( Competition_ID INT PRIMARY KEY, Year REAL, Competition_type TEXT, Country TEXT ); Sample rows from `competition`: (1, 2006.0, Friendly, Italy), (2, 2006.0, Friendly, Spain), (3, 2006.0, Friendly, Australia), CREATE TABLE `competition_result` ( Competition_ID INT PRIMARY KEY REFERENCES competition(Competition_ID), Club_ID_1 INT PRIMARY KEY REFERENCES club(Club_ID), Club_ID_2 INT PRIMARY KEY REFERENCES club(Club_ID), Score TEXT ); Sample rows from `competition_result`: (1, 1, 2, 11:10), (2, 3, 2, 25:2), (10, 4, 2, 13:10), ",
        "output": "SELECT position FROM player WHERE points  >  20 INTERSECT SELECT position FROM player WHERE points  <  10"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the id of the trip that started from the station with the highest dock count? ###filtered_database_schema: CREATE TABLE `station` ( id INTEGER, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT ); Sample rows from `station`: (2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013), (3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013), (4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013), CREATE TABLE `status` ( station_id INTEGER REFERENCES station(id), bikes_available INTEGER, docks_available INTEGER, time TEXT ); Sample rows from `status`: (3, 12, 3, 2015-06-02 12:46:02), (3, 12, 3, 2015-06-02 12:47:02), (3, 12, 3, 2015-06-02 12:48:02), CREATE TABLE `trip` ( id INTEGER, duration INTEGER, start_date TEXT, start_station_name TEXT, start_station_id INTEGER, end_date TEXT, end_station_name TEXT, end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER ); Sample rows from `trip`: (900504, 384, 8/21/2015 17:03, Howard at 2nd, 63, 8/21/2015 17:10, San Francisco Caltrain 2 (330 Townsend), 69, 454, Subscriber, 94041), (900505, 588, 8/21/2015 17:03, South Van Ness at Market, 66, 8/21/2015 17:13, San Francisco Caltrain 2 (330 Townsend), 69, 574, Subscriber, 95119), (900506, 196, 8/21/2015 17:04, Market at Sansome, 77, 8/21/2015 17:07, Harry Bridges Plaza (Ferry Building), 50, 636, Subscriber, 94925), CREATE TABLE `weather` ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER ); Sample rows from `weather`: (8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107), (8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107), (8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107), ",
        "output": "SELECT t1.id FROM trip as t1 JOIN station as t2 ON t1.start_station_id  =  t2.id ORDER BY t2.dock_count DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are all locations of train stations? ###filtered_database_schema: CREATE TABLE `station` ( Station_ID INT PRIMARY KEY, Name TEXT, Annual_entry_exit REAL, Annual_interchanges REAL, Total_Passengers REAL, Location TEXT, Main_Services TEXT, Number_of_Platforms INT ); Sample rows from `station`: (1, London Waterloo, 94.046, 9.489, 103.534, London, South Western Main Line West of England Main Line, 19), (2, London Victoria, 76.231, 9.157, 85.38, London, Brighton Main Line Chatham Main Line, 19), (3, London Bridge, 52.634, 8.742, 61.376, London, South Eastern Main Line Thameslink, 12), CREATE TABLE `train` ( Train_ID INT PRIMARY KEY, Name TEXT, Time TEXT, Service TEXT ); Sample rows from `train`: (1, Ananthapuri Express, 17:15, Daily), (2, Guruvayur Express, 22:10, Daily), (3, Guruvayur Express, 4:49, Daily), CREATE TABLE `train_station` ( Train_ID INT PRIMARY KEY REFERENCES train(Train_ID), Station_ID INT PRIMARY KEY REFERENCES station(Station_ID) ); Sample rows from `train_station`: (1, 1), (2, 1), (3, 1), ",
        "output": "SELECT DISTINCT location FROM station"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Please show the nominee who has been nominated the greatest number of times. ###filtered_database_schema: CREATE TABLE `musical` ( Musical_ID INT PRIMARY KEY, Name TEXT, Year INT, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT ); Sample rows from `musical`: (1, The Phantom of the Opera, 1986, Tony Award, Best Book of a Musical, Bob Fosse, Nominated), (2, Les Misérables, 1986, Tony Award, Best Performance by a Leading Actor in a Musical, Cleavant Derricks, Nominated), (3, Wicked, 1986, Tony Award, Best Direction of a Musical, Bob Fosse, Nominated), CREATE TABLE `actor` ( Actor_ID INT PRIMARY KEY, Name TEXT, Musical_ID INT REFERENCES actor(Actor_ID), Character TEXT, Duration TEXT, age INT ); Sample rows from `actor`: (1, Ray Meagher, 1, Alf Stewart, 1988—, 26), (2, Tom Oliver, 1, Lou Carpenter, 1988, 1992—, 22), (3, Lynne McGranger, 2, Irene Roberts, 1993—, 21), ",
        "output": "SELECT nominee FROM musical GROUP BY nominee ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the different ids and names of the stations that have had more than 12 bikes available? ###filtered_database_schema: CREATE TABLE `station` ( id INTEGER, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT ); Sample rows from `station`: (2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013), (3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013), (4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013), CREATE TABLE `status` ( station_id INTEGER REFERENCES station(id), bikes_available INTEGER, docks_available INTEGER, time TEXT ); Sample rows from `status`: (3, 12, 3, 2015-06-02 12:46:02), (3, 12, 3, 2015-06-02 12:47:02), (3, 12, 3, 2015-06-02 12:48:02), CREATE TABLE `trip` ( id INTEGER, duration INTEGER, start_date TEXT, start_station_name TEXT, start_station_id INTEGER, end_date TEXT, end_station_name TEXT, end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER ); Sample rows from `trip`: (900504, 384, 8/21/2015 17:03, Howard at 2nd, 63, 8/21/2015 17:10, San Francisco Caltrain 2 (330 Townsend), 69, 454, Subscriber, 94041), (900505, 588, 8/21/2015 17:03, South Van Ness at Market, 66, 8/21/2015 17:13, San Francisco Caltrain 2 (330 Townsend), 69, 574, Subscriber, 95119), (900506, 196, 8/21/2015 17:04, Market at Sansome, 77, 8/21/2015 17:07, Harry Bridges Plaza (Ferry Building), 50, 636, Subscriber, 94925), CREATE TABLE `weather` ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER ); Sample rows from `weather`: (8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107), (8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107), (8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107), ",
        "output": "SELECT DISTINCT t1.id ,  t1.name FROM station as t1 JOIN status as t2 ON t1.id  =  t2.station_id WHERE t2.bikes_available  >  12"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: author published acl 2016 ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many students are 18 years old? ###filtered_database_schema: CREATE TABLE `Allergy_Type` ( Allergy VARCHAR(20) PRIMARY KEY, AllergyType VARCHAR(20) ); Sample rows from `Allergy_Type`: (Eggs, food), (Nuts, food), (Milk, food), CREATE TABLE `Has_Allergy` ( StuID INTEGER REFERENCES Student(StuID), Allergy VARCHAR(20) REFERENCES Allergy_Type(Allergy) ); Sample rows from `Has_Allergy`: (1001, Cat), (1002, Shellfish), (1002, Tree Pollen), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), ",
        "output": "SELECT COUNT(*) FROM student WHERE age  =  18"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many papers related to deep reinforcement learning in nips ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(t3.paperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"deep reinforcement learning\" AND t4.venuename  =  \"nips\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: how many different positions are there? ###filtered_database_schema: CREATE TABLE `club` ( Club_ID INT PRIMARY KEY, name TEXT, Region TEXT, Start_year TEXT ); Sample rows from `club`: (1, AIB, USA, 2009), (2, BK Slide, UK, 1998), (3, IFG, China, 2005), CREATE TABLE `club_rank` ( Rank REAL PRIMARY KEY, Club_ID INT PRIMARY KEY REFERENCES club(Club_ID), Gold REAL, Silver REAL, Bronze REAL, Total REAL ); Sample rows from `club_rank`: (1.0, 2, 11.0, 11.0, 9.0, 31.0), (2.0, 3, 8.0, 7.0, 6.0, 21.0), (3.0, 1, 7.0, 4.0, 2.0, 13.0), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, name TEXT, Position TEXT, Club_ID INT REFERENCES club(Club_ID), Apps REAL, Tries REAL, Goals TEXT, Points REAL ); Sample rows from `player`: (1, Michael Platt, Full Back, 1, 20.0, 5.0, 0, 20.0), (2, Dave Halley, Right Wing, 2, 23.0, 9.0, 0, 36.0), (3, James Evans, Right Centre, 1, 30.0, 9.0, 0, 36.0), CREATE TABLE `competition` ( Competition_ID INT PRIMARY KEY, Year REAL, Competition_type TEXT, Country TEXT ); Sample rows from `competition`: (1, 2006.0, Friendly, Italy), (2, 2006.0, Friendly, Spain), (3, 2006.0, Friendly, Australia), CREATE TABLE `competition_result` ( Competition_ID INT PRIMARY KEY REFERENCES competition(Competition_ID), Club_ID_1 INT PRIMARY KEY REFERENCES club(Club_ID), Club_ID_2 INT PRIMARY KEY REFERENCES club(Club_ID), Score TEXT ); Sample rows from `competition_result`: (1, 1, 2, 11:10), (2, 3, 2, 25:2), (10, 4, 2, 13:10), ",
        "output": "SELECT COUNT(DISTINCT position) FROM player"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the names of representatives that have not participated in elections listed here. ###filtered_database_schema: CREATE TABLE `election` ( Election_ID INT PRIMARY KEY, Representative_ID INT REFERENCES representative(Representative_ID), Date TEXT, Votes REAL, Vote_Percent REAL, Seats REAL, Place REAL ); Sample rows from `election`: (1, 1, July 1942, 9423.0, 16.2, 6.0, 3.0), (2, 2, October 1942, 11059.0, 18.5, 10.0, 1.0), (3, 4, 1946, 13049.0, 19.5, 10.0, 2.0), CREATE TABLE `representative` ( Representative_ID INT PRIMARY KEY, Name TEXT, State TEXT, Party TEXT, Lifespan TEXT ); Sample rows from `representative`: (1, Dan Quayle, Indiana, Republican, 1947–), (2, John Quayle, New York, Democratic, 1868–1930), (3, Al Quie, Minnesota, Republican, 1923–), ",
        "output": "SELECT name FROM representative WHERE representative_id NOT IN (SELECT representative_id FROM election)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the list of documents that are both in the most three popular type and have the most three popular structure. ###filtered_database_schema: CREATE TABLE `Roles` ( role_code VARCHAR(15) PRIMARY KEY, role_description VARCHAR(80) ); Sample rows from `Roles`: (DBA, Database Administrator), (PROJ-MGR, Project Manager), CREATE TABLE `Users` ( user_id INTEGER, role_code VARCHAR(15) REFERENCES Roles(role_code), user_name VARCHAR(40), user_login VARCHAR(40), password VARCHAR(40) ); Sample rows from `Users`: (1, PROJ-MGR, dickens.elta, 0, e72b5a2d50b39a8760764a5f7a9d68ca2f076877), (2, DBA, tremblay.raheem, 1, 9bc25a040d5647ced5ec32e1a455e90fafc10bcb), (3, DBA, lynn.haley, 0, 90db8f51449e6c39e2a01f0b649d5a92fe76bbbb), CREATE TABLE `Document_Structures` ( document_structure_code VARCHAR(15) PRIMARY KEY, parent_document_structure_code VARCHAR(15), document_structure_description VARCHAR(80) ); Sample rows from `Document_Structures`: (1, 1, Header), (6, 1, Main section), (8, 1, Bib), CREATE TABLE `Functional_Areas` ( functional_area_code VARCHAR(15) PRIMARY KEY, parent_functional_area_code VARCHAR(15), functional_area_description VARCHAR(80) ); Sample rows from `Functional_Areas`: (8, 8, Signature), (1, 8, Acknowledgement), (9, 8, Keep blank), CREATE TABLE `Images` ( image_id INTEGER, image_alt_text VARCHAR(80), image_name VARCHAR(40), image_url VARCHAR(255) ); Sample rows from `Images`: (1, Lea, top1, http://www.rempelnader.com/1.jpg), (2, Arden, top2, http://connellykertzmann.org/1.jpg), (3, Mohamed, top3, http://www.bernierconnelly.com/1.jpg), CREATE TABLE `Documents` ( document_code VARCHAR(15) PRIMARY KEY, document_structure_code VARCHAR(15) REFERENCES Document_Structures(document_structure_code), document_type_code VARCHAR(15), access_count INTEGER, document_name VARCHAR(80) ); Sample rows from `Documents`: (217, 8, Book, 1864, Learning English), (621, 1, Paper, 8208, Research about Art history), (958, 8, Book, 3769, Learning Database), CREATE TABLE `Document_Functional_Areas` ( document_code VARCHAR(15) REFERENCES Documents(document_code), functional_area_code VARCHAR(15) REFERENCES Functional_Areas(functional_area_code) ); Sample rows from `Document_Functional_Areas`: (675, 9), (930, 1), (217, 1), CREATE TABLE `Document_Sections` ( section_id INTEGER, document_code VARCHAR(15) REFERENCES Documents(document_code), section_sequence INTEGER, section_code VARCHAR(20), section_title VARCHAR(80) ); Sample rows from `Document_Sections`: (12, 714, 6072, 70, after), (15, 217, 4510, 14, after), (19, 675, 7236, 90, after), CREATE TABLE `Document_Sections_Images` ( section_id INTEGER PRIMARY KEY REFERENCES Document_Sections(section_id), image_id INTEGER PRIMARY KEY REFERENCES Images(image_id) ); Sample rows from `Document_Sections_Images`: (93, 6), (86, 2), (27, 3), ",
        "output": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY COUNT(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY COUNT(*) DESC LIMIT 3"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which wineries produce at least four wines? ###filtered_database_schema: CREATE TABLE `grapes` ( ID INTEGER, Grape TEXT PRIMARY KEY, Color TEXT ); Sample rows from `grapes`: (1, Barbera, Red), (2, Cabernet Franc, Red), (3, Cabernet Sauvingnon, Red), CREATE TABLE `appellations` ( No INTEGER, Appelation TEXT PRIMARY KEY, County TEXT, State TEXT, Area TEXT, isAVA TEXT ); Sample rows from `appellations`: (1, Alexander Valley, Sonoma, California, North Coast, Yes), (2, Amador County, Amador, California, Sierra Foothills, No), (3, Amador-Mendocino-Sonoma Counties, N/A, California, N/A, No), CREATE TABLE `wine` ( No INTEGER, Grape TEXT REFERENCES grapes(Grape), Winery TEXT, Appelation TEXT REFERENCES appellations(Appelation), State TEXT, Name TEXT, Year INTEGER, Price INTEGER, Score INTEGER, Cases INTEGER, Drink TEXT ); Sample rows from `wine`: (1, Zinfandel, Robert Biale, St. Helena, California, Old Kraft Vineyard, 2008, 44, 93, 275, now), (2, Zinfandel, Chiarello Family, Napa Valley, California, Giana, 2008, 35, 93, 480, now), (3, Zinfandel, Robert Biale, Napa Valley, California, Black Chicken, 2008, 40, 91, 2700, 2012), ",
        "output": "SELECT winery FROM wine GROUP BY winery HAVING COUNT(*)  >=  4"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what city has the most people ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT t1.stu_fname FROM student as t1 JOIN enroll as t2 ON t1.stu_num  =  t2.stu_num JOIN CLasS as t3 ON t2.class_code  =  t3.class_code WHERE t3.crs_code  =  'ACCT-211' AND t1.stu_lname LIKE 'S%'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many different genders are there in the dorms? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Dorm` ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) ); Sample rows from `Dorm`: (100, Smith Hall, 85, X), (110, Bud Jones Hall, 116, M), (140, Fawlty Towers, 355, X), CREATE TABLE `Dorm_amenity` ( amenid INTEGER, amenity_name VARCHAR(25) ); Sample rows from `Dorm_amenity`: (900, TV Lounge), (901, Study Room), (902, Pub in Basement), CREATE TABLE `Has_amenity` ( dormid INTEGER REFERENCES Dorm(dormid), amenid INTEGER REFERENCES Dorm_amenity(amenid) ); Sample rows from `Has_amenity`: (109, 900), (109, 901), (109, 903), CREATE TABLE `Lives_in` ( stuid INTEGER REFERENCES Student(StuID), dormid INTEGER REFERENCES Dorm(dormid), room_number INTEGER ); Sample rows from `Lives_in`: (1001, 109, 105), (1002, 100, 112), (1003, 100, 124), ",
        "output": "SELECT COUNT(DISTINCT gender) FROM dorm"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the papers in VLDB conference containing keyword \" Information Retrieval \" . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT t4.title FROM publication_keyword as t3 JOIN keyword as t1 ON t3.kid  =  t1.kid JOIN publication as t4 ON t4.pid  =  t3.pid JOIN conference as t2 ON t4.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t1.keyword  =  \"Information Retrieval\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which patient is undergoing the most recent treatment? ###filtered_database_schema: CREATE TABLE `Physician` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), SSN INTEGER ); Sample rows from `Physician`: (1, John Dorian, Staff Internist, 111111111), (2, Elliot Reid, Attending Physician, 222222222), (3, Christopher Turk, Surgical Attending Physician, 333333333), CREATE TABLE `Department` ( DepartmentID INTEGER, Name VARCHAR(30), Head INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Department`: (1, General Medicine, 4), (2, Surgery, 7), (3, Psychiatry, 9), CREATE TABLE `Affiliated_With` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID), PrimaryAffiliation BOOLEAN ); Sample rows from `Affiliated_With`: (1, 1, 1), (2, 1, 1), (3, 1, 0), CREATE TABLE `Procedures` ( Code INTEGER, Name VARCHAR(30), Cost REAL ); Sample rows from `Procedures`: (1, Reverse Rhinopodoplasty, 1500.0), (2, Obtuse Pyloric Recombobulation, 3750.0), (3, Folded Demiophtalmectomy, 4500.0), CREATE TABLE `Trained_In` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code), CertificationDate DATETIME, CertificationExpires DATETIME ); Sample rows from `Trained_In`: (3, 1, 2008-01-01, 2008-12-31), (3, 2, 2008-01-01, 2008-12-31), (3, 5, 2008-01-01, 2008-12-31), CREATE TABLE `Patient` ( SSN INTEGER, Name VARCHAR(30), Address VARCHAR(30), Phone VARCHAR(30), InsuranceID INTEGER, PCP INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Patient`: (100000001, John Smith, 42 Foobar Lane, 555-0256, 68476213, 1), (100000002, Grace Ritchie, 37 Snafu Drive, 555-0512, 36546321, 2), (100000003, Random J. Patient, 101 Omgbbq Street, 555-1204, 65465421, 2), CREATE TABLE `Nurse` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), Registered BOOLEAN, SSN INTEGER ); Sample rows from `Nurse`: (101, Carla Espinosa, Head Nurse, 1, 111111110), (102, Laverne Roberts, Nurse, 1, 222222220), (103, Paul Flowers, Nurse, 0, 333333330), CREATE TABLE `Appointment` ( AppointmentID INTEGER, Patient INTEGER REFERENCES Patient(SSN), PrepNurse INTEGER REFERENCES Nurse(EmployeeID), Physician INTEGER REFERENCES Physician(EmployeeID), Start DATETIME, End DATETIME, ExaminationRoom TEXT ); Sample rows from `Appointment`: (13216584, 100000001, 101, 1, 2008-04-24 10:00, 2008-04-24 11:00, A), (26548913, 100000002, 101, 2, 2008-04-24 10:00, 2008-04-24 11:00, B), (36549879, 100000001, 102, 1, 2008-04-25 10:00, 2008-04-25 11:00, A), CREATE TABLE `Medication` ( Code INTEGER, Name VARCHAR(30), Brand VARCHAR(30), Description VARCHAR(30) ); Sample rows from `Medication`: (1, Procrastin-X, X, N/A), (2, Thesisin, Foo Labs, N/A), (3, Awakin, Bar Laboratories, N/A), CREATE TABLE `Prescribes` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Medication INTEGER PRIMARY KEY REFERENCES Medication(Code), Date DATETIME PRIMARY KEY, Appointment INTEGER REFERENCES Appointment(AppointmentID), Dose VARCHAR(30) ); Sample rows from `Prescribes`: (1, 100000001, 1, 2008-04-24 10:47, 13216584, 5), (9, 100000004, 2, 2008-04-27 10:53, 86213939, 10), (9, 100000004, 2, 2008-04-30 16:53, None, 5), CREATE TABLE `Block` ( BlockFloor INTEGER PRIMARY KEY, BlockCode INTEGER PRIMARY KEY ); Sample rows from `Block`: (1, 1), (1, 2), (1, 3), CREATE TABLE `Room` ( RoomNumber INTEGER, RoomType VARCHAR(30), BlockFloor INTEGER REFERENCES Block(BlockFloor), BlockCode INTEGER REFERENCES Block(BlockCode), Unavailable BOOLEAN ); Sample rows from `Room`: (101, Single, 1, 1, 0), (102, Single, 1, 1, 0), (103, Single, 1, 1, 0), CREATE TABLE `On_Call` ( Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID), BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor), BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode), OnCallStart DATETIME PRIMARY KEY, OnCallEnd DATETIME PRIMARY KEY ); Sample rows from `On_Call`: (101, 1, 1, 2008-11-04 11:00, 2008-11-04 19:00), (101, 1, 2, 2008-11-04 11:00, 2008-11-04 19:00), (102, 1, 3, 2008-11-04 11:00, 2008-11-04 19:00), CREATE TABLE `Stay` ( StayID INTEGER, Patient INTEGER REFERENCES Patient(SSN), Room INTEGER REFERENCES Room(RoomNumber), StayStart DATETIME, StayEnd DATETIME ); Sample rows from `Stay`: (3215, 100000001, 111, 2008-05-01, 2008-05-04), (3216, 100000003, 123, 2008-05-03, 2008-05-14), (3217, 100000004, 112, 2008-05-02, 2008-05-03), CREATE TABLE `Undergoes` ( Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code), Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID), DateUndergoes DATETIME PRIMARY KEY, Physician INTEGER REFERENCES Physician(EmployeeID), AssistingNurse INTEGER REFERENCES Nurse(EmployeeID) ); Sample rows from `Undergoes`: (100000001, 6, 3215, 2008-05-02, 3, 101), (100000001, 2, 3215, 2008-05-03, 7, 101), (100000004, 1, 3217, 2008-05-07, 3, 102), ",
        "output": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the largest of the state that the rio grande runs through ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of distinct products Rodrick Heaney has bought so far. ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_content VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), other_address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 9443 Boyle Route Suite 857, Lucasville, 416, Colorado, USA, None), (2, 1969 Jabari Port Suite 393, New Sabryna, 721, SouthCarolina, USA, None), (3, 295 Hackett Curve, Reingertown, 255, NewJersey, USA, None), CREATE TABLE `Products` ( product_id INTEGER, product_details VARCHAR(255) ); Sample rows from `Products`: (1, Americano), (2, Dove Chocolate), (3, Latte), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method VARCHAR(15), customer_name VARCHAR(80), date_became_customer DATETIME, other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Cash, Dr. Julia Wuckert MD, 2018-03-01 23:20:10, None), (2, Cheque, Tillman Ernser, 2018-02-28 11:37:44, None), (3, Credit Card, Rodrick Heaney, 2018-03-09 17:41:58, None), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_address_from DATETIME, address_type VARCHAR(15), date_address_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 11, 1985-03-29 20:31:43, Billing, 1993-02-17 17:55:18), (13, 11, 2010-08-25 04:24:35, Billing, 1972-02-17 22:23:38), (2, 14, 2010-12-26 08:52:50, Residential, 1979-07-16 18:22:39), CREATE TABLE `Customer_Contact_Channels` ( customer_id INTEGER REFERENCES Customers(customer_id), channel_code VARCHAR(15), active_from_date DATETIME, active_to_date DATETIME, contact_number VARCHAR(50) ); Sample rows from `Customer_Contact_Channels`: (9, Email, 2017-12-07 18:18:15, 2018-03-23 13:37:14, 940.035.6435x0225), (2, Email, 2017-04-07 04:51:41, 2018-03-23 01:30:52, 189.449.8326x7607), (9, Email, 2017-05-25 16:08:45, 2018-03-13 07:32:25, 958-653-2640), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(15), order_date DATETIME, order_details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 15, Cancelled, 2018-03-21 11:20:46, None), (2, 3, Cancelled, 2018-03-05 06:35:33, None), (3, 5, Delivered, 2018-03-04 07:16:22, Second time), CREATE TABLE `Order_Items` ( order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), order_quantity VARCHAR(15) ); Sample rows from `Order_Items`: (14, 2, 5), (5, 2, 9), (14, 3, 2), ",
        "output": "SELECT COUNT(DISTINCT t3.product_id) FROM customers as t1 JOIN customer_orders as t2 ON t1.customer_id  =  t2.customer_id JOIN order_items as t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which faculty members advise two ore more students? Give me their faculty ids. ###filtered_database_schema: CREATE TABLE `Activity` ( actid INTEGER, activity_name varchar(25) ); Sample rows from `Activity`: (770, Mountain Climbing), (771, Canoeing), (772, Kayaking), CREATE TABLE `Participates_in` ( stuid INTEGER REFERENCES Student(StuID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Participates_in`: (1001, 770), (1001, 771), (1001, 777), CREATE TABLE `Faculty_Participates_in` ( FacID INTEGER REFERENCES Faculty(FacID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Faculty_Participates_in`: (1082, 784), (1082, 785), (1082, 790), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), ",
        "output": "SELECT t1.facid FROM faculty as t1 JOIN student as t2 ON t1.facid  =  t2.advisor GROUP BY t1.facid HAVING COUNT(*)  >=  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of activities available. ###filtered_database_schema: CREATE TABLE `Activity` ( actid INTEGER, activity_name varchar(25) ); Sample rows from `Activity`: (770, Mountain Climbing), (771, Canoeing), (772, Kayaking), CREATE TABLE `Participates_in` ( stuid INTEGER REFERENCES Student(StuID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Participates_in`: (1001, 770), (1001, 771), (1001, 777), CREATE TABLE `Faculty_Participates_in` ( FacID INTEGER REFERENCES Faculty(FacID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Faculty_Participates_in`: (1082, 784), (1082, 785), (1082, 790), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), ",
        "output": "SELECT COUNT(*) FROM activity"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many heads of the departments are older than 56 ? ###filtered_database_schema: CREATE TABLE `department` ( Department_ID INT PRIMARY KEY, Name TEXT, Creation TEXT, Ranking INT, Budget_in_Billions REAL, Num_Employees REAL ); Sample rows from `department`: (1, State, 1789, 1, 9.96, 30266.0), (2, Treasury, 1789, 2, 11.1, 115897.0), (3, Defense, 1947, 3, 439.3, 3000000.0), CREATE TABLE `head` ( head_ID INT PRIMARY KEY, name TEXT, born_state TEXT, age REAL ); Sample rows from `head`: (1, Tiger Woods, Alabama, 67.0), (2, Sergio García, California, 68.0), (3, K. J. Choi, Alabama, 69.0), CREATE TABLE `management` ( department_ID INT PRIMARY KEY REFERENCES department(Department_ID), head_ID INT PRIMARY KEY REFERENCES head(head_ID), temporary_acting TEXT ); Sample rows from `management`: (2, 5, Yes), (15, 4, Yes), (2, 6, Yes), ",
        "output": "SELECT COUNT(*) FROM head WHERE age  >  56"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the position of players and the average number of points of players of each position. ###filtered_database_schema: CREATE TABLE `club` ( Club_ID INT PRIMARY KEY, name TEXT, Region TEXT, Start_year TEXT ); Sample rows from `club`: (1, AIB, USA, 2009), (2, BK Slide, UK, 1998), (3, IFG, China, 2005), CREATE TABLE `club_rank` ( Rank REAL PRIMARY KEY, Club_ID INT PRIMARY KEY REFERENCES club(Club_ID), Gold REAL, Silver REAL, Bronze REAL, Total REAL ); Sample rows from `club_rank`: (1.0, 2, 11.0, 11.0, 9.0, 31.0), (2.0, 3, 8.0, 7.0, 6.0, 21.0), (3.0, 1, 7.0, 4.0, 2.0, 13.0), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, name TEXT, Position TEXT, Club_ID INT REFERENCES club(Club_ID), Apps REAL, Tries REAL, Goals TEXT, Points REAL ); Sample rows from `player`: (1, Michael Platt, Full Back, 1, 20.0, 5.0, 0, 20.0), (2, Dave Halley, Right Wing, 2, 23.0, 9.0, 0, 36.0), (3, James Evans, Right Centre, 1, 30.0, 9.0, 0, 36.0), CREATE TABLE `competition` ( Competition_ID INT PRIMARY KEY, Year REAL, Competition_type TEXT, Country TEXT ); Sample rows from `competition`: (1, 2006.0, Friendly, Italy), (2, 2006.0, Friendly, Spain), (3, 2006.0, Friendly, Australia), CREATE TABLE `competition_result` ( Competition_ID INT PRIMARY KEY REFERENCES competition(Competition_ID), Club_ID_1 INT PRIMARY KEY REFERENCES club(Club_ID), Club_ID_2 INT PRIMARY KEY REFERENCES club(Club_ID), Score TEXT ); Sample rows from `competition_result`: (1, 1, 2, 11:10), (2, 3, 2, 25:2), (10, 4, 2, 13:10), ",
        "output": "SELECT position ,  AVG(points) FROM player GROUP BY position"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the names and scores of all wines. ###filtered_database_schema: CREATE TABLE `grapes` ( ID INTEGER, Grape TEXT PRIMARY KEY, Color TEXT ); Sample rows from `grapes`: (1, Barbera, Red), (2, Cabernet Franc, Red), (3, Cabernet Sauvingnon, Red), CREATE TABLE `appellations` ( No INTEGER, Appelation TEXT PRIMARY KEY, County TEXT, State TEXT, Area TEXT, isAVA TEXT ); Sample rows from `appellations`: (1, Alexander Valley, Sonoma, California, North Coast, Yes), (2, Amador County, Amador, California, Sierra Foothills, No), (3, Amador-Mendocino-Sonoma Counties, N/A, California, N/A, No), CREATE TABLE `wine` ( No INTEGER, Grape TEXT REFERENCES grapes(Grape), Winery TEXT, Appelation TEXT REFERENCES appellations(Appelation), State TEXT, Name TEXT, Year INTEGER, Price INTEGER, Score INTEGER, Cases INTEGER, Drink TEXT ); Sample rows from `wine`: (1, Zinfandel, Robert Biale, St. Helena, California, Old Kraft Vineyard, 2008, 44, 93, 275, now), (2, Zinfandel, Chiarello Family, Napa Valley, California, Giana, 2008, 35, 93, 480, now), (3, Zinfandel, Robert Biale, Napa Valley, California, Black Chicken, 2008, 40, 91, 2700, 2012), ",
        "output": "SELECT name ,  score FROM wine"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of directors who directed movies with 5 star rating? Also return the title of these movies. ###filtered_database_schema: CREATE TABLE `Movie` ( mID INT PRIMARY KEY, title TEXT, year INT, director TEXT ); Sample rows from `Movie`: (101, Gone with the Wind, 1939, Victor Fleming), (102, Star Wars, 1977, George Lucas), (103, The Sound of Music, 1965, Robert Wise), CREATE TABLE `Reviewer` ( rID INT PRIMARY KEY, name TEXT ); Sample rows from `Reviewer`: (201, Sarah Martinez), (202, Daniel Lewis), (203, Brittany Harris), CREATE TABLE `Rating` ( rID INT REFERENCES Reviewer(rID), mID INT REFERENCES Movie(mID), stars INT, ratingDate date ); Sample rows from `Rating`: (201, 101, 2, 2011-01-22), (201, 101, 4, 2011-01-27), (202, 106, 4, None), ",
        "output": "SELECT t1.director ,  t1.title FROM movie as t1 JOIN rating as t2 ON t1.mid  =  t2.mid WHERE t2.stars  =  5"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what states border states that border states that border florida ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"florida\" ) );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of video games with Massively multiplayer online game type . ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Video_Games` ( GameID INTEGER, GName VARCHAR(40), GType VARCHAR(40) ); Sample rows from `Video_Games`: (1, RNG Stone, Collectible card game), (2, The Vanishing of Eric Calder, Walking Simulator), (3, Grand Term Assignment, Role-playing game), CREATE TABLE `Plays_Games` ( StuID INTEGER REFERENCES Student(StuID), GameID INTEGER REFERENCES Video_Games(GameID), Hours_Played INTEGER ); Sample rows from `Plays_Games`: (1001, 1, 35), (1001, 2, 15), (1001, 5, 1), CREATE TABLE `SportsInfo` ( StuID INTEGER REFERENCES Student(StuID), SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1) ); Sample rows from `SportsInfo`: (1001, Athletics, 2, 5, N), (1002, Football, 7, 20, Y), (1003, Football, 45, 18, Y), ",
        "output": "SELECT COUNT(*) FROM video_games WHERE gtype  =  \"Massively multiplayer online game\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: acl 2016 authors ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t1.authorid FROM venue as t3 JOIN paper as t2 ON t3.venueid  =  t2.venueid JOIN writes as t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many cities are in counties that have populations of over 20000? ###filtered_database_schema: CREATE TABLE `county_public_safety` ( County_ID INT PRIMARY KEY, Name TEXT, Population INT, Police_officers INT, Residents_per_officer INT, Case_burden INT, Crime_rate REAL, Police_force TEXT, Location TEXT ); Sample rows from `county_public_safety`: (1, Abbotsford, 128165, 187, 685, 81, 118.0, Abbotsford Police Department, East), (2, Burnaby, 204320, 253, 808, 100, 123.0, RCMP, East), (3, Campbell River, 30810, 40, 770, 137, 178.0, RCMP, West), CREATE TABLE `city` ( City_ID INT PRIMARY KEY, County_ID INT REFERENCES county_public_safety(County_ID), Name TEXT, White REAL, Black REAL, Amerindian REAL, Asian REAL, Multiracial REAL, Hispanic REAL ); Sample rows from `city`: (1, 1, Adjuntas, 93.1, 3.1, 0.3, 0.0, 3.4, 99.6), (2, 1, Aguada, 86.6, 5.3, 0.3, 0.1, 7.7, 99.4), (3, 1, Aguadilla, 83.0, 7.4, 0.3, 0.2, 8.2, 98.5), ",
        "output": "SELECT COUNT(*) FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE population  >  20000)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of customers. ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(50), customer_middle_initial VARCHAR(1), customer_last_name VARCHAR(50), gender VARCHAR(1), email_address VARCHAR(255), login_name VARCHAR(80), login_password VARCHAR(20), phone_number VARCHAR(255), town_city VARCHAR(50), state_county_province VARCHAR(50), country VARCHAR(50) ); Sample rows from `Customers`: (1, Dee, A, Larkin, 1, thora.torphy@example.org, xhartmann, 77789d292604ea04406f, 241.796.1219x37862, North Nellie, WestVirginia, USA), (2, Brennon, H, Weimann, 0, roosevelt.collier@example.org, shayne.lesch, ce97a3e4539347daab96, (943)219-4234x415, South Isabell, Oklahoma, USA), (3, Joesph, K, Schaefer, 0, homenick.ambrose@example.net, feeney.lauriane, a6c7a7064c36b038d402, (488)524-5345, New Nikolas, Arkansas, USA), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 12, 2012-06-27 20:49:56, None), (2, 12, 2012-08-25 07:51:54, None), (3, 8, 2017-11-05 15:32:38, None), CREATE TABLE `Invoices` ( invoice_number INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_date DATETIME ); Sample rows from `Invoices`: (1, 9, 2018-03-01 16:40:48), (2, 9, 2018-03-20 00:21:41), (3, 3, 2018-03-05 08:47:33), CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_account_opened DATETIME, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 8, 2016-07-30 22:22:24, 900, Regular), (2, 3, 2017-05-29 16:45:17, 520, VIP), (3, 8, 2012-05-04 18:50:32, 323, Regular), CREATE TABLE `Product_Categories` ( production_type_code VARCHAR(15) PRIMARY KEY, product_type_description VARCHAR(80), vat_rating DECIMAL(19,4) ); Sample rows from `Product_Categories`: (Food, Food, 15.84), (DVDs, Dvd products, 11.4), (Books, Books, 13.95), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, production_type_code VARCHAR(15) REFERENCES Product_Categories(production_type_code), unit_price DECIMAL(19,4), product_name VARCHAR(80), product_color VARCHAR(20), product_size VARCHAR(20) ); Sample rows from `Products`: (1, 4, Food, 617.95, Coffee Bean, Red, Medium), (2, 4, Books, 558.49, Learning French, Yellow, Medium), (3, 8, Electronics, 563.58, Fans, Black, Medium), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DECIMAL(19,4), transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 13, 12, Payment, 2018-03-15 21:13:57, 613.96, None, None), (2, 9, 1, Payment, 2018-03-13 13:27:46, 368.46, None, None), (3, 6, 1, Refund, 2018-03-03 01:50:25, 1598.25, None, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), product_id INTEGER REFERENCES Products(product_id), product_quantity VARCHAR(50), other_order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 4, 6, None), (2, 4, 10, 7, None), (3, 15, 5, 4, None), CREATE TABLE `Invoice_Line_Items` ( order_item_id INTEGER REFERENCES Order_Items(order_item_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), product_id INTEGER REFERENCES Products(product_id), product_title VARCHAR(80), product_quantity VARCHAR(50), product_price DECIMAL(19,4), derived_product_cost DECIMAL(19,4), derived_vat_payable DECIMAL(19,4), derived_total_cost DECIMAL(19,4) ); Sample rows from `Invoice_Line_Items`: (14, 9, 5, prod_name, 4, 742.37, 191.11, None, 69.82), (3, 9, 15, prod_name, 1, 814.87, 176.29, None, 59.56), (4, 10, 15, prod_name, 8, 943.07, 73.14, None, 59.93), ",
        "output": "SELECT COUNT(*) FROM customers"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which manufacturer has the most number of shops? List its name and year of opening. ###filtered_database_schema: CREATE TABLE `manufacturer` ( Manufacturer_ID INT PRIMARY KEY, Open_Year REAL, Name TEXT, Num_of_Factories INT, Num_of_Shops INT ); Sample rows from `manufacturer`: (1, 1980.0, Chevrolet House, 36, 8), (2, 1990.0, IKEA, 21, 19), (3, 1991.0, Ford Make, 12, 2), CREATE TABLE `furniture` ( Furniture_ID INT PRIMARY KEY, Name TEXT, Num_of_Component INT, Market_Rate REAL ); Sample rows from `furniture`: (1, Billiard table, 14, 52.5), (2, Chabudai, 4, 40.0), (3, Bookcase, 6, 1.0), CREATE TABLE `furniture_manufacte` ( Manufacturer_ID INT PRIMARY KEY REFERENCES manufacturer(Manufacturer_ID), Furniture_ID INT PRIMARY KEY REFERENCES furniture(Furniture_ID), Price_in_Dollar REAL ); Sample rows from `furniture_manufacte`: (1, 3, 239.0), (4, 2, 450.0), (7, 7, 2124.0), ",
        "output": "SELECT open_year ,  name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the distinct names of mountains climbed by climbers from country \"West Germany\". ###filtered_database_schema: CREATE TABLE `mountain` ( Mountain_ID INT PRIMARY KEY, Name TEXT, Height REAL, Prominence REAL, Range TEXT, Country TEXT ); Sample rows from `mountain`: (1, Kibo (Uhuru Pk), 5895.0, 5885.0, Kilimanjaro, Tanzania), (2, Mount Kenya (Batian), 5199.0, 3825.0, Mount Kenya, Kenya), (3, Mawenzi (Hans Meyer Pk), 5148.0, 850.0, Kilimanjaro, Tanzania), CREATE TABLE `climber` ( Climber_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Time TEXT, Points REAL, Mountain_ID INT REFERENCES mountain(Mountain_ID) ); Sample rows from `climber`: (1, Klaus Enders, West Germany, 1:13.05.6, 15.0, 1), (2, Siegfried Schauzu, West Germany, 1:14.56.4, 12.0, 1), (3, Hans Luthringhauser, West Germany, 1:16.58.0, 10.0, 2), ",
        "output": "SELECT DISTINCT t2.name FROM climber as t1 JOIN mountain as t2 ON t1.mountain_id  =  t2.mountain_id WHERE t1.country  =  \"West Germany\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many papers did Mirella Lapata cite ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT COUNT(t3.citedpaperid) FROM writes as t2 JOIN author as t1 ON t2.authorid  =  t1.authorid JOIN cite as t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the papers on PVLDB . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT t2.title FROM publication as t2 JOIN journal as t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: how many square kilometers in the us ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT SUM(area) FROM state;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" trains? ###filtered_database_schema: CREATE TABLE `station` ( Station_ID INT PRIMARY KEY, Name TEXT, Annual_entry_exit REAL, Annual_interchanges REAL, Total_Passengers REAL, Location TEXT, Main_Services TEXT, Number_of_Platforms INT ); Sample rows from `station`: (1, London Waterloo, 94.046, 9.489, 103.534, London, South Western Main Line West of England Main Line, 19), (2, London Victoria, 76.231, 9.157, 85.38, London, Brighton Main Line Chatham Main Line, 19), (3, London Bridge, 52.634, 8.742, 61.376, London, South Eastern Main Line Thameslink, 12), CREATE TABLE `train` ( Train_ID INT PRIMARY KEY, Name TEXT, Time TEXT, Service TEXT ); Sample rows from `train`: (1, Ananthapuri Express, 17:15, Daily), (2, Guruvayur Express, 22:10, Daily), (3, Guruvayur Express, 4:49, Daily), CREATE TABLE `train_station` ( Train_ID INT PRIMARY KEY REFERENCES train(Train_ID), Station_ID INT PRIMARY KEY REFERENCES station(Station_ID) ); Sample rows from `train_station`: (1, 1), (2, 1), (3, 1), ",
        "output": "SELECT t2.name FROM train_station as t1 JOIN station as t2 ON t1.station_id  =  t2.station_id JOIN train as t3 ON t3.train_id  =  t1.train_id WHERE t3.name  =  \"Ananthapuri Express\" INTERSECT SELECT t2.name FROM train_station as t1 JOIN station as t2 ON t1.station_id  =  t2.station_id JOIN train as t3 ON t3.train_id  =  t1.train_id WHERE t3.name  =  \"Guruvayur Express\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" on PVLDB after 2005 . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT t6.title FROM publication as t6 JOIN journal as t4 ON t6.jid  =  t4.jid JOIN writes as t3 ON t3.pid  =  t6.pid JOIN writes as t5 ON t5.pid  =  t6.pid JOIN author as t1 ON t5.aid  =  t1.aid JOIN author as t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t4.name  =  \"PVLDB\" AND t6.year  >  2005;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the number of vocal types used in song \"Le Pop\" ###filtered_database_schema: CREATE TABLE `Songs` ( SongId INTEGER, Title TEXT ); CREATE TABLE `Albums` ( AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT ); CREATE TABLE `Band` ( Id INTEGER, Firstname TEXT, Lastname TEXT ); CREATE TABLE `Instruments` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), BandmateId INTEGER PRIMARY KEY REFERENCES Band(Id), Instrument TEXT PRIMARY KEY ); CREATE TABLE `Performance` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), StagePosition TEXT ); CREATE TABLE `Tracklists` ( AlbumId INTEGER PRIMARY KEY REFERENCES Albums(AId), Position INTEGER PRIMARY KEY, SongId INTEGER REFERENCES Songs(SongId) ); CREATE TABLE `Vocals` ( SongId INTEGER PRIMARY KEY REFERENCES Songs(SongId), Bandmate INTEGER PRIMARY KEY REFERENCES Band(Id), Type TEXT ); ",
        "output": "SELECT COUNT(*) FROM vocals as t1 JOIN songs as t2 ON t1.songid  =  t2.songid WHERE title  =  \"Le Pop\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many members of \"Bootup Baltimore\" are older than 18? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Club` ( ClubID INTEGER, ClubName VARCHAR(40), ClubDesc VARCHAR(1024), ClubLocation VARCHAR(40) ); Sample rows from `Club`: (1, Bootup Baltimore, Refurbish computers; teach kids and adults about computer basics., AKW), (2, Hopkins Student Enterprises, Venture capital fund for student business., AKW), (3, Pen and Paper Gaming, Play pen and paper games on campus., HHH), CREATE TABLE `Member_of_club` ( StuID INTEGER REFERENCES Student(StuID), ClubID INTEGER REFERENCES Club(ClubID), Position VARCHAR(40) ); Sample rows from `Member_of_club`: (1001, 1, President), (1007, 4, Vice-President), (1008, 2, CTO), ",
        "output": "SELECT COUNT(*) FROM club as t1 JOIN member_of_club as t2 ON t1.clubid  =  t2.clubid JOIN student as t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Who made the latest order? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_content VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), other_address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 9443 Boyle Route Suite 857, Lucasville, 416, Colorado, USA, None), (2, 1969 Jabari Port Suite 393, New Sabryna, 721, SouthCarolina, USA, None), (3, 295 Hackett Curve, Reingertown, 255, NewJersey, USA, None), CREATE TABLE `Products` ( product_id INTEGER, product_details VARCHAR(255) ); Sample rows from `Products`: (1, Americano), (2, Dove Chocolate), (3, Latte), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method VARCHAR(15), customer_name VARCHAR(80), date_became_customer DATETIME, other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Cash, Dr. Julia Wuckert MD, 2018-03-01 23:20:10, None), (2, Cheque, Tillman Ernser, 2018-02-28 11:37:44, None), (3, Credit Card, Rodrick Heaney, 2018-03-09 17:41:58, None), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_address_from DATETIME, address_type VARCHAR(15), date_address_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 11, 1985-03-29 20:31:43, Billing, 1993-02-17 17:55:18), (13, 11, 2010-08-25 04:24:35, Billing, 1972-02-17 22:23:38), (2, 14, 2010-12-26 08:52:50, Residential, 1979-07-16 18:22:39), CREATE TABLE `Customer_Contact_Channels` ( customer_id INTEGER REFERENCES Customers(customer_id), channel_code VARCHAR(15), active_from_date DATETIME, active_to_date DATETIME, contact_number VARCHAR(50) ); Sample rows from `Customer_Contact_Channels`: (9, Email, 2017-12-07 18:18:15, 2018-03-23 13:37:14, 940.035.6435x0225), (2, Email, 2017-04-07 04:51:41, 2018-03-23 01:30:52, 189.449.8326x7607), (9, Email, 2017-05-25 16:08:45, 2018-03-13 07:32:25, 958-653-2640), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(15), order_date DATETIME, order_details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 15, Cancelled, 2018-03-21 11:20:46, None), (2, 3, Cancelled, 2018-03-05 06:35:33, None), (3, 5, Delivered, 2018-03-04 07:16:22, Second time), CREATE TABLE `Order_Items` ( order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), order_quantity VARCHAR(15) ); Sample rows from `Order_Items`: (14, 2, 5), (5, 2, 9), (14, 3, 2), ",
        "output": "SELECT t1.customer_name FROM customers as t1 JOIN customer_orders as t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: which papers in acl 2012 had Parsing in them ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN venue as t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the movie titles and average rating of the movies with the lowest average rating? ###filtered_database_schema: CREATE TABLE `Movie` ( mID INT PRIMARY KEY, title TEXT, year INT, director TEXT ); Sample rows from `Movie`: (101, Gone with the Wind, 1939, Victor Fleming), (102, Star Wars, 1977, George Lucas), (103, The Sound of Music, 1965, Robert Wise), CREATE TABLE `Reviewer` ( rID INT PRIMARY KEY, name TEXT ); Sample rows from `Reviewer`: (201, Sarah Martinez), (202, Daniel Lewis), (203, Brittany Harris), CREATE TABLE `Rating` ( rID INT REFERENCES Reviewer(rID), mID INT REFERENCES Movie(mID), stars INT, ratingDate date ); Sample rows from `Rating`: (201, 101, 2, 2011-01-22), (201, 101, 4, 2011-01-27), (202, 106, 4, None), ",
        "output": "SELECT t2.title ,  AVG(t1.stars) FROM rating as t1 JOIN movie as t2 ON t1.mid  =  t2.mid GROUP BY t1.mid ORDER BY AVG(t1.stars) LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the first name and office of the professor who is in the history department and has a Ph.D. degree. ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT t1.emp_fname ,  t2.prof_office FROM employee as t1 JOIN professor as t2 ON t1.emp_num  =  t2.emp_num JOIN department as t3 ON t3.dept_code  =  t2.dept_code WHERE t3.dept_name  =  'History' AND t2.prof_high_degree  =  'Ph.D.'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the smallest state in the usa ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN(area) FROM state );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: When was the document named \"Marry CV\" stored? Give me the date. ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (CV, CV, ), (BK, Book, ), (PR, Paper, ), CREATE TABLE `Ref_Calendar` ( Calendar_Date DATETIME PRIMARY KEY, Day_Number INTEGER ); Sample rows from `Ref_Calendar`: (1972-03-31 09:47:22, 5), (1976-06-15 03:40:06, 7), (1985-05-13 12:19:43, 7), CREATE TABLE `Ref_Locations` ( Location_Code CHAR(15) PRIMARY KEY, Location_Name VARCHAR(255), Location_Description VARCHAR(255) ); Sample rows from `Ref_Locations`: (b, Brazil, ), (c, Canada, ), (e, Edinburgh, ), CREATE TABLE `Roles` ( Role_Code CHAR(15) PRIMARY KEY, Role_Name VARCHAR(255), Role_Description VARCHAR(255) ); Sample rows from `Roles`: (MG, Manager, Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti.), (ED, Editor, Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos.), (PT, Photo, Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt.), CREATE TABLE `All_Documents` ( Document_ID INTEGER, Date_Stored DATETIME REFERENCES Ref_Calendar(Calendar_Date), Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255) ); Sample rows from `All_Documents`: (7, 1976-06-15 03:40:06, CV, Robin CV, None, None), (11, 1986-10-14 17:53:39, CV, Marry CV, None, None), (25, 2008-06-08 12:45:38, BK, One hundred years of solitude, None, None), CREATE TABLE `Employees` ( Employee_ID INTEGER, Role_Code CHAR(15) REFERENCES Roles(Role_Code), Employee_Name VARCHAR(255), Gender_MFU CHAR(1), Date_of_Birth DATETIME, Other_Details VARCHAR(255) ); Sample rows from `Employees`: (25, HR, Leo, , 1973-02-15 17:16:00, None), (30, MG, Ebba, , 1979-09-20 12:50:15, None), (38, ED, Stephanie, 1, 2012-03-30 23:02:28, None), CREATE TABLE `Document_Locations` ( Document_ID INTEGER PRIMARY KEY REFERENCES All_Documents(Document_ID), Location_Code CHAR(15) PRIMARY KEY REFERENCES Ref_Locations(Location_Code), Date_in_Location_From DATETIME PRIMARY KEY REFERENCES Ref_Calendar(Calendar_Date), Date_in_Locaton_To DATETIME REFERENCES Ref_Calendar(Calendar_Date) ); Sample rows from `Document_Locations`: (7, e, 2017-01-06 23:17:22, 2008-06-08 12:45:38), (11, x, 2017-01-06 23:17:22, 2012-07-03 09:48:46), (81, c, 1972-03-31 09:47:22, 1987-11-05 06:11:22), CREATE TABLE `Documents_to_be_Destroyed` ( Document_ID INTEGER REFERENCES All_Documents(Document_ID), Destruction_Authorised_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Destroyed_by_Employee_ID INTEGER REFERENCES Employees(Employee_ID), Planned_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Actual_Destruction_Date DATETIME REFERENCES Ref_Calendar(Calendar_Date), Other_Details VARCHAR(255) ); Sample rows from `Documents_to_be_Destroyed`: (7, 156, 138, 1988-02-01 14:41:52, 2017-01-06 23:17:22, None), (11, 55, 173, 2010-11-26 19:22:50, 1986-10-14 17:53:39, None), (25, 183, 156, 2009-08-18 03:29:08, 1995-01-01 03:52:11, None), ",
        "output": "SELECT date_stored FROM all_documents WHERE document_name  =  \"Marry CV\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the number of references of \" Making database systems usable \" . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT reference_num FROM publication WHERE title  =  \"Making database systems usable\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the biggest city in wyoming ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX(population) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Please show the most common occupation of players. ###filtered_database_schema: CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Sponsor_name TEXT, Player_name TEXT, Gender TEXT, Residence TEXT, Occupation TEXT, Votes INT, Rank TEXT ); Sample rows from `player`: (1, Brandon—Souris, Jean Luc Bouché, M, Brandon, Locomotive Engineer, 6055, 2nd), (2, Charleswood—St. James—Assiniboia, Fiona Shiells, F, Winnipeg, Ministerial Assistant, 7190, 3rd), (3, Churchill, Niki Ashton, F, Thompson, Researcher, 8734, 1st), CREATE TABLE `club` ( Club_ID INT PRIMARY KEY, Club_name TEXT, Region TEXT, Start_year INT ); Sample rows from `club`: (1, AIK, USA, 2009), (2, BK Häcken, UK, 1998), (3, Djurgårdens IF, USA, 2005), CREATE TABLE `coach` ( Coach_ID INT PRIMARY KEY, Coach_name TEXT, Gender TEXT, Club_ID INT REFERENCES club(Club_ID), Rank INT ); Sample rows from `coach`: (1, Jameson Tomas, M, 1, 1), (2, Joe Fabbri, F, 1, 2), (3, Robert Chen, M, 3, 3), CREATE TABLE `player_coach` ( Player_ID INT PRIMARY KEY REFERENCES player(Player_ID), Coach_ID INT PRIMARY KEY REFERENCES coach(Coach_ID), Starting_year INT ); Sample rows from `player_coach`: (1, 1, 2010), (2, 1, 2011), (3, 1, 2012), CREATE TABLE `match_result` ( Rank INT PRIMARY KEY, Club_ID INT PRIMARY KEY REFERENCES club(Club_ID), Gold INT, Big_Silver INT, Small_Silver INT, Bronze INT, Points INT ); Sample rows from `match_result`: (1, 1, 20, 14, 9, 8, 168), (2, 2, 13, 11, 16, 9, 139), (3, 3, 12, 9, 4, 7, 102), ",
        "output": "SELECT occupation FROM player GROUP BY occupation ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Give the full name and customer id of the customer with the fewest accounts. ###filtered_database_schema: CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 6, 338, Regular), (2, 14, 562, VIP), (3, 9, 162, VIP), CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(20), customer_last_name VARCHAR(20), customer_address VARCHAR(255), customer_phone VARCHAR(255), customer_email VARCHAR(255), other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Aniyah, Feest, 55975 Theodore Estates Lake Brody, VT 57078, (673)872-5338, fahey.dorian@example.com, None), (2, Susie, Wiza, 6478 Moen Isle Suite 910 Schimmelmouth, VT 96364-4898, 679-845-8645x94312, idickinson@example.com, None), (3, Marcel, Brekke, 1965 Abernathy Plains Port Lilla, LA 44867, 1-511-656-6664, nichole.rodriguez@example.com, None), CREATE TABLE `Customers_Cards` ( card_id INTEGER, customer_id INTEGER, card_type_code VARCHAR(15), card_number VARCHAR(80), date_valid_from DATETIME, date_valid_to DATETIME, other_card_details VARCHAR(255) ); Sample rows from `Customers_Cards`: (1, 14, Credit, 4560596484842, 2011-04-17 09:05:28, 2018-03-07 17:06:19, 5567915676420343), (2, 9, Credit, 4859448397570735, 2012-05-22 02:05:41, 2018-02-25 15:43:32, 4539333582760), (3, 6, Debit, 348237249146948, 2014-08-01 14:26:45, 2018-03-24 15:29:00, 4916210554814), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, previous_transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), card_id INTEGER REFERENCES Customers_Cards(card_id), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DOUBLE, transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 925, 15, 1, Payment, 2018-03-24 06:41:41, 1701.23, None, None), (2, 494, 3, 2, Refund, 2018-03-24 12:08:55, 1931.76, None, None), (3, 642, 4, 3, Payment, 2018-03-24 09:08:27, 486.56, None, None), ",
        "output": "SELECT t2.customer_first_name ,  t2.customer_last_name ,  t1.customer_id FROM accounts as t1 JOIN customers as t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT(*) asC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name of the customer that made the order with the largest quantity? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_content VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), other_address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 9443 Boyle Route Suite 857, Lucasville, 416, Colorado, USA, None), (2, 1969 Jabari Port Suite 393, New Sabryna, 721, SouthCarolina, USA, None), (3, 295 Hackett Curve, Reingertown, 255, NewJersey, USA, None), CREATE TABLE `Products` ( product_id INTEGER, product_details VARCHAR(255) ); Sample rows from `Products`: (1, Americano), (2, Dove Chocolate), (3, Latte), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method VARCHAR(15), customer_name VARCHAR(80), date_became_customer DATETIME, other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Cash, Dr. Julia Wuckert MD, 2018-03-01 23:20:10, None), (2, Cheque, Tillman Ernser, 2018-02-28 11:37:44, None), (3, Credit Card, Rodrick Heaney, 2018-03-09 17:41:58, None), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_address_from DATETIME, address_type VARCHAR(15), date_address_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 11, 1985-03-29 20:31:43, Billing, 1993-02-17 17:55:18), (13, 11, 2010-08-25 04:24:35, Billing, 1972-02-17 22:23:38), (2, 14, 2010-12-26 08:52:50, Residential, 1979-07-16 18:22:39), CREATE TABLE `Customer_Contact_Channels` ( customer_id INTEGER REFERENCES Customers(customer_id), channel_code VARCHAR(15), active_from_date DATETIME, active_to_date DATETIME, contact_number VARCHAR(50) ); Sample rows from `Customer_Contact_Channels`: (9, Email, 2017-12-07 18:18:15, 2018-03-23 13:37:14, 940.035.6435x0225), (2, Email, 2017-04-07 04:51:41, 2018-03-23 01:30:52, 189.449.8326x7607), (9, Email, 2017-05-25 16:08:45, 2018-03-13 07:32:25, 958-653-2640), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status VARCHAR(15), order_date DATETIME, order_details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 15, Cancelled, 2018-03-21 11:20:46, None), (2, 3, Cancelled, 2018-03-05 06:35:33, None), (3, 5, Delivered, 2018-03-04 07:16:22, Second time), CREATE TABLE `Order_Items` ( order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), order_quantity VARCHAR(15) ); Sample rows from `Order_Items`: (14, 2, 5), (5, 2, 9), (14, 3, 2), ",
        "output": "SELECT t1.customer_name FROM customers as t1 JOIN customer_orders as t2 ON t1.customer_id  =  t2.customer_id JOIN order_items as t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT MAX(order_quantity) FROM order_items)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names, classes, and ranks of all captains? ###filtered_database_schema: CREATE TABLE `captain` ( Captain_ID INT PRIMARY KEY, Name TEXT, Ship_ID INT REFERENCES Ship(Ship_ID), age TEXT, Class TEXT, Rank TEXT ); Sample rows from `captain`: (1, Captain Sir Henry Langford, 1, 40, Third-rate ship of the line, Midshipman), (2, Captain Beves Conway, 2, 54, Third-rate ship of the line, Midshipman), (3, Lieutenant Hugh Bolitho, 3, 43, Cutter, Midshipman), CREATE TABLE `Ship` ( Ship_ID INT PRIMARY KEY, Name TEXT, Type TEXT, Built_Year REAL, Class TEXT, Flag TEXT ); Sample rows from `Ship`: (1, HMS Manxman, Panamax, 1997.0, KR, Panama), (2, HMS Gorgon, Panamax, 1998.0, KR, Panama), (3, HM Cutter Avenger, Panamax, 1997.0, KR, Panama), ",
        "output": "SELECT name ,  class ,  rank FROM captain"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of students who took any class in the years of 2009 and 2010. ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT DISTINCT t1.name FROM student as t1 JOIN takes as t2 ON t1.id  =  t2.id WHERE year  =  2009 OR year  =  2010"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the student first and last names and grade points of all enrollments. ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), CREATE TABLE `Department` ( DNO INTEGER, Division VARCHAR(2), DName VARCHAR(25), Room VARCHAR(5), Building VARCHAR(13), DPhone INTEGER ); Sample rows from `Department`: (10, AS, History of Art, 268, Mergenthaler, 7117), (20, AS, Biology, 144, Mudd, 7330), (30, AS, Chemistry, 113, Remsen, 7429), CREATE TABLE `Member_of` ( FacID INTEGER REFERENCES Faculty(FacID), DNO INTEGER REFERENCES Department(DNO), Appt_Type VARCHAR(15) ); Sample rows from `Member_of`: (7792, 600, Primary), (9210, 520, Primary), (9811, 550, Primary), CREATE TABLE `Course` ( CID VARCHAR(7) PRIMARY KEY, CName VARCHAR(40), Credits INTEGER, Instructor INTEGER REFERENCES Faculty(FacID), Days VARCHAR(5), Hours VARCHAR(11), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Course`: (600.101, COMPUTER LITERACY, 3, 6112, MTW, 3, 600), (600.103, INTRODUCTION TO COMPUTER SCIENCE, 1, 4230, Th, 4, 600), (600.107, INTRO TO PROGRAMMING IN JAVA, 3, 1193, MTW, 3, 600), CREATE TABLE `Minor_in` ( StuID INTEGER REFERENCES Student(StuID), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Minor_in`: (1004, 520), (1005, 550), (1006, 50), CREATE TABLE `Enrolled_in` ( StuID INTEGER REFERENCES Student(StuID), CID VARCHAR(7) REFERENCES Course(CID), Grade VARCHAR(2) REFERENCES Gradeconversion(lettergrade) ); Sample rows from `Enrolled_in`: (1001, 550.681, A-), (1001, 600.303, B), (1001, 600.315, B+), CREATE TABLE `Gradeconversion` ( lettergrade VARCHAR(2) PRIMARY KEY, gradepoint FLOAT ); Sample rows from `Gradeconversion`: (A+, 4.0), (A, 4.0), (A-, 3.7), ",
        "output": "SELECT t3.fname ,  t3.lname ,  t2.gradepoint FROM enrolled_in as t1 JOIN gradeconversion as t2 JOIN student as t3 ON t1.grade  =  t2.lettergrade AND t1.stuid  =  t3.stuid"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the descriptions of the service types with product price above 100? ###filtered_database_schema: CREATE TABLE `Ref_Payment_Methods` ( payment_method_code CHAR(10) PRIMARY KEY, payment_method_description VARCHAR(80) ); Sample rows from `Ref_Payment_Methods`: (American E, credit), (MasterCard, debit), (Visa, Visa), CREATE TABLE `Ref_Service_Types` ( Service_Type_Code CHAR(15) PRIMARY KEY, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255) ); Sample rows from `Ref_Service_Types`: (1, 1, provide photo service), (2, 1, provide dinning service), (3, 1, provide filming service), CREATE TABLE `Addresses` ( Address_ID VARCHAR(100) PRIMARY KEY, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Addresses`: (110, 4753 Dach Highway, Suite 846, Feliciaberg, Florida, None), (124, 391 Vandervort Fall Apt. 446, Apt. 107, West Sherwoodstad, Indiana, None), (148, 809 Izabella Islands, Suite 271, Schadenville, Ohio, None), CREATE TABLE `Products` ( Product_ID VARCHAR(100) PRIMARY KEY, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Products`: (11, photo, 4448536, None, None), (154, film, 2302, None, None), (156, film, 17622723, None, None), CREATE TABLE `Marketing_Regions` ( Marketing_Region_Code CHAR(15) PRIMARY KEY, Marketing_Region_Name VARCHAR(255), Marketing_Region_Descriptrion VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Marketing_Regions`: (CA, Canada, Our target market, None), (CN, China, Our largest market, None), (ES, Spain, , None), CREATE TABLE `Clients` ( Client_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Clients`: (423, 201, branson94@example.net, Clifford, (042)912-3404x5135, VIP), (426, 383, alba04@example.com, Bettye, (604)849-0214, None), (478, 15, westley30@example.net, Reinhold, 1-048-214-4640x64380, None), CREATE TABLE `Drama_Workshop_Groups` ( Workshop_Group_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Currency_Code CHAR(15), Marketing_Region_Code CHAR(15), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Drama_Workshop_Groups`: (136, 383, EU, FR, Amely Cafe, 122-084-8029, amely.ruecker@example.com, None), (140, 180, EU, DE, Veda Film, 793-966-9311x5303, breitenberg.veda@example.com, None), (176, 286, EU, RU, Queen Art, 492-463-5967, quigley.queen@example.org, Good), CREATE TABLE `Performers` ( Performer_ID INTEGER PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Performers`: (153, 124, Shawna, 664.495.1939, krogahn@example.com, None), (211, 124, Ashley, 893-536-8857, preston45@example.net, None), (313, 39, Oren, 1-952-052-6685x28082, ferry.carolina@example.net, None), CREATE TABLE `Customers` ( Customer_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Customers`: (240, 286, Harold, 624-096-7791, jerde.harmon@example.com, None), (267, 98, Federico, 914-915-7483, johnson27@example.com, None), (304, 369, Samson, 1-463-121-4086x655, dalton75@example.com, None), CREATE TABLE `Stores` ( Store_ID VARCHAR(100) PRIMARY KEY, Address_ID INTEGER REFERENCES Addresses(Address_ID), Marketing_Region_Code CHAR(15) REFERENCES Marketing_Regions(Marketing_Region_Code), Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Stores`: (150, 286, IN, FJA Filming, +65(1)3590790358, fjacobson@example.com, None), (229, 266, CA, Rob Dinning, 1-327-185-9368, rborer@example.org, 5 stars), (231, 230, ES, Adan Dinning, 896-931-9633x869, adan93@example.com, None), CREATE TABLE `Bookings` ( Booking_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Clients(Client_ID), Workshop_Group_ID VARCHAR(100) REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Status_Code CHAR(15), Store_ID INTEGER, Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Bookings`: (1, 938, 140, good, 8, 2016-12-12 10:43:01, 2013-03-10 18:47:05, 1997-11-21 10:07:40, None), (2, 868, 838, stop, 7, 1976-08-20 00:33:08, 2009-07-09 09:18:38, 1976-01-08 07:19:23, None), (3, 735, 176, good, 9, 1975-11-23 06:28:47, 1989-01-05 19:24:45, 1990-03-16 19:38:47, None), CREATE TABLE `Performers_in_Bookings` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Performer_ID INTEGER PRIMARY KEY REFERENCES Performers(Performer_ID) ); Sample rows from `Performers_in_Bookings`: (1, 153), (1, 341), (2, 466), CREATE TABLE `Customer_Orders` ( Order_ID INTEGER PRIMARY KEY, Customer_ID INTEGER REFERENCES Customers(Customer_ID), Store_ID INTEGER REFERENCES Stores(Store_ID), Order_Date DATETIME, Planned_Delivery_Date DATETIME, Actual_Delivery_Date DATETIME, Other_Order_Details VARCHAR(255) ); Sample rows from `Customer_Orders`: (1, 516, 231, 1994-08-03 12:34:58, 1977-03-11 03:58:19, 1992-07-21 22:11:11, None), (2, 418, 229, 2014-07-10 10:56:01, 1996-08-26 19:19:59, 1998-08-22 17:57:32, None), (3, 712, 229, 1981-06-20 16:29:43, 1980-12-19 05:49:35, 2011-04-13 07:15:35, None), CREATE TABLE `Order_Items` ( Order_Item_ID INTEGER, Order_ID INTEGER REFERENCES Customer_Orders(Order_ID), Product_ID INTEGER REFERENCES Products(Product_ID), Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 3, 233, 1, None), (2, 15, 300, 2, None), (3, 12, 300, 1, None), CREATE TABLE `Invoices` ( Invoice_ID INTEGER, Order_ID INTEGER REFERENCES Bookings(Booking_ID) REFERENCES Customer_Orders(Order_ID), payment_method_code CHAR(15) REFERENCES Ref_Payment_Methods(payment_method_code), Product_ID INTEGER, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER ); Sample rows from `Invoices`: (128, 14, MasterCard, 4, 2, None, 1), (162, 13, MasterCard, 9, 2, None, 9), (164, 7, Visa, 7, 2, None, 1), CREATE TABLE `Services` ( Service_ID INTEGER PRIMARY KEY, Service_Type_Code CHAR(15) REFERENCES Ref_Service_Types(Service_Type_Code), Workshop_Group_ID INTEGER REFERENCES Drama_Workshop_Groups(Workshop_Group_ID), Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255) ); Sample rows from `Services`: (191, 1, 415, None, film, 58932775.8822, None), (219, 2, 838, None, film, 2704.4719, None), (220, 1, 708, None, dinning, 6888.8306, None), CREATE TABLE `Bookings_Services` ( Order_ID INTEGER PRIMARY KEY REFERENCES Bookings(Booking_ID), Product_ID INTEGER PRIMARY KEY REFERENCES Services(Service_ID) ); Sample rows from `Bookings_Services`: (1, 396), (1, 779), (4, 191), CREATE TABLE `Invoice_Items` ( Invoice_Item_ID INTEGER, Invoice_ID INTEGER REFERENCES Invoices(Invoice_ID), Order_ID INTEGER REFERENCES Bookings_Services(Order_ID), Order_Item_ID INTEGER REFERENCES Order_Items(Order_Item_ID), Product_ID INTEGER REFERENCES Bookings_Services(Product_ID), Order_Quantity INTEGER, Other_Item_Details VARCHAR(255) ); Sample rows from `Invoice_Items`: (1, 128, 1, 5, 396, 2, None), (2, 162, 4, 6, 191, 6, Good quality), ",
        "output": "SELECT t1.service_type_description FROM ref_service_types as t1 JOIN services as t2 ON t1.service_type_code  =  t2.service_type_code WHERE t2.product_price  >  100"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of instructors who earn more than at least one instructor from the Biology department? ###filtered_database_schema: CREATE TABLE `classroom` ( building varchar(15) PRIMARY KEY, room_number varchar(7) PRIMARY KEY, capacity numeric(4,0) ); Sample rows from `classroom`: (Lamberton, 134, 10), (Chandler, 375, 10), (Fairchild, 145, 27), CREATE TABLE `department` ( dept_name varchar(20) PRIMARY KEY, building varchar(15), budget numeric(12,2) ); Sample rows from `department`: (Civil Eng., Chandler, 255041.46), (Biology, Candlestick, 647610.55), (History, Taylor, 699140.86), CREATE TABLE `course` ( course_id varchar(8) PRIMARY KEY, title varchar(50), dept_name varchar(20) REFERENCES department(dept_name), credits numeric(2,0) ); Sample rows from `course`: (787, C Programming, Mech. Eng., 4), (238, The Music of Donovan, Mech. Eng., 3), (608, Electron Microscopy, Mech. Eng., 3), CREATE TABLE `instructor` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), salary numeric(8,2) ); Sample rows from `instructor`: (63395, McKinnon, Cybernetics, 94333.99), (78699, Pingr, Statistics, 59303.62), (96895, Mird, Marketing, 119921.41), CREATE TABLE `section` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), sec_id varchar(8) PRIMARY KEY, semester varchar(6) PRIMARY KEY, year numeric(4,0) PRIMARY KEY, building varchar(15) REFERENCES classroom(building), room_number varchar(7) REFERENCES classroom(room_number), time_slot_id varchar(4) ); Sample rows from `section`: (313, 1, Fall, 2010, Chandler, 804, N), (747, 1, Spring, 2004, Gates, 314, K), (443, 1, Spring, 2010, Whitman, 434, O), CREATE TABLE `teaches` ( ID varchar(5) PRIMARY KEY REFERENCES instructor(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year) ); Sample rows from `teaches`: (34175, 747, 1, Spring, 2004), (3199, 169, 1, Spring, 2007), (6569, 445, 1, Spring, 2001), CREATE TABLE `student` ( ID varchar(5) PRIMARY KEY, name varchar(20), dept_name varchar(20) REFERENCES department(dept_name), tot_cred numeric(3,0) ); Sample rows from `student`: (24746, Schrefl, History, 4), (79352, Rumat, Finance, 100), (76672, Miliko, Statistics, 116), CREATE TABLE `takes` ( ID varchar(5) PRIMARY KEY REFERENCES student(ID), course_id varchar(8) PRIMARY KEY REFERENCES section(course_id), sec_id varchar(8) PRIMARY KEY REFERENCES section(sec_id), semester varchar(6) PRIMARY KEY REFERENCES section(semester), year numeric(4,0) PRIMARY KEY REFERENCES section(year), grade varchar(2) ); Sample rows from `takes`: (65901, 401, 1, Fall, 2003, C-), (24932, 802, 1, Spring, 2003, B-), (61332, 200, 1, Spring, 2007, A-), CREATE TABLE `advisor` ( s_ID varchar(5) PRIMARY KEY REFERENCES student(ID), i_ID varchar(5) REFERENCES instructor(ID) ); Sample rows from `advisor`: (24746, 19368), (79352, 95030), (76672, 22591), CREATE TABLE `time_slot` ( time_slot_id varchar(4) PRIMARY KEY, day varchar(1) PRIMARY KEY, start_hr numeric(2) PRIMARY KEY, start_min numeric(2) PRIMARY KEY, end_hr numeric(2), end_min numeric(2) ); Sample rows from `time_slot`: (A, M, 8, 0, 8, 50), (A, W, 8, 0, 8, 50), (A, F, 8, 0, 8, 50), CREATE TABLE `prereq` ( course_id varchar(8) PRIMARY KEY REFERENCES course(course_id), prereq_id varchar(8) PRIMARY KEY REFERENCES course(course_id) ); Sample rows from `prereq`: (376, 130), (760, 169), (403, 345), ",
        "output": "SELECT name FROM instructor WHERE salary  >  (SELECT MIN(salary) FROM instructor WHERE dept_name  =  'Biology')"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the description of transaction type with code \"PUR\". ###filtered_database_schema: CREATE TABLE `Investors` ( investor_id INTEGER, Investor_details VARCHAR(255) ); Sample rows from `Investors`: (1, z), (2, z), (3, d), CREATE TABLE `Lots` ( lot_id INTEGER, investor_id INTEGER REFERENCES Investors(investor_id), lot_details VARCHAR(255) ); Sample rows from `Lots`: (1, 13, r), (2, 16, z), (3, 10, s), CREATE TABLE `Ref_Transaction_Types` ( transaction_type_code VARCHAR(10) PRIMARY KEY, transaction_type_description VARCHAR(80) ); Sample rows from `Ref_Transaction_Types`: (SALE, Sale), (PUR, Purchase), CREATE TABLE `Transactions` ( transaction_id INTEGER, investor_id INTEGER REFERENCES Investors(investor_id), transaction_type_code VARCHAR(10) REFERENCES Ref_Transaction_Types(transaction_type_code), date_of_transaction DATETIME, amount_of_transaction DECIMAL(19,4), share_count VARCHAR(40), other_details VARCHAR(255) ); Sample rows from `Transactions`: (1, 6, SALE, 1988-09-16 19:02:51, 302507.6996, 8718572, None), (2, 18, PUR, 1982-06-06 17:19:00, 27.257, 9, None), (3, 2, SALE, 1979-04-27 06:03:59, 48777.969, 8580, None), CREATE TABLE `Sales` ( sales_transaction_id INTEGER REFERENCES Transactions(transaction_id), sales_details VARCHAR(255) ); Sample rows from `Sales`: (1, x), (2, o), (3, a), CREATE TABLE `Purchases` ( purchase_transaction_id INTEGER REFERENCES Transactions(transaction_id), purchase_details VARCHAR(255) ); Sample rows from `Purchases`: (1, c), (2, y), (3, i), CREATE TABLE `Transactions_Lots` ( transaction_id INTEGER REFERENCES Transactions(transaction_id), lot_id INTEGER REFERENCES Lots(lot_id) ); Sample rows from `Transactions_Lots`: (3, 11), (3, 8), (2, 11), ",
        "output": "SELECT transaction_type_description FROM ref_transaction_types WHERE transaction_type_code\t  =  \"PUR\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly? ###filtered_database_schema: CREATE TABLE `flight` ( flno number(4,0) PRIMARY KEY, origin varchar2(20), destination varchar2(20), distance number(6,0), departure_date date, arrival_date date, price number(7,2), aid number(9,0) REFERENCES aircraft(aid) ); Sample rows from `flight`: (99, Los Angeles, Washington D.C., 2308, 04/12/2005 09:30, 04/12/2005 09:40, 235.98, 1), (13, Los Angeles, Chicago, 1749, 04/12/2005 08:45, 04/12/2005 08:45, 220.98, 3), (346, Los Angeles, Dallas, 1251, 04/12/2005 11:50, 04/12/2005 07:05, 182, 2), CREATE TABLE `aircraft` ( aid number(9,0) PRIMARY KEY, name varchar2(30), distance number(6,0) ); Sample rows from `aircraft`: (1, Boeing 747-400, 8430), (2, Boeing 737-800, 3383), (3, Airbus A340-300, 7120), CREATE TABLE `employee` ( eid number(9,0) PRIMARY KEY, name varchar2(30), salary number(10,2) ); Sample rows from `employee`: (242518965, James Smith, 120433), (141582651, Mary Johnson, 178345), (11564812, John Williams, 153972), CREATE TABLE `certificate` ( eid number(9,0) PRIMARY KEY REFERENCES employee(eid), aid number(9,0) PRIMARY KEY REFERENCES aircraft(aid) ); Sample rows from `certificate`: (11564812, 2), (11564812, 10), (90873519, 6), ",
        "output": "SELECT t2.name FROM certificate as t1 JOIN aircraft as t2 ON t2.aid  =  t1.aid WHERE t2.distance  >  5000 GROUP BY t1.aid ORDER BY COUNT(*)  >=  5"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Count the number of captains younger than 50 of each rank. ###filtered_database_schema: CREATE TABLE `captain` ( Captain_ID INT PRIMARY KEY, Name TEXT, Ship_ID INT REFERENCES Ship(Ship_ID), age TEXT, Class TEXT, Rank TEXT ); Sample rows from `captain`: (1, Captain Sir Henry Langford, 1, 40, Third-rate ship of the line, Midshipman), (2, Captain Beves Conway, 2, 54, Third-rate ship of the line, Midshipman), (3, Lieutenant Hugh Bolitho, 3, 43, Cutter, Midshipman), CREATE TABLE `Ship` ( Ship_ID INT PRIMARY KEY, Name TEXT, Type TEXT, Built_Year REAL, Class TEXT, Flag TEXT ); Sample rows from `Ship`: (1, HMS Manxman, Panamax, 1997.0, KR, Panama), (2, HMS Gorgon, Panamax, 1998.0, KR, Panama), (3, HM Cutter Avenger, Panamax, 1997.0, KR, Panama), ",
        "output": "SELECT COUNT(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market. ###filtered_database_schema: CREATE TABLE `phone` ( Name TEXT, Phone_ID INT PRIMARY KEY, Memory_in_G INT, Carrier TEXT, Price REAL ); Sample rows from `phone`: (IPhone 5s, 1, 32, Sprint, 320.0), (IPhone 6, 5, 128, Sprint, 480.0), (IPhone 6s, 2, 128, TMobile, 699.0), CREATE TABLE `market` ( Market_ID INT PRIMARY KEY, District TEXT, Num_of_employees INT, Num_of_shops REAL, Ranking INT ); Sample rows from `market`: (1, Alberta, 1966, 40.0, 1), (2, British Columbia, 1965, 49.0, 21), (3, New Brunswick, 1978, 10.0, 4), CREATE TABLE `phone_market` ( Market_ID INT PRIMARY KEY REFERENCES market(Market_ID), Phone_ID TEXT PRIMARY KEY REFERENCES phone(Phone_ID), Num_of_stock INT ); Sample rows from `phone_market`: (1, 1, 2232), (2, 2, 4324), (1, 4, 874), ",
        "output": "SELECT t3.name ,  t2.district FROM phone_market as t1 JOIN market as t2 ON t1.market_id  =  t2.market_id JOIN phone as t3 ON t1.phone_id  =  t3.phone_id ORDER BY t2.ranking"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average number of pages per minute color? ###filtered_database_schema: CREATE TABLE `product` ( product_id INT PRIMARY KEY, product TEXT, dimensions TEXT, dpi REAL, pages_per_minute_color REAL, max_page_size TEXT, interface TEXT ); Sample rows from `product`: (1, Fujitsu fi-6130 A4 Series Scanner, 301 x 160 x 158, 600.0, 30.0, A4, USB 2.0), (2, Plustek MobileOffice D28 Corporate, 303 x 94 x 60, 600.0, 28.0, A4, USB 2.0), (3, Xerox Travel Scanner 100, 289 x 51 x 38, 600.0, 4.0, A4, USB 2.0), CREATE TABLE `store` ( Store_ID INT PRIMARY KEY, Store_Name TEXT, Type TEXT, Area_size REAL, Number_of_product_category REAL, Ranking INT ); Sample rows from `store`: (1, Miramichi, City Mall, 179.84, 17811.0, 2), (2, Neguac, Village Store, 26.69, 1678.0, 3), (3, Rogersville, Village Store, 7.23, 1170.0, 1), CREATE TABLE `district` ( District_ID INT PRIMARY KEY, District_name TEXT, Headquartered_City TEXT, City_Population REAL, City_Area REAL ); Sample rows from `district`: (1, Attock District, Attock City, 94620.0, 20.0), (2, Bahawalnagar District, Bahawalnagar City, 134936.0, 13.0), (3, Bahawalpur District, Bahawalpur City, 530438.0, 38.0), CREATE TABLE `store_product` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), Product_ID INT PRIMARY KEY REFERENCES product(Product_ID) ); Sample rows from `store_product`: (1, 1), (1, 2), (1, 3), CREATE TABLE `store_district` ( Store_ID INT PRIMARY KEY REFERENCES store(Store_ID), District_ID INT REFERENCES district(District_ID) ); Sample rows from `store_district`: (1, 15), (2, 15), (3, 11), ",
        "output": "SELECT AVG(pages_per_minute_color) FROM product"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the first and last name of all the teachers that teach EVELINA BROMLEY. ###filtered_database_schema: CREATE TABLE `list` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Grade INTEGER, Classroom INTEGER ); Sample rows from `list`: (CAR, MAUDE, 2, 101), (KRISTENSEN, STORMY, 6, 112), (VANDERWOUDE, SHERWOOD, 3, 107), CREATE TABLE `teachers` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Classroom INTEGER ); Sample rows from `teachers`: (MACROSTIE, MIN, 101), (COVIN, JEROME, 102), (MOYER, OTHA, 103), ",
        "output": "SELECT t2.firstname ,  t2.lastname FROM list as t1 JOIN teachers as t2 ON t1.classroom  =  t2.classroom WHERE t1.firstname  =  \"EVELINA\" AND t1.lastname  =  \"BROMLEY\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the state with the largest area ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX(area) FROM state );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many engineers did each staff contact? List both the contact staff name and number of engineers contacted. ###filtered_database_schema: CREATE TABLE `Third_Party_Companies` ( company_id INTEGER, company_type VARCHAR(5), company_name VARCHAR(255), company_address VARCHAR(255), other_company_details VARCHAR(255) ); Sample rows from `Third_Party_Companies`: (1, Maintenance Contractor, Langworth-Funk, 615 Jacobs Mews, Uganda), (2, Maintenance Contractor, McDermott Group, 873 Conrad Creek Apt. 286, China), (3, Maintenance Contractor, Schuppe-Carroll, 066 Bechtelar Ridge, United Arab Emirates), CREATE TABLE `Maintenance_Contracts` ( maintenance_contract_id INTEGER, maintenance_contract_company_id INTEGER REFERENCES Third_Party_Companies(company_id), contract_start_date DATETIME, contract_end_date DATETIME, other_contract_details VARCHAR(255) ); Sample rows from `Maintenance_Contracts`: (1, 15, 2017-09-13 11:51:29, 2018-03-16 21:21:50, None), (2, 9, 2017-12-18 11:43:16, 2018-03-22 06:00:37, None), (3, 11, 2017-05-06 02:32:19, 2018-03-20 14:02:54, None), CREATE TABLE `Parts` ( part_id INTEGER, part_name VARCHAR(255), chargeable_yn VARCHAR(1), chargeable_amount VARCHAR(20), other_part_details VARCHAR(255) ); Sample rows from `Parts`: (1, top, 0, 4, None), (2, middle, 1, 9, None), (3, package, 1, 9, None), CREATE TABLE `Skills` ( skill_id INTEGER, skill_code VARCHAR(20), skill_description VARCHAR(255) ); Sample rows from `Skills`: (1, ELEC, Electrical), (2, MECH, Mechanical), (3, TV, TV, Video), CREATE TABLE `Staff` ( staff_id INTEGER, staff_name VARCHAR(255), gender VARCHAR(1), other_staff_details VARCHAR(255) ); Sample rows from `Staff`: (1, Audreanne, 1, Manager), (2, Berneice, 1, Manager), (3, Helena, 1, None), CREATE TABLE `Assets` ( asset_id INTEGER, maintenance_contract_id INTEGER REFERENCES Maintenance_Contracts(maintenance_contract_id), supplier_company_id INTEGER REFERENCES Third_Party_Companies(company_id), asset_details VARCHAR(255), asset_make VARCHAR(20), asset_model VARCHAR(20), asset_acquired_date DATETIME, asset_disposed_date DATETIME, other_asset_details VARCHAR(255) ); Sample rows from `Assets`: (1, 2, 2, dell laptop1, PT, 58 ub, 2017-12-25 00:31:27, 2018-03-14 10:50:00, None), (2, 14, 1, dell laptop2, IN, 35 xt, 2018-01-27 00:59:46, 2018-03-20 04:24:09, None), (3, 7, 2, dell laptop3, IT, 63 ok, 2017-09-07 08:13:15, 2018-03-08 20:50:40, Bad condition), CREATE TABLE `Asset_Parts` ( asset_id INTEGER REFERENCES Assets(asset_id), part_id INTEGER REFERENCES Parts(part_id) ); Sample rows from `Asset_Parts`: (5, 3), (3, 3), (10, 1), CREATE TABLE `Maintenance_Engineers` ( engineer_id INTEGER, company_id INTEGER REFERENCES Third_Party_Companies(company_id), first_name VARCHAR(50), last_name VARCHAR(50), other_details VARCHAR(255) ); Sample rows from `Maintenance_Engineers`: (1, 14, Etha, Reinger, Skilled), (2, 2, Clemens, Orn, None), (3, 6, Samanta, Hauck, None), CREATE TABLE `Engineer_Skills` ( engineer_id INTEGER REFERENCES Maintenance_Engineers(engineer_id), skill_id INTEGER REFERENCES Skills(skill_id) ); Sample rows from `Engineer_Skills`: (10, 2), (10, 1), (15, 1), CREATE TABLE `Fault_Log` ( fault_log_entry_id INTEGER, asset_id INTEGER REFERENCES Assets(asset_id), recorded_by_staff_id INTEGER REFERENCES Staff(staff_id), fault_log_entry_datetime DATETIME, fault_description VARCHAR(255), other_fault_details VARCHAR(255) ); Sample rows from `Fault_Log`: (1, 3, 14, 2018-03-21 04:25:00, system error, None), (2, 7, 4, 2018-03-13 09:43:05, system error, None), (3, 6, 9, 2018-02-24 09:28:20, system error, None), CREATE TABLE `Engineer_Visits` ( engineer_visit_id INTEGER, contact_staff_id INTEGER REFERENCES Staff(staff_id), engineer_id INTEGER REFERENCES Maintenance_Engineers(engineer_id), fault_log_entry_id INTEGER REFERENCES Fault_Log(fault_log_entry_id), fault_status VARCHAR(10), visit_start_datetime DATETIME, visit_end_datetime DATETIME, other_visit_details VARCHAR(255) ); Sample rows from `Engineer_Visits`: (1, 8, 8, 13, Waiting, 1978-10-12 23:14:40, 1988-01-07 06:41:51, None), (2, 7, 15, 13, Return, 1980-05-02 23:31:18, 1990-08-30 22:44:16, None), (3, 7, 15, 4, Waiting, 2010-02-23 18:16:23, 1982-05-13 02:08:41, None), CREATE TABLE `Part_Faults` ( part_fault_id INTEGER, part_id INTEGER REFERENCES Parts(part_id), fault_short_name VARCHAR(20), fault_description VARCHAR(255), other_fault_details VARCHAR(255) ); Sample rows from `Part_Faults`: (1, 1, PW, Package Wrong, None), (2, 1, PW, Package Wrong, None), (3, 3, TW, Top Parts Wrong, None), CREATE TABLE `Fault_Log_Parts` ( fault_log_entry_id INTEGER REFERENCES Fault_Log(fault_log_entry_id), part_fault_id INTEGER REFERENCES Part_Faults(part_fault_id), fault_status VARCHAR(10) ); Sample rows from `Fault_Log_Parts`: (12, 3, Reported), (7, 4, Reported), (1, 9, Return), CREATE TABLE `Skills_Required_To_Fix` ( part_fault_id INTEGER REFERENCES Part_Faults(part_fault_id), skill_id INTEGER REFERENCES Skills(skill_id) ); Sample rows from `Skills_Required_To_Fix`: (3, 2), (12, 3), (6, 1), ",
        "output": "SELECT t1.staff_name ,  COUNT(*) FROM staff as t1 JOIN engineer_visits as t2 ON t1.staff_id  =  t2.contact_staff_id GROUP BY t1.staff_name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average weight of all players? ###filtered_database_schema: CREATE TABLE `Player_Attributes` ( id INTEGER, player_fifa_api_id INTEGER REFERENCES Player(player_fifa_api_id), player_api_id INTEGER REFERENCES Player(player_api_id), date TEXT, overall_rating INTEGER, potential INTEGER, preferred_foot TEXT, attacking_work_rate TEXT, defensive_work_rate TEXT, crossing INTEGER, finishing INTEGER, heading_accuracy INTEGER, short_passing INTEGER, volleys INTEGER, dribbling INTEGER, curve INTEGER, free_kick_accuracy INTEGER, long_passing INTEGER, ball_control INTEGER, acceleration INTEGER, sprint_speed INTEGER, agility INTEGER, reactions INTEGER, balance INTEGER, shot_power INTEGER, jumping INTEGER, stamina INTEGER, strength INTEGER, long_shots INTEGER, aggression INTEGER, interceptions INTEGER, positioning INTEGER, vision INTEGER, penalties INTEGER, marking INTEGER, standing_tackle INTEGER, sliding_tackle INTEGER, gk_diving INTEGER, gk_handling INTEGER, gk_kicking INTEGER, gk_positioning INTEGER, gk_reflexes INTEGER ); Sample rows from `Player_Attributes`: (1, 218353, 505942, 2016-02-18 00:00:00, 67, 71, right, medium, medium, 49, 44, 71, 61, 44, 51, 45, 39, 64, 49, 60, 64, 59, 47, 65, 55, 58, 54, 76, 35, 71, 70, 45, 54, 48, 65, 69, 69, 6, 11, 10, 8, 8), (2, 218353, 505942, 2015-11-19 00:00:00, 67, 71, right, medium, medium, 49, 44, 71, 61, 44, 51, 45, 39, 64, 49, 60, 64, 59, 47, 65, 55, 58, 54, 76, 35, 71, 70, 45, 54, 48, 65, 69, 69, 6, 11, 10, 8, 8), (3, 218353, 505942, 2015-09-21 00:00:00, 62, 66, right, medium, medium, 49, 44, 71, 61, 44, 51, 45, 39, 64, 49, 60, 64, 59, 47, 65, 55, 58, 54, 76, 35, 63, 41, 45, 54, 48, 65, 66, 69, 6, 11, 10, 8, 8), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (Team, 103916), (Country, 51958), (League, 51958), CREATE TABLE `Player` ( id INTEGER, player_api_id INTEGER PRIMARY KEY, player_name TEXT, player_fifa_api_id INTEGER PRIMARY KEY, birthday TEXT, height INTEGER, weight INTEGER ); Sample rows from `Player`: (1, 505942, Aaron Appindangoye, 218353, 1992-02-29 00:00:00, 182.88, 187), (2, 155782, Aaron Cresswell, 189615, 1989-12-15 00:00:00, 170.18, 146), (3, 162549, Aaron Doran, 186170, 1991-05-13 00:00:00, 170.18, 163), CREATE TABLE `League` ( id INTEGER, country_id INTEGER REFERENCES Country(id), name TEXT PRIMARY KEY ); Sample rows from `League`: (1, 1, Belgium Jupiler League), (1729, 1729, England Premier League), (4769, 4769, France Ligue 1), CREATE TABLE `Country` ( id INTEGER, name TEXT PRIMARY KEY ); Sample rows from `Country`: (1, Belgium), (1729, England), (4769, France), CREATE TABLE `Team` ( id INTEGER, team_api_id INTEGER PRIMARY KEY, team_fifa_api_id INTEGER, team_long_name TEXT, team_short_name TEXT ); Sample rows from `Team`: (1, 9987, 673, KRC Genk, GEN), (2, 9993, 675, Beerschot AC, BAC), (3, 10000, 15005, SV Zulte-Waregem, ZUL), CREATE TABLE `Team_Attributes` ( id INTEGER, team_fifa_api_id INTEGER REFERENCES Team(team_fifa_api_id), team_api_id INTEGER REFERENCES Team(team_api_id), date TEXT, buildUpPlaySpeed INTEGER, buildUpPlaySpeedClass TEXT, buildUpPlayDribbling INTEGER, buildUpPlayDribblingClass TEXT, buildUpPlayPassing INTEGER, buildUpPlayPassingClass TEXT, buildUpPlayPositioningClass TEXT, chanceCreationPassing INTEGER, chanceCreationPassingClass TEXT, chanceCreationCrossing INTEGER, chanceCreationCrossingClass TEXT, chanceCreationShooting INTEGER, chanceCreationShootingClass TEXT, chanceCreationPositioningClass TEXT, defencePressure INTEGER, defencePressureClass TEXT, defenceAggression INTEGER, defenceAggressionClass TEXT, defenceTeamWidth INTEGER, defenceTeamWidthClass TEXT, defenceDefenderLineClass TEXT ); Sample rows from `Team_Attributes`: (1, 434, 9930, 2010-02-22 00:00:00, 60, Balanced, None, Little, 50, Mixed, Organised, 60, Normal, 65, Normal, 55, Normal, Organised, 50, Medium, 55, Press, 45, Normal, Cover), (2, 434, 9930, 2014-09-19 00:00:00, 52, Balanced, 48, Normal, 56, Mixed, Organised, 54, Normal, 63, Normal, 64, Normal, Organised, 47, Medium, 44, Press, 54, Normal, Cover), (3, 434, 9930, 2015-09-10 00:00:00, 47, Balanced, 41, Normal, 54, Mixed, Organised, 54, Normal, 63, Normal, 64, Normal, Organised, 47, Medium, 44, Press, 54, Normal, Cover), ",
        "output": "SELECT AVG(weight) FROM player"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Where is the history department? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT dept_address FROM department WHERE dept_name  =  'History'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the emails of employees with null commission, salary between 7000 and 12000, and who work in department 50? ###filtered_database_schema: CREATE TABLE `regions` ( REGION_ID decimal(5,0) PRIMARY KEY, REGION_NAME varchar(25) ); Sample rows from `regions`: (1, Europe\\r), (2, Americas\\r), (3, Asia\\r), CREATE TABLE `countries` ( COUNTRY_ID varchar(2) PRIMARY KEY, COUNTRY_NAME varchar(40), REGION_ID decimal(10,0) REFERENCES regions(REGION_ID) ); Sample rows from `countries`: (AR, Argentina, 2), (AU, Australia, 3), (BE, Belgium, 1), CREATE TABLE `departments` ( DEPARTMENT_ID decimal(4,0) PRIMARY KEY, DEPARTMENT_NAME varchar(30), MANAGER_ID decimal(6,0), LOCATION_ID decimal(4,0) ); Sample rows from `departments`: (10, Administration, 200, 1700), (20, Marketing, 201, 1800), (30, Purchasing, 114, 1700), CREATE TABLE `jobs` ( JOB_ID varchar(10) PRIMARY KEY, JOB_TITLE varchar(35), MIN_SALARY decimal(6,0), MAX_SALARY decimal(6,0) ); Sample rows from `jobs`: (AD_PRES, President, 20000, 40000), (AD_VP, Administration Vice President, 15000, 30000), (AD_ASST, Administration Assistant, 3000, 6000), CREATE TABLE `employees` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY, FIRST_NAME varchar(20), LAST_NAME varchar(25), EMAIL varchar(25), PHONE_NUMBER varchar(20), HIRE_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), SALARY decimal(8,2), COMMISSION_PCT decimal(2,2), MANAGER_ID decimal(6,0), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `employees`: (100, Steven, King, SKING, 515.123.4567, 1987-06-17, AD_PRES, 24000, 0, 0, 90), (101, Neena, Kochhar, NKOCHHAR, 515.123.4568, 1987-06-18, AD_VP, 17000, 0, 100, 90), (102, Lex, De Haan, LDEHAAN, 515.123.4569, 1987-06-19, AD_VP, 17000, 0, 100, 90), CREATE TABLE `job_history` ( EMPLOYEE_ID decimal(6,0) PRIMARY KEY REFERENCES employees(EMPLOYEE_ID), START_DATE date PRIMARY KEY, END_DATE date, JOB_ID varchar(10) REFERENCES jobs(JOB_ID), DEPARTMENT_ID decimal(4,0) REFERENCES departments(DEPARTMENT_ID) ); Sample rows from `job_history`: (102, 1993-01-13, 1998-07-24, IT_PROG, 60), (101, 1989-09-21, 1993-10-27, AC_ACCOUNT, 110), (101, 1993-10-28, 1997-03-15, AC_MGR, 110), CREATE TABLE `locations` ( LOCATION_ID decimal(4,0) PRIMARY KEY, STREET_ADDRESS varchar(40), POSTAL_CODE varchar(12), CITY varchar(30), STATE_PROVINCE varchar(25), COUNTRY_ID varchar(2) REFERENCES countries(COUNTRY_ID) ); Sample rows from `locations`: (1000, 1297 Via Cola di Rie, 989, Roma, , IT), (1100, 93091 Calle della Testa, 10934, Venice, , IT), (1200, 2017 Shinjuku-ku, 1689, Tokyo, Tokyo Prefecture, JP), ",
        "output": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many products are there under the category \"Seeds\"? ###filtered_database_schema: CREATE TABLE `Ref_Characteristic_Types` ( characteristic_type_code VARCHAR(15) PRIMARY KEY, characteristic_type_description VARCHAR(80) ); Sample rows from `Ref_Characteristic_Types`: (Grade, Grade), (Purity, Purity), CREATE TABLE `Ref_Colors` ( color_code VARCHAR(15) PRIMARY KEY, color_description VARCHAR(80) ); Sample rows from `Ref_Colors`: (9, red), (5, green), (1, yellow), CREATE TABLE `Ref_Product_Categories` ( product_category_code VARCHAR(15) PRIMARY KEY, product_category_description VARCHAR(80), unit_of_measure VARCHAR(20) ); Sample rows from `Ref_Product_Categories`: (Herbs, Herbs, Handful ), (Seeds, Seeds, Weight - pound,kilo.), (Spices, Spices, Weight - pound,kilo.), CREATE TABLE `Characteristics` ( characteristic_id INTEGER, characteristic_type_code VARCHAR(15) REFERENCES Ref_Characteristic_Types(characteristic_type_code), characteristic_data_type VARCHAR(10), characteristic_name VARCHAR(80), other_characteristic_details VARCHAR(255) ); Sample rows from `Characteristics`: (1, Grade, numquam, slow, None), (2, Grade, doloribus, fast, None), (3, Purity, rem, warm, None), CREATE TABLE `Products` ( product_id INTEGER, color_code VARCHAR(15) REFERENCES Ref_Colors(color_code), product_category_code VARCHAR(15) REFERENCES Ref_Product_Categories(product_category_code), product_name VARCHAR(80), typical_buying_price VARCHAR(20), typical_selling_price VARCHAR(20), product_description VARCHAR(255), other_product_details VARCHAR(255) ); Sample rows from `Products`: (1, 4, Spices, cumin, , 2878.3, et, None), (2, 2, Spices, peper, 352447.2874677, 1892070.2803543, rerum, None), (3, 9, Herbs, basil, 503.8431967, 0.1859512, officia, None), CREATE TABLE `Product_Characteristics` ( product_id INTEGER REFERENCES Products(product_id), characteristic_id INTEGER REFERENCES Characteristics(characteristic_id), product_characteristic_value VARCHAR(50) ); Sample rows from `Product_Characteristics`: (13, 13, low), (11, 2, low), (5, 15, low), ",
        "output": "SELECT COUNT(*) FROM products WHERE product_category_code  =  \"Seeds\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For each country, what is the average elevation of that country's airports? ###filtered_database_schema: CREATE TABLE `routes` ( rid INTEGER, dst_apid INTEGER REFERENCES airports(apid), dst_ap varchar(4), src_apid bigint REFERENCES airports(apid), src_ap varchar(4), alid bigint REFERENCES airlines(alid), airline varchar(4), codeshare TEXT ); Sample rows from `routes`: (37, 2990, KZ, 2965, AER, 410, 2B, None), (38, 2990, KZ, 2966, ASF, 410, 2B, None), (39, 2962, MRV, 2966, ASF, 410, 2B, None), CREATE TABLE `airports` ( apid INTEGER, name TEXT, city TEXT, country TEXT, x REAL, y REAL, elevation bigint, iata character varchar(3), icao character varchar(4) ); Sample rows from `airports`: (1, Goroka Airport, Goroka, Papua New Guinea, 145.391998291, -6.081689834590001, 5282, GKA, AYGA), (2, Madang Airport, Madang, Papua New Guinea, 145.789001465, -5.20707988739, 20, MAG, AYMD), (3, Mount Hagen Kagamuga Airport, Mount Hagen, Papua New Guinea, 144.29600524902344, -5.826789855957031, 5388, HGU, AYMH), CREATE TABLE `airlines` ( alid INTEGER, name TEXT, iata varchar(2), icao varchar(3), callsign TEXT, country TEXT, active varchar(2) ); Sample rows from `airlines`: (-1, Unknown, -, N/A, None, None, Y), (1, Private flight, -, N/A, , , Y), (2, 135 Airways, , GNL, GENERAL, United States, N), ",
        "output": "SELECT AVG(elevation) ,  country FROM airports GROUP BY country"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many students does KAWA GORDON teaches? ###filtered_database_schema: CREATE TABLE `list` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Grade INTEGER, Classroom INTEGER ); Sample rows from `list`: (CAR, MAUDE, 2, 101), (KRISTENSEN, STORMY, 6, 112), (VANDERWOUDE, SHERWOOD, 3, 107), CREATE TABLE `teachers` ( LastName TEXT PRIMARY KEY, FirstName TEXT PRIMARY KEY, Classroom INTEGER ); Sample rows from `teachers`: (MACROSTIE, MIN, 101), (COVIN, JEROME, 102), (MOYER, OTHA, 103), ",
        "output": "SELECT COUNT(*) FROM list as t1 JOIN teachers as t2 ON t1.classroom  =  t2.classroom WHERE t2.firstname  =  \"KAWA\" AND t2.lastname  =  \"GORDON\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the total kills of the perpetrators with height more than 1.84. ###filtered_database_schema: CREATE TABLE `perpetrator` ( Perpetrator_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Date TEXT, Year REAL, Location TEXT, Country TEXT, Killed INT, Injured INT ); Sample rows from `perpetrator`: (1, 1, 04.26 April 26/27, 1982.0, Uiryeong, South Korea, 56, 37), (2, 3, 11.18 Nov. 18, 1995.0, Zhaodong, China, 32, 16), (3, 4, 05.21 May 21, 1938.0, Kaio, Japan, 30, 3), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Height REAL, Weight REAL, Home Town TEXT ); Sample rows from `people`: (1, Ron Baxter, 6.4, 205.0, Los Angeles, CA), (2, Brent Boyd, 6.3, 185.0, Baton Rouge, LA), (3, Tyrone Brayan, 6.7, 220.0, Placentia, CA), ",
        "output": "SELECT SUM(t2.killed) FROM people as t1 JOIN perpetrator as t2 ON t1.people_id  =  t2.people_id WHERE t1.height  >  1.84"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Which authors with submissions are from college \"Florida\" or \"Temple\"? ###filtered_database_schema: CREATE TABLE `workshop` ( Workshop_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Name TEXT ); Sample rows from `workshop`: (1, August 18, 2007, London UK, ABC 2007), (2, August 21, 2007, London UK, Conference 2007), (3, August 25, 2007, New Jersey USA, Workshop 2007), CREATE TABLE `submission` ( Submission_ID INT PRIMARY KEY, Scores REAL, Author TEXT, College TEXT ); Sample rows from `submission`: (1, 72.0, Steve Niehaus, Notre Dame), (2, 79.0, Sammy Green, Florida), (3, 78.0, Sherman Smith, Miami (OH)), CREATE TABLE `Acceptance` ( Submission_ID INT PRIMARY KEY REFERENCES submission(Submission_ID), Workshop_ID INT PRIMARY KEY REFERENCES workshop(Workshop_ID), Result TEXT ); Sample rows from `Acceptance`: (2, 5, Accepted), (2, 3, Rejected), (3, 2, Rejected), ",
        "output": "SELECT author FROM submission WHERE college  =  \"Florida\" OR college  =  \"Temple\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many distinct order ids correspond to each product? ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(50), customer_middle_initial VARCHAR(1), customer_last_name VARCHAR(50), gender VARCHAR(1), email_address VARCHAR(255), login_name VARCHAR(80), login_password VARCHAR(20), phone_number VARCHAR(255), town_city VARCHAR(50), state_county_province VARCHAR(50), country VARCHAR(50) ); Sample rows from `Customers`: (1, Dee, A, Larkin, 1, thora.torphy@example.org, xhartmann, 77789d292604ea04406f, 241.796.1219x37862, North Nellie, WestVirginia, USA), (2, Brennon, H, Weimann, 0, roosevelt.collier@example.org, shayne.lesch, ce97a3e4539347daab96, (943)219-4234x415, South Isabell, Oklahoma, USA), (3, Joesph, K, Schaefer, 0, homenick.ambrose@example.net, feeney.lauriane, a6c7a7064c36b038d402, (488)524-5345, New Nikolas, Arkansas, USA), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 12, 2012-06-27 20:49:56, None), (2, 12, 2012-08-25 07:51:54, None), (3, 8, 2017-11-05 15:32:38, None), CREATE TABLE `Invoices` ( invoice_number INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_date DATETIME ); Sample rows from `Invoices`: (1, 9, 2018-03-01 16:40:48), (2, 9, 2018-03-20 00:21:41), (3, 3, 2018-03-05 08:47:33), CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_account_opened DATETIME, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 8, 2016-07-30 22:22:24, 900, Regular), (2, 3, 2017-05-29 16:45:17, 520, VIP), (3, 8, 2012-05-04 18:50:32, 323, Regular), CREATE TABLE `Product_Categories` ( production_type_code VARCHAR(15) PRIMARY KEY, product_type_description VARCHAR(80), vat_rating DECIMAL(19,4) ); Sample rows from `Product_Categories`: (Food, Food, 15.84), (DVDs, Dvd products, 11.4), (Books, Books, 13.95), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, production_type_code VARCHAR(15) REFERENCES Product_Categories(production_type_code), unit_price DECIMAL(19,4), product_name VARCHAR(80), product_color VARCHAR(20), product_size VARCHAR(20) ); Sample rows from `Products`: (1, 4, Food, 617.95, Coffee Bean, Red, Medium), (2, 4, Books, 558.49, Learning French, Yellow, Medium), (3, 8, Electronics, 563.58, Fans, Black, Medium), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DECIMAL(19,4), transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 13, 12, Payment, 2018-03-15 21:13:57, 613.96, None, None), (2, 9, 1, Payment, 2018-03-13 13:27:46, 368.46, None, None), (3, 6, 1, Refund, 2018-03-03 01:50:25, 1598.25, None, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), product_id INTEGER REFERENCES Products(product_id), product_quantity VARCHAR(50), other_order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 4, 6, None), (2, 4, 10, 7, None), (3, 15, 5, 4, None), CREATE TABLE `Invoice_Line_Items` ( order_item_id INTEGER REFERENCES Order_Items(order_item_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), product_id INTEGER REFERENCES Products(product_id), product_title VARCHAR(80), product_quantity VARCHAR(50), product_price DECIMAL(19,4), derived_product_cost DECIMAL(19,4), derived_vat_payable DECIMAL(19,4), derived_total_cost DECIMAL(19,4) ); Sample rows from `Invoice_Line_Items`: (14, 9, 5, prod_name, 4, 742.37, 191.11, None, 69.82), (3, 9, 15, prod_name, 1, 814.87, 176.29, None, 59.56), (4, 10, 15, prod_name, 8, 943.07, 73.14, None, 59.93), ",
        "output": "SELECT product_id ,  COUNT(DISTINCT order_id) FROM order_items GROUP BY product_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"? ###filtered_database_schema: CREATE TABLE `film` ( Film_ID INT PRIMARY KEY, Title TEXT, Studio TEXT, Director TEXT, Gross_in_dollar INT ); Sample rows from `film`: (1, ET the Extra-Terrestrial, Universal, Steven Spielberg, 435110554), (2, Tootsie, Columbia, Sydney Pollack, 177200000), (3, An Officer and a Gentleman, Paramount / Lorimar, Taylor Hackford, 129795554), CREATE TABLE `market` ( Market_ID INT PRIMARY KEY, Country TEXT, Number_cities INT ); Sample rows from `market`: (1, Japan, 209), (2, China, 540), (3, USA, 700), CREATE TABLE `film_market_estimation` ( Estimation_ID INT PRIMARY KEY, Low_Estimate REAL, High_Estimate REAL, Film_ID INT REFERENCES film(Film_ID), Type TEXT, Market_ID INT REFERENCES market(Market_ID), Year INT ); Sample rows from `film_market_estimation`: (1, 80000.0, 80400.0, 1, Mass suicide murder, 1, 1945), (2, 8000.0, 8000.0, 2, Mass suicide, 2, 1944), (3, 3000.0, 80400.0, 3, Mass human sacrifice, 3, 1487), ",
        "output": "SELECT title ,  studio FROM film WHERE studio LIKE \"%Universal%\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the course names for courses taught on MTW? ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), CREATE TABLE `Department` ( DNO INTEGER, Division VARCHAR(2), DName VARCHAR(25), Room VARCHAR(5), Building VARCHAR(13), DPhone INTEGER ); Sample rows from `Department`: (10, AS, History of Art, 268, Mergenthaler, 7117), (20, AS, Biology, 144, Mudd, 7330), (30, AS, Chemistry, 113, Remsen, 7429), CREATE TABLE `Member_of` ( FacID INTEGER REFERENCES Faculty(FacID), DNO INTEGER REFERENCES Department(DNO), Appt_Type VARCHAR(15) ); Sample rows from `Member_of`: (7792, 600, Primary), (9210, 520, Primary), (9811, 550, Primary), CREATE TABLE `Course` ( CID VARCHAR(7) PRIMARY KEY, CName VARCHAR(40), Credits INTEGER, Instructor INTEGER REFERENCES Faculty(FacID), Days VARCHAR(5), Hours VARCHAR(11), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Course`: (600.101, COMPUTER LITERACY, 3, 6112, MTW, 3, 600), (600.103, INTRODUCTION TO COMPUTER SCIENCE, 1, 4230, Th, 4, 600), (600.107, INTRO TO PROGRAMMING IN JAVA, 3, 1193, MTW, 3, 600), CREATE TABLE `Minor_in` ( StuID INTEGER REFERENCES Student(StuID), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Minor_in`: (1004, 520), (1005, 550), (1006, 50), CREATE TABLE `Enrolled_in` ( StuID INTEGER REFERENCES Student(StuID), CID VARCHAR(7) REFERENCES Course(CID), Grade VARCHAR(2) REFERENCES Gradeconversion(lettergrade) ); Sample rows from `Enrolled_in`: (1001, 550.681, A-), (1001, 600.303, B), (1001, 600.315, B+), CREATE TABLE `Gradeconversion` ( lettergrade VARCHAR(2) PRIMARY KEY, gradepoint FLOAT ); Sample rows from `Gradeconversion`: (A+, 4.0), (A, 4.0), (A-, 3.7), ",
        "output": "SELECT cname FROM course WHERE days  =  \"MTW\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many artists do we have? ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Year_Join INT, Age INT ); Sample rows from `artist`: (1, Vijay Singh, Fiji, 1998, 45), (2, John Daly, United States, 1991, 46), (3, Paul Azinger, United States, 1993, 47), CREATE TABLE `exhibition` ( Exhibition_ID INT PRIMARY KEY, Year INT, Theme TEXT, Artist_ID INT REFERENCES artist(Artist_ID), Ticket_Price REAL ); Sample rows from `exhibition`: (1, 2004, Santa Claus, 1, 19.95), (2, 2005, Christmas stocking, 2, 19.95), (3, 2006, Santa Claus and Rudolph the Red-Nosed Reindeer, 4, 14.95), CREATE TABLE `exhibition_record` ( Exhibition_ID INT PRIMARY KEY REFERENCES exhibition(Exhibition_ID), Date TEXT PRIMARY KEY, Attendance INT ); Sample rows from `exhibition_record`: (1, December 2, 965), (1, December 5, 1098), (1, December 7, 2983), ",
        "output": "SELECT COUNT(*) FROM artist"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the device carriers that do not have Android as their software platform. ###filtered_database_schema: CREATE TABLE `device` ( Device_ID INT PRIMARY KEY, Device TEXT, Carrier TEXT, Package_Version TEXT, Applications TEXT, Software_Platform TEXT ); Sample rows from `device`: (1, BlackBerry Storm 9530, MTS Mobility, 5.0.0.808, 5.0.0.419, Android), (2, Apple, Verizon Wireless, 5.0.0.328, 5.0.0.328, iOS), (3, Huawei, Telus Mobility, 5.0.0.419, 5.0.0.419, Android), CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Shop_Name TEXT, Location TEXT, Open_Date TEXT, Open_Year INT ); Sample rows from `shop`: (1, Dinas Device, Dinas, 1 January, 2014), (2, Best Buy, Cymmer, 15 July, 2006), (3, Ferndale, Blaenllechau, 8 November, 2009), CREATE TABLE `stock` ( Shop_ID INT PRIMARY KEY REFERENCES shop(Shop_ID), Device_ID INT PRIMARY KEY REFERENCES device(Device_ID), Quantity INT ); Sample rows from `stock`: (1, 6, 100), (2, 6, 110), (3, 6, 134), ",
        "output": "SELECT carrier FROM device WHERE software_platform != 'Android'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many distinct locations have the things with service detail 'Unsatisfied' been located in? ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_details VARCHAR(255) ); Sample rows from `Customers`: (4, Mr. Raul Prosacco), (5, Esteban Senger), (16, Tyrique Durgan II), CREATE TABLE `Properties` ( property_id INTEGER, property_type_code CHAR(15), property_address VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Properties`: (24, apartment, 85456 Annie Lodge Suite 449, USA), (107, house, 2580 Yundt Plains, USA), (108, house, 5983 Fleta Throughway, USA), CREATE TABLE `Residents` ( resident_id INTEGER PRIMARY KEY, property_id INTEGER PRIMARY KEY REFERENCES Properties(property_id), date_moved_in DATETIME PRIMARY KEY, date_moved_out DATETIME, other_details VARCHAR(255) ); Sample rows from `Residents`: (6, 954, 2017-06-17 15:43:33, 2017-12-18 03:46:04, Anderson Batz), (10, 605, 2015-03-27 12:00:00, 2018-03-17 07:48:09, Miss Naomie Osinski), (23, 879, 2015-03-27 12:00:00, 2017-11-14 06:28:48, Jess Wyman), CREATE TABLE `Organizations` ( organization_id INTEGER, parent_organization_id INTEGER, organization_details VARCHAR(255) ); Sample rows from `Organizations`: (7, 7, Reinger, Hudson and Nolan Group), (8, 7, Denesik and Sons Party), (10, 8, Robel-Schulist Group), CREATE TABLE `Services` ( service_id INTEGER, organization_id INTEGER REFERENCES Organizations(organization_id), service_type_code CHAR(15), service_details VARCHAR(255) ); Sample rows from `Services`: (10, 10, Cleanning, Satisfied), (11, 7, Check, Satisfied), (13, 8, Moving Out, Satisfied), CREATE TABLE `Residents_Services` ( resident_id INTEGER PRIMARY KEY REFERENCES Residents(resident_id), service_id INTEGER PRIMARY KEY REFERENCES Services(service_id), date_moved_in DATETIME REFERENCES Residents(date_moved_in), property_id INTEGER REFERENCES Residents(property_id), date_requested DATETIME, date_provided DATETIME, other_details VARCHAR(255) ); Sample rows from `Residents_Services`: (6, 49, 2017-06-17 15:43:33, 954, 2016-07-25 01:32:23, 2018-02-26 00:27:11, Satisfied), (23, 41, 2015-03-27 12:00:00, 879, 2016-10-10 21:42:21, 2017-08-21 06:23:06, Unsatisfied), (28, 11, 2015-03-27 12:00:00, 629, 2017-07-14 19:03:47, 2017-08-28 03:43:56, Unsatisfied), CREATE TABLE `Things` ( thing_id INTEGER, organization_id INTEGER REFERENCES Organizations(organization_id), Type_of_Thing_Code CHAR(15), service_type_code CHAR(10), service_details VARCHAR(255) ); Sample rows from `Things`: (1, 8, Electronics, Check, Unsatisfied), (2, 8, Electronics, Cleanning, Satisfied), (10, 8, Commen, Check, Satisfied), CREATE TABLE `Customer_Events` ( Customer_Event_ID INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_moved_in DATETIME REFERENCES Residents(date_moved_in), property_id INTEGER REFERENCES Residents(property_id), resident_id INTEGER REFERENCES Residents(resident_id), thing_id INTEGER REFERENCES Things(thing_id) ); Sample rows from `Customer_Events`: (70, 19, 2015-03-27 12:00:00, 605, 10, 1), (160, 5, 2015-03-27 12:00:00, 879, 23, 80), (166, 16, 2015-03-27 12:00:00, 629, 28, 14), CREATE TABLE `Customer_Event_Notes` ( Customer_Event_Note_ID INTEGER, Customer_Event_ID INTEGER REFERENCES Customer_Events(Customer_Event_ID), service_type_code CHAR(15), resident_id INTEGER, property_id INTEGER, date_moved_in DATETIME ); Sample rows from `Customer_Event_Notes`: (18, 70, Cleanning, 58, 107, 2016-08-04 01:06:05), (21, 428, Check, 87, 445, 2016-12-11 01:05:14), (32, 70, Check, 37, 669, 2016-07-10 04:09:56), CREATE TABLE `Timed_Status_of_Things` ( thing_id INTEGER PRIMARY KEY REFERENCES Things(thing_id), Date_and_Date DATETIME PRIMARY KEY, Status_of_Thing_Code CHAR(15) PRIMARY KEY ); Sample rows from `Timed_Status_of_Things`: (2, 2016-05-27 23:33:34, Open), (2, 2016-07-17 08:35:27, Close), (2, 2017-06-19 02:59:21, In Progress), CREATE TABLE `Timed_Locations_of_Things` ( thing_id INTEGER PRIMARY KEY REFERENCES Things(thing_id), Date_and_Time DATETIME PRIMARY KEY, Location_Code CHAR(15) PRIMARY KEY ); Sample rows from `Timed_Locations_of_Things`: (2, 2016-10-12 12:03:07, 064 Charles Mou), (10, 2016-12-29 00:39:19, 288 Lang Ferry), (10, 2017-10-21 04:21:54, 854 Keeling Sho), ",
        "output": "SELECT COUNT(DISTINCT t2.location_code) FROM things as t1 JOIN Timed_Locations_of_things as t2 ON t1.thing_id  =  t2.thing_id WHERE t1.service_details  =  'Unsatisfied'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: IN which year did city \"Taizhou ( Zhejiang )\" serve as a host city? ###filtered_database_schema: CREATE TABLE `city` ( City_ID INT PRIMARY KEY, City TEXT, Hanzi TEXT, Hanyu_Pinyin TEXT, Regional_Population INT, GDP REAL ); Sample rows from `city`: (1, Shanghai, 上海, Shànghǎi, 23019148, 1919.57), (2, Nanjing ( Jiangsu ), 南京, Nánjīng, 8004680, 614.55), (3, Hangzhou ( Zhejiang ), 杭州, Hángzhōu, 8700400, 701.18), CREATE TABLE `match` ( Match_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Score TEXT, Result TEXT, Competition TEXT ); Sample rows from `match`: (1, 18 February 1992, Estadio Cuscatlán , San Salvador , El Salvador, 1-0, 2-0, Friendly match), (2, 19 July 1992, Estadio Rigoberto López , Managua , Nicaragua, 3-0, 5-0, 1994 FIFA World Cup qualification), (3, 23 July 1992, Estadio Cuscatlán , San Salvador , El Salvador, 1-0, 5-1, 1994 FIFA World Cup qualification), CREATE TABLE `temperature` ( City_ID INT PRIMARY KEY REFERENCES city(City_ID), Jan REAL, Feb REAL, Mar REAL, Apr REAL, Jun REAL, Jul REAL, Aug REAL, Sep REAL, Oct REAL, Nov REAL, Dec REAL ); Sample rows from `temperature`: (1, 17.8, 17.8, 18.3, 18.9, 20.0, 20.6, 20.6, 20.6, 20.0, 19.4, 18.3), (2, 26.1, 26.1, 26.1, 26.1, 27.8, 27.8, 28.3, 28.3, 28.3, 27.2, 26.7), (3, 18.9, 18.3, 19.4, 20.0, 22.2, 23.3, 23.9, 23.3, 22.8, 21.7, 20.0), CREATE TABLE `hosting_city` ( Year INT PRIMARY KEY, Match_ID INT REFERENCES match(Match_ID), Host_City TEXT REFERENCES city(City_ID) ); Sample rows from `hosting_city`: (2008, 1, 1), (2009, 2, 2), (2010, 3, 2), ",
        "output": "SELECT t2.year FROM city as t1 JOIN hosting_city as t2 ON t1.city_id  =  t2.host_city WHERE t1.city  =  \"Taizhou ( Zhejiang )\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the height and weight of people in descending order of height. ###filtered_database_schema: CREATE TABLE `body_builder` ( Body_Builder_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Snatch REAL, Clean_Jerk REAL, Total REAL ); Sample rows from `body_builder`: (1, 1, 142.5, 175.0, 317.5), (2, 2, 137.5, 177.5, 315.0), (3, 3, 140.0, 175.0, 315.0), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Height REAL, Weight REAL, Birth_Date TEXT, Birth_Place TEXT ); Sample rows from `people`: (1, Jack Campbell, 182.0, 80.0, January 1, 1992, Port Huron, Michigan), (2, Ty Conklin, 192.0, 90.0, March 30, 1976, Anchorage, Alaska), (3, Al Montoya, 195.0, 100.0, February 13, 1985, Glenview, Illinois), ",
        "output": "SELECT height ,  weight FROM people ORDER BY height DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many debates are there? ###filtered_database_schema: CREATE TABLE `people` ( People_ID INT PRIMARY KEY, District TEXT, Name TEXT, Party TEXT, Age INT ); Sample rows from `people`: (1, New York 1, Luther C. Carter, Republican, 35), (2, New York 2, James Humphrey, Republican, 38), (3, New York 3, Daniel Sickles, Democratic, 46), CREATE TABLE `debate` ( Debate_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Num_of_Audience INT ); Sample rows from `debate`: (1, October 21, 2011, Manama , Bahrain, 342), (2, December 17, 2014, Doha , Qatar, 134), (3, August 3, 2015, Manama , Bahrain, 90), CREATE TABLE `debate_people` ( Debate_ID INT PRIMARY KEY REFERENCES debate(Debate_ID), Affirmative INT PRIMARY KEY REFERENCES people(People_ID), Negative INT PRIMARY KEY REFERENCES people(People_ID), If_Affirmative_Win bool ); Sample rows from `debate_people`: (1, 1, 10, F), (5, 2, 8, F), (3, 4, 7, T), ",
        "output": "SELECT COUNT(*) FROM debate"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the name corresponding to the accoung with the lowest sum of checking and savings balances? ###filtered_database_schema: CREATE TABLE `ACCOUNTS` ( custid BIGINT PRIMARY KEY, name VARCHAR(64) ); Sample rows from `ACCOUNTS`: (1, Brown), (2, Wang), (3, O'mahony), CREATE TABLE `SAVINGS` ( custid BIGINT PRIMARY KEY REFERENCES ACCOUNTS(custid), balance FLOAT ); Sample rows from `SAVINGS`: (1, 200000.0), (2, 999999999.0), (3, 230000.0), CREATE TABLE `CHECKING` ( custid BIGINT PRIMARY KEY REFERENCES ACCOUNTS(custid), balance FLOAT ); Sample rows from `CHECKING`: (1, 10000.0), (2, 2000.0), (3, 3000.0), ",
        "output": "SELECT t1.name FROM accounts as t1 JOIN checking as t2 ON t1.custid  =  t2.custid JOIN savings as t3 ON t1.custid  =  t3.custid ORDER BY t2.balance + t3.balance LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many distinct students have been in detention? ###filtered_database_schema: CREATE TABLE `Ref_Address_Types` ( address_type_code VARCHAR(15) PRIMARY KEY, address_type_description VARCHAR(80) ); Sample rows from `Ref_Address_Types`: (BILL, Billing), (HOME, Home or Residence), CREATE TABLE `Ref_Detention_Type` ( detention_type_code VARCHAR(10) PRIMARY KEY, detention_type_description VARCHAR(80) ); Sample rows from `Ref_Detention_Type`: (BREAK , During Break time), (AFTER, After School), (LUNCH, Lunch-time), CREATE TABLE `Ref_Incident_Type` ( incident_type_code VARCHAR(10) PRIMARY KEY, incident_type_description VARCHAR(80) ); Sample rows from `Ref_Incident_Type`: (NOISE, Noise), (VIOLENCE, Violence), (DISTURB, Disturbance), CREATE TABLE `Addresses` ( address_id INTEGER, line_1 VARCHAR(120), line_2 VARCHAR(120), line_3 VARCHAR(120), city VARCHAR(80), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), other_address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 020 Orie Canyon, None, None, North Loyceville, 197, Hawaii, USA, None), (2, 1333 Boyle Lane, None, None, West Sean, 937, Illinois, USA, None), (3, 027 Kim Divide Apt. 492, None, None, Beierview, 918, Texas, USA, None), CREATE TABLE `Students` ( student_id INTEGER, address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(40), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), date_first_rental DATETIME, date_left_university DATETIME, other_student_details VARCHAR(255) ); Sample rows from `Students`: (1, 19, Emma, Frederic, Rohan, 235.899.9744, derrick.jenkins@example.com, 2017-12-05 15:20:04, 2018-03-03 03:33:05, None), (2, 9, Louvenia, Fatima, Hansen, 1-247-673-8446, rohan.clarabelle@example.org, 2017-08-08 22:30:36, 2018-02-24 11:12:11, None), (3, 10, Rhea, Gardner, Bergnaum, 1-751-162-9676x115, kkirlin@example.org, 2017-11-15 04:57:28, 2018-03-19 12:49:20, None), CREATE TABLE `Teachers` ( teacher_id INTEGER, address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(80), last_name VARCHAR(80), gender VARCHAR(1), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), other_details VARCHAR(255) ); Sample rows from `Teachers`: (1, 15, Lyla, Wilson, Medhurst, 1, 792.333.7714, ohammes@example.com, None), (2, 7, Sid, Tremayne, Brakus, 1, 202.626.1698x9242, deborah37@example.com, None), (3, 8, Trystan, Alexane, Schuster, 1, 583-467-0403x647, hilll.kitty@example.com, None), CREATE TABLE `Assessment_Notes` ( notes_id INTEGER, student_id INTEGER REFERENCES Students(student_id), teacher_id INTEGER REFERENCES Teachers(teacher_id), date_of_notes DATETIME, text_of_notes VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Assessment_Notes`: (1, 7, 3, 1978-04-15 04:49:18, None, None), (2, 11, 10, 2005-06-30 02:48:35, None, None), (3, 15, 3, 1988-06-09 00:24:01, None, None), CREATE TABLE `Behavior_Incident` ( incident_id INTEGER, incident_type_code VARCHAR(10) REFERENCES Ref_Incident_Type(incident_type_code), student_id INTEGER REFERENCES Students(student_id), date_incident_start DATETIME, date_incident_end DATETIME, incident_summary VARCHAR(255), recommendations VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Behavior_Incident`: (1, NOISE, 6, 2017-07-09 10:04:13, 2018-03-08 14:08:54, None, None, None), (2, DISTURB, 13, 2018-01-31 10:51:13, 2018-03-18 18:40:05, None, None, None), (3, VIOLENCE, 1, 2017-10-10 22:43:54, 2018-03-22 02:10:35, None, Transfer schools, None), CREATE TABLE `Detention` ( detention_id INTEGER, detention_type_code VARCHAR(10) REFERENCES Ref_Detention_Type(detention_type_code), teacher_id INTEGER REFERENCES Teachers(teacher_id), datetime_detention_start DATETIME, datetime_detention_end DATETIME, detention_summary VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `Detention`: (1, AFTER, 7, 2017-09-05 00:38:25, 2018-03-08 02:08:32, None, None), (2, AFTER, 14, 2018-01-10 08:09:02, 2018-03-07 04:24:48, None, None), (3, BREAK , 11, 2017-12-14 06:40:29, 2018-03-08 09:16:38, None, None), CREATE TABLE `Student_Addresses` ( student_id INTEGER REFERENCES Students(student_id), address_id INTEGER REFERENCES Addresses(address_id), date_address_from DATETIME, date_address_to DATETIME, monthly_rental DECIMAL(19,4), other_details VARCHAR(255) ); Sample rows from `Student_Addresses`: (6, 12, 2017-10-16 13:56:34, 2018-03-15 10:37:19, 826.4319, house), (3, 18, 2017-06-19 12:39:39, 2018-03-02 00:19:57, 1113.0996, house), (8, 1, 2017-10-31 12:40:34, 2018-02-25 05:21:34, 1297.3186, apartment), CREATE TABLE `Students_in_Detention` ( student_id INTEGER REFERENCES Students(student_id), detention_id INTEGER REFERENCES Detention(detention_id), incident_id INTEGER REFERENCES Behavior_Incident(incident_id) ); Sample rows from `Students_in_Detention`: (3, 15, 1), (8, 13, 3), (11, 6, 11), ",
        "output": "SELECT COUNT(DISTINCT student_id) FROM students_in_detention"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many classes are held in each department? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT COUNT(*) ,  dept_code FROM class as t1 JOIN course as t2 ON t1.crs_code  =  t2.crs_code GROUP BY dept_code"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids of documents which don't have expense budgets? ###filtered_database_schema: CREATE TABLE `Ref_Document_Types` ( Document_Type_Code CHAR(15) PRIMARY KEY, Document_Type_Name VARCHAR(255), Document_Type_Description VARCHAR(255) ); Sample rows from `Ref_Document_Types`: (BK, Book, excellent), (CV, CV, excellent), (PT, Presentation, very good), CREATE TABLE `Ref_Budget_Codes` ( Budget_Type_Code CHAR(15) PRIMARY KEY, Budget_Type_Description VARCHAR(255) ); Sample rows from `Ref_Budget_Codes`: (GV, Government), (ORG, Organisation), (SF, Self founded), CREATE TABLE `Projects` ( Project_ID INTEGER, Project_Details VARCHAR(255) ); Sample rows from `Projects`: (30, Society Research project), (35, Internet of Things project), (105, Graph Database project), CREATE TABLE `Documents` ( Document_ID INTEGER, Document_Type_Code CHAR(15) REFERENCES Ref_Document_Types(Document_Type_Code), Project_ID INTEGER REFERENCES Projects(Project_ID), Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Documents`: (29, CV, 30, 2004-08-28 06:59:19, Review on UK files, None, None), (42, BK, 105, 2012-12-27 19:09:18, Review on Canadian files, None, None), (57, CV, 195, 1980-10-22 14:17:11, Review on French files, None, None), CREATE TABLE `Statements` ( Statement_ID INTEGER REFERENCES Documents(Document_ID), Statement_Details VARCHAR(255) ); Sample rows from `Statements`: (57, Open Project), (192, Private Project), CREATE TABLE `Documents_with_Expenses` ( Document_ID INTEGER REFERENCES Documents(Document_ID), Budget_Type_Code CHAR(15) REFERENCES Ref_Budget_Codes(Budget_Type_Code), Document_Details VARCHAR(255) ); Sample rows from `Documents_with_Expenses`: (57, GV, government), (192, GV, government), (226, GV, government), CREATE TABLE `Accounts` ( Account_ID INTEGER, Statement_ID INTEGER REFERENCES Statements(Statement_ID), Account_Details VARCHAR(255) ); Sample rows from `Accounts`: (7, 57, 495.063), (61, 57, 930.14), (98, 57, 6035.84), ",
        "output": "SELECT document_id FROM documents EXCEPT SELECT document_id FROM documents_with_expenses"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the total revenue of companies started by founder? ###filtered_database_schema: CREATE TABLE `Manufacturers` ( Code INTEGER, Name VARCHAR(255), Headquarter VARCHAR(255), Founder VARCHAR(255), Revenue REAL ); Sample rows from `Manufacturers`: (1, Sony, Tokyo, Andy, 120.0), (2, Creative Labs, Austin, Owen, 100.0), (3, Hewlett-Packard, Los Angeles, James, 50.0), CREATE TABLE `Products` ( Code INTEGER, Name VARCHAR(255), Price DECIMAL, Manufacturer INTEGER REFERENCES Manufacturers(Code) ); Sample rows from `Products`: (1, Hard drive, 240, 5), (2, Memory, 120, 6), (3, ZIP drive, 150, 4), ",
        "output": "SELECT SUM(revenue) ,  founder FROM manufacturers GROUP BY founder"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the first names and last names of the authors whose institution affiliation is \"University of Oxford\". ###filtered_database_schema: CREATE TABLE `Inst` ( instID INTEGER, name TEXT, country TEXT ); Sample rows from `Inst`: (1000, University of Oxford, UK), (1010, Northeastern University, USA), (1020, Indiana University, USA), CREATE TABLE `Authors` ( authID INTEGER, lname TEXT, fname TEXT ); Sample rows from `Authors`: (50, Gibbons, Jeremy), (51, Hinze, Ralf), (52, James, Daniel W. H.), CREATE TABLE `Papers` ( paperID INTEGER, title TEXT ); Sample rows from `Papers`: (200, Just do it: Simple Monadic Equational Reasoning), (201, Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory), (202, Functional Pearl: Modular Rollback through Control Logging), CREATE TABLE `Authorship` ( authID INTEGER PRIMARY KEY REFERENCES Authors(authID), instID INTEGER PRIMARY KEY REFERENCES Inst(instID), paperID INTEGER PRIMARY KEY REFERENCES Papers(paperID), authOrder INTEGER ); Sample rows from `Authorship`: (50, 1000, 200, 1), (51, 1000, 200, 2), (51, 1000, 201, 1), ",
        "output": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors as t1 JOIN authorship as t2 ON t1.authid  =  t2.authid JOIN inst as t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: In which country and state does Janessa Sawayn live? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 3904 Stroman Passage, Port Melyssa, 14445, Georgia, USA), (2, 053 Quigley Island, Hagenesfurt, 22194, Kentucky, USA), (3, 00704 Zoe Alley, Lake Elaina, 08938, Georgia, USA), CREATE TABLE `Staff` ( staff_id INTEGER, staff_address_id INTEGER REFERENCES Addresses(address_id), nickname VARCHAR(80), first_name VARCHAR(80), middle_name VARCHAR(80), last_name VARCHAR(80), date_of_birth DATETIME, date_joined_staff DATETIME, date_left_staff DATETIME ); Sample rows from `Staff`: (1, 14, thompson.constantin, Janessa, Amara, Sawayn, 2010-12-08 16:55:14, 2017-04-27 03:21:26, 2018-03-23 22:53:12), (2, 3, santos45, Camylle, Icie, Weissnat, 2015-08-01 13:22:43, 2016-06-06 08:54:28, 2018-03-10 15:25:00), (3, 5, ynader, Kaitlin, Stephania, Mertz, 1994-05-17 05:32:11, 2018-01-02 12:24:24, 2018-03-24 10:11:08), CREATE TABLE `Vehicles` ( vehicle_id INTEGER, vehicle_details VARCHAR(255) ); Sample rows from `Vehicles`: (1, Van), (2, Truck), (3, Car), CREATE TABLE `Customers` ( customer_id INTEGER, customer_address_id INTEGER REFERENCES Addresses(address_id), customer_status_code VARCHAR(15), date_became_customer DATETIME, date_of_birth DATETIME, first_name VARCHAR(80), last_name VARCHAR(80), amount_outstanding DOUBLE, email_address VARCHAR(250), phone_number VARCHAR(255), cell_mobile_phone_number VARCHAR(255) ); Sample rows from `Customers`: (1, 13, Bad Customer, 2016-05-11 17:03:48, 1998-12-15 13:24:40, Carole, Bernhard, 255.0, everette.goyette@example.org, 07278206718, 861-638-9797), (2, 10, Bad Customer, 2015-11-16 22:52:14, 1995-07-17 12:13:16, Genevieve, Terry, 7256.0, huel.jana@example.org, +14(5)2351480248, 578-518-4785x612), (3, 10, Good Customer, 2016-04-08 00:28:15, 1994-06-21 01:34:56, Clara, Ortiz, 9443.0, hilario.sporer@example.org, 374-483-2758x85087, 1-197-686-2849x8761), CREATE TABLE `Customer_Payments` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), datetime_payment DATETIME PRIMARY KEY, payment_method_code VARCHAR(10), amount_payment DOUBLE ); Sample rows from `Customer_Payments`: (11, 2018-02-05 18:44:46, Direct Debit, 9570.93), (2, 2018-02-24 10:07:05, Direct Debit, 8180.26), (14, 2018-02-27 20:08:53, Direct Debit, 4610.26), CREATE TABLE `Lessons` ( lesson_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), lesson_status_code VARCHAR(15), staff_id INTEGER REFERENCES Staff(staff_id), vehicle_id INTEGER REFERENCES Vehicles(vehicle_id), lesson_date DATETIME, lesson_time VARCHAR(10), price DOUBLE ); Sample rows from `Lessons`: (1, 6, Cancelled, 8, 3, 2018-02-28 10:55:36, 5, 199.0), (2, 8, Cancelled, 14, 3, 2018-03-07 16:12:36, 6, 167.0), (3, 6, Cancelled, 11, 2, 2018-03-03 15:10:16, 3, 352.0), ",
        "output": "SELECT t1.country ,  t1.state_province_county FROM addresses as t1 JOIN staff as t2 ON t1.address_id = t2.staff_address_id WHERE t2.first_name = \"Janessa\" AND t2.last_name = \"Sawayn\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the positions of both players that have more than 20 20 points and less than 10 points? ###filtered_database_schema: CREATE TABLE `club` ( Club_ID INT PRIMARY KEY, name TEXT, Region TEXT, Start_year TEXT ); Sample rows from `club`: (1, AIB, USA, 2009), (2, BK Slide, UK, 1998), (3, IFG, China, 2005), CREATE TABLE `club_rank` ( Rank REAL PRIMARY KEY, Club_ID INT PRIMARY KEY REFERENCES club(Club_ID), Gold REAL, Silver REAL, Bronze REAL, Total REAL ); Sample rows from `club_rank`: (1.0, 2, 11.0, 11.0, 9.0, 31.0), (2.0, 3, 8.0, 7.0, 6.0, 21.0), (3.0, 1, 7.0, 4.0, 2.0, 13.0), CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, name TEXT, Position TEXT, Club_ID INT REFERENCES club(Club_ID), Apps REAL, Tries REAL, Goals TEXT, Points REAL ); Sample rows from `player`: (1, Michael Platt, Full Back, 1, 20.0, 5.0, 0, 20.0), (2, Dave Halley, Right Wing, 2, 23.0, 9.0, 0, 36.0), (3, James Evans, Right Centre, 1, 30.0, 9.0, 0, 36.0), CREATE TABLE `competition` ( Competition_ID INT PRIMARY KEY, Year REAL, Competition_type TEXT, Country TEXT ); Sample rows from `competition`: (1, 2006.0, Friendly, Italy), (2, 2006.0, Friendly, Spain), (3, 2006.0, Friendly, Australia), CREATE TABLE `competition_result` ( Competition_ID INT PRIMARY KEY REFERENCES competition(Competition_ID), Club_ID_1 INT PRIMARY KEY REFERENCES club(Club_ID), Club_ID_2 INT PRIMARY KEY REFERENCES club(Club_ID), Score TEXT ); Sample rows from `competition_result`: (1, 1, 2, 11:10), (2, 3, 2, 25:2), (10, 4, 2, 13:10), ",
        "output": "SELECT position FROM player WHERE points  >  20 INTERSECT SELECT position FROM player WHERE points  <  10"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: rivers in illinois ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the maximum level of managers in countries that are not \"Australia\"? ###filtered_database_schema: CREATE TABLE `railway` ( Railway_ID INT PRIMARY KEY, Railway TEXT, Builder TEXT, Built TEXT, Wheels TEXT, Location TEXT, ObjectNumber TEXT ); Sample rows from `railway`: (1, SECR, SECR Ashford, 1901, 4-4-0, York, 1975-7006), (2, MR, MR Derby, 1902 Midland Railway 1000 was rebuilt in 1914., 4-4-0, Bo'ness, 1975-7018), (3, GNRD, GNR Doncaster, 1902, 4-4-2, Barrow Hill, 1975-7005), CREATE TABLE `train` ( Train_ID INT PRIMARY KEY, Train_Num TEXT, Name TEXT, From TEXT, Arrival TEXT, Railway_ID INT REFERENCES railway(Railway_ID) ); Sample rows from `train`: (1, 51195, Wardha-Ballarshah Pass, Wardha, 08:54, 1), (2, 12139, Sewagram Exp, Mumbai CST, 09:08, 1), (3, 12140, Ballarshah-Mumbai Pass, Ballarshah, 09:48, 2), CREATE TABLE `manager` ( Manager_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Working_year_starts TEXT, Age INT, Level INT ); Sample rows from `manager`: (1, Ben Curtis, United States, 2003, 45, 5), (2, Todd Hamilton, United States, 2004, 55, 5), (3, Tiger Woods, United States, 2006, 46, 5), CREATE TABLE `railway_manage` ( Railway_ID INT PRIMARY KEY REFERENCES railway(Railway_ID), Manager_ID INT PRIMARY KEY REFERENCES manager(Manager_ID), From_Year TEXT ); Sample rows from `railway_manage`: (8, 1, 2010), (9, 2, 2011), (7, 3, 2012), ",
        "output": "SELECT MAX(level) FROM manager WHERE country != \"Australia\t\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of the youngest organization. ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), town_city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 25518 Ortiz Centers, West Stacy, 193, NorthCarolina, USA), (2, 033 Stracke Parkways, Lake Meaghan, 227, Colorado, USA), (3, 269 Flatley Port Suite 062, Breanneberg, 527, NewHampshire, USA), CREATE TABLE `Services` ( service_id INTEGER, service_type_code VARCHAR(15), service_name VARCHAR(80), service_descriptio VARCHAR(255) ); Sample rows from `Services`: (1, Education, Education, Education), (2, Welfare, Health, Welfare), (3, Education, Education, Health), CREATE TABLE `Forms` ( form_id INTEGER, form_type_code VARCHAR(15), service_id INTEGER REFERENCES Services(service_id), form_number VARCHAR(50), form_name VARCHAR(80), form_description VARCHAR(255) ); Sample rows from `Forms`: (1, Basic, 13, 8069, SSN Application, Form for SSN Application), (2, Complex, 9, 2675, Marriage Certificate, Marriage Certificate), (3, Complex, 2, 9837, Divorce Certificate, Divorce Certificate), CREATE TABLE `Individuals` ( individual_id INTEGER, individual_first_name VARCHAR(80), individual_middle_name VARCHAR(80), inidividual_phone VARCHAR(80), individual_email VARCHAR(80), individual_address VARCHAR(255), individual_last_name VARCHAR(80) ); Sample rows from `Individuals`: (1, Oscar, Hosea, 1-925-696-5232, amie.okuneva@example.org, 6956 Lia Plaza, Maggio), (2, Geovanny, Antonia, 075.012.6775x409, jamey.effertz@example.net, 69578 Baylee Prairie, Kerluke), (3, Casper, Mitchell, 1-818-062-2837, brandon.hermiston@example.com, 4555 Hane Orchard, Kutch), CREATE TABLE `Organizations` ( organization_id INTEGER, date_formed DATETIME, organization_name VARCHAR(255), uk_vat_number VARCHAR(20) ); Sample rows from `Organizations`: (1, 2016-08-24 23:52:48, Labour Party, 2157), (2, 2016-10-01 12:42:01, Plaid Cymru, 7459), (3, 2016-10-09 07:22:53, Conservative, 1211), CREATE TABLE `Parties` ( party_id INTEGER, payment_method_code VARCHAR(15), party_phone VARCHAR(80), party_email VARCHAR(80) ); Sample rows from `Parties`: (1, Cheque, 05374656172, enrico09@example.com), (2, Credit Card, 1-525-947-7867x51521, brakus.aliya@example.com), (3, Cheque, 1-606-232-3728x3568, frida57@example.org), CREATE TABLE `Organization_Contact_Individuals` ( individual_id INTEGER PRIMARY KEY REFERENCES Individuals(individual_id), organization_id INTEGER PRIMARY KEY REFERENCES Organizations(organization_id), date_contact_from DATETIME, date_contact_to DATETIME ); Sample rows from `Organization_Contact_Individuals`: (13, 1, 2016-08-16 22:09:11, 2018-03-25 10:27:18), (11, 1, 2017-03-02 00:00:16, 2018-03-06 05:39:43), (10, 3, 2016-08-23 03:24:24, 2018-03-12 07:55:28), CREATE TABLE `Party_Addresses` ( party_id INTEGER PRIMARY KEY REFERENCES Parties(party_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_address_from DATETIME, address_type_code VARCHAR(15), date_address_to DATETIME ); Sample rows from `Party_Addresses`: (10, 8, 2016-04-08 22:40:02, Residence, 2018-02-28 23:14:41), (15, 5, 2016-05-20 23:22:06, Billing, 2018-01-29 16:48:01), (4, 4, 2016-05-14 15:13:30, Delivery, 2018-02-25 19:39:16), CREATE TABLE `Party_Forms` ( party_id INTEGER PRIMARY KEY REFERENCES Parties(party_id), form_id INTEGER PRIMARY KEY REFERENCES Forms(form_id), date_completion_started DATETIME, form_status_code VARCHAR(15), date_fully_completed DATETIME ); Sample rows from `Party_Forms`: (2, 4, 2017-12-17 11:29:47, Completed, 2018-02-11 16:46:10), (15, 4, 2017-12-16 15:25:48, Partially Completed, 2018-02-18 16:09:04), (8, 5, 2017-12-09 21:26:11, Partially Completed, 2018-02-05 16:16:58), CREATE TABLE `Party_Services` ( booking_id INTEGER, customer_id INTEGER REFERENCES Parties(party_id), service_id INTEGER REFERENCES Services(service_id), service_datetime DATETIME, booking_made_date DATETIME ); Sample rows from `Party_Services`: (1, 10, 12, 2018-03-10 22:43:12, 2018-03-23 23:56:51), (2, 14, 11, 2018-03-05 15:06:23, 2018-03-25 11:08:29), (3, 4, 7, 2018-03-08 10:39:29, 2018-03-24 11:09:52), ",
        "output": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the maximum and minimum population among all counties. ###filtered_database_schema: CREATE TABLE `county` ( County_Id INT PRIMARY KEY, County_name TEXT, Population REAL, Zip_code TEXT ); Sample rows from `county`: (1, Howard, 21000.0, D21), (2, Baltimore County, 90000.0, D08), (3, Colony, 79000.0, D02), CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Year REAL, Party TEXT, Governor TEXT, Lieutenant_Governor TEXT, Comptroller TEXT, Attorney_General TEXT, US_Senate TEXT ); Sample rows from `party`: (1, 1998.0, Democratic, Peter Vallone, Sandra Frankel, Carl McCall, Eliot Spitzer, Charles Schumer), (2, 1998.0, Liberal, Betsy McCaughey Ross, Jonathan Reiter, Carl McCall, Eliot Spitzer, Charles Schumer), (3, 2002.0, Democratic, Carl McCall, Dennis Mehiel, Alan Hevesi, Eliot Spitzer, (no election)), CREATE TABLE `election` ( Election_ID INT PRIMARY KEY, Counties_Represented TEXT, District INT REFERENCES county(County_Id), Delegate TEXT, Party INT REFERENCES party(Party_ID), First_Elected REAL, Committee TEXT ); Sample rows from `election`: (1, 09.1 9A, 1, Bates, Gail H. Gail H. Bates, 1, 2002.0, Appropriations), (2, 09.1 9A, 1, Miller, Warren E. Warren E. Miller, 1, 2003.0, Economic Matters), (3, 12.1 12A, 2, DeBoy, Steven J. Sr. Steven J. DeBoy, Sr., 2, 2002.0, Appropriations), ",
        "output": "SELECT MAX(population) ,  MIN(population) FROM county"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way. ###filtered_database_schema: CREATE TABLE `Ref_Hotel_Star_Ratings` ( star_rating_code CHAR(15) PRIMARY KEY, star_rating_description VARCHAR(80) ); Sample rows from `Ref_Hotel_Star_Ratings`: (1, star), (2, star), (3, star), CREATE TABLE `Locations` ( Location_ID INTEGER, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Locations`: (333, Astro Orbiter, 660 Shea Crescent, None), (368, African Animals, 254 Ottilie Junction, None), (417, American Adventure, 53815 Sawayn Tunnel Apt. 297, None), CREATE TABLE `Ref_Attraction_Types` ( Attraction_Type_Code CHAR(15) PRIMARY KEY, Attraction_Type_Description VARCHAR(255) ); Sample rows from `Ref_Attraction_Types`: (2, park), (3, garden), (5, gallery), CREATE TABLE `Visitors` ( Tourist_ID INTEGER PRIMARY KEY, Tourist_Details VARCHAR(255) ); Sample rows from `Visitors`: (164, Toney), (189, Graciela), (204, Vincent), CREATE TABLE `Features` ( Feature_ID INTEGER, Feature_Details VARCHAR(255) ); Sample rows from `Features`: (523, cafe), (528, park), (543, garden), CREATE TABLE `Hotels` ( hotel_id INTEGER, star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code), pets_allowed_yn CHAR(1), price_range REAL, other_hotel_details VARCHAR(255) ); Sample rows from `Hotels`: (123, 5, 1, 2914989.571, None), (144, 4, , , None), (172, 5, , 17012.682586009, None), CREATE TABLE `Tourist_Attractions` ( Tourist_Attraction_ID INTEGER, Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code), Location_ID INTEGER REFERENCES Locations(Location_ID), How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Tourist_Attractions`: (2113, 2, 579, bus, art museum, None, None, None), (2701, 6, 417, walk, UK gallery, None, None, None), (5076, 2, 868, shuttle, flying elephant, None, None, None), CREATE TABLE `Street_Markets` ( Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Market_Details VARCHAR(255) ); Sample rows from `Street_Markets`: (6852, Broadway), (7067, Fish Farm Market), CREATE TABLE `Shops` ( Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Shop_Details VARCHAR(255) ); Sample rows from `Shops`: (8429, soup), (8449, coffee), (8698, Flower), CREATE TABLE `Museums` ( Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Museum_Details VARCHAR(255) ); Sample rows from `Museums`: (2113, Yale Center for British Art), (2701, The Metropolitan Museum of Art), (5076, MoMA), CREATE TABLE `Royal_Family` ( Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Royal_Family_Details VARCHAR(255) ); Sample rows from `Royal_Family`: (9561, None), (9919, None), CREATE TABLE `Theme_Parks` ( Theme_Park_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Theme_Park_Details VARCHAR(255) ); Sample rows from `Theme_Parks`: (5265, Disney), (6476, Sea World), (6523, Universal Studios), CREATE TABLE `Visits` ( Visit_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID), Visit_Date DATETIME, Visit_Details VARCHAR(40) ); Sample rows from `Visits`: (183, 6653, 377, 2004-08-21 03:06:14, ), (268, 5076, 204, 2013-08-06 05:35:51, ), (273, 9360, 211, 2013-10-27 09:56:08, ), CREATE TABLE `Photos` ( Photo_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Photos`: (211, 8449, game1, None, 702, None), (280, 7067, game2, None, 762, None), (303, 5076, game3, None, 392, None), CREATE TABLE `Staff` ( Staff_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(40), Other_Details VARCHAR(255) ); Sample rows from `Staff`: (170, 6476, Whitney, None), (219, 6476, Kaela, None), (237, 7067, Eunice, None), CREATE TABLE `Tourist_Attraction_Features` ( Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID) ); Sample rows from `Tourist_Attraction_Features`: (5076, 528), (5076, 681), (5265, 523), ",
        "output": "SELECT how_to_get_there ,  COUNT(*) FROM tourist_attractions GROUP BY how_to_get_there"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: parsing papers that have the most citations ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t4.citedpaperid  ,  COUNT(t4.citedpaperid) FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT(t4.citedpaperid) DESC;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the different card types, and how many cards are there of each? ###filtered_database_schema: CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 6, 338, Regular), (2, 14, 562, VIP), (3, 9, 162, VIP), CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(20), customer_last_name VARCHAR(20), customer_address VARCHAR(255), customer_phone VARCHAR(255), customer_email VARCHAR(255), other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Aniyah, Feest, 55975 Theodore Estates Lake Brody, VT 57078, (673)872-5338, fahey.dorian@example.com, None), (2, Susie, Wiza, 6478 Moen Isle Suite 910 Schimmelmouth, VT 96364-4898, 679-845-8645x94312, idickinson@example.com, None), (3, Marcel, Brekke, 1965 Abernathy Plains Port Lilla, LA 44867, 1-511-656-6664, nichole.rodriguez@example.com, None), CREATE TABLE `Customers_Cards` ( card_id INTEGER, customer_id INTEGER, card_type_code VARCHAR(15), card_number VARCHAR(80), date_valid_from DATETIME, date_valid_to DATETIME, other_card_details VARCHAR(255) ); Sample rows from `Customers_Cards`: (1, 14, Credit, 4560596484842, 2011-04-17 09:05:28, 2018-03-07 17:06:19, 5567915676420343), (2, 9, Credit, 4859448397570735, 2012-05-22 02:05:41, 2018-02-25 15:43:32, 4539333582760), (3, 6, Debit, 348237249146948, 2014-08-01 14:26:45, 2018-03-24 15:29:00, 4916210554814), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, previous_transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), card_id INTEGER REFERENCES Customers_Cards(card_id), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DOUBLE, transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 925, 15, 1, Payment, 2018-03-24 06:41:41, 1701.23, None, None), (2, 494, 3, 2, Refund, 2018-03-24 12:08:55, 1931.76, None, None), (3, 642, 4, 3, Payment, 2018-03-24 09:08:27, 486.56, None, None), ",
        "output": "SELECT card_type_code ,  COUNT(*) FROM customers_cards GROUP BY card_type_code"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: papers using WebKB ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM paperdataset as t2 JOIN dataset as t1 ON t2.datasetid  =  t1.datasetid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many credits does the department offer? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT SUM(crs_credit) ,  dept_code FROM course GROUP BY dept_code"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names and seatings for all tracks opened after 2000, ordered by seating? ###filtered_database_schema: CREATE TABLE `race` ( Race_ID INT PRIMARY KEY, Name TEXT, Class TEXT, Date TEXT, Track_ID TEXT REFERENCES track(Track_ID) ); Sample rows from `race`: (1, Rolex 24 At Daytona, DP/GT, January 26 January 27, 1), (2, Gainsco Grand Prix of Miami, DP/GT, March 29, 2), (3, Mexico City 250, DP/GT, April 19, 2), CREATE TABLE `track` ( Track_ID INT PRIMARY KEY, Name TEXT, Location TEXT, Seating REAL, Year_Opened REAL ); Sample rows from `track`: (1, Auto Club Speedway, Fontana, CA, 92000.0, 1997.0), (2, Chicagoland Speedway, Joliet, IL, 75000.0, 2001.0), (3, Darlington Raceway, Darlington, SC, 63000.0, 1950.0), ",
        "output": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the residences that have both a player of gender \"M\" and a player of gender \"F\". ###filtered_database_schema: CREATE TABLE `player` ( Player_ID INT PRIMARY KEY, Sponsor_name TEXT, Player_name TEXT, Gender TEXT, Residence TEXT, Occupation TEXT, Votes INT, Rank TEXT ); Sample rows from `player`: (1, Brandon—Souris, Jean Luc Bouché, M, Brandon, Locomotive Engineer, 6055, 2nd), (2, Charleswood—St. James—Assiniboia, Fiona Shiells, F, Winnipeg, Ministerial Assistant, 7190, 3rd), (3, Churchill, Niki Ashton, F, Thompson, Researcher, 8734, 1st), CREATE TABLE `club` ( Club_ID INT PRIMARY KEY, Club_name TEXT, Region TEXT, Start_year INT ); Sample rows from `club`: (1, AIK, USA, 2009), (2, BK Häcken, UK, 1998), (3, Djurgårdens IF, USA, 2005), CREATE TABLE `coach` ( Coach_ID INT PRIMARY KEY, Coach_name TEXT, Gender TEXT, Club_ID INT REFERENCES club(Club_ID), Rank INT ); Sample rows from `coach`: (1, Jameson Tomas, M, 1, 1), (2, Joe Fabbri, F, 1, 2), (3, Robert Chen, M, 3, 3), CREATE TABLE `player_coach` ( Player_ID INT PRIMARY KEY REFERENCES player(Player_ID), Coach_ID INT PRIMARY KEY REFERENCES coach(Coach_ID), Starting_year INT ); Sample rows from `player_coach`: (1, 1, 2010), (2, 1, 2011), (3, 1, 2012), CREATE TABLE `match_result` ( Rank INT PRIMARY KEY, Club_ID INT PRIMARY KEY REFERENCES club(Club_ID), Gold INT, Big_Silver INT, Small_Silver INT, Bronze INT, Points INT ); Sample rows from `match_result`: (1, 1, 20, 14, 9, 8, 168), (2, 2, 13, 11, 16, 9, 139), (3, 3, 12, 9, 4, 7, 102), ",
        "output": "SELECT residence fROm player WHERE gender  =  \"m\" INTERSECT SELECT residence fROm player WHERE gender  =  \"f\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Question Answering experiments ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the names of journalists who have not reported any event. ###filtered_database_schema: CREATE TABLE `event` ( Event_ID INT PRIMARY KEY, Date TEXT, Venue TEXT, Name TEXT, Event_Attendance INT ); Sample rows from `event`: (1, 13 October 2008, Marathon, Olympia Games Openning, 6650), (2, 11 October 2007, Victoria, Government Hearing, 369), (3, 7 October 2010, Motagua, Public Debating, 1675), CREATE TABLE `journalist` ( journalist_ID INT PRIMARY KEY, Name TEXT, Nationality TEXT, Age TEXT, Years_working INT ); Sample rows from `journalist`: (1, Herbert Swindells, England, 37, 10), (2, Fred Keenor, Wales, 27, 5), (3, George Gilchrist, England, 28, 6), CREATE TABLE `news_report` ( journalist_ID INT PRIMARY KEY REFERENCES journalist(journalist_ID), Event_ID INT PRIMARY KEY REFERENCES event(Event_ID), Work_Type TEXT ); Sample rows from `news_report`: (1, 3, Screening), (11, 5, Screening), (6, 1, Screening), ",
        "output": "SELECT name FROM journalist WHERE journalist_id NOT IN (SELECT journalist_id FROM news_report)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the forename and surname of drivers whose nationality is German? ###filtered_database_schema: CREATE TABLE `circuits` ( circuitId INTEGER, circuitRef TEXT, name TEXT, location TEXT, country TEXT, lat REAL, lng REAL, alt TEXT, url TEXT ); Sample rows from `circuits`: (1, albert_park, Albert Park Grand Prix Circuit, Melbourne, Australia, -37.8497, 144.968, 10, http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit), (2, sepang, Sepang International Circuit, Kuala Lumpur, Malaysia, 2.76083, 101.738, , http://en.wikipedia.org/wiki/Sepang_International_Circuit), (3, bahrain, Bahrain International Circuit, Sakhir, Bahrain, 26.0325, 50.5106, , http://en.wikipedia.org/wiki/Bahrain_International_Circuit), CREATE TABLE `races` ( raceId INTEGER, year INTEGER, round INTEGER, circuitId INTEGER REFERENCES circuits(circuitId), name TEXT, date TEXT, time TEXT, url TEXT ); Sample rows from `races`: (1, 2009, 1, 1, Australian Grand Prix, 2009-03-29, 06:00:00, http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix), (2, 2009, 2, 2, Malaysian Grand Prix, 2009-04-05, 09:00:00, http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix), (3, 2009, 3, 17, Chinese Grand Prix, 2009-04-19, 07:00:00, http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix), CREATE TABLE `drivers` ( driverId INTEGER, driverRef TEXT, number TEXT, code TEXT, forename TEXT, surname TEXT, dob TEXT, nationality TEXT, url TEXT ); Sample rows from `drivers`: (1, hamilton, 44, HAM, Lewis, Hamilton, 07/01/1985, British, http://en.wikipedia.org/wiki/Lewis_Hamilton), (2, heidfeld, , HEI, Nick, Heidfeld, 10/05/1977, German, http://en.wikipedia.org/wiki/Nick_Heidfeld), (3, rosberg, 6, ROS, Nico, Rosberg, 27/06/1985, German, http://en.wikipedia.org/wiki/Nico_Rosberg), CREATE TABLE `status` ( statusId INTEGER, status TEXT ); Sample rows from `status`: (1, Finished), (2, Disqualified), (3, Accident), CREATE TABLE `seasons` ( year INTEGER, url TEXT ); Sample rows from `seasons`: (1950, http://en.wikipedia.org/wiki/1950_Formula_One_season), (1951, http://en.wikipedia.org/wiki/1951_Formula_One_season), (1952, http://en.wikipedia.org/wiki/1952_Formula_One_season), CREATE TABLE `constructors` ( constructorId INTEGER, constructorRef TEXT, name TEXT, nationality TEXT, url TEXT ); Sample rows from `constructors`: (1, mclaren, McLaren, British, http://en.wikipedia.org/wiki/McLaren), (2, bmw_sauber, BMW Sauber, German, http://en.wikipedia.org/wiki/BMW_Sauber), (3, williams, Williams, British, http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering), CREATE TABLE `constructorStandings` ( constructorStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `constructorStandings`: (1, 18, 1, 14.0, 1, 1, 1), (2, 18, 2, 8.0, 3, 3, 0), (3, 18, 3, 9.0, 2, 2, 0), CREATE TABLE `results` ( resultId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, grid INTEGER, position TEXT, positionText TEXT, positionOrder INTEGER, points REAL, laps TEXT, time TEXT, milliseconds TEXT, fastestLap TEXT, rank TEXT, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId INTEGER ); Sample rows from `results`: (1, 18, 1, 1, 22, 1, 1, 1, 1, 10.0, 58, 34:50.6, 5690616, 39, 2, 01:27.5, 218.3, 1), (2, 18, 2, 2, 3, 5, 2, 2, 2, 8.0, 58, 5.478, 5696094, 41, 3, 01:27.7, 217.586, 1), (3, 18, 3, 3, 7, 7, 3, 3, 3, 6.0, 58, 8.163, 5698779, 41, 5, 01:28.1, 216.719, 1), CREATE TABLE `driverStandings` ( driverStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `driverStandings`: (1, 18, 1, 10.0, 1, 1, 1), (2, 18, 2, 8.0, 2, 2, 0), (3, 18, 3, 6.0, 3, 3, 0), CREATE TABLE `constructorResults` ( constructorResultsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, status TEXT ); Sample rows from `constructorResults`: (1, 18, 1, 14.0, NULL), (2, 18, 2, 8.0, NULL), (3, 18, 3, 9.0, NULL), CREATE TABLE `qualifying` ( qualifyId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, position INTEGER, q1 TEXT, q2 TEXT, q3 TEXT ); Sample rows from `qualifying`: (1, 18, 1, 1, 22, 1, 1:26.572, 1:25.187, 1:26.714), (2, 18, 9, 2, 4, 2, 1:26.103, 1:25.315, 1:26.869), (3, 18, 5, 1, 23, 3, 1:25.664, 1:25.452, 1:27.079), CREATE TABLE `pitStops` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), stop INTEGER PRIMARY KEY, lap INTEGER, time TEXT, duration TEXT, milliseconds INTEGER ); CREATE TABLE `lapTimes` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), lap INTEGER PRIMARY KEY, position INTEGER, time TEXT, milliseconds INTEGER ); ",
        "output": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841? ###filtered_database_schema: CREATE TABLE `circuits` ( circuitId INTEGER, circuitRef TEXT, name TEXT, location TEXT, country TEXT, lat REAL, lng REAL, alt TEXT, url TEXT ); Sample rows from `circuits`: (1, albert_park, Albert Park Grand Prix Circuit, Melbourne, Australia, -37.8497, 144.968, 10, http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit), (2, sepang, Sepang International Circuit, Kuala Lumpur, Malaysia, 2.76083, 101.738, , http://en.wikipedia.org/wiki/Sepang_International_Circuit), (3, bahrain, Bahrain International Circuit, Sakhir, Bahrain, 26.0325, 50.5106, , http://en.wikipedia.org/wiki/Bahrain_International_Circuit), CREATE TABLE `races` ( raceId INTEGER, year INTEGER, round INTEGER, circuitId INTEGER REFERENCES circuits(circuitId), name TEXT, date TEXT, time TEXT, url TEXT ); Sample rows from `races`: (1, 2009, 1, 1, Australian Grand Prix, 2009-03-29, 06:00:00, http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix), (2, 2009, 2, 2, Malaysian Grand Prix, 2009-04-05, 09:00:00, http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix), (3, 2009, 3, 17, Chinese Grand Prix, 2009-04-19, 07:00:00, http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix), CREATE TABLE `drivers` ( driverId INTEGER, driverRef TEXT, number TEXT, code TEXT, forename TEXT, surname TEXT, dob TEXT, nationality TEXT, url TEXT ); Sample rows from `drivers`: (1, hamilton, 44, HAM, Lewis, Hamilton, 07/01/1985, British, http://en.wikipedia.org/wiki/Lewis_Hamilton), (2, heidfeld, , HEI, Nick, Heidfeld, 10/05/1977, German, http://en.wikipedia.org/wiki/Nick_Heidfeld), (3, rosberg, 6, ROS, Nico, Rosberg, 27/06/1985, German, http://en.wikipedia.org/wiki/Nico_Rosberg), CREATE TABLE `status` ( statusId INTEGER, status TEXT ); Sample rows from `status`: (1, Finished), (2, Disqualified), (3, Accident), CREATE TABLE `seasons` ( year INTEGER, url TEXT ); Sample rows from `seasons`: (1950, http://en.wikipedia.org/wiki/1950_Formula_One_season), (1951, http://en.wikipedia.org/wiki/1951_Formula_One_season), (1952, http://en.wikipedia.org/wiki/1952_Formula_One_season), CREATE TABLE `constructors` ( constructorId INTEGER, constructorRef TEXT, name TEXT, nationality TEXT, url TEXT ); Sample rows from `constructors`: (1, mclaren, McLaren, British, http://en.wikipedia.org/wiki/McLaren), (2, bmw_sauber, BMW Sauber, German, http://en.wikipedia.org/wiki/BMW_Sauber), (3, williams, Williams, British, http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering), CREATE TABLE `constructorStandings` ( constructorStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `constructorStandings`: (1, 18, 1, 14.0, 1, 1, 1), (2, 18, 2, 8.0, 3, 3, 0), (3, 18, 3, 9.0, 2, 2, 0), CREATE TABLE `results` ( resultId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, grid INTEGER, position TEXT, positionText TEXT, positionOrder INTEGER, points REAL, laps TEXT, time TEXT, milliseconds TEXT, fastestLap TEXT, rank TEXT, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId INTEGER ); Sample rows from `results`: (1, 18, 1, 1, 22, 1, 1, 1, 1, 10.0, 58, 34:50.6, 5690616, 39, 2, 01:27.5, 218.3, 1), (2, 18, 2, 2, 3, 5, 2, 2, 2, 8.0, 58, 5.478, 5696094, 41, 3, 01:27.7, 217.586, 1), (3, 18, 3, 3, 7, 7, 3, 3, 3, 6.0, 58, 8.163, 5698779, 41, 5, 01:28.1, 216.719, 1), CREATE TABLE `driverStandings` ( driverStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `driverStandings`: (1, 18, 1, 10.0, 1, 1, 1), (2, 18, 2, 8.0, 2, 2, 0), (3, 18, 3, 6.0, 3, 3, 0), CREATE TABLE `constructorResults` ( constructorResultsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, status TEXT ); Sample rows from `constructorResults`: (1, 18, 1, 14.0, NULL), (2, 18, 2, 8.0, NULL), (3, 18, 3, 9.0, NULL), CREATE TABLE `qualifying` ( qualifyId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, position INTEGER, q1 TEXT, q2 TEXT, q3 TEXT ); Sample rows from `qualifying`: (1, 18, 1, 1, 22, 1, 1:26.572, 1:25.187, 1:26.714), (2, 18, 9, 2, 4, 2, 1:26.103, 1:25.315, 1:26.869), (3, 18, 5, 1, 23, 3, 1:25.664, 1:25.452, 1:27.079), CREATE TABLE `pitStops` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), stop INTEGER PRIMARY KEY, lap INTEGER, time TEXT, duration TEXT, milliseconds INTEGER ); CREATE TABLE `lapTimes` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), lap INTEGER PRIMARY KEY, position INTEGER, time TEXT, milliseconds INTEGER ); ",
        "output": "SELECT DISTINCT driverid ,  stop FROM pitstops WHERE duration  >  (SELECT MIN(duration) FROM pitstops WHERE raceid  =  841)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average base price of rooms, for each bed type? ###filtered_database_schema: CREATE TABLE `Rooms` ( RoomId TEXT PRIMARY KEY, roomName TEXT, beds INTEGER, bedType TEXT, maxOccupancy INTEGER, basePrice INTEGER, decor TEXT ); Sample rows from `Rooms`: (RND, Recluse and defiance, 1, King, 2, 150, modern), (IBS, Interim but salutary, 1, King, 2, 150, traditional), (AOB, Abscond or bolster, 2, Queen, 4, 175, traditional), CREATE TABLE `Reservations` ( Code INTEGER, Room TEXT REFERENCES Rooms(RoomId), CheckIn TEXT, CheckOut TEXT, Rate REAL, LastName TEXT, FirstName TEXT, Adults INTEGER, Kids INTEGER ); Sample rows from `Reservations`: (10105, HBB, 23-OCT-10, 25-OCT-10, 100.0, SELBIG, CONRAD, 1, 0), (10183, IBD, 19-SEP-10, 20-SEP-10, 150.0, GABLER, DOLLIE, 2, 0), (10449, RND, 30-SEP-10, 01-OCT-10, 150.0, KLESS, NELSON, 1, 0), ",
        "output": "SELECT bedtype ,  AVG(baseprice) FROM rooms GROUP BY bedtype;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the locations of parties and the names of the party hosts in ascending order of the age of the host. ###filtered_database_schema: CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Party_Theme TEXT, Location TEXT, First_year TEXT, Last_year TEXT, Number_of_hosts INT ); Sample rows from `party`: (1, Spring, Hemkade 48 Zaandam, 2000, 2001, 5), (2, Club Q-BASE, Hemkade 48 Zaandam, 2002, 2002, 23), (3, Hardcore Resurrection, Various locations, 2000, 2003, 4), CREATE TABLE `host` ( Host_ID INT PRIMARY KEY, Name TEXT, Nationality TEXT, Age TEXT ); Sample rows from `host`: (1, Austin Daye, United States, 43), (2, Lloyd Daniels, United States, 37), (3, Kornel David, Hungary, 31), CREATE TABLE `party_host` ( Party_ID INT PRIMARY KEY REFERENCES party(Party_ID), Host_ID INT PRIMARY KEY REFERENCES host(Host_ID), Is_Main_in_Charge bool ); Sample rows from `party_host`: (1, 1, T), (8, 7, T), (6, 10, F), ",
        "output": "SELECT t3.location ,  t2.name FROM party_host as t1 JOIN host as t2 ON t1.host_id  =  t2.host_id JOIN party as t3 ON t1.party_id  =  t3.party_id ORDER BY t2.age"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For each county, find the name of the county and the number of delegates from that county. ###filtered_database_schema: CREATE TABLE `county` ( County_Id INT PRIMARY KEY, County_name TEXT, Population REAL, Zip_code TEXT ); Sample rows from `county`: (1, Howard, 21000.0, D21), (2, Baltimore County, 90000.0, D08), (3, Colony, 79000.0, D02), CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Year REAL, Party TEXT, Governor TEXT, Lieutenant_Governor TEXT, Comptroller TEXT, Attorney_General TEXT, US_Senate TEXT ); Sample rows from `party`: (1, 1998.0, Democratic, Peter Vallone, Sandra Frankel, Carl McCall, Eliot Spitzer, Charles Schumer), (2, 1998.0, Liberal, Betsy McCaughey Ross, Jonathan Reiter, Carl McCall, Eliot Spitzer, Charles Schumer), (3, 2002.0, Democratic, Carl McCall, Dennis Mehiel, Alan Hevesi, Eliot Spitzer, (no election)), CREATE TABLE `election` ( Election_ID INT PRIMARY KEY, Counties_Represented TEXT, District INT REFERENCES county(County_Id), Delegate TEXT, Party INT REFERENCES party(Party_ID), First_Elected REAL, Committee TEXT ); Sample rows from `election`: (1, 09.1 9A, 1, Bates, Gail H. Gail H. Bates, 1, 2002.0, Appropriations), (2, 09.1 9A, 1, Miller, Warren E. Warren E. Miller, 1, 2003.0, Economic Matters), (3, 12.1 12A, 2, DeBoy, Steven J. Sr. Steven J. DeBoy, Sr., 2, 2002.0, Appropriations), ",
        "output": "SELECT t1.county_name ,  COUNT(*) FROM county as t1 JOIN election as t2 ON t1.county_id  =  t2.district GROUP BY t1.county_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the titles of items that received both a rating higher than 8 and a rating below 5. ###filtered_database_schema: CREATE TABLE `item` ( i_id INTEGER, title varchar(20) ); Sample rows from `item`: (0, pear), (1, orange), (2, apple), CREATE TABLE `review` ( a_id INTEGER PRIMARY KEY, u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), i_id INTEGER PRIMARY KEY REFERENCES item(i_id), rating INTEGER, rank INTEGER ); Sample rows from `review`: (1, 1, 1, 10, 1), (2, 2, 1, 5, 2), (3, 1, 4, 7, 3), CREATE TABLE `useracct` ( u_id INTEGER, name varchar(128) ); Sample rows from `useracct`: (1, Helen), (2, Mark), (3, Terry), CREATE TABLE `trust` ( source_u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), target_u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), trust INTEGER ); Sample rows from `trust`: (1, 2, 10), (1, 3, 6), (2, 4, 8), ",
        "output": "SELECT t1.title FROM item as t1 JOIN review as t2 ON t1.i_id  =  t2.i_id WHERE t2.rating  >  8 INTERSECT SELECT t1.title FROM item as t1 JOIN review as t2 ON t1.i_id  =  t2.i_id WHERE t2.rating  <  5"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what state has the largest capital ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the name of the user who gave the highest rating. ###filtered_database_schema: CREATE TABLE `item` ( i_id INTEGER, title varchar(20) ); Sample rows from `item`: (0, pear), (1, orange), (2, apple), CREATE TABLE `review` ( a_id INTEGER PRIMARY KEY, u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), i_id INTEGER PRIMARY KEY REFERENCES item(i_id), rating INTEGER, rank INTEGER ); Sample rows from `review`: (1, 1, 1, 10, 1), (2, 2, 1, 5, 2), (3, 1, 4, 7, 3), CREATE TABLE `useracct` ( u_id INTEGER, name varchar(128) ); Sample rows from `useracct`: (1, Helen), (2, Mark), (3, Terry), CREATE TABLE `trust` ( source_u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), target_u_id INTEGER PRIMARY KEY REFERENCES useracct(u_id), trust INTEGER ); Sample rows from `trust`: (1, 2, 10), (1, 3, 6), (2, 4, 8), ",
        "output": "SELECT t1.name FROM useracct as t1 JOIN review as t2 ON t1.u_id  =  t2.u_id ORDER BY t2.rating DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what papers do parsing papers typically cite ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase as t2 JOIN keyphrase as t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper as t3 ON t3.paperid  =  t2.paperid JOIN cite as t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  \"parsing\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what are the populations of the states through which the mississippi river run ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of products produced by both Creative Labs and Sony? ###filtered_database_schema: CREATE TABLE `Manufacturers` ( Code INTEGER, Name VARCHAR(255), Headquarter VARCHAR(255), Founder VARCHAR(255), Revenue REAL ); Sample rows from `Manufacturers`: (1, Sony, Tokyo, Andy, 120.0), (2, Creative Labs, Austin, Owen, 100.0), (3, Hewlett-Packard, Los Angeles, James, 50.0), CREATE TABLE `Products` ( Code INTEGER, Name VARCHAR(255), Price DECIMAL, Manufacturer INTEGER REFERENCES Manufacturers(Code) ); Sample rows from `Products`: (1, Hard drive, 240, 5), (2, Memory, 120, 6), (3, ZIP drive, 150, 4), ",
        "output": "SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Creative Labs' INTERSECT SELECT t1.name FROM products as t1 JOIN manufacturers as t2 ON t1.manufacturer  =  t2.code WHERE t2.name  =  'Sony'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: find the number of actors from Iran who played in \" Jim Jarmusch \" movies ###filtered_database_schema: CREATE TABLE `actor` ( aid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `copyright` ( id INT PRIMARY KEY, msid INT, cid INT ); CREATE TABLE `cast` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), aid INT REFERENCES actor(aid), role INT ); CREATE TABLE `genre` ( gid INT PRIMARY KEY, genre TEXT ); CREATE TABLE `classification` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), gid INT REFERENCES genre(gid) ); CREATE TABLE `company` ( id INT PRIMARY KEY, name TEXT, country_code TEXT ); CREATE TABLE `director` ( did INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `producer` ( pid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `directed_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), did INT REFERENCES director(did) ); CREATE TABLE `keyword` ( id INT PRIMARY KEY, keyword TEXT ); CREATE TABLE `made_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), pid INT REFERENCES producer(pid) ); CREATE TABLE `movie` ( mid INT PRIMARY KEY, title TEXT, release_year INT, title_aka TEXT, budget TEXT ); CREATE TABLE `tags` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), kid INT REFERENCES keyword(kid) ); CREATE TABLE `tv_series` ( sid INT PRIMARY KEY, title TEXT, release_year INT, num_of_seasons INT, num_of_episodes INT, title_aka TEXT, budget TEXT ); CREATE TABLE `writer` ( wid INT PRIMARY KEY, gender TEXT, name INT, nationality INT, num_of_episodes INT, birth_city TEXT, birth_year INT ); CREATE TABLE `written_by` ( id INT, msid INT REFERENCES copyright(msid), wid INT REFERENCES writer(wid) ); ",
        "output": "SELECT COUNT(DISTINCT t1.name) FROM cast as t4 JOIN actor as t1 ON t4.aid  =  t1.aid JOIN movie as t5 ON t5.mid  =  t4.msid JOIN directed_by as t2 ON t5.mid  =  t2.msid JOIN director as t3 ON t3.did  =  t2.did WHERE t1.nationality  =  \"Iran\" AND t3.name  =  \"Jim Jarmusch\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the papers on VLDB conference after 2000 . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT t2.title FROM publication as t2 JOIN conference as t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Return the issue dates of volumes by artists who are at most 23 years old? ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Artist TEXT, Age INT, Famous_Title TEXT, Famous_Release_date TEXT ); Sample rows from `artist`: (1, Gorgoroth, 34, Bergen 1996, November 2007), (2, Ophiolatry, 35, Transmutation, January 21, 2008), (3, Ophiolatry, 22, Antievangelistical Process (re-release), 2009), CREATE TABLE `volume` ( Volume_ID INT PRIMARY KEY, Volume_Issue TEXT, Issue_Date TEXT, Weeks_on_Top REAL, Song TEXT, Artist_ID INT REFERENCES artist(Artist_ID) ); Sample rows from `volume`: (1, 45:14 §, 27 December 1986 - 10 January, 3.0, The Way, 1), (2, 45:15, 17 January, 1.0, Everybody Have Fun Tonight , 2), (3, 45:16, 24 January, 1.0, Walk Like an Egyptian , 1), CREATE TABLE `music_festival` ( ID INT PRIMARY KEY, Music_Festival TEXT, Date_of_ceremony TEXT, Category TEXT, Volume INT REFERENCES volume(Volume_ID), Result TEXT ); Sample rows from `music_festival`: (1, 34th England Academy Prize, 18 February 2011, Best Song, 1, Nominated), (2, 34th Japan Academy Prize, 18 February 2011, Best Lyrics, 2, Nominated), (3, 34th European Academy Prize, 18 February 2011, Best Song, 3, Awarded), ",
        "output": "SELECT issue_date FROM artist as t1 JOIN volume as t2 ON t1.artist_id  =  t2.artist_id WHERE t1.age  <=  23"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the average rating of songs produced by female artists? ###filtered_database_schema: CREATE TABLE `genre` ( g_name varchar2(20) PRIMARY KEY, rating varchar2(10), most_popular_in varchar2(50) ); Sample rows from `genre`: (tagore, 8, Bangladesh), (nazrul, 7, Bangladesh), (folk, 9, Sylhet,Chittagong,Kustia), CREATE TABLE `artist` ( artist_name varchar2(50) PRIMARY KEY, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50) REFERENCES genre(g_name) ); Sample rows from `artist`: (Shrikanta, India, Male, tagore), (Prity, Bangladesh, Female, nazrul), (Farida, Bangladesh, Female, folk), CREATE TABLE `files` ( f_id number(10) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), file_size varchar2(20), duration varchar2(20), formats varchar2(20) ); Sample rows from `files`: (1, Shrikanta, 3.78 MB, 3:45, mp4), (2, Prity, 4.12 MB, 2:56, mp3), (3, Farida, 3.69 MB, 4:12, mp4), CREATE TABLE `song` ( song_name varchar2(50) PRIMARY KEY, artist_name varchar2(50) REFERENCES artist(artist_name), country varchar2(20), f_id number(10) REFERENCES files(f_id), genre_is varchar2(20) REFERENCES genre(g_name), rating number(10), languages varchar2(20), releasedate Date, resolution number(10) ); Sample rows from `song`: (Tumi robe nirobe, Shrikanta, India, 1, tagore, 8, bangla, 28-AUG-2011, 1080), (Shukno patar nupur pae, Prity, Bangladesh, 2, nazrul, 5, bangla, 21-SEP-1997, 512), (Ami opar hoye, Farida, Bangladesh, 3, folk, 7, bangla, 7-APR-2001, 320), ",
        "output": "SELECT AVG(t2.rating) FROM artist as t1 JOIN song as t2 ON t1.artist_name  =  t2.artist_name WHERE t1.gender  =  \"Female\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many products have a price higher than the average? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, line_1_number_building VARCHAR(80), city VARCHAR(50), zip_postcode VARCHAR(20), state_province_county VARCHAR(50), country VARCHAR(50) ); Sample rows from `Addresses`: (1, 4315 Kerluke Canyon Apt. 800, Hertafurt, 740, Nevada, USA), (2, 319 Kozey Highway Suite 973, Edgardoberg, 282, Colorado, USA), (3, 592 Frederique Ridge, Gilbertmouth, 167, Virginia, USA), CREATE TABLE `Products` ( product_id INTEGER, product_type_code VARCHAR(15), product_name VARCHAR(80), product_price DOUBLE ); Sample rows from `Products`: (1, Hardware, Apple, 54753982.574522), (2, Clothes, jcrew, 30590929.528306), (3, Hardware, Apple, 10268.85297069), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method_code VARCHAR(15), customer_number VARCHAR(20), customer_name VARCHAR(80), customer_address VARCHAR(255), customer_phone VARCHAR(80), customer_email VARCHAR(80) ); Sample rows from `Customers`: (1, Credit Card, 456, Kayley, 636 Chanelle Isle Apt. 846, +87(9)5279161988, antonette73@example.com), (2, Credit Card, 553, Sterling, 12174 Boyer Crossroad, 896.685.8228x2786, stroman.chadd@example.net), (3, Credit Card, 951, Buford, 650 Spencer Way Apt. 584, (192)144-4687, pattie.mayer@example.net), CREATE TABLE `Contacts` ( contact_id INTEGER, customer_id INTEGER, gender VARCHAR(1), first_name VARCHAR(80), last_name VARCHAR(50), contact_phone VARCHAR(80) ); Sample rows from `Contacts`: (1, 4, male, Cierra, Collins, +73(2)0854391820), (2, 6, male, Jennifer, Doyle, 482-949-1364x17500), (3, 8, female, Carli, Blick, (608)868-5069x554), CREATE TABLE `Customer_Address_History` ( customer_id INTEGER REFERENCES Customers(customer_id), address_id INTEGER REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Customer_Address_History`: (12, 7, 2015-07-23 14:37:18, 2018-03-07 12:04:20), (12, 2, 2016-11-06 14:33:12, 2018-03-14 21:36:28), (3, 9, 2011-11-19 12:17:36, 2018-03-22 10:20:16), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_date DATETIME, order_status_code VARCHAR(15) ); Sample rows from `Customer_Orders`: (1, 2, 2009-07-19 13:40:49, Completed), (2, 2, 1976-05-28 15:02:44, Part), (3, 6, 1979-03-29 02:47:13, Completed), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id), order_quantity VARCHAR(80) ); Sample rows from `Order_Items`: (1, 9, 15, 3), (2, 8, 12, 7), (3, 11, 9, 9), ",
        "output": "SELECT COUNT(*) FROM products WHERE product_price  >  (SELECT AVG(product_price) FROM products)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the heights of perpetrators in descending order of the number of people they injured? ###filtered_database_schema: CREATE TABLE `perpetrator` ( Perpetrator_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Date TEXT, Year REAL, Location TEXT, Country TEXT, Killed INT, Injured INT ); Sample rows from `perpetrator`: (1, 1, 04.26 April 26/27, 1982.0, Uiryeong, South Korea, 56, 37), (2, 3, 11.18 Nov. 18, 1995.0, Zhaodong, China, 32, 16), (3, 4, 05.21 May 21, 1938.0, Kaio, Japan, 30, 3), CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Name TEXT, Height REAL, Weight REAL, Home Town TEXT ); Sample rows from `people`: (1, Ron Baxter, 6.4, 205.0, Los Angeles, CA), (2, Brent Boyd, 6.3, 185.0, Baton Rouge, LA), (3, Tyrone Brayan, 6.7, 220.0, Placentia, CA), ",
        "output": "SELECT t1.height FROM people as t1 JOIN perpetrator as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.injured DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show invoice dates and order id and details for all invoices. ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(50), customer_middle_initial VARCHAR(1), customer_last_name VARCHAR(50), gender VARCHAR(1), email_address VARCHAR(255), login_name VARCHAR(80), login_password VARCHAR(20), phone_number VARCHAR(255), town_city VARCHAR(50), state_county_province VARCHAR(50), country VARCHAR(50) ); Sample rows from `Customers`: (1, Dee, A, Larkin, 1, thora.torphy@example.org, xhartmann, 77789d292604ea04406f, 241.796.1219x37862, North Nellie, WestVirginia, USA), (2, Brennon, H, Weimann, 0, roosevelt.collier@example.org, shayne.lesch, ce97a3e4539347daab96, (943)219-4234x415, South Isabell, Oklahoma, USA), (3, Joesph, K, Schaefer, 0, homenick.ambrose@example.net, feeney.lauriane, a6c7a7064c36b038d402, (488)524-5345, New Nikolas, Arkansas, USA), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 12, 2012-06-27 20:49:56, None), (2, 12, 2012-08-25 07:51:54, None), (3, 8, 2017-11-05 15:32:38, None), CREATE TABLE `Invoices` ( invoice_number INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_date DATETIME ); Sample rows from `Invoices`: (1, 9, 2018-03-01 16:40:48), (2, 9, 2018-03-20 00:21:41), (3, 3, 2018-03-05 08:47:33), CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_account_opened DATETIME, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 8, 2016-07-30 22:22:24, 900, Regular), (2, 3, 2017-05-29 16:45:17, 520, VIP), (3, 8, 2012-05-04 18:50:32, 323, Regular), CREATE TABLE `Product_Categories` ( production_type_code VARCHAR(15) PRIMARY KEY, product_type_description VARCHAR(80), vat_rating DECIMAL(19,4) ); Sample rows from `Product_Categories`: (Food, Food, 15.84), (DVDs, Dvd products, 11.4), (Books, Books, 13.95), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, production_type_code VARCHAR(15) REFERENCES Product_Categories(production_type_code), unit_price DECIMAL(19,4), product_name VARCHAR(80), product_color VARCHAR(20), product_size VARCHAR(20) ); Sample rows from `Products`: (1, 4, Food, 617.95, Coffee Bean, Red, Medium), (2, 4, Books, 558.49, Learning French, Yellow, Medium), (3, 8, Electronics, 563.58, Fans, Black, Medium), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DECIMAL(19,4), transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 13, 12, Payment, 2018-03-15 21:13:57, 613.96, None, None), (2, 9, 1, Payment, 2018-03-13 13:27:46, 368.46, None, None), (3, 6, 1, Refund, 2018-03-03 01:50:25, 1598.25, None, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), product_id INTEGER REFERENCES Products(product_id), product_quantity VARCHAR(50), other_order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 4, 6, None), (2, 4, 10, 7, None), (3, 15, 5, 4, None), CREATE TABLE `Invoice_Line_Items` ( order_item_id INTEGER REFERENCES Order_Items(order_item_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), product_id INTEGER REFERENCES Products(product_id), product_title VARCHAR(80), product_quantity VARCHAR(50), product_price DECIMAL(19,4), derived_product_cost DECIMAL(19,4), derived_vat_payable DECIMAL(19,4), derived_total_cost DECIMAL(19,4) ); Sample rows from `Invoice_Line_Items`: (14, 9, 5, prod_name, 4, 742.37, 191.11, None, 69.82), (3, 9, 15, prod_name, 1, 814.87, 176.29, None, 59.56), (4, 10, 15, prod_name, 8, 943.07, 73.14, None, 59.93), ",
        "output": "SELECT t1.invoice_date ,  t1.order_id ,  t2.order_details FROM invoices as t1 JOIN orders as t2 ON t1.order_id  =  t2.order_id"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Sort all the distinct product names in alphabetical order. ###filtered_database_schema: CREATE TABLE `Problem_Category_Codes` ( problem_category_code VARCHAR(20) PRIMARY KEY, problem_category_description VARCHAR(80) ); Sample rows from `Problem_Category_Codes`: (Datatabase, Database design or contents.), (GUI, User Interface.), (Middleware, Infrastructrure and Architecture), CREATE TABLE `Problem_Log` ( problem_log_id INTEGER, assigned_to_staff_id INTEGER REFERENCES Staff(staff_id), problem_id INTEGER REFERENCES Problems(problem_id), problem_category_code VARCHAR(20) REFERENCES Problem_Category_Codes(problem_category_code), problem_status_code VARCHAR(20) REFERENCES Problem_Status_Codes(problem_status_code), log_entry_date DATETIME, log_entry_description VARCHAR(255), log_entry_fix VARCHAR(255), other_log_details VARCHAR(255) ); Sample rows from `Problem_Log`: (1, 11, 11, Middleware, Solved, 2011-03-13 13:11:57, t, k, p), (2, 11, 8, GUI, Solved, 1976-03-31 14:03:02, a, k, s), (3, 12, 1, GUI, Solved, 1974-12-11 01:06:22, b, j, e), CREATE TABLE `Problem_Status_Codes` ( problem_status_code VARCHAR(20) PRIMARY KEY, problem_status_description VARCHAR(80) ); Sample rows from `Problem_Status_Codes`: (Reported, Reported), (Solved, Solved), CREATE TABLE `Product` ( product_id INTEGER, product_name VARCHAR(80), product_details VARCHAR(255) ); Sample rows from `Product`: (1, rose, k), (2, yellow, q), (3, chat, e), CREATE TABLE `Staff` ( staff_id INTEGER, staff_first_name VARCHAR(80), staff_last_name VARCHAR(80), other_staff_details VARCHAR(255) ); Sample rows from `Staff`: (1, Lacey, Bosco, m), (2, Dameon, Frami, x), (3, Ashley, Medhurst, w), CREATE TABLE `Problems` ( problem_id INTEGER, product_id INTEGER REFERENCES Product(product_id), closure_authorised_by_staff_id INTEGER REFERENCES Staff(staff_id), reported_by_staff_id INTEGER REFERENCES Staff(staff_id), date_problem_reported DATETIME, date_problem_closed DATETIME, problem_description VARCHAR(255), other_problem_details VARCHAR(255) ); Sample rows from `Problems`: (1, 4, 4, 2, 1978-06-26 19:10:17, 2012-07-22 19:24:26, x, p), (2, 8, 3, 10, 1988-11-07 16:09:31, 1973-06-07 04:13:51, w, p), (3, 1, 4, 1, 1995-05-14 08:32:56, 1997-02-26 05:06:15, r, i), ",
        "output": "SELECT DISTINCT product_name FROM product ORDER BY product_name"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many Starbucks are there in Dallas Texas ? ###filtered_database_schema: CREATE TABLE `business` ( bid INT PRIMARY KEY, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INT, is_open INT, rating REAL, state TEXT ); CREATE TABLE `category` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), category_name TEXT ); CREATE TABLE `user` ( uid INT PRIMARY KEY, user_id TEXT, name TEXT ); CREATE TABLE `checkin` ( cid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), count INT, day TEXT ); CREATE TABLE `neighbourhood` ( id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), neighbourhood_name TEXT ); CREATE TABLE `review` ( rid INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), user_id TEXT REFERENCES user(user_id), rating REAL, text TEXT, year INT, month TEXT ); CREATE TABLE `tip` ( tip_id INT PRIMARY KEY, business_id TEXT REFERENCES business(business_id), text TEXT, user_id TEXT REFERENCES user(user_id), likes INT, year INT, month TEXT ); ",
        "output": "SELECT COUNT(DISTINCT business_id) FROM business WHERE city  =  \"Dallas\" AND name  =  \"Starbucks\" AND state  =  \"Texas\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the names of procedures which physician John Wen was trained in. ###filtered_database_schema: CREATE TABLE `Physician` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), SSN INTEGER ); Sample rows from `Physician`: (1, John Dorian, Staff Internist, 111111111), (2, Elliot Reid, Attending Physician, 222222222), (3, Christopher Turk, Surgical Attending Physician, 333333333), CREATE TABLE `Department` ( DepartmentID INTEGER, Name VARCHAR(30), Head INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Department`: (1, General Medicine, 4), (2, Surgery, 7), (3, Psychiatry, 9), CREATE TABLE `Affiliated_With` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Department INTEGER PRIMARY KEY REFERENCES Department(DepartmentID), PrimaryAffiliation BOOLEAN ); Sample rows from `Affiliated_With`: (1, 1, 1), (2, 1, 1), (3, 1, 0), CREATE TABLE `Procedures` ( Code INTEGER, Name VARCHAR(30), Cost REAL ); Sample rows from `Procedures`: (1, Reverse Rhinopodoplasty, 1500.0), (2, Obtuse Pyloric Recombobulation, 3750.0), (3, Folded Demiophtalmectomy, 4500.0), CREATE TABLE `Trained_In` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Treatment INTEGER PRIMARY KEY REFERENCES Procedures(Code), CertificationDate DATETIME, CertificationExpires DATETIME ); Sample rows from `Trained_In`: (3, 1, 2008-01-01, 2008-12-31), (3, 2, 2008-01-01, 2008-12-31), (3, 5, 2008-01-01, 2008-12-31), CREATE TABLE `Patient` ( SSN INTEGER, Name VARCHAR(30), Address VARCHAR(30), Phone VARCHAR(30), InsuranceID INTEGER, PCP INTEGER REFERENCES Physician(EmployeeID) ); Sample rows from `Patient`: (100000001, John Smith, 42 Foobar Lane, 555-0256, 68476213, 1), (100000002, Grace Ritchie, 37 Snafu Drive, 555-0512, 36546321, 2), (100000003, Random J. Patient, 101 Omgbbq Street, 555-1204, 65465421, 2), CREATE TABLE `Nurse` ( EmployeeID INTEGER, Name VARCHAR(30), Position VARCHAR(30), Registered BOOLEAN, SSN INTEGER ); Sample rows from `Nurse`: (101, Carla Espinosa, Head Nurse, 1, 111111110), (102, Laverne Roberts, Nurse, 1, 222222220), (103, Paul Flowers, Nurse, 0, 333333330), CREATE TABLE `Appointment` ( AppointmentID INTEGER, Patient INTEGER REFERENCES Patient(SSN), PrepNurse INTEGER REFERENCES Nurse(EmployeeID), Physician INTEGER REFERENCES Physician(EmployeeID), Start DATETIME, End DATETIME, ExaminationRoom TEXT ); Sample rows from `Appointment`: (13216584, 100000001, 101, 1, 2008-04-24 10:00, 2008-04-24 11:00, A), (26548913, 100000002, 101, 2, 2008-04-24 10:00, 2008-04-24 11:00, B), (36549879, 100000001, 102, 1, 2008-04-25 10:00, 2008-04-25 11:00, A), CREATE TABLE `Medication` ( Code INTEGER, Name VARCHAR(30), Brand VARCHAR(30), Description VARCHAR(30) ); Sample rows from `Medication`: (1, Procrastin-X, X, N/A), (2, Thesisin, Foo Labs, N/A), (3, Awakin, Bar Laboratories, N/A), CREATE TABLE `Prescribes` ( Physician INTEGER PRIMARY KEY REFERENCES Physician(EmployeeID), Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Medication INTEGER PRIMARY KEY REFERENCES Medication(Code), Date DATETIME PRIMARY KEY, Appointment INTEGER REFERENCES Appointment(AppointmentID), Dose VARCHAR(30) ); Sample rows from `Prescribes`: (1, 100000001, 1, 2008-04-24 10:47, 13216584, 5), (9, 100000004, 2, 2008-04-27 10:53, 86213939, 10), (9, 100000004, 2, 2008-04-30 16:53, None, 5), CREATE TABLE `Block` ( BlockFloor INTEGER PRIMARY KEY, BlockCode INTEGER PRIMARY KEY ); Sample rows from `Block`: (1, 1), (1, 2), (1, 3), CREATE TABLE `Room` ( RoomNumber INTEGER, RoomType VARCHAR(30), BlockFloor INTEGER REFERENCES Block(BlockFloor), BlockCode INTEGER REFERENCES Block(BlockCode), Unavailable BOOLEAN ); Sample rows from `Room`: (101, Single, 1, 1, 0), (102, Single, 1, 1, 0), (103, Single, 1, 1, 0), CREATE TABLE `On_Call` ( Nurse INTEGER PRIMARY KEY REFERENCES Nurse(EmployeeID), BlockFloor INTEGER PRIMARY KEY REFERENCES Block(BlockFloor), BlockCode INTEGER PRIMARY KEY REFERENCES Block(BlockCode), OnCallStart DATETIME PRIMARY KEY, OnCallEnd DATETIME PRIMARY KEY ); Sample rows from `On_Call`: (101, 1, 1, 2008-11-04 11:00, 2008-11-04 19:00), (101, 1, 2, 2008-11-04 11:00, 2008-11-04 19:00), (102, 1, 3, 2008-11-04 11:00, 2008-11-04 19:00), CREATE TABLE `Stay` ( StayID INTEGER, Patient INTEGER REFERENCES Patient(SSN), Room INTEGER REFERENCES Room(RoomNumber), StayStart DATETIME, StayEnd DATETIME ); Sample rows from `Stay`: (3215, 100000001, 111, 2008-05-01, 2008-05-04), (3216, 100000003, 123, 2008-05-03, 2008-05-14), (3217, 100000004, 112, 2008-05-02, 2008-05-03), CREATE TABLE `Undergoes` ( Patient INTEGER PRIMARY KEY REFERENCES Patient(SSN), Procedures INTEGER PRIMARY KEY REFERENCES Procedures(Code), Stay INTEGER PRIMARY KEY REFERENCES Stay(StayID), DateUndergoes DATETIME PRIMARY KEY, Physician INTEGER REFERENCES Physician(EmployeeID), AssistingNurse INTEGER REFERENCES Nurse(EmployeeID) ); Sample rows from `Undergoes`: (100000001, 6, 3215, 2008-05-02, 3, 101), (100000001, 2, 3215, 2008-05-03, 7, 101), (100000004, 1, 3217, 2008-05-07, 3, 102), ",
        "output": "SELECT t3.name FROM physician as t1 JOIN trained_in as t2 ON t1.employeeid  =  t2.physician JOIN procedures as t3 ON t3.code  =  t2.treatment WHERE t1.name  =  \"John Wen\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the average room count of the apartments that have the \"Studio\" type code. ###filtered_database_schema: CREATE TABLE `Apartment_Buildings` ( building_id INTEGER PRIMARY KEY, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80) ); Sample rows from `Apartment_Buildings`: (133, Normandie Court, Normandie Court, Studio, 7950 Casper Vista Apt. 176 Marquiseberg, CA 70496, Emma, (948)040-1064x387), (153, Mercedes House, Mercedes House, Studio, 354 Otto Villages Charliefort, VT 71664, Brenden, 915-617-2408x832), (191, The Eugene, The Eugene, Flat, 71537 Gorczany Inlet Wisozkburgh, AL 08256, Melyssa, (609)946-0491), CREATE TABLE `Apartments` ( apt_id INTEGER PRIMARY KEY, building_id INTEGER REFERENCES Apartment_Buildings(building_id), apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5) ); Sample rows from `Apartments`: (1, 808, Flat, Suite 645, 1, 3, 7), (2, 624, Flat, Apt. 585, 2, 4, 5), (3, 225, Studio, Apt. 908, 1, 6, 7), CREATE TABLE `Apartment_Facilities` ( apt_id INTEGER PRIMARY KEY REFERENCES Apartments(apt_id), facility_code CHAR(15) PRIMARY KEY ); Sample rows from `Apartment_Facilities`: (1, Boardband), (2, Boardband), (3, Gym), CREATE TABLE `Guests` ( guest_id INTEGER PRIMARY KEY, gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME ); Sample rows from `Guests`: (1, Male, Kip, DuBuque, 1995-11-04 07:09:57), (2, Unknown, Rebeca, Runolfsdottir, 1974-05-12 21:53:58), (3, Female, Keon, Treutel, 1974-08-20 09:28:05), CREATE TABLE `Apartment_Bookings` ( apt_booking_id INTEGER PRIMARY KEY, apt_id INTEGER REFERENCES Apartments(apt_id), guest_id INTEGER REFERENCES Guests(guest_id), booking_status_code CHAR(15), booking_start_date DATETIME, booking_end_date DATETIME ); Sample rows from `Apartment_Bookings`: (258, 10, 2, Provisional, 2016-09-26 17:13:49, 2017-10-07 11:38:48), (279, 15, 15, Provisional, 2016-04-01 06:28:08, 2017-10-25 11:08:42), (337, 8, 5, Provisional, 2017-03-13 16:20:14, 2018-02-19 16:59:08), CREATE TABLE `View_Unit_Status` ( apt_id INTEGER REFERENCES Apartments(apt_id), apt_booking_id INTEGER REFERENCES Apartment_Bookings(apt_booking_id), status_date DATETIME PRIMARY KEY, available_yn BIT ); Sample rows from `View_Unit_Status`: (11, 920, 1970-09-28 10:24:29, 1), (15, 575, 1972-03-23 22:55:53, 1), (15, 924, 1973-10-28 04:30:14, 1), ",
        "output": "SELECT AVG(room_count) FROM apartments WHERE apt_type_code  =  \"Studio\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the series in which \" Scott Foley \" is an actor ? ###filtered_database_schema: CREATE TABLE `actor` ( aid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `copyright` ( id INT PRIMARY KEY, msid INT, cid INT ); CREATE TABLE `cast` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), aid INT REFERENCES actor(aid), role INT ); CREATE TABLE `genre` ( gid INT PRIMARY KEY, genre TEXT ); CREATE TABLE `classification` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), gid INT REFERENCES genre(gid) ); CREATE TABLE `company` ( id INT PRIMARY KEY, name TEXT, country_code TEXT ); CREATE TABLE `director` ( did INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `producer` ( pid INT PRIMARY KEY, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INT ); CREATE TABLE `directed_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), did INT REFERENCES director(did) ); CREATE TABLE `keyword` ( id INT PRIMARY KEY, keyword TEXT ); CREATE TABLE `made_by` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), pid INT REFERENCES producer(pid) ); CREATE TABLE `movie` ( mid INT PRIMARY KEY, title TEXT, release_year INT, title_aka TEXT, budget TEXT ); CREATE TABLE `tags` ( id INT PRIMARY KEY, msid INT REFERENCES copyright(msid), kid INT REFERENCES keyword(kid) ); CREATE TABLE `tv_series` ( sid INT PRIMARY KEY, title TEXT, release_year INT, num_of_seasons INT, num_of_episodes INT, title_aka TEXT, budget TEXT ); CREATE TABLE `writer` ( wid INT PRIMARY KEY, gender TEXT, name INT, nationality INT, num_of_episodes INT, birth_city TEXT, birth_year INT ); CREATE TABLE `written_by` ( id INT, msid INT REFERENCES copyright(msid), wid INT REFERENCES writer(wid) ); ",
        "output": "SELECT t2.title FROM cast as t3 JOIN actor as t1 ON t3.aid  =  t1.aid JOIN tv_series as t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Scott Foley\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what state has highest elevation ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX(highest_elevation) FROM highlow );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find all the locations whose names contain the word \"film\". ###filtered_database_schema: CREATE TABLE `Ref_Hotel_Star_Ratings` ( star_rating_code CHAR(15) PRIMARY KEY, star_rating_description VARCHAR(80) ); Sample rows from `Ref_Hotel_Star_Ratings`: (1, star), (2, star), (3, star), CREATE TABLE `Locations` ( Location_ID INTEGER, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Locations`: (333, Astro Orbiter, 660 Shea Crescent, None), (368, African Animals, 254 Ottilie Junction, None), (417, American Adventure, 53815 Sawayn Tunnel Apt. 297, None), CREATE TABLE `Ref_Attraction_Types` ( Attraction_Type_Code CHAR(15) PRIMARY KEY, Attraction_Type_Description VARCHAR(255) ); Sample rows from `Ref_Attraction_Types`: (2, park), (3, garden), (5, gallery), CREATE TABLE `Visitors` ( Tourist_ID INTEGER PRIMARY KEY, Tourist_Details VARCHAR(255) ); Sample rows from `Visitors`: (164, Toney), (189, Graciela), (204, Vincent), CREATE TABLE `Features` ( Feature_ID INTEGER, Feature_Details VARCHAR(255) ); Sample rows from `Features`: (523, cafe), (528, park), (543, garden), CREATE TABLE `Hotels` ( hotel_id INTEGER, star_rating_code CHAR(15) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code), pets_allowed_yn CHAR(1), price_range REAL, other_hotel_details VARCHAR(255) ); Sample rows from `Hotels`: (123, 5, 1, 2914989.571, None), (144, 4, , , None), (172, 5, , 17012.682586009, None), CREATE TABLE `Tourist_Attractions` ( Tourist_Attraction_ID INTEGER, Attraction_Type_Code CHAR(15) REFERENCES Ref_Attraction_Types(Attraction_Type_Code), Location_ID INTEGER REFERENCES Locations(Location_ID), How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Tourist_Attractions`: (2113, 2, 579, bus, art museum, None, None, None), (2701, 6, 417, walk, UK gallery, None, None, None), (5076, 2, 868, shuttle, flying elephant, None, None, None), CREATE TABLE `Street_Markets` ( Market_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Market_Details VARCHAR(255) ); Sample rows from `Street_Markets`: (6852, Broadway), (7067, Fish Farm Market), CREATE TABLE `Shops` ( Shop_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Shop_Details VARCHAR(255) ); Sample rows from `Shops`: (8429, soup), (8449, coffee), (8698, Flower), CREATE TABLE `Museums` ( Museum_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Museum_Details VARCHAR(255) ); Sample rows from `Museums`: (2113, Yale Center for British Art), (2701, The Metropolitan Museum of Art), (5076, MoMA), CREATE TABLE `Royal_Family` ( Royal_Family_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Royal_Family_Details VARCHAR(255) ); Sample rows from `Royal_Family`: (9561, None), (9919, None), CREATE TABLE `Theme_Parks` ( Theme_Park_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Theme_Park_Details VARCHAR(255) ); Sample rows from `Theme_Parks`: (5265, Disney), (6476, Sea World), (6523, Universal Studios), CREATE TABLE `Visits` ( Visit_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Tourist_ID INTEGER REFERENCES Visitors(Tourist_ID), Visit_Date DATETIME, Visit_Details VARCHAR(40) ); Sample rows from `Visits`: (183, 6653, 377, 2004-08-21 03:06:14, ), (268, 5076, 204, 2013-08-06 05:35:51, ), (273, 9360, 211, 2013-10-27 09:56:08, ), CREATE TABLE `Photos` ( Photo_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `Photos`: (211, 8449, game1, None, 702, None), (280, 7067, game2, None, 762, None), (303, 5076, game3, None, 392, None), CREATE TABLE `Staff` ( Staff_ID INTEGER, Tourist_Attraction_ID INTEGER REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Name VARCHAR(40), Other_Details VARCHAR(255) ); Sample rows from `Staff`: (170, 6476, Whitney, None), (219, 6476, Kaela, None), (237, 7067, Eunice, None), CREATE TABLE `Tourist_Attraction_Features` ( Tourist_Attraction_ID INTEGER PRIMARY KEY REFERENCES Tourist_Attractions(Tourist_Attraction_ID), Feature_ID INTEGER PRIMARY KEY REFERENCES Features(Feature_ID) ); Sample rows from `Tourist_Attraction_Features`: (5076, 528), (5076, 681), (5265, 523), ",
        "output": "SELECT location_name FROM locations WHERE location_name LIKE \"%film%\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Where does Peter Mertens publish ? ###filtered_database_schema: CREATE TABLE `venue` ( venueId INTEGER, venueName varchar(100) ); CREATE TABLE `author` ( authorId INTEGER, authorName varchar(50) ); CREATE TABLE `dataset` ( datasetId INTEGER, datasetName varchar(50) ); CREATE TABLE `journal` ( journalId INTEGER, journalName varchar(100) ); CREATE TABLE `keyphrase` ( keyphraseId INTEGER, keyphraseName varchar(50) ); CREATE TABLE `paper` ( paperId INTEGER, title varchar(300), venueId INTEGER REFERENCES venue(venueId), year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER REFERENCES journal(journalId) ); CREATE TABLE `cite` ( citingPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId), citedPaperId INTEGER PRIMARY KEY REFERENCES paper(paperId) ); CREATE TABLE `paperDataset` ( paperId INTEGER PRIMARY KEY, datasetId INTEGER PRIMARY KEY ); CREATE TABLE `paperKeyphrase` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), keyphraseId INTEGER PRIMARY KEY REFERENCES keyphrase(keyphraseId) ); CREATE TABLE `writes` ( paperId INTEGER PRIMARY KEY REFERENCES paper(paperId), authorId INTEGER PRIMARY KEY REFERENCES author(authorId) ); ",
        "output": "SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue as t4 JOIN paper as t3 ON t4.venueid  =  t3.venueid JOIN writes as t2 ON t2.paperid  =  t3.paperid JOIN author as t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: For each movie that received more than 3 reviews, what is the average rating? ###filtered_database_schema: CREATE TABLE `Movie` ( mID INT PRIMARY KEY, title TEXT, year INT, director TEXT ); Sample rows from `Movie`: (101, Gone with the Wind, 1939, Victor Fleming), (102, Star Wars, 1977, George Lucas), (103, The Sound of Music, 1965, Robert Wise), CREATE TABLE `Reviewer` ( rID INT PRIMARY KEY, name TEXT ); Sample rows from `Reviewer`: (201, Sarah Martinez), (202, Daniel Lewis), (203, Brittany Harris), CREATE TABLE `Rating` ( rID INT REFERENCES Reviewer(rID), mID INT REFERENCES Movie(mID), stars INT, ratingDate date ); Sample rows from `Rating`: (201, 101, 2, 2011-01-22), (201, 101, 4, 2011-01-27), (202, 106, 4, None), ",
        "output": "SELECT mid ,  AVG(stars) FROM rating GROUP BY mid HAVING COUNT(*)  >=  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: where is a good restaurant on buchanan in san francisco for arabic food ? ###filtered_database_schema: CREATE TABLE `GEOGRAPHIC` ( CITY_NAME TEXT PRIMARY KEY, COUNTY TEXT, REGION TEXT ); CREATE TABLE `RESTAURANT` ( ID INT PRIMARY KEY, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME), RATING REAL ); CREATE TABLE `LOCATION` ( RESTAURANT_ID INT PRIMARY KEY REFERENCES RESTAURANT(RESTAURANT_ID), HOUSE_NUMBER INT, STREET_NAME TEXT, CITY_NAME TEXT REFERENCES GEOGRAPHIC(CITY_NAME) ); ",
        "output": "SELECT t2.house_number  ,  t1.name FROM restaurant as t1 JOIN location as t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: return me the journal that has the most number of papers containing keyword \" Relational Database \" . ###filtered_database_schema: CREATE TABLE `author` ( aid INT PRIMARY KEY, homepage TEXT, name TEXT, oid INT ); CREATE TABLE `conference` ( cid INT PRIMARY KEY, homepage TEXT, name TEXT ); CREATE TABLE `domain` ( did INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_author` ( aid INT PRIMARY KEY REFERENCES author(aid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `domain_conference` ( cid INT PRIMARY KEY REFERENCES conference(cid), did INT PRIMARY KEY REFERENCES domain(did) ); CREATE TABLE `journal` ( homepage TEXT, jid INT PRIMARY KEY, name TEXT ); CREATE TABLE `domain_journal` ( did INT PRIMARY KEY REFERENCES domain(did), jid INT PRIMARY KEY REFERENCES journal(jid) ); CREATE TABLE `keyword` ( keyword TEXT, kid INT PRIMARY KEY ); CREATE TABLE `domain_keyword` ( did INT PRIMARY KEY REFERENCES domain(did), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `publication` ( abstract TEXT, cid TEXT REFERENCES conference(cid), citation_num INT, jid INT REFERENCES journal(jid), pid INT PRIMARY KEY, reference_num INT, title TEXT, year INT ); CREATE TABLE `domain_publication` ( did INT PRIMARY KEY REFERENCES domain(did), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `organization` ( continent TEXT, homepage TEXT, name TEXT, oid INT PRIMARY KEY ); CREATE TABLE `publication_keyword` ( pid INT PRIMARY KEY REFERENCES publication(pid), kid INT PRIMARY KEY REFERENCES keyword(kid) ); CREATE TABLE `writes` ( aid INT PRIMARY KEY REFERENCES author(aid), pid INT PRIMARY KEY REFERENCES publication(pid) ); CREATE TABLE `cite` ( cited INT REFERENCES publication(pid), citing INT REFERENCES publication(pid) ); ",
        "output": "SELECT t3.name FROM publication_keyword as t4 JOIN keyword as t1 ON t4.kid  =  t1.kid JOIN publication as t2 ON t2.pid  =  t4.pid JOIN journal as t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name ORDER BY COUNT(DISTINCT t2.title) DESC LIMIT 1;"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the number of accounts. ###filtered_database_schema: CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(50), customer_middle_initial VARCHAR(1), customer_last_name VARCHAR(50), gender VARCHAR(1), email_address VARCHAR(255), login_name VARCHAR(80), login_password VARCHAR(20), phone_number VARCHAR(255), town_city VARCHAR(50), state_county_province VARCHAR(50), country VARCHAR(50) ); Sample rows from `Customers`: (1, Dee, A, Larkin, 1, thora.torphy@example.org, xhartmann, 77789d292604ea04406f, 241.796.1219x37862, North Nellie, WestVirginia, USA), (2, Brennon, H, Weimann, 0, roosevelt.collier@example.org, shayne.lesch, ce97a3e4539347daab96, (943)219-4234x415, South Isabell, Oklahoma, USA), (3, Joesph, K, Schaefer, 0, homenick.ambrose@example.net, feeney.lauriane, a6c7a7064c36b038d402, (488)524-5345, New Nikolas, Arkansas, USA), CREATE TABLE `Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_order_placed DATETIME, order_details VARCHAR(255) ); Sample rows from `Orders`: (1, 12, 2012-06-27 20:49:56, None), (2, 12, 2012-08-25 07:51:54, None), (3, 8, 2017-11-05 15:32:38, None), CREATE TABLE `Invoices` ( invoice_number INTEGER, order_id INTEGER REFERENCES Orders(order_id), invoice_date DATETIME ); Sample rows from `Invoices`: (1, 9, 2018-03-01 16:40:48), (2, 9, 2018-03-20 00:21:41), (3, 3, 2018-03-05 08:47:33), CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), date_account_opened DATETIME, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 8, 2016-07-30 22:22:24, 900, Regular), (2, 3, 2017-05-29 16:45:17, 520, VIP), (3, 8, 2012-05-04 18:50:32, 323, Regular), CREATE TABLE `Product_Categories` ( production_type_code VARCHAR(15) PRIMARY KEY, product_type_description VARCHAR(80), vat_rating DECIMAL(19,4) ); Sample rows from `Product_Categories`: (Food, Food, 15.84), (DVDs, Dvd products, 11.4), (Books, Books, 13.95), CREATE TABLE `Products` ( product_id INTEGER, parent_product_id INTEGER, production_type_code VARCHAR(15) REFERENCES Product_Categories(production_type_code), unit_price DECIMAL(19,4), product_name VARCHAR(80), product_color VARCHAR(20), product_size VARCHAR(20) ); Sample rows from `Products`: (1, 4, Food, 617.95, Coffee Bean, Red, Medium), (2, 4, Books, 558.49, Learning French, Yellow, Medium), (3, 8, Electronics, 563.58, Fans, Black, Medium), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DECIMAL(19,4), transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 13, 12, Payment, 2018-03-15 21:13:57, 613.96, None, None), (2, 9, 1, Payment, 2018-03-13 13:27:46, 368.46, None, None), (3, 6, 1, Refund, 2018-03-03 01:50:25, 1598.25, None, None), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Orders(order_id), product_id INTEGER REFERENCES Products(product_id), product_quantity VARCHAR(50), other_order_item_details VARCHAR(255) ); Sample rows from `Order_Items`: (1, 4, 4, 6, None), (2, 4, 10, 7, None), (3, 15, 5, 4, None), CREATE TABLE `Invoice_Line_Items` ( order_item_id INTEGER REFERENCES Order_Items(order_item_id), invoice_number INTEGER REFERENCES Invoices(invoice_number), product_id INTEGER REFERENCES Products(product_id), product_title VARCHAR(80), product_quantity VARCHAR(50), product_price DECIMAL(19,4), derived_product_cost DECIMAL(19,4), derived_vat_payable DECIMAL(19,4), derived_total_cost DECIMAL(19,4) ); Sample rows from `Invoice_Line_Items`: (14, 9, 5, prod_name, 4, 742.37, 191.11, None, 69.82), (3, 9, 15, prod_name, 1, 814.87, 176.29, None, 59.56), (4, 10, 15, prod_name, 8, 943.07, 73.14, None, 59.93), ",
        "output": "SELECT COUNT(*) FROM accounts"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the wines that have prices lower than 50 and have appelations in Monterey county? ###filtered_database_schema: CREATE TABLE `grapes` ( ID INTEGER, Grape TEXT PRIMARY KEY, Color TEXT ); Sample rows from `grapes`: (1, Barbera, Red), (2, Cabernet Franc, Red), (3, Cabernet Sauvingnon, Red), CREATE TABLE `appellations` ( No INTEGER, Appelation TEXT PRIMARY KEY, County TEXT, State TEXT, Area TEXT, isAVA TEXT ); Sample rows from `appellations`: (1, Alexander Valley, Sonoma, California, North Coast, Yes), (2, Amador County, Amador, California, Sierra Foothills, No), (3, Amador-Mendocino-Sonoma Counties, N/A, California, N/A, No), CREATE TABLE `wine` ( No INTEGER, Grape TEXT REFERENCES grapes(Grape), Winery TEXT, Appelation TEXT REFERENCES appellations(Appelation), State TEXT, Name TEXT, Year INTEGER, Price INTEGER, Score INTEGER, Cases INTEGER, Drink TEXT ); Sample rows from `wine`: (1, Zinfandel, Robert Biale, St. Helena, California, Old Kraft Vineyard, 2008, 44, 93, 275, now), (2, Zinfandel, Chiarello Family, Napa Valley, California, Giana, 2008, 35, 93, 480, now), (3, Zinfandel, Robert Biale, Napa Valley, California, Black Chicken, 2008, 40, 91, 2700, 2012), ",
        "output": "SELECT t2.name FROM appellations as t1 JOIN wine as t2 ON t1.appelation  =  t2.appelation WHERE t1.county  =  \"Monterey\" AND t2.price  <  50"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Give the songs included in volumes that have more than 1 week on top. ###filtered_database_schema: CREATE TABLE `artist` ( Artist_ID INT PRIMARY KEY, Artist TEXT, Age INT, Famous_Title TEXT, Famous_Release_date TEXT ); Sample rows from `artist`: (1, Gorgoroth, 34, Bergen 1996, November 2007), (2, Ophiolatry, 35, Transmutation, January 21, 2008), (3, Ophiolatry, 22, Antievangelistical Process (re-release), 2009), CREATE TABLE `volume` ( Volume_ID INT PRIMARY KEY, Volume_Issue TEXT, Issue_Date TEXT, Weeks_on_Top REAL, Song TEXT, Artist_ID INT REFERENCES artist(Artist_ID) ); Sample rows from `volume`: (1, 45:14 §, 27 December 1986 - 10 January, 3.0, The Way, 1), (2, 45:15, 17 January, 1.0, Everybody Have Fun Tonight , 2), (3, 45:16, 24 January, 1.0, Walk Like an Egyptian , 1), CREATE TABLE `music_festival` ( ID INT PRIMARY KEY, Music_Festival TEXT, Date_of_ceremony TEXT, Category TEXT, Volume INT REFERENCES volume(Volume_ID), Result TEXT ); Sample rows from `music_festival`: (1, 34th England Academy Prize, 18 February 2011, Best Song, 1, Nominated), (2, 34th Japan Academy Prize, 18 February 2011, Best Lyrics, 2, Nominated), (3, 34th European Academy Prize, 18 February 2011, Best Song, 3, Awarded), ",
        "output": "SELECT song FROM volume WHERE weeks_on_top  >  1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the first name, last name, and phone of the customer with account name 162? ###filtered_database_schema: CREATE TABLE `Accounts` ( account_id INTEGER, customer_id INTEGER, account_name VARCHAR(50), other_account_details VARCHAR(255) ); Sample rows from `Accounts`: (1, 6, 338, Regular), (2, 14, 562, VIP), (3, 9, 162, VIP), CREATE TABLE `Customers` ( customer_id INTEGER, customer_first_name VARCHAR(20), customer_last_name VARCHAR(20), customer_address VARCHAR(255), customer_phone VARCHAR(255), customer_email VARCHAR(255), other_customer_details VARCHAR(255) ); Sample rows from `Customers`: (1, Aniyah, Feest, 55975 Theodore Estates Lake Brody, VT 57078, (673)872-5338, fahey.dorian@example.com, None), (2, Susie, Wiza, 6478 Moen Isle Suite 910 Schimmelmouth, VT 96364-4898, 679-845-8645x94312, idickinson@example.com, None), (3, Marcel, Brekke, 1965 Abernathy Plains Port Lilla, LA 44867, 1-511-656-6664, nichole.rodriguez@example.com, None), CREATE TABLE `Customers_Cards` ( card_id INTEGER, customer_id INTEGER, card_type_code VARCHAR(15), card_number VARCHAR(80), date_valid_from DATETIME, date_valid_to DATETIME, other_card_details VARCHAR(255) ); Sample rows from `Customers_Cards`: (1, 14, Credit, 4560596484842, 2011-04-17 09:05:28, 2018-03-07 17:06:19, 5567915676420343), (2, 9, Credit, 4859448397570735, 2012-05-22 02:05:41, 2018-02-25 15:43:32, 4539333582760), (3, 6, Debit, 348237249146948, 2014-08-01 14:26:45, 2018-03-24 15:29:00, 4916210554814), CREATE TABLE `Financial_Transactions` ( transaction_id INTEGER, previous_transaction_id INTEGER, account_id INTEGER REFERENCES Accounts(account_id), card_id INTEGER REFERENCES Customers_Cards(card_id), transaction_type VARCHAR(15), transaction_date DATETIME, transaction_amount DOUBLE, transaction_comment VARCHAR(255), other_transaction_details VARCHAR(255) ); Sample rows from `Financial_Transactions`: (1, 925, 15, 1, Payment, 2018-03-24 06:41:41, 1701.23, None, None), (2, 494, 3, 2, Refund, 2018-03-24 12:08:55, 1931.76, None, None), (3, 642, 4, 3, Payment, 2018-03-24 09:08:27, 486.56, None, None), ",
        "output": "SELECT t2.customer_first_name ,  t2.customer_last_name ,  t2.customer_phone FROM accounts as t1 JOIN customers as t2 ON t1.customer_id  =  t2.customer_id WHERE t1.account_name  =  \"162\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of scientists who are not working on the project with the most hours? ###filtered_database_schema: CREATE TABLE `Scientists` ( SSN INT PRIMARY KEY, Name Char(30) ); Sample rows from `Scientists`: (123234877, Michael Rogers), (152934485, Anand Manikutty), (222364883, Carol Smith), CREATE TABLE `Projects` ( Code Char(4) PRIMARY KEY, Name Char(50), Hours INT ); Sample rows from `Projects`: (AeH1, Winds: Studying Bernoullis Principle, 156), (AeH2, Aerodynamics and Bridge Design, 189), (AeH3, Aerodynamics and Gas Mileage, 256), CREATE TABLE `AssignedTo` ( Scientist INT PRIMARY KEY REFERENCES Scientists(SSN), Project char(4) PRIMARY KEY REFERENCES Projects(Code) ); Sample rows from `AssignedTo`: (123234877, AeH1), (152934485, AeH3), (222364883, Ast3), ",
        "output": "SELECT name FROM scientists EXCEPT SELECT t3.name FROM assignedto as t1 JOIN projects as t2 ON t1.project  =  t2.code JOIN scientists as t3 ON t1.scientist  =  t3.ssn WHERE t2.hours  =  (SELECT MAX(hours) FROM projects)"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the name of rooms that cost more than the average. ###filtered_database_schema: CREATE TABLE `Rooms` ( RoomId TEXT PRIMARY KEY, roomName TEXT, beds INTEGER, bedType TEXT, maxOccupancy INTEGER, basePrice INTEGER, decor TEXT ); Sample rows from `Rooms`: (RND, Recluse and defiance, 1, King, 2, 150, modern), (IBS, Interim but salutary, 1, King, 2, 150, traditional), (AOB, Abscond or bolster, 2, Queen, 4, 175, traditional), CREATE TABLE `Reservations` ( Code INTEGER, Room TEXT REFERENCES Rooms(RoomId), CheckIn TEXT, CheckOut TEXT, Rate REAL, LastName TEXT, FirstName TEXT, Adults INTEGER, Kids INTEGER ); Sample rows from `Reservations`: (10105, HBB, 23-OCT-10, 25-OCT-10, 100.0, SELBIG, CONRAD, 1, 0), (10183, IBD, 19-SEP-10, 20-SEP-10, 150.0, GABLER, DOLLIE, 2, 0), (10449, RND, 30-SEP-10, 01-OCT-10, 150.0, KLESS, NELSON, 1, 0), ",
        "output": "SELECT roomname FROM rooms WHERE baseprice  >  ( SELECT AVG(baseprice) FROM rooms );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the names of members and the dates of performances they attended in descending order of attendance of the performances. ###filtered_database_schema: CREATE TABLE `member` ( Member_ID TEXT PRIMARY KEY, Name TEXT, Nationality TEXT, Role TEXT ); Sample rows from `member`: (1, Wilfredo Ruiz, Uruguay, Prime Violin), (2, Luis González, Argentina, Violin), (3, Héctor Campana, Argentina, Violin), CREATE TABLE `performance` ( Performance_ID REAL PRIMARY KEY, Date TEXT, Host TEXT, Location TEXT, Attendance INT ); Sample rows from `performance`: (1.0, February 2, Boston Bruins, TD Garden, 165), (2.0, February 4, New York Rangers, Madison Square Garden, 1820), (3.0, February 5, Atlanta Thrashers, Verizon Center, 1878), CREATE TABLE `member_attendance` ( Member_ID INT PRIMARY KEY REFERENCES member(Member_ID), Performance_ID INT PRIMARY KEY REFERENCES performance(Performance_ID), Num_of_Pieces INT ); Sample rows from `member_attendance`: (11, 3, 2), (7, 2, 3), (4, 6, 4), ",
        "output": "SELECT t2.name ,  t3.date FROM member_attendance as t1 JOIN member as t2 ON t1.member_id  =  t2.member_id JOIN performance as t3 ON t1.performance_id  =  t3.performance_id ORDER BY t3.attendance DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the company name and the main industry for all companies whose headquarters are not from USA. ###filtered_database_schema: CREATE TABLE `company` ( Company_ID INT PRIMARY KEY, Rank INT, Company TEXT, Headquarters TEXT, Main_Industry TEXT, Sales_billion REAL, Profits_billion REAL, Assets_billion REAL, Market_Value REAL ); Sample rows from `company`: (1, 1, ExxonMobil, USA, Oil and gas, 433.5, 41.1, 331.1, 407.4), (2, 3, General Electric, USA, Conglomerate, 147.3, 14.2, 717.2, 213.7), (3, 4, Royal Dutch Shell, Netherlands, Oil and gas, 470.2, 30.9, 340.5, 227.6), CREATE TABLE `gas_station` ( Station_ID INT PRIMARY KEY, Open_Year INT, Location TEXT, Manager_Name TEXT, Vice_Manager_Name TEXT, Representative_Name TEXT ); Sample rows from `gas_station`: (1, 1998, Herne Hill, BrianWingrave, Russell Denman, Clive Burr), (2, 1999, Channel Hill, SimonMarloe, Russell Brown, Rob Jefferies ), (3, 2000, Reading North, Simon Cope Derek Marloe, James Colin , Dave Edwards Roger ), CREATE TABLE `station_company` ( Station_ID INT PRIMARY KEY REFERENCES gas_station(Station_ID), Company_ID INT PRIMARY KEY REFERENCES company(Company_ID), Rank_of_the_Year INT ); Sample rows from `station_company`: (11, 1, 1), (1, 3, 2), (6, 6, 3), ",
        "output": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what capital is the largest in the us ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX(t1.population) FROM state as t2 JOIN city as t1 ON t2.capital  =  t1.city_name );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List the race class with at least two races. ###filtered_database_schema: CREATE TABLE `race` ( Race_ID INT PRIMARY KEY, Name TEXT, Class TEXT, Date TEXT, Track_ID TEXT REFERENCES track(Track_ID) ); Sample rows from `race`: (1, Rolex 24 At Daytona, DP/GT, January 26 January 27, 1), (2, Gainsco Grand Prix of Miami, DP/GT, March 29, 2), (3, Mexico City 250, DP/GT, April 19, 2), CREATE TABLE `track` ( Track_ID INT PRIMARY KEY, Name TEXT, Location TEXT, Seating REAL, Year_Opened REAL ); Sample rows from `track`: (1, Auto Club Speedway, Fontana, CA, 92000.0, 1997.0), (2, Chicagoland Speedway, Joliet, IL, 75000.0, 2001.0), (3, Darlington Raceway, Darlington, SC, 63000.0, 1950.0), ",
        "output": "SELECT class FROM race GROUP BY class HAVING COUNT(*)  >=  2"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of different music genres? ###filtered_database_schema: CREATE TABLE `Album` ( AlbumId INTEGER, Title varchar(160), ArtistId INTEGER PRIMARY KEY REFERENCES Artist(ArtistId) ); Sample rows from `Album`: (1, For Those About To Rock We Salute You, 1), (2, Balls to the Wall, 2), (3, Restless and Wild, 2), CREATE TABLE `Artist` ( ArtistId INTEGER, Name varchar(120) ); Sample rows from `Artist`: (1, AC/DC), (2, Accept), (3, Aerosmith), CREATE TABLE `Customer` ( CustomerId INTEGER, FirstName varchar(40), LastName varchar(20), Company varchar(80), Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60), SupportRepId INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId) ); Sample rows from `Customer`: (1, Luís, Gonçalves, Embraer - Empresa Brasileira de Aeronáutica S.A., Av. Brigadeiro Faria Lima, 2170, São José dos Campos, SP, Brazil, 12227-000, +55 (12) 3923-5555, +55 (12) 3923-5566, luisg@embraer.com.br, 3), (2, Leonie, Köhler, None, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, +49 0711 2842222, None, leonekohler@surfeu.de, 5), (3, François, Tremblay, None, 1498 rue Bélanger, Montréal, QC, Canada, H2G 1A7, +1 (514) 721-4711, None, ftremblay@gmail.com, 3), CREATE TABLE `Employee` ( EmployeeId INTEGER, LastName varchar(20), FirstName varchar(20), Title varchar(30), ReportsTo INTEGER PRIMARY KEY REFERENCES Employee(EmployeeId), BirthDate datetime, HireDate datetime, Address varchar(70), City varchar(40), State varchar(40), Country varchar(40), PostalCode varchar(10), Phone varchar(24), Fax varchar(24), Email varchar(60) ); Sample rows from `Employee`: (1, Adams, Andrew, General Manager, None, 1962-02-18 00:00:00, 2002-08-14 00:00:00, 11120 Jasper Ave NW, Edmonton, AB, Canada, T5K 2N1, +1 (780) 428-9482, +1 (780) 428-3457, andrew@chinookcorp.com), (2, Edwards, Nancy, Sales Manager, 1, 1958-12-08 00:00:00, 2002-05-01 00:00:00, 825 8 Ave SW, Calgary, AB, Canada, T2P 2T3, +1 (403) 262-3443, +1 (403) 262-3322, nancy@chinookcorp.com), (3, Peacock, Jane, Sales Support Agent, 2, 1973-08-29 00:00:00, 2002-04-01 00:00:00, 1111 6 Ave SW, Calgary, AB, Canada, T2P 5M5, +1 (403) 262-3443, +1 (403) 262-6712, jane@chinookcorp.com), CREATE TABLE `Genre` ( GenreId INTEGER, Name varchar(120) ); Sample rows from `Genre`: (1, Rock), (2, Jazz), (3, Metal), CREATE TABLE `Invoice` ( InvoiceId INTEGER, CustomerId INTEGER PRIMARY KEY REFERENCES Customer(CustomerId), InvoiceDate datetime, BillingAddress varchar(70), BillingCity varchar(40), BillingState varchar(40), BillingCountry varchar(40), BillingPostalCode varchar(10), Total decimal(10,2) ); Sample rows from `Invoice`: (1, 2, 2009-01-01 00:00:00, Theodor-Heuss-Straße 34, Stuttgart, None, Germany, 70174, 1.98), (2, 4, 2009-01-02 00:00:00, Ullevålsveien 14, Oslo, None, Norway, 0171, 3.96), (3, 8, 2009-01-03 00:00:00, Grétrystraat 63, Brussels, None, Belgium, 1000, 5.94), CREATE TABLE `InvoiceLine` ( InvoiceLineId INTEGER, InvoiceId INTEGER PRIMARY KEY REFERENCES Invoice(InvoiceId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId), UnitPrice decimal(10,2), Quantity INTEGER ); Sample rows from `InvoiceLine`: (1, 1, 2, 0.99, 1), (2, 1, 4, 0.99, 1), (3, 2, 6, 0.99, 1), CREATE TABLE `MediaType` ( MediaTypeId INTEGER, Name varchar(120) ); Sample rows from `MediaType`: (1, MPEG audio file), (2, Protected AAC audio file), (3, Protected MPEG-4 video file), CREATE TABLE `Playlist` ( PlaylistId INTEGER, Name varchar(120) ); Sample rows from `Playlist`: (1, Music), (2, Movies), (3, TV Shows), CREATE TABLE `PlaylistTrack` ( PlaylistId INTEGER PRIMARY KEY REFERENCES Playlist(PlaylistId), TrackId INTEGER PRIMARY KEY REFERENCES Track(TrackId) ); Sample rows from `PlaylistTrack`: (1, 1), (8, 1), (17, 1), CREATE TABLE `Track` ( TrackId INTEGER, Name varchar(200), AlbumId INTEGER PRIMARY KEY REFERENCES Album(AlbumId), MediaTypeId INTEGER PRIMARY KEY REFERENCES MediaType(MediaTypeId), GenreId INTEGER PRIMARY KEY REFERENCES Genre(GenreId), Composer varchar(220), Milliseconds INTEGER, Bytes INTEGER, UnitPrice decimal(10,2) ); Sample rows from `Track`: (1, For Those About To Rock (We Salute You), 1, 1, 1, Angus Young, Malcolm Young, Brian Johnson, 343719, 11170334, 0.99), (2, Balls to the Wall, 2, 2, 1, None, 342562, 5510424, 0.99), (3, Fast As a Shark, 3, 2, 1, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman, 230619, 3990994, 0.99), ",
        "output": "SELECT name FROM genre"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Show the name and the nationality of the oldest host. ###filtered_database_schema: CREATE TABLE `party` ( Party_ID INT PRIMARY KEY, Party_Theme TEXT, Location TEXT, First_year TEXT, Last_year TEXT, Number_of_hosts INT ); Sample rows from `party`: (1, Spring, Hemkade 48 Zaandam, 2000, 2001, 5), (2, Club Q-BASE, Hemkade 48 Zaandam, 2002, 2002, 23), (3, Hardcore Resurrection, Various locations, 2000, 2003, 4), CREATE TABLE `host` ( Host_ID INT PRIMARY KEY, Name TEXT, Nationality TEXT, Age TEXT ); Sample rows from `host`: (1, Austin Daye, United States, 43), (2, Lloyd Daniels, United States, 37), (3, Kornel David, Hungary, 31), CREATE TABLE `party_host` ( Party_ID INT PRIMARY KEY REFERENCES party(Party_ID), Host_ID INT PRIMARY KEY REFERENCES host(Host_ID), Is_Main_in_Charge bool ); Sample rows from `party_host`: (1, 1, T), (8, 7, T), (6, 10, F), ",
        "output": "SELECT name ,  nationality FROM host ORDER BY age DESC LIMIT 1"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many female Professors do we have? ###filtered_database_schema: CREATE TABLE `Activity` ( actid INTEGER, activity_name varchar(25) ); Sample rows from `Activity`: (770, Mountain Climbing), (771, Canoeing), (772, Kayaking), CREATE TABLE `Participates_in` ( stuid INTEGER REFERENCES Student(StuID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Participates_in`: (1001, 770), (1001, 771), (1001, 777), CREATE TABLE `Faculty_Participates_in` ( FacID INTEGER REFERENCES Faculty(FacID), actid INTEGER REFERENCES Activity(actid) ); Sample rows from `Faculty_Participates_in`: (1082, 784), (1082, 785), (1082, 790), CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), ",
        "output": "SELECT COUNT(*) fROM faculty WHERE sex  =  'f' AND rank  =  \"Professor\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the first names of all students in course ACCT-211? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT t3.stu_fname FROM class as t1 JOIN enroll as t2 ON t1.class_code  =  t2.class_code JOIN student as t3 ON t2.stu_num  =  t3.stu_num WHERE t1.crs_code  =  'ACCT-211'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of all females who are friends with Zach? ###filtered_database_schema: CREATE TABLE `Person` ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT ); Sample rows from `Person`: (Alice, 25, new york city, female, student), (Bob, 35, salt lake city, male, engineer), (Zach, 45, austin, male, doctor), CREATE TABLE `PersonFriend` ( name varchar(20) REFERENCES Person(name), friend varchar(20) REFERENCES Person(name), year INTEGER ); Sample rows from `PersonFriend`: (Alice, Bob, 10), (Zach, Dan, 12), (Bob, Zach, 5), ",
        "output": "SELECT t1.name FROM person as t1 JOIN personFriend as t2 ON t1.name  =  t2.name WHERE t2.friend  =  'Zach' AND t1.gender  =  'female'"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: Find the first name and last name of the instructor of course that has course name ###filtered_database_schema: CREATE TABLE `Student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `Student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones, Shiela, 21, F, 600, 7792, WAS), CREATE TABLE `Faculty` ( FacID INTEGER, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) ); Sample rows from `Faculty`: (1082, Giuliano, Mark, Instructor, M, 2424, 224, NEB), (1121, Goodrich, Michael, Professor, M, 3593, 219, NEB), (1148, Masson, Gerald, Professor, M, 3402, 224B, NEB), CREATE TABLE `Department` ( DNO INTEGER, Division VARCHAR(2), DName VARCHAR(25), Room VARCHAR(5), Building VARCHAR(13), DPhone INTEGER ); Sample rows from `Department`: (10, AS, History of Art, 268, Mergenthaler, 7117), (20, AS, Biology, 144, Mudd, 7330), (30, AS, Chemistry, 113, Remsen, 7429), CREATE TABLE `Member_of` ( FacID INTEGER REFERENCES Faculty(FacID), DNO INTEGER REFERENCES Department(DNO), Appt_Type VARCHAR(15) ); Sample rows from `Member_of`: (7792, 600, Primary), (9210, 520, Primary), (9811, 550, Primary), CREATE TABLE `Course` ( CID VARCHAR(7) PRIMARY KEY, CName VARCHAR(40), Credits INTEGER, Instructor INTEGER REFERENCES Faculty(FacID), Days VARCHAR(5), Hours VARCHAR(11), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Course`: (600.101, COMPUTER LITERACY, 3, 6112, MTW, 3, 600), (600.103, INTRODUCTION TO COMPUTER SCIENCE, 1, 4230, Th, 4, 600), (600.107, INTRO TO PROGRAMMING IN JAVA, 3, 1193, MTW, 3, 600), CREATE TABLE `Minor_in` ( StuID INTEGER REFERENCES Student(StuID), DNO INTEGER REFERENCES Department(DNO) ); Sample rows from `Minor_in`: (1004, 520), (1005, 550), (1006, 50), CREATE TABLE `Enrolled_in` ( StuID INTEGER REFERENCES Student(StuID), CID VARCHAR(7) REFERENCES Course(CID), Grade VARCHAR(2) REFERENCES Gradeconversion(lettergrade) ); Sample rows from `Enrolled_in`: (1001, 550.681, A-), (1001, 600.303, B), (1001, 600.315, B+), CREATE TABLE `Gradeconversion` ( lettergrade VARCHAR(2) PRIMARY KEY, gradepoint FLOAT ); Sample rows from `Gradeconversion`: (A+, 4.0), (A, 4.0), (A-, 3.7), ",
        "output": "SELECT t2.fname ,  t2.lname FROM course as t1 JOIN faculty as t2 ON t1.instructor  =  t2.facid WHERE t1.cname  =  \"COMPUTER LITERACY\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the maximum and minimum sales of the companies whose industries are not \"Banking\". ###filtered_database_schema: CREATE TABLE `buildings` ( id INT PRIMARY KEY, name TEXT, City TEXT, Height INT, Stories INT, Status TEXT ); Sample rows from `buildings`: (1, Torre KOI, Monterrey, 220, 67, under construction), (2, Torre Mitikah, Mexico City, 210, 60, under construction), (3, Punto Chapultepec, Mexico City, 210, 59, proposed), CREATE TABLE `Companies` ( id INT PRIMARY KEY, name TEXT, Headquarters TEXT, Industry TEXT, Sales_billion REAL, Profits_billion REAL, Assets_billion REAL, Market_Value_billion TEXT ); Sample rows from `Companies`: (1, JPMorgan Chase, USA, Banking, 115.5, 17.4, 2117.6, 182.2), (2, HSBC, UK, Banking, 103.3, 13.3, 2467.9, 186.5), (3, General Electric, USA, Conglomerate, 156.2, 11.6, 751.2, 216.2), CREATE TABLE `Office_locations` ( building_id INT PRIMARY KEY REFERENCES buildings(id), company_id INT PRIMARY KEY REFERENCES Companies(id), move_in_year INT ); Sample rows from `Office_locations`: (1, 1, 2021), (2, 2, 2022), (3, 4, 2023), ",
        "output": "SELECT MAX(sales_billion) ,  MIN(sales_billion) FROM companies WHERE industry != \"Banking\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the number of airports per country, ordered from most to least? ###filtered_database_schema: CREATE TABLE `routes` ( rid INTEGER, dst_apid INTEGER REFERENCES airports(apid), dst_ap varchar(4), src_apid bigint REFERENCES airports(apid), src_ap varchar(4), alid bigint REFERENCES airlines(alid), airline varchar(4), codeshare TEXT ); Sample rows from `routes`: (37, 2990, KZ, 2965, AER, 410, 2B, None), (38, 2990, KZ, 2966, ASF, 410, 2B, None), (39, 2962, MRV, 2966, ASF, 410, 2B, None), CREATE TABLE `airports` ( apid INTEGER, name TEXT, city TEXT, country TEXT, x REAL, y REAL, elevation bigint, iata character varchar(3), icao character varchar(4) ); Sample rows from `airports`: (1, Goroka Airport, Goroka, Papua New Guinea, 145.391998291, -6.081689834590001, 5282, GKA, AYGA), (2, Madang Airport, Madang, Papua New Guinea, 145.789001465, -5.20707988739, 20, MAG, AYMD), (3, Mount Hagen Kagamuga Airport, Mount Hagen, Papua New Guinea, 144.29600524902344, -5.826789855957031, 5388, HGU, AYMH), CREATE TABLE `airlines` ( alid INTEGER, name TEXT, iata varchar(2), icao varchar(3), callsign TEXT, country TEXT, active varchar(2) ); Sample rows from `airlines`: (-1, Unknown, -, N/A, None, None, Y), (1, Private flight, -, N/A, , , Y), (2, 135 Airways, , GNL, GENERAL, United States, N), ",
        "output": "SELECT COUNT(*) ,  country FROM airports GROUP BY country ORDER BY COUNT(*) DESC"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: List all of the ids for left-footed players with a height between 180cm and 190cm. ###filtered_database_schema: CREATE TABLE `Player_Attributes` ( id INTEGER, player_fifa_api_id INTEGER REFERENCES Player(player_fifa_api_id), player_api_id INTEGER REFERENCES Player(player_api_id), date TEXT, overall_rating INTEGER, potential INTEGER, preferred_foot TEXT, attacking_work_rate TEXT, defensive_work_rate TEXT, crossing INTEGER, finishing INTEGER, heading_accuracy INTEGER, short_passing INTEGER, volleys INTEGER, dribbling INTEGER, curve INTEGER, free_kick_accuracy INTEGER, long_passing INTEGER, ball_control INTEGER, acceleration INTEGER, sprint_speed INTEGER, agility INTEGER, reactions INTEGER, balance INTEGER, shot_power INTEGER, jumping INTEGER, stamina INTEGER, strength INTEGER, long_shots INTEGER, aggression INTEGER, interceptions INTEGER, positioning INTEGER, vision INTEGER, penalties INTEGER, marking INTEGER, standing_tackle INTEGER, sliding_tackle INTEGER, gk_diving INTEGER, gk_handling INTEGER, gk_kicking INTEGER, gk_positioning INTEGER, gk_reflexes INTEGER ); Sample rows from `Player_Attributes`: (1, 218353, 505942, 2016-02-18 00:00:00, 67, 71, right, medium, medium, 49, 44, 71, 61, 44, 51, 45, 39, 64, 49, 60, 64, 59, 47, 65, 55, 58, 54, 76, 35, 71, 70, 45, 54, 48, 65, 69, 69, 6, 11, 10, 8, 8), (2, 218353, 505942, 2015-11-19 00:00:00, 67, 71, right, medium, medium, 49, 44, 71, 61, 44, 51, 45, 39, 64, 49, 60, 64, 59, 47, 65, 55, 58, 54, 76, 35, 71, 70, 45, 54, 48, 65, 69, 69, 6, 11, 10, 8, 8), (3, 218353, 505942, 2015-09-21 00:00:00, 62, 66, right, medium, medium, 49, 44, 71, 61, 44, 51, 45, 39, 64, 49, 60, 64, 59, 47, 65, 55, 58, 54, 76, 35, 63, 41, 45, 54, 48, 65, 66, 69, 6, 11, 10, 8, 8), CREATE TABLE `sqlite_sequence` ( name , seq ); Sample rows from `sqlite_sequence`: (Team, 103916), (Country, 51958), (League, 51958), CREATE TABLE `Player` ( id INTEGER, player_api_id INTEGER PRIMARY KEY, player_name TEXT, player_fifa_api_id INTEGER PRIMARY KEY, birthday TEXT, height INTEGER, weight INTEGER ); Sample rows from `Player`: (1, 505942, Aaron Appindangoye, 218353, 1992-02-29 00:00:00, 182.88, 187), (2, 155782, Aaron Cresswell, 189615, 1989-12-15 00:00:00, 170.18, 146), (3, 162549, Aaron Doran, 186170, 1991-05-13 00:00:00, 170.18, 163), CREATE TABLE `League` ( id INTEGER, country_id INTEGER REFERENCES Country(id), name TEXT PRIMARY KEY ); Sample rows from `League`: (1, 1, Belgium Jupiler League), (1729, 1729, England Premier League), (4769, 4769, France Ligue 1), CREATE TABLE `Country` ( id INTEGER, name TEXT PRIMARY KEY ); Sample rows from `Country`: (1, Belgium), (1729, England), (4769, France), CREATE TABLE `Team` ( id INTEGER, team_api_id INTEGER PRIMARY KEY, team_fifa_api_id INTEGER, team_long_name TEXT, team_short_name TEXT ); Sample rows from `Team`: (1, 9987, 673, KRC Genk, GEN), (2, 9993, 675, Beerschot AC, BAC), (3, 10000, 15005, SV Zulte-Waregem, ZUL), CREATE TABLE `Team_Attributes` ( id INTEGER, team_fifa_api_id INTEGER REFERENCES Team(team_fifa_api_id), team_api_id INTEGER REFERENCES Team(team_api_id), date TEXT, buildUpPlaySpeed INTEGER, buildUpPlaySpeedClass TEXT, buildUpPlayDribbling INTEGER, buildUpPlayDribblingClass TEXT, buildUpPlayPassing INTEGER, buildUpPlayPassingClass TEXT, buildUpPlayPositioningClass TEXT, chanceCreationPassing INTEGER, chanceCreationPassingClass TEXT, chanceCreationCrossing INTEGER, chanceCreationCrossingClass TEXT, chanceCreationShooting INTEGER, chanceCreationShootingClass TEXT, chanceCreationPositioningClass TEXT, defencePressure INTEGER, defencePressureClass TEXT, defenceAggression INTEGER, defenceAggressionClass TEXT, defenceTeamWidth INTEGER, defenceTeamWidthClass TEXT, defenceDefenderLineClass TEXT ); Sample rows from `Team_Attributes`: (1, 434, 9930, 2010-02-22 00:00:00, 60, Balanced, None, Little, 50, Mixed, Organised, 60, Normal, 65, Normal, 55, Normal, Organised, 50, Medium, 55, Press, 45, Normal, Cover), (2, 434, 9930, 2014-09-19 00:00:00, 52, Balanced, 48, Normal, 56, Mixed, Organised, 54, Normal, 63, Normal, 64, Normal, Organised, 47, Medium, 44, Press, 54, Normal, Cover), (3, 434, 9930, 2015-09-10 00:00:00, 47, Balanced, 41, Normal, 54, Mixed, Organised, 54, Normal, 63, Normal, 64, Normal, Organised, 47, Medium, 44, Press, 54, Normal, Cover), ",
        "output": "SELECT player_api_id FROM player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM player_Attributes WHERE preferred_foot  =  \"left\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ? ###filtered_database_schema: CREATE TABLE `circuits` ( circuitId INTEGER, circuitRef TEXT, name TEXT, location TEXT, country TEXT, lat REAL, lng REAL, alt TEXT, url TEXT ); Sample rows from `circuits`: (1, albert_park, Albert Park Grand Prix Circuit, Melbourne, Australia, -37.8497, 144.968, 10, http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit), (2, sepang, Sepang International Circuit, Kuala Lumpur, Malaysia, 2.76083, 101.738, , http://en.wikipedia.org/wiki/Sepang_International_Circuit), (3, bahrain, Bahrain International Circuit, Sakhir, Bahrain, 26.0325, 50.5106, , http://en.wikipedia.org/wiki/Bahrain_International_Circuit), CREATE TABLE `races` ( raceId INTEGER, year INTEGER, round INTEGER, circuitId INTEGER REFERENCES circuits(circuitId), name TEXT, date TEXT, time TEXT, url TEXT ); Sample rows from `races`: (1, 2009, 1, 1, Australian Grand Prix, 2009-03-29, 06:00:00, http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix), (2, 2009, 2, 2, Malaysian Grand Prix, 2009-04-05, 09:00:00, http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix), (3, 2009, 3, 17, Chinese Grand Prix, 2009-04-19, 07:00:00, http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix), CREATE TABLE `drivers` ( driverId INTEGER, driverRef TEXT, number TEXT, code TEXT, forename TEXT, surname TEXT, dob TEXT, nationality TEXT, url TEXT ); Sample rows from `drivers`: (1, hamilton, 44, HAM, Lewis, Hamilton, 07/01/1985, British, http://en.wikipedia.org/wiki/Lewis_Hamilton), (2, heidfeld, , HEI, Nick, Heidfeld, 10/05/1977, German, http://en.wikipedia.org/wiki/Nick_Heidfeld), (3, rosberg, 6, ROS, Nico, Rosberg, 27/06/1985, German, http://en.wikipedia.org/wiki/Nico_Rosberg), CREATE TABLE `status` ( statusId INTEGER, status TEXT ); Sample rows from `status`: (1, Finished), (2, Disqualified), (3, Accident), CREATE TABLE `seasons` ( year INTEGER, url TEXT ); Sample rows from `seasons`: (1950, http://en.wikipedia.org/wiki/1950_Formula_One_season), (1951, http://en.wikipedia.org/wiki/1951_Formula_One_season), (1952, http://en.wikipedia.org/wiki/1952_Formula_One_season), CREATE TABLE `constructors` ( constructorId INTEGER, constructorRef TEXT, name TEXT, nationality TEXT, url TEXT ); Sample rows from `constructors`: (1, mclaren, McLaren, British, http://en.wikipedia.org/wiki/McLaren), (2, bmw_sauber, BMW Sauber, German, http://en.wikipedia.org/wiki/BMW_Sauber), (3, williams, Williams, British, http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering), CREATE TABLE `constructorStandings` ( constructorStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `constructorStandings`: (1, 18, 1, 14.0, 1, 1, 1), (2, 18, 2, 8.0, 3, 3, 0), (3, 18, 3, 9.0, 2, 2, 0), CREATE TABLE `results` ( resultId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, grid INTEGER, position TEXT, positionText TEXT, positionOrder INTEGER, points REAL, laps TEXT, time TEXT, milliseconds TEXT, fastestLap TEXT, rank TEXT, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId INTEGER ); Sample rows from `results`: (1, 18, 1, 1, 22, 1, 1, 1, 1, 10.0, 58, 34:50.6, 5690616, 39, 2, 01:27.5, 218.3, 1), (2, 18, 2, 2, 3, 5, 2, 2, 2, 8.0, 58, 5.478, 5696094, 41, 3, 01:27.7, 217.586, 1), (3, 18, 3, 3, 7, 7, 3, 3, 3, 6.0, 58, 8.163, 5698779, 41, 5, 01:28.1, 216.719, 1), CREATE TABLE `driverStandings` ( driverStandingsId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), points REAL, position INTEGER, positionText TEXT, wins INTEGER ); Sample rows from `driverStandings`: (1, 18, 1, 10.0, 1, 1, 1), (2, 18, 2, 8.0, 2, 2, 0), (3, 18, 3, 6.0, 3, 3, 0), CREATE TABLE `constructorResults` ( constructorResultsId INTEGER, raceId INTEGER REFERENCES races(raceId), constructorId INTEGER REFERENCES constructors(constructorId), points REAL, status TEXT ); Sample rows from `constructorResults`: (1, 18, 1, 14.0, NULL), (2, 18, 2, 8.0, NULL), (3, 18, 3, 9.0, NULL), CREATE TABLE `qualifying` ( qualifyId INTEGER, raceId INTEGER REFERENCES races(raceId), driverId INTEGER REFERENCES drivers(driverId), constructorId INTEGER REFERENCES constructors(constructorId), number INTEGER, position INTEGER, q1 TEXT, q2 TEXT, q3 TEXT ); Sample rows from `qualifying`: (1, 18, 1, 1, 22, 1, 1:26.572, 1:25.187, 1:26.714), (2, 18, 9, 2, 4, 2, 1:26.103, 1:25.315, 1:26.869), (3, 18, 5, 1, 23, 3, 1:25.664, 1:25.452, 1:27.079), CREATE TABLE `pitStops` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), stop INTEGER PRIMARY KEY, lap INTEGER, time TEXT, duration TEXT, milliseconds INTEGER ); CREATE TABLE `lapTimes` ( raceId INTEGER PRIMARY KEY REFERENCES races(raceId), driverId INTEGER PRIMARY KEY REFERENCES drivers(driverId), lap INTEGER PRIMARY KEY, position INTEGER, time TEXT, milliseconds INTEGER ); ",
        "output": "SELECT MAX(t2.fastestlapspeed) FROM races as t1 JOIN results as t2 ON t1.raceid = t2.raceid WHERE t1.year = 2008 AND t1.name = \"Monaco Grand Prix\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the names of movies that get 3 star and 4 star? ###filtered_database_schema: CREATE TABLE `Movie` ( mID INT PRIMARY KEY, title TEXT, year INT, director TEXT ); Sample rows from `Movie`: (101, Gone with the Wind, 1939, Victor Fleming), (102, Star Wars, 1977, George Lucas), (103, The Sound of Music, 1965, Robert Wise), CREATE TABLE `Reviewer` ( rID INT PRIMARY KEY, name TEXT ); Sample rows from `Reviewer`: (201, Sarah Martinez), (202, Daniel Lewis), (203, Brittany Harris), CREATE TABLE `Rating` ( rID INT REFERENCES Reviewer(rID), mID INT REFERENCES Movie(mID), stars INT, ratingDate date ); Sample rows from `Rating`: (201, 101, 2, 2011-01-22), (201, 101, 4, 2011-01-27), (202, 106, 4, None), ",
        "output": "SELECT t2.title FROM rating as t1 JOIN movie as t2 ON t1.mid  =  t2.mid WHERE t1.stars  =  3 INTERSECT SELECT t2.title FROM rating as t1 JOIN movie as t2 ON t1.mid  =  t2.mid WHERE t1.stars  =  4"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: what is the highest mountain in the us ###filtered_database_schema: CREATE TABLE `state` ( state_name TEXT PRIMARY KEY, population INTEGER, area double, country_name varchar(3), capital TEXT, density double ); CREATE TABLE `city` ( city_name TEXT PRIMARY KEY, population INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `border_info` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), border TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `highlow` ( state_name TEXT PRIMARY KEY REFERENCES state(state_name), highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT ); CREATE TABLE `lake` ( lake_name TEXT, area double, country_name varchar(3), state_name TEXT ); CREATE TABLE `mountain` ( mountain_name TEXT PRIMARY KEY, mountain_altitude INTEGER, country_name varchar(3), state_name TEXT PRIMARY KEY REFERENCES state(state_name) ); CREATE TABLE `river` ( river_name TEXT PRIMARY KEY, length INTEGER, country_name varchar(3), traverse TEXT REFERENCES state(state_name) ); ",
        "output": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX(mountain_altitude) FROM mountain );"
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: What are the ids and names of department stores with both marketing and managing departments? ###filtered_database_schema: CREATE TABLE `Addresses` ( address_id INTEGER, address_details VARCHAR(255) ); Sample rows from `Addresses`: (1, 28481 Crist Circle East Burdettestad, IA 21232), (2, 0292 Mitchel Pike Port Abefurt, IA 84402-4249), (3, 4062 Mante Place West Lindsey, DE 76199-8015), CREATE TABLE `Staff` ( staff_id INTEGER, staff_gender VARCHAR(1), staff_name VARCHAR(80) ); Sample rows from `Staff`: (1, 1, Tom), (2, 1, Malika), (3, 1, Katelynn), CREATE TABLE `Suppliers` ( supplier_id INTEGER, supplier_name VARCHAR(80), supplier_phone VARCHAR(80) ); Sample rows from `Suppliers`: (1, Lidl, (692)009-5928), (2, AB Store, 1-483-283-4742), (3, Tesco, 287-071-1153x254), CREATE TABLE `Department_Store_Chain` ( dept_store_chain_id INTEGER, dept_store_chain_name VARCHAR(80) ); Sample rows from `Department_Store_Chain`: (1, South), (2, West), (3, East), CREATE TABLE `Customers` ( customer_id INTEGER, payment_method_code VARCHAR(10), customer_code VARCHAR(20), customer_name VARCHAR(80), customer_address VARCHAR(255), customer_phone VARCHAR(80), customer_email VARCHAR(80) ); Sample rows from `Customers`: (1, Credit Card, 401, Ahmed, 75099 Tremblay Port Apt. 163 South Norrisland, SC 80546, 254-072-4068x33935, margarett.vonrueden@example.com), (2, Credit Card, 665, Chauncey, 8408 Lindsay Court East Dasiabury, IL 72656-3552, +41(8)1897032009, stiedemann.sigrid@example.com), (3, Direct Debit, 844, Lukas, 7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871, 197-417-3557, joelle.monahan@example.com), CREATE TABLE `Products` ( product_id INTEGER, product_type_code VARCHAR(10), product_name VARCHAR(80), product_price DECIMAL(19,4) ); Sample rows from `Products`: (1, Clothes, red jeans, 734.73), (2, Clothes, yellow jeans, 687.23), (3, Clothes, black jeans, 695.16), CREATE TABLE `Supplier_Addresses` ( supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Supplier_Addresses`: (4, 5, 2016-09-22 16:41:31, 2018-03-14 20:06:37), (3, 9, 2014-11-07 19:18:49, 2018-03-16 16:39:58), (3, 2, 2008-11-22 12:01:25, 2018-03-02 19:50:22), CREATE TABLE `Customer_Addresses` ( customer_id INTEGER PRIMARY KEY REFERENCES Customers(customer_id), address_id INTEGER PRIMARY KEY REFERENCES Addresses(address_id), date_from DATETIME, date_to DATETIME ); Sample rows from `Customer_Addresses`: (2, 9, 2017-12-11 05:00:22, 2018-03-20 20:52:34), (1, 6, 2017-10-07 23:00:26, 2018-02-28 14:53:52), (10, 8, 2017-04-04 20:00:27, 2018-02-27 20:08:33), CREATE TABLE `Customer_Orders` ( order_id INTEGER, customer_id INTEGER REFERENCES Customers(customer_id), order_status_code VARCHAR(10), order_date DATETIME ); Sample rows from `Customer_Orders`: (1, 12, Completed, 2018-02-10 15:44:48), (2, 4, New, 2018-01-31 17:49:18), (3, 1, PartFilled, 2018-02-26 12:39:33), CREATE TABLE `Department_Stores` ( dept_store_id INTEGER, dept_store_chain_id INTEGER REFERENCES Department_Store_Chain(dept_store_chain_id), store_name VARCHAR(80), store_address VARCHAR(255), store_phone VARCHAR(80), store_email VARCHAR(80) ); Sample rows from `Department_Stores`: (1, 1, store_name, 01290 Jeremie Parkway Suite 753 North Arielle, MS 51249, (948)944-5099x2027, bmaggio@example.com), (2, 3, store_name, 082 Purdy Expressway O'Connellshire, IL 31732, 877-917-5029, larissa10@example.org), (3, 4, store_name, 994 Travis Plains North Wadeton, WV 27575-3951, 1-216-312-0375, alexandro.mcclure@example.net), CREATE TABLE `Departments` ( department_id INTEGER, dept_store_id INTEGER REFERENCES Department_Stores(dept_store_id), department_name VARCHAR(80) ); Sample rows from `Departments`: (1, 5, human resource), (2, 11, purchasing), (3, 4, marketing), CREATE TABLE `Order_Items` ( order_item_id INTEGER, order_id INTEGER REFERENCES Customer_Orders(order_id), product_id INTEGER REFERENCES Products(product_id) ); Sample rows from `Order_Items`: (1, 9, 7), (2, 1, 3), (3, 5, 2), CREATE TABLE `Product_Suppliers` ( product_id INTEGER PRIMARY KEY REFERENCES Products(product_id), supplier_id INTEGER PRIMARY KEY REFERENCES Suppliers(supplier_id), date_supplied_from DATETIME, date_supplied_to DATETIME, total_amount_purchased VARCHAR(80), total_value_purchased DECIMAL(19,4) ); Sample rows from `Product_Suppliers`: (4, 3, 2017-06-19 00:49:05, 2018-03-24 19:29:18, 89366.05, 36014.6), (8, 4, 2017-07-02 00:35:12, 2018-03-25 07:30:49, 25085.57, 36274.56), (3, 3, 2017-10-14 19:15:37, 2018-03-24 02:29:44, 15752.45, 7273.74), CREATE TABLE `Staff_Department_Assignments` ( staff_id INTEGER PRIMARY KEY REFERENCES Staff(staff_id), department_id INTEGER PRIMARY KEY REFERENCES Departments(department_id), date_assigned_from DATETIME, job_title_code VARCHAR(10), date_assigned_to DATETIME ); Sample rows from `Staff_Department_Assignments`: (5, 4, 2017-06-11 22:55:20, Department Manager, 2018-03-23 21:59:11), (10, 5, 2017-12-18 19:12:15, Sales Person, 2018-03-23 20:25:24), (1, 5, 2018-02-14 03:15:29, Clerical Staff, 2018-03-24 19:57:56), ",
        "output": "SELECT t2.dept_store_id ,  t2.store_name FROM departments as t1 JOIN department_stores as t2 ON t1.dept_store_id  =  t2.dept_store_id WHERE t1.department_name  =  \"marketing\" INTERSECT SELECT t2.dept_store_id ,  t2.store_name FROM departments as t1 JOIN department_stores as t2 ON t1.dept_store_id  =  t2.dept_store_id WHERE t1.department_name  =  \"managing\""
    },
    {
        "instruction": "Generate an SQL query based on the given question,database schema and its samplings.",
        "input": "###question: How many hours do the students spend studying in each department? ###filtered_database_schema: CREATE TABLE `CLASS` ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10) REFERENCES COURSE(CRS_CODE), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM INT REFERENCES EMPLOYEE(EMP_NUM) ); Sample rows from `CLASS`: (10012, ACCT-211, 1, MWF 8:00-8:50 a.m., BUS311, 105), (10013, ACCT-211, 2, MWF 9:00-9:50 a.m., BUS200, 105), (10014, ACCT-211, 3, TTh 2:30-3:45 p.m., BUS252, 342), CREATE TABLE `COURSE` ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8) ); Sample rows from `COURSE`: (ACCT-211, ACCT, Accounting I, 3.0), (ACCT-212, ACCT, Accounting II, 3.0), (CIS-220, CIS, Intro. to Microcomputing, 3.0), CREATE TABLE `DEPARTMENT` ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4) ); Sample rows from `DEPARTMENT`: (ACCT, Accounting, BUS, 114, KLR 211, Box 52, 3119), (ART, Fine Arts, A&SCI, 435, BBG 185, Box 128, 2278), (BIOL, Biology, A&SCI, 387, AAK 230, Box 415, 4117), CREATE TABLE `EMPLOYEE` ( EMP_NUM INT PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime ); Sample rows from `EMPLOYEE`: (100, Worley, James, F, CUST, 1978-2-23, 1950-6-12), (101, Ramso, Henry, B, CUST, 1994-11-15, 1961-11-2), (102, Edwards, Rosemary, D, TECH, 1990-7-23, 1953-7-3), CREATE TABLE `ENROLL` ( CLASS_CODE varchar(5) REFERENCES CLASS(CLASS_CODE), STU_NUM INT REFERENCES STUDENT(STU_NUM), ENROLL_GRADE varchar(50) ); Sample rows from `ENROLL`: (10014, 321452, C), (10014, 324257, B), (10018, 321452, A), CREATE TABLE `PROFESSOR` ( EMP_NUM INT REFERENCES EMPLOYEE(EMP_NUM), DEPT_CODE varchar(10) REFERENCES DEPARTMENT(DEPT_CODE), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5) ); Sample rows from `PROFESSOR`: (103, HIST, DRE 156, 6783, Ph.D.), (104, ENG, DRE 102, 5561, MA), (105, ACCT, KLR 229D, 8665, Ph.D.), CREATE TABLE `STUDENT` ( STU_NUM INT PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS INT, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18) REFERENCES DEPARTMENT(DEPT_CODE), STU_PHONE varchar(4), PROF_NUM INT ); Sample rows from `STUDENT`: (321452, Bowser, William, C, 1975-2-12, 42, So, 2.84, 0, BIOL, 2134, 205), (324257, Smithson, Anne, K, 1981-11-15, 81, Jr, 3.27, 1, CIS, 2256, 222), (324258, Brewer, Juliette, , 1969-8-23, 36, So, 2.26, 1, ACCT, 2256, 228), ",
        "output": "SELECT SUM(stu_hrs) ,  dept_code FROM student GROUP BY dept_code"
    }
]