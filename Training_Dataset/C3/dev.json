[
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many singers do we have?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT count(*) FROM singer"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the total number of singers?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT count(*) FROM singer"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show name, country, age for all singers ordered by age from the oldest to the youngest., ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names, countries, and ages for every singer in descending order of age?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average, minimum, and maximum age of all singers from France?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average, minimum, and maximum age for all French singers?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the name and the release year of the song by the youngest singer., ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names and release years for all the songs of the youngest singer?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are all distinct countries where singers above age 20 are from?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT DISTINCT country FROM singer WHERE age  >  20"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are  the different countries with singers above age 20?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT DISTINCT country FROM singer WHERE age  >  20"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show all countries and the number of singers in each country., ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT country ,  count(*) FROM singer GROUP BY country"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many singers are from each country?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT country ,  count(*) FROM singer GROUP BY country"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List all song names by singers above the average age., ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are all the song names by singers who are older than average?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show location and name for all stadiums with a capacity between 5000 and 10000., ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the locations and names of all stations with capacity between 5000 and 10000?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the maximum capacity and the average of all stadiums ?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "select max(capacity), average from stadium"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average and maximum capacities for all stadiums ?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "select avg(capacity) ,  max(capacity) from stadium"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name and capacity for the stadium with highest average attendance?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name and capacity for the stadium with the highest average attendance?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many concerts are there in year 2014 or 2015?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many concerts occurred in 2014 or 2015?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the stadium name and the number of concerts in each stadium., ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:For each stadium, how many concerts play there?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the stadium name and capacity with most number of concerts in year 2014 or after., ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name and capacity of the stadium with the most concerts after 2013 ?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which year has most number of concerts?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the year that had the most concerts?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the stadium names without any concert., ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of the stadiums without any concerts?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show countries where a singer above age 40 and a singer below 30 are from., ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show names for all stadiums except for stadiums having a concert in year 2014., ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of all stadiums that did not have a concert in 2014?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the name and theme for all concerts and the number of singers in each concert., ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names , themes , and number of singers for every concert ?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List singer names and number of concerts for each singer., ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of the singers and number of concerts for each person?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List all singer names in concerts in year 2014., ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of the singers who performed in a concert in 2014?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:what is the name and nation of the singer who have a song having 'Hey' in its name?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015., ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the number of concerts happened in the stadium with the highest capacity ., ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the number of concerts that occurred in the stadium with the largest capacity ?, ###db_name: 'concert_singer',###database_schema: {\"foreign key\": [\"concert.stadium_id->stadium.stadium_id\", \"singer_in_concert.singer_id->singer.singer_id\", \"singer_in_concert.concert_id->concert.concert_id\"], \"primary key\": [\"stadium.stadium_id\", \"singer.singer_id\", \"concert.concert_id\", \"singer_in_concert.concert_id\"], \"tables\": [\"stadium(stadium id, location, name, capacity, highest, lowest, average)\", \"singer(singer id, name, country, song name, song release year, age, is male)\", \"concert(concert id, concert name, theme, stadium id, year)\", \"singer in concert(concert id, singer id)\"]}",
        "output": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the number of pets whose weight is heavier than 10., ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT count(*) FROM pets WHERE weight  >  10"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many pets have a greater weight than 10?, ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT count(*) FROM pets WHERE weight  >  10"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the weight of the youngest dog., ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How much does the youngest dog weigh?, ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the maximum weight for each type of pet. List the maximum weight and pet type., ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the maximum weight and type for each type of pet., ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find number of pets owned by students who are older than 20., ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many pets are owned by students that have an age greater than 20?, ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the number of dog pets that are raised by female students (with sex F)., ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many dog pets are raised by female students?, ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the number of distinct type of pets., ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT count(DISTINCT pettype) FROM pets"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many different types of pet are there?, ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT count(DISTINCT pettype) FROM pets"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the first name of students who have cat or dog pet., ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the first names of every student who has a cat or dog as a pet?, ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the first name of students who have both cat and dog pets ., ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the students' first names who have both cats and dogs as pets?, ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the major and age of students who do not have a cat pet., ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What major is every student who does not own a cat as a pet, and also how old are they?, ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the id of students who do not have a cat pet., ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the ids of the students who do not own cats as pets?, ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the first name and age of students who have a dog but do not have a cat as a pet., ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the first name of every student who has a dog but does not have a cat?, ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the type and weight of the youngest pet., ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What type of pet is the youngest animal, and how much does it weigh?, ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the id and weight of all pets whose age is older than 1., ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the id and weight of every pet who is older than 1?, ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the average and maximum age for each type of pet., ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average and maximum age for each pet type?, ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the average weight for each pet type., ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average weight for each type of pet?, ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the first name and age of students who have a pet., ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the different first names and ages of the students who do have pets?, ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the id of the pet owned by student whose last name is \u2018Smith\u2019., ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the id of the pet owned by the student whose last name is 'Smith'?, ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the number of pets for each student who has any pet and student id., ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:For students who have pets , how many pets does each student have ? list their ids instead of names ., ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the first name and gender of student who have more than one pet., ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the first name and gender of the all the students who have more than one pet?, ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the last name of the student who has a cat that is age 3., ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the last name of the student who has a cat that is 3 years old?, ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the average age of students who do not have any pet ., ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "select avg(age) from student where stuid not in (select stuid from has_pet)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average age for all students who do not own any pets ?, ###db_name: 'pets_1',###database_schema: {\"foreign key\": [\"has_pet.stuid->student.stuid\", \"has_pet.petid->pets.petid\"], \"primary key\": [\"student.stuid\", \"pets.petid\"], \"tables\": [\"student(student id, last name, first name, age, sex, major, advisor, city code)\", \"has pet(student id, pet id)\", \"pets(pet id, pet type, pet age, weight)\"]}",
        "output": "select avg(age) from student where stuid not in (select stuid from has_pet)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many continents are there?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT count(*) FROM CONTINENTS;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the number of continents?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT count(*) FROM CONTINENTS;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many countries does each continent have? List the continent id, continent name and the number of countries., ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:For each continent, list its id, name, and how many countries it has?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many countries are listed?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT count(*) FROM COUNTRIES;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many countries exist?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT count(*) FROM COUNTRIES;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many models does each car maker produce? List maker full name, id and the number., ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the full name of each car maker, along with its id and how many models it produces?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which model of the car has the minimum horsepower?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the model of the car with the smallest amount of horsepower?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the model of the car whose weight is below the average weight., ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the model for the car with a weight smaller than the average?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the name of the makers that produced some cars in the year of 1970?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name of the different car makers who produced a car in 1970?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the make and production time of the cars that were produced in the earliest year?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the maker of the carr produced in the earliest year and what year was it?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which distinct car models are the produced after 1980?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the different models for the cards produced after 1980?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many car makers are there in each continents? List the continent name and the count., ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name of each continent and how many car makers are there in each one?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which of the countries has the most car makers? List the country name., ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name of the country with the most car makers?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many car models are produced by each maker ? Only list the count and the maker full name ., ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the number of car models that are produced by each maker and what is the id and full name of each maker?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the accelerate of the car make amc hornet sportabout (sw)?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How much does the car accelerate that makes amc hornet sportabout (sw)?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many car makers are there in france?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the number of makers of care in France?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many car models are produced in the usa?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the count of the car models produced in the United States?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average miles per gallon(mpg) of the cars with 4 cylinders?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average miles per gallon of all the cards with 4 cylinders?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the smallest weight of the car produced with 8 cylinders on 1974 ?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the minimum weight of the car with 8 cylinders produced in 1974 ?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are all the makers and models?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT Maker ,  Model FROM MODEL_LIST;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the makers and models?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT Maker ,  Model FROM MODEL_LIST;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the countries having at least one car maker? List name and id., ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names and ids of all countries with at least one car maker?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the number of the cars with horsepower more than 150?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the number of cars with a horsepower greater than 150?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average weight of cars each year?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average weight and year for each year?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which countries in europe have at least 3 car manufacturers?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of all European countries with at least 3 manufacturers?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the maximum horsepower and the make of the car models with 3 cylinders?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the largest amount of horsepower for the models with 3 cylinders and what make is it?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which model saves the most gasoline? That is to say, have the maximum miles per gallon., ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the car model with the highest mpg ?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average horsepower of the cars before 1980?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average horsepower for all cars produced before 1980 ?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "select avg(horsepower) from cars_data where year  <  1980;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average edispl of the cars of model volvo?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average edispl for all volvos?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the maximum accelerate for different number of cylinders?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the maximum accelerate for all the different cylinders?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which model has the most version(make) of cars?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What model has the most different versions?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many cars have more than 4 cylinders?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the number of cars with more than 4 cylinders?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:how many cars were produced in 1980?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:In 1980, how many cars were made?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many car models were produced by the maker with full name American Motor Company?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the number of car models created by the car maker American Motor Company?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which makers designed more than 3 car models? List full name and the id., ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names and ids of all makers with more than 3 models?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the different models created by either the car maker General Motors or weighed more than 3500?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:In which years cars were produced weighing no less than 3000 and no more than 4000 ?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "select distinct year from cars_data where weight between 3000 and 4000;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "select distinct year from cars_data where weight between 3000 and 4000;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the horsepower of the car with the largest accelerate?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the horsepower of the car with the greatest accelerate?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:For model volvo, how many cylinders does the car with the least accelerate have?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:For a volvo model, how many cylinders does the version with least accelerate have?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many cars have a larger accelerate than the car with the largest horsepower?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the number of cars with a greater accelerate than the one with the most horsepower?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many countries has more than 2 car makers ?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the number of countries with more than 2 car makers ?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many cars has over 6 cylinders?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the number of carsw ith over 6 cylinders?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:For the cars with 4 cylinders, which model has the largest horsepower?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:For all of the 4 cylinder cars, which model has the most horsepower?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name., ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which models are lighter than 3500 but not built by the 'Ford Motor Company'?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the name of the countries where there is not a single car maker?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of the countries with no car makers?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker ., ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?, ###db_name: 'car_1',###database_schema: {\"foreign key\": [\"countries.continent->continents.contid\", \"car_makers.country->countries.countryid\", \"model_list.maker->car_makers.id\", \"car_names.model->model_list.model\", \"cars_data.id->car_names.makeid\"], \"primary key\": [\"continents.contid\", \"countries.countryid\", \"car_makers.id\", \"model_list.modelid\", \"car_names.makeid\", \"cars_data.id\"], \"tables\": [\"continents(cont id, continent)\", \"countries(country id, country name, continent)\", \"car makers(id, maker, full name, country)\", \"model list(model id, maker, model)\", \"car names(make id, model, make)\", \"cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)\"]}",
        "output": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which country does Airline \"JetBlue Airways\" belong to?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What country is Jetblue Airways affiliated with?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the abbreviation of Airline \"JetBlue Airways\"?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which abbreviation corresponds to Jetblue Airways?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List all airline names and their abbreviations in \"USA\"., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the airline names and abbreviations for airlines in the USA?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the airport code and name in the city of Anthony., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the airport code and airport name corresonding to the city Anthony., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many airlines do we have?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM AIRLINES"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the total number of airlines?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM AIRLINES"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many airports do we have?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM AIRPORTS"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the number of  airports., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM AIRPORTS"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many flights do we have?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM FLIGHTS"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the number of flights., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM FLIGHTS"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which airline has abbreviation 'UAL'?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the airline with abbreviation 'UAL'., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many airlines are from USA?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the number of airlines in the USA., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which city and country is the Alton airport at?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the city and country for the Alton airport., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the airport name for airport 'AKO'?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the name of the airport with code 'AKO'., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are airport names at City 'Aberdeen'?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of airports in Aberdeen?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many flights depart from 'APG'?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of flights departing from 'APG'., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many flights have destination ATO?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of flights into ATO., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many flights depart from City Aberdeen?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the number of flights departing from Aberdeen., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many flights arriving in Aberdeen city?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the number of flights arriving in Aberdeen., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many flights fly from Aberdeen to Ashley?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many flights does airline 'JetBlue Airways' have?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the number of Jetblue Airways flights., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many 'United Airlines' flights go to Airport 'ASY'?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of United Airlines flights arriving in ASY Airport., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many 'United Airlines' flights depart from Airport 'AHD'?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the number of United Airlines flights leaving from AHD Airport., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many United Airlines flights go to City 'Aberdeen'?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of United Airlines flights that arrive in Aberdeen., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which city has most number of arriving flights?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which city has the most frequent destination airport?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which city has most number of departing flights?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which city is the most frequent source airport?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the code of airport that has the highest number of flights?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the airport code of the airport with the most flights?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the code of airport that has fewest number of flights?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the code of the airport with the least flights., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which airline has most number of flights?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What airline serves the most flights?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the abbreviation and country of the airline that has fewest number of flights?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the abbreviation of the airilne has the fewest flights and what country is it in?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are airlines that have some flight departing from airport 'AHD'?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which airlines have a flight with source airport AHD?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are airlines that have flights arriving at airport 'AHD'?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which airlines have a flight with destination airport AHD?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find all airlines that have flights from both airports 'APG' and 'CVO'., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which airlines have departing flights from both APG and CVO airports?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find all airlines that have flights from airport 'CVO' but not from 'APG'., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which airlines have departures from CVO but not from APG airports?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find all airlines that have at least 10 flights., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which airlines have at least 10 flights?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find all airlines that have fewer than 200 flights., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which airlines have less than 200 flights?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are flight numbers of Airline \"United Airlines\"?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which flight numbers correspond to United Airlines flights?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are flight numbers of flights departing from Airport \"APG\"?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the flight numbers of flights leaving from APG., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are flight numbers of flights arriving at Airport \"APG\"?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the flight numbers of flights landing at APG., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are flight numbers of flights departing from City \"Aberdeen \"?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the flight numbers of flights leaving from Aberdeen., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are flight numbers of flights arriving at City \"Aberdeen\"?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the flight numbers of flights arriving in Aberdeen., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the number of flights landing in the city of Aberdeen or Abilene., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many flights land in Aberdeen or Abilene?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the name of airports which do not have any flight in and out., ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which airports do not have departing or arriving flights?, ###db_name: 'flight_2',###database_schema: {\"foreign key\": [\"flights.destairport->airports.airportcode\", \"flights.sourceairport->airports.airportcode\"], \"primary key\": [\"airlines.uid\", \"airports.airportcode\", \"flights.airline\"], \"tables\": [\"airlines(airline id, airline name, abbreviation, country)\", \"airports(city, airport code, airport name, country, country abbrev)\", \"flights(airline, flight number, source airport, destination airport)\"]}",
        "output": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many employees are there?, ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT count(*) FROM employee"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of employees, ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT count(*) FROM employee"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Sort employee names by their age in ascending order., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT name FROM employee ORDER BY age"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the names of employees and sort in ascending order of age., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT name FROM employee ORDER BY age"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the number of employees from each city?, ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT count(*) ,  city FROM employee GROUP BY city"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of employees for each city., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT count(*) ,  city FROM employee GROUP BY city"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which cities do more than one employee under age 30 come from?, ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the cities that have more than one employee under age 30., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the number of shops in each location., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many shops are there in each location?, ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the manager name and district of the shop whose number of products is the largest., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the manager name and district of the shop that sells the largest number of products?, ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:find the minimum and maximum number of products of all stores., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT min(Number_products) ,  max(Number_products) FROM shop"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the minimum and maximum number of products across all the shops?, ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT min(Number_products) ,  max(Number_products) FROM shop"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the name, location and district of all shops in descending order of number of products., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Sort all the shops by number products in descending order, and return the name, location and district of each shop., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the names of stores whose number products is more than the average number of products., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which shops' number products is above the average? Give me the shop names., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:find the name of employee who was awarded the most times in the evaluation., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which employee received the most awards in evaluations? Give me the employee name., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the name of the employee who got the highest one time bonus., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which employee received the biggest bonus? Give me the employee name., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the names of employees who never won any award in the evaluation., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of the employees who never received any evaluation?, ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name of the shop that is hiring the largest number of employees?, ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which shop has the most employees? Give me the shop name., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the name of the shops that do not hire any employee., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which shops run with no employees? Find the shop names, ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the number of employees hired in each shop; show the shop name as well., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:For each shop, return the number of employees working there and the name of the shop., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is total bonus given in all evaluations?, ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT sum(bonus) FROM evaluation"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the total amount of bonus given in all the evaluations., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT sum(bonus) FROM evaluation"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give me all the information about hiring., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT * FROM hiring"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is all the information about hiring?, ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT * FROM hiring"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which district has both stores with less than 3000 products and stores with more than 10000 products?, ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many different store locations are there?, ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT count(DISTINCT LOCATION) FROM shop"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of distinct store locations., ###db_name: 'employee_hire_evaluation',###database_schema: {\"foreign key\": [\"hiring.employee_id->employee.employee_id\", \"hiring.shop_id->shop.shop_id\", \"evaluation.employee_id->employee.employee_id\"], \"primary key\": [\"employee.employee_id\", \"shop.shop_id\", \"hiring.employee_id\", \"evaluation.employee_id\"], \"tables\": [\"employee(employee id, name, age, city)\", \"shop(shop id, name, location, district, number products, manager name)\", \"hiring(shop id, employee id, start from, is full time)\", \"evaluation(employee id, year awarded, bonus)\"]}",
        "output": "SELECT count(DISTINCT LOCATION) FROM shop"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many documents do we have?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT count(*) FROM Documents"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of documents., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT count(*) FROM Documents"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List document IDs, document names, and document descriptions for all documents., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT document_id ,  document_name ,  document_description FROM Documents"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the ids, names, and descriptions for all documents?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT document_id ,  document_name ,  document_description FROM Documents"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the document name and template id for document with description with the letter 'w' in it?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the names and template ids for documents that contain the letter w in their description., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the document id, template id and description for document named \"Robbin CV\"?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the document id, template id, and description for the document with the name Robbin CV., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many different templates do all document use?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT count(DISTINCT template_id) FROM Documents"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of different templates used for documents., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT count(DISTINCT template_id) FROM Documents"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many documents are using the template with type code 'PPT'?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of documents that use the PPT template type., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show all template ids and number of documents using each template., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are all different template ids used for documents, and how many times were each of them used?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the id and type code for the template used by the most documents?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the id and type code of the template that is used for the greatest number of documents., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show ids for all templates that are used by more than one document., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the template ids of any templates used in more than a single document?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show ids for all templates not used by any document., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the ids for templates that are not used in any documents?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many templates do we have?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT count(*) FROM Templates"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of templates., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT count(*) FROM Templates"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show template ids, version numbers, and template type codes for all templates., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the ids, version numbers, and type codes for each template?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show all distinct template type codes for all templates., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT DISTINCT template_type_code FROM Templates"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the different template type codes?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT DISTINCT template_type_code FROM Templates"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the ids of templates with template type code PP or PPT?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the ids of templates that have the code PP or PPT., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many templates have template type code CV?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of templates of the type CV., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the version number and template type code for the template with version number later than 5?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the version numbers and template type codes of templates with a version number greater than 5., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show all template type codes and number of templates for each., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the different template type codes, and how many templates correspond to each?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which template type code has most number of templates?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the type code of the template type that the most templates belong to., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show all template type codes with less than three templates., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the codes of template types that have fewer than 3 templates?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What the smallest version number and its template type code?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT min(Version_Number) ,  template_type_code FROM Templates"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the lowest version number, along with its corresponding template type code., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT min(Version_Number) ,  template_type_code FROM Templates"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the template type code of the template used by document with the name \"Data base\"?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the template type code of the template that is used by a document named Data base., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show all document names using templates with template type code BK., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of documents that use templates with the code BK?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show all template type codes and the number of documents using each type., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the different template type codes, and how many documents use each type?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which template type code is used by most number of documents?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the code of the template type that is most commonly used in documents., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show all template type codes that are not used by any document., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the codes of template types that are not used for any document?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show all template type codes and descriptions., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the type codes and descriptions for all template types?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the template type descriptions for template type code \"AD\"., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the template type description of the template type with the code AD., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the template type code for template type description \"Book\"., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the type code of the template type with the description \"Book\"., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the distinct template type descriptions for the templates ever used by any document?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the different descriptions for templates that have been used in a document., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the template ids with template type description \"Presentation\"., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the ids corresponding to templates with the description 'Presentation'., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many paragraphs in total?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT count(*) FROM Paragraphs"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of paragraphs., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT count(*) FROM Paragraphs"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many paragraphs for the document with name 'Summer Show'?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of paragraphs in the document named 'Summer Show'., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show paragraph details for paragraph with text 'Korea ' ., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "select other_details from paragraphs where paragraph_text like 'korea'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the details for the paragraph that includes the text 'Korea ' ?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "select other_details from paragraphs where paragraph_text like 'korea'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show all paragraph ids and texts for the document with name 'Welcome to NY'., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show all paragraph texts for the document \"Customer reviews\"., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the paragraph texts for the document with the name 'Customer reviews'?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show all document ids and the number of paragraphs in each document. Order by document id., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the different document ids along with the number of paragraphs corresponding to each, ordered by id., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show all document ids, names and the number of paragraphs in each document., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the ids and names of each document, as well as the number of paragraphs in each?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List all document ids with at least two paragraphs., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the ids of documents that have 2 or more paragraphs?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the document id and name with greatest number of paragraphs?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the id and name of the document with the most paragraphs., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the document id with least number of paragraphs?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the id of the document with the fewest paragraphs., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the document id with 1 to 2 paragraphs?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the ids of documents that have between one and two paragraphs., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the document id with paragraph text 'Brazil' and 'Ireland'., ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?, ###db_name: 'cre_Doc_Template_Mgt',###database_schema: {\"foreign key\": [\"templates.template_type_code->ref_template_types.template_type_code\", \"documents.template_id->templates.template_id\", \"paragraphs.document_id->documents.document_id\"], \"primary key\": [\"ref_template_types.template_type_code\", \"templates.template_id\", \"documents.document_id\", \"paragraphs.paragraph_id\"], \"tables\": [\"reference template types(template type code, template type description)\", \"templates(template id, version number, template type code, date effective from, date effective to, template details)\", \"documents(document id, template id, document name, document description, other details)\", \"paragraphs(paragraph id, document id, paragraph text, other details)\"]}",
        "output": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many teachers are there?, ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT count(*) FROM teacher"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the total count of teachers?, ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT count(*) FROM teacher"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the names of teachers in ascending order of age., ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT Name FROM teacher ORDER BY Age ASC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of the teachers ordered by ascending age?, ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT Name FROM teacher ORDER BY Age ASC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the age and hometown of teachers?, ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT Age ,  Hometown FROM teacher"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the age and hometown of every teacher?, ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT Age ,  Hometown FROM teacher"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the name of teachers whose hometown is not `` Little Lever Urban District '' ., ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "select name from teacher where hometown != \"little lever urban district\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?, ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "select name from teacher where hometown != \"little lever urban district\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the name of teachers aged either 32 or 33?, ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of the teachers who are aged either 32 or 33?, ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the hometown of the youngest teacher?, ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Where is the youngest teacher from?, ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show different hometown of teachers and the number of teachers from each hometown., ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:For each hometown, how many teachers are there?, ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the most common hometown of teachers., ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the most commmon hometowns for teachers?, ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the hometowns shared by at least two teachers., ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the towns from which at least two teachers come from?, ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show names of teachers and the courses they are arranged to teach., ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name of each teacher and what course they teach?, ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name., ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?, ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the name of the teacher for the math course., ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of the people who teach math courses?, ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show names of teachers and the number of courses they teach., ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of the teachers and how many courses do they teach?, ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show names of teachers that teach at least two courses., ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of the teachers who teach at least two courses?, ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the names of teachers who have not been arranged to teach courses., ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of the teachers whose courses have not been arranged?, ###db_name: 'course_teach',###database_schema: {\"foreign key\": [\"course_arrange.teacher_id->teacher.teacher_id\", \"course_arrange.course_id->course.course_id\"], \"primary key\": [\"course.course_id\", \"teacher.teacher_id\", \"course_arrange.course_id\"], \"tables\": [\"course(course id, staring date, course)\", \"teacher(teacher id, name, age, hometown)\", \"course arrange(course id, teacher id, grade)\"]}",
        "output": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many visitors below age 30 are there?, ###db_name: 'museum_visit',###database_schema: {\"foreign key\": [\"visit.visitor_id->visitor.id\", \"visit.museum_id->museum.museum_id\"], \"primary key\": [\"museum.museum_id\", \"visitor.id\", \"visit.museum_id\"], \"tables\": [\"museum(museum id, name, num of staff, open year)\", \"customer(customer id, name, level of membership, age)\", \"visit(museum id, customer id, num of ticket, total spent)\"]}",
        "output": "SELECT count(*) FROM visitor WHERE age  <  30"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low., ###db_name: 'museum_visit',###database_schema: {\"foreign key\": [\"visit.visitor_id->visitor.id\", \"visit.museum_id->museum.museum_id\"], \"primary key\": [\"museum.museum_id\", \"visitor.id\", \"visit.museum_id\"], \"tables\": [\"museum(museum id, name, num of staff, open year)\", \"customer(customer id, name, level of membership, age)\", \"visit(museum id, customer id, num of ticket, total spent)\"]}",
        "output": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average age of the visitors whose membership level is not higher than 4?, ###db_name: 'museum_visit',###database_schema: {\"foreign key\": [\"visit.visitor_id->visitor.id\", \"visit.museum_id->museum.museum_id\"], \"primary key\": [\"museum.museum_id\", \"visitor.id\", \"visit.museum_id\"], \"tables\": [\"museum(museum id, name, num of staff, open year)\", \"customer(customer id, name, level of membership, age)\", \"visit(museum id, customer id, num of ticket, total spent)\"]}",
        "output": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young., ###db_name: 'museum_visit',###database_schema: {\"foreign key\": [\"visit.visitor_id->visitor.id\", \"visit.museum_id->museum.museum_id\"], \"primary key\": [\"museum.museum_id\", \"visitor.id\", \"visit.museum_id\"], \"tables\": [\"museum(museum id, name, num of staff, open year)\", \"customer(customer id, name, level of membership, age)\", \"visit(museum id, customer id, num of ticket, total spent)\"]}",
        "output": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the id and name of the museum that has the most staff members?, ###db_name: 'museum_visit',###database_schema: {\"foreign key\": [\"visit.visitor_id->visitor.id\", \"visit.museum_id->museum.museum_id\"], \"primary key\": [\"museum.museum_id\", \"visitor.id\", \"visit.museum_id\"], \"tables\": [\"museum(museum id, name, num of staff, open year)\", \"customer(customer id, name, level of membership, age)\", \"visit(museum id, customer id, num of ticket, total spent)\"]}",
        "output": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the average number of staff working for the museums that were open before 2009., ###db_name: 'museum_visit',###database_schema: {\"foreign key\": [\"visit.visitor_id->visitor.id\", \"visit.museum_id->museum.museum_id\"], \"primary key\": [\"museum.museum_id\", \"visitor.id\", \"visit.museum_id\"], \"tables\": [\"museum(museum id, name, num of staff, open year)\", \"customer(customer id, name, level of membership, age)\", \"visit(museum id, customer id, num of ticket, total spent)\"]}",
        "output": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the opening year and staff number of the museum named Plaza Museum?, ###db_name: 'museum_visit',###database_schema: {\"foreign key\": [\"visit.visitor_id->visitor.id\", \"visit.museum_id->museum.museum_id\"], \"primary key\": [\"museum.museum_id\", \"visitor.id\", \"visit.museum_id\"], \"tables\": [\"museum(museum id, name, num of staff, open year)\", \"customer(customer id, name, level of membership, age)\", \"visit(museum id, customer id, num of ticket, total spent)\"]}",
        "output": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:find the names of museums which have more staff than the minimum staff number of all museums opened after 2010., ###db_name: 'museum_visit',###database_schema: {\"foreign key\": [\"visit.visitor_id->visitor.id\", \"visit.museum_id->museum.museum_id\"], \"primary key\": [\"museum.museum_id\", \"visitor.id\", \"visit.museum_id\"], \"tables\": [\"museum(museum id, name, num of staff, open year)\", \"customer(customer id, name, level of membership, age)\", \"visit(museum id, customer id, num of ticket, total spent)\"]}",
        "output": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:find the id, name and age for visitors who visited some museums more than once., ###db_name: 'museum_visit',###database_schema: {\"foreign key\": [\"visit.visitor_id->visitor.id\", \"visit.museum_id->museum.museum_id\"], \"primary key\": [\"museum.museum_id\", \"visitor.id\", \"visit.museum_id\"], \"tables\": [\"museum(museum id, name, num of staff, open year)\", \"customer(customer id, name, level of membership, age)\", \"visit(museum id, customer id, num of ticket, total spent)\"]}",
        "output": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?, ###db_name: 'museum_visit',###database_schema: {\"foreign key\": [\"visit.visitor_id->visitor.id\", \"visit.museum_id->museum.museum_id\"], \"primary key\": [\"museum.museum_id\", \"visitor.id\", \"visit.museum_id\"], \"tables\": [\"museum(museum id, name, num of staff, open year)\", \"customer(customer id, name, level of membership, age)\", \"visit(museum id, customer id, num of ticket, total spent)\"]}",
        "output": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the id and name of the museum visited most times?, ###db_name: 'museum_visit',###database_schema: {\"foreign key\": [\"visit.visitor_id->visitor.id\", \"visit.museum_id->museum.museum_id\"], \"primary key\": [\"museum.museum_id\", \"visitor.id\", \"visit.museum_id\"], \"tables\": [\"museum(museum id, name, num of staff, open year)\", \"customer(customer id, name, level of membership, age)\", \"visit(museum id, customer id, num of ticket, total spent)\"]}",
        "output": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name of the museum that had no visitor yet?, ###db_name: 'museum_visit',###database_schema: {\"foreign key\": [\"visit.visitor_id->visitor.id\", \"visit.museum_id->museum.museum_id\"], \"primary key\": [\"museum.museum_id\", \"visitor.id\", \"visit.museum_id\"], \"tables\": [\"museum(museum id, name, num of staff, open year)\", \"customer(customer id, name, level of membership, age)\", \"visit(museum id, customer id, num of ticket, total spent)\"]}",
        "output": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the name and age of the visitor who bought the most tickets at once., ###db_name: 'museum_visit',###database_schema: {\"foreign key\": [\"visit.visitor_id->visitor.id\", \"visit.museum_id->museum.museum_id\"], \"primary key\": [\"museum.museum_id\", \"visitor.id\", \"visit.museum_id\"], \"tables\": [\"museum(museum id, name, num of staff, open year)\", \"customer(customer id, name, level of membership, age)\", \"visit(museum id, customer id, num of ticket, total spent)\"]}",
        "output": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the average and maximum number of tickets bought in all visits?, ###db_name: 'museum_visit',###database_schema: {\"foreign key\": [\"visit.visitor_id->visitor.id\", \"visit.museum_id->museum.museum_id\"], \"primary key\": [\"museum.museum_id\", \"visitor.id\", \"visit.museum_id\"], \"tables\": [\"museum(museum id, name, num of staff, open year)\", \"customer(customer id, name, level of membership, age)\", \"visit(museum id, customer id, num of ticket, total spent)\"]}",
        "output": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the total ticket expense of the visitors whose membership level is 1?, ###db_name: 'museum_visit',###database_schema: {\"foreign key\": [\"visit.visitor_id->visitor.id\", \"visit.museum_id->museum.museum_id\"], \"primary key\": [\"museum.museum_id\", \"visitor.id\", \"visit.museum_id\"], \"tables\": [\"museum(museum id, name, num of staff, open year)\", \"customer(customer id, name, level of membership, age)\", \"visit(museum id, customer id, num of ticket, total spent)\"]}",
        "output": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?, ###db_name: 'museum_visit',###database_schema: {\"foreign key\": [\"visit.visitor_id->visitor.id\", \"visit.museum_id->museum.museum_id\"], \"primary key\": [\"museum.museum_id\", \"visitor.id\", \"visit.museum_id\"], \"tables\": [\"museum(museum id, name, num of staff, open year)\", \"customer(customer id, name, level of membership, age)\", \"visit(museum id, customer id, num of ticket, total spent)\"]}",
        "output": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the number of visitors who did not visit any museum opened after 2010., ###db_name: 'museum_visit',###database_schema: {\"foreign key\": [\"visit.visitor_id->visitor.id\", \"visit.museum_id->museum.museum_id\"], \"primary key\": [\"museum.museum_id\", \"visitor.id\", \"visit.museum_id\"], \"tables\": [\"museum(museum id, name, num of staff, open year)\", \"customer(customer id, name, level of membership, age)\", \"visit(museum id, customer id, num of ticket, total spent)\"]}",
        "output": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many museums were opened after 2013 or before 2008?, ###db_name: 'museum_visit',###database_schema: {\"foreign key\": [\"visit.visitor_id->visitor.id\", \"visit.museum_id->museum.museum_id\"], \"primary key\": [\"museum.museum_id\", \"visitor.id\", \"visit.museum_id\"], \"tables\": [\"museum(museum id, name, num of staff, open year)\", \"customer(customer id, name, level of membership, age)\", \"visit(museum id, customer id, num of ticket, total spent)\"]}",
        "output": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the total number of players., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT count(*) FROM players"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many players are there?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT count(*) FROM players"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the total number of matches., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT count(*) FROM matches"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of matches., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT count(*) FROM matches"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the first name and birth date of all players from the country with code USA., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the first names and birth dates of players from the USA?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the average age of losers and winners of all matches., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the average ages of losers and winners across matches?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the average rank of winners in all matches., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT avg(winner_rank) FROM matches"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average rank for winners in all matches?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT avg(winner_rank) FROM matches"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the highest rank of losers in all matches., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT min(loser_rank) FROM matches"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the best rank of losers across all matches?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT min(loser_rank) FROM matches"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:find the number of distinct country codes of all players., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT count(DISTINCT country_code) FROM players"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many distinct countries do players come from?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT count(DISTINCT country_code) FROM players"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the number of distinct name of losers., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT count(DISTINCT loser_name) FROM matches"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many different loser names are there?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT count(DISTINCT loser_name) FROM matches"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the name of tourney that has more than 10 matches., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of tournaments that have more than 10 matches?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the names of all winners who played in both 2013 and 2016., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of players who won in both 2013 and 2016?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the number of all matches who played in years of 2013 or 2016., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many matches were played in 2013 or 2016?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the first names and country codes for players who won both the WTA Championships and the Australian Open?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the first name and country code of the oldest player., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the first name and country code of the oldest player?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the first and last name of all players in the order of birth date., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT first_name ,  last_name FROM players ORDER BY birth_date"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the full names of all players, sorted by birth date?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT first_name ,  last_name FROM players ORDER BY birth_date"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the first and last name of all players who are left / L hand in the order of birth date., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the full names of all left handed players, in order of birth date?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the first name and country code of the player who did the most number of tours., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the first name and country code of the player with the most tours?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the year that has the most number of matches., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which year had the most matches?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the name and rank points of the winner who won the most times., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name of the winner who has won the most matches, and how many rank points does this player have?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the name of the winner who has the highest rank points and participated in the Australian Open tourney., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name of the winner with the most rank points who participated in the Australian Open tournament?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:find the names of loser and winner who played in the match with greatest number of minutes., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of the winner and loser who played in the longest match?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the average ranking for each player and their first name., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the first names of all players, and their average rankings?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the total ranking points for each player and their first name., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the first names of all players, and their total ranking points?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:find the number of players for each country., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT count(*) ,  country_code FROM players GROUP BY country_code"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many players are from each country?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT count(*) ,  country_code FROM players GROUP BY country_code"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:find the code of the country where has the greatest number of players., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the code of the country with the most players?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the codes of countries that have more than 50 players., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the codes of countries with more than 50 players?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the total number of tours for each ranking date., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many total tours were there for each ranking date?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the number of matches happened in each year., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many matches were played in each year?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the name and rank of the 3 youngest winners across all matches., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names and ranks of the three youngest winners across all matches?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many different winners both participated in the WTA Championships and were left handed?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the number of left handed winners who participated in the WTA Championships., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the first name, country code and birth date of the winner who has the highest rank points in all matches., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the first name, country code, and birth date of the player with the most winner rank points across all matches?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the number of players for each hand type., ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT count(*) ,  hand FROM players GROUP BY hand"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many players are there for each hand type?, ###db_name: 'wta_1',###database_schema: {\"foreign key\": [\"matches.winner_id->players.player_id\", \"matches.loser_id->players.player_id\", \"rankings.player_id->players.player_id\"], \"primary key\": [\"players.player_id\"], \"tables\": [\"players(player id, first name, last name, hand, birth date, country code)\", \"matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)\", \"rankings(ranking date, ranking, player id, ranking points, tours)\"]}",
        "output": "SELECT count(*) ,  hand FROM players GROUP BY hand"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many ships ended up being 'Captured'?, ###db_name: 'battle_death',###database_schema: {\"foreign key\": [\"ship.lost_in_battle->battle.id\", \"death.caused_by_ship_id->ship.id\"], \"primary key\": [\"battle.id\", \"ship.id\", \"death.id\"], \"tables\": [\"battle(id, name, date, bulgarian commander, latin commander, result)\", \"ship(lost in battle, id, name, tonnage, ship type, location, disposition of ship)\", \"death(caused by ship id, id, note, killed, injured)\"]}",
        "output": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the name and tonnage ordered by in descending alphaetical order for the names., ###db_name: 'battle_death',###database_schema: {\"foreign key\": [\"ship.lost_in_battle->battle.id\", \"death.caused_by_ship_id->ship.id\"], \"primary key\": [\"battle.id\", \"ship.id\", \"death.id\"], \"tables\": [\"battle(id, name, date, bulgarian commander, latin commander, result)\", \"ship(lost in battle, id, name, tonnage, ship type, location, disposition of ship)\", \"death(caused by ship id, id, note, killed, injured)\"]}",
        "output": "SELECT name ,  tonnage FROM ship ORDER BY name DESC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the name, date and result of each battle., ###db_name: 'battle_death',###database_schema: {\"foreign key\": [\"ship.lost_in_battle->battle.id\", \"death.caused_by_ship_id->ship.id\"], \"primary key\": [\"battle.id\", \"ship.id\", \"death.id\"], \"tables\": [\"battle(id, name, date, bulgarian commander, latin commander, result)\", \"ship(lost in battle, id, name, tonnage, ship type, location, disposition of ship)\", \"death(caused by ship id, id, note, killed, injured)\"]}",
        "output": "SELECT name ,  date FROM battle"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is maximum and minimum death toll caused each time?, ###db_name: 'battle_death',###database_schema: {\"foreign key\": [\"ship.lost_in_battle->battle.id\", \"death.caused_by_ship_id->ship.id\"], \"primary key\": [\"battle.id\", \"ship.id\", \"death.id\"], \"tables\": [\"battle(id, name, date, bulgarian commander, latin commander, result)\", \"ship(lost in battle, id, name, tonnage, ship type, location, disposition of ship)\", \"death(caused by ship id, id, note, killed, injured)\"]}",
        "output": "SELECT max(killed) ,  min(killed) FROM death"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average number of injuries caused each time?, ###db_name: 'battle_death',###database_schema: {\"foreign key\": [\"ship.lost_in_battle->battle.id\", \"death.caused_by_ship_id->ship.id\"], \"primary key\": [\"battle.id\", \"ship.id\", \"death.id\"], \"tables\": [\"battle(id, name, date, bulgarian commander, latin commander, result)\", \"ship(lost in battle, id, name, tonnage, ship type, location, disposition of ship)\", \"death(caused by ship id, id, note, killed, injured)\"]}",
        "output": "SELECT avg(injured) FROM death"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the death and injury situations caused by the ship with tonnage 't'?, ###db_name: 'battle_death',###database_schema: {\"foreign key\": [\"ship.lost_in_battle->battle.id\", \"death.caused_by_ship_id->ship.id\"], \"primary key\": [\"battle.id\", \"ship.id\", \"death.id\"], \"tables\": [\"battle(id, name, date, bulgarian commander, latin commander, result)\", \"ship(lost in battle, id, name, tonnage, ship type, location, disposition of ship)\", \"death(caused by ship id, id, note, killed, injured)\"]}",
        "output": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the name and results of the battles when the bulgarian commander is not 'Boril', ###db_name: 'battle_death',###database_schema: {\"foreign key\": [\"ship.lost_in_battle->battle.id\", \"death.caused_by_ship_id->ship.id\"], \"primary key\": [\"battle.id\", \"ship.id\", \"death.id\"], \"tables\": [\"battle(id, name, date, bulgarian commander, latin commander, result)\", \"ship(lost in battle, id, name, tonnage, ship type, location, disposition of ship)\", \"death(caused by ship id, id, note, killed, injured)\"]}",
        "output": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the different ids and names of the battles that lost any 'Brig' type shipes?, ###db_name: 'battle_death',###database_schema: {\"foreign key\": [\"ship.lost_in_battle->battle.id\", \"death.caused_by_ship_id->ship.id\"], \"primary key\": [\"battle.id\", \"ship.id\", \"death.id\"], \"tables\": [\"battle(id, name, date, bulgarian commander, latin commander, result)\", \"ship(lost in battle, id, name, tonnage, ship type, location, disposition of ship)\", \"death(caused by ship id, id, note, killed, injured)\"]}",
        "output": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the ids and names of the battles that led to more than 10 people killed in total., ###db_name: 'battle_death',###database_schema: {\"foreign key\": [\"ship.lost_in_battle->battle.id\", \"death.caused_by_ship_id->ship.id\"], \"primary key\": [\"battle.id\", \"ship.id\", \"death.id\"], \"tables\": [\"battle(id, name, date, bulgarian commander, latin commander, result)\", \"ship(lost in battle, id, name, tonnage, ship type, location, disposition of ship)\", \"death(caused by ship id, id, note, killed, injured)\"]}",
        "output": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the ship id and name that caused most total injuries?, ###db_name: 'battle_death',###database_schema: {\"foreign key\": [\"ship.lost_in_battle->battle.id\", \"death.caused_by_ship_id->ship.id\"], \"primary key\": [\"battle.id\", \"ship.id\", \"death.id\"], \"tables\": [\"battle(id, name, date, bulgarian commander, latin commander, result)\", \"ship(lost in battle, id, name, tonnage, ship type, location, disposition of ship)\", \"death(caused by ship id, id, note, killed, injured)\"]}",
        "output": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?, ###db_name: 'battle_death',###database_schema: {\"foreign key\": [\"ship.lost_in_battle->battle.id\", \"death.caused_by_ship_id->ship.id\"], \"primary key\": [\"battle.id\", \"ship.id\", \"death.id\"], \"tables\": [\"battle(id, name, date, bulgarian commander, latin commander, result)\", \"ship(lost in battle, id, name, tonnage, ship type, location, disposition of ship)\", \"death(caused by ship id, id, note, killed, injured)\"]}",
        "output": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many different results are there for the battles?, ###db_name: 'battle_death',###database_schema: {\"foreign key\": [\"ship.lost_in_battle->battle.id\", \"death.caused_by_ship_id->ship.id\"], \"primary key\": [\"battle.id\", \"ship.id\", \"death.id\"], \"tables\": [\"battle(id, name, date, bulgarian commander, latin commander, result)\", \"ship(lost in battle, id, name, tonnage, ship type, location, disposition of ship)\", \"death(caused by ship id, id, note, killed, injured)\"]}",
        "output": "SELECT count(DISTINCT RESULT) FROM battle"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many battles did not lose any ship with tonnage '225'?, ###db_name: 'battle_death',###database_schema: {\"foreign key\": [\"ship.lost_in_battle->battle.id\", \"death.caused_by_ship_id->ship.id\"], \"primary key\": [\"battle.id\", \"ship.id\", \"death.id\"], \"tables\": [\"battle(id, name, date, bulgarian commander, latin commander, result)\", \"ship(lost in battle, id, name, tonnage, ship type, location, disposition of ship)\", \"death(caused by ship id, id, note, killed, injured)\"]}",
        "output": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta', ###db_name: 'battle_death',###database_schema: {\"foreign key\": [\"ship.lost_in_battle->battle.id\", \"death.caused_by_ship_id->ship.id\"], \"primary key\": [\"battle.id\", \"ship.id\", \"death.id\"], \"tables\": [\"battle(id, name, date, bulgarian commander, latin commander, result)\", \"ship(lost in battle, id, name, tonnage, ship type, location, disposition of ship)\", \"death(caused by ship id, id, note, killed, injured)\"]}",
        "output": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'., ###db_name: 'battle_death',###database_schema: {\"foreign key\": [\"ship.lost_in_battle->battle.id\", \"death.caused_by_ship_id->ship.id\"], \"primary key\": [\"battle.id\", \"ship.id\", \"death.id\"], \"tables\": [\"battle(id, name, date, bulgarian commander, latin commander, result)\", \"ship(lost in battle, id, name, tonnage, ship type, location, disposition of ship)\", \"death(caused by ship id, id, note, killed, injured)\"]}",
        "output": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the notes of the death events which has substring 'East'?, ###db_name: 'battle_death',###database_schema: {\"foreign key\": [\"ship.lost_in_battle->battle.id\", \"death.caused_by_ship_id->ship.id\"], \"primary key\": [\"battle.id\", \"ship.id\", \"death.id\"], \"tables\": [\"battle(id, name, date, bulgarian commander, latin commander, result)\", \"ship(lost in battle, id, name, tonnage, ship type, location, disposition of ship)\", \"death(caused by ship id, id, note, killed, injured)\"]}",
        "output": "SELECT note FROM death WHERE note LIKE '%East%'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:what are all the addresses including line 1 and line 2?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT line_1 ,  line_2 FROM addresses"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the first and second line for all addresses?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT line_1 ,  line_2 FROM addresses"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many courses in total are listed?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT count(*) FROM Courses"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many courses are there?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT count(*) FROM Courses"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How is the math course described?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT course_description FROM Courses WHERE course_name  =  'math'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the descriptions for all the math courses?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT course_description FROM Courses WHERE course_name  =  'math'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the zip code of the address in the city Port Chelsea?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the zip code for Port Chelsea?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which department offers the most number of degrees? List department name and id., ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name and id of the department with the most number of degrees ?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many departments offer any degree?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT count(DISTINCT department_id) FROM Degree_Programs"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many different departments offer degrees?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT count(DISTINCT department_id) FROM Degree_Programs"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many different degree names are offered?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many different degrees are offered?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many degrees does the engineering department offer?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many degrees does the engineering department have?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names and descriptions of all the sections?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT section_name ,  section_description FROM Sections"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names and descriptions for all the sections?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT section_name ,  section_description FROM Sections"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names and id of courses having at most 2 sections?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names and ids of every course with less than 2 sections?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the section_name in reversed lexicographical order., ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT section_name FROM Sections ORDER BY section_name DESC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of the sections in reverse alphabetical order?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT section_name FROM Sections ORDER BY section_name DESC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the semester which most student registered in? Show both the name and the id., ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:For each semester, what is the name and id of the one with the most students registered?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the description of the department whose name has the substring the computer?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the department description for the one whose name has the word computer?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id., ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Who is enrolled in a Bachelor degree program? List the first name, middle name, last name., ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the first, middle, and last names for everybody enrolled in a Bachelors program?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the kind of program which most number of students are enrolled in?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the degree summary name that has the most number of students enrolled?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the program which most number of students are enrolled in. List both the id and the summary., ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the program id and the summary of the degree that has the most students enrolled?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id., ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which semesters do not have any student enrolled? List the semester name., ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name of the semester with no students enrolled?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are all the course names of the courses which ever have students enrolled in?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of all courses that have some students enrolled?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What's the name of the course with most number of enrollments?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name of the course with the most students enrolled?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program., ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the last name of the students who live in North Carolina but have not registered in any degree programs?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the date and id of the transcript with at least 2 course results., ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the date and id of the transcript with at least 2 courses listed?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the phone number of the man with the first name Timmothy and the last name Ward?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the mobile phone number of the student named Timmothy Ward ?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Who is the first student to register? List the first name, middle name and last name., ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the first, middle, and last name of the first student to register?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Who is the earliest graduate of the school? List the first name, middle name and last name., ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the first, middle, and last name of the earliest school graduate?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Whose permanent address is different from his or her current address? List his or her first name., ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the first name of the student whose permanent address is different from his or her current one?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which address holds the most number of students currently? List the address id and all lines., ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the id, line 1, and line 2 of the address with the most students?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:On average, when were the transcripts printed?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT avg(transcript_date) FROM Transcripts"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average transcript date?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT avg(transcript_date) FROM Transcripts"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:When is the first transcript released? List the date and details., ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the earliest date of a transcript release, and what details can you tell me?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many transcripts are released?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT count(*) FROM Transcripts"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many transcripts are listed?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT count(*) FROM Transcripts"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the last transcript release date?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:When was the last transcript released?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id., ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the date of the transcript which shows the least number of results, also list the id., ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the date and id of the transcript with the least number of results?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the semester when both Master students and Bachelor students got enrolled in., ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the id of the semester that had both Masters and Bachelors students enrolled?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many different addresses do the students currently live?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT count(DISTINCT current_address_id) FROM Students"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the different addresses that have students living there?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT count(DISTINCT current_address_id) FROM Students"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List all the student details in reversed lexicographical order., ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What other details can you tell me about students in reverse alphabetical order?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Describe the section h., ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT section_description FROM Sections WHERE section_name  =  'h'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the description for the section named h?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "SELECT section_description FROM Sections WHERE section_name  =  'h'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 ., ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?, ###db_name: 'student_transcripts_tracking',###database_schema: {\"foreign key\": [\"degree_programs.department_id->departments.department_id\", \"sections.course_id->courses.course_id\", \"students.permanent_address_id->addresses.address_id\", \"students.current_address_id->addresses.address_id\", \"student_enrolment.student_id->students.student_id\", \"student_enrolment.semester_id->semesters.semester_id\", \"student_enrolment.degree_program_id->degree_programs.degree_program_id\", \"student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id\", \"student_enrolment_courses.course_id->courses.course_id\", \"transcript_contents.transcript_id->transcripts.transcript_id\", \"transcript_contents.student_course_id->student_enrolment_courses.student_course_id\"], \"primary key\": [\"addresses.address_id\", \"courses.course_id\", \"departments.department_id\", \"degree_programs.degree_program_id\", \"sections.section_id\", \"semesters.semester_id\", \"students.student_id\", \"student_enrolment.student_enrolment_id\", \"student_enrolment_courses.student_course_id\", \"transcripts.transcript_id\"], \"tables\": [\"addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)\", \"courses(course id, course name, course description, other details)\", \"departments(department id, department name, department description, other details)\", \"degree programs(degree program id, department id, degree summary name, degree summary description, other details)\", \"sections(section id, course id, section name, section description, other details)\", \"semesters(semester id, semester name, semester description, other details)\", \"students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)\", \"student enrolment(student enrolment id, degree program id, semester id, student id, other details)\", \"student enrolment courses(student course id, course id, student enrolment id)\", \"transcripts(transcript id, transcript date, other details)\", \"transcript contents(student course id, transcript id)\"]}",
        "output": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the title of all cartoons in alphabetical order., ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT Title FROM Cartoon ORDER BY title"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the titles of the cartoons sorted alphabetically?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT Title FROM Cartoon ORDER BY title"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List all cartoon directed by \"Ben Jones\"., ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of all cartoons directed by Ben Jones?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many cartoons were written by \"Joseph Kuhr\"?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the number of cartoones written by Joseph Kuhr?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:list all cartoon titles and their directors ordered by their air date, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name and directors of all the cartoons that are ordered by air date?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\"., ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which country has the most of TV Channels? List the country and number of TV Channels it has., ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the country with the most number of TV Channels and how many does it have?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the number of different series names and contents in the TV Channel table., ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many different series and contents are listed in the TV Channel table?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the content of TV Channel with serial name \"Sky Radio\"?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the content of the series Sky Radio?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the Package Option of TV Channel with serial name \"Sky Radio\"?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the Package Options of the TV Channels whose series names are Sky Radio?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many TV Channel using language English?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many TV Channels use the English language?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the language used least number of TV Channel. List language and number of TV Channel., ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the languages used by the least number of TV Channels and how many channels use it?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List each language and the number of TV Channels using it., ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:For each language, list the number of TV Channels that use it., ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name., ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\"., ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the Episode of all TV series sorted by rating., ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT Episode FROM TV_series ORDER BY rating"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are all of the episodes ordered by ratings?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT Episode FROM TV_series ORDER BY rating"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List top 3 highest Rating  TV series. List the TV series's Episode and Rating., ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are 3 most highly rated episodes in the TV series table and what were those ratings?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is minimum and maximum share of TV series?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the maximum and minimum share for the TV series?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the air date of TV series with Episode \"A Love of a Lifetime\"?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:When did the episode \"A Love of a Lifetime\" air?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the weekly rank for the episode \"A Love of a Lifetime\"?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name., ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name of the series that has the episode \"A Love of a Lifetime\"?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\"., ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the episode for the TV series named \"Sky Radio\"?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the number of cartoons directed by each of the listed directors., ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many cartoons did each director create?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the production code and channel of the most recently aired cartoon ., ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the produdction code and channel of the most recent cartoon ?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the package choice and series name of the TV channel that has high definition TV., ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the package options and the name of the series for the TV Channel that supports high definition TV?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:which countries' tv channels are playing some cartoon written by Todd Casey?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the countries that have cartoons on TV that were written by Todd Casey?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:which countries' tv channels are not playing any cartoon written by Todd Casey?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the countries that are not playing cartoons written by Todd Casey?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:find the pixel aspect ratio and nation of the tv channels that do not use English., ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the pixel aspect ratio and country of origin for all TV channels that do not use English?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:find id of the tv channels that from the countries where have more than two tv channels., ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the ids of all tv channels that have more than 2 TV channels?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:find the id of tv channels that do not play any cartoon directed by Ben Jones., ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:find the package option of the tv channel that do not have any cartoon directed by Ben Jones., ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?, ###db_name: 'tvshow',###database_schema: {\"foreign key\": [\"tv_series.channel->tv_channel.id\", \"cartoon.channel->tv_channel.id\"], \"primary key\": [\"tv_channel.id\", \"tv_series.id\", \"cartoon.id\"], \"tables\": [\"tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)\", \"tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)\", \"cartoon(id, title, directed by, written by, original air date, production code, channel)\"]}",
        "output": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many poker players are there?, ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT count(*) FROM poker_player"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of poker players., ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT count(*) FROM poker_player"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the earnings of poker players in descending order., ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the earnings of poker players, ordered descending by value?, ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the final tables made and the best finishes of poker players., ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the final tables made and best finishes for all poker players?, ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average earnings of poker players?, ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT avg(Earnings) FROM poker_player"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the average earnings across all poker players., ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT avg(Earnings) FROM poker_player"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the money rank of the poker player with the highest earnings?, ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the money rank of the player with the greatest earnings., ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the maximum number of final tables made among poker players with earnings less than 200000?, ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the maximum final tables made across all poker players who have earnings below 200000., ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of poker players?, ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the names of all the poker players., ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of poker players whose earnings is higher than 300000?, ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the names of poker players who have earnings above 300000., ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the names of poker players ordered by the final tables made in ascending order., ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of poker players, ordered ascending by the number of final tables they have made?, ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the birth date of the poker player with the lowest earnings?, ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the birth date of the poker player with the lowest earnings., ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the money rank of the tallest poker player?, ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the money rank of the poker player with the greatest height., ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average earnings of poker players with height higher than 200?, ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give average earnings of poker players who are taller than 200., ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of poker players in descending order of earnings?, ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the names of poker players sorted by their earnings descending., ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are different nationalities of people and the corresponding number of people from each nation?, ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many people are there of each nationality?, ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the most common nationality of people?, ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the nationality that is most common across all people., ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the nationalities that are shared by at least two people?, ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the nationalities for which there are two or more people., ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the names and birth dates of people in ascending alphabetical order of name., ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names and birth dates of people, ordered by their names in alphabetical order?, ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show names of people whose nationality is not \"Russia\"., ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT Name FROM people WHERE Nationality != \"Russia\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of people who are not from Russia?, ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT Name FROM people WHERE Nationality != \"Russia\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the names of people that are not poker players., ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of people who do not play poker?, ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many distinct nationalities are there?, ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT count(DISTINCT Nationality) FROM people"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of different nationalities., ###db_name: 'poker_player',###database_schema: {\"foreign key\": [\"poker_player.people_id->people.people_id\"], \"primary key\": [\"poker_player.poker_player_id\", \"people.people_id\"], \"tables\": [\"poker player(poker player id, people id, final table made, best finish, money rank, earnings)\", \"people(people id, nationality, name, birth date, height)\"]}",
        "output": "SELECT count(DISTINCT Nationality) FROM people"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many states are there?, ###db_name: 'voter_1',###database_schema: {\"foreign key\": [\"votes.contestant_number->contestants.contestant_number\", \"votes.state->area_code_state.state\"], \"primary key\": [\"area_code_state.area_code\", \"contestants.contestant_number\", \"votes.vote_id\"], \"tables\": [\"area code state(area code, state)\", \"contestants(contestant number, contestant name)\", \"votes(vote id, phone number, state, contestant number, created)\"]}",
        "output": "SELECT count(*) FROM area_code_state"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the contestant numbers and names, ordered by contestant name descending., ###db_name: 'voter_1',###database_schema: {\"foreign key\": [\"votes.contestant_number->contestants.contestant_number\", \"votes.state->area_code_state.state\"], \"primary key\": [\"area_code_state.area_code\", \"contestants.contestant_number\", \"votes.vote_id\"], \"tables\": [\"area code state(area code, state)\", \"contestants(contestant number, contestant name)\", \"votes(vote id, phone number, state, contestant number, created)\"]}",
        "output": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the vote ids, phone numbers and states of all votes., ###db_name: 'voter_1',###database_schema: {\"foreign key\": [\"votes.contestant_number->contestants.contestant_number\", \"votes.state->area_code_state.state\"], \"primary key\": [\"area_code_state.area_code\", \"contestants.contestant_number\", \"votes.vote_id\"], \"tables\": [\"area code state(area code, state)\", \"contestants(contestant number, contestant name)\", \"votes(vote id, phone number, state, contestant number, created)\"]}",
        "output": "SELECT vote_id ,  phone_number ,  state FROM votes"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the maximum and minimum values of area codes?, ###db_name: 'voter_1',###database_schema: {\"foreign key\": [\"votes.contestant_number->contestants.contestant_number\", \"votes.state->area_code_state.state\"], \"primary key\": [\"area_code_state.area_code\", \"contestants.contestant_number\", \"votes.vote_id\"], \"tables\": [\"area code state(area code, state)\", \"contestants(contestant number, contestant name)\", \"votes(vote id, phone number, state, contestant number, created)\"]}",
        "output": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is last date created of votes from the state 'CA'?, ###db_name: 'voter_1',###database_schema: {\"foreign key\": [\"votes.contestant_number->contestants.contestant_number\", \"votes.state->area_code_state.state\"], \"primary key\": [\"area_code_state.area_code\", \"contestants.contestant_number\", \"votes.vote_id\"], \"tables\": [\"area code state(area code, state)\", \"contestants(contestant number, contestant name)\", \"votes(vote id, phone number, state, contestant number, created)\"]}",
        "output": "SELECT max(created) FROM votes WHERE state  =  'CA'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of the contestants whose names are not 'Jessie Alloway', ###db_name: 'voter_1',###database_schema: {\"foreign key\": [\"votes.contestant_number->contestants.contestant_number\", \"votes.state->area_code_state.state\"], \"primary key\": [\"area_code_state.area_code\", \"contestants.contestant_number\", \"votes.vote_id\"], \"tables\": [\"area code state(area code, state)\", \"contestants(contestant number, contestant name)\", \"votes(vote id, phone number, state, contestant number, created)\"]}",
        "output": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the distinct states and create time of all votes?, ###db_name: 'voter_1',###database_schema: {\"foreign key\": [\"votes.contestant_number->contestants.contestant_number\", \"votes.state->area_code_state.state\"], \"primary key\": [\"area_code_state.area_code\", \"contestants.contestant_number\", \"votes.vote_id\"], \"tables\": [\"area code state(area code, state)\", \"contestants(contestant number, contestant name)\", \"votes(vote id, phone number, state, contestant number, created)\"]}",
        "output": "SELECT DISTINCT state ,  created FROM votes"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the contestant numbers and names of the contestants who had at least two votes?, ###db_name: 'voter_1',###database_schema: {\"foreign key\": [\"votes.contestant_number->contestants.contestant_number\", \"votes.state->area_code_state.state\"], \"primary key\": [\"area_code_state.area_code\", \"contestants.contestant_number\", \"votes.vote_id\"], \"tables\": [\"area code state(area code, state)\", \"contestants(contestant number, contestant name)\", \"votes(vote id, phone number, state, contestant number, created)\"]}",
        "output": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?, ###db_name: 'voter_1',###database_schema: {\"foreign key\": [\"votes.contestant_number->contestants.contestant_number\", \"votes.state->area_code_state.state\"], \"primary key\": [\"area_code_state.area_code\", \"contestants.contestant_number\", \"votes.vote_id\"], \"tables\": [\"area code state(area code, state)\", \"contestants(contestant number, contestant name)\", \"votes(vote id, phone number, state, contestant number, created)\"]}",
        "output": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the number of votes from state 'NY' or 'CA'?, ###db_name: 'voter_1',###database_schema: {\"foreign key\": [\"votes.contestant_number->contestants.contestant_number\", \"votes.state->area_code_state.state\"], \"primary key\": [\"area_code_state.area_code\", \"contestants.contestant_number\", \"votes.vote_id\"], \"tables\": [\"area code state(area code, state)\", \"contestants(contestant number, contestant name)\", \"votes(vote id, phone number, state, contestant number, created)\"]}",
        "output": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many contestants did not get voted?, ###db_name: 'voter_1',###database_schema: {\"foreign key\": [\"votes.contestant_number->contestants.contestant_number\", \"votes.state->area_code_state.state\"], \"primary key\": [\"area_code_state.area_code\", \"contestants.contestant_number\", \"votes.vote_id\"], \"tables\": [\"area code state(area code, state)\", \"contestants(contestant number, contestant name)\", \"votes(vote id, phone number, state, contestant number, created)\"]}",
        "output": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the area code in which the most voters voted?, ###db_name: 'voter_1',###database_schema: {\"foreign key\": [\"votes.contestant_number->contestants.contestant_number\", \"votes.state->area_code_state.state\"], \"primary key\": [\"area_code_state.area_code\", \"contestants.contestant_number\", \"votes.vote_id\"], \"tables\": [\"area code state(area code, state)\", \"contestants(contestant number, contestant name)\", \"votes(vote id, phone number, state, contestant number, created)\"]}",
        "output": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?, ###db_name: 'voter_1',###database_schema: {\"foreign key\": [\"votes.contestant_number->contestants.contestant_number\", \"votes.state->area_code_state.state\"], \"primary key\": [\"area_code_state.area_code\", \"contestants.contestant_number\", \"votes.vote_id\"], \"tables\": [\"area code state(area code, state)\", \"contestants(contestant number, contestant name)\", \"votes(vote id, phone number, state, contestant number, created)\"]}",
        "output": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'., ###db_name: 'voter_1',###database_schema: {\"foreign key\": [\"votes.contestant_number->contestants.contestant_number\", \"votes.state->area_code_state.state\"], \"primary key\": [\"area_code_state.area_code\", \"contestants.contestant_number\", \"votes.vote_id\"], \"tables\": [\"area code state(area code, state)\", \"contestants(contestant number, contestant name)\", \"votes(vote id, phone number, state, contestant number, created)\"]}",
        "output": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the names of the contestants whose names contain the substring 'Al' ., ###db_name: 'voter_1',###database_schema: {\"foreign key\": [\"votes.contestant_number->contestants.contestant_number\", \"votes.state->area_code_state.state\"], \"primary key\": [\"area_code_state.area_code\", \"contestants.contestant_number\", \"votes.vote_id\"], \"tables\": [\"area code state(area code, state)\", \"contestants(contestant number, contestant name)\", \"votes(vote id, phone number, state, contestant number, created)\"]}",
        "output": "select contestant_name from contestants where contestant_name like \"%al%\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of all the countries that became independent after 1950?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name FROM country WHERE IndepYear  >  1950"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the names of the nations that were founded after 1950., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name FROM country WHERE IndepYear  >  1950"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many countries have a republic as their form of government?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many countries have governments that are republics?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the total surface area of the countries in the Caribbean region?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How much surface area do the countires in the Carribean cover together?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which continent is Anguilla in?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the continent name which Anguilla belongs to?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which region is the city Kabul located in?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What region is Kabul in?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which language is the most popular in Aruba?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What language is predominantly spoken in Aruba?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the population and life expectancies in Brazil?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give me Brazil\u2019s population and life expectancies., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the region and population of Angola?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What region does Angola belong to and what is its population?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average expected life expectancy for countries in the region of Central Africa?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How long is the people\u2019s average life expectancy in Central Africa?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name of country that has the shortest life expectancy in Asia?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the name of the country in Asia with the lowest life expectancy., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the total population and maximum GNP in Asia?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many people live in Asia, and what is the largest GNP among them?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average life expectancy in African countries that are republics?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the average life expectancy for countries in Africa which are republics?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the total surface area of the continents Asia and Europe?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the total surface area covered by countries in Asia or Europe., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many people live in Gelderland district?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the total population of Gelderland district?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average GNP and total population in all nations whose government is US territory?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the mean GNP and total population of nations which are considered US territory., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many unique languages are spoken in the world?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the number of distinct languages used around the world?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many type of governments are in Africa?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many different forms of governments are there in Africa?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the total number of languages used in Aruba?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many languages are spoken in Aruba?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many official languages does Afghanistan have?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many official languages are spoken in Afghanistan?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is name of the country that speaks the largest number of languages?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the name of the nation that uses the greatest amount of languages., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which continent has the most diverse languages?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which continent speaks the most languages?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many countries speak both English and Dutch?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the number of nations that use English and Dutch?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of nations speak both English and French?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the names of nations that speak both English and French., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of nations where both English and French are official languages?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the names of countries with English and French as official languages., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the number of distinct continents where Chinese is spoken?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many continents speak Chinese?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the regions that use English or Dutch?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which regions speak Dutch or English?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the countries where either English or Dutch is the official language ?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which countries have either English or Dutch as an official language?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which language is the most popular on the Asian continent?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the language that is used by the largest number of Asian nations?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which languages are spoken by only one country in republic governments?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What languages are only used by a single country with a republic government?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the city with the largest population that uses English., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the most populace city that speaks English?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the name, population and expected life length of asian country with the largest area?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the name, population, and life expectancy of the largest Asian country by land?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is average life expectancy in the countries where English is not the official language?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the mean life expectancy of countries in which English is not the official language., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the total number of people living in the nations that do not use English?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many people live in countries that do not speak English?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the official language spoken in the country whose head of state is Beatrix?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the official language used in the country the name of whose head of state is Beatrix., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the total number of unique official languages spoken in the countries that are founded before 1930?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:For the countries founded before 1930, what is the total number of distinct official languages?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the countries that have greater surface area than any country in Europe?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which countries have greater area than that of any country in Europe?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the African countries that have a  population less than any country in Asia?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which African countries have a smaller population than that of any country in Asia?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which Asian countries have a population that is larger than any country in Africa?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the Asian countries which have a population larger than that of any country in Africa?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the country codes for countries that do not speak English?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the country codes for countries that do not speak English., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the country codes of countries where people use languages other than English?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the country codes for countries in which people speak langauges that are not English., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the codes of the countries that do not speak English and whose government forms are not Republic?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the codes of countries that do not speak English and do not have Republics for governments., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which cities are in European countries where English is not the official language?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of cities in Europe for which English is not the official language?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which unique cities are in Asian countries where Chinese is the official language ?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the different names of cities that are in Asia and for which Chinese is the official language., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the name, independence year, and surface area of the country with the smallest population?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the name, year of independence, and surface area of the country that has the lowest population., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the population, name and leader of the country with the largest area?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the name, population, and head of state for the country that has the largest area., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of countries that speak more than 2 languages, as well as how many languages they speak?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the number of cities in each district whose population is greater than the average population of cities?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many cities in each district have a population that is above the average population across all cities?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the government form name and total population for each government form whose average life expectancy is longer than 72., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names and areas of countries with the top 5 largest area?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the names and surface areas of the 5 largest countries., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are names of countries with the top 3 largest population?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the names of the 3 most populated countries., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of the nations with the 3 lowest populations?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the names of the 3 countries with the fewest people., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:how many countries are in Asia?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of countries in Asia., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of the countries that are in the continent of Europe and have a population of 80000?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the names of countries that are in Europe and have a population equal to 80000., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 ., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the cities whose population is between 160000 and 900000?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the names of cities that have a population between 160000 and 900000 ., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "select name from city where population between 160000 and 900000"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which language is spoken by the largest number of countries?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the language that is spoken in the most countries., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the language spoken by the largest percentage of people in each country?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the total number of countries where Spanish is spoken by the largest percentage of people?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of countries for which Spanish is the predominantly spoken language., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the codes of countries where Spanish is spoken by the largest percentage of people?, ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the codes of countries for which Spanish is the predominantly spoken language., ###db_name: 'world_1',###database_schema: {\"foreign key\": [\"city.countrycode->country.code\", \"countrylanguage.countrycode->country.code\"], \"primary key\": [\"city.id\", \"country.code\", \"countrylanguage.countrycode\"], \"tables\": [\"city(id, name, country code, district, population)\", \"sqlite sequence(name, seq)\", \"country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)\", \"countrylanguage(countrycode, language, is official, percentage)\"]}",
        "output": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many conductors are there?, ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT count(*) FROM conductor"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of conductors., ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT count(*) FROM conductor"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the names of conductors in ascending order of age., ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT Name FROM conductor ORDER BY Age ASC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of conductors, ordered by age?, ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT Name FROM conductor ORDER BY Age ASC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of conductors whose nationalities are not \"USA\"?, ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT Name FROM conductor WHERE Nationality != 'USA'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the names of conductors that do not have the nationality \"USA\"., ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT Name FROM conductor WHERE Nationality != 'USA'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the record companies of orchestras in descending order of years in which they were founded?, ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the record companies of orchestras, sorted descending by the years in which they were founded., ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average attendance of shows?, ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT avg(Attendance) FROM SHOW"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the average attendance across all shows., ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT avg(Attendance) FROM SHOW"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the maximum and minimum share of performances whose type is not \"Live final\"., ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the maximum and minimum shares for performances that do not have the type \"Live final\"., ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many different nationalities do conductors have?, ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT count(DISTINCT Nationality) FROM conductor"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of different nationalities of conductors., ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT count(DISTINCT Nationality) FROM conductor"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List names of conductors in descending order of years of work., ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of conductors, sorted descending by the number of years they have worked?, ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the name of the conductor with the most years of work., ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name of the conductor who has worked the greatest number of years?, ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the names of conductors and the orchestras they have conducted., ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of conductors as well as the corresonding orchestras that they have conducted?, ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the names of conductors that have conducted more than one orchestras., ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of conductors who have conducted at more than one orchestra?, ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the name of the conductor that has conducted the most number of orchestras., ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name of the conductor who has conducted the most orchestras?, ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Please show the name of the conductor that has conducted orchestras founded after 2008., ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of conductors who have conducted orchestras founded after the year 2008?, ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Please show the different record companies and the corresponding number of orchestras., ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many orchestras does each record company manage?, ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Please show the record formats of orchestras in ascending order of count., ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the major record formats of orchestras, sorted by their frequency?, ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the record company shared by the most number of orchestras., ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the record company used by the greatest number of orchestras?, ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the names of orchestras that have no performance., ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the orchestras that do not have any performances?, ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the record companies shared by orchestras founded before 2003 and after 2003., ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?, ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the number of orchestras whose record format is \"CD\" or \"DVD\"., ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of orchestras that have CD or DVD as their record format., ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the years in which orchestras that have given more than one performance are founded., ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are years of founding for orchestras that have had more than a single performance?, ###db_name: 'orchestra',###database_schema: {\"foreign key\": [\"orchestra.conductor_id->conductor.conductor_id\", \"performance.orchestra_id->orchestra.orchestra_id\", \"show.performance_id->performance.performance_id\"], \"primary key\": [\"conductor.conductor_id\", \"orchestra.orchestra_id\", \"performance.performance_id\"], \"tables\": [\"conductor(conductor id, name, age, nationality, year of work)\", \"orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)\", \"performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)\", \"show(show id, performance id, if first show, result, attendance)\"]}",
        "output": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many high schoolers are there?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT count(*) FROM Highschooler"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of high schoolers., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT count(*) FROM Highschooler"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the names and grades of each high schooler., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT name ,  grade FROM Highschooler"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names and grades for each high schooler?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT name ,  grade FROM Highschooler"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show all the grades of the high schoolers., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT grade FROM Highschooler"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the grade of each high schooler?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT grade FROM Highschooler"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What grade is Kyle in?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the grade for the high schooler named Kyle., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the names of all high schoolers in grade 10., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT name FROM Highschooler WHERE grade  =  10"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of all high schoolers in grade 10?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT name FROM Highschooler WHERE grade  =  10"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the ID of the high schooler named Kyle., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is Kyle's id?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many high schoolers are there in grade 9 or 10?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of high schoolers in grades 9 or 10., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the number of high schoolers for each grade., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many high schoolers are in each grade?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which grade has the most high schoolers?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the grade that has the greatest number of high schoolers., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show me all grades that have at least 4 students., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which grades have 4 or more high schoolers?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the student IDs and numbers of friends corresponding to each., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many friends does each student have?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the names of high school students and their corresponding number of friends., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of the high schoolers and how many friends does each have?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name of the high schooler who has the greatest number of friends?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the name of the high school student with the most friends., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the names of high schoolers who have at least 3 friends., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of high schoolers who have 3 or more friends?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the names of all of the high schooler Kyle's friends., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the names of friends of the high school student Kyle., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many friends does the high school student Kyle have?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of friends Kyle has., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show ids of all students who do not have any friends., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the ids of high school students who do not have friends?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show names of all high school students who do not have any friends., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of students who have no friends?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the ids of high schoolers who have friends and are also liked by someone else., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the ids of students who both have friends and are liked?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show name of all students who have some friends and also are liked by someone else., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of high schoolers who both have friends and are liked?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of likes for each student id., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many likes correspond to each student id?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the names of high schoolers who have likes, and numbers of likes for each., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of high schoolers who have likes, and how many likes does each have?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name of the high schooler who has the greatest number of likes?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give the name of the student with the most likes., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the names of students who have at least 2 likes., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of students who have 2 or more likes?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the names of students who have a grade higher than 5 and have at least 2 friends., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many likes does Kyle have?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the number of likes that the high schooler named Kyle has., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the average grade of all students who have some friends., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average grade of students who have friends?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the minimum grade of students who have no friends., ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the lowest grade of students who do not have any friends?, ###db_name: 'network_1',###database_schema: {\"foreign key\": [\"friend.friend_id->highschooler.id\", \"friend.student_id->highschooler.id\", \"likes.student_id->highschooler.id\", \"likes.liked_id->highschooler.id\"], \"primary key\": [\"highschooler.id\", \"friend.student_id\", \"likes.student_id\"], \"tables\": [\"high schooler(id, name, grade)\", \"friend(student id, friend id)\", \"likes(student id, liked id)\"]}",
        "output": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which states have both owners and professionals living there?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the states where both owners and professionals live., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average age of the dogs who have gone through any treatments?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the average age of the dogs who went through treatments., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which dogs have not cost their owner more than 1000 for treatment ? List the dog names ., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which first names are used for professionals or owners but are not used as dog names?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the first names that are used for professionals or owners but are not used as dog names., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which professional did not operate any treatment on dogs? List the professional's id, role and email., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give me the id, role and email of the professionals who did not perform any treatment on dogs., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which owner owns the most dogs? List the owner id, first name and last name., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the owner id, first name and last name of the owner who has the most dogs., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which professionals have done at least two treatments? List the professional's id, role, and first name., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the id, role, and first name of the professionals who have performed two or more treatments?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name of the breed with the most dogs?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which breed do the most dogs have? Give me the breed name., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which owner has paid for the most treatments on his or her dogs? List the owner id and last name., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the description of the treatment type that costs the least money in total?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Give me the description of the treatment type whose total cost is the lowest., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the owner id and zip code of the owner who spent the most money in total for his or her dogs., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which professionals have done at least two types of treatments? List the professional id and cell phone., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the id and cell phone of the professionals who operate two or more types of treatments., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the first name and last name of the professionals who have done treatment with cost below average?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the date of each treatment, together with the first name of the professional who operated it., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the date and the operating professional's first name of each treatment?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the cost of each treatment and the corresponding treatment type description., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the cost and treatment type description of each treatment?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List each owner's first name, last name, and the size of his for her dog., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are each owner's first name, last name, and the size of their dog?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List pairs of the owner's first name and the dogs's name., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are each owner's first name and their dogs's name?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the names of the dogs of the rarest breed and the treatment dates of them., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which dogs are of the rarest breed? Show their names and treatment dates., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the first names of owners living in Virginia and the names of dogs they own., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the arriving date and the departing date of the dogs who have gone through a treatment?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the arriving date and the departing date of the dogs that received a treatment., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the last name of the owner owning the youngest dog., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Who owns the youngest dog? Give me his or her last name., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the arriving date and the departing date of all the dogs?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT date_arrived ,  date_departed FROM Dogs"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the arrival date and the departure date for all the dogs., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT date_arrived ,  date_departed FROM Dogs"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many dogs went through any treatments?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT count(DISTINCT dog_id) FROM Treatments"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of dogs that went through a treatment., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT count(DISTINCT dog_id) FROM Treatments"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many professionals have performed any treatment to dogs?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT count(DISTINCT professional_id) FROM Treatments"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the number of professionals who have ever treated dogs., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT count(DISTINCT professional_id) FROM Treatments"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the role, street, city and state of the professionals living in a city that contains the substring 'West'., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many dogs have an age below the average?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Count the number of dogs of an age below the average., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How much does the most recent treatment cost?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show me the cost of the most recently performed treatment., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many dogs have not gone through any treatment?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Tell me the number of dogs that have not received any treatment ., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many owners temporarily do not have any dogs?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the number of owners who do not own any dogs at this moment., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many professionals did not operate any treatment on dogs?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the number of professionals who have not treated any dogs., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the average age of all the dogs?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT avg(age) FROM Dogs"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Compute the average age of all the dogs., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT avg(age) FROM Dogs"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the age of the oldest dog?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT max(age) FROM Dogs"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Tell me the age of the oldest dog., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT max(age) FROM Dogs"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How much does each charge type costs? List both charge type and amount., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT charge_type ,  charge_amount FROM Charges"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List each charge type and its amount., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT charge_type ,  charge_amount FROM Charges"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How much does the most expensive charge type costs?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT max(charge_amount) FROM Charges"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the charge amount of the most expensive charge type?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT max(charge_amount) FROM Charges"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the email, cell phone and home phone of all the professionals., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the email, cell phone and home phone of each professional?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are all the possible breed type and size type combinations?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT DISTINCT breed_code ,  size_code FROM dogs"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Find the distinct breed type and size type combinations for dogs., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT DISTINCT breed_code ,  size_code FROM dogs"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the first name of all the professionals along with the description of the treatment they have done., ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are each professional's first name and description of the treatment they have performed?, ###db_name: 'dog_kennels',###database_schema: {\"foreign key\": [\"dogs.owner_id->owners.owner_id\", \"dogs.owner_id->owners.owner_id\", \"dogs.size_code->sizes.size_code\", \"dogs.breed_code->breeds.breed_code\", \"treatments.dog_id->dogs.dog_id\", \"treatments.professional_id->professionals.professional_id\", \"treatments.treatment_type_code->treatment_types.treatment_type_code\"], \"primary key\": [\"breeds.breed_code\", \"charges.charge_id\", \"sizes.size_code\", \"treatment_types.treatment_type_code\", \"owners.owner_id\", \"dogs.dog_id\", \"professionals.professional_id\", \"treatments.treatment_id\"], \"tables\": [\"breeds(breed code, breed name)\", \"charges(charge id, charge type, charge amount)\", \"sizes(size code, size description)\", \"treatment types(treatment type code, treatment type description)\", \"owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)\", \"dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)\", \"professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)\", \"treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)\"]}",
        "output": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many singers are there?, ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT count(*) FROM singer"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the count of singers?, ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT count(*) FROM singer"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the name of singers in ascending order of net worth., ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of singers ordered by ascending net worth?, ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the birth year and citizenship of singers?, ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT Birth_Year ,  Citizenship FROM singer"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the birth years and citizenships of the singers?, ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT Birth_Year ,  Citizenship FROM singer"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the name of singers whose citizenship is not \"France\"., ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT Name FROM singer WHERE Citizenship != \"France\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of the singers who are not French citizens?, ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT Name FROM singer WHERE Citizenship != \"France\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the name of singers whose birth year is either 1948 or 1949?, ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of the singers whose birth years are either 1948 or 1949?, ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name of the singer with the largest net worth?, ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the name of the singer who is worth the most?, ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show different citizenship of singers and the number of singers of each citizenship., ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:For each citizenship, how many singers are from that country?, ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Please show the most common citizenship of singers., ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the most common singer citizenship ?, ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "select citizenship from singer group by citizenship order by count(*) desc limit 1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show different citizenships and the maximum net worth of singers of each citizenship., ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:For each citizenship, what is the maximum net worth?, ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show titles of songs and names of singers., ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the song titles and singer names?, ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show distinct names of singers that have songs with sales more than 300000., ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:what are the different names of the singers that have sales more than 300000?, ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the names of singers that have more than one song., ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of the singers that have more than one songs?, ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the names of singers and the total sales of their songs., ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:For each singer name, what is the total sales for their songs?, ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:List the name of singers that do not have any song., ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the sname of every sing that does not have any song?, ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the citizenship shared by singers with birth year before 1945 and after 1955., ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?, ###db_name: 'singer',###database_schema: {\"foreign key\": [\"song.singer_id->singer.singer_id\"], \"primary key\": [\"singer.singer_id\", \"song.song_id\"], \"tables\": [\"singer(singer id, name, birth year, net worth millions, citizenship)\", \"song(song id, title, singer id, sales, highest position)\"]}",
        "output": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:How many available features are there in total?, ###db_name: 'real_estate_properties',###database_schema: {\"foreign key\": [\"other_available_features.feature_type_code->ref_feature_types.feature_type_code\", \"properties.property_type_code->ref_property_types.property_type_code\", \"other_property_features.property_id->properties.property_id\", \"other_property_features.feature_id->other_available_features.feature_id\"], \"primary key\": [\"ref_feature_types.feature_type_code\", \"ref_property_types.property_type_code\", \"other_available_features.feature_id\", \"properties.property_id\"], \"tables\": [\"reference feature types(feature type code, feature type name)\", \"reference property types(property type code, property type description)\", \"other available features(feature id, feature type code, feature name, feature description)\", \"properties(property id, property type code, date on market, date sold, property name, property address, room count, vendor requested price, buyer offered price, agreed selling price, apt feature 1, apt feature 2, apt feature 3, fld feature 1, fld feature 2, fld feature 3, hse feature 1, hse feature 2, hse feature 3, oth feature 1, oth feature 2, oth feature 3, shp feature 1, shp feature 2, shp feature 3, other property details)\", \"other property features(property id, feature id, property feature description)\"]}",
        "output": "SELECT count(*) FROM Other_Available_Features"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What is the feature type name of feature AirCon?, ###db_name: 'real_estate_properties',###database_schema: {\"foreign key\": [\"other_available_features.feature_type_code->ref_feature_types.feature_type_code\", \"properties.property_type_code->ref_property_types.property_type_code\", \"other_property_features.property_id->properties.property_id\", \"other_property_features.feature_id->other_available_features.feature_id\"], \"primary key\": [\"ref_feature_types.feature_type_code\", \"ref_property_types.property_type_code\", \"other_available_features.feature_id\", \"properties.property_id\"], \"tables\": [\"reference feature types(feature type code, feature type name)\", \"reference property types(property type code, property type description)\", \"other available features(feature id, feature type code, feature name, feature description)\", \"properties(property id, property type code, date on market, date sold, property name, property address, room count, vendor requested price, buyer offered price, agreed selling price, apt feature 1, apt feature 2, apt feature 3, fld feature 1, fld feature 2, fld feature 3, hse feature 1, hse feature 2, hse feature 3, oth feature 1, oth feature 2, oth feature 3, shp feature 1, shp feature 2, shp feature 3, other property details)\", \"other property features(property id, feature id, property feature description)\"]}",
        "output": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:Show the property type descriptions of properties belonging to that code., ###db_name: 'real_estate_properties',###database_schema: {\"foreign key\": [\"other_available_features.feature_type_code->ref_feature_types.feature_type_code\", \"properties.property_type_code->ref_property_types.property_type_code\", \"other_property_features.property_id->properties.property_id\", \"other_property_features.feature_id->other_available_features.feature_id\"], \"primary key\": [\"ref_feature_types.feature_type_code\", \"ref_property_types.property_type_code\", \"other_available_features.feature_id\", \"properties.property_id\"], \"tables\": [\"reference feature types(feature type code, feature type name)\", \"reference property types(property type code, property type description)\", \"other available features(feature id, feature type code, feature name, feature description)\", \"properties(property id, property type code, date on market, date sold, property name, property address, room count, vendor requested price, buyer offered price, agreed selling price, apt feature 1, apt feature 2, apt feature 3, fld feature 1, fld feature 2, fld feature 3, hse feature 1, hse feature 2, hse feature 3, oth feature 1, oth feature 2, oth feature 3, shp feature 1, shp feature 2, shp feature 3, other property details)\", \"other property features(property id, feature id, property feature description)\"]}",
        "output": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code"
    },
    {
        "instruction": "###Generate an SQL query based on the provided question and database schema.",
        "input": "###question:What are the names of properties that are either houses or apartments with more than 1 room?, ###db_name: 'real_estate_properties',###database_schema: {\"foreign key\": [\"other_available_features.feature_type_code->ref_feature_types.feature_type_code\", \"properties.property_type_code->ref_property_types.property_type_code\", \"other_property_features.property_id->properties.property_id\", \"other_property_features.feature_id->other_available_features.feature_id\"], \"primary key\": [\"ref_feature_types.feature_type_code\", \"ref_property_types.property_type_code\", \"other_available_features.feature_id\", \"properties.property_id\"], \"tables\": [\"reference feature types(feature type code, feature type name)\", \"reference property types(property type code, property type description)\", \"other available features(feature id, feature type code, feature name, feature description)\", \"properties(property id, property type code, date on market, date sold, property name, property address, room count, vendor requested price, buyer offered price, agreed selling price, apt feature 1, apt feature 2, apt feature 3, fld feature 1, fld feature 2, fld feature 3, hse feature 1, hse feature 2, hse feature 3, oth feature 1, oth feature 2, oth feature 3, shp feature 1, shp feature 2, shp feature 3, other property details)\", \"other property features(property id, feature id, property feature description)\"]}",
        "output": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1"
    }
]