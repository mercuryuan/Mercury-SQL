 SELECT count(*) FROM singer
 SELECT count(*) FROM singer
 SELECT name,  country,  age FROM singer ORDER BY age
 SELECT Name,  Country,  Age FROM singer ORDER BY Age DESC
 SELECT avg(age),  min(age),  max(age) FROM singer WHERE country  =  'France'
 SELECT avg(age),  min(age),  max(age) FROM singer WHERE country  =  'France'
 SELECT Name,  Song_Release_Year FROM singer ORDER BY Age ASC LIMIT 1
SELECT Song_Released_Year,  Song_Name FROM singer ORDER BY Age ASC LIMIT 1
 SELECT DISTINCT Country FROM singer WHERE Age  >  20
 SELECT DISTINCT country FROM singer WHERE age  >  20
 SELECT country,  count(*) FROM singer GROUP BY country
 SELECT count(*),  country FROM singer GROUP BY country
 SELECT Song_Name FROM singer WHERE Age  >  (SELECT avg(Age) FROM singer)
 SELECT Song_Name FROM singer WHERE Age  >  (SELECT avg(Age) FROM singer)
 SELECT LOCATION,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
 SELECT LOCATION,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
 SELECT max(capacity),  avg(capacity) FROM stadium
 SELECT avg(capacity),  max(capacity) FROM stadium
 SELECT name,  capacity FROM stadium ORDER BY average DESC LIMIT 1
 SELECT name,  capacity FROM stadium ORDER BY average DESC LIMIT 1
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
 SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
 SELECT T2.name,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
 SELECT Stadium_ID,  COUNT(*) FROM concert GROUP BY Stadium_ID
SELECT T2.name,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T1.stadium_id ORDER BY count(*) DESC LIMIT 1
 SELECT T3.name,  T3.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id JOIN (SELECT stadium_id,  max(year) FROM concert GROUP BY stadium_id HAVING max(year)  >  2013) AS T3 ON T1.stadium_id  =  T3.stadium_id
 SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
 SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
 SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)
 SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)
 SELECT Country FROM singer WHERE Age  >  40 INTERSECT SELECT Country FROM singer WHERE Age  <  30
 SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE YEAR  =  2014)
 SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE YEAR  =  2014)
 SELECT T1.concert_name,  T1.theme,  COUNT(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T1.concert_name
 SELECT T1.concert_name,  T2.theme,  count(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T1.concert_name
 SELECT T1.Name,  COUNT(*) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Singer_ID
 SELECT T1.Name,  COUNT(*) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Singer_ID
 SELECT T3.Name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.Concert_ID  =  T2.Concert_ID JOIN singer AS T3 ON T2.Singer_ID  =  T3.Singer_ID WHERE T1.year  =  2014
 SELECT T3.Name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.Concert_ID  =  T2.Concert_ID JOIN singer AS T3 ON T2.Singer_ID  =  T3.Singer_ID WHERE T1.Year  =  2014
 SELECT T1.Name,  T1.Country FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID JOIN concert AS T3 ON T2.Concert_ID  =  T3.Concert_ID WHERE T3.concert_name LIKE '%Hey%'
 SELECT T1.Name,  T1.Country FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID JOIN concert AS T3 ON T3.Concert_ID  =  T2.Concert_ID WHERE T3.Concert_Name LIKE '%Hey%'
 SELECT T2.name,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014 INTERSECT SELECT T2.name,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2015
 SELECT T2.name,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014 INTERSECT SELECT T2.name,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2015
 SELECT count(*) FROM concert WHERE Stadium_ID  =  (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
 SELECT count(*) FROM concert WHERE Stadium_ID  =  (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
 SELECT count(*) FROM Pets WHERE weight  >  10
 SELECT count(*) FROM Pets WHERE weight  >  10
 SELECT Weight FROM Pets ORDER BY PetAge LIMIT 1
 SELECT Weight FROM pets ORDER BY PetAge LIMIT 1
 SELECT max(Weight),  PetType FROM pets
 SELECT max(weight),  pettype FROM pets
 SELECT count(*) FROM pets AS T1 JOIN has_pet AS T2 ON T1.petid  =  T2.petid JOIN student AS T3 ON T2.StuID  >  20 GROUP BY T3.StuID
 SELECT count(*) FROM pet AS T1 JOIN has_pet AS T2 ON T1.petid  =  T2.petid JOIN student AS T3 ON T3.stuid  =  T2.stuid WHERE T3.age  >  20
 SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T1.sex  =  'F' AND T3.pettype  =  "dog"
 SELECT count(*) FROM pets AS T1 JOIN has_pet AS T2 ON T1.petid  =  T2.petid JOIN student AS T3 ON T3.stuid  =  T2.stuid WHERE T3.sex  =  'F' AND T1.pettype  =  "dog"
 SELECT count(DISTINCT PetType) FROM Pets;
 SELECT count(DISTINCT pettype) FROM pets
 SELECT DISTINCT T1.Fname FROM student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T3.PetID  =  T2.PetID WHERE T3.PetType  =  "cat" OR T3.PetType  =  "dog"
 SELECT DISTINCT T1.Fname FROM student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN pets AS T3 ON T3.PetID  =  T2.PetID WHERE T3.PetType  =  'cat' OR T3.PetType  =  'dog'
 SELECT DISTINCT T1.Fname FROM student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  "cat" INTERSECT SELECT DISTINCT T1.Fname FROM student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets
 SELECT DISTINCT T1.Fname FROM student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T3.PetID  =  T2.PetID WHERE T3.PetType  =  'cat' INTERSECT SELECT DISTINCT T1.Fname FROM student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets
 SELECT major,  age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID  =  T2.PetID WHERE T2.PetType  =  "cat")
 SELECT major,  age FROM student WHERE StuID NOT IN (SELECT StuID FROM Has_pet)
 SELECT StuID FROM student EXCEPT SELECT T1.StuID FROM has_pet AS T1 JOIN pets AS T2 ON T1.PetID  =  T2.PetID WHERE T2.PetType  =  'cat'
 SELECT StuID FROM student EXCEPT SELECT T1.StuID FROM has_pet AS T1 JOIN pets AS T2 ON T1.PetID  =  T2.PetID WHERE T2.PetType  =  "cat"
 SELECT DISTINCT t1.fname,  t1.age FROM student AS t1 JOIN Has_Pet AS t2 ON t1.stuid  =  t2.stuid WHERE t2.petid  =  (SELECT petid FROM pets WHERE pettype  =  'dog') EXCEPT SELECT DISTINCT t1.fname,  t1.age FROM student AS t1 JOIN Has_Pet AS t2 ON t1.stuid  =  t2.stuid WHERE t2.petid  =
 SELECT DISTINCT T1.Fname FROM student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN pets AS T3 ON T3.PetID  =  T2.PetID WHERE T3.PetType  =  'dog' AND T3.PetType!= 'cat'
 SELECT PetType,  Weight FROM pets ORDER BY PetAge LIMIT 1
 SELECT PetType,  Weight FROM pets ORDER BY PetAge ASC LIMIT 1
 SELECT petid,  weight FROM pets WHERE petage  >  1
 SELECT petid,  weight FROM pets WHERE petage  >  1
 SELECT pettype, avg(petage), max(petage) FROM pets GROUP BY pettype
 SELECT pettype,  avg(petage),  max(petage) FROM pets GROUP BY pettype
 SELECT PetType,  avg(Weight) FROM pets GROUP BY PetType
 SELECT PetType,  avg(Weight) FROM pets GROUP BY PetType
 SELECT DISTINCT T1.Fname,  T1.age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T3.PetID  =  T2.PetID WHERE T3.pettype  =  'fish'
 SELECT DISTINCT T1.Fname,  T1.age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID
 SELECT T1.petid FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.lname  =  'Smith'
 SELECT T1.PetID FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID  =  T2.PetID JOIN Student AS T3 ON T1.StuID  =  T3.StuID WHERE T3.LName  =  'Smith'
 SELECT count(*),  StuID FROM Has_pet GROUP BY StuID
 SELECT count(*),  StuID FROM has_pet GROUP BY StuID
 SELECT DISTINCT T1.fname,  T1.sex FROM student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID HAVING count(*)  >  1
 SELECT DISTINCT T1.Fname,  T1.sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID HAVING count(*)  >  1
 SELECT t1.lname FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid  =  t2.stuid JOIN pets AS t3 ON t2.petid  =  t3.petid WHERE t3.petage  =  3
 SELECT t2.lname FROM pets AS t1 JOIN has_pet AS t2 ON t1.petid  =  t2.petid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.petage  =  3
 SELECT avg(age) FROM student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
 SELECT avg(age) FROM student WHERE StuID NOT IN (SELECT StuID FROM Has_pet)
 SELECT count(*) FROM Continents
 SELECT count(*) FROM Continents
 SELECT contid,  continent,  count(*) FROM countries GROUP BY contid
 SELECT count(*),  continet,  continent FROM countries GROUP BY continent
 SELECT count(*) FROM countries
 SELECT count(*) FROM countries
 SELECT T1.maker,  T1.id,  count(*) FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.maker GROUP BY T1.id
 SELECT T1.full_name,  T1.id,  count(*) FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.maker GROUP BY T1.id
 SELECT DISTINCT Model FROM Cars_Data ORDER BY Horsepower LIMIT 1
 SELECT Model FROM Cars_Data ORDER BY Horsepower LIMIT 1
 SELECT DISTINCT model FROM Cars_Data WHERE weight  <  (SELECT avg(weight) FROM Cars_Data)
 SELECT model FROM cars_data WHERE weight  <  (SELECT avg(weight) FROM cars_data)
 SELECT T1.maker FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.maker JOIN Car_Names AS T3 ON T3.makeid  =  T2.modelid JOIN Cars_Data AS T4 ON T4.id  =  T3.id WHERE T4.year  =  1970
 SELECT DISTINCT T1.full_name FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker JOIN cars_data AS T3 ON T3.id  =  T2.modelid WHERE T3.year  =  1970
 SELECT DISTINCT T1.make,  T1.year FROM Cars_Data AS T1 JOIN Car_Names AS T2 ON T1.id  =  T2.makeid
 SELECT T1.maker,  T1.year FROM Car_Makers AS T1 JOIN Cars_Data AS T2 ON T1.id  =  T2.id WHERE T2.year  =  (SELECT min(year) FROM Cars_Data)
 SELECT DISTINCT model FROM car_names WHERE makeid IN (SELECT id FROM cars_data WHERE YEAR  >  1980)
 SELECT DISTINCT T2.Model FROM cars_data AS T1 JOIN Car_names AS T2 ON T1.MakeID  =  T2.MakeID WHERE T1.year  >  1980
 SELECT T2.continent,  count(*) FROM Car_Makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.countryid GROUP BY T2.continent
 SELECT T2.continent,  count(*) FROM Car_Makers AS T1 JOIN Countries AS T2 ON T1.country  =  T2.countryid GROUP BY T2.continent
 SELECT T1.Country FROM Countries AS T1 JOIN Car_Makers AS T2 ON T1.CountryId  =  T2.Country WHERE T2.maker  =  max(T2.maker)
 SELECT T1.Name FROM Countries AS T1 JOIN Car_Makers AS T2 ON T1.CountryId  =  T2.Country WHERE T2.Maker  =  (SELECT T3.Maker FROM Model_List AS T3 JOIN Car_Makers AS T4 ON T3.Maker  =  T4.ID WHERE T4.FullName  =  (SELECT max(T5.FullName) FROM Car_Makers AS T5))
 SELECT count(*),  T1.fullname FROM Car_makers AS T1 JOIN Model_list AS T2 ON T1.id  =  T2.maker GROUP BY T1.fullname
 SELECT count(*),  T1.maker,  T1.full_name FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.maker GROUP BY T1.maker,  T1.full_name
 SELECT accelerate FROM Cars_data WHERE MAKEID IN (SELECT t1.makeid FROM Car_Names AS t1 JOIN Model_List AS t2 ON t1.makeid  =  t2.makeid JOIN Car_Makers AS t3 ON t2.id  =  t3.id WHERE t3.maker  =  "AMC" AND t2.model  =  "hornet sportabout (sw)")
 SELECT accelerate FROM Cars_data WHERE model LIKE 'amc hornet sportabout (sw)'
 SELECT count(*) FROM Car_Makers AS T1 JOIN Countries AS T2 ON T1.Country  =  T2.Countryid WHERE T2.CountryName  =  "France"
 SELECT count(*) FROM Car_Makers AS T1 JOIN Countries AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  "France"
 SELECT count(*) FROM cars_data WHERE country = "USA";
 SELECT count(*) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id  =  T2.makeid WHERE T1.accelerate LIKE '%high%' AND T2.model LIKE '%Sedan%'
 SELECT avg(mpg) FROM Cars_data WHERE cylinders  =  4
 SELECT avg(mpg) FROM Cars_data WHERE cylinders  =  4
 SELECT min(weight) FROM cars_data WHERE cylinders  =  8 AND YEAR  =  1974
 SELECT min(weight) FROM Cars_data WHERE cylinders  =  8 AND YEAR  =  1974
 SELECT DISTINCT T2.maker,  T2.Model FROM car_names AS T1 JOIN Model_List AS T2 ON T1.ModelID  =  T2.ModelID
 SELECT T1.maker,  T1.Model FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.id
 SELECT DISTINCT T1.countryname,  T1.countryid FROM Countries AS T1 JOIN Car_Makers AS T2 ON T1.countryid  =  T2.country
 SELECT T1.Name,  T1.CountryId FROM Countries AS T1 JOIN Car_Makers AS T2 ON T1.CountryId  =  T2.Country JOIN Model_List AS T3 ON T3.Maker  =  T2.ID GROUP BY T1.CountryId HAVING COUNT(*)  >=  1
 SELECT count(*) FROM Cars_Data WHERE horsepower  >  150
 SELECT count(*) FROM Cars_Data WHERE horsepower  >  150
 SELECT avg(weight),  YEAR FROM Cars_Data GROUP BY YEAR
 SELECT avg(weight),  year FROM Cars_Data GROUP BY YEAR
 SELECT T1.countryname FROM Countries AS T1 JOIN Car_Makers AS T2 ON T1.countryid  =  T2.country WHERE T2.maker  >=  3
 SELECT T1.CountryName FROM Countries AS T1 JOIN Car_Makers AS T2 ON T1.CountryId  =  T2.Country WHERE T2.Maker  >=  3
 SELECT max(hp),  make FROM Cars_data WHERE cylinders  =  3
 SELECT max(Horsepower),  Model FROM cars_data WHERE Cylinders  =  3 GROUP BY Model
 SELECT max(mpg) FROM Cars_data
 SELECT DISTINCT model FROM cars_data ORDER BY mpg DESC LIMIT 1
 SELECT avg(Horsepower) FROM Cars_Data WHERE YEAR  <  1980
 SELECT avg(Horsepower) FROM Cars_Data WHERE YEAR  <  1980
 SELECT avg(edispl) FROM Cars_Data WHERE Model  =  "Volvo"
 SELECT avg(edispl) FROM cars_data WHERE Make  =  "VOLVO"
 SELECT max(accelerate),  cylinders FROM Cars_data GROUP BY cylinders
 SELECT max(accelerate) FROM Cars_data
 SELECT T1.Model FROM Car_Names AS T1 JOIN Model_List AS T2 ON T1.Model  =  T2.Model WHERE T2.maker  =  (SELECT id FROM Car_Makers ORDER BY count(*) DESC LIMIT 1)
 SELECT count(*),  model FROM car_names GROUP BY model ORDER BY count(*) DESC LIMIT 1
 SELECT count(*) FROM Cars_Data WHERE cylinders  >  4
 SELECT count(*) FROM Cars_data WHERE cylinders  >  4
 SELECT count(*) FROM Cars_Data WHERE YEAR  =  "1980"
 SELECT count(*) FROM Cars_Data WHERE YEAR  =  "1980"
 SELECT count(*) FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.ID  =  T2.Maker JOIN Car_Names AS T3 ON T3.MakeID  =  T2.ModelID WHERE T1.full_name  =  "American Motor Company"
 SELECT count(*) FROM Model_list AS T1 JOIN Car_names AS T2 ON T1.Model  =  T2.Model JOIN Car_makers AS T3 ON T3.ID  =  T1.Maker WHERE T3.maker  =  "American Motor Company"
 SELECT T1.full_name,  T1.id FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.maker GROUP BY T1.id HAVING count(*)  >  3;
 SELECT T1.maker,  T1.id FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.maker GROUP BY T1.id HAVING count(*)  >  3
 SELECT DISTINCT T1.model FROM Car_Names AS T1 JOIN Model_List AS T2 ON T1.Model  =  T2.Model WHERE T2.maker IN (SELECT id FROM Car_Makers WHERE full_name  =  "General Motors") UNION SELECT DISTINCT T1.Model FROM Cars_Data AS T1 JOIN Car_Names AS T2 ON T1.id  =  T2.makeid WHERE T1.weight  >  3500
 SELECT DISTINCT T1.Model FROM Car_Names AS T1 JOIN Model_List AS T2 ON T1.Model  =  T2.Model WHERE T2.maker  =  (SELECT id FROM Car_Makers WHERE full_name  =  "General Motors") OR T1.Horsepower  >  3500
 SELECT YEAR FROM Cars_Data WHERE WEIGHT BETWEEN 3000 AND 4000
 SELECT DISTINCT YEAR FROM Cars_Data WHERE Weight  <  4000 INTERSECT SELECT DISTINCT YEAR FROM Cars_Data WHERE Weight  >  3000
 SELECT Horsepower FROM Cars_Data ORDER BY Accelerate DESC LIMIT 1
 SELECT Horsepower FROM Cars_Data ORDER BY Accelerate DESC LIMIT 1
 SELECT min(cylinders),  accelerate FROM Cars_Data WHERE make  =  'Volvo'
 SELECT min(cylinders),  accelerate FROM Cars_data WHERE make  =  'Volvo'
 SELECT count(*) FROM Cars_Data WHERE accelerate  >  (SELECT max(horsepower) FROM Cars_Data)
 SELECT count(*) FROM Cars_Data WHERE accelerate  >  (SELECT max(Horsepower) FROM Cars_Data)
 SELECT count(*) FROM Car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.countryid GROUP BY T1.country HAVING count(*)  >  2
 SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.countryid GROUP BY T2.countryid HAVING count(*)  >  2
 SELECT count(*) FROM Cars_data WHERE cylinders  >  6
 SELECT count(*) FROM Cars_data WHERE cylinders  >  6
 SELECT model FROM cars_data WHERE cylinders  =  4 ORDER BY horsepower DESC LIMIT 1
 SELECT Model FROM Cars_data WHERE Cylinders  =  "4" GROUP BY Model ORDER BY HP DESC LIMIT 1
 SELECT DISTINCT T1.makeid,  T1.Model FROM Car_names AS T1 JOIN Cars_data AS T2 ON T1.ID  =  T2.makeid WHERE T2.Horsepower  >  (SELECT min(Horsepower) FROM Cars_data) AND T2.cylinders  <  4
 SELECT T2.make,  T2.model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.makeid  =  T2.makeid WHERE T1.horsepower!= (SELECT min(horsepower) FROM cars_data) AND T1.cylinders  <  4
 SELECT max(mpg) FROM Cars_Data WHERE cylinders  =  8 OR YEAR  <  1980
 SELECT max(mpg) FROM Cars_Data WHERE cylinders  =  8 OR YEAR  <  1980
 SELECT WEIGHT FROM Cars_Data WHERE WEIGHT  <  3500 AND ID NOT IN (SELECT T1.id FROM Car_Names AS T1 JOIN Model_List AS T2 ON T1.Model  =  T2.Model JOIN Car_Makers AS T3 ON T2.maker  =  T3.ID WHERE T3.full_name  =  'Ford Motor Company')
 SELECT DISTINCT WEIGHT FROM Cars_Data WHERE WEIGHT  <  3500 AND ID NOT IN (SELECT T1.ID FROM Car_Names AS T1 JOIN Model_List AS T2 ON T1.Model  =  T2.Model JOIN Car_Makers AS T3 ON T2.Maker  =  T3.ID WHERE T3.FullName  =  "Ford Motor Company")
 SELECT DISTINCT T1.CountryName FROM Countries AS T1 JOIN Car_Makers AS T2 ON T1.CountryId  =  T2.Country JOIN Model_List AS T3 ON T3.Maker  =  T2.ID WHERE T2.ID NOT IN (SELECT T2.ID FROM Car_Makers AS T2 JOIN Model_List AS T3 ON T2.ID  =  T3.ModelID)
 SELECT CountryName FROM Countries EXCEPT SELECT T2.CountryName FROM Car_Makers AS T1 JOIN Countries AS T2 ON T1.Country  =  T2.CountryId
 SELECT T1.id,  T1.maker FROM Car_makers AS T1 JOIN Model_list AS T2 ON T1.id  =  T2.id GROUP BY T1.id HAVING count(*)  >=  2 INTERSECT SELECT T1.id,  T1.maker FROM Car_makers AS T1 JOIN Model_list AS T2 ON T1.id  =  T2.id GROUP BY T1.id HAVING count(*)  >=  4
 SELECT T1.id,  T1.maker FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.id GROUP BY T1.id HAVING count(*)  >=  2 INTERSECT SELECT T1.id,  T1.maker FROM Car_Makers AS T1 JOIN Cars_Data AS T2 ON T1.id  =  T2.id GROUP BY T1.id HAVING count(*)  >=  3
 SELECT T1.countryid,  T2.fullname FROM Countries AS T1 JOIN Car_Makers AS T2 ON T1.countryid  =  T2.country JOIN Model_List AS T3 ON T3.maker  =  T2.id GROUP BY T1.countryid HAVING count(*)  >  3 UNION SELECT T1.countryid,  T2.fullname FROM Countries AS T1 JOIN Car_Makers AS T2 ON T1.countryid  =  T2
 SELECT T1.countryid,  T1.countryname FROM Countries AS T1 JOIN Car_Makers AS T2 ON T1.countryid  =  T2.country JOIN Model_List AS T3 ON T3.maker  =  T2.id GROUP BY T1.countryid HAVING count(*)  >=  3 UNION SELECT T1.countryid,  T1.countryname FROM Countries AS T1 JOIN Car_Names AS T2 ON T1.countryid  =  T2
 SELECT country FROM airlines WHERE airlineName = "JetBlue Airways";
 SELECT country FROM airlines WHERE airlineName  =  "Jetblue Airways"
 SELECT abbreviation FROM airlines WHERE airlineName  =  "JetBlue Airways"
 SELECT abbreviation FROM airlines WHERE airlineName  =  "Jetblue Airways"
 SELECT airlineName,  abbreviation FROM airlines WHERE country  =  'USA'
 SELECT airlineName,  abbreviation FROM airlines WHERE country  =  'USA'
 SELECT airportcode,  airportname FROM airports WHERE city  =  'Anthony'
 SELECT airportcode,  airportname FROM airports WHERE city  =  'Anthony'
 SELECT count(*) FROM airlines
 SELECT count(*) FROM airlines
 SELECT count(*) FROM airports
 SELECT count(*) FROM airports
 SELECT count(*) FROM Flights
 SELECT count(*) FROM flights
 SELECT DISTINCT abbreviation FROM airlines WHERE abbreviation  =  'UAL'
 SELECT abbreviation FROM airlines WHERE abbreviation  =  'UAL'
 SELECT count(*) FROM airlines WHERE country  =  'USA'
 SELECT count(*) FROM airlines WHERE country  =  'USA'
 SELECT city,  country FROM airports WHERE airportcode  =  'ALTON'
 SELECT city,  country FROM airports WHERE airportcode  =  'ALTON'
 SELECT airportname FROM airports WHERE airportcode  =  'AKO'
 SELECT airportName FROM airports WHERE airportCode  =  'AKO'
 SELECT airportName FROM airports WHERE city  =  'Aberdeen'
 SELECT airportname FROM airports WHERE city  =  'Aberdeen'
 SELECT count(*) FROM Flights WHERE sourceairport  =  'APG'
 SELECT count(*) FROM flights WHERE sourceairport  =  'APG';
 SELECT count(*) FROM flights WHERE destairport  =  'ATO'
 SELECT count(*) FROM flights WHERE sourceairport  =  "ATO"
 SELECT count(*) FROM flights WHERE sourceairport  =  "Aberdeen";
 SELECT count(*) FROM flights WHERE sourceairport  =  "Aberdeen";
 SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.city  =  "Aberdeen"
 SELECT count(*) FROM flights WHERE destinationairport  =  "Aberdeen";
 SELECT count(*) FROM flights WHERE sourceairport  =  'Aberdeen' AND destinationairport  =  'Ashley'
 SELECT count(*) FROM flights WHERE sourceairport  =  "Aberdeen" AND destairport  =  "Ashley";
 SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.airline  =  T2.uid WHERE T2.abbreviation  =  'JetBlue Airways'
 SELECT count(*) FROM flights WHERE airline  =  "Jetblue Airways"
 SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T1.airline  =  'United Airlines' AND T2.airportname  =  'ASY';
 SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.city  =  'ASY' AND T1.airline  =  'United Airlines';
 SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.sourceairport  =  T2.airportcode JOIN airlines AS T3 ON T1.airline  =  T3.uid WHERE T3.abbreviation  =  'United Airlines' AND T2.city  =  'Ahmedabad';
 SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.sourceairport  =  T2.airportcode JOIN airlines AS T3 ON T1.airline  =  T3.uid WHERE T3.abbreviation  =  "United" AND T2.airportname  =  "Ahd"
 SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.city  =  'Aberdeen' AND T1.airline  =  'United'
 SELECT count(*) FROM flights WHERE airline  =  "UNited Airlines" AND destairport  =  "Aberdeen";
 SELECT T1.city,  T1.citycode FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport GROUP BY T1.citycode ORDER BY count(*) DESC LIMIT 1;
 SELECT T1.city FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.destairport GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1
 SELECT T1.city,  count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.destairport GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1
 SELECT T1.city FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1
 SELECT destairport FROM flights GROUP BY destairport ORDER BY count(*) DESC LIMIT 1
 SELECT T1.airportcode FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.destairport GROUP BY T1.airportcode ORDER BY count(*) DESC LIMIT 1
 SELECT destairport FROM flights GROUP BY destairport ORDER BY count(*) LIMIT 1
 SELECT destairport FROM flights GROUP BY destairport ORDER BY count(*) LIMIT 1
 SELECT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline GROUP BY T2.airline ORDER BY count(*) DESC LIMIT 1
 SELECT T1.name FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
 SELECT abbreviation,  country FROM airlines GROUP BY abbreviation ORDER BY count(*) DESC LIMIT 1
 SELECT abbreviation,  country FROM airlines GROUP BY abbreviation ORDER BY count(*) LIMIT 1
 SELECT DISTINCT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline JOIN airports AS T3 ON T3.uid  =  T2.sourceairport WHERE T3.city  =  'AHD'
 SELECT T1.name FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.sourceairport  =  "AHD"
 SELECT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline JOIN airports AS T3 ON T3.airportcode  =  T2.destairport WHERE T3.city  =  'AHD'
 SELECT T1.name FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.destairport  =  "AHD"
 SELECT DISTINCT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.sourceairport  =  'APG' INTERSECT SELECT DISTINCT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.destinationairport  =  'CVO'
 SELECT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline JOIN airports AS T3 ON T3.portcode  =  T2.sourceairport WHERE T3.city  =  'Atlanta' INTERSECT SELECT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline JOIN airports AS T3 ON T3.portcode  =  T2.destinationairport WHERE
 SELECT DISTINCT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.destairport  =  'CVO' AND T2.sourceairport!= 'APG'
 SELECT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.destairport  =  'CVO' EXCEPT SELECT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.destairport  =  'APG'
 SELECT DISTINCT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.flightnumber  >=  10
 SELECT DISTINCT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.flights  >=  10
 SELECT DISTINCT t1.abbreviation FROM airlines AS t1 JOIN flights AS t2 ON t1.uid  =  t2.airline WHERE t2.flights  <  200
 SELECT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.flights  <  200
 SELECT DISTINCT T1.flightnumber FROM flights AS T1 JOIN airlines AS T2 ON T1.airline  =  T2.uid WHERE T2.abbreviation  =  "United Airlines"
 SELECT DISTINCT T1.flightnumber FROM flights AS T1 JOIN airlines AS T2 ON T1.airline  =  T2.uid WHERE T2.abbreviation  =  'UN'
 SELECT DISTINCT flightnumber FROM flights WHERE sourceairport  =  "APG"
 SELECT DISTINCT flightnumber FROM flights WHERE sourceairport  =  'APG'
 SELECT DISTINCT T1.flightnumber FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.city  =  "APG"
 SELECT DISTINCT flightnumber FROM flights WHERE destinationairport  =  "APG"
 SELECT DISTINCT flightnumber FROM flights WHERE sourceairport  =  "Aberdeen"
 SELECT DISTINCT flightnumber FROM flights WHERE sourceairport  =  "Aberdeen"
 SELECT DISTINCT flightnumber FROM flights WHERE destinationairport  =  "Aberdeen"
 SELECT DISTINCT flightnumber FROM flights WHERE destinationairport  =  "Aberdeen"
 SELECT count(*) FROM flights WHERE destinationairport  =  'ABZ' OR destinationairport  =  'ABE';
 SELECT count(*) FROM Flights WHERE destinationairport  =  'ABZ' OR destinationairport  =  'ABE';
 SELECT DISTINCT airportname FROM airports EXCEPT SELECT T1.city FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport UNION SELECT T1.city FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.destairport
 SELECT DISTINCT airportcode FROM airports EXCEPT (SELECT DISTINCT destinationairport FROM Flights UNION SELECT DISTINCT sourceairport FROM Flights)
 SELECT count(*) FROM employee
 SELECT count(*) FROM Employee
 SELECT name FROM employee ORDER BY age ASC
 SELECT name FROM employee ORDER BY age ASC
 SELECT city,  count(*) FROM employee GROUP BY city
 SELECT city,  count(*) FROM employee GROUP BY city
 SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
 SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
 SELECT count(*),  LOCATION FROM shop GROUP BY LOCATION
 SELECT count(*),  LOCATION FROM shop GROUP BY LOCATION
 SELECT manager_name,  district FROM shop ORDER BY Number_products DESC LIMIT 1
 SELECT manager_name,  district FROM shop ORDER BY Number_products DESC LIMIT 1
 SELECT min(number_products),  max(number_products) FROM shop
 SELECT min(Number_products),  max(Number_products) FROM shop
 SELECT name,  LOCATION,  district FROM shop ORDER BY Number_products DESC
 SELECT name,  LOCATION,  District FROM shop ORDER BY Number_products DESC
 SELECT name FROM shop WHERE Number_products  >  (SELECT avg(Number_products) FROM shop)
 SELECT name FROM shop WHERE Number_products  >  (SELECT avg(Number_products) FROM shop)
 SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id GROUP BY T1.employee_id ORDER BY count(*) DESC LIMIT 1
 SELECT T1.name FROM employee AS T1 JOIN hiring AS T2 ON T1.employee_id  =  T2.employee_id JOIN evaluation AS T3 ON T2.employee_id  =  T3.employee_id WHERE T3.bonus  =  (SELECT max(bonus) FROM evaluation)
 SELECT T1.name FROM employee AS T1 JOIN hiring AS T2 ON T1.employee_id  =  T2.employee_id JOIN evaluation AS T3 ON T2.employee_id  =  T3.employee_id WHERE T3.bonus  =  (SELECT max(bonus) FROM evaluation)
 SELECT T2.name FROM evaluation AS T1 JOIN employee AS T2 ON T1.employee_id  =  T2.employee_id ORDER BY bonus DESC LIMIT 1
 SELECT name FROM employee EXCEPT SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id
 SELECT name FROM employee EXCEPT SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id
SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.shop_id ORDER BY count(*) DESC LIMIT 1
 SELECT T1.name FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.shop_id ORDER BY count(*) DESC LIMIT 1
 SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)
 SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
 SELECT T2.name,  count(*) FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.shop_id
 SELECT T2.name, count(*) FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.shop_id
 SELECT sum(bonus) FROM evaluation
 SELECT sum(bonus) FROM evaluation
 SELECT * FROM hiring
 SELECT * FROM hiring
 SELECT District FROM shop WHERE Number_products  <  3000 INTERSECT SELECT District FROM shop WHERE Number_products  >  10000
 SELECT District FROM shop WHERE Number_products  <  3000 INTERSECT SELECT District FROM shop WHERE Number_products  >  10000
 SELECT count(DISTINCT LOCATION) FROM shop
 SELECT count(DISTINCT LOCATION) FROM shop
 SELECT count(*) FROM documents
 SELECT count(*) FROM Documents
 SELECT document_id,  document_name,  document_description FROM documents
 SELECT document_id,  document_name,  document_description FROM documents
 SELECT document_name,  template_id FROM Documents WHERE document_description LIKE '%w%'
 SELECT document_name,  template_id FROM Documents WHERE document_description LIKE '%w%'
 SELECT document_id,  template_id,  document_description FROM Documents WHERE document_name  =  "Robbin CV"
 SELECT document_id,  template_id,  document_description FROM Documents WHERE document_name  =  "Robbin CV"
 SELECT count(DISTINCT template_id) FROM Documents
 SELECT count(DISTINCT template_type_code) FROM Documents
 SELECT count(*) FROM Documents WHERE T1.template_id IN (SELECT T2.template_id FROM Templates AS T2 JOIN Ref_Template_Types AS T1 ON T2.template_type_code  =  T1.template_type_code WHERE T1.template_type_description  =  'PPT')
 SELECT count(*) FROM Documents WHERE template_id IN (SELECT template_id FROM Templates WHERE template_type_code  =  "PPT")
 SELECT template_id,  count(*) FROM Documents GROUP BY template_id
 SELECT template_id,  count(*) FROM Documents GROUP BY template_id
 SELECT template_id,  template_type_code FROM Documents GROUP BY template_id,  template_type_code ORDER BY count(*) DESC LIMIT 1
 SELECT template_id,  template_type_code FROM Documents GROUP BY template_id ORDER BY count(*) DESC LIMIT 1
 SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
 SELECT template_id FROM documents GROUP BY template_id HAVING count(*)  >  1
 SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
 SELECT template_id FROM templates EXCEPT SELECT template_id FROM documents
 SELECT count(*) FROM Templates
 SELECT count(*) FROM Templates
 SELECT template_id,  version_number,  template_type_code FROM Templates
 SELECT template_id,  version_number,  template_type_code FROM Templates
 SELECT DISTINCT template_type_code FROM Templates
 SELECT DISTINCT template_type_code FROM templates
 SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
 SELECT template_id FROM Templates WHERE template_type_code  =  "Template" AND template_details LIKE "%PP%" OR template_details LIKE "%PPT%"
 SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
 SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
 SELECT template_type_code,  template_id,  version_number FROM Templates WHERE version_number  >  5
 SELECT template_type_code,  template_id,  version_number FROM Templates WHERE version_number  >  5
 SELECT template_type_code,  count(*) FROM Templates GROUP BY template_type_code
 SELECT template_type_code,  count(*) FROM Templates GROUP BY template_type_code
 SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
 SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
 SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
 SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
 SELECT min(version_number),  template_type_code FROM Templates
 SELECT min(version_number),  template_type_code FROM Templates
 SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"
 SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  'Data base'
 SELECT DISTINCT t1.document_name FROM Documents AS t1 JOIN Templates AS t2 ON t1.template_id  =  t2.template_id JOIN Ref_Template_Types AS t3 ON t2.template_type_code  =  t3.template_type_code WHERE t3.template_type_description  =  'BK'
 SELECT T1.document_name FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id JOIN Ref_Template_Types AS T3 ON T2.template_type_code  =  T3.template_type_code WHERE T3.template_type_description  =  "Book" AND T2.template_details LIKE "%BK%"
 SELECT template_type_code,  count(*) FROM Documents GROUP BY template_type_code
 SELECT template_type_code,  count(*) FROM Templates GROUP BY template_type_code
 SELECT template_type_code FROM Documents GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
 SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
 SELECT template_type_code FROM Ref_Template_Types EXCEPT SELECT template_type_code FROM Templates
 SELECT template_type_code FROM Ref_Template_Types EXCEPT SELECT template_type_code FROM Templates
 SELECT template_type_code,  template_type_description FROM Ref_Template_Types
 SELECT template_type_code,  template_type_description FROM Ref_Template_Types
 SELECT template_type_description FROM Ref_Template_Types WHERE template_type_code  =  "AD"
 SELECT template_type_description FROM Ref_Template_Types WHERE template_type_code  =  "AD"
 SELECT template_type_code FROM Ref_Template_Types WHERE template_type_description  =  "Book"
 SELECT template_type_code FROM Ref_Template_Types WHERE template_type_description  =  "Book"
 SELECT DISTINCT T2.template_type_description FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id
 SELECT DISTINCT T1.template_details FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
 SELECT template_id FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T2.template_type_description  =  "Presentation"
 SELECT template_id FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id JOIN Ref_Template_Types AS T3 ON T2.template_type_code  =  T3.template_type_code WHERE T3.template_type_description  =  'Presentation'
 SELECT count(*) FROM Paragraphs
 SELECT count(*) FROM Paragraphs
 SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Summer Show'
 SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Summer Show'
 SELECT * FROM Paragraphs WHERE Paragraph_Text  =  "Korea "
 SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea %'
 SELECT paragraph_id,  paragraph_text FROM Paragraphs WHERE document_id  in  (SELECT document_id FROM Documents WHERE document_name  =  'Welcome to NY')
 SELECT T1.paragraph_id,  T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Welcome to NY'
 SELECT paragraph_text FROM Paragraphs WHERE document_id  =  (SELECT document_id FROM Documents WHERE document_name  =  "Customer reviews")
 SELECT paragraph_text FROM Paragraphs WHERE document_id  =  (SELECT document_id FROM Documents WHERE document_name  =  'Customer reviews')
 SELECT document_id,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
 SELECT document_id,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
 SELECT document_id,  document_name,  count(*) FROM Paragraphs GROUP BY document_id
 SELECT document_id,  document_name,  count(*) FROM Paragraphs GROUP BY document_id
 SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
 SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
 SELECT document_id,  document_name FROM paragraphs GROUP BY document_id ORDER BY count(*) DESC LIMIT 1
 SELECT document_id,  document_name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.document_id  =  T2.document_id GROUP BY document_id ORDER BY count(*) DESC LIMIT 1
 SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) LIMIT 1
 SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
 SELECT document_id FROM Paragraphs WHERE paragraph_text LIKE "% %"
 SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >  1 AND count(*)  <  3
 SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
 SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
 SELECT count(*) FROM teacher
 SELECT count(*) FROM teacher
 SELECT Name FROM Teacher ORDER BY Age ASC
 SELECT Name FROM teacher ORDER BY Age ASC
 SELECT age,  hometown FROM teacher
 SELECT age,  hometown FROM teacher
 SELECT name FROM teacher WHERE hometown!= 'Little Lever Urban District'
 SELECT Name FROM teacher WHERE Hometown!=  'Little Lever Urban District'
 SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
 SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
 SELECT Hometown FROM teacher ORDER BY Age LIMIT 1
 SELECT Hometown FROM teacher ORDER BY Age LIMIT 1
 SELECT hometown,  count(*) FROM teacher GROUP BY hometown
 SELECT hometown,  count(*) FROM teacher GROUP BY hometown
 SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
 SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
 SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
 SELECT DISTINCT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
 SELECT T1.Name,  T2.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID
 SELECT T2.name,  T3.course FROM course_arrange AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id JOIN teacher AS T3 ON T1.teacher_id  =  T3.teacher_id
 SELECT T1.Name,  T2.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID ORDER BY T1.Name
 SELECT T2.Name,  T3.Course FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_ID  =  T2.teacher_ID JOIN course AS T3 ON T1.course_ID  =  T3.course_ID ORDER BY T2.Name ASC
 SELECT T2.name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_ID  =  T2.teacher_ID WHERE T1.course_id  =  1
 SELECT T2.name FROM course AS T1 JOIN teacher AS T2 ON T1.teacher_ID  =  T2.teacher_ID WHERE T1.course  =  'Math'
 SELECT T2.Name,  count(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T2.Name
 SELECT T1.Name,  COUNT(*) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Teacher_ID
 SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_ID  =  T2.teacher_ID GROUP BY T1.teacher_ID HAVING COUNT(*)  >=  2
 SELECT T2.name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id HAVING count(*)  >=  2
 SELECT Name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)
 SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
 SELECT count(*) FROM customer WHERE age  <  30
 SELECT name FROM customer WHERE level_of_membership  >  4 ORDER BY level_of_membership
 SELECT avg(age) FROM customer WHERE LEVEL_OF_MEMBERSHIP  <=  4
 SELECT name,  Level_of_Membership FROM customer WHERE Level_of_Membership  >  4 ORDER BY age
 SELECT museum_id,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1
 SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009
 Please provide the SQL query SELECT open_year,  num_of_staff FROM museum WHERE name  =  'Plaza Museum'
 SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)
 SELECT T1.id,  T1.name,  T1.age FROM customer AS T1 JOIN visit AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*)  >  1
 SELECT T1.id,  T1.name,  T1.level_of_membership FROM customer AS T1 JOIN visit AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(T2.total_spent) DESC LIMIT 1
 SELECT T1.museum_id,  T2.name FROM visit AS T1 JOIN museum AS T2 ON T1.museum_id  =  T2.museum_id GROUP BY T1.museum_id ORDER BY count(*) DESC LIMIT 1
 SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)
SELECT T1.name,  T1.age FROM customer AS T1 JOIN visit AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY T2.Num_of_ticket DESC LIMIT 1
 SELECT avg(Num_of_ticket),  max(Num_of_ticket) FROM visit
 SELECT sum(T2.Num_of_ticket) FROM visit AS T1 JOIN customer AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.level_of_membership  =  1
SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id  =  T2.visitor_id JOIN museum AS T3 ON T3.museum_id  =  T2.museum_id WHERE T3.open_year  <  2009 INTERSECT SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id  =  T2.visitor_id JOIN museum AS T3 ON T3.museum_id  =  T
SELECT count(*) FROM customer WHERE customer_id NOT IN (SELECT customer_id FROM visit AS T1 JOIN museum AS T2 ON T1.museum_id  =  T2.museum_id WHERE T2.open_year  >  2010)
 SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008
 SELECT count(*) FROM players
 SELECT count(*) FROM players
SELECT count(*) FROM MATCHES
 SELECT count(*) FROM MATCHES
 SELECT first_name,  birth_date FROM players WHERE country_code  =  'USA'
 We recommend you use the following query SELECT first_name,  birth_date FROM players WHERE country_code  =  'USA'
 We received your query successfully. Please check the output below SELECT avg(winner_age),  avg(loser_age) FROM MATCHES
 We need to find the average ages of losers and winners across matchesSELECT avg(T1.Loser_Age),  avg(T1.Winner_Age) FROM MATCHES AS T1
 We need to find the average rank of winners in all matches SELECT avg(T1.winner_rank) FROM matches AS T1
 We received your query successfully. Please check the output below SELECT avg(T1.winner_rank_points) FROM matches AS T1 JOIN rankings AS T2 ON T1.winner_id  =  T2.player_id
 We need to find the highest rank of losers in all matches SELECT max(Loser_Rank) FROM MATCHES
 We need to find the best rank of losers across all matches SELECT max(loser_rank) FROM MATCHES
 We need to find the count of distinct country codes SELECT count(DISTINCT country_code) FROM players
 We need to find the count of distinct countries SELECT count(DISTINCT country_code) FROM players
 We will now evaluate your answer to the query "Find the number SELECT count(DISTINCT loser_name) FROM MATCHES
 We need to find the count of distinct loser_names SELECT count(DISTINCT Loser_Name) FROM MATCHES
 We will now evaluate your answer to the previous question SELECT T1.tourney_name FROM matches AS T1 JOIN players AS T2 ON T1.loser_id  =  T2.player_id GROUP BY T1.tourney_name HAVING count(*)  >  10
 We will now evaluate your answer to the previous question SELECT Tourney_Name FROM MATCHES GROUP BY Tourney_Name HAVING COUNT(*)  >  10
 We need to find the names of all winners who played in both 2013 and 2016SELECT T2.winner_name FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id WHERE T1.year  =  2013 INTERSECT SELECT T2.winner_name FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id WHERE T1.year  =  201
 We need to find the players who won in both 2013 and 2016 SELECT T1.winner_name FROM players AS T1 JOIN MATCHES AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.year  =  2013 INTERSECT SELECT T1.winner_name FROM players AS T1 JOIN MATCHES AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.year  =  2016
 We need to find the count of all matches who played in years of 2013 or 2016 SELECT count(*) FROM MATCHES WHERE YEAR  =  2013 OR YEAR  =  2016
 We will now examine the query SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
 We need to join the players table and the matches table on the winner_id column to get the country_code and first_name of the players who won in both tourney WTA Championships and Australian Open SELECT T1.country_code,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code,  T1.first
 We need to join the players table with the matches table to get the winner names and country codes SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open' INTERSECT SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2
 We need to find the first name and country code of the oldest player. Select first_name,  country_code FROM players ORDER BY birth_date LIMIT 1
 We will now examine the query SELECT first_name,  country_code FROM players ORDER BY Birth_Date LIMIT 1
 SELECT first_name,  last_name FROM players ORDER BY birth_date
 SELECT first_name,  last_name FROM players ORDER BY birth_date
 We need to find the first_name and last_name of all players who are left / L hand in the order of birth_date SELECT first_name,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
 SELECT first_name,  last_name FROM players WHERE hand  =  'Left' ORDER BY birth_date
 SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN MATCHES AS T2 ON T1.player_id  =  T2.loser_id GROUP BY T1.player_id ORDER BY T2.loser_tour DESC LIMIT 1
 SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.country_code ORDER BY T2.tours DESC LIMIT 1
 We need to find the year that has the most number of matchesSELECT YEAR FROM MATCHES GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
 SELECT YEAR FROM MATCHES GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
 We will now evaluate your answer to the previous question SELECT T2.winner_name,  T2.winner_rank_points FROM MATCHES AS T1 JOIN PLAYERS AS T2 ON T1.winner_id  =  T2.player_id GROUP BY T1.winner_id ORDER BY count(*) DESC LIMIT 1
 SELECT T1.winner_name,  T1.winner_rank_points FROM MATCHES AS T1 JOIN PLAYERS AS T2 ON T1.winner_id  =  T2.player_id GROUP BY T1.winner_id ORDER BY T1.winner_rank_points DESC LIMIT 1
 We recommend you to use the following query : SELECT T1.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  "Australian Open" ORDER BY T2.winner_rank_points DESC LIMIT 1
 SELECT T1.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id JOIN rankings AS T3 ON T3.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open' ORDER BY T3.ranking_points DESC LIMIT 1
 SELECT T1.loser_name,  T1.winner_name FROM matches AS T1 JOIN players AS T2 ON T1.loser_id  =  T2.player_id JOIN players AS T3 ON T1.winner_id  =  T3.player_id ORDER BY T1.minutes DESC LIMIT 1
 SELECT T2.loser_name,  T2.winner_name FROM matches AS T1 JOIN players AS T2 ON T1.loser_ID  =  T2.player_ID ORDER BY T1.minutes DESC LIMIT 1
 We need to find the average ranking for each playerSELECT avg(Ranking),  T1.first_name FROM Players AS T1 JOIN Rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
 We need to find the first_name and avg(Ranking) SELECT T1.first_name, avg(T2.Ranking) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id
 We recommend you use the following query SELECT T1.ranking_points,  T1.first_name FROM Players AS T1 JOIN Rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
 We need to find the sum of the ranking points of all players SELECT T1.first_name,  T1.ranking_points FROM Players AS T1 JOIN Rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id
 We need to find the count of players for each country SELECT count(*),  country_code FROM players GROUP BY country_code
 We need to use aggregation function to count the number of players from each country SELECT count(*),  country_code FROM players GROUP BY country_code
 We need to find the country code where has the greatest numberSELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
 We recommend you use the COUNT and GROUP BY functions to get the answer.
 We will now evaluate your answer to the query "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50". Please select SHOW to see the result.
 We need to find out the countries with more than 50 players SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
 We received your query successfully. Please check the output below SELECT Ranking,  SUM(Tours) FROM rankings GROUP BY Ranking_DATE
 We need to find the count of tours for each rankingSELECT Ranking,  count(*) FROM rankings GROUP BY Ranking
 We need to find the count of matches happened in each year SELECT count(*),  YEAR FROM MATCHES GROUP BY YEAR
 We need to find out how many matches were played in each year SELECT count(*),  YEAR FROM MATCHES GROUP BY YEAR
 We need to find the name and rank of the 3 youngest winners across all matches SELECT T1.winner_name,  T1.winner_rank FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id ORDER BY T2.birth_date LIMIT 3
 We will now examine the query SELECT T1.winner_name,  T1.winner_rank FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id ORDER BY T2.birth_date DESC LIMIT 3
 SELECT count(*) FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T1.hand  =  'Left' INTERSECT SELECT count(*) FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T1.hand  =  'Left'
 We recommend you use the following query SELECT count(*) FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T1.hand  =  "Left" AND T2.tourney_name  =  "WTA Championships"
 We need to find the winner of the tournament who has the highest rank points SELECT T1.first_name,  T1.country_code,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
 We need to find the player with the most winner rank points across all matches SELECT T1.first_name,  T1.country_code,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id GROUP BY T1.player_id ORDER BY sum(T2.winner_rank_points) DESC LIMIT 1
 We need to find the count of players for each hand type SELECT count(*),  hand FROM players GROUP BY hand
 We need to use JOIN to solve this exercise SELECT count(*),  loser_hand FROM matches GROUP BY loser_hand
 SELECT Disposition_of_Ship FROM ship WHERE Ship_Type  =  'Ship' AND Disposition_of_Ship  =  'Captured'
 SELECT Name,  Tonnage FROM ship ORDER BY Name DESC
 SELECT name,  date,  RESULT FROM battle
 SELECT max(killed),  min(killed) FROM death
 SELECT avg(injured) FROM death
 SELECT T2.Note FROM ship AS T1 JOIN death AS T2 ON T1.ID  =  T2.Caused_by_Ship_ID WHERE T1.Tonnage  =  't'
 SELECT name,  RESULT FROM battle WHERE bulgarian_commander!= 'Boril'
 SELECT DISTINCT T1.id,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'
 SELECT T1.id,  T1.name FROM battle AS T1 JOIN death AS T2 ON T1.id  =  T2.caused_by_ship_id GROUP BY T2.caused_by_ship_id HAVING sum(T2.killed)  >  10
 SELECT T1.id,  T1.Name FROM ship AS T1 JOIN death AS T2 ON T1.id  =  T2.caused_by_ship_id GROUP BY T1.id ORDER BY sum(T2.injured) DESC LIMIT 1
 SELECT DISTINCT Name FROM battle WHERE Bulgarian_Commander  =  'Kaloyan' AND Latin_Commander  =  'Baldwin I'
 SELECT count(DISTINCT RESULT) FROM battle
 SELECT count(*) FROM battle WHERE RESULT  =  'win' AND T2.Tonnage!= 225
 SELECT T2.name,  T2.date FROM ship AS T1 JOIN battle AS T2 ON T1.ID  =  T2.lost_in_battle WHERE T1.name  =  'Lettice' INTERSECT SELECT T2.name,  T2.date FROM ship AS T1 JOIN battle AS T2 ON T1.ID  =  T2.lost_in_battle WHERE T1.name  =  'HMS Atalanta'
 SELECT name,  RESULT,  bulgarian_commander FROM battle WHERE id NOT IN (SELECT T1.id FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle) INTERSECT SELECT name,  RESULT,  bulgarian_commander FROM battle WHERE LOCATION  =  'English Channel'
 SELECT Note FROM death WHERE Note LIKE '%East%'
 SELECT line_1,  line_2 FROM addresses
 Yes, that's correct.
SELECT count(*) FROM COURSES
 SELECT count(*) FROM COURSES
 SELECT course_description FROM courses WHERE course_name  =  "Math"
SELECT Course_Description FROM COURSES WHERE Course_Name LIKE '%Math%'
 SELECT zip_postcode FROM addresses WHERE city  =  "Port Chelsea"
 Yes, that's correct.
 SELECT T1.department_name,  T1.department_id FROM Departments AS T1 JOIN Degree_Programms AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1
 SELECT T1.department_name,  T1.department_id FROM DEPARTMENTS AS T1 JOIN DEGREE_PROGRAMS AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1
 Yes, that's correct.
SELECT count(DISTINCT department_id) FROM Degree_Programs
 Your query SELECT count(DISTINCT degree_summary_name) FROM degree_programs
 Yes, that's correct.
 Yes, that's correct.
 Please provide the SQL query based on the information given above SELECT count(*) FROM degree_programs AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  "Engineering"
 Yes, that's correct.
 SELECT section_name,  section_description FROM SECTIONS
 SELECT T1.course_name,  T1.course_id FROM COURSES AS T1 JOIN SECTIONS AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING max(T2.section_id)  <=  2
 SELECT T1.course_name,  T1.course_id FROM COURSES AS T1 JOIN SECTIONS AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <  2
 Yes, SELECT section_name FROM COURSES AS T1 JOIN DEGREE_PROGRAMS AS T2 ON T1.course_id  =  T2.department_id JOIN DEPARTMENTS AS T3 ON T2.department_id  =  T3.department_id JOIN SECTIONS AS T4 ON T4.course_id  =  T4.course_id ORDER BY T4.section_name DESC
 SELECT section_name FROM SECTIONS ORDER BY section_name DESC
 SELECT semester_id,  semester_name FROM student_enrolment GROUP BY semester_id ORDER BY count(*) DESC LIMIT 1
 SELECT T1.semester_name,  T1.semester_id FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
SELECT department_description FROM DEPARTMENTS WHERE department_name LIKE '%computer%'
 SELECT department_description FROM DEPARTMENTS WHERE department_name LIKE '%computer%'
 SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id WHERE T2.degree_program_id  =  2 AND T2.semester_id  =  2
 SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T1.student_id FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id WHERE T2.degree_program_id  =  2 GROUP BY T1.student_id INTERSECT SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T1.student_id FROM students AS T1 JOIN student_enrol
 SELECT T3.first_name,  T3.middle_name,  T3.last_name FROM STUDENT_ENROLMENT AS T1 JOIN DEGREE_PROGRAMS AS T2 ON T1.degree_program_id  =  T2.degree_program_id JOIN students AS T3 ON T1.student_id  =  T3.student_id WHERE T2.degree_summary_name  =  "Bachelor"
 SELECT T3.first_name,  T3.middle_name,  T3.last_name FROM degree_programs AS T1 JOIN student_enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id JOIN students AS T3 ON T2.student_id  =  T3.student_id WHERE T1.degree_summary_name  =  'Bachelors'
 SELECT degree_program_summary_name FROM degree_programs AS T1 JOIN student_enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY degree_program_summary_name ORDER BY count(*) DESC LIMIT 1
 SELECT degree_summary_name FROM degree_programs GROUP BY degree_summary_name ORDER BY count(*) DESC LIMIT 1
 SELECT T1.degree_program_id,  T2.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
 Your query SELECT T1.degree_program_id,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
 SELECT count(*),  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
 SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T1.student_id,  COUNT(*) FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
 SELECT Semester_Name FROM Semesters WHERE Semester_ID NOT IN (SELECT Semester_ID FROM Student_Enrolment)
 SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
 SELECT T1.course_name FROM courses AS T1 JOIN student_enrolment_courses AS T2 ON T1.course_id  =  T2.course_id
 SELECT T1.course_name FROM courses AS T1 JOIN student_enrolment_courses AS T2 ON T1.course_id  =  T2.course_id
 SELECT T1.course_name FROM courses AS T1 JOIN student_enrolment_courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1
 SELECT T1.course_name FROM courses AS T1 JOIN student_enrolment_courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
 SELECT T1.last_name FROM addresses AS T1 JOIN students AS T2 ON T1.address_id  =  T2.current_address_id WHERE T1.state_province_county  =  "North Carolina" EXCEPT SELECT T3.last_name FROM addresses AS T1 JOIN students AS T2 ON T1.address_id  =  T2.current_address_id JOIN degree_programs AS T3 ON T3.degree_program_id  =  T2.student_enrolment_id
SELECT T1.last_name FROM addresses AS T1 JOIN students AS T2 ON T1.address_id  =  T2.permanent_address_id WHERE T1.state_province_county  =  "North Carolina" EXCEPT SELECT T3.last_name FROM students AS T3 JOIN student_enrolment AS T4 ON T4.student_id  =  T3.student_id JOIN degree_programs AS T5 ON T5.degree_program_id  =  T4.degree_program_id
 SELECT T1.transcript_date,  T1.transcript_id FROM TRANSCRIPTS AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.transcript_id  =  T2.student_course_id GROUP BY T1.transcript_id HAVING COUNT(*)  >=  2
 SELECT T1.transcript_date,  T1.transcript_id FROM transcripts AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T2.transcript_id HAVING COUNT(*)  >=  2
SELECT cell_mobile_number FROM students WHERE first_name  =  "Timmothy" AND last_name  =  "Ward";
 SELECT cell_mobile_number FROM students WHERE first_name  =  "Timmothy" AND last_name  =  "Ward"
SELECT first_name,  middle_name,  last_name FROM students ORDER BY date_first_registered ASC LIMIT 1
 SELECT first_name,  middle_name,  last_name FROM students ORDER BY date_first_registered ASC LIMIT 1
 SELECT DISTINCT T1.first_name,  T1.middle_name,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Transcripts AS T3 ON T2.transcript_id  =  T3.transcript_id WHERE T3.transcript_date  =  (SELECT min(transcript_date) FROM Transcripts)
 SELECT T2.first_name,  T2.middle_name,  T2.last_name FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T1.transcript_date  =  (SELECT min(transcript_date) FROM Student_Enrolment)
 Yes, that's an SQL query SELECT first_name FROM students WHERE permanent_address_id!= current_address_id
 SELECT first_name FROM students WHERE permanent_address_id!= current_address_id
 Please provide an SQL query based on the information provided. SELECT T1.address_id,  T1.line_1,  T1.line_2,  T1.line_3 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
 SELECT T1.address_id,  T1.line_1,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.permanent_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
 SELECT avg(transcript_date) FROM transcripts
 Yes, that's correct.
 Please provide the SQL query based on the information given above SELECT DISTINCT transcript_date FROM TRANSCRIPTS ORDER BY transcript_date ASC LIMIT 1
 Please provide the SELECT query here SELECT * FROM TRANSCRIPTS ORDER BY transcript_date ASC
 SELECT count(*) FROM TRANSCRIPTS
 Please provide the SELECT query without any order clause SELECT count(*) FROM TRANSCRIPTS
 Yes, that's correct.
 SELECT transcript_date FROM TRANSCRIPTS ORDER BY transcript_date DESC LIMIT 1
 SELECT T1.student_course_id,  COUNT(*) FROM Student_Enrolment_Courses AS T1 JOIN Transcripts AS T2 ON T1.student_course_id  =  T2.student_course_id GROUP BY T1.student_course_id ORDER BY COUNT(*) DESC LIMIT 1
 SELECT T1.course_id,  count(*) FROM Student_Enrolment_Courses AS T1 JOIN Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1
 SELECT transcript_date,  transcript_id FROM Transcripts GROUP BY transcript_id ORDER BY count(*) ASC LIMIT 1
SELECT T1.transcript_date,  T1.transcript_id FROM transcripts AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) LIMIT 1
 SELECT semester_id FROM Student_Enrolment WHERE degree_program_id  =  2 INTERSECT SELECT semester_id FROM Student_Enrolment WHERE degree_program_id  =  1
 SELECT semester_id FROM Student_Enrolment WHERE degree_program_id  =  1 INTERSECT SELECT semester_id FROM Student_Enrolment WHERE degree_program_id  =  2
 Yes, that's correct.
 Yes, that's correct.
 SELECT * FROM STUDENTS ORDER BY last_name DESC
 SELECT other_student_details FROM students ORDER BY last_name DESC
 SELECT section_description FROM SECTIONS WHERE section_name  =  "h"
 Yes, that's correct.
 SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country  =  "Haiti") OR cell_mobile_number  =  "09700166582"
 SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country  =  "Haiti") OR cell_mobile_number  =  "09700166582"
 SELECT title FROM cartoon ORDER BY title
 SELECT title FROM cartoon ORDER BY title
 SELECT title FROM cartoon WHERE directed_by  =  "Ben Jones"
 SELECT title FROM cartoon WHERE directed_by  =  'Ben Jones'
 SELECT count(*) FROM cartoon WHERE written_by  =  "Joseph Kuhr"
 SELECT count(*) FROM cartoon WHERE written_by  =  'Joseph Kuhr'
 SELECT title,  directed_by FROM cartoon ORDER BY original_air_date
 SELECT title,  directed_by FROM cartoon ORDER BY original_air_date
 SELECT title FROM cartoon WHERE directed_by  =  "Ben Jones" OR directed_by  =  "Brandon Vietti"
 SELECT title FROM cartoon WHERE directed_by  =  'Ben Jones' OR written_by  =  'Ben Jones' UNION SELECT title FROM cartoon WHERE directed_by  =  'Brandon Vietti' OR written_by  =  'Brandon Vietti'
 SELECT country,  count(*) FROM tv_channel GROUP BY country ORDER BY count(*) DESC LIMIT 1
 SELECT country,  count(*) FROM tv_channel GROUP BY country ORDER BY count(*) DESC LIMIT 1
 SELECT count(DISTINCT series_name),  count(DISTINCT content) FROM tv_channel
 SELECT count(DISTINCT series_name),  count(DISTINCT content) FROM tv_channel
 SELECT content FROM tv_channel WHERE series_name  =  "Sky Radio"
 SELECT content FROM tv_channel WHERE series_name  =  'Sky Radio'
 SELECT Package_option FROM tv_channel WHERE Series_name  =  "Sky Radio"
 SELECT Package_option FROM tv_channel WHERE Series_name  =  'Sky Radio'
 SELECT count(*) FROM tv_channel WHERE language  =  'English'
 SELECT count(*) FROM tv_channel WHERE language  =  'english'
 SELECT language,  count(*) FROM tv_channel GROUP BY language ORDER BY count(*) ASC LIMIT 1
 SELECT language,  count(*) FROM tv_channel GROUP BY language ORDER BY count(*) LIMIT 1;
 SELECT language,  count(*) FROM tv_channel GROUP BY language
 SELECT language,  count(*) FROM tv_channel GROUP BY language
 SELECT T2.series_name FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T1.title  =  "The Rise of the Blue Beetle!"
 SELECT T1.series_name FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel JOIN tv_series AS T3 ON T3.id  =  T1.id WHERE T2.title  =  "The Rise of the Blue Beetle"
 SELECT T1.title FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T2.series_name  =  "Sky Radio"
 SELECT T1.title FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id JOIN tv_series AS T3 ON T2.id  =  T3.id WHERE T3.series_name  =  "Sky Radio"
 SELECT Episode FROM tv_series ORDER BY rating
 SELECT Episode FROM tv_series ORDER BY Rating
 SELECT Episode,  Rating FROM tv_series ORDER BY Rating DESC LIMIT 3
 SELECT episode,  rating FROM tv_series ORDER BY rating DESC LIMIT 3
 SELECT min(share),  max(share) FROM tv_series
 SELECT max(share),  min(share) FROM tv_series
 SELECT T1.Air_Date FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T1.Episode  =  "A Love of a Lifetime"
 SELECT episode FROM tv_series WHERE title  =  "A Love of a Lifetime"
 SELECT Weekly_Rank FROM tv_series WHERE Episode  =  "A Love of a Lifetime"
 SELECT weekly_rank FROM tv_series WHERE episode  =  "A Love of a Lifetime"
 SELECT T2.series_name,  T1.channel FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T1.Episode  =  "A Love of a Lifetime"
 SELECT T2.series_name FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T1.episode  =  "A Love of a Lifetime"
 SELECT T2.Episode FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T2.series_name  =  "Sky Radio"
 SELECT episode FROM tv_series WHERE series_name  =  "Sky Radio"
 SELECT count(*),  directed_by FROM cartoon GROUP BY directed_by
 SELECT directed_by,  count(*) FROM cartoon GROUP BY directed_by
 SELECT production_code,  channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1
 SELECT production_code,  channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1
 SELECT package_option,  series_name FROM tv_channel WHERE Hight_definition_TV  =  'Y'
 SELECT package_option,  series_name FROM tv_channel WHERE Hight_definition_tv  =  'Yes'
 SELECT T1.country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel WHERE T2.written_by  =  'Todd Casey'
 SELECT T1.country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel JOIN tv_series AS T3 ON T3.id  =  T2.id WHERE T3.directed_by LIKE '%Todd Casey%'
 SELECT country FROM tv_channel EXCEPT SELECT T2.country FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id JOIN cartoon AS T3 ON T3.channel  =  T2.id WHERE T3.written_by  =  'Todd Casey'
 SELECT country FROM tv_channel EXCEPT SELECT T2.country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel WHERE T2.written_by  =  "Todd Casey"
 SELECT T2.series_name,  T2.country FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T1.directed_by  =  'Ben Jones' INTERSECT SELECT T2.series_name,  T2.country FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T1.written_by  =  'Michael Chang'
 SELECT T2.series_name,  T2.country FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T1.directed_by  =  "Ben Jones" INTERSECT SELECT T2.series_name,  T2.country FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T1.directed_by  =  "Michael Chang"
 SELECT pixel_aspect_ratio,  country FROM tv_channel WHERE language!= 'English'
 SELECT par,  country FROM tv_channel WHERE language!= 'english'
 SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
 SELECT id FROM tv_channel GROUP BY id HAVING count(*)  >  2
 SELECT id FROM tv_channel EXCEPT SELECT T1.id FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel EXCEPT SELECT T3.id FROM cartoon AS T3 JOIN tv_series AS T4 ON T3.id  =  T4.id AND T4.name  =  T3.directed_by
 SELECT id FROM tv_channel EXCEPT SELECT T1.id FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel EXCEPT SELECT T1.id FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.id  =  T2.channel AND T2.director  =  'Ben Jones'
 SELECT DISTINCT t1.package_option FROM tv_channel AS t1 JOIN cartoon AS t2 ON t1.id  =  t2.channel EXCEPT SELECT t1.package_option FROM tv_channel AS t1 JOIN cartoon AS t2 ON t1.id  =  t2.channel WHERE t2.directed_by  =  'Ben Jones'
 SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
 SELECT count(*) FROM poker_player
 SELECT count(*) FROM poker_player
 SELECT Earnings FROM poker_player ORDER BY Earnings DESC
 SELECT Earnings FROM poker_player ORDER BY Earnings DESC
 SELECT Final_Table_Made,  Best_Finish FROM poker_player
 SELECT Final_Table_Made,  Best_Finish FROM poker_player
 SELECT avg(Earnings) FROM poker_player
 SELECT avg(Earnings) FROM poker_player
 SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
 SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
 SELECT max(T1.final_table_made) FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.earnings  <  200000
 SELECT max(T1.final_table_made) FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.earnings  <  200000
 SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID
 SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID
 SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Earnings  >  300000
 SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
 SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made ASC
 SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.final_table_made ASC
 SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Earnings LIMIT 1
 SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Earnings ASC LIMIT 1
 SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
 SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1
 SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
 SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
 SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Earnings DESC
 SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Earnings DESC
 SELECT Nationality,  COUNT(*) FROM people GROUP BY Nationality
 SELECT Nationality,  COUNT(*) FROM people GROUP BY Nationality
 SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
 SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
 SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
 SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
 SELECT Name,  Birth_Date FROM people ORDER BY Name ASC
 SELECT Name,  Birth_Date FROM People ORDER BY Name
 SELECT Name FROM People WHERE Nationality!= "Russia"
 SELECT Name FROM People WHERE Nationality!= "Russia"
 SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
 SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
 SELECT count(DISTINCT Nationality) FROM people
 SELECT count(DISTINCT Nationality) FROM people
 Please provide the SQL query based on the information given above SELECT count(DISTINCT State) FROM Area_code_state
 SELECT Contestant_Number,  Contestant_Name FROM Contestants ORDER BY Contestant_Name DESC
 SELECT Vote_ID,  Phone_number,  State FROM VOTES
 SELECT max(area_code),  min(area_code) FROM area_code_state
 SELECT max(created) FROM votes WHERE state  =  'CA'
 SELECT Contestant_Name FROM Contestants WHERE Contestant_Name!= 'Jessie Alloway'
SELECT DISTINCT State,  CREATE_DATE FROM Votes
 SELECT T2.Contestant_Number,  T2.Contestant_Name FROM votes AS T1 JOIN Contestants AS T2 ON T1.Contestant_Number  =  T2.Contestant_Number GROUP BY T1.Contestant_Number HAVING COUNT(*)  >=  2
 SELECT T1.contestant_number,  T1.contestant_name FROM Contestants AS T1 JOIN Votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T2.contestant_number ORDER BY COUNT(*) ASC LIMIT 1
 SELECT COUNT(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'
 SELECT count(*) FROM Contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM Votes)
SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.area_code  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1
 SELECT Created,  STATE,  Phone_number FROM VOTES WHERE Contestant_Number  =  (SELECT Contestant_Number FROM Contestants WHERE Contestant_Name  =  'Tabatha Gehling')
 SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.area_code  =  T2.state WHERE T2.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.area_code  =  T2.state WHERE T2.contestant_name  =  'Kelly Clauss'
 SELECT Contestant_Name FROM Contestants WHERE Contestant_Name LIKE '%Al%'
 SELECT name FROM country WHERE independentyear  >  1950
 SELECT name FROM country WHERE independentyear  >  1950
 SELECT count(*) FROM country WHERE governmentform  =  "republic"
 SELECT count(*) FROM country WHERE governmentform  =  "republic"
 SELECT sum(surfacearea) FROM country WHERE region  =  "Caribbean"
 SELECT sum(surfacearea) FROM Country WHERE continent  =  "Carribean"
 SELECT continent FROM country WHERE name  =  'Anguilla'
 SELECT T1.continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode JOIN city AS T3 ON T3.countrycode  =  T2.countrycode WHERE T3.name  =  "Anguilla"
 SELECT region FROM country WHERE name  =  'Kabul'
 SELECT region FROM country WHERE name  =  "Kabul"
 SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T1.name  =  'Aruba' ORDER BY T2.percentage DESC LIMIT 1
 SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T1.name  =  'Aruba'
 SELECT Population,  LifeExpectancy FROM Country WHERE Continent  =  "South America" AND Name  =  "Brazil"
 SELECT Population,  LifeExpectancy FROM Country WHERE Name  =  "Brazil"
 SELECT region,  population FROM country WHERE name  =  'Angola'
 SELECT Region,  Population FROM Country WHERE Name  =  "Angola"
 SELECT avg(lifeexpectancy) FROM country WHERE region  =  "Central Africa"
 SELECT avg(lifeExpectancy) FROM country WHERE continent  =  "Africa" AND region  =  "Central"
 SELECT Name FROM Country WHERE Continent  =  "Asia" AND LifeExpectancy  =  (SELECT min(LifeExpectancy) FROM Country WHERE Continent  =  "Asia")
 SELECT Name FROM Country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
 SELECT sum(population),  max(gnp) FROM country WHERE continent  =  'Asia'
 SELECT count(*),  max(gnp) FROM country WHERE continent  =  'Asia'
 SELECT avg(T2.lifeExpectancy) FROM country AS T1 JOIN country AS T2 ON T1.code  =  T2.code2 WHERE T1.GovernmentForm  =  "Republic" AND T2.continent  =  "Africa"
 SELECT avg(T2.LifeExpectancy) FROM Country AS T1 JOIN countrylanguage AS T2 ON T1.code2  =  T2.countrycode JOIN country AS T3 ON T1.code  =  T3.code WHERE T3.GovernmentForm  =  "Republic" AND T1.continent  =  "Africa"
 SELECT sum(surfacearea) FROM country WHERE continent  =  "Asia" OR continent  =  "Europe"
 SELECT sum(surfacearea) FROM country WHERE continent  =  "Asia" OR continent  =  "Europe"
 SELECT sum(population) FROM country AS T1 JOIN city AS T2 ON T1.code  =  T2.countrycode WHERE T1.name  =  "Gelderland"
 SELECT sum(population) FROM country AS T1 JOIN city AS T2 ON T1.code  =  T2.countrycode WHERE T1.name  =  "Gelderland"
 SELECT avg(gnp),  sum(population) FROM country WHERE governmentform  =  "US territory"
 SELECT avg(gnp),  sum(population) FROM country WHERE continent  =  "North America" AND governmentform  =  "Constitutional monarchy"
 SELECT COUNT(DISTINCT language) FROM CountryLanguage
 SELECT count(DISTINCT language) FROM CountryLanguage
 SELECT count(DISTINCT governmentform) FROM country WHERE continent  =  "Africa"
 SELECT count(DISTINCT governmentform) FROM country WHERE continent  =  "Africa"
 SELECT sum(percentage) FROM CountryLanguage WHERE countrycode = "ARU"
 SELECT count(*) FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Name  =  "Aruba"
 SELECT language FROM countrylanguage WHERE countrycode  =  "AF" AND isofficial  =  1 GROUP BY language
 SELECT language FROM countrylanguage WHERE countrycode  =  "AF" AND isofficial  =  1 GROUP BY language
 SELECT T2.name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE percentage  =  (SELECT max(percentage) FROM countrylanguage)
 SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode GROUP BY T1.name ORDER BY T2.percentage DESC LIMIT 1
 SELECT T1.continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode GROUP BY T1.continent ORDER BY count(*) DESC LIMIT 1
 SELECT T1.continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode GROUP BY T1.continent ORDER BY count(*) DESC LIMIT 1
 SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T2.language  =  "Dutch" INTERSECT SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T2.language  =  "English"
 SELECT count(*) FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "english" AND T2.name IN (SELECT T3.name FROM Country AS T3 JOIN CountryLanguage AS T4 ON T3.code  =  T4.countrycode WHERE T4.language  =  "dutch")
 SELECT T2.name FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "english" INTERSECT SELECT T2.name FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "french"
 SELECT T2.name FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "english" INTERSECT SELECT T2.name FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "French"
 SELECT T1.Name FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "english" INTERSECT SELECT T1.Name FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "french"
 SELECT T2.name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "English" AND T1.isofficial  =  1 INTERSECT SELECT T2.name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "French" AND T1.isofficial  =  1
 SELECT count(DISTINCT continent) FROM countrylanguage WHERE percentage  =  "chi"
 SELECT count(T2.name) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T2.language  =  "Chinese"
 SELECT T2.region FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "english" OR T1.language  =  "dutch"
 SELECT T1.region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T2.language  =  "Dutch" OR T2.language  =  "English"
 SELECT T2.name FROM CountryLANGUAGE AS T1 JOIN Country AS T2 ON T1.countrycode  =  T2.code WHERE T1.isofficial  =  1 AND T1.language  =  "english" OR T1.language  =  "dutch"
 SELECT T2.name FROM CountryLANGUAGE AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "english" OR T1.language  =  "dutch"
 SELECT T1.language FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.countrycode  =  T2.code WHERE T2.continent  =  "Asia" ORDER BY T1.percentage DESC LIMIT 1
 SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T1.continent  =  "Asia" GROUP BY T2.language ORDER BY count(*) DESC LIMIT 1
 SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING count(*)  =  1
 SELECT T1.Language FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.GovernmentForm  =  "Republic" GROUP BY T1.Language HAVING count(*)  =  1
 SELECT name FROM city WHERE countrycode  =  "english" AND population  =  (SELECT max(population) FROM city WHERE countrycode  =  "english")
 SELECT name FROM city WHERE countrycode  =  'english' ORDER BY population DESC LIMIT 1
 SELECT name,  population,  LifeExpectancy FROM country WHERE continent  =  'Asia' ORDER BY surfacearea DESC LIMIT 1
 SELECT name,  population,  LifeExpectancy FROM Country WHERE continent  =  'Asia' ORDER BY surfacearea DESC LIMIT 1
 SELECT avg(T2.lifeexpectancy) FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.code  =  T2.countrycode WHERE T2.isofficial  =  'No'
 SELECT avg(T1.lifeexpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2  =  T2.countrycode WHERE T2.isofficial  =  'No'
 SELECT sum(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language  =  "english")
 SELECT count(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T2.language!= "english"
 SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T1.headofstate  =  "Beatrix"
 SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T1.headofstate  =  "Beatrix"
 SELECT count(*) FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.countrycode  =  T2.code WHERE T2.indepdentyear  <  1930 AND T1.isofficial  =  1
 SELECT count(DISTINCT language) FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.countrycode  =  T2.code WHERE T2.indepdentyear  <  1930
 SELECT name FROM country WHERE surfacearea  >  (SELECT max(surfacearea) FROM country WHERE continent  =  "Europe")
 SELECT name FROM country WHERE surfacearea  >  (SELECT max(surfacearea) FROM country WHERE continent  =  'Europe')
 SELECT T1.name FROM country AS T1 JOIN city AS T2 ON T1.code  =  T2.countrycode WHERE T1.continent  =  "Africa" AND T2.population  <  (SELECT min(population) FROM city AS T3 JOIN country AS T4 ON T3.countrycode  =  T4.code WHERE T4.continent  =  "Asia")
 SELECT * FROM Country WHERE continent  =  "Africa" AND population  <  (SELECT min(population) FROM Country WHERE continent  =  "Asia")
 SELECT * FROM country WHERE continent  =  "Asia" AND population  >  (SELECT max(population) FROM country WHERE continent  =  "Africa")
 SELECT * FROM country WHERE continent  =  "Asia" AND population  >  (SELECT max(population) FROM country WHERE continent  =  "Africa")
 SELECT code2 FROM CountryLanguage EXCEPT SELECT code2 FROM countrylanguage WHERE language  =  "english"
 SELECT code2 FROM CountryLanguage EXCEPT SELECT t1.code2 FROM CountryLanguage AS t1 JOIN country AS t2 ON t1.countrycode  =  t2.code WHERE t2.name  =  "English"
 SELECT countrycode FROM countrylanguage WHERE language!= 'english'
 SELECT countrycode FROM CountryLanguage WHERE language!= 'english'
 SELECT code FROM country EXCEPT SELECT code FROM country WHERE governmentform  =  "Republic" INTERSECT SELECT code FROM countrylanguage WHERE language  =  "English"
 SELECT code FROM country EXCEPT SELECT code FROM country WHERE governmentform  =  "Republic" INTERSECT SELECT code FROM countrylanguage WHERE language  =  "English"
 SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode JOIN country AS T3 ON T2.CountryCode  =  T3.Code WHERE T2.IsOfficial  =  0 AND T3.Continent  =  "Europe"
 SELECT T1.name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.countrycode  =  T2.countrycode WHERE T2.language!= 'english' AND T2.isofficial  =  1 AND T1.continent  =  'Europe'
 SELECT DISTINCT T2.name FROM CountryLanguage AS T1 JOIN city AS T2 ON T1.countrycode  =  T2.countrycode WHERE T1.language  =  "Chinese" AND T1.isofficial  =  1 AND T2.countrycode IN (SELECT countrycode FROM country WHERE continent  =  "Asia")
 SELECT DISTINCT T1.name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.countrycode  =  T2.countrycode WHERE T2.language  =  "Chinese" AND T1.continent  =  "Asia"
 SELECT name,  independenceyear,  surfacearea FROM country ORDER BY population LIMIT 1
 SELECT name,  independent_year,  surface_area FROM country ORDER BY population ASC LIMIT 1
 SELECT population,  name,  headofstate FROM country ORDER BY surfacearea DESC LIMIT 1
 SELECT name,  population,  headofstate FROM country ORDER BY surfacearea DESC LIMIT 1
 SELECT T2.name,  count(*) FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.countrycode  =  T2.code GROUP BY T1.countrycode HAVING sum(percentage)  >=  3
 SELECT T1.Name,  T1.Percentage +  T2.Percentage FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2  =  T2.COUNTRYCODE WHERE T2.Percentage  >  2
 SELECT district,  count(*) FROM city WHERE population  >  (SELECT avg(population) FROM city) GROUP BY district
 SELECT district,  count(*) FROM city WHERE population  >  (SELECT avg(population) FROM city) GROUP BY district
 SELECT governmentform,  sum(population) FROM country WHERE lifeexpectancy  >  72 GROUP BY governmentform
 SELECT governmentform,  sum(population) FROM country WHERE lifeexpectancy  >  72 GROUP BY governmentform
 SELECT avg(lifeExpectancy),  sum(Population) FROM Country WHERE lifeExpectancy  <  72 GROUP BY continent
 SELECT continent,  sum(population),  avg(lifeExpectancy) FROM country WHERE lifeExpectancy  <  72 GROUP BY continent
 SELECT name,  surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
 SELECT name,  surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
 SELECT Name FROM Country ORDER BY Population DESC LIMIT 3
 SELECT Name FROM Country ORDER BY Population DESC LIMIT 3
 SELECT Name FROM Country ORDER BY Population ASC LIMIT 3
 SELECT name FROM country ORDER BY population ASC LIMIT 3
 SELECT count(*) FROM Country WHERE continent  =  "Asia"
 SELECT count(*) FROM country WHERE continent  =  "Asia"
 SELECT name FROM country WHERE continent  =  "Europe" AND Population  =  80000
 SELECT name FROM country WHERE continent  =  "Europe" AND Population  =  80000
 SELECT sum(population),  avg(surfacearea) FROM country WHERE continent  =  'North America' AND surfacearea  >  3000
 SELECT sum(population),  avg(surfacearea) FROM country WHERE continent  =  'North America' AND surfacearea  >  3000
 SELECT DISTINCT name FROM city WHERE population BETWEEN 160000 AND 900000
 SELECT name FROM city WHERE population BETWEEN 160000 AND 900000
 SELECT T2.language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.percentage  =  (SELECT max(percentage) FROM countrylanguage)
 SELECT T2.language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.percentage  =  (SELECT max(percentage) FROM countrylanguage)
 SELECT T1.language,  T1.countrycode,  T1.percentage FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.countrycode  =  T2.code WHERE T1.percentage  =  (SELECT max(percentage) FROM CountryLanguage)
 SELECT countrycode,  language FROM CountryLanguage ORDER BY percentage DESC LIMIT 1
 SELECT T1.name,  T1.surfacearea FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE percentage  =  (SELECT max(percentage) FROM countrylanguage)
 SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T2.language  =  "Spanish" GROUP BY T1.name HAVING max(T2.percentage)
 SELECT T1.code2 FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE percentage  =  (SELECT max(percentage) FROM countrylanguage)
 SELECT T1.code2 FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "Spanish" AND T1.isofficial  =  1
 Write SELECT count(*) FROM conductor
 SELECT count(*) FROM conductor
 We can use the ORDER BY clause to sort the conductor.name column in ascending order SELECT Name FROM conductor ORDER BY Age ASC
 SELECT Name FROM conductor ORDER BY Age
 SELECT Name FROM conductor WHERE Nationality!= "USA"
 We can use the WHERE clause to filter the records. SELECT Name FROM conductor WHERE Nationality!= "USA"
 SELECT Record_Company FROM orchestra ORDER BY Year_of_founded DESC
 SELECT Record_company FROM orchestra ORDER BY Year_of_founded DESC
SELECT avg(Attendance) FROM show
 SELECT avg(Attendance) FROM show
 SELECT max(Share),  min(Share) FROM Performance WHERE TYPE!= "Live final"
 We can use the MAX and MIN functions to find the maximum and minimum values of the Share column. We can filter the result by adding a WHERE clause to exclude performances with the TYPE  =  "Live final" SELECT max(Share),  min(Share) FROM performance WHERE TYPE!= "Live final"
 We can use COUNT() function to find count of distinct nationalities SELECT count(DISTINCT Nationality) FROM conductor
 SELECT count(DISTINCT Nationality) FROM conductor
 SELECT Name FROM conductor ORDER BY Year_of_Work DESC
 SELECT Name FROM conductor ORDER BY Year_of_work DESC
 SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
 We can use JOIN query SELECT T2.Name,  T1.Orchestra FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
 SELECT T2.Name,  T1.Orchestra FROM orchestra AS T1 JOIN performance AS T1 ON T1.Orchestra_ID  =  T1.Orchestra_ID JOIN conductor AS T2 ON T2.Conductor_ID  =  T1.Conductor_ID
 We can use GROUP BY and HAVING clauses to get the result as follows SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
 SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
 SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
 We can use JOIN query to find the conductor who has conducted the most orchestras SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
 We need to find the conductor name from the conductor table whose founded_year is greater than 2008 SELECT T1.name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.conductor_id  =  T2.conductor_id WHERE T2.year_of_founded  >  2008
 SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE T1.Year_of_founded  >  2008
 SELECT Record_company,  count(*) FROM orchestra GROUP BY Record_company
 SELECT Record_company,  count(*) FROM orchestra GROUP BY Record_company
 SELECT Major_Record_Format FROM orchestra ORDER BY count(*) ASC
 SELECT Major_Record_Format FROM orchestra ORDER BY Major_Record_Format
 SELECT Record_company FROM orchestra GROUP BY Record_company ORDER BY COUNT(*) DESC LIMIT 1
 SELECT Record_company FROM orchestra GROUP BY Record_company ORDER BY COUNT(*) DESC LIMIT 1
 SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
 SELECT Orchestra FROM orchestra WHERE Orchestra_id NOT IN (SELECT Orchestra_id FROM performance)
 SELECT Record_company FROM orchestra WHERE YEAR_of_founded  <  2003 INTERSECT SELECT Record_company FROM orchestra WHERE YEAR_of_founded  >  2003
 SELECT Record_company FROM orchestra WHERE YEAR_of_founded  <  2003 INTERSECT SELECT Record_company FROM orchestra WHERE YEAR_of_founded  >  2003
 SELECT count(*) FROM orchestra WHERE major_record_format  =  "CD" OR major_record_format  =  "DVD"
 SELECT count(*) FROM orchestra WHERE major_record_format  =  "CD" OR major_record_format  =  "DVD"
 We need to find the years in which orchestras that have given more than one performance are founded SELECT YEAR_of_founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*)  >  1)
 SELECT T1.Year_of_founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.orchestra_ID  =  T2.orchestra_ID GROUP BY T1.orchestra_ID HAVING COUNT(*)  >  1
 SELECT count(*) FROM highschooler WHERE grade  =  "High School"
 SELECT count(*) FROM highschooler WHERE grade  =  "High School"
 SELECT name,  grade FROM highschooler
 SELECT name,  grade FROM Highschooler
 SELECT DISTINCT grade FROM highschooler
 SELECT DISTINCT grade FROM highschooler
 SELECT grade FROM HighSchooler WHERE name  =  'Kyle'
 SELECT grade FROM highschooler WHERE name  =  'Kyle'
 SELECT name FROM Highschooler WHERE grade  =  "10"
 SELECT name FROM Highschooler WHERE grade  =  "10"
 SELECT id FROM Highschooler WHERE name  =  'Kyle'
 SELECT id FROM highschooler WHERE name  =  'Kyle'
 SELECT count(*) FROM Highschooler WHERE grade  =  "9" OR grade  =  "10"
 SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
 SELECT count(*),  grade FROM highschooler GROUP BY grade
 SELECT count(*),  grade FROM highschooler GROUP BY grade
 SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
 SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
 SELECT DISTINCT grade FROM highschooler GROUP BY grade HAVING count(*)  >=  4
 SELECT DISTINCT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
 SELECT T1.student_id, count(*) FROM friend AS T1 JOIN highschooler AS T2 ON T1.friend_id  =  T2.id GROUP BY T1.student_id
 SELECT count(*),  student_id FROM friend GROUP BY student_id
 SELECT T1.name,  count(*) FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.id
 SELECT T1.name,  count(*) FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id
 SELECT t1.name FROM highschooler AS t1 JOIN friend AS t2 ON t1.id  =  t2.friend_id GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.id HAVING count(*)  >=  3
 SELECT name FROM highschooler WHERE grade  =  "High School" AND id IN (SELECT friend_id FROM friend GROUP BY friend_id HAVING count(*)  >=  3)
 SELECT T3.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id JOIN friend AS T3 ON T2.student_id  =  T3.friend_id WHERE T1.grade  =  'High' AND T1.name  =  'Kyle'
 SELECT T3.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id JOIN friend AS T3 ON T2.student_id  =  T3.friend_id WHERE T1.name  =  'Kyle'
 SELECT count(*) FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id WHERE T1.grade  =  'highschool' AND T1.name  =  'Kyle'
 SELECT count(*) FROM friend WHERE friend_id IN (SELECT id FROM highschooler WHERE name =  "Kyle")
 SELECT id FROM highschooler EXCEPT SELECT friend_id FROM friend
 SELECT id FROM Highschooler EXCEPT SELECT friend_id FROM friend
 SELECT name FROM highschooler WHERE grade  =  "High School" AND id NOT IN (SELECT friend_id FROM friend)
 SELECT name FROM highschooler WHERE id NOT IN (SELECT friend_id FROM friend)
 SELECT T1.id FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id INTERSECT SELECT T1.id FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id
 SELECT friend_id FROM friend INTERSECT SELECT liked_id FROM likes
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id JOIN likes AS T3 ON T1.id  =  T3.student_id
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id JOIN likes AS T3 ON T1.id  =  T3.student_id WHERE T2.student_id  =  T3.liked_id
 SELECT count(*),  student_id FROM likes GROUP BY student_id
 SELECT count(*),  student_id FROM likes GROUP BY student_id
 SELECT T1.name,  count(*) FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T1.id
 SELECT T1.name, count(*) FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T1.id
 SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1
 SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
 SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name HAVING count(*)  >=  2
 SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name HAVING count(*)  >=  2
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.id HAVING avg(grade)  >  5 INTERSECT SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.id HAVING count(*)  >=  2
 SELECT name FROM Highschooler WHERE grade  >  5 GROUP BY name HAVING count(*)  >=  2
 SELECT count(*) FROM likes WHERE student_id IN (SELECT liked_id FROM likes WHERE liked_id IN (SELECT student_id FROM likes WHERE liked_id  =  1 GROUP BY liked_id ORDER BY count(*) DESC LIMIT 1))
 SELECT count(*) FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id WHERE T1.name  =  'Kyle'
 SELECT avg(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend)
 SELECT avg(grade) FROM highschooler WHERE id IN (SELECT friend_id FROM friend)
 SELECT min(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)
 SELECT min(grade) FROM highschooler WHERE id NOT IN (SELECT friend_id FROM friend)
 Yes, that's an SQL query SELECT state FROM owners INTERSECT SELECT state FROM professionals
 SELECT state FROM owners INTERSECT SELECT state FROM professionals
 SELECT avg(T1.Age) FROM dogs AS T1 JOIN treatments AS T2 ON T1.Dog_ID  =  T2.Dog_ID
 SELECT avg(T1.Age) FROM dogs AS T1 JOIN treatments AS T2 ON T1.Dog_ID  =  T2.Dog_ID
 SELECT T1.professional_id,  T1.cell_number,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2 UNION SELECT professional_id,  cell_number,  last_name FROM Professionals WHERE state  =  'Indiana'
 SELECT professional_id,  first_name,  cell_number FROM Professionals WHERE state  =  'Indiana' OR count(*)  >  2
 SELECT T2.Name FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.Dog_ID  =  T2.Dog_ID WHERE T1.cost_of_treatment  >  1000
 SELECT T1.name FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.cost_of_treatment  >  1000
 SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT T1.first_name FROM Professionals AS T1 JOIN Dogs AS T2 ON T1.professional_id  =  T2.professional_id
 SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT first_name FROM Dogs
 SELECT Professional_ID,  ROLE_code,  email_address FROM Professionals EXCEPT SELECT Professional_ID FROM treatments
 SELECT professional_id,  role_code,  email_address FROM Professionals EXCEPT SELECT T1.professional_id,  T1.role_code,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.dog_id IN (SELECT T3.dog_id FROM Treatments AS T3 JOIN Dogs AS T4 ON T3.dog_id  =  T3.dog_id WHERE T4
 SELECT T1.owner_id,  T2.first_name,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;
 SELECT T1.owner_id,  T2.first_name,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;
 SELECT T1.professional_id,  T1.role_code,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*)  >=  2
 SELECT T1.professional_id,  T1.role_code,  T1.first_name FROM Professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
 SELECT T1.breed_name FROM breeds AS T1 JOIN dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T2.breed_code ORDER BY count(*) DESC LIMIT 1;
 SELECT T2.breed_name FROM dogs AS T1 JOIN breeds AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_code ORDER BY count(*) DESC LIMIT 1;
 SELECT T1.owner_id,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T1.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
 SELECT T2.owner_id,  T2.first_name,  T2.last_name FROM treatments AS T1 JOIN owners AS T2 ON T1.professional_id  =  T2.owner_id GROUP BY T1.professional_id ORDER BY sum(T1.cost_of_treatment) DESC LIMIT 1
 SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Charges AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code ORDER BY T2.charge_amount ASC LIMIT 1
 SELECT T1.treatment_type_description FROM treatment_types AS T1 JOIN charges AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code ORDER BY T2.charge_amount ASC LIMIT 1
 SELECT T1.owner_id,  T1.zip_code FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY sum(T2.charges) DESC LIMIT 1;
 SELECT T1.owner_id,  T1.zip_code FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY sum(T3.charge_amount) DESC LIMIT 1
 SELECT T1.professional_id,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*)  >=  2
 SELECT T1.professional_id,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*)  >=  2
 SELECT T2.first_name,  T2.last_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id WHERE T1.cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments)
 SELECT T1.first_name,  T1.last_name FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM treatments )
 SELECT T2.date_of_treatment,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
 SELECT T2.Date_of_Treatment,  T1.First_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.Professional_ID  =  T2.professional_ID
 SELECT T1.treatment_type_description,  T1.cost_of_treatment FROM treatment_types AS T1 JOIN treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
 SELECT T1.treatment_type_description,  T1.cost_of_treatment FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
 SELECT T1.first_name,  T1.last_name,  T1.owner_id,  T3.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Sizes AS T3 ON T2.size_code  =  T3.size_code
 SELECT T2.first_name,  T2.last_name,  T4.size_description FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id JOIN Sizes AS T3 ON T1.size_code  =  T3.size_code JOIN Owner_As_Dogs AS T4 ON T2.owner_id  =  T4.owner_id
 SELECT T2.first_name,  T1.Name FROM dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id
 SELECT T2.first_name,  T1.Name FROM dogs AS T1 JOIN owners AS T2 ON T1.owner_id = T2.owner_id;
 SELECT T2.Name,  T1.Date_of_Treatment FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.Dog_ID  =  T2.Dog_ID JOIN Breeds AS T3 ON T2.Breed_Code  =  T3.Breed_Code WHERE T3.Breed_Name  =  (SELECT Breed_Name FROM Breeds GROUP BY Breed_Name ORDER BY Count(*) ASC LIMIT 1)
 SELECT T1.Name,  T2.Date_of_Treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.Dog_ID  =  T2.Dog_ID WHERE T1.Breed_Code NOT IN (SELECT Breed_Code FROM Breeds GROUP BY Breed_Code ORDER BY COUNT(*) DESC LIMIT 1)
 SELECT T1.first_name,  T1.last_name,  T4.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Dogs AS T3 ON T2.dog_id  =  T3.dog_id JOIN Owners AS T4 ON T1.owner_id  =  T4.owner_id WHERE T4.state  =  'Virginia'
 SELECT T1.first_name,  T2.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
 SELECT T2.date_arrived,  T2.date_departed FROM treatments AS T1 JOIN dogs AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.treatment_type_code  =  'Surgery'
 SELECT T1.date_arrived,  T1.date_departed FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id  =  T2.dog_id
 SELECT T2.last_name FROM dogs AS T1 JOIN owners AS T2 ON T1.owner_id  =  T2.owner_id ORDER BY T1.age LIMIT 1;
 Please provide the SQL query based on the information of this database schema SELECT T2.last_name FROM dogs AS T1 JOIN owners AS T2 ON T1.owner_id = T2.owner_id WHERE T1.age = (SELECT min(age) FROM dogs)
 SELECT email_address FROM professionals WHERE state  =  "Hawaii" OR state  =  "Wisconsin"
 Write an SQL query to retrieve the information SELECT email_address FROM Professionals WHERE state  =  "Hawaii" OR state  =  "Wisconsin"
 We cannot select your query as it is giving an error SELECT Date_arrived,  Date_departed FROM dogs
 SELECT date_arrived,  date_departed FROM dogs;
 SELECT count(DISTINCT dog_id) FROM treatments
 SELECT count(DISTINCT dog_id) FROM treatments;
 What are you looking for?SELECT count(DISTINCT T1.professional_id) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.dog_id IN (SELECT dog_id FROM Dogs WHERE breed_code  =  "German Shepherd")
 SELECT count(DISTINCT Professional_ID) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.Professional_ID  =  T2.Professional_ID WHERE T1.Treatment_Type_Code  =  "Dogs"
 SELECT Role_Code,  Street,  city,  State FROM Professionals WHERE city LIKE '%West%'
 SELECT role_code,  street,  city,  state FROM Professionals WHERE city LIKE '%West%'
 SELECT first_name,  last_name,  email_address FROM  owners WHERE state LIKE '%North%'
 SELECT first_name,  last_name,  email_address FROM owners WHERE state LIKE '%North%'
SELECT count(*) FROM Dogs WHERE age  <  (SELECT avg(age) FROM Dogs)
 SELECT count(*) FROM Dogs WHERE age  <  (SELECT avg(age) FROM Dogs)
 Please provide the SQL query based on the information given in the question. SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1
 SELECT Cost_of_Treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1
 SELECT count(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments);
 SELECT count(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments);
SELECT count(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs)
 SELECT count(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs)
 SELECT count(*) FROM Professionals WHERE Professional_ID NOT IN (SELECT Professional_ID FROM Treatments)
 SELECT count(*) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments)
 SELECT name,  age,  weight FROM dogs WHERE abandoned_yes_or_no = 1;
 SELECT name,  age,  weight FROM dogs WHERE abandoned_yes_or_no =  'yes'
 SELECT avg(age) FROM dogs
 SELECT avg(age) FROM dogs
 SELECT Age FROM Dogs ORDER BY Age DESC LIMIT 1
 SELECT Age FROM DOGS ORDER BY Age DESC LIMIT 1
 SELECT Charge_Type,  Charge_Amount FROM Charges;
 SELECT Charge_Type,  Charge_Amount FROM Charges;
 SELECT Charge_Amount FROM Charges ORDER BY Charge_Amount DESC LIMIT 1
 Writing query for Dog_Kennels database
 SELECT email_address,  cell_number,  home_phone FROM Professionals;
 SELECT email_address,  cell_number,  home_phone FROM Professionals;
 SELECT count(DISTINCT breed_code),  count(DISTINCT size_code) FROM dogs
 SELECT DISTINCT T1.breed_code,  T1.size_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code
 SELECT T1.first_name,  T1.last_name,  T1.role_code,  T3.treatment_type_description FROM Professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_Types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
 SELECT T1.first_name,  T1.treatment_type_description FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
 SELECT count(*) FROM singer
 SELECT count(*) FROM singer
 SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
 SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
 SELECT Birth_Year,  Citizenship FROM singer
 SELECT Birth_Year,  Citizenship FROM singer
 SELECT Name FROM singer WHERE Citizenship!= "France"
 SELECT name FROM singer WHERE citizenship!= 'French'
 SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
 SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
 SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
 SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
 SELECT Citizenship,  COUNT(*) FROM singer GROUP BY Citizenship
 SELECT citizenship,  count(*) FROM singer GROUP BY citizenship
 SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
 SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
 SELECT Citizenship, max.Net_Worth_Millions FROM singer GROUP BY Citizenship
 SELECT citizenship,  max(net_worth_millions) FROM singer
 SELECT T2.Title,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
 SELECT T2.Title,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
 SELECT DISTINCT T1.name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id WHERE T2.sales  >  300000
 SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
 SELECT T2.name FROM song AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.singer_id HAVING COUNT(*)  >  1
 SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
 SELECT T2.name,  sum(T1.sales) FROM song AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.singer_id
 SELECT T1.Name,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
 SELECT Name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)
 SELECT DISTINCT T1.name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id WHERE T1.singer_id NOT IN (SELECT singer_id FROM song)
 SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth__year  >  1955
 SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_ YEAR  >  1955
 SELECT count(*) FROM Other_Available_Features
 SELECT T1.feature_type_name FROM Other_Available_features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T2.feature_type_name  =  "AirCon"
 SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code IN (SELECT property_type_code FROM Properties)
 SELECT property_name FROM properties WHERE property_type_code  =  "house" OR property_type_code  =  "apartment" GROUP BY property_name HAVING count(room_count)  >  1
