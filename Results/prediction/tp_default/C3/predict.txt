 SELECT count(*) FROM singer;
 SELECT count(*) FROM singer;
 SELECT name,  country,  age FROM singer ORDER BY age DESC;
 SELECT name,  country,  age FROM singer ORDER BY age DESC;
 SELECT avg(age),  min(age),  max(age) FROM singer WHERE country  =  'France';
 SELECT avg(age),  min(age),  max(age) FROM singer WHERE country = "French";;
 SELECT name,  song_release_year FROM singer ORDER BY age ASC LIMIT 1;;
 SELECT name,  song_release_year FROM singer ORDER BY age ASC LIMIT 1;
 SELECT DISTINCT country FROM singer WHERE age  >  20;
 SELECT DISTINCT country FROM singer WHERE age  >  20;;
 SELECT country,  count(*) FROM singer GROUP BY country;;
 SELECT count(*),  country FROM singer GROUP BY country;
 SELECT song_name FROM singer WHERE age > (SELECT avg(age) FROM singer);
 SELECT song_name FROM singer WHERE age > (SELECT avg(age) FROM singer);
 SELECT LOCATION,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;;
 SELECT DISTINCT T1.location,  T1.name FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.capacity BETWEEN 5000 AND 10000;;
 SELECT max(capacity), avg(average) FROM stadium;
 SELECT avg(capacity),  max(capacity) FROM stadium;
 SELECT name,  capacity FROM stadium ORDER BY avg(average) DESC LIMIT 1;;
 SELECT name,  capacity FROM stadium ORDER BY avg(T1.Highest) DESC LIMIT 1;
 SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015;
 SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015;;
 SELECT T2.name,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id;
 SELECT count(*),  T1.name FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.name;
 SELECT T3.name,  T3.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T1.year  >=  2014 GROUP BY T1.concert_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT T2.name,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >  2013 GROUP BY T1.stadium_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1;;
 SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);
 SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);
 SELECT Country FROM singer WHERE Age  >  40 INTERSECT SELECT Country FROM singer WHERE Age  <  30;;
 SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE YEAR = 2014);
 SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE YEAR  =  2014);
 SELECT T1.concert_name,  T1.theme,  count(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T1.concert_name,  T1.theme;
 SELECT T1.concert_name,  T2.theme,  count(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T1.concert_name;
 SELECT T2.name,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id;;
 SELECT T2.name,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.singer_id;
 SELECT T2.name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id  =  T2.concert_id JOIN singer AS T3 ON T2.singer_id  =  T3.singer_id WHERE T1.year  =  2014;
 SELECT T2.name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id = T2.concert_id JOIN singer AS T3 ON T2.singer_id = T3.singer_id WHERE T1.year = 2014;
 SELECT T1.name,  T1.country FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id WHERE T1.song_name LIKE '%Hey%';
 SELECT T1.name,  T1.country FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T2.concert_id  =  T3.concert_id WHERE T1.song_name LIKE '%Hey%';
 SELECT T2.name,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014 INTERSECT SELECT T2.name,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2015;
 SELECT T3.name,  T3.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T1.year  =  2014 INTERSECT SELECT T3.name,  T3.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id JOIN concert;
 SELECT count(*) FROM concert AS t1 JOIN stadium AS t2 ON t1.stadium_id  =  t2.stadium_id ORDER BY t2.capacity DESC LIMIT 1;;
 SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.capacity  =  (SELECT max(capacity) FROM stadium);
 SELECT count(*) FROM pets WHERE weight  >  10;;
 SELECT count(*) FROM pets WHERE weight  >  10;;
 SELECT weight FROM pets WHERE pettype  =  'dog' AND petage  =  (SELECT min(petage) FROM pets WHERE pettype  =  'dog');
 SELECT avg(weight) FROM pets WHERE pettype = "dog" AND petage  =  (SELECT min(petage) FROM pets WHERE pettype = "dog");
 SELECT max(weight),  pettype FROM pets GROUP BY pettype;;
 SELECT max(weight),  pettype FROM pets GROUP BY pettype;
 SELECT count(*) FROM has_pet AS T1 JOIN student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  >  20;;
 SELECT count(*) FROM has_pet AS T1 JOIN student AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T1.petid WHERE T2.age  >  20;
 SELECT count(*) FROM pets AS T1 JOIN has_pet AS T2 ON T1.petid  =  T2.petid JOIN student AS T3 ON T3.stuid  =  T2.stuid WHERE T3.sex  =  'F' AND T3.major  =  'CS';
 SELECT count(*) FROM pets AS T1 JOIN has_pet AS T2 ON T1.petid  =  T2.petid JOIN student AS T3 ON T3.stuid  =  T2.stuid WHERE T3.sex  =  'F' AND T3.major  =  'CS';
 SELECT count(DISTINCT pettype) FROM pets;
 SELECT count(DISTINCT pettype) FROM pets;
 SELECT T1.Fname FROM student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'cat' OR T3.PetType  =  'dog';
 SELECT DISTINCT T1.Fname FROM student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'cat' OR T3.PetType  =  'dog';
 SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID  =  T2.StuID JOIN pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID  =  T2.StuID JOIN pets AS T3 ON;
 SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T3.PetID  =  T2.PetID WHERE T3.PetType  =  "cat" INTERSECT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T;
 SELECT major,  age FROM student WHERE StuID NOT IN (SELECT StuID FROM has_pet);
 SELECT Major,  age FROM student WHERE StuID NOT IN (SELECT StuID FROM has_pet);
 SELECT StuID FROM student WHERE StuID NOT IN (SELECT StuID FROM has_pet);
 SELECT StuID FROM student WHERE StuID NOT IN (SELECT StuID FROM has_pet);
 SELECT T1.fname,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pettype  =  'dog' EXCEPT SELECT T1.fname,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3;
 SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T3.PetID  =  T2.PetID WHERE T3.PetType  =  'dog' EXCEPT SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS;
 SELECT pettype,  weight FROM pets ORDER BY petage LIMIT 1;
 SELECT pettype,  weight FROM pets ORDER BY petage LIMIT 1;
 SELECT petid,  weight FROM pets WHERE petage  >  1;;
 SELECT petid,  weight FROM pets WHERE petage  >  1;;
 SELECT pettype, avg(petage), max(petage) FROM pets GROUP BY pettype;;
 SELECT pettype, avg(petage), max(petage) FROM pets GROUP BY pettype;;
 SELECT pettype, avg(weight) FROM pets GROUP BY pettype;;
 SELECT pettype,  avg(weight) FROM pets GROUP BY pettype;;
 SELECT T1.Fname,  T1.age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID WHERE T2.petid IN (SELECT petid FROM pets WHERE pettype  =  'dog');;
 SELECT DISTINCT T1.Fname,  T1.age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID WHERE T2.petid IN (SELECT petid FROM pets WHERE pettype =  'dog');
 SELECT T1.petid FROM has_pet AS T1 JOIN student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.lname  =  'Smith';
 SELECT T3.petid FROM has_pet AS T1 JOIN student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.lname  =  'Smith';
 SELECT count(*),  StuID FROM Has_pet GROUP BY StuID;;
 SELECT count(*),  StuID FROM Has_Pet GROUP BY StuID;;
 SELECT T1.fname,  T1.sex FROM student AS T1 JOIN Has_Pet AS T2 ON T2.StuID  =  T1.StuID GROUP BY T1.StuID HAVING count(*)  >  1;;
 SELECT DISTINCT T1.Fname,  T1.Lname,  T1.sex FROM student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID HAVING count(*)  >  1;;
 SELECT T1.Lname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T3.PetID  =  T2.PetID WHERE T3.PetAge = 3 AND T3.PetType = "cat";
 SELECT T2.Lname FROM has_pet AS T1 JOIN student AS T2 ON T1.StuID  =  T2.StuID JOIN pets AS T3 ON T1.PetID  =  T3.PetID WHERE T3.PetAge  =  3 AND T3.PetType  =  "cat";
 SELECT avg(age) FROM student WHERE StuID NOT IN (SELECT StuID FROM has_pet);
 SELECT avg(age) FROM student WHERE StuID NOT IN (SELECT StuID FROM has_pet);
 SELECT count(DISTINCT continent) FROM continents;;
 SELECT count(*) FROM continents;;
 SELECT T1.contid,  T1.continent,  count(*) FROM countries AS T1 JOIN continents AS T2 ON T1.continent  =  T2.contid GROUP BY T1.continent;;
 SELECT T2.continent,  count(*),  T1.contid FROM continents AS T1 JOIN countries AS T2 ON T1.contid  =  T2.contid GROUP BY T1.contid;;
 SELECT count(*) FROM countries;;
 SELECT count(*) FROM countries;;
 SELECT T1.maker,  T1.id,  count(*) FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.maker GROUP BY T1.maker;
 SELECT T1.full_name,  T1.id,  count(*) FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.maker GROUP BY T1.id;;
 SELECT Model FROM cars_data ORDER BY horsepower LIMIT 1;
 SELECT model FROM cars_data ORDER BY horsepower LIMIT 1;
 SELECT model FROM cars_data WHERE weight  <  (SELECT avg(weight) FROM cars_data);
 SELECT model FROM cars_data WHERE weight  <  (SELECT avg(weight) FROM cars_data);
 SELECT T2.maker FROM cars_data AS T1 JOIN car_names AS T2 ON T1.makeid  =  T2.makeid WHERE T1.year = 1970;;
 SELECT DISTINCT T1.Maker FROM Car_Makers AS T1 JOIN cars_data AS T2 ON T1.ID  =  T2.makeid WHERE T2.year = 1970;;
 SELECT DISTINCT T1.make,  T1.year FROM cars_data AS T1 JOIN car_names AS T2 ON T1.makeid  =  T2.makeid ORDER BY T1.year ASC LIMIT 1;;
 SELECT T1.maker,  T1.year FROM cars_data AS T1 JOIN car_names AS T1 JOIN model_list AS T3 ON T1.makeid  =  T3.makeid AND T3.model  =  T1.model ON T1.id  =  T3.modelid JOIN car_makers AS T2 ON T2.id  =  T1.makeid ORDER BY T1.year ASC LIMIT 1;
 SELECT DISTINCT model FROM car_names WHERE YEAR  >  1980;
 SELECT DISTINCT MODEL FROM car_names AS T1 JOIN model_list AS T2 ON T1.make  =  T2.maker JOIN cars_data AS T3 ON T3.id  =  T1.makeid WHERE T3.year  >  1980;
 SELECT T2.continent,  count(*) FROM countries AS T1 JOIN car_makers AS T2 ON T1.continent  =  T2.country GROUP BY T1.continent;;
 SELECT T2.continent, count(*) FROM countries AS T1 JOIN car_makers AS T2 ON T1.continent = T2.country GROUP BY T1.continent;
 SELECT T1.Country FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryID  =  T2.Country GROUP BY T1.Country ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.CountryName FROM Countries AS T1 JOIN Car_Makers AS T2 ON T1.CountryID  =  T2.Country WHERE T2.Maker  =  'Most' GROUP BY T1.CountryName ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT count(*),  T1.maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker GROUP BY T1.maker;;
 SELECT count(*),  T1.maker,  T1.full_name FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.maker GROUP BY T1.maker;
 SELECT accelerate FROM cars_data WHERE Make  =  "AMC" AND Model LIKE "%hornet sportabout%" AND edispl LIKE "%sw%";
 SELECT accelerate FROM cars_data WHERE model = "amc hornet sportabout (sw)";
 SELECT COUNT(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.countryid WHERE T2.continent  =  'Europe' AND T2.countryname  =  'France';
 SELECT count(*) FROM car_makers WHERE country  =  "France";
 SELECT count(*) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.makeid  =  T2.makeid WHERE T1.mpg  >=  15 AND T1.mpg  <=  30 AND T2.model LIKE "%sedan%";
 SELECT count(*) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.makeid  =  T2.makeid JOIN model_list AS T3 ON T2.model  =  T3.model WHERE T1.mpg >= 20 AND T1.mpg <= 27 AND T1.accelerate BETWEEN 8 AND 10;
 SELECT avg(mpg) FROM cars_data WHERE cylinders = 4;;
 SELECT avg(mpg) FROM cars_data WHERE cylinders  =  4;
 SELECT min(weight) FROM cars_data WHERE cylinders  =  8 AND YEAR = 1974;;
 SELECT min(weight) FROM cars_data WHERE cylinders  =  8 AND YEAR = 1974;;
 SELECT DISTINCT T1.maker,  T1.model FROM Model_List AS T1 JOIN Car_Makers AS T2 ON T1.maker  =  T2.id;
 SELECT T1.maker,  T2.model FROM car_makers AS T1 JOIN Model_List AS T2 ON T1.ID  =  T2.maker;;
 SELECT T1.CountryName,  T1.CountryID FROM Countries AS T1 JOIN Car_Makers AS T2 ON T1.CountryID  =  T2.Country WHERE T2.Maker!= "null";
 SELECT T1.CountryName,  T1.CountryID FROM Countries AS T1 JOIN Car_Makers AS T2 ON T1.CountryID  =  T2.Country WHERE T2.Maker!= "Null";
 SELECT count(*) FROM cars_data WHERE horsepower  >  150;;
 SELECT count(*) FROM cars_data WHERE horsepower  >  150;;
 SELECT avg(weight),  YEAR FROM cars_data GROUP BY YEAR;;
 SELECT avg(weight),  YEAR FROM cars_data GROUP BY YEAR;
 SELECT DISTINCT T1.countryname FROM Countries AS T1 JOIN Car_Makers AS T2 ON T1.countryid  =  T2.country INTERSECT SELECT DISTINCT T1.countryname FROM Countries AS T1 JOIN Car_Makers AS T2 ON T1.countryid  =  T2.country GROUP BY T1.countryname HAVING count(*)  >=  3;
 SELECT T2.Full_Name FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId  =  T2.Country WHERE T1.Continent  =  'Europe' GROUP BY T1.CountryId HAVING COUNT(*)  >=  3;
 SELECT max(Horsepower),  model FROM cars_data WHERE Cylinders  =  3;;
 SELECT max(hp),  maker FROM cars_data WHERE cylinders  =  3;;
 SELECT max(mpg) FROM Cars_Data;;
 SELECT model FROM car_names JOIN model_list ON car_names.makeid = model_list.makeid JOIN cars_data ON cars_data.id = model_list.modelid GROUP BY model ORDER BY avg(mpg) DESC LIMIT 1;;
 SELECT avg(hp) FROM cars_data WHERE year  <  1980;;
 SELECT avg(hp) FROM cars_data WHERE year  <  1980;
 SELECT avg(edispl) FROM cars_data WHERE model  =  "volvo";;
 SELECT avg(edispl) FROM cars_data WHERE make  =  "VOLVO";;
 SELECT max(accelerate),  cylinders FROM cars_data GROUP BY cylinders;
 SELECT max(accel),  cylinders FROM cars_data GROUP BY cylinders;
 SELECT T2.maker FROM cars_data AS T1 JOIN car_names AS T2 ON T1.makeid  =  T2.makeid GROUP BY T2.maker ORDER BY count(*) DESC LIMIT 1;
 SELECT model FROM car_names GROUP BY model ORDER BY count(*) DESC LIMIT 1;;
 SELECT count(*) FROM cars_data WHERE cylinders  >  4;;
 SELECT count(*) FROM cars_data WHERE cylinders  >  4;;
 SELECT count(*) FROM cars_data WHERE YEAR = 1980;;
 SELECT count(*) FROM cars_data WHERE YEAR  =  1980;;
 SELECT count(*) FROM Model_list AS T1 JOIN Car_Makers AS T2 ON T1.maker  =  T2.id WHERE T2.full_name  =  'American Motor Company';
 SELECT count(*) FROM Model_List AS T1 JOIN Car_Makers AS T2 ON T1.Maker  =  T2.ID WHERE T2.full_name  =  'American Motor Company';;
 SELECT T1.full_name,  T1.id FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.maker GROUP BY T1.id HAVING count(*)  >  3;;
 SELECT T1.maker,  T1.id FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.maker GROUP BY T1.id HAVING count(*)  >  3;;
 SELECT DISTINCT T1.maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker WHERE T1.full_name  =  "General Motors" OR T1.maker  >  3500;
 SELECT DISTINCT T1.Model FROM Model_List AS T1 JOIN Car_Makers AS T2 ON T1.Maker  =  T2.ID WHERE T2.full_name  =  'General Motors' UNION SELECT DISTINCT T3.Model FROM Model_List AS T3 JOIN Cars_Data AS T4 ON T3.ModelId  =  T4.ID WHERE T4.weight  >  3500;;
 SELECT YEAR FROM cars_data WHERE weight BETWEEN 3000 AND 4000;
 SELECT DISTINCT YEAR FROM cars_data WHERE weight  <  4000 INTERSECT SELECT DISTINCT YEAR FROM cars_data WHERE weight  >  3000;
 SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1;
 SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1;
 SELECT min(cylinders) FROM cars_data WHERE accelerate  =  (SELECT min(accelerate) FROM cars_data);
 SELECT min(cylinders) FROM cars_data WHERE accelerate  =  (SELECT min(accelerate) FROM cars_data WHERE model  =  'Volvo');;
 SELECT count(*) FROM cars_data WHERE accelerate  >  (SELECT max(horsepower) FROM cars_data);
 SELECT count(*) FROM cars_data WHERE accelerate  >  (SELECT max(horsepower) FROM cars_data);
 SELECT count(*) FROM car_makers WHERE country IN (SELECT T1.country FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid  =  T2.countryid GROUP BY T1.countryid HAVING count(*)  >  2);
 SELECT count(*) FROM car_makers WHERE country IN (SELECT country FROM car_makers GROUP BY country HAVING count(*)  >  2);;
 SELECT count(*) FROM cars_data WHERE cylinders  >  6;;
 SELECT count(*) FROM cars_data WHERE cylinders  >  6;;
 SELECT model FROM cars_data WHERE cylinders  =  4 ORDER BY horsepower DESC LIMIT 1;;
 SELECT model FROM cars_data WHERE cylinders  =  4 GROUP BY model ORDER BY max(horsepower) DESC LIMIT 1;
 SELECT DISTINCT T1.makeid,  T1.make FROM Car_names AS T1 JOIN Cars_data AS T2 ON T1.makeid  =  T2.makeid WHERE T2.horsepower  >  (SELECT min(horsepower) FROM Cars_data) EXCEPT SELECT DISTINCT T1.makeid,  T1.make FROM Car_names AS T1 JOIN Cars_data AS T2 ON T1.makeid  =  T2.makeid WHERE T2.cylinders  >;
 SELECT T2.make,  T2.full_name FROM cars_data AS T1 JOIN car_names AS T2 ON T1.makeid  =  T2.makeid WHERE T1.hp  >=  (SELECT min(hp) FROM cars_data) AND T1.cyls  <  4;;
 SELECT max(mpg) FROM cars_data WHERE cylinders  =  8 OR YEAR  <  1980;;
 SELECT max(mpg) FROM cars_data WHERE cylinders  =  8 OR YEAR  <  1980;
 SELECT model FROM car_names AS T1 JOIN model_list AS T2 ON T1.makeid  =  T2.makeid WHERE T2.Model  <  3500 EXCEPT SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.makeid  =  T2.makeid JOIN model_list AS T3 ON T2.Model  =  T3.ModelID WHERE T3.maker  =  "Ford Motor Company";
 SELECT DISTINCT model FROM cars_data WHERE weight  <  3500 AND model NOT IN (SELECT DISTINCT model FROM Model_List AS T1 JOIN Car_Makers AS T2 ON T1.Maker  =  T2.ID WHERE T2.full_name  =  "Ford Motor Company");
 SELECT T2.countryname FROM Car_Makers AS T1 JOIN Countries AS T2 ON T1.Country  =  T2.CountryID WHERE T1.maker  =  "null";
 SELECT T1.CountryName FROM Countries AS T1 JOIN Car_Makers AS T2 ON T1.CountryID  =  T2.Country WHERE T2.Maker  =  'NULL';
 SELECT T1.id,  T1.maker FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.maker GROUP BY T1.maker HAVING count(*)  >=  2 INTERSECT SELECT count(*) FROM Car_Makers;
 SELECT T1.id,  T1.maker FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.maker GROUP BY T1.maker HAVING count(*)  >=  2 INTERSECT SELECT T1.id,  T1.maker FROM Car_Makers AS T1 JOIN Cars_Data AS T2 ON T1.id  =  T2.id GROUP BY T1.maker HAVING count(*)  >=  3;
 SELECT T1.id,  T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryID  =  T2.Country JOIN model_list AS T3 ON T2.ID  =  T3.Maker WHERE T3.Model  =  'FIAT' OR T2.full_name LIKE '%more than 3%';
 SELECT T1.countryid,  T1.countryname FROM Countries AS T1 JOIN Car_Makers AS T2 ON T1.countryid = T2.country JOIN model_list AS T3 ON T2.id = T3.maker GROUP BY T1.countryid HAVING count(*)  >  3 UNION SELECT T1.countryid,  T1.countryname FROM Countries AS T1 JOIN Car_Names AS T2 ON T1.countryid = T2.makeid JOIN model_list AS;
 SELECT country FROM airlines WHERE airlineName = "JetBlue Airways";;
 SELECT country FROM airlines WHERE airlineName = "Jetblue Airways";;
 SELECT abbreviation FROM airlines WHERE airlineName = "JetBlue Airways";;
 SELECT abbreviation FROM airlines WHERE airlineName = "Jetblue Airways";;
 SELECT airlineName,  abbreviation FROM airlines WHERE country  =  'USA';
 SELECT airlineName,  abbreviation FROM airlines WHERE country  =  'USA';
 SELECT destinationairport,  airportname FROM airports WHERE city = "Anthony";
 SELECT destinationairport,  airportname FROM airports WHERE city = "Anthony";;
 SELECT count(*) FROM airlines;
 SELECT count(*) FROM airlines;
 SELECT count(*) FROM airports;;
 SELECT count(*) FROM airports;;
 SELECT count(*) FROM Flights;
 SELECT count(*) FROM Flights;;
 SELECT airlineName FROM airlines WHERE abbreviation = "UAL";;
 SELECT airline FROM airlines WHERE abbreviation  =  'UAL';;
 SELECT count(*) FROM airlines WHERE country  =  'USA';
 SELECT count(*) FROM airlines WHERE country = "USA";;
 SELECT DISTINCT T1.city,  T1.countrycode FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport WHERE T1.city = "Alton";;
 SELECT DISTINCT T1.city,  T1.country FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode = T2.destairport WHERE T1.countryabbrev = 'USA';
 SELECT DISTINCT destinationairport FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode = T2.destairport WHERE T1.city = "AKO";;
 SELECT airportname FROM airports WHERE airportcode = 'AKO';;
 SELECT DISTINCT airportname FROM airports WHERE city  =  'Aberdeen';
 SELECT DISTINCT airportname FROM airports WHERE city = 'Aberdeen';;
 SELECT count(*) FROM flights WHERE sourceairport  =  'APG';
 SELECT count(*) FROM flights WHERE sourceairport = 'APG';;
 SELECT count(*) FROM flights WHERE destairport  =  'ATO';
 SELECT count(*) FROM flights WHERE destinationairport  =  "ATO";;
 SELECT count(*) FROM flights WHERE sourceairport = 'Aberdeen';;
 SELECT count(*) FROM flights WHERE sourceairport  =  "Aberdeen";;
 SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport = T2.airportcode WHERE T2.city = "Aberdeen";;
 SELECT count(*) FROM flights WHERE destairport  =  'Aberdeen';;
 SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.sourceairport = T2.airportcode WHERE T2.city = 'Aberdeen' AND T1.destairport = 'Ashley';;
 SELECT count(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley';;
 SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.airline  =  T2.uid WHERE T2.abbreviation  =  'JetBlue Airways';
 SELECT count(*) FROM flights WHERE airline  =  'Jetblue Airways';;
 SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.airportname  =  'ASY' AND T1.airline  =  'United Airlines';
 SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.name  =  "ASY" AND T1.airline  =  "United";
 SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.city  =  'AHD' AND T1.airline  =  'United Airlines';
 SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.airportname  =  'AHD' AND T1.airline  =  'United';
 SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.city  =  'Aberdeen' AND T1.airline  =  'United';;
 SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.airline = T2.uid WHERE T1.destairport = "Aberdeen" AND T2.name = "United";
 SELECT T1.city FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode = T2.sourceairport GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.city FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode = T2.destairport GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.city FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode = T2.destairport GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;
 SELECT T1.city FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode = T2.sourceairport GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.airportcode FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode = T2.sourceairport GROUP BY T1.airportcode ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.airportcode FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode = T2.sourceairport GROUP BY T1.airportcode ORDER BY count(*) DESC LIMIT 1;;
 SELECT destinationairport FROM flights GROUP BY destinationairport ORDER BY count(*) LIMIT 1;
 SELECT destinationairport FROM flights GROUP BY destinationairport ORDER BY count(*) ASC LIMIT 1;;
 SELECT T1.abb FROM airlines AS T1 JOIN flights AS T2 ON T1.abb  =  T2.airline GROUP BY T1.abb ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.abb FROM airlines AS T1 JOIN flights AS T2 ON T1.abb = T2.airline GROUP BY T2.airline ORDER BY count(*) DESC LIMIT 1;;
 SELECT abbreviation,  country FROM airlines ORDER BY count(*) ASC LIMIT 1;;
 SELECT T1.abbreviation,  T1.country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline GROUP BY T1.uid ORDER BY count(*) DESC LIMIT 1;;
 SELECT DISTINCT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.abbreviation = T2.airline WHERE T2.sourceairport = "AHD";
 SELECT DISTINCT T1.abb FROM airlines AS T1 JOIN flights AS T2 ON T1.abb  =  T2.airline WHERE T2.sourceairport  =  "AHD";
 SELECT DISTINCT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.abbreviation = T2.airline WHERE T2.destairport = 'AHD';
 SELECT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.destairport  =  "AHD";
 SELECT DISTINCT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.sourceairport  =  'APG' AND T2.destairport  =  'CVO';
 SELECT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.abbreviation = T2.airline WHERE T2.sourceairport = "APG" INTERSECT SELECT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.abbreviation = T2.airline WHERE T2.destairport = "CVO";
 SELECT DISTINCT T1.abbr FROM airlines AS T1 JOIN flights AS T2 ON T1.abbreviation = T2.airline WHERE T2.destairport = 'CVO' EXCEPT SELECT DISTINCT T1.abr FROM airlines AS T1 JOIN flights AS T2 ON T1.abbreviation = T2.airline WHERE T2.destairport = 'APG';
 SELECT DISTINCT T1.abbr FROM airlines AS T1 JOIN flights AS T2 ON T1.abb  =  T2.airline WHERE T2.destairport  =  'CVO' EXCEPT SELECT DISTINCT T1.abb FROM airlines AS T1 JOIN flights AS T2 ON T1.abb  =  T2.airline WHERE T2.destairport  =  'APG';
 SELECT DISTINCT T1.abb FROM airlines AS T1 JOIN flights AS T2 ON T1.abb  =  T2.airline GROUP BY T2.airline HAVING count(*)  >=  10;;
 SELECT DISTINCT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.abbreviation  =  T2.airline GROUP BY T2.airline HAVING count(*)  >=  10;;
 SELECT DISTINCT airline FROM airlines EXCEPT SELECT DISTINCT airline FROM flights GROUP BY airline HAVING count(*)  >=  200;
 SELECT T1.abb FROM airlines AS T1 JOIN flights AS T2 ON T1.abb  =  T2.airline GROUP BY T1.abb HAVING count(*)  <  200;
 SELECT T1.fltnum FROM flights AS T1 JOIN airlines AS T2 ON T1.airline  =  T2.uid WHERE T2.abbreviation  =  "United Airlines";
 SELECT DISTINCT T1.flightnumber FROM Flights AS T1 JOIN Airlines AS T2 ON T1.airline  =  T2.uid WHERE T2.name  =  "United Airlines";
 SELECT T1.flightnumber FROM flights AS T1 JOIN airports AS T2 ON T1.destairport = T2.airportcode WHERE T2.airportname = "APG";;
 SELECT flightnumber FROM flights WHERE sourceairport = "APG";;
 SELECT T1.flightnumber FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.airportname  =  "APG";
 SELECT flightnumber FROM flights WHERE destairport  =  'APG';
 SELECT T1.flightnumber FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.city  =  "Aberdeen";
 SELECT flightnumber FROM flights WHERE sourceairport  =  "Aberdeen";
 SELECT T1.flightnumber FROM flights AS T1 JOIN airports AS T2 ON T1.destairport = T2.airportcode WHERE T2.city = "Aberdeen";;
 SELECT flightnumber FROM flights WHERE destairport  =  'Aberdeen';;
 SELECT count(*) FROM flights WHERE destairport = 'Aberdeen' OR destairport = 'Abilene';;
 SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.city  =  'Aberdeen' OR T2.city  =  'Abilene';
 SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT destairport FROM flights UNION SELECT sourceairport FROM flights);
 SELECT DISTINCT airportname FROM airports EXCEPT SELECT T1.city FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport UNION SELECT DISTINCT T1.city FROM airports AS T1 JOIN flights AS T3 ON T1.airportcode  =  T3.destairport;
 SELECT count(*) FROM employee;
 SELECT count(*) FROM employee;
 SELECT name FROM employee ORDER BY age ASC;
 SELECT name FROM employee ORDER BY age ASC;
 SELECT count(*),  city FROM employee GROUP BY city;;
 SELECT count(*),  city FROM employee GROUP BY city;
 SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1;;
 SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1;;
 SELECT count(*),  LOCATION FROM shop GROUP BY LOCATION;
 SELECT count(*),  LOCATION FROM shop GROUP BY LOCATION;;
SELECT manager_name,  district FROM shop ORDER BY Number_products DESC LIMIT 1;
SELECT manager_name,  district FROM shop ORDER BY Number_products DESC LIMIT 1;
 SELECT min(number_products), max(number_products) FROM shop;
 SELECT min(number_products), max(number_products) FROM shop;
 SELECT name,  LOCATION,  district FROM shop ORDER BY number_products DESC;
 SELECT name,  LOCATION,  district FROM shop ORDER BY Number_products DESC;;
 SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop);
 SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop);
 SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id = T2.employee_id GROUP BY T1.employee_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id = T2.employee_id GROUP BY T1.employee_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.name FROM employee AS T1 JOIN hiring AS T2 ON T1.employee_id = T2.employee_id JOIN evaluation AS T3 ON T2.employee_id = T3.employee_id WHERE T3.bonus = (SELECT max(bonus) FROM evaluation);
 SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id = T2.employee_id WHERE T2.bonus = (SELECT max(bonus) FROM evaluation);
 SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation);
 SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation);
 SELECT T1.name FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.shop_id ORDER BY count(*) DESC LIMIT 1;
 SELECT T1.name FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.shop_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring);
 SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring);
 SELECT count(*),  T1.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.shop_id;
 SELECT count(*),  T1.name FROM hiring AS T1 JOIN employee AS T2 ON T1.employee_id  =  T2.employee_id JOIN shop AS T3 ON T1.shop_id  =  T3.shop_id GROUP BY T1.shop_id;
 SELECT sum(bonus) FROM evaluation;
 SELECT sum(bonus) FROM evaluation;
 SELECT * FROM hiring;;
 SELECT * FROM hiring;
 SELECT district FROM shop WHERE number_products  <  3000 INTERSECT SELECT district FROM shop WHERE number_products  >  10000;
 SELECT DISTINCT District FROM shop WHERE Number_Products  <  3000 INTERSECT SELECT DISTINCT District FROM shop WHERE Number_Products  >  10000;
 SELECT count(DISTINCT LOCATION) FROM shop;
 SELECT count(DISTINCT LOCATION) FROM shop;
 SELECT count(*) FROM Documents;
 SELECT count(*) FROM Documents;
 SELECT document_id,  document_name,  document_description FROM Documents;;
 SELECT document_id,  document_name,  document_description FROM Documents;;
 SELECT document_name,  template_id FROM Documents WHERE document_description LIKE '%w%';
 SELECT document_name,  template_id FROM Documents WHERE document_description LIKE "%w%";
 SELECT template_id,  document_name,  document_description FROM Documents WHERE document_name = "Robbin CV";;
 SELECT document_id,  template_id,  document_description FROM Documents WHERE document_name = "Robbin CV";;
 SELECT count(DISTINCT template_id) FROM Documents;
 SELECT count(DISTINCT template_id) FROM Documents;;
 SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT';
 SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  "PPT";;
 SELECT template_id,  count(*) FROM Documents GROUP BY template_id;;
 SELECT template_id,  count(*) FROM Documents GROUP BY template_id;;
 SELECT T1.template_id,  T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id,  T1.template_type_code ORDER BY count(*) DESC LIMIT 1;;
 SELECT t1.template_id,  t1.template_type_code FROM Templates AS t1 JOIN Documents AS t2 ON t1.template_id  =  t2.template_id GROUP BY t1.template_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1;;
 SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1;
 SELECT template_id FROM documents EXCEPT SELECT template_id FROM paragraphs;
 SELECT template_id FROM templates EXCEPT SELECT template_id FROM documents;
 SELECT count(*) FROM Templates;;
 SELECT count(*) FROM Templates;;
 SELECT template_id,  version_number,  template_type_code FROM Templates;;
 SELECT template_id,  version_number,  template_type_code FROM Templates;;
 SELECT DISTINCT template_type_code FROM Templates;
 SELECT DISTINCT template_type_code FROM Templates;
 SELECT template_id FROM templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT";
 SELECT template_id FROM templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT";
 SELECT count(*) FROM Templates WHERE template_type_code  =  "CV";;
 SELECT count(*) FROM Templates WHERE template_type_code  =  "CV";;
 SELECT template_type_code,  version_number FROM Templates WHERE version_number  >  5;;
 SELECT template_type_code,  template_id,  version_number FROM Templates WHERE version_number  >  5;;
 SELECT template_type_code,  count(*) FROM Templates GROUP BY template_type_code;;
 SELECT template_type_code,  count(*) FROM Templates GROUP BY template_type_code;;
 SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;;
 SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;;
 SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3;
 SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3;;
 SELECT min(version_number),  template_type_code FROM Templates;;
 SELECT min(version_number),  template_type_code FROM Templates;;
 SELECT template_type_code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id WHERE T1.document_name  =  "Data base";
 SELECT template_type_code FROM documents WHERE document_name  =  'Data base';;
 SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id JOIN Ref_Template_Types AS T3 ON T1.template_type_code  =  T3.template_type_code WHERE T3.template_type_description  =  'BK';
 SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id JOIN Ref_Template_Types AS T3 ON T1.template_type_code  =  T3.template_type_code WHERE T3.template_type_description  =  'Book' AND T1.template_type_code  =  'BK';
 SELECT template_type_code,  count(*) FROM Documents GROUP BY template_type_code;;
 SELECT templates.template_type_code, count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY templates.template_type_code;;
 SELECT template_type_code FROM Documents GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;;
 SELECT template_type_code FROM Documents GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;;
 SELECT template_type_code FROM Ref_Template_Types EXCEPT SELECT template_type_code FROM Templates;
 SELECT template_type_code FROM Ref_Template_Types EXCEPT SELECT template_type_code FROM Templates;;
 SELECT template_type_code,  template_type_description FROM Ref_Template_Types;;
 SELECT template_type_code,  template_type_description FROM Ref_Template_Types;;
 SELECT template_type_description FROM Ref_Template_Types WHERE template_type_code  =  "AD";
 SELECT template_type_description FROM Ref_Template_Types WHERE template_type_code  =  "AD";;
 SELECT template_type_code FROM Ref_Template_Types WHERE template_type_description  =  "Book";;
 SELECT template_type_code FROM Ref_Template_Types WHERE template_type_description  =  "Book";;
 SELECT DISTINCT t2.template_type_description FROM Documents AS t1 JOIN Templates AS t2 ON t1.template_id  =  t2.template_id;
 SELECT DISTINCT T2.template_type_description FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id JOIN Ref_Template_Types AS T3 ON T2.template_type_code  =  T3.template_type_code WHERE T1.document_name  =  'Creating a new document';
 SELECT template_id FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T2.template_type_description  =  "Presentation";
 SELECT template_id FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T2.template_type_description  =  "Presentation";
 SELECT count(*) FROM paragraphs;;
 SELECT count(*) FROM Paragraphs;
 SELECT count(*) FROM Paragraps AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Summer Show';
 SELECT count(*) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name  =  'Summer Show';
 SELECT t1.other_details FROM Paragraphs AS t1 JOIN Documents AS t2 ON t1.document_id  =  t2.document_id WHERE t1.paragraph_text  =  'Korea';
 SELECT * FROM Paragraghs WHERE Paragraph_Text LIKE '%Korea %';;
 SELECT T1.paragraph_id,  T1.paragraph_text FROM Paragaphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Welcome to NY';
 SELECT T1.paragraph_id,  T1.paragraph_text FROM Paragrpahs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Welcome to NY';
 SELECT paragraph_text FROM Paragraphs WHERE document_id  =  (SELECT document_id FROM Documents WHERE document_name  =  "Customer reviews");
 SELECT t1.paragraph_text FROM Paragrahs AS t1 JOIN Documents AS t2 ON t1.document_id  =  t2.document_id WHERE t2.document_name  =  'Customer reviews';
 SELECT document_id,  count(*) FROM Paragrahs GROUP BY document_id ORDER BY document_id;;
 SELECT document_id,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id;
 SELECT document_id,  document_name,  COUNT(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T2.document_id;;
 SELECT T1.document_id,  T1.document_name,  count(*) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id;
 SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2;;
 SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*)  >=  2;
 SELECT T1.document_id,  T1.document_name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.document_id,  T1.document_name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) LIMIT 1;;
 SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) LIMIT 1;;
 SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2;
 SELECT T1.document_id FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id HAVING count(*) BETWEEN 1 AND 2;
 SELECT document_id FROM Paragraphs WHERE paragraph_text  =  "Brazil" INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  "Ireland";
 SELECT document_id FROM Paragraphs WHERE paragraph_text = "Brazil" INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = "Ireland";
 SELECT count(*) FROM teacher;
 SELECT count(*) FROM teacher;;
 SELECT name FROM teacher ORDER BY age ASC;
 SELECT name FROM teacher ORDER BY age ASC;
 SELECT age,  hometown FROM teacher;;
 SELECT age,  hometown FROM teacher;;
 SELECT name FROM teacher WHERE Hometown!= 'Little Lever Urban District';
 SELECT name FROM teacher WHERE Hometown!= 'Little Lever Urban District';
 SELECT name FROM teacher WHERE age  =  32 UNION SELECT name FROM teacher WHERE age  =  33;
 SELECT name FROM teacher WHERE age  =  32 UNION SELECT name FROM teacher WHERE age  =  33;
 SELECT Hometown FROM teacher ORDER BY Age LIMIT 1;
 SELECT Hometown FROM teacher ORDER BY Age LIMIT 1;
 SELECT Hometown,  count(*) FROM teacher GROUP BY Hometown;;
 SELECT hometown,  count(*) FROM teacher GROUP BY hometown;;
 SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT Hometown FROM teacher GROUP BY Hometown HAVING count(*)  >=  2;
 SELECT DISTINCT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2;
 SELECT T2.name,  T1.course_id FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id;;
 SELECT T1.name,  T2.course_id FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id;
 SELECT T2.name,  T3.Course_ID FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN course AS T3 ON T1.course_id  =  T3.course_id ORDER BY T2.name;
 SELECT T1.name,  T2.Course_ID FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id ORDER BY T1.name;
 SELECT T1.name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id JOIN course AS T3 ON T3.course_id = T2.course_id WHERE T3.course = "math";;
 SELECT T1.name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id JOIN course AS T3 ON T3.course_id = T2.course_id WHERE T3.course ='math';
 SELECT T1.name,  count(*) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id;;
 SELECT T1.name,  count(*) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id;
 SELECT T2.name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id HAVING count(*)  >=  2;
 SELECT T2.name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id HAVING COUNT(*)  >=  2;
 SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange);
 SELECT T1.name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.course_id NOT IN (SELECT course_id FROM course);
 SELECT count(*) FROM customer WHERE age  <  30;;
 SELECT T1.name FROM customer AS T1 JOIN visit AS T2 ON T1.customer_id = T2.customer_id WHERE T1.level_of_membership  >  4 ORDER BY T1.level_of_membership;
 SELECT avg(T1.age) FROM customer AS T1 JOIN visit AS T2 ON T1.customer_id = T2.customer_id WHERE T1.level_of_membership <= 4;;
 SELECT T1.name,  T1.Level_of_Membership FROM Customer AS T1 JOIN visit AS T2 ON T1.Customer_ID  =  T2.Customer_ID WHERE T1.Level_of_Membership  >  4 ORDER BY T1.Age;
 SELECT museum_id,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1;;
 SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009;
SELECT open_year,  num_of_staff FROM museum WHERE name = 'Plaza Museum';;
 SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010);
 SELECT T1.id,  T1.age,  T1.name FROM customer AS T1 JOIN visit AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  1;
 SELECT T1.id,  T1.name,  T1.level_of_membership FROM customer AS T1 JOIN visit AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(T2.total_spent) DESC LIMIT 1;;
 SELECT T1.museum_id,  T1.name FROM museum AS T1 JOIN visit AS T2 ON T1.museum_id  =  T2.museum_id GROUP BY T1.museum_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.name FROM museum AS T1 JOIN visit AS T2 ON T1.museum_id = T2.museum_id WHERE T1.museum_id NOT IN (SELECT T2.museum_id FROM visit AS T2);
 SELECT T1.name,  T1.age FROM customer AS T1 JOIN visit AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY sum(T2.num_of_ticket) DESC LIMIT 1;
 SELECT avg(num_of_ticket), max(num_of_ticket) FROM visit;
 SELECT sum(t2.Total_Spent) FROM visit AS t1 JOIN customer AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.Level_of_Membership  =  1;;
 SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON T3.museum_id = T2.museum_id WHERE T3.open_year  <  2009 INTERSECT SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON T3.museum_id = T2.museum_id WHERE T3.open;
 SELECT count(*) FROM visit WHERE museum_id NOT IN (SELECT museum_id FROM museum WHERE open_year > 2010);
 SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008;;
 SELECT count(*) FROM players;;
 SELECT count(*) FROM players;
 SELECT count(*) FROM MATCHES;;
 SELECT count(*) FROM MATCHES;;
 SELECT T1.FirstName,  T1.Birth_Date FROM players AS T1 JOIN (SELECT country_code FROM players WHERE country_code  =  'USA' ) AS T2 ON T1.country_code  =  T2.country_code;
 SELECT T1.FirstName,  T1.Birth_Date FROM players AS T1 JOIN (SELECT player_id FROM players WHERE Country_Code = "USA") AS T2 ON T1.Player_ID = T2.player_id;;
 SELECT avg(T1.Loser_Age),  avg(T1.Winner_Age) FROM MATCHES AS T1;;
 SELECT avg(loser_age),  avg(winner_age) FROM matches;;
 SELECT avg(T1.winner_rank_points) FROM MATCHES AS T1 JOIN PLAYERS AS T2 ON T1.winner_id  =  T2.player_id;;
 SELECT avg(T1.winner_rank_points) FROM MATCHES AS T1 JOIN PLAYERS AS T2 ON T1.winner_id  =  T2.player_id;;
 SELECT max(Loser_Rank) FROM matches;
 SELECT max(loser_rank) FROM matches;
 SELECT count(DISTINCT country_code) FROM players;
 SELECT COUNT(DISTINCT country_code) FROM players;;
 SELECT COUNT(DISTINCT loser_name) FROM matches;
 SELECT count(DISTINCT Loser_name) FROM matches;
 SELECT T1.Tourney_name FROM matches AS T1 JOIN players AS T2 ON T1.loser_ID  =  T2.player_ID GROUP BY T1.Tourney_name HAVING count(*)  >  10;
 SELECT T1.Tourney_name FROM matches AS T1 JOIN players AS T2 ON T1.loser_id  =  T2.player_id GROUP BY T1.Tourney_id HAVING count(*)  >  10;
 SELECT T1.winner_name FROM players AS T1 JOIN MATCHES AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2013 INTERSECT SELECT T1.winner_name FROM players AS T1 JOIN MATCHES AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2016;
 SELECT T1.winner_name FROM players AS T1 JOIN MATCHES AS T2 ON T2.winner_id  =  T1.player_id WHERE T2.year  =  2013 INTERSECT SELECT T1.winner_name FROM players AS T1 JOIN MATCHES AS T2 ON T2.winner_id  =  T1.player_id WHERE T2.year  =  2016;
 SELECT count(*) FROM MATCHES WHERE YEAR  =  2013 OR YEAR  =  2016;;
 SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016;;
 SELECT T1.country_code,  T1.first_name FROM players AS T1 JOIN MATCHES AS T2 ON T2.winner_id  =  T1.player_id WHERE T2.Tourney_name  =  "WTA Championships" INTERSECT SELECT T1.country_code,  T1.first_name FROM players AS T1 JOIN MATCHES AS T2 ON T2.winner_id  =  T1.player_id WHERE T2.Tourney_name  =  "Australian Open";
 SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN MATCHES AS T2 ON T1.player_id  =  T2.loser_id WHERE T2.tourney_name  =  "WTA Championships" INTERSECT SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN MATCHES AS T2 ON T1.player_id  =  T2.loser_id WHERE T2.tourney_name  =  "Australian Open";
 SELECT T1.first_name,  T1.country_code FROM players AS T1 ORDER BY T1.birth_date LIMIT 1;;
 SELECT T1.first_name,  T1.country_code FROM players AS T1 ORDER BY T1.birth_date ASC LIMIT 1;;
 SELECT first_name,  last_name FROM players ORDER BY birth_date;;
 SELECT T1.first_name, T1.last_name FROM Players AS T1 ORDER BY T1.birth_date;;
 SELECT first_name,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date;;
 SELECT T1.first_name,  T1.last_name FROM players AS T1 WHERE T1.Hand  =  'Left' ORDER BY T1.birth_date;
 SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.Tours LIMIT 1;
 SELECT YEAR FROM MATCHES GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;;
 SELECT YEAR FROM MATCHES GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.winner_name,  T1.winner_rank_points FROM MATCHES AS T1 JOIN PLAYERS AS T2 ON T1.winner_id  =  T2.player_id GROUP BY T1.winner_id ORDER BY count(*) DESC LIMIT 1;
 SELECT T1.winner_name,  T1.winner_rank_points FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id GROUP BY T1.winner_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.winner_id  =  T2.winner_id WHERE T2.Tourney_name  =  "Australian Open" ORDER BY T2.winner_rank_points DESC LIMIT 1;;
 SELECT T1.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.winner_id = T2.winner_id WHERE T2.tourney_name = "Australian Open" ORDER BY T2.winner_rank_points DESC LIMIT 1;;
 SELECT T1.loser_name,  T1.winner_name FROM players AS T1 JOIN MATCHES AS T2 ON T2.loser_id  =  T1.player_id ORDER BY T2.minutes DESC LIMIT 1;
 SELECT T1.loser_name,  T1.winner_name FROM matches ORDER BY minutes DESC LIMIT 1;;
 SELECT avg(T1.winner_rank),  T1.winner_name FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id GROUP BY T2.winner_name;
 SELECT T1.first_name, avg(T2.Ranking) FROM players AS T1 JOIN rankings AS T2 ON T1.Player_ID  =  T2.Player_ID GROUP BY T1.Player_ID;
 SELECT T1.first_name,  sum(T1.Ranking_points) FROM Players AS T1 JOIN Rankings AS T2 ON T1.Player_id  =  T2.Player_id GROUP BY T1.Player_id;
 SELECT T1.first_name,  T1.Ranking_Points FROM Players AS T1 JOIN Rankings AS T2 ON T1.Player_ID  =  T2.Player_ID ORDER BY T2.Ranking_Points ASC;
 SELECT count(*),  country_code FROM players GROUP BY country_code;;
 SELECT COUNT(*),  country_code FROM players GROUP BY country_code;;
 SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1;;
 SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1;;
 SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50;;
 SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50;;
 SELECT ranking_date,  count(*) FROM rankings GROUP BY ranking_date;;
 SELECT ranking_date,  count(*) FROM rankings GROUP BY ranking_date;
 SELECT YEAR(),  count(*) FROM MATCHES GROUP BY YEAR();
 SELECT YEAR,  count(*) FROM matches GROUP BY YEAR;;
 SELECT T1.winner_name,  T1.winner_rank FROM MATCHES AS T1 JOIN PLAYERS AS T2 ON T1.winner_id  =  T2.player_id ORDER BY T1.winner_age LIMIT 3;;
 SELECT T1.winner_name,  T1.winner_rank FROM MATCHES AS T1 JOIN PLAYERS AS T2 ON T1.winner_id  =  T2.player_id ORDER BY T1.winner_age LIMIT 3;;
 SELECT COUNT(*) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T1.hand  =  'Left' AND T2.tourney_name = 'WTA Championships';
 SELECT count(*) FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id WHERE T1.hand  =  'Left' AND T2.tourney_name  =  "WTA Championships";
 SELECT T1.first_name,  T1.country_code,  T1.birth_date FROM players AS T1 JOIN MATCHES AS T2 ON T2.winner_id  =  T1.player_id ORDER BY T2.winner_rank_points DESC LIMIT 1;;
 SELECT T1.first_name,  T1.country_code,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id GROUP BY T2.winner_id ORDER BY sum(T2.loser_rank_points) DESC LIMIT 1;;
 SELECT count(*),  loser_hand FROM matches GROUP BY loser_hand;;
 SELECT winner_hand,  count(*) FROM players GROUP BY winner_hand;;
 SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured';
 SELECT name,  tonnage FROM ship ORDER BY name DESC;
 SELECT name,  date,  RESULT FROM battle;;
 SELECT max(killed),  min(killed) FROM death;
 SELECT avg(Injured) FROM death;
 SELECT T2.note,  T2.killed,  T2.injured FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = 't';
 SELECT name,  result FROM battle WHERE bulgarian_commander!= 'Boril';
 SELECT DISTINCT T1.id,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig';
 SELECT T1.id,  T1.name FROM battle AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id HAVING sum(T2.killed)  >  10;;
 SELECT T1.id,  T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id ORDER BY sum(T2.injured) DESC LIMIT 1;
 SELECT DISTINCT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I';
 SELECT count(DISTINCT Result) FROM battle;
 SELECT count(*) FROM battle WHERE RESULT  =  "lost" EXCEPT SELECT T1.id FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.tonnage  =  225;
SELECT T1.date,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T1.lost_in_battle WHERE T2.name = "Lettice" INTERSECT SELECT T1.date,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T1.lost_in_battle WHERE T2.name = "HMS Atalanta";
 SELECT T1.name,  T1.result,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.Location!= "English Channel";
 SELECT Note FROM death WHERE Note LIKE '%East%';
 SELECT line_1,  line_2 FROM Addresses;;
 SELECT line_1,  line_2 FROM Addresses;;
 SELECT count(*) FROM COURSES;;
 SELECT count(*) FROM COURSES;;
 SELECT course_description FROM COURSES WHERE course_name  =  'Math';
 SELECT course_description FROM courses WHERE course_name  =  'Math';
 SELECT zip_postcode FROM addresses WHERE city = "Port Chelsea";;
 SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Student_Enrolment AS T2 ON T1.address_id  =  T2.permanent_address_id WHERE T1.city  =  'Port Chelsea';
 SELECT T1.department_name,  T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.department_name,  T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT count(*) FROM Degree_Programs;;
 SELECT count(DISTINCT department_id) FROM Degree_Programs;;
 SELECT count(DISTINCT degree_summary_name) FROM Degree_programs;;
 SELECT count(DISTINCT degree_summary_name) FROM degree_programs;;
 SELECT count(*) FROM DEGREE_PROGRAMS WHERE department_id IN (SELECT department_id FROM departments WHERE department_name  =  'Engineering');
 SELECT count(*) FROM DEGREE_PROGRAMS AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.degree_summary_name  =  'Engineering';
 SELECT section_name,  section_description FROM SECTIONS;;
 SELECT section_name,  section_description FROM SECTIONS;;
 SELECT T1.course_name,  T1.course_id FROM COURSES AS T1 JOIN SECTIONS AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2;;
 SELECT T1.course_name,  T1.course_id FROM COURSES AS T1 JOIN SECTIONS AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <  2;;
 SELECT section_name FROM COURSES AS T1 JOIN SECTIONS AS T2 ON T1.course_id = T2.course_id ORDER BY T2.section_name DESC;;
 SELECT section_name FROM SECTIONS ORDER BY section_name DESC;
 SELECT T1.semester_name,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.semester_name,  T1.semester_id,  count(*) FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT department_description FROM DEPARTMENTS WHERE department_name LIKE '%computer%';
 SELECT department_description FROM DEPARTMENTS WHERE department_name LIKE '%computer%';
 SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.semester_id  =  T2.semester_id GROUP BY T1.student_id HAVING COUNT(*)  =  2;
 SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T1.student_id FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN degree_programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.semester_id  =  'Spring 2019' GROUP BY T1.student_id HAVING count(*)  =  2;
 SELECT T1.first_name,  T1.middle_name,  T1.last_name FROM students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor';
 SELECT T1.first_name,  T1.middle_name,  T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN degree_programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  "Bachelors";
 SELECT degree_programs.degree_summary_name FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT degree_summary_name FROM degree_programs GROUP BY degree_summary_name ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.degree_program_id,  T2.degree_summary_name FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.degree_program_id,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT count(*),  T1.student_id FROM Student_Enrolment AS T1 JOIN Degree_Programms AS T2 ON T1.Degree_Program_ID  =  T2.Degree_Program_ID GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T1.student_id,  count(*) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment);
 SELECT semester_name FROM semesters EXCEPT SELECT T1.semester_name FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_name;
 SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id;
 SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING count(*)  >=  (SELECT count(*) FROM Students WHERE degree_program_id IN (SELECT degree_program_id FROM Student_Enrolment WHERE semester_id IN (SELECT semester_id FROM Semesters WHERE semester_name  =  'Fall')));
 SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id WHERE T1.state_province_county = "North Carolina" EXCEPT SELECT T2.last_name FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T1.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name!= "Doctoral;
 SELECT T1.last_name FROM students AS T1 JOIN addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.state_province_county = "North Carolina" EXCEPT SELECT T3.last_name FROM students AS T3 JOIN student_enrolment AS T4 ON T3.student_id = T4.student_id JOIN degree_programs AS T5 ON T4.degree_program_id = T5.degree_program_id;
 SELECT T1.transcript_date,  T1.transcript_id FROM Transcripts AS T1 JOIN Student_Enrolment_Courses AS T2 ON T2.student_course_id  =  T1.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2;;
 SELECT T1.transcript_date,  T1.transcript_id FROM Transcripts AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.transcript_id  =  T2.student_course_id GROUP BY T2.student_course_id HAVING count(*)  >=  2;;
 SELECT cell_mobile_number FROM STUDENTS WHERE first_name = "Timmothy" AND last_name = "Ward";;
 SELECT cell_mobile_number FROM students WHERE first_name = "Timmothy" AND last_name = "Ward";;
 SELECT first_name,  middle_name,  last_name FROM students ORDER BY date_first_registered ASC LIMIT 1;;
 SELECT first_name,  middle_name,  last_name FROM students ORDER BY date_first_registered LIMIT 1;;
 SELECT T1.first_name,  T1.middle_name,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.transcript_date  =  (SELECT min(transcript_date) FROM Student_Enrolment AS T4 JOIN Degree_Programs AS T5 ON T4.degree;
 SELECT T1.first_name,  T1.middle_name,  T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN degree_programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.transcript_date  =  (SELECT min(transcript_date) FROM student_enrolment AS T4 JOIN degree_programs AS T5 ON T4.degree_program_id;
 SELECT DISTINCT first_name FROM students WHERE permanent_address_id!= current_address_id;
 SELECT first_name FROM students WHERE permanent_address_id!= current_address_id;;
 SELECT T1.address_id,  T1.line_1,  T1.line_2,  T1.line_3 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.address_id,  T1.line_1,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT avg(transcript_date) FROM TRANSCRIPTS;;
 SELECT avg(transcript_date) FROM transcripts;;
 SELECT transcript_date,  other_details FROM TRANSCRIPTS ORDER BY transcript_date ASC LIMIT 1;;
 SELECT transcript_date,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;;
 SELECT count(*) FROM TRANSCRIPTS;;
 SELECT count(*) FROM TRANSCRIPTS;;
 SELECT transcript_date FROM TRANSCRIPTS ORDER BY transcript_date DESC LIMIT 1;;
 SELECT transcript_date FROM TRANSCRIPTS ORDER BY transcript_date DESC LIMIT 1;;
 SELECT T1.student_course_id,  count(*) FROM Student_Enrolment_Courses AS T1 JOIN Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.student_course_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.course_id,  max(T1.student_course_id) FROM Student_Enrolment_Courses AS T1 JOIN Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id;;
 SELECT T1.transcript_date,  T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) LIMIT 1;;
 SELECT transcript_date,  transcript_id FROM transcripts GROUP BY transcript_id ORDER BY count(*) LIMIT 1;;
 SELECT T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id WHERE T2.degree_program_id  =  "Master" INTERSECT SELECT T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id WHERE T2.degree_program_id  =  "Bachelor";
 SELECT semester_id FROM Student_enrolment WHERE degree_program_id  =  "Masters" INTERSECT SELECT semester_id FROM Student_enrolment WHERE degree_program_id  =  "Bachelors";
 SELECT count(DISTINCT current_address_id) FROM STUDENTS;;
 SELECT DISTINCT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.permanent_address_id;
 SELECT * FROM STUDENTS ORDER BY last_name DESC;
 SELECT other_student_details FROM students ORDER BY last_name DESC;
 SELECT course_id FROM COURSES WHERE course_name  =  'h';
 SELECT section_description FROM SECTIONS WHERE section_name  =  'h';
 SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = "Haiti") OR cell_mobile_number = "09700166582";;
 SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582';
 SELECT title FROM cartoon ORDER BY title;
 SELECT title FROM cartoon ORDER BY title;;
 SELECT title FROM cartoon WHERE directed_by = "Ben Jones";
 SELECT title FROM cartoon WHERE directed_by = 'Ben Jones';
 SELECT count(*) FROM cartoon WHERE written_by  =  "Joseph Kuhr";
 SELECT count(*) FROM cartoon WHERE written_by  =  'Joseph Kuhr';
 SELECT title,  directed_by FROM cartoon ORDER BY original_air_date;;
 SELECT title,  directed_by FROM cartoon ORDER BY original_air_date;;
 SELECT title FROM cartoon WHERE directed_by  =  "Ben Jones" OR directed_by  =  "Brandon Vietti";
 SELECT title FROM cartoon WHERE directed_by = "Ben Jones" OR directed_by = "Brandon Vietti";;
 SELECT country,  count(*) FROM tv_channel GROUP BY country ORDER BY count(*) DESC LIMIT 1;;
 SELECT country,  count(*) FROM tv_channel GROUP BY country ORDER BY count(*) DESC LIMIT 1;;
 SELECT count(DISTINCT series_name),  count(DISTINCT content) FROM tv_channel;;
 SELECT count(DISTINCT series_name),  count(DISTINCT content) FROM tv_channel;;
 SELECT content FROM tv_channel WHERE Series_name  =  "Sky Radio";;
 SELECT T1.content FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T1.series_name = "Sky Radio";;
 SELECT Package_Option FROM tv_channel WHERE Series_Name = "Sky Radio";;
 SELECT Package_Option FROM tv_channel WHERE Series_Name  =  'Sky Radio';
 SELECT count(*) FROM tv_channel WHERE language  =  'English';;
 SELECT count(*) FROM tv_channel WHERE language  =  'English';
 SELECT language,  count(*) FROM tv_channel GROUP BY language ORDER BY count(*) ASC LIMIT 1;;
 SELECT language,  count(*) FROM tv_channel GROUP BY language ORDER BY count(*) ASC LIMIT 1;;
 SELECT language,  count(*) FROM tv_channel GROUP BY language;;
 SELECT language, count(*) FROM tv_channel GROUP BY language;;
 SELECT T3.series_name FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.channel JOIN tv_series AS T3 ON T3.id = T1.id WHERE T2.title = "The Rise of the Blue Beetle!";
 SELECT T1.series_name FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.channel JOIN tv_series AS T3 ON T3.id = T3.channel WHERE T3.episode = "The Rise of the Blue Beetle";
 SELECT T1.title FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T2.series_name  =  "Sky Radio";
 SELECT T2.title FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.channel JOIN tv_series AS T3 ON T1.id = T3.channel WHERE T3.series_name = "Sky Radio";
 SELECT episode FROM tv_series ORDER BY rating;
 SELECT episode FROM tv_series ORDER BY rating;
 SELECT episode,  rating FROM tv_series ORDER BY rating DESC LIMIT 3;;
 SELECT episode,  rating FROM tv_series ORDER BY rating DESC LIMIT 3;;
 SELECT min(share),  max(share) FROM tv_series;;
 SELECT max(Share),  min(Share) FROM tv_series;;
 SELECT air_date FROM tv_series WHERE Episode  =  "A Love of a Lifetime";;
 SELECT air_date FROM tv_series WHERE episode  =  "A Love of a Lifetime";;
 SELECT Weekly_Rank FROM tv_series WHERE Episode  =  "A Love of a Lifetime";
 SELECT weekly_rank FROM tv_series WHERE episode  =  "A Love of a Lifetime";
 SELECT T3.Series_name FROM tv_series AS T1 JOIN channel AS T2 ON T1.channel  =  T2.id JOIN tv_channel AS T3 ON T2.id  =  T3.id WHERE T1.Episode  =  "A Love of a Lifetime";
 SELECT T1.series_name FROM tv_series AS T1 JOIN channel AS T2 ON T1.channel = T2.id JOIN tv_series AS T3 ON T3.id = T1.id WHERE T3.episode = "A Love of a Lifetime";
 SELECT T1.Episode FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T2.Series_name  =  "Sky Radio";
 SELECT episode FROM tv_series WHERE series_name = "Sky Radio";;
 SELECT directed_by,  count(*) FROM cartoon GROUP BY directed_by;;
 SELECT directed_by,  count(*) FROM cartoon GROUP BY directed_by;;
 SELECT production_code,  channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1;
 SELECT production_code,  channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1;
 SELECT package_option,  series_name FROM tv_channel WHERE hight_definition_tv  =  'Yes';
 SELECT package_option,  series_name FROM tv_channel WHERE Hight_Definition_TV  =  'Yes';
 SELECT T1.country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel JOIN tv_series AS T3 ON T3.id  =  T1.channel WHERE T2.written_by  =  'Todd Casey';
 SELECT T1.country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel JOIN tv_series AS T3 ON T3.id  =  T2.id WHERE T3.director  =  'Todd Casey';
 SELECT country FROM tv_channel EXCEPT SELECT T1.country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel JOIN tv_series AS T3 ON T3.id  =  T2.channel WHERE T3.writer  =  'Todd Casey';
 SELECT country FROM tv_channel EXCEPT SELECT T2.country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel JOIN tv_series AS T3 ON T3.id  =  T1.series_name WHERE T3.director LIKE '%Todd Casey%';
 SELECT T2.series_name,  T2.country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel JOIN tv_series AS T3 ON T3.id  =  T1.series_name WHERE T3.director LIKE '%Ben Jones%' INTERSECT SELECT T2.series_name,  T2.country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel JOIN tv_series AS T3 ON T;
 SELECT T1.series_name,  T1.country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by = "Ben Jones" INTERSECT SELECT T1.series_name,  T1.country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by = "Michael Chang";
 SELECT PAR,  country FROM tv_channel WHERE language!= 'English';
 SELECT PAR,  country FROM tv_channel WHERE language!= 'english';
 SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2;;
 SELECT id FROM tv_channel GROUP BY id HAVING count(*)  >  2;;
 SELECT id FROM tv_channel EXCEPT SELECT T1.id FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel JOIN tv_series AS T3 ON T3.channel  =  T1.id WHERE T3.director  =  "Ben Jones";
 SELECT id FROM tv_channel EXCEPT SELECT T1.id FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel JOIN tv_series AS T3 ON T3.channel  =  T1.id WHERE T3.director  =  "Ben Jones";
 SELECT DISTINCT package_option FROM tv_channel EXCEPT SELECT t1.package_option FROM tv_channel AS t1 JOIN cartoon AS t2 ON t1.id  =  t2.channel WHERE t2.directed_by  =  "Ben Jones";
 SELECT package_option FROM tv_channel EXCEPT SELECT t1.package_option FROM tv_channel AS t1 JOIN cartoon AS t2 ON t1.id  =  t2.channel JOIN tv_series AS t3 ON t3.id  =  t2.id WHERE t3.director  =  "Ben Jones";
 SELECT count(*) FROM poker_player;;
 SELECT count(*) FROM poker_player;;
 SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
 SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
 SELECT Final_Table_Made,  best_finish FROM poker_player;;
 SELECT Final_Table_Made,  Best_Finish FROM poker_player;;
 SELECT avg(Earnings) FROM poker_player;;
 SELECT avg(Earnings) FROM poker_player;
 SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;;
 SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;
 SELECT max(T1.final_table_made) FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.earnings  <  200000;
 SELECT max(T2.final_table_made) FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.earnings  <  200000;;
 SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID;
 SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID;;
 SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000;
 SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000;;
 SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made;;
 SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made;
 SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings LIMIT 1;;
 SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Earnings LIMIT 1;;
 SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;;
 SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;;
 SELECT avg(T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200;;
 SELECT avg(earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.height  >  200;;
 SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC;
 SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Earnings DESC;
 SELECT Nationality,  COUNT(*) FROM people GROUP BY Nationality;;
 SELECT Nationality,  count(*) FROM people GROUP BY Nationality;;
 SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;;
 SELECT Nationality FROM people GROUP BY Nationality ORDER BY count(*) DESC LIMIT 1;
 SELECT T1.Nationality FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID GROUP BY T1.Nationality HAVING COUNT(*)  >=  2;
 SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2;;
 SELECT Name,  Birth_Date FROM people ORDER BY Name ASC;
 SELECT T1.Name,  T1.Birth_Date FROM people AS T1 ORDER BY T1.Name;;
 SELECT Name FROM people WHERE Nationality!= "Russia";
 SELECT Name FROM people WHERE Nationality!= 'Russian';
 SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
 SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.final_table_made!= 'Yes';
 SELECT count(DISTINCT Nationality) FROM people;;
 SELECT COUNT(DISTINCT Nationality) FROM people;;
 SELECT count(DISTINCT State) FROM Area_code_state;;
 SELECT Contestant_number,  Contestant_name FROM Contestants ORDER BY Contestant_name DESC;;
 SELECT vote_id,  phone_number,  STATE FROM votes;
 SELECT max(area_code),  min(area_code) FROM area_code_state;;
 SELECT max(T2.Created) FROM area_code_state AS T1 JOIN votes AS T2 ON T1.State  =  T2.State WHERE T1.State  =  'CA';
 SELECT contestant_name FROM Contestants WHERE contestant_name!= 'Jessie Alloway';
 SELECT DISTINCT T1.State,  T2.Created FROM area_code_state AS T1 JOIN votes AS T2 ON T1.State  =  T2.State;;
 SELECT T2.Contestant_Number,  T1.Contestant_Name FROM Contestants AS T1 JOIN Votes AS T2 ON T1.Contestant_Number  =  T2.Contestant_Number GROUP BY T2.Contestant_Number HAVING COUNT(*)  >=  2;;
 SELECT T1.contestant_name,  T1.contestant_number FROM Contestants AS T1 JOIN Votes AS T2 ON T1.contestant_number  =  T2.contestant_number ORDER BY T2.vote_id LIMIT 1;;
 SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA';
 SELECT count(*) FROM Contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes);
 SELECT area_code FROM area_code_state GROUP BY area_code ORDER BY count(*) DESC LIMIT 1;;
 SELECT Created,  STATE,  Phone_Number FROM votes WHERE Contestant_Name  =  'Tabatha Gehling';
 SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.area_code  =  T2.state AND T2.contestant_number  =  "Tabatha Gehling" INTERSECT SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.area_code  =  T2.state AND T2.contestant_number  =  "Kelly Clauss";
 SELECT Contestant_Name FROM Contestants WHERE Contestant_Name LIKE '%Al%';
 SELECT name FROM country WHERE IndepYear  >  1950;;
 SELECT name FROM country WHERE indepdentyear  >  1950;
 SELECT COUNT(*) FROM country WHERE GovernmentForm  =  "republic";;
 SELECT COUNT(*) FROM country WHERE GovernmentForm  =  "republic";
 SELECT sum(surface_area) FROM country WHERE region  =  'Caribbean';
 SELECT sum(surface_area) FROM country WHERE continent  =  "Carribean";
 SELECT continent FROM country WHERE name = "Anguilla";
 SELECT T1.continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2 = T2.countrycode JOIN city AS T3 ON T3.countrycode = T1.code2 WHERE T3.name = "Isabela";
 SELECT T1.region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2 = T2.countrycode JOIN city AS T3 ON T3.countrycode = T1.code2 WHERE T3.name = "Kabul";
 SELECT region FROM country WHERE Capital = "Kabul";;
 SELECT T2.Language FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2 = T2.CountryCode WHERE T1.Name = "Aruba" GROUP BY T2.Language ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT T2.Language FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2 = T2.Countrycode WHERE T1.Name = "Aruba";
 SELECT Population,  Life_Expectancy FROM country WHERE Continent  =  "South America" AND Name  =  "Brazil";
 SELECT Population,  Life_Expectancy FROM country WHERE Continent  =  "South America" AND Name  =  "Brazil";;
 SELECT Region,  Population FROM Country WHERE Name = "Angola";;
 SELECT Region,  Population FROM country WHERE Name = "Angola";;
 SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND Region  =  "Central";
 SELECT avg(lifeExpectancy) FROM country WHERE continent = "Central Africa";;
 SELECT T1.Name FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2  =  T2.CountryCode JOIN country AS T3 ON T1.Code  =  T3.Code WHERE T3.LifeExpectancy  =  (SELECT min(LifeExpectancy) FROM Country WHERE Continent  =  'Asia');
 SELECT name FROM country WHERE continent = "Asia" AND life_expectancy IN (SELECT min(life_expectancy) FROM country WHERE continent = "Asia");
 SELECT sum(Population),  max(GNP) FROM country WHERE Continent  =  "Asia";
 SELECT count(*) FROM Country AS T1 JOIN city AS T2 ON T1.code  =  T2.countrycode WHERE T1.continent  =  'Asia' AND T2.population  =  (SELECT max(T3.population) FROM city AS T3 JOIN country AS T4 ON T3.countrycode  =  T4.code WHERE T4.continent  =  'Asia');
 SELECT avg(T2.LifeExpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code2  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" AND T1.continent  =  "Africa";;
 SELECT avg(T2.LifeExpectancy) FROM Country AS T1 JOIN countrylanguage AS T2 ON T1.Code2  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" AND T1.continent  =  "Africa";;
 SELECT sum(surface_area) FROM country WHERE continent = "Asia" OR continent = "Europe";
 SELECT sum(surface_area) FROM country WHERE continent  =  'Asia' OR continent  =  'Europe';
 SELECT sum(Population) FROM city WHERE District  =  "Gelderland";
 SELECT sum(Population) FROM city WHERE District  =  "Gelderland";;
 SELECT avg(GNP),  sum(Population) FROM country WHERE GovernmentForm  =  "US territory";
 SELECT avg(GNP),  sum(Population) FROM country WHERE Code2  =  'USA';
 SELECT COUNT(DISTINCT language) FROM CountryLanguage;
 SELECT COUNT(DISTINCT language) FROM CountryLanguage;
 SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa";
 SELECT COUNT(DISTINCT GovernmentForm) FROM Country WHERE Continent  =  "Africa";
 SELECT count(DISTINCT Language) FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Name  =  'Aruba';
 SELECT COUNT(DISTINCT language) FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Name  =  'Aruba';
 SELECT count(*) FROM countrylanguage WHERE countrycode  =  'AF' AND isofficial  =  1;;
 SELECT count(*) FROM CountryLanguage WHERE CountryCode  =  "AF" AND isOfficial  =  1;;
 SELECT T1.Name FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2 = T2.CountryCode GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1;
 SELECT T2.name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.percentage  =  (SELECT max(percentage) FROM countrylanguage);
 SELECT T1.continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2 = T2.countrycode GROUP BY T1.continent ORDER BY count(*) DESC LIMIT 1;;
 SELECT T2.continent,  count(*) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.isofficial  =  1 GROUP BY T2.continent ORDER BY count(*) DESC LIMIT 1;;
 SELECT count(*) FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.countrycode = T2.code WHERE T1.language = "English" AND T2.name IN (SELECT T3.name FROM Country AS T3 JOIN CountryLanguage AS T4 ON T3.code = T4.countrycode WHERE T4.language = "Dutch");
 SELECT count(*) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = "English" AND T2.name IN ("Netherlands", "Belgium");
 SELECT T2.name FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.countrycode = T2.code WHERE T1.language = "English" INTERSECT SELECT T2.name FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.countrycode = T2.code WHERE T1.language = "French";
 SELECT T1.Name FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2 = T2.CountryCode WHERE T2.Language = "English" INTERSECT SELECT T1.Name FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2 = T2.CountryCode WHERE T2.Language = "French";
 SELECT T1.Name FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2 = T2.Countrycode WHERE T2.Language = "English" INTERSECT SELECT T1.Name FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2 = T2.Countrycode WHERE T2.Language = "French";
 SELECT T2.name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = "English" AND T1.isofficial = 1 JOIN countrylanguage AS T3 ON T3.countrycode = T1.countrycode WHERE T3.language = "French" AND T3.isofficial = 1;
 SELECT count(DISTINCT continent) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = "Chinese";
 SELECT count(DISTINCT continent) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "Chinese";
 SELECT T2.region FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "English" OR T1.language  =  "Dutch";
 SELECT T2.name FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2 = T2.Countrycode WHERE T2.Language  =  "Dutch" OR T2.Language  =  "English";
 SELECT T2.name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language  =  "English" OR T1.language  =  "Dutch";
 SELECT T2.name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "English" OR T1.language  =  "Dutch";
 SELECT T2.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Continent  =  'Asia' GROUP BY T1.Language ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT T2.Language FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2 = T2.CountryCode WHERE T1.Continent = "Asia" GROUP BY T2.Language ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT T1.Language FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.GovernmentForm  =  "republic" GROUP BY T1.CountryCode HAVING count(*)  =  1;
 SELECT T1.Language FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.GovernmentForm  =  "Republic" GROUP BY T1.CountryCode HAVING COUNT(*)  =  1;
 SELECT name FROM city WHERE countrycode IN (SELECT countrycode FROM countrylanguage WHERE language  =  'english') ORDER BY population DESC LIMIT 1;;
 SELECT name FROM city WHERE countrycode = "GBR" AND population = (SELECT max(population) FROM city WHERE countrycode = "GBR");
 SELECT name,  population,  LifeExpectancy FROM Country WHERE Continent  =  'Asia' ORDER BY SurfaceArea DESC LIMIT 1;;
 SELECT name,  population,  Life_Expectancy FROM Country WHERE Continent  =  'Asia' ORDER BY Surface_Area DESC LIMIT 1;;
 SELECT avg(T2.lifeexpectancy) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.isofficial  =  'No';
 SELECT avg(T2.lifeexpectancy) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.isofficial  =  'No';
 SELECT sum(Population) FROM city WHERE countrycode NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');;
 SELECT sum(Population) FROM city WHERE countrycode NOT IN (SELECT countrycode FROM countrylanguage WHERE language  =  'English');
 SELECT T2.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T1.Language  =  "English" AND T2.HeadOfState  =  "Beatrix";;
 SELECT T2.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T1.HeadOfState  =  "Beatrix";
 SELECT count(DISTINCT T2.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.independentyear  <  1930 AND T1.IsOfficial  =  1;
 SELECT count(DISTINCT language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T2.indepdentyear  <  1930;
 SELECT name FROM country WHERE surfacearea  >  (SELECT max(surfacearea) FROM country WHERE continent  =  'Europe');
 SELECT name FROM country WHERE surfacearea  >  (SELECT max(surfacearea) FROM country WHERE continent  =  'Europe');
 SELECT Name FROM Country WHERE Continent  =  'Africa' AND Population  <  (SELECT max(Population) FROM Country WHERE Continent  =  'Asia');
 SELECT name FROM country WHERE continent  =  'Africa' AND population  <  (SELECT max(population) FROM country WHERE continent  =  'Asia');
 SELECT name FROM country WHERE continent  =  'Asia' AND population  >  (SELECT max(population) FROM city WHERE continent  =  'Africa');
 SELECT name FROM country WHERE continent  =  'Asia' AND population  >  (SELECT max(population) FROM country WHERE continent  =  'Africa');
 SELECT Code2 FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code2 = T2.Countrycode WHERE T2.Language  =  'English');
 SELECT Code2 FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code2  =  T2.Countrycode WHERE T2.Language  =  'English');
 SELECT T2.Code2 FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T1.Language!= "English";
 SELECT T2.code2 FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language!= "English";
 SELECT code2 FROM country WHERE GovernmentForm!= "Republic" AND Language!= "English";
 SELECT code2 FROM country WHERE GovernmentForm!= "Republic" AND Language!= "English";
 SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IsOfficial = 0 AND T1.Name IN (SELECT T3.Name FROM city AS T3 JOIN country AS T4 ON T3.CountryCode = T4.Code WHERE T4.Continent = "Europe");
 SELECT name FROM city WHERE countrycode IN (SELECT countrycode FROM countrylanguage WHERE isofficial  =  'NO' AND language = "English");
 SELECT DISTINCT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "Chinese" AND T1.Name IN (SELECT T3.Name FROM city AS T3 JOIN country AS T4 ON T3.CountryCode  =  T4.Code WHERE T4.continent  =  "Asia");
 SELECT DISTINCT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "Chinese" AND T1.continent  =  "Asia";
 SELECT name,  indepdent_year,  surface_area FROM country ORDER BY Population LIMIT 1;
 SELECT name,  indepdent_year,  surface_area FROM country ORDER BY Population LIMIT 1;
 SELECT name,  population,  head_of_state FROM country ORDER BY surface_area DESC LIMIT 1;
 SELECT name,  population,  Head_of_State FROM country ORDER BY surface_area DESC LIMIT 1;
 SELECT T2.Name,  count(*) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T1.Percentage  >=  3 GROUP BY T1.CountryCode;
 SELECT T1.Name,  T1.continent,  count(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code2  =  T2.CountryCode GROUP BY T1.Name,  T1.continent HAVING count(*)  >  2;;
 SELECT count(*),  district FROM city WHERE population  >  (SELECT avg(population) FROM city) GROUP BY district;;
 SELECT district,  count(*) FROM city WHERE population  >  (SELECT avg(population) FROM city) GROUP BY district;;
 SELECT GovernmentForm,  sum(Population) FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72;;
 SELECT GovernmentForm,  sum(Population) FROM country WHERE LifeExpectancy  >  72 GROUP BY GovernmentForm;;
 SELECT avg(life_expectancy),  sum(population),  continent FROM country GROUP BY continent HAVING avg(life_expectancy)  <  72;;
 SELECT continent,  sum(Population),  avg(Life_Expectancy) FROM country WHERE Life_Expectancy  <  72 GROUP BY continent;;
 SELECT name,  continent,  region,  surface_area FROM country ORDER BY surface_area DESC LIMIT 5;;
 SELECT name,  surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5;;
 SELECT name FROM country ORDER BY population DESC LIMIT 3;;
 SELECT name FROM country ORDER BY Population DESC LIMIT 3;;
 SELECT name FROM country ORDER BY population ASC LIMIT 3;;
 SELECT name FROM country ORDER BY population LIMIT 3;;
 SELECT COUNT(*) FROM country WHERE continent  =  'Asia';
 SELECT COUNT(*) FROM country WHERE continent = "Asia";;
 SELECT name FROM country WHERE continent = "Europe" AND Population = 80000;;
 SELECT name FROM country WHERE continent = "Europe" AND Population = 80000;;
 SELECT sum(Population), avg(Surface_area) FROM country WHERE Continent  =  'North America' AND Surface_area  >  3000;;
 SELECT sum(population), avg(surfacearea) FROM country WHERE continent  =  'North America' AND surfacearea  >  3000;;
 SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;;
 SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;
 SELECT T2.Language FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2  =  T2.CountryCode GROUP BY T2.Language ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT T2.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T1.Percent  =  1 GROUP BY T2.Language ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.Name,  T1.Language,  T1.Percentage FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.CountryCode  =  T2.Code ORDER BY T1.Percentage DESC LIMIT 1;;
 SELECT T1.code2,  T1.language,  T1.percentage FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code ORDER BY T1.percentage DESC LIMIT 1;;
 SELECT T2.name,  T1.percentage FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "Spanish" GROUP BY T1.countrycode ORDER BY AVG(percentage) DESC LIMIT 1;;
 SELECT count(*) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = "Spanish";
 SELECT code2 FROM countrylanguage WHERE percentage  =  (SELECT max(percentage) FROM countrylanguage);
 SELECT T1.code2 FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = "Spanish";
 SELECT count(*) FROM conductor;
 SELECT count(*) FROM conductor;;
 SELECT name FROM conductor ORDER BY age ASC;
SELECT name FROM conductor ORDER BY age;;
 SELECT name FROM conductor WHERE nationality!= "USA";
 SELECT name FROM conductor WHERE nationality!= "USA";
 SELECT Record_company FROM orchestra ORDER BY Year_of_founded DESC;
 SELECT Record_company FROM orchestra ORDER BY YEAR_of_founded DESC;
 SELECT avg(Attendance) FROM show;
 SELECT avg(Attendance) FROM show;
 SELECT max(Share),  min(Share) FROM performance WHERE TYPE!= "Live final";
 SELECT max(Share),  min(Share) FROM performance WHERE TYPE!= "Live final";
 SELECT COUNT(DISTINCT Nationality) FROM conductor;
 SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT name FROM conductor ORDER BY Year_of_work DESC;
SELECT name FROM conductor ORDER BY YEAR_of_work DESC;
 SELECT name FROM conductor ORDER BY YEAR_of_work DESC LIMIT 1;;
 SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY AVG(T2.Year_of_founded - T1.Year_of_work) DESC LIMIT 1;
 SELECT T3.Name,  T2.Orchestra FROM performance AS T1 JOIN orchestra AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID JOIN conductor AS T3 ON T2.Conductor_ID  =  T3.Conductor_ID;;
 SELECT T2.Name,  T1.Orchestra FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID;;
 SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(*)  >  1;
 SELECT T2.name FROM performance AS T1 JOIN conductor AS T2 ON T1.conductor_id  =  T2.conductor_id GROUP BY T1.conductor_id HAVING COUNT(*)  >  1;
 SELECT T2.name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T1.conductor_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1;;
 SELECT T1.name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.conductor_id = T2.conductor_id WHERE T2.year_of_founded  >  2008;;
 SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE T1.Year_of_Founded  >  2008;
 SELECT Record_company,  COUNT(*) FROM orchestra GROUP BY Record_company;
 SELECT Record_company,  count(*) FROM orchestra GROUP BY Record_company;;
 SELECT Record_Format FROM orchestra ORDER BY count(*) ASC;
 SELECT Major_Record_Format FROM orchestra ORDER BY COUNT(*) DESC;
SELECT Record_company FROM orchestra GROUP BY Record_company ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT Record_company FROM orchestra GROUP BY Record_company ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);
SELECT Orchestra_ID FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);
 SELECT Record_company FROM orchestra WHERE Year_of_founded  >  2003 INTERSECT SELECT Record_company FROM orchestra WHERE Year_of_founded  <  2003;
 SELECT Record_company FROM orchestra WHERE YEAR_of_founded  <  2003 INTERSECT SELECT Record_company FROM orchestra WHERE YEAR_of_founded  >  2003;
 SELECT count(*) FROM orchestra WHERE major_record_format  =  "CD" OR major_record_format  =  "DVD";
SELECT count(*) FROM orchestra WHERE major_record_format  =  "CD" OR major_record_format  =  "DVD";
 SELECT YEAR_of_founded FROM orchestra GROUP BY YEAR_of_founded HAVING COUNT(*)  >  1;
 SELECT T1.Year_of_founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T1.Orchestra_ID HAVING COUNT(*)  >  1;
 SELECT count(*) FROM highschooler WHERE grade  =  'High School';
 SELECT count(*) FROM highschooler WHERE grade  =  "High School";
 SELECT name,  grade FROM highschooler WHERE grade >= 6;
 SELECT name,  grade FROM highschooler WHERE grade  >=  80;
 SELECT DISTINCT grade FROM highschooler;
 SELECT DISTINCT grade FROM highschooler;
 SELECT grade FROM highschooler WHERE name = "Kyle";
 SELECT grade FROM highschooler WHERE name = "Kyle";
 SELECT name FROM highschooler WHERE grade = 10;
 SELECT name FROM highschooler WHERE grade  =  10;
 SELECT id FROM highschooler WHERE name = "Kyle";
 SELECT friend_id FROM friend WHERE name = "Kyle";;
 SELECT count(*) FROM HighSchooler WHERE grade  =  9 OR grade  =  10;
 SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10;;
 SELECT count(*),  grade FROM highschooler GROUP BY grade;
 SELECT count(*),  grade FROM highschooler GROUP BY grade;
 SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1;;
 SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1;
 SELECT DISTINCT grade FROM highschooler GROUP BY grade HAVING count(*)  >=  4;;
 SELECT DISTINCT grade FROM highschooler GROUP BY grade HAVING count(*)  >=  4;
 SELECT T1.student_id, count(*) FROM friend AS T1 JOIN highschooler AS T2 ON T1.friend_id  =  T2.id GROUP BY T1.student_id;;
 SELECT count(*),  friend_id FROM friend GROUP BY friend_id;
 SELECT T1.name,  count(*) FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id;
 SELECT T1.name,  count(*) FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id;;
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1;
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id = T2.friend_id GROUP BY T1.id HAVING count(*)  >=  3;
 SELECT name FROM highschooler WHERE grade  =  'High School' INTERSECT SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id HAVING count(*)  >=  3;
 SELECT T3.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id JOIN highschooler AS T3 ON T2.student_id  =  T3.id WHERE T1.grade  =  'High School' AND T1.name  =  'Kyle';
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id = T2.friend_id WHERE T1.grade = "High School" AND T2.student_id = (SELECT id FROM highschooler WHERE grade = "High School" AND name = "Kyle");
 SELECT count(*) FROM friend WHERE student_id IN (SELECT id FROM highschooler WHERE grade  =  '10') AND friend_id IN (SELECT friend_id FROM friend WHERE student_id IN (SELECT id FROM highschooler WHERE grade  =  '10')));
 SELECT count(*) FROM friend WHERE friend_id IN (SELECT friend_id FROM highschooler WHERE name = 'Kyle');;
 SELECT id FROM highschooler EXCEPT SELECT friend_id FROM friend;
 SELECT id FROM highschooler WHERE grade  =  "High School" EXCEPT SELECT friend_id FROM friend WHERE student_id IN (SELECT id FROM highschooler WHERE grade  =  "High School");
 SELECT name FROM highschooler WHERE grade  =  'High School' EXCEPT SELECT T2.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id;
 SELECT name FROM highschooler WHERE id NOT IN (SELECT friend_id FROM friend);
 SELECT id FROM highschooler EXCEPT SELECT friend_id FROM friend INTERSECT SELECT liked_id FROM likes;
 SELECT friend_id FROM friend INTERSECT SELECT student_id FROM likes;
 SELECT T2.name FROM friend AS T1 JOIN highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T3.name FROM likes AS T1 JOIN highschooler AS T3 ON T1.student_id  =  T3.id AND T1.liked_id  =  T3.id;
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id JOIN likes AS T3 ON T1.id  =  T3.student_id WHERE T2.student_id  =  T3.liked_id;
 SELECT count(*),  student_id FROM likes GROUP BY student_id;
 SELECT count(*),  student_id FROM likes GROUP BY student_id;
 SELECT T1.name, count(*) FROM highschooler AS T1 JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T1.id;
 SELECT T1.name,  count(*) FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T1.id;
 SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T1.name HAVING count(*)  >=  2;
 SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id HAVING count(*)  >=  2;
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.id HAVING avg(grade)  >  5 INTERSECT SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.id HAVING count(*)  >=  2;
 SELECT name FROM highschooler WHERE grade  >  5 INTERSECT SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id HAVING count(*)  >=  2;
 SELECT count(*) FROM likes AS t1 JOIN highschooler AS t2 ON t1.student_id  =  t2.id WHERE t2.name  =  "Kyle";
 SELECT count(*) FROM likes AS T1 JOIN highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle" AND T2.grade  =  'High School';
 SELECT avg(T1.grade) FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id;
 SELECT avg(grade) FROM highschooler WHERE id IN (SELECT friend_id FROM friend);
 SELECT min(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);
 SELECT min(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);
 SELECT T1.state FROM owners AS T1 JOIN professionals AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  T2.state;
 SELECT state FROM owners INTERSECT SELECT state FROM professionals;
 SELECT avg(T1.Age) FROM dogs AS T1 JOIN treatments AS T2 ON T1.Dog_ID  =  T2.Dog_ID;
 SELECT avg(T1.Age) FROM dogs AS T1 JOIN treatments AS T2 ON T1.Dog_ID  =  T2.Dog_ID WHERE T2.Treatment_Type_Code  =  "Dentistry";
 SELECT professional_id,  last_name,  cell_number FROM professionals WHERE role_code  =  'T' AND state  =  'Indiana' UNION SELECT professional_id,  last_name,  cell_number FROM treatments AS T1 JOIN professionals AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY professional_id HAVING count(*)  >  2;
 SELECT Professional_ID,  last_name,  cell_number FROM professionals WHERE state  =  'Indiana' OR count(*)  >  2;
 SELECT T2.name FROM treatments AS T1 JOIN dogs AS T2 ON T1.dog_id = T2.dog_id JOIN owners AS T3 ON T2.owner_id = T3.owner_id WHERE T1.cost_of_treatment  >  1000;
 SELECT T2.name FROM treatments AS T1 JOIN dogs AS T2 ON T1.dog_id  =  T2.dog_id JOIN owners AS T3 ON T2.owner_id  =  T3.owner_id WHERE T1.cost_of_treatment  >  1000;
 SELECT first_name FROM owners WHERE role_code  =  'owner' INTERSECT SELECT first_name FROM professionals WHERE role_code  =  'professional' EXCEPT SELECT name FROM dogs;;
 SELECT first_name FROM owners WHERE role_code  =  'professional' INTERSECT SELECT first_name FROM owners WHERE role_code  =  'owner' EXCEPT SELECT T2.first_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.first_name  =  T2.name;
 SELECT Professional_ID,  role_code,  email_address FROM Professionals EXCEPT SELECT Professional_ID FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.Professional_ID  =  T2.Owner_ID WHERE T2.breed_code  =  "Dog";
 SELECT professional_id,  role_code,  email_address FROM professionals EXCEPT SELECT T1.professional_id,  T1.role_code,  T1.email_address FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.dog_id!= "dogs.dog_id";
 SELECT T1.owner_id,  T2.first_name,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.owner_id,  T1.first_name,  T1.last_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT T1.professional_id,  T1.role_code,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2;;
 SELECT T1.professional_id,  T1.role_code,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2;;
 SELECT T2.breed_name FROM dogs AS T1 JOIN breeds AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_code ORDER BY count(*) DESC LIMIT 1;;
 SELECT T2.breed_name FROM dogs AS T1 JOIN breeds AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_code ORDER BY count(*) DESC LIMIT 1;;
 SELECT T2.owner_id,  T1.last_name FROM treatments AS T1 JOIN owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;;
 SELECT T2.owner_id,  T3.last_name FROM treatments AS T1 JOIN dogs AS T2 ON T1.dog_id  =  T2.dog_id JOIN owners AS T3 ON T2.owner_id  =  T3.owner_id GROUP BY T2.owner_id ORDER BY sum(T1.cost_of_treatment) DESC LIMIT 1;;
 SELECT t2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code JOIN Treatments AS T3 ON T3.treatment_type_code  =  T2.treatment_type_code AND T3.cost_of_treatment  =  (SELECT min(cost_of_treatment) FROM Treatments);
 SELECT t1.treatment_type_description FROM treatment_types AS t1 JOIN treatments AS t2 ON t1.treatment_type_code = t2.treatment_type_code GROUP BY t2.treatment_type_code ORDER BY sum(t2.cost_of_treatment) LIMIT 1;;
 SELECT T1.owner_id,  T1.zip_code FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id JOIN charges AS T3 ON T3.charge_id = T2.breed_code WHERE T3.charge_amount = (SELECT max(T3.charge_amount) FROM charges AS T3 JOIN dogs AS T4 ON T4.owner_id = T3.charge_id);
 SELECT T1.owner_id,  T1.zip_code FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY sum(T2.charge_amount) DESC LIMIT 1;;
 SELECT T1.professional_id,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*)  >=  2;;
 SELECT Professional_ID,  cell_number FROM Professionals GROUP BY Professional_ID HAVING count(*)  >=  2;;
 SELECT T1.first_name,  T1.last_name FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.cost_of_treatment  <  (SELECT avg(cost_of_treatment) FROM treatments);
 SELECT T1.first_name, T1.last_name FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment  <  (SELECT avg(cost_of_treatment) FROM treatments);
 SELECT T1.date_of_treatment,  T2.first_name FROM treatments AS T1 JOIN professionals AS T2 ON T1.professional_id  =  T2.professional_id;;
 SELECT date_of_treatment,  T1.first_name FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id;;
 SELECT T2.cost_of_treatment,  T1.treatment_type_description FROM treatment_types AS T1 JOIN treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code;;
 SELECT T1.cost_of_treatment,  T1.treatment_type_description_code FROM treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code;;
 SELECT T1.first_name,  T1.last_name,  T2.size_description FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id;;
 SELECT T2.first_name,  T2.last_name,  T1.size_code FROM dogs AS T1 JOIN owners AS T2 ON T1.owner_id  =  T2.owner_id;;
 SELECT T1.first_name,  T2.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id;;
 SELECT T1.first_name,  T1.last_name,  T2.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id;;
 SELECT T1.name,  T2.Date_of_Treatment FROM dogs AS T1 JOIN treatments AS T2 ON T1.Dog_ID  =  T2.Dog_ID JOIN breeds AS T3 ON T1.Breed_Code  =  T3.Breed_Code ORDER BY T3.breed_name GROUP BY T1.Breed_Code LIMIT 1;;
 SELECT T2.name,  T1.date_arrived FROM dogs AS T1 JOIN breeds AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_code ORDER BY count(*) LIMIT 1;;
 SELECT T1.first_name,  T1.last_name,  T2.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = "Virginia";
 SELECT T1.first_name,  T1.last_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  "Virginia";
 SELECT T2.Date_Arrived,  T2.Date_Departed FROM treatments AS T1 JOIN dogs AS T2 ON T1.Dog_ID  =  T2.Dog_ID;;
 SELECT T1.Date_Arrived,  T1.Date_Departed FROM dogs AS T1 JOIN treatments AS T2 ON T1.Dog_ID  =  T2.Dog_ID;
 SELECT T1.last_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.age LIMIT 1;;
 SELECT T2.last_name FROM dogs AS T1 JOIN owners AS T2 ON T1.owner_id = T2.owner_id WHERE T1.age = (SELECT min(age) FROM dogs);
 SELECT email_address FROM professionals WHERE state = "Hawaii" OR state = "Wisconsin";;
 SELECT email_address FROM professionals WHERE state = "Hawaii" OR state = "Wisconsin";;
 SELECT date_arrived,  date_departed FROM dogs;;
 SELECT date_arrived,  date_departed FROM dogs;;
 SELECT count(DISTINCT dog_id) FROM treatments;;
 SELECT count(DISTINCT dog_id) FROM treatments;;
 SELECT count(DISTINCT professional_id) FROM treatments AS T1 JOIN professionals AS T2 ON T1.professional_id  =  T2.professional_id WHERE T1.dog_id IN (SELECT dog_id FROM dogs WHERE breed_code  =  "German Shepherd");
 SELECT count(DISTINCT professional_id) FROM treatments AS T1 JOIN professionals AS T2 ON T1.professional_id  =  T2.professional_id WHERE T1.dog_id IN (SELECT dog_id FROM dogs WHERE breed_code  =  "dog");
 SELECT role_code,  street,  city,  state FROM professionals WHERE city LIKE '%West%';
 SELECT role_code,  street,  city,  state FROM professionals WHERE city LIKE '%West%';
 SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%';;
 SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%';;
 SELECT count(*) FROM dogs WHERE age  <  (SELECT avg(age) FROM dogs);
 SELECT count(*) FROM dogs WHERE age  <  (SELECT avg(age) FROM dogs);
 SELECT max(cost_of_treatment) FROM treatments;;
 SELECT max(cost_of_treatment) FROM treatments;
 SELECT count(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments);;
 SELECT count(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments);;
 SELECT count(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs);
 SELECT count(*) FROM owners WHERE owner_id NOT IN ( SELECT owner_id FROM dogs );;
 SELECT count(*) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments AS T1 JOIN dogs AS T2 ON T1.dog_id  =  T2.dog_id);
 SELECT count(*) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments);;
 SELECT name,  age,  weight FROM dogs WHERE abandoned_yes_or_no = 1;;
 SELECT name,  age,  weight FROM dogs WHERE abandoned_yes_or_no = 1;;
 SELECT avg(age) FROM dogs;;
 SELECT avg(age) FROM dogs;;
 SELECT age FROM dogs ORDER BY age DESC LIMIT 1;;
 SELECT age FROM dogs ORDER BY age DESC LIMIT 1;;
 SELECT charge_type,  charge_amount FROM Charges;;
 SELECT charge_type,  charge_amount FROM charges;;
 SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1;;
 SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1;;
 SELECT email_address,  cell_number,  home_phone FROM professionals;;
 SELECT email_address,  cell_number,  home_phone FROM professionals;;
 SELECT DISTINCT breed_code,  size_code FROM dogs;;
 SELECT DISTINCT T1.breed_code,  T1.size_code FROM dogs AS T1 JOIN breeds AS T2 ON T1.breed_code  =  T2.breed_code;;
 SELECT T2.first_name,  T3.treatment_type_description FROM treatments AS T1 JOIN professionals AS T2 ON T1.professional_id = T2.professional_id JOIN treatment_types AS T3 ON T1.treatment_type_code = T3.treatment_type_code;;
 SELECT T1.first_name,  T2.treatment_type_description FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id = T2.professional_id;
 SELECT count(*) FROM singer;
 SELECT count(*) FROM singer;
 SELECT name FROM singer ORDER BY net_worth_millions ASC;
 SELECT name FROM singer ORDER BY net_worth_millions ASC;
 SELECT Birth_Year,  Citizenship FROM singer;
 SELECT Birth_Year, Citizenship FROM singer;
 SELECT name FROM singer WHERE citizenship!= "France";
 SELECT name FROM singer WHERE citizenship!= 'French';
 SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949;
 SELECT name FROM singer WHERE birth_year  =  1948 OR birth_year  =  1949;
 SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;
 SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;;
 SELECT Citizenship,  COUNT(*) FROM singer GROUP BY Citizenship;;
 SELECT citizenship,  count(*) FROM singer GROUP BY citizenship;
 SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT citizenship FROM singer GROUP BY citizenship ORDER BY count(*) DESC LIMIT 1;
 SELECT citizenship,  max(net_worth_millions) FROM singer GROUP BY citizenship;
 SELECT citizenship, max(net_worth_millions) FROM singer GROUP BY citizenship;
 SELECT T2.title,  T1.name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id;
 SELECT T1.title,  T2.name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id = T2.singer_id;
 SELECT DISTINCT T1.name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id = T2.singer_id WHERE T2.sales  >  300000;
 SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000;
 SELECT T1.name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.name HAVING count(*)  >  1;
 SELECT T1.name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id = T2.singer_id GROUP BY T1.singer_id HAVING count(*)  >  1;
 SELECT T1.name,  sum(T2.sales) FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id;
 SELECT T1.name,  sum(T2.sales) FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.name;
 SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song);
 SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song);
 SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955;
 SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955;
 SELECT count(*) FROM Other_Available_Features;;
 SELECT T1.feature_type_name FROM Reference_feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = "AirCon";
 SELECT T2.property_type_description FROM Other_Available_Features AS T1 JOIN Ref_Property_Types AS T2 ON T1.feature_type_code = T2.property_type_code WHERE T1.feature_name = "property_type_code";
 SELECT T1.property_name FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code WHERE T2.property_type_description  =  'House' OR T2.property_type_description  =  'Apartment' AND T1.room_count  >  1;;
