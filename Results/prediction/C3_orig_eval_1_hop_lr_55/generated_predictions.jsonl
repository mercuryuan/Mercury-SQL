{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many singers do we have?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT count(*) FROM singer", "predict": "SELECT count(*) FROM singer"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the total number of singers?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT count(*) FROM singer", "predict": "SELECT count(*) FROM singer"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show name, country, age for all singers ordered by age from the oldest to the youngest.', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT name,  country,  age FROM singer ORDER BY age DESC", "predict": "SELECT name,  country,  age FROM singer ORDER BY age DESC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names, countries, and ages for every singer in descending order of age?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT name,  country,  age FROM singer ORDER BY age DESC", "predict": "SELECT Name,  Country,  Age FROM singer ORDER BY Age DESC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average, minimum, and maximum age of all singers from France?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT avg(age),  min(age),  max(age) FROM singer WHERE country  =  'France'", "predict": "SELECT avg(age),  min(age),  max(age) FROM singer WHERE country  =  'France'user"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average, minimum, and maximum age for all French singers?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT avg(age),  min(age),  max(age) FROM singer WHERE country  =  'France'", "predict": "SELECT avg(age),  min(age),  max(age) FROM singer WHERE country  =  'France'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the name and the release year of the song by the youngest singer.', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT song_name,  song_release_year FROM singer ORDER BY age LIMIT 1", "predict": "SELECT Song_Name,  Song_Release_Year FROM singer ORDER BY Age ASC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names and release years for all the songs of the youngest singer?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT song_name,  song_release_year FROM singer ORDER BY age LIMIT 1", "predict": "SELECT Song_Name,  Song_Release_Year FROM singer ORDER BY Age DESC LIMIT 1 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are all distinct countries where singers above age 20 are from?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT DISTINCT country FROM singer WHERE age  >  20", "predict": "SELECT DISTINCT Country FROM singer WHERE Age  >  20"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are  the different countries with singers above age 20?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT DISTINCT country FROM singer WHERE age  >  20", "predict": "SELECT Country FROM singer WHERE age  >  20?>\r\n\r\n?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show all countries and the number of singers in each country.', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT country,  count(*) FROM singer GROUP BY country", "predict": "SELECT Country,  COUNT(*) FROM singer GROUP BY Country CLIIIK?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many singers are from each country?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT country,  count(*) FROM singer GROUP BY country", "predict": "SELECT Country,  COUNT(*) FROM singer GROUP BY Country"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List all song names by singers above the average age.', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "predict": "SELECT Song_Name FROM singer WHERE Age  >  (SELECT avg(Age) FROM singer)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are all the song names by singers who are older than average?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "predict": "SELECT Song_Name FROM singer WHERE Age  >  (SELECT avg(Age) FROM singer)?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show location and name for all stadiums with a capacity between 5000 and 10000.', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT LOCATION,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "predict": "SELECT LOCATION,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the locations and names of all stations with capacity between 5000 and 10000?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT LOCATION,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "predict": "SELECT LOCATION,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the maximum capacity and the average of all stadiums?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "select max(capacity), average from stadium", "predict": "SELECT max(capacity),  avg(capacity) FROM stadium?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average and maximum capacities for all stadiums?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "select avg(capacity),  max(capacity) from stadium", "predict": "SELECT average,  max(capacity) FROM stadium"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name and capacity for the stadium with highest average attendance?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT name,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "predict": "SELECT name,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name and capacity for the stadium with the highest average attendance?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT name,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "predict": "SELECT name,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many concerts are there in year 2014 or 2015?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "predict": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many concerts occurred in 2014 or 2015?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "predict": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the stadium name and the number of concerts in each stadium.', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT T2.name,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "predict": "SELECT T2.name,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_idátky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'For each stadium, how many concerts play there?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT T2.name,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "predict": "SELECT T2.name,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID GROUP BY T1.Stadium_ID CLIIIK?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the stadium name and capacity with most number of concerts in year 2014 or after.', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT T2.name,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T2.name,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_ID  =  T2.stadium_ID WHERE T1.year  >=  2014 GROUP BY T1.stadium_ID ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name and capacity of the stadium with the most concerts after 2013?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "select t2.name,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1", "predict": "SELECT T2.name,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_ID  =  T2.stadium_ID WHERE T1.year  >  2013 ORDER BY T1.year DESC LIMIT 1 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which year has most number of concerts?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the year that had the most concerts?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1 CLIIIKátky?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the stadium names without any concert.', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "predict": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT Stadium_ID FROM concert) resultat"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of the stadiums without any concerts?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "predict": "SELECT name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show countries where a singer above age 40 and a singer below 30 are from.', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "predict": "SELECT Country FROM singer WHERE age  >  40 INTERSECT SELECT Country FROM singer WHERE age  <  30átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show names for all stadiums except for stadiums having a concert in year 2014.', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "predict": "SELECT name FROM stadium EXCEPT SELECT T3.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id JOIN singer_in_concert AS T4 ON T1.concert_id  =  T4.concert_id JOIN singer AS T3 ON T4.singer_id  =  T3.singer_id WHERE T1.year!= 2014"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of all stadiums that did not have a concert in 2014?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "predict": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the name and theme for all concerts and the number of singers in each concert.', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT T2.concert_name,  T2.theme,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id", "predict": "SELECT T3.concert_name,  T3.theme,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id GROUP BY T3.concert_name"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names, themes, and number of singers for every concert?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "select t2.concert_name,  t2.theme,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id", "predict": "SELECT T3.concert_name,  T2.theme,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id JOIN singer AS T3 ON T1.singer_id  =  T3.singer_id GROUP BY T2.concert_name"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List singer names and number of concerts for each singer.', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT T2.name,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "predict": "SELECT T2.Name,  count(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.Concert_ID  =  T2.Concert_ID GROUP BY T2.Name"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of the singers and number of concerts for each person?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT T2.name,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "predict": "SELECT T2.Name,  count(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.Concert_ID  =  T2.Concert_ID GROUP BY T2.Name"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List all singer names in concerts in year 2014.', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "predict": "SELECT T2.Name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.Concert_ID  =  T2.Concert_ID WHERE T1.Year  =  2014"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of the singers who performed in a concert in 2014?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "predict": "SELECT T2.Name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.Concert_ID  =  T2.Concert_ID WHERE T1.Year  =  2014"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"what is the name and nation of the singer who have a song having 'Hey' in its name?\", 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT name,  country FROM singer WHERE song_name LIKE '%Hey%'", "predict": "SELECT T1.Name,  T1.Country FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T1.Song_Name LIKE \"%Hey%\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?\", 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT name,  country FROM singer WHERE song_name LIKE '%Hey%'", "predict": "SELECT T1.Name,  T1.Country FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID JOIN concert AS T3 ON T2.Concert_ID  =  T3.Concert_ID WHERE T1.Song_Name LIKE '%Hey%'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT T2.name,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "predict": "SELECT T2.name,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_ID  =  T2.stadium_ID WHERE T1.year  =  2014 INTERSECT SELECT T2.name,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_ID  =  T2.stadium_ID WHERE T1.year  =  2015"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "SELECT T2.name,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "predict": "SELECT T2.name,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014 INTERSECT SELECT T2.name,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2015"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the number of concerts happened in the stadium with the highest capacity.', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "predict": "SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID WHERE T2.capacity  =  (SELECT max(capacity) FROM stadium)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the number of concerts that occurred in the stadium with the largest capacity?', 'db_id': 'concert_singer', 'db_schema': {'foreign key': ['concert.stadium_id->stadium.stadium_id','singer_in_concert.singer_id->singer.singer_id','singer_in_concert.concert_id->concert.concert_id'], 'primary key': ['stadium.stadium_id','singer.singer_id', 'concert.concert_id','singer_in_concert.concert_id'], 'tables': [{'table_name':'stadium', 'column_names': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average']}, {'table_name':'singer', 'column_names': ['singer id', 'name', 'country','song name','song release year', 'age', 'is male']}, {'table_name': 'concert', 'column_names': ['concert id', 'concert name', 'theme','stadium id', 'year']}, {'table_name':'singer in concert', 'column_names': ['concert id','singer id']}]}}assistant\n\n", "label": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "predict": "SELECT count(*) FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T1.capacity DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the number of pets whose weight is heavier than 10.', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT count(*) FROM pets WHERE weight  >  10", "predict": "SELECT count(*) FROM Pets WHERE Weight  >  10"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many pets have a greater weight than 10?', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT count(*) FROM pets WHERE weight  >  10", "predict": "SELECT count(*) FROM Pets WHERE weight  >  10 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the weight of the youngest dog.', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "predict": "SELECT Weight FROM Pets ORDER BY PetAge LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How much does the youngest dog weigh?', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "predict": "SELECT min(weight) FROM pets WHERE pettype  =  \"dog\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the maximum weight for each type of pet. List the maximum weight and pet type.', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT max(weight),  petType FROM pets GROUP BY petType", "predict": "SELECT max(weight),  pettype FROM Pets GROUP BY pettype"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the maximum weight and type for each type of pet.', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT max(weight),  petType FROM pets GROUP BY petType", "predict": "SELECT max(weight),  pettype FROM Pets GROUP BY pettype"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find number of pets owned by students who are older than 20.', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "predict": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID  =  T2.StuID WHERE T1.age  >  20"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many pets are owned by students that have an age greater than 20?', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "predict": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID  =  T2.StuID WHERE T1.age  >  20"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the number of dog pets that are raised by female students (with sex F).', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "predict": "SELECT count(*) FROM pets AS T1 JOIN Has_Pet AS T2 ON T1.PetID  =  T2.PetID JOIN Student AS T3 ON T2.StuID  =  T3.StuID WHERE T3.sex  =  'F' AND T1.pettype  =  \"dog\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many dog pets are raised by female students?', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "predict": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID  =  T2.StuID WHERE T1.sex  =  'F' AND T2.petid IN (SELECT T2.petid FROM pets AS T3 JOIN has_pet AS T4 ON T3.PetID  =  T4.PetID WHERE T4.StuID  =  (SELECT StuID FROM student WHERE sex  =  \"F"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the number of distinct type of pets.', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT count(DISTINCT pettype) FROM pets", "predict": "SELECT count(DISTINCT pettype) FROM petsuser"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many different types of pet are there?', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT count(DISTINCT pettype) FROM pets", "predict": "SELECT count(DISTINCT pettype) FROM pets"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the first name of students who have cat or dog pet.', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "predict": "SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pet_type  =  'cat' OR T3.pet_type  =  'dog'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the first names of every student who has a cat or dog as a pet?', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "predict": "SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID  =  T2.StuID JOIN pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the first name of students who have both cat and dog pets.', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'", "predict": "SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pet_type  =  'cat' INTERSECT SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What are the students' first names who have both cats and dogs as pets?\", 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "predict": "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'cat' INTERSECT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the major and age of students who do not have a cat pet.', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT major,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "predict": "SELECT major,  age FROM Student EXCEPT SELECT T1.major,  T1.age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.stuid  =  T2.stuid JOIN Pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pettype  =  \"cat\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What major is every student who does not own a cat as a pet, and also how old are they?', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT major,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "predict": "SELECT major,  age FROM student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID  =  T2.PetID WHERE T2.PetType  =  \"Cat\" )?>\r\n\r\nátky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the id of students who do not have a cat pet.', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "predict": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_pet"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the ids of the students who do not own cats as pets?', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "predict": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pet"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the first name and age of students who have a dog but do not have a cat as a pet.', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT T1.fname,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "predict": "SELECT T1.Fname,  T1.age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  \"dog\" EXCEPT SELECT T1.Fname,  T1.age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  = "}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the first name of every student who has a dog but does not have a cat?', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT T1.fname,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "predict": "SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pettype  =  'dog' EXCEPT SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  = "}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the type and weight of the youngest pet.', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT pettype,  weight FROM pets ORDER BY pet_age LIMIT 1", "predict": "SELECT PetType,  Weight FROM Pets ORDER BY PetAge LIMIT 1 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What type of pet is the youngest animal, and how much does it weigh?', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT pettype,  weight FROM pets ORDER BY pet_age LIMIT 1", "predict": "SELECT PetType,  Weight FROM Pets ORDER BY PetAge ASC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the id and weight of all pets whose age is older than 1.', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT petid,  weight FROM pets WHERE pet_age  >  1", "predict": "SELECT PetID,  Weight FROM Pets WHERE PetAge  >  1?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the id and weight of every pet who is older than 1?', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT petid,  weight FROM pets WHERE pet_age  >  1", "predict": "SELECT PetID,  weight FROM Pets WHERE PetAge  >  1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the average and maximum age for each type of pet.', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT avg(pet_age),  max(pet_age),  pettype FROM pets GROUP BY pettype", "predict": "SELECT avg(petage),  max(petage),  pettype FROM Pets GROUP BY pettype?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average and maximum age for each pet type?', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT avg(pet_age),  max(pet_age),  pettype FROM pets GROUP BY pettype", "predict": "SELECT avg(petage),  max(petage),  pettype FROM Pets GROUP BY pettype"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the average weight for each pet type.', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT avg(weight),  pettype FROM pets GROUP BY pettype", "predict": "SELECT avg(weight),  pettype FROM Pets GROUP BY pettype?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average weight for each type of pet?', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT avg(weight),  pettype FROM pets GROUP BY pettype", "predict": "SELECT pettype,  avg(weight) FROM Pets GROUP BY pettype"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the first name and age of students who have a pet.', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.fname,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "predict": "SELECT DISTINCT T1.fname,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pettype  =  'dog'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the different first names and ages of the students who do have pets?', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.fname,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "predict": "SELECT DISTINCT T1.Fname,  T1.age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the id of the pet owned by student whose last name is ‘Smith’.', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "predict": "SELECT T3.PetID FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID  =  T2.StuID WHERE T1.LName  =  'Smith'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What is the id of the pet owned by the student whose last name is 'Smith'?\", 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "predict": "SELECT T4.PetID FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T1.PetID  =  T3.PetID WHERE T2.LName  =  'Smith'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the number of pets for each student who has any pet and student id.', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT count(*),  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid", "predict": "SELECT count(*),  StuID FROM Has_Pet GROUP BY StuIDuserátky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'For students who have pets, how many pets does each student have? list their ids instead of names.', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "select count(*),  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid", "predict": "SELECT count(*),  StuID FROM Has_pet GROUP BY StuIDuser"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the first name and gender of student who have more than one pet.', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT T1.fname,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "predict": "SELECT DISTINCT T1.fname,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID HAVING count(*)  >  1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the first name and gender of the all the students who have more than one pet?', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT T1.fname,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "predict": "SELECT T1.fname,  T1.sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID HAVING count(*)  >  1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the last name of the student who has a cat that is age 3.', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "predict": "SELECT T3.lname FROM pets AS T1 JOIN has_pet AS T2 ON T1.petid  =  T2.petid JOIN student AS T3 ON T2.StuID  =  T3.StuID WHERE T1.pettype  =  'cat' AND T1.petage  =  3"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the last name of the student who has a cat that is 3 years old?', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "predict": "SELECT T3.lname FROM pets AS T1 JOIN Has_pet AS T2 ON T1.petid  =  T2.petid JOIN Student AS T3 ON T2.StuID  =  T3.StuID WHERE T1.pettype  =  'cat' AND T1.petage  =  3"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the average age of students who do not have any pet.', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "select avg(age) from student where stuid not in (select stuid from has_pet)", "predict": "SELECT avg(age) FROM student WHERE StuID NOT IN (SELECT StuID FROM Has_pet) CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average age for all students who do not own any pets?', 'db_id': 'pets_1', 'db_schema': {'foreign key': ['has_pet.stuid->student.stuid', 'has_pet.petid->pets.petid'], 'primary key': ['student.stuid', 'pets.petid'], 'tables': [{'table_name':'student', 'column_names': ['student id', 'last name', 'first name', 'age','sex','major', 'advisor', 'city code']}, {'table_name': 'has pet', 'column_names': ['student id', 'pet id']}, {'table_name': 'pets', 'column_names': ['pet id', 'pet type', 'pet age', 'weight']}]}}assistant\n\n", "label": "select avg(age) from student where stuid not in (select stuid from has_pet)", "predict": "SELECT avg(age) FROM student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many continents are there?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT count(*) FROM CONTINENTS;", "predict": "SELECT count(*) FROM continents"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the number of continents?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT count(*) FROM CONTINENTS;", "predict": "SELECT count(*) FROM continents"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many countries does each continent have? List the continent id, continent name and the number of countries.', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.ContId,  T1.Continent,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "predict": "SELECT T1.contid,  T1.continent,  count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.contid  =  T2.continent GROUP BY T1.contid"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'For each continent, list its id, name, and how many countries it has?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.ContId,  T1.Continent,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "predict": "SELECT T1.contid,  T1.continent,  count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.contid  =  T2.continent GROUP BY T1.contid"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many countries are listed?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT count(*) FROM COUNTRIES;", "predict": "SELECT count(*) FROM Countries"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many countries exist?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT count(*) FROM COUNTRIES;", "predict": "SELECT count(*) FROM Countries"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many models does each car maker produce? List maker full name, id and the number.', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.FullName,  T1.Id,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "predict": "SELECT T1.maker,  T1.id,  count(*) FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.maker GROUP BY T1.id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the full name of each car maker, along with its id and how many models it produces?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.FullName,  T1.Id,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "predict": "SELECT T1.maker,  T1.id,  count(*) FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.maker GROUP BY T1.id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which model of the car has the minimum horsepower?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "predict": "SELECT DISTINCT model FROM cars_data ORDER BY horsepower ASC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the model of the car with the smallest amount of horsepower?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "predict": "SELECT model FROM cars_data ORDER BY horsepower ASC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the model of the car whose weight is below the average weight.', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "predict": "SELECT model FROM car_names WHERE weight  <  (SELECT avg(weight) FROM cars_data)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the model for the car with a weight smaller than the average?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "predict": "SELECT model FROM cars_data WHERE weight  <  (SELECT avg(weight) FROM cars_data)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the name of the makers that produced some cars in the year of 1970?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "predict": "SELECT T1.maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.id JOIN car_names AS T3 ON T2.modelid  =  T3.modelid WHERE T3.year  =  1970?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name of the different car makers who produced a car in 1970?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "predict": "SELECT DISTINCT T1.maker FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.id  =  T2.id WHERE T2.year  =  \"1970\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the make and production time of the cars that were produced in the earliest year?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T2.Make,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "predict": "SELECT make,  YEAR FROM Cars_data ORDER BY YEAR ASC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the maker of the carr produced in the earliest year and what year was it?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T2.Make,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "predict": "SELECT T1.maker,  T1.year FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.id JOIN Car_Names AS T3 ON T2.modelid  =  T3.modelid WHERE T3.makeid IN (SELECT id FROM Cars_Data ORDER BY YEAR ASC LIMIT 1)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which distinct car models are the produced after 1980?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "predict": "SELECT DISTINCT model FROM car_names WHERE YEAR  >  1980"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the different models for the cards produced after 1980?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "predict": "SELECT DISTINCT T2.model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.makeid  =  T2.id WHERE T1.year  >  1980 JOIN model_list AS T3 ON T3.modelid  =  T2.model"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many car makers are there in each continents? List the continent name and the count.', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.Continent,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "predict": "SELECT T2.continent,  count(*) FROM Car_Makers AS T1 JOIN Countries AS T2 ON T1.country  =  T2.countryid GROUP BY T2.continent"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name of each continent and how many car makers are there in each one?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.Continent,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "predict": "SELECT T2.continent,  count(*) FROM Car_Makers AS T1 JOIN Countries AS T2 ON T1.country  =  T2.countryID GROUP BY T2.continent?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which of the countries has the most car makers? List the country name.', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "predict": "SELECT T1.countryname FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid  =  T2.country ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name of the country with the most car makers?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "predict": "SELECT T2.countryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.countryid GROUP BY T1.country ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many car models are produced by each maker? Only list the count and the maker full name.', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "select count(*),  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;", "predict": "SELECT count(*),  maker FROM Model_List GROUP BY maker"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the number of car models that are produced by each maker and what is the id and full name of each maker?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT Count(*),  T2.FullName,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;", "predict": "SELECT count(*),  T1.maker,  T1.fullname FROM Car_makers AS T1 JOIN Model_list AS T2 ON T1.id  =  T2.maker GROUP BY T1.maker"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the accelerate of the car make amc hornet sportabout (sw)?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "predict": "SELECT accelerate FROM cars_data WHERE YEAR LIKE \"1976%\" AND make LIKE \"amc hornet sportabout (sw)\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How much does the car accelerate that makes amc hornet sportabout (sw)?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "predict": "SELECT accelerate FROM cars_data WHERE YEAR  =  \"1977\" AND mpg  =  \"17\" AND cylinder  =  \"6\" AND WEIGHT  =  \"3050\" AND displ  =  \"4.1\" AND horsepower  =  \"140\" AND EDISPL  =  \"20\" AND make  =  \"AMC\" AND model  =  \"Hornet Sportabout (SW)\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many car makers are there in france?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "predict": "SELECT count(*) FROM car_makers WHERE country  =  \"France\" CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the number of makers of care in France?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "predict": "SELECT count(*) FROM car_makers WHERE country  =  \"France\"?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many car models are produced in the usa?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "predict": "SELECT count(*) FROM cars_data WHERE country  =  'USA'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the count of the car models produced in the United States?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "predict": "SELECT count(*) FROM cars_data WHERE DISTINCT T1.name LIKE \"%United States%\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average miles per gallon(mpg) of the cars with 4 cylinders?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "predict": "SELECT avg(mpg) FROM cars_data WHERE cylinders  =  4"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average miles per gallon of all the cards with 4 cylinders?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "predict": "SELECT avg(mpg) FROM cars_data WHERE cylinders  =  4"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the smallest weight of the car produced with 8 cylinders on 1974?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "predict": "SELECT min(weight) FROM cars_data WHERE YEAR  =  1974 AND cylinders  =  8"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the minimum weight of the car with 8 cylinders produced in 1974?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "predict": "SELECT min(weight) FROM cars_data WHERE cyl  =  8 AND YEAR  =  1974"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are all the makers and models?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT Maker,  Model FROM MODEL_LIST;", "predict": "SELECT DISTINCT T2.maker,  T2.model FROM Car_Names AS T1 JOIN Model_List AS T2 ON T1.Model  =  T2.Model"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the makers and models?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT Maker,  Model FROM MODEL_LIST;", "predict": "SELECT maker,  MODEL FROM Model_list"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the countries having at least one car maker? List name and id.', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.CountryName,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "predict": "SELECT T2.countryName,  T1.id FROM Car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.countryId GROUP BY T1.country HAVING count(*)  >=  1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names and ids of all countries with at least one car maker?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.CountryName,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "predict": "SELECT T1.countryName,  T1.countryid FROM Countries AS T1 JOIN Car_Makers AS T2 ON T1.countryid  =  T2.countryid GROUP BY T1.countryid HAVING count(*)  >=  1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the number of the cars with horsepower more than 150?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "predict": "SELECT count(*) FROM Cars_data WHERE horsepower  >  150"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the number of cars with a horsepower greater than 150?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "predict": "SELECT count(*) FROM cars_data WHERE horsepower  >  150"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average weight of cars each year?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT avg(Weight),  YEAR FROM CARS_DATA GROUP BY YEAR;", "predict": "SELECT avg(weight),  YEAR FROM cars_data GROUP BY YEAR"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average weight and year for each year?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT avg(Weight),  YEAR FROM CARS_DATA GROUP BY YEAR;", "predict": "SELECT avg(weight),  YEAR FROM Cars_data GROUP BY YEAR?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which countries in europe have at least 3 car manufacturers?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "predict": "SELECT T1.country FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid  =  T2.country GROUP BY T1.countryid HAVING count(*)  >=  3"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of all European countries with at least 3 manufacturers?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "predict": "SELECT T2.country_name FROM Car_Makers AS T1 JOIN Countries AS T2 ON T1.country  =  T2.countryid GROUP BY T1.country HAVING count(*)  >=  3"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the maximum horsepower and the make of the car models with 3 cylinders?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T2.horsepower,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "predict": "SELECT max(Horsepower),  maker FROM cars_data WHERE cylinders  =  3"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the largest amount of horsepower for the models with 3 cylinders and what make is it?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T2.horsepower,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "predict": "SELECT max(Horsepower),  maker FROM cars_data WHERE cylinders  =  3"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which model saves the most gasoline? That is to say, have the maximum miles per gallon.', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "predict": "SELECT model FROM cars_data GROUP BY model ORDER BY avg(mpg) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the car model with the highest mpg?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;", "predict": "SELECT model FROM cars_data ORDER BY mpg DESC LIMIT 1?>\r\n\r\n CLIIIK CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average horsepower of the cars before 1980?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "predict": "SELECT avg(horsepower) FROM cars_data WHERE YEAR  <  1980 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average horsepower for all cars produced before 1980?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "select avg(horsepower) from cars_data where year  <  1980;", "predict": "SELECT avg(hp) FROM cars_data WHERE YEAR  <  1980"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average edispl of the cars of model volvo?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "predict": "SELECT avg(edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id  =  T2.makeid JOIN model_list AS T3 ON T2.model  =  T3.model WHERE T3.maker  =  \"volvo\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average edispl for all volvos?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "predict": "SELECT avg(edispl) FROM cars_data WHERE model  =  \"Volvos\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the maximum accelerate for different number of cylinders?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT max(Accelerate),  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "predict": "SELECT max(acc) FROM Cars_data GROUP BY cyl"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the maximum accelerate for all the different cylinders?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT max(Accelerate),  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "predict": "SELECT max(Accelerate) FROM Cars_data"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which model has the most version(make) of cars?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "predict": "SELECT T2.maker FROM cars_data AS T1 JOIN car_names AS T2 ON T1.makeid  =  T2.makeid GROUP BY T2.maker ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What model has the most different versions?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "predict": "SELECT T2.model FROM Model_list AS T1 JOIN Car_names AS T2 ON T1.modelid  =  T2.makeid GROUP BY T2.modelid ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many cars have more than 4 cylinders?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "predict": "SELECT count(*) FROM cars_data WHERE cylinders  >  4"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the number of cars with more than 4 cylinders?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "predict": "SELECT count(*) FROM Cars_data WHERE cylinders  >  4átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'how many cars were produced in 1980?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "predict": "SELECT count(*) FROM cars_data WHERE YEAR  =  1980"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'In 1980, how many cars were made?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "predict": "SELECT count(*) FROM cars_data WHERE YEAR  =  1980"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many car models were produced by the maker with full name American Motor Company?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "predict": "SELECT count(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker WHERE T1.full_name  =  \"American Motor Company\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the number of car models created by the car maker American Motor Company?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "predict": "SELECT count(*) FROM model_list WHERE maker  =  \"American Motor Company\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which makers designed more than 3 car models? List full name and the id.', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.FullName,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "predict": "SELECT T2.maker,  T1.full_name FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.maker GROUP BY T2.maker HAVING count(*)  >  3?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names and ids of all makers with more than 3 models?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.FullName,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "predict": "SELECT T1.maker,  T1.id FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.maker GROUP BY T1.id HAVING count(*)  >  3"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "predict": "SELECT DISTINCT T1.model FROM Model_List AS T1 JOIN Car_Makers AS T2 ON T1.maker  =  T2.id WHERE T2.full_name  =  \"General Motors\" OR T1.weight  >  3500"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the different models created by either the car maker General Motors or weighed more than 3500?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "predict": "SELECT DISTINCT T1.model FROM Model_List AS T1 JOIN Car_Makers AS T2 ON T1.maker  =  T2.id WHERE T2.maker  =  \"General Motors\" OR T1.weight  >  3500"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'In which years cars were produced weighing no less than 3000 and no more than 4000?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "select distinct year from cars_data where weight between 3000 and 4000;", "predict": "SELECT YEAR FROM Cars_data WHERE Weight BETWEEN 3000 AND 4000"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "select distinct year from cars_data where weight between 3000 and 4000;", "predict": "SELECT DISTINCT YEAR FROM Cars_Data WHERE weight  <  4000 INTERSECT SELECT DISTINCT YEAR FROM Cars_Data WHERE weight  >  3000?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the horsepower of the car with the largest accelerate?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "predict": "SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the horsepower of the car with the greatest accelerate?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "predict": "SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'For model volvo, how many cylinders does the car with the least accelerate have?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "predict": "SELECT cylinders FROM cars_data WHERE accelerate  =  (SELECT min(accelerate) FROM cars_data) AND maker  =  'Volvo'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'For a volvo model, how many cylinders does the version with least accelerate have?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "predict": "SELECT cyl FROM cars_data WHERE accelerate  =  (SELECT min(accelerate) FROM cars_data WHERE model  =  'Volvo')"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many cars have a larger accelerate than the car with the largest horsepower?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "predict": "SELECT count(*) FROM cars_data WHERE accelerate  >  (SELECT max(horsepower) FROM cars_data) CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the number of cars with a greater accelerate than the one with the most horsepower?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "predict": "SELECT count(*) FROM cars_data WHERE accelerate  >  (SELECT max(horsepower) FROM cars_data)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many countries has more than 2 car makers?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "predict": "SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.countryid GROUP BY T1.country HAVING count(*)  >=  2 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the number of countries with more than 2 car makers?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "predict": "SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.countryid GROUP BY T1.country HAVING count(*)  >=  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many cars has over 6 cylinders?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "predict": "SELECT count(*) FROM cars_data WHERE cylinders  >  6"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the number of carsw ith over 6 cylinders?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "predict": "SELECT count(*) FROM Cars_data WHERE cylinders  >  6"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'For the cars with 4 cylinders, which model has the largest horsepower?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "predict": "SELECT model FROM cars_data WHERE cylinders  =  4 ORDER BY horsepower DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'For all of the 4 cylinder cars, which model has the most horsepower?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "predict": "SELECT model FROM cars_data WHERE cylinders  =  4 ORDER BY horsepower DESC LIMIT 1 CLIIIK?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T2.MakeId,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;", "predict": "SELECT T2.makeid,  T2.make FROM Cars_data AS T1 JOIN Car_Names AS T2 ON T1.id  =  T2.maker WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM Cars_data) EXCEPT SELECT T2.makeid,  T2.make FROM Cars_data AS T1 JOIN Car_Names AS T2 ON T1.id  =  T2.maker WHERE T1.cylinders  >  "}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Among the cars that do not have the minimum horsepower, what are the make ids and names of all those with less than 4 cylinders?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "select t2.makeid,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;", "predict": "SELECT T1.maker,  T1.model FROM Car_Makers AS T1 JOIN Car_Names AS T2 ON T1.id  =  T2.makeid WHERE T1.cylinders  <  4 EXCEPT SELECT maker,  model FROM Car_Names WHERE id NOT IN (SELECT id FROM Cars_Data WHERE horsepower  =  (SELECT min(horsepower) FROM Cars_Data) )"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "predict": "SELECT max(mpg) FROM cars_data WHERE cylinders  =  8 OR YEAR  <  1980"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "predict": "SELECT max(mpg) FROM cars_data WHERE cylinders  =  8 OR YEAR  <  1980"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Which models are lighter than 3500 but not built by the 'Ford Motor Company'?\", 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName!= 'Ford Motor Company';", "predict": "SELECT DISTINCT T2.model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.id  =  T2.modelid WHERE T1.weight  <  3500 EXCEPT SELECT T2.model FROM model_list AS T2 JOIN car_makers AS T3 ON T2.maker  =  T3.id WHERE T3.full_name  =  \"Ford Motor Company\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName!= 'Ford Motor Company';", "predict": "SELECT DISTINCT T2.model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.makeid  =  T2.id WHERE T1.weight  <  3500 EXCEPT SELECT DISTINCT T2.model FROM Model_list AS T1 JOIN car_makers AS T2 ON T1.maker  =  T2.id WHERE T2.maker  =  \"Ford Motor Company\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the name of the countries where there is not a single car maker?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "predict": "SELECT name FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of the countries with no car makers?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "predict": "SELECT name FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which are the car makers which produce at least 2 models and more than 3 car makers? List the id and the maker.', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "select t1.id,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;", "predict": "SELECT T2.id,  T2.maker FROM Model_list AS T1 JOIN Car_Makers AS T2 ON T1.maker  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2 INTERSECT SELECT T2.id,  T2.maker FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.maker GROUP BY T2.maker HAVING count(*)  >=  3"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.Id,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "predict": "SELECT T1.id,  T1.maker FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.id GROUP BY T1.id HAVING count(*)  >=  2 INTERSECT SELECT T1.id,  T1.maker FROM Cars_Data AS T1 JOIN Car_Names AS T2 ON T1.makeid  =  T2.makeid GROUP BY T1.id HAVING count(*)  >=  4"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?\", 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "SELECT T1.countryId,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "predict": "SELECT T1.countryid,  T2.country_name FROM Car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.countryid GROUP BY T1.country HAVING count(*)  >  3 UNION SELECT T1.countryid,  T2.country_name FROM Car_Names AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.modelid WHERE T2.model  =  'fiat'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the ids and names of all countries that either have more than 3 car makers or produce fiat model?', 'db_id': 'car_1', 'db_schema': {'foreign key': ['countries.continent->continents.contid', 'car_makers.country->countries.countryid','model_list.maker->car_makers.id', 'car_names.model->model_list.model', 'cars_data.id->car_names.makeid'], 'primary key': ['continents.contid', 'countries.countryid', 'car_makers.id','model_list.modelid', 'car_names.makeid', 'cars_data.id'], 'tables': [{'table_name': 'continents', 'column_names': ['cont id', 'continent']}, {'table_name': 'countries', 'column_names': ['country id', 'country name', 'continent']}, {'table_name': 'car makers', 'column_names': ['id','maker', 'full name', 'country']}, {'table_name':'model list', 'column_names': ['model id','maker','model']}, {'table_name': 'car names', 'column_names': ['make id','model','make']}, {'table_name': 'cars data', 'column_names': ['id','mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}]}}assistant\n\n", "label": "select t1.countryid,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';", "predict": "SELECT T1.countryid,  T1.countryname FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid  =  T2.countryid GROUP BY T1.countryid HAVING count(*)  >  3 UNION SELECT T1.countryid,  T1.countryname FROM countries AS T1 JOIN car_names AS T2 ON T1.countryid  =  T2.id JOIN model_list AS T3 ON T3.maker  =  T2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which country does Airline \"JetBlue Airways\" belong to?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "predict": "SELECT country FROM airlines WHERE airlineName  =  \"JetBlue Airways\"?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What country is Jetblue Airways affiliated with?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "predict": "SELECT country FROM airlines WHERE airlineName  =  \"Jetblue Airways\"?>\r\n\r\n CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the abbreviation of Airline \"JetBlue Airways\"?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "predict": "SELECT Abbreviation FROM airlines WHERE airlineName  =  \"JetBlue Airways\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which abbreviation corresponds to Jetblue Airways?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "predict": "SELECT abbreviation FROM airlines WHERE airlineName  =  \"Jetblue Airways\"?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List all airline names and their abbreviations in \"USA\".', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT Airline,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "predict": "SELECT airlineName,  abbreviation FROM airlines WHERE country  =  'USA'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the airline names and abbreviations for airlines in the USA?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT Airline,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "predict": "SELECT airlineName,  abbreviation FROM airlines WHERE country  =  'USA'?>\r\n\r\n CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the airport code and name in the city of Anthony.', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT AirportCode,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "predict": "SELECT airportcode,  airportname FROM airports WHERE city  =  'Anthony' CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the airport code and airport name corresonding to the city Anthony.', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT AirportCode,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "predict": "SELECT airportcode,  airportname FROM airports WHERE city  =  'Anthony'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many airlines do we have?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM AIRLINES", "predict": "SELECT count(*) FROM airlines"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the total number of airlines?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM AIRLINES", "predict": "SELECT count(*) FROM airlines"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many airports do we have?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM AIRPORTS", "predict": "SELECT count(*) FROM airports?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the number of  airports.', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM AIRPORTS", "predict": "SELECT count(*) FROM airports"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many flights do we have?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM FLIGHTS", "predict": "SELECT count(*) FROM Flights?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the number of flights.', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM FLIGHTS", "predict": "SELECT count(*) FROM Flights"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Which airline has abbreviation 'UAL'?\", 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "predict": "SELECT airlineName FROM airlines WHERE abbreviation  =  'UAL'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Give the airline with abbreviation 'UAL'.\", 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "predict": "SELECT abbreviation FROM airlines WHERE airlineName  =  \"United Airlines\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many airlines are from USA?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "predict": "SELECT count(*) FROM airlines WHERE country  =  'USA'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the number of airlines in the USA.', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "predict": "SELECT count(*) FROM airlines WHERE country  =  'United States'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which city and country is the Alton airport at?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT City,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "predict": "SELECT city,  country FROM airports WHERE airportcode  =  'ALTON' CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the city and country for the Alton airport.', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT City,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "predict": "SELECT city,  country FROM airports WHERE airportcode  =  \"ALTON\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What is the airport name for airport 'AKO'?\", 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "predict": "SELECT airportname FROM airports WHERE airportcode  =  'AKO'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Return the name of the airport with code 'AKO'.\", 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "predict": "SELECT airportName FROM airports WHERE airportCode  =  'AKO'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What are airport names at City 'Aberdeen'?\", 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "predict": "SELECT airportname FROM airports WHERE city  =  'Aberdeen'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of airports in Aberdeen?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "predict": "SELECT airportName FROM airports WHERE city  =  'Aberdeen'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"How many flights depart from 'APG'?\", 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "predict": "SELECT count(*) FROM flights WHERE sourceairport  =  'APG'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Count the number of flights departing from 'APG'.\", 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "predict": "SELECT count(*) FROM flights WHERE sourceairport  =  'APG'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many flights have destination ATO?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "predict": "SELECT count(*) FROM flights WHERE destairport  =  'ATO'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of flights into ATO.', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "predict": "SELECT count(*) FROM flights WHERE sourceairport  =  'ATO' CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many flights depart from City Aberdeen?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "predict": "SELECT count(*) FROM flights WHERE sourceairport  =  \"Aberdeen\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the number of flights departing from Aberdeen.', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "predict": "SELECT count(*) FROM flights WHERE sourceairport  =  \"Aberdeen\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many flights arriving in Aberdeen city?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "predict": "SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.city  =  'Aberdeen'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the number of flights arriving in Aberdeen.', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "predict": "SELECT count(*) FROM flights WHERE destairport  =  'Aberdeen'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?\", 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "predict": "SELECT count(*) FROM flights WHERE sourceairport  =  'Aberdeen' AND destairport  =  'Ashley'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many flights fly from Aberdeen to Ashley?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "predict": "SELECT count(*) FROM flights WHERE sourceairport  =  \"Aberdeen\" AND destairport  =  \"Ashley\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"How many flights does airline 'JetBlue Airways' have?\", 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "predict": "SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.airline  =  T2.uid WHERE T2.abbreviation  =  'JetBlue Airways'?>\r\n\r\n?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the number of Jetblue Airways flights.', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "predict": "SELECT count(*) FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T1.abbreviation  =  'Jetblue Airways'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"How many 'United Airlines' flights go to Airport 'ASY'?\", 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "predict": "SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T1.airline  =  \"United Airlines\" AND T2.airportname  =  \"ASY\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of United Airlines flights arriving in ASY Airport.', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "predict": "SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.airportname  =  \"ASY\" AND T1.airline  =  \"United Airlines\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"How many 'United Airlines' flights depart from Airport 'AHD'?\", 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "predict": "SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.sourceairport  =  T2.airportcode WHERE T2.airportname  =  'AHD' AND T1.airline  =  'United Airlines'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the number of United Airlines flights leaving from AHD Airport.', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "predict": "SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport WHERE T1.city  =  \"Ahd\" AND T2.airline  =  \"united\" CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"How many United Airlines flights go to City 'Aberdeen'?\", 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "predict": "SELECT count(*) FROM flights WHERE airline  =  \"United Airlines\" AND destairport  =  \"Aberdeen\" CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of United Airlines flights that arrive in Aberdeen.', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "predict": "SELECT count(*) FROM flights WHERE airline  =  \"United\" AND destairport  =  \"Aberdeen\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which city has most number of arriving flights?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.city,  T1.airportcode FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.destairport GROUP BY T1.airportcode ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which city has the most frequent destination airport?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T2.city FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode GROUP BY T1.destairport ORDER BY count(*) DESC LIMIT 1?>\r\n\r\n?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which city has most number of departing flights?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.city,  T1.destairport FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.destairport GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which city is the most frequent source airport?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.city FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport GROUP BY T2.sourceairport ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the code of airport that has the highest number of flights?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.airportcode FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport GROUP BY T2.sourceairport ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the airport code of the airport with the most flights?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.airportcode FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.destairport GROUP BY T2.destairport ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the code of airport that has fewest number of flights?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "predict": "SELECT destairport FROM flights GROUP BY destairport ORDER BY count(*) LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the code of the airport with the least flights.', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "predict": "SELECT destairport FROM flights GROUP BY destairport ORDER BY count(*) LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which airline has most number of flights?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.airline FROM airlines AS T1 JOIN flights AS T2 ON T1.UID  =  T2.airline GROUP BY T2.airline ORDER BY count(*) DESC LIMIT 1 CLIIIK?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What airline serves the most flights?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T2.airlineName,  COUNT(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.airline  =  T2.uid GROUP BY T1.airline ORDER BY COUNT(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the abbreviation and country of the airline that has fewest number of flights?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.Abbreviation,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "predict": "SELECT T1.abbreviation,  T1.country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline GROUP BY T2.airline ORDER BY count(*) LIMIT 1 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the abbreviation of the airilne has the fewest flights and what country is it in?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.Abbreviation,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "predict": "SELECT T1.abbreviation,  T1.country FROM airlines AS T1 JOIN flights AS T2 ON T1.UID  =  T2.airline GROUP BY T1.abbreviation ORDER BY count(*) LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What are airlines that have some flight departing from airport 'AHD'?\", 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "predict": "SELECT T1.airlineName FROM airlines AS T1 JOIN flights AS T2 ON T1.UID  =  T2.airline WHERE T2.sourceairport  =  'AHD'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which airlines have a flight with source airport AHD?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "predict": "SELECT DISTINCT T2.airline FROM flights AS T1 JOIN airlines AS T2 ON T1.airline  =  T2.uid WHERE T1.sourceairport  =  \"AHD\"átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What are airlines that have flights arriving at airport 'AHD'?\", 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "predict": "SELECT DISTINCT T2.airlineName FROM flights AS T1 JOIN airlines AS T2 ON T1.airline  =  T2.uid WHERE T1.destairport  =  'AHD'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which airlines have a flight with destination airport AHD?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "predict": "SELECT DISTINCT T2.airline FROM flights AS T1 JOIN airlines AS T2 ON T1.airline  =  T2.uid WHERE T1.destairport  =  'AHD'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Find all airlines that have flights from both airports 'APG' and 'CVO'.\", 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "predict": "SELECT DISTINCT T1.airlineName FROM airlines AS T1 JOIN flights AS T2 ON T1.UID  =  T2.airline WHERE T2.sourceairport  =  'APG' INTERSECT SELECT DISTINCT T1.airlineName FROM airlines AS T1 JOIN flights AS T2 ON T1.UID  =  T2.airline WHERE T2.destairport  =  'CVO'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which airlines have departing flights from both APG and CVO airports?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "predict": "SELECT T1.airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.sourceairport  =  \"APG\" INTERSECT SELECT T1.airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.sourceairport  =  \"CVO\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Find all airlines that have flights from airport 'CVO' but not from 'APG'.\", 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "predict": "SELECT DISTINCT T1.airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.destairport  =  'CVO' EXCEPT SELECT T1.airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.destairport  =  'APG'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which airlines have departures from CVO but not from APG airports?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "predict": "SELECT T1.airline FROM airlines AS T1 JOIN flights AS T2 ON T1.UID  =  T2.airline WHERE T2.destairport  =  'CVO' EXCEPT SELECT T1.airline FROM airlines AS T1 JOIN flights AS T2 ON T1.UID  =  T2.airline WHERE T2.destairport  =  'APG'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find all airlines that have at least 10 flights.', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "predict": "SELECT T2.airlineName FROM flights AS T1 JOIN airlines AS T2 ON T1.airline  =  T2.UID GROUP BY T1.airline HAVING count(*)  >=  10"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which airlines have at least 10 flights?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "predict": "SELECT T2.abbreviation FROM flights AS T1 JOIN airlines AS T2 ON T1.airline  =  T2.abbreviation GROUP BY T1.airline HAVING count(*)  >=  10"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find all airlines that have fewer than 200 flights.', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "predict": "SELECT T1.airlineName FROM airlines AS T1 JOIN flights AS T2 ON T1.UID  =  T2.airline WHERE T2.flightscount  <  200"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which airlines have less than 200 flights?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "predict": "SELECT T2.abb FROM flights AS T1 JOIN airlines AS T2 ON T1.abb  =  T2.abb GROUP BY T1.abb HAVING count(*)  <  200?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are flight numbers of Airline \"United Airlines\"?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "predict": "SELECT DISTINCT flightnumber FROM flights WHERE airline  =  \"United Airlines\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which flight numbers correspond to United Airlines flights?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "predict": "SELECT flightnumber FROM flights WHERE airline  =  'United'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are flight numbers of flights departing from Airport \"APG\"?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "predict": "SELECT flightnumber FROM flights WHERE sourceairport  =  \"APG\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the flight numbers of flights leaving from APG.', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "predict": "SELECT flightnumber FROM flights WHERE sourceairport  =  'APG'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are flight numbers of flights arriving at Airport \"APG\"?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "predict": "SELECT flightnumber FROM flights WHERE destairport  =  \"APG\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the flight numbers of flights landing at APG.', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "predict": "SELECT flightnumber FROM flights WHERE destairport  =  'APG'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are flight numbers of flights departing from City \"Aberdeen \"?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "predict": "SELECT flightnumber FROM flights WHERE sourceairport  =  \"Aberdeen\"?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the flight numbers of flights leaving from Aberdeen.', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "predict": "SELECT flightnumber FROM flights WHERE sourceairport  =  'Aberdeen'átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are flight numbers of flights arriving at City \"Aberdeen\"?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "predict": "SELECT flightnumber FROM flights WHERE destairport  =  'Aberdeen'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the flight numbers of flights arriving in Aberdeen.', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "predict": "SELECT flightnumber FROM flights WHERE destairport  =  'Aberdeen' CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the number of flights landing in the city of Aberdeen or Abilene.', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "predict": "SELECT count(*) FROM flights WHERE destairport  =  'Aberdeen' OR destairport  =  'Abilene'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many flights land in Aberdeen or Abilene?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "predict": "SELECT count(*) FROM flights WHERE destairport  =  'Aberdeen' OR destairport  =  'Abilene'?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the name of airports which do not have any flight in and out.', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "predict": "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT destinationairport FROM flights UNION SELECT sourceairport FROM flights)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which airports do not have departing or arriving flights?', 'db_id': 'flight_2', 'db_schema': {'foreign key': ['flights.destairport->airports.airportcode', 'flights.sourceairport->airports.airportcode'], 'primary key': ['airlines.uid', 'airports.airportcode', 'flights.airline'], 'tables': [{'table_name': 'airlines', 'column_names': ['airline id', 'airline name', 'abbreviation', 'country']}, {'table_name': 'airports', 'column_names': ['city', 'airport code', 'airport name', 'country', 'country abbrev']}, {'table_name': 'flights', 'column_names': ['airline', 'flight number','source airport', 'destination airport']}]}}assistant\n\n", "label": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "predict": "SELECT airportcode FROM airports EXCEPT (SELECT DISTINCT sourceairport FROM flights UNION DISTINCT destinationairport FROM flights)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many employees are there?', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT count(*) FROM employee", "predict": "SELECT count(*) FROM employeequerySELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employee"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of employees', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT count(*) FROM employee", "predict": "SELECT count(*) FROM employeeuser.Note that SELECT count(*) FROM employee; will return the count of the entire table, which includes the names and ages."}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Sort employee names by their age in ascending order.', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT name FROM employee ORDER BY age", "predict": "SELECT name FROM employee ORDER BY age ASCstudent CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the names of employees and sort in ascending order of age.', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT name FROM employee ORDER BY age", "predict": "SELECT name FROM employee ORDER BY age ASC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the number of employees from each city?', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT count(*),  city FROM employee GROUP BY city", "predict": "SELECT city,  count(*) FROM employee GROUP BY cityuser"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of employees for each city.', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT count(*),  city FROM employee GROUP BY city", "predict": "SELECT city,  count(*) FROM employee GROUP BY cityQUEST"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which cities do more than one employee under age 30 come from?', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "predict": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING COUNT(*)  >  1 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the cities that have more than one employee under age 30.', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "predict": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the number of shops in each location.', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT count(*),  LOCATION FROM shop GROUP BY LOCATION", "predict": "SELECT LOCATION,  count(*) FROM shop GROUP BY LOCATIONQUESSSELECT LOCATION,  count(*) FROM shop GROUP BY LOCATIONeditorSELECT LOCATION,  count(*) FROM shop GROUP BY LOCATIONSELECT LOCATION,  count(*) FROM shop GROUP BY LOCATION"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many shops are there in each location?', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT count(*),  LOCATION FROM shop GROUP BY LOCATION", "predict": "SELECT LOCATION,  COUNT(*) FROM shop GROUP BY LOCATIONQUESSSELECT LOCATION,  COUNT(*) FROM shop GROUP BY LOCATIONLOGSELECT LOCATION,  COUNT(*) FROM shop GROUP BY LOCATIONSELECT LOCATION,  COUNT(*) FROM shop GROUP BY LOCATION"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the manager name and district of the shop whose number of products is the largest.', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT manager_name,  district FROM shop ORDER BY number_products DESC LIMIT 1", "predict": "SELECT District,  Manager_name FROM shop ORDER BY Number_products DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the manager name and district of the shop that sells the largest number of products?', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT manager_name,  district FROM shop ORDER BY number_products DESC LIMIT 1", "predict": "SELECT Manager_name,  District FROM shop ORDER BY Number_products DESC LIMIT 1átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'find the minimum and maximum number of products of all stores.', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT min(Number_products),  max(Number_products) FROM shop", "predict": "SELECT min(Number_products),  max(Number_products) FROM shop"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the minimum and maximum number of products across all the shops?', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT min(Number_products),  max(Number_products) FROM shop", "predict": "SELECT min(Number_products),  max(Number_products) FROM shop"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the name, location and district of all shops in descending order of number of products.', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT name,  LOCATION,  district FROM shop ORDER BY number_products DESC", "predict": "SELECT name,  LOCATION,  District FROM shop ORDER BY Number_products DESC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Sort all the shops by number products in descending order, and return the name, location and district of each shop.', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT name,  LOCATION,  district FROM shop ORDER BY number_products DESC", "predict": "SELECT name,  LOCATION,  district FROM shop ORDER BY Number_products DESC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the names of stores whose number products is more than the average number of products.', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "predict": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)QUERY"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Which shops' number products is above the average? Give me the shop names.\", 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "predict": "SELECT name FROM shop WHERE Number_products  >  (SELECT avg(Number_products) FROM shop)query"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'find the name of employee who was awarded the most times in the evaluation.', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T2.name FROM evaluation AS T1 JOIN employee AS T2 ON T1.employee_id  =  T2.employee_id GROUP BY T1.employee_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which employee received the most awards in evaluations? Give me the employee name.', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id GROUP BY T1.employee_id ORDER BY count(*) DESC LIMIT 1 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the name of the employee who got the highest one time bonus.', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "predict": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id ORDER BY T2.bonus DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which employee received the biggest bonus? Give me the employee name.', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "predict": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id = T2.employee_id ORDER BY bonus DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the names of employees who never won any award in the evaluation.', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "predict": "SELECT name FROM employee EXCEPT SELECT T2.name FROM evaluation AS T1 JOIN employee AS T2 ON T1.employee_id  =  T2.employee_idquery"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of the employees who never received any evaluation?', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "predict": "SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)SELECT name FROM employee WHERE employee_id NOT IN ("}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name of the shop that is hiring the largest number of employees?', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.shop_id ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which shop has the most employees? Give me the shop name.', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT t1.name FROM shop AS t1 JOIN hiring AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.shop_id ORDER BY count(*) DESC LIMIT 1 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the name of the shops that do not hire any employee.', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "predict": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)user"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which shops run with no employees? Find the shop names', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "predict": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)user"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the number of employees hired in each shop; show the shop name as well.', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT count(*),  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "predict": "SELECT T3.name,  count(*) FROM hiring AS T1 JOIN employee AS T2 ON T1.employee_id  =  T2.employee_id JOIN shop AS T3 ON T1.shop_id  =  T3.shop_id GROUP BY T1.shop_idreference ONLINE_JUDGEcreatorSELECT T3.name,  count(*) FROM hiring AS T1 JOIN employee AS T2 ON T1.employee_id  =  T2.employee_id JOIN shop AS T3 ON T"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'For each shop, return the number of employees working there and the name of the shop.', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT count(*),  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "predict": "SELECT T2.number_products,  T1.name,  count(*) FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.name"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is total bonus given in all evaluations?', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT sum(bonus) FROM evaluation", "predict": "SELECT sum(bonus) FROM evaluation"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the total amount of bonus given in all the evaluations.', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT sum(bonus) FROM evaluation", "predict": "SELECT sum(bonus) FROM evaluation"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give me all the information about hiring.', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT * FROM hiring", "predict": "SELECT * FROM hiringuser"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is all the information about hiring?', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT * FROM hiring", "predict": "SELECT * FROM hiringuser"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which district has both stores with less than 3000 products and stores with more than 10000 products?', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "predict": "SELECT District FROM shop WHERE Number_products  <  3000 INTERSECT SELECT District FROM shop WHERE Number_products  >  10000"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "predict": "SELECT District FROM shop WHERE Number_products  <  3000 INTERSECT SELECT District FROM shop WHERE Number_products  >  10000 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many different store locations are there?', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT count(DISTINCT LOCATION) FROM shop", "predict": "SELECT count(DISTINCT LOCATION) FROM shop"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of distinct store locations.', 'db_id': 'employee_hire_evaluation', 'db_schema': {'foreign key': ['hiring.employee_id->employee.employee_id', 'hiring.shop_id->shop.shop_id', 'evaluation.employee_id->employee.employee_id'], 'primary key': ['employee.employee_id','shop.shop_id', 'hiring.employee_id', 'evaluation.employee_id'], 'tables': [{'table_name': 'employee', 'column_names': ['employee id', 'name', 'age', 'city']}, {'table_name':'shop', 'column_names': ['shop id', 'name', 'location', 'district', 'number products','manager name']}, {'table_name': 'hiring', 'column_names': ['shop id', 'employee id','start from', 'is full time']}, {'table_name': 'evaluation', 'column_names': ['employee id', 'year awarded', 'bonus']}]}}assistant\n\n", "label": "SELECT count(DISTINCT LOCATION) FROM shop", "predict": "SELECT count(DISTINCT LOCATION) FROM shopSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECT"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many documents do we have?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT count(*) FROM Documents", "predict": "SELECT count(*) FROM Documentsassistant"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of documents.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT count(*) FROM Documents", "predict": "SELECT count(*) FROM Documents?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List document IDs, document names, and document descriptions for all documents.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT document_id,  document_name,  document_description FROM Documents", "predict": "SELECT document_id,  document_name,  document_description FROM Documents"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the ids, names, and descriptions for all documents?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT document_id,  document_name,  document_description FROM Documents", "predict": "SELECT document_id,  document_name,  document_description FROM Documents"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What is the document name and template id for document with description with the letter 'w' in it?\", 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT document_name,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "predict": "SELECT document_name,  template_id FROM Documents WHERE document_description LIKE '%w%'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the names and template ids for documents that contain the letter w in their description.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT document_name,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "predict": "SELECT document_name,  template_id FROM Documents WHERE document_description LIKE \"%w%\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the document id, template id and description for document named \"Robbin CV\"?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT document_id,  template_id,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "predict": "SELECT document_id,  template_id,  document_description FROM Documents WHERE document_name  =  \"Robbin CV\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the document id, template id, and description for the document with the name Robbin CV.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT document_id,  template_id,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "predict": "SELECT document_id,  template_id,  document_description FROM Documents WHERE document_name  =  \"Robbin CV\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many different templates do all document use?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT count(DISTINCT template_id) FROM Documents", "predict": "SELECT count(DISTINCT template_id) FROM Documents"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of different templates used for documents.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT count(DISTINCT template_id) FROM Documents", "predict": "SELECT count(DISTINCT template_type_code) FROM Documents"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"How many documents are using the template with type code 'PPT'?\", 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "predict": "SELECT count(*) FROM documents AS T1 JOIN templates AS T2 ON T1.template_id  =  T2.template_id WHERE T2.template_type_code  =  'PPT'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of documents that use the PPT template type.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "predict": "SELECT count(*) FROM documents AS T1 JOIN templates AS T2 ON T1.template_id  =  T2.template_id WHERE T2.template_type_code  =  \"PPT\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show all template ids and number of documents using each template.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_id,  count(*) FROM Documents GROUP BY template_id", "predict": "SELECT template_id,  count(*) FROM Documents GROUP BY template_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are all different template ids used for documents, and how many times were each of them used?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_id,  count(*) FROM Documents GROUP BY template_id", "predict": "SELECT template_id,  count(*) FROM Documents GROUP BY template_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the id and type code for the template used by the most documents?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT T1.template_id,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.template_type_code,  T1.template_id FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the id and type code of the template that is used for the greatest number of documents.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT T1.template_id,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.template_type_code,  T1.template_type_description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN Documents AS T3 ON T3.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show ids for all templates that are used by more than one document.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "predict": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the template ids of any templates used in more than a single document?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "predict": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show ids for all templates not used by any document.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "predict": "SELECT template_id FROM templates EXCEPT SELECT template_id FROM documents?>\r\n\r\n CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the ids for templates that are not used in any documents?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "predict": "SELECT template_id FROM templates EXCEPT SELECT template_id FROM documents"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many templates do we have?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT count(*) FROM Templates", "predict": "SELECT count(*) FROM Ref_Template_Typesassistant"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of templates.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT count(*) FROM Templates", "predict": "SELECT count(*) FROM Ref_Template_Types;"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show template ids, version numbers, and template type codes for all templates.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_id,  version_number,  template_type_code FROM Templates", "predict": "SELECT template_id,  version_number,  template_type_code FROM Templates CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the ids, version numbers, and type codes for each template?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_id,  version_number,  template_type_code FROM Templates", "predict": "SELECT template_id,  version_number,  template_type_code FROM Templatesátky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show all distinct template type codes for all templates.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT DISTINCT template_type_code FROM Templates", "predict": "SELECT DISTINCT template_type_code FROM Templates?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the different template type codes?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT DISTINCT template_type_code FROM Templates", "predict": "SELECT DISTINCT template_type_code FROM Templates"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the ids of templates with template type code PP or PPT?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "predict": "SELECT template_id FROM templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the ids of templates that have the code PP or PPT.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "predict": "SELECT template_id FROM templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\" CLIIIKátky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many templates have template type code CV?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "predict": "SELECT count(*) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T1.template_type_description  =  \"CV\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of templates of the type CV.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "predict": "SELECT count(*) FROM Ref_Template_Types WHERE template_type_description  =  'CV'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the version number and template type code for the template with version number later than 5?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT version_number,  template_type_code FROM Templates WHERE version_number  >  5", "predict": "SELECT template_type_code,  version_number FROM Templates WHERE version_number  >  5átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the version numbers and template type codes of templates with a version number greater than 5.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT version_number,  template_type_code FROM Templates WHERE version_number  >  5", "predict": "SELECT template_type_code,  version_number FROM Templates WHERE version_number  >  5"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show all template type codes and number of templates for each.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_type_code,  count(*) FROM Templates GROUP BY template_type_code", "predict": "SELECT template_type_code,  count(*) FROM Templates GROUP BY template_type_code CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the different template type codes, and how many templates correspond to each?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_type_code,  count(*) FROM Templates GROUP BY template_type_code", "predict": "SELECT template_type_code,  count(*) FROM Templates GROUP BY template_type_code?>\r\n\r\n?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which template type code has most number of templates?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the type code of the template type that the most templates belong to.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show all template type codes with less than three templates.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "predict": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3?>\r\n\r\nátky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the codes of template types that have fewer than 3 templates?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "predict": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What the smallest version number and its template type code?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT min(Version_Number),  template_type_code FROM Templates", "predict": "SELECT min(version_number),  template_type_code FROM Templates GROUP BY template_type_code"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the lowest version number, along with its corresponding template type code.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT min(Version_Number),  template_type_code FROM Templates", "predict": "SELECT min(version_number),  template_type_code FROM Templates GROUP BY template_type_code"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the template type code of the template used by document with the name \"Data base\"?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "predict": "SELECT T2.template_type_code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id WHERE T1.document_name  =  \"Data base\" CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the template type code of the template that is used by a document named Data base.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "predict": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show all document names using templates with template type code BK.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "predict": "SELECT T1.document_name FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id JOIN Ref_Template_Types AS T3 ON T2.template_type_code  =  T3.template_type_code WHERE T3.template_type_description  =  'Book'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of documents that use templates with the code BK?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "predict": "SELECT T1.document_name FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id WHERE T2.template_type_code  =  \"BK\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show all template type codes and the number of documents using each type.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT T1.template_type_code,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "predict": "SELECT template_type_code,  count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY template_type_code"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the different template type codes, and how many documents use each type?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT T1.template_type_code,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "predict": "SELECT template_type_code,  count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY template_type_code"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which template type code is used by most number of documents?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT template_type_code FROM documents GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the code of the template type that is most commonly used in documents.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.template_type_code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show all template type codes that are not used by any document.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "predict": "SELECT template_type_code FROM Ref_Template_Types EXCEPT SELECT template_type_code FROM Templates CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the codes of template types that are not used for any document?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "predict": "SELECT template_type_code FROM Ref_Template_Types EXCEPT SELECT template_type_code FROM Templates GROUP BY template_type_code"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show all template type codes and descriptions.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_type_code,  template_type_description FROM Ref_template_types", "predict": "SELECT template_type_code,  template_type_description FROM Ref_Template_Types"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the type codes and descriptions for all template types?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_type_code,  template_type_description FROM Ref_template_types", "predict": "SELECT template_type_code,  template_type_description FROM Ref_Template_Types"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the template type descriptions for template type code \"AD\".', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "predict": "SELECT template_type_description FROM Ref_Template_Types WHERE template_type_code  =  \"AD\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the template type description of the template type with the code AD.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "predict": "SELECT template_type_description FROM Ref_Template_Types WHERE template_type_code  =  \"AD\"?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the template type code for template type description \"Book\".', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "predict": "SELECT template_type_code FROM Ref_Template_Types WHERE template_type_description  =  \"Book\" CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the type code of the template type with the description \"Book\".', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "predict": "SELECT template_type_code FROM Ref_Template_Types WHERE template_type_description  =  \"Book\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the distinct template type descriptions for the templates ever used by any document?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "predict": "SELECT DISTINCT T1.template_type_description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN Documents AS T3 ON T3.template_id  =  T2.template_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the different descriptions for templates that have been used in a document.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "predict": "SELECT DISTINCT T2.template_type_description FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the template ids with template type description \"Presentation\".', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "predict": "SELECT template_id FROM templates AS t JOIN Ref_Template_Types AS rt ON t.template_type_code  =  rt.template_type_code WHERE rt.template_type_description  =  \"Presentation\" CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Return the ids corresponding to templates with the description 'Presentation'.\", 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "predict": "SELECT template_id FROM documents AS T1 JOIN templates AS T2 ON T1.template_id  =  T2.template_id JOIN Ref_Template_Types AS T3 ON T2.template_type_code  =  T3.template_type_code WHERE T3.template_type_description  =  'Presentation'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many paragraphs in total?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT count(*) FROM Paragraphs", "predict": "SELECT count(*) FROM paragraphs"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of paragraphs.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT count(*) FROM Paragraphs", "predict": "SELECT count(*) FROM Paragraphs"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"How many paragraphs for the document with name 'Summer Show'?\", 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "predict": "SELECT count(*) FROM paragraphs AS t1 JOIN documents AS t2 ON t1.document_id  =  t2.document_id WHERE t2.document_name  =  'Summer Show'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Count the number of paragraphs in the document named 'Summer Show'.\", 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "predict": "SELECT count(*) FROM paragraphs AS T1 JOIN documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Summer Show\" CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Show paragraph details for paragraph with text 'Korea '.\", 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "select other_details from paragraphs where paragraph_text like 'korea'", "predict": "SELECT other_details FROM Paragrahs WHERE paragraph_text  =  'Korea'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What are the details for the paragraph that includes the text 'Korea '?\", 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "select other_details from paragraphs where paragraph_text like 'korea'", "predict": "SELECT other_details FROM Paragraphs WHERE paragraph_text LIKE '%Korea%'?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Show all paragraph ids and texts for the document with name 'Welcome to NY'.\", 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT T1.paragraph_id,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "predict": "SELECT paragraph_id,  paragraph_text FROM Paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name  =  \"Welcome to NY\")"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?\", 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT T1.paragraph_id,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "predict": "SELECT T1.paragraph_ID,  T2.paragraph_Text FROM Paragrahs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Welcome to NY'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show all paragraph texts for the document \"Customer reviews\".', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "predict": "SELECT paragraph_text FROM Paragraghs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE document_name  =  \"Customer reviews\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What are the paragraph texts for the document with the name 'Customer reviews'?\", 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "predict": "SELECT paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE document_name  =  \"Customer reviews\" CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show all document ids and the number of paragraphs in each document. Order by document id.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT document_id,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "predict": "SELECT document_id,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT document_id,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "predict": "SELECT document_id,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show all document ids, names and the number of paragraphs in each document.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT T1.document_id,  T2.document_name,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "predict": "SELECT T1.document_id,  T2.document_name,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the ids and names of each document, as well as the number of paragraphs in each?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT T1.document_id,  T2.document_name,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "predict": "SELECT T1.document_id,  T1.document_name,  count(*) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List all document ids with at least two paragraphs.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "predict": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the ids of documents that have 2 or more paragraphs?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "predict": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2 CLIIIK?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the document id and name with greatest number of paragraphs?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT T1.document_id,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT t1.document_id,  t2.document_name FROM Paragraphs AS t1 JOIN Documents AS t2 ON t1.document_id  =  t2.document_id GROUP BY t1.document_id ORDER BY count(*) DESC LIMIT 1átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the id and name of the document with the most paragraphs.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT T1.document_id,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT t1.document_id,  t1.document_name FROM Documents AS t1 JOIN Paragraphs AS t2 ON t1.document_id  =  t2.document_id GROUP BY t1.document_id ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the document id with least number of paragraphs?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "predict": "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the id of the document with the fewest paragraphs.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "predict": "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the document id with 1 to 2 paragraphs?', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "predict": "SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*)  >=  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the ids of documents that have between one and two paragraphs.', 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "predict": "SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*)  >=  1 AND count(*)  <=  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Show the document id with paragraph text 'Brazil' and 'Ireland'.\", 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "predict": "SELECT document_id FROM Paragraphs WHERE Paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE Paragraph_text  =  'Ireland'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?\", 'db_id': 'cre_Doc_Template_Mgt', 'db_schema': {'foreign key': ['templates.template_type_code->ref_template_types.template_type_code', 'documents.template_id->templates.template_id', 'paragraphs.document_id->documents.document_id'], 'primary key': ['ref_template_types.template_type_code', 'templates.template_id', 'documents.document_id', 'paragraphs.paragraph_id'], 'tables': [{'table_name':'reference template types', 'column_names': ['template type code', 'template type description']}, {'table_name': 'templates', 'column_names': ['template id','version number', 'template type code', 'date effective from', 'date effective to', 'template details']}, {'table_name': 'documents', 'column_names': ['document id', 'template id', 'document name', 'document description', 'other details']}, {'table_name': 'paragraphs', 'column_names': ['paragraph id', 'document id', 'paragraph text', 'other details']}]}}assistant\n\n", "label": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "predict": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many teachers are there?', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT count(*) FROM teacher", "predict": "SELECT count(*) FROM teacheruser"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the total count of teachers?', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT count(*) FROM teacher", "predict": "SELECT count(*) FROM teacherSELECT FROM teacher"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the names of teachers in ascending order of age.', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT Name FROM teacher ORDER BY Age ASC", "predict": "SELECT Name FROM teacher ORDER BY Age ASC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of the teachers ordered by ascending age?', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT Name FROM teacher ORDER BY Age ASC", "predict": "SELECT Name FROM teacher ORDER BY Age ASC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the age and hometown of teachers?', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT Age,  Hometown FROM teacher", "predict": "SELECT age,  hometown FROM teacher"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the age and hometown of every teacher?', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT Age,  Hometown FROM teacher", "predict": "SELECT age,  hometown FROM teacherSELECT * FROM teacher"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"List the name of teachers whose hometown is not `` Little Lever Urban District ''.\", 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "select name from teacher where hometown!= \"little lever urban district\"", "predict": "SELECT name FROM teacher WHERE Hometown!= 'Little Lever Urban District'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What are the names of the teachers whose hometown is not `` Little Lever Urban District ''?\", 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "select name from teacher where hometown!= \"little lever urban district\"", "predict": "SELECT name FROM teacher WHERE Hometown!= 'Little Lever Urban District'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the name of teachers aged either 32 or 33?', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "predict": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of the teachers who are aged either 32 or 33?', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "predict": "SELECT Name FROM TEACHER WHERE Age  =  32 OR Age  =  33"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the hometown of the youngest teacher?', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "predict": "SELECT Hometown FROM teacher ORDER BY Age LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Where is the youngest teacher from?', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "predict": "SELECT Hometown FROM teacher ORDER BY Age LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show different hometown of teachers and the number of teachers from each hometown.', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT Hometown,  COUNT(*) FROM teacher GROUP BY Hometown", "predict": "SELECT Hometown,  COUNT(*) FROM teacher GROUP BY Hometown CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'For each hometown, how many teachers are there?', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT Hometown,  COUNT(*) FROM teacher GROUP BY Hometown", "predict": "SELECT Hometown,  count(*) FROM teacher GROUP BY HometownSELECT T1.Hometown,  count(*) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.Hometown"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the most common hometown of teachers.', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "predict": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the most commmon hometowns for teachers?', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "predict": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the hometowns shared by at least two teachers.', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "predict": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the towns from which at least two teachers come from?', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "predict": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show names of teachers and the courses they are arranged to teach.', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT T3.Name,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "predict": "SELECT T3.Name,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name of each teacher and what course they teach?', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT T3.Name,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "predict": "SELECT T2.Name,  T1.Course FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.\", 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT T3.Name,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "predict": "SELECT T1.Name,  T3.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name ASC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT T3.Name,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "predict": "SELECT T1.Name,  T2.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1 Teacher_ID  =  T2.Teacher_ID ORDER BY T1.Name ASC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the name of the teacher for the math course.', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "predict": "SELECT T2.name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.course_id  =  1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of the people who teach math courses?', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "predict": "SELECT T2.name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.course_id IN (SELECT course_id FROM course WHERE course  = 'math')user"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show names of teachers and the number of courses they teach.', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT T2.Name,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "predict": "SELECT T2.Name,  count(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Nameuser?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of the teachers and how many courses do they teach?', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT T2.Name,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "predict": "SELECT T2.Name,  count(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_iduser"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show names of teachers that teach at least two courses.', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "predict": "SELECT T1.name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id HAVING count(*)  >=  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of the teachers who teach at least two courses?', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "predict": "SELECT T2.name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id HAVING count(*)  >=  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the names of teachers who have not been arranged to teach courses.', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "predict": "SELECT Name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)query"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of the teachers whose courses have not been arranged?', 'db_id': 'course_teach', 'db_schema': {'foreign key': ['course_arrange.teacher_id->teacher.teacher_id', 'course_arrange.course_id->course.course_id'], 'primary key': ['course.course_id', 'teacher.teacher_id', 'course_arrange.course_id'], 'tables': [{'table_name': 'course', 'column_names': ['course id','staring date', 'course']}, {'table_name': 'teacher', 'column_names': ['teacher id', 'name', 'age', 'hometown']}, {'table_name': 'course arrange', 'column_names': ['course id', 'teacher id', 'grade']}]}}assistant\n\n", "label": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "predict": "SELECT T1.name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.teacher_id NOT IN (SELECT teacher_id FROM course_arrange)student"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many visitors below age 30 are there?', 'db_id':'museum_visit', 'db_schema': {'foreign key': ['visit.visitor_id->visitor.id', 'visit.museum_id->museum.museum_id'], 'primary key': ['museum.museum_id', 'visitor.id', 'visit.museum_id'], 'tables': [{'table_name':'museum', 'column_names': ['museum id', 'name', 'num of staff', 'open year']}, {'table_name': 'customer', 'column_names': ['customer id', 'name', 'level of membership', 'age']}, {'table_name': 'visit', 'column_names': ['museum id', 'customer id', 'num of ticket', 'total spent']}]}}assistant\n\n", "label": "SELECT count(*) FROM visitor WHERE age  <  30", "predict": "SELECT count(*) FROM customer WHERE age  <  30"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.', 'db_id':'museum_visit', 'db_schema': {'foreign key': ['visit.visitor_id->visitor.id', 'visit.museum_id->museum.museum_id'], 'primary key': ['museum.museum_id', 'visitor.id', 'visit.museum_id'], 'tables': [{'table_name':'museum', 'column_names': ['museum id', 'name', 'num of staff', 'open year']}, {'table_name': 'customer', 'column_names': ['customer id', 'name', 'level of membership', 'age']}, {'table_name': 'visit', 'column_names': ['museum id', 'customer id', 'num of ticket', 'total spent']}]}}assistant\n\n", "label": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "predict": "SELECT name FROM customer WHERE LEVEL_of_membership  >  4 ORDER BY LEVEL_of_membership"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average age of the visitors whose membership level is not higher than 4?', 'db_id':'museum_visit', 'db_schema': {'foreign key': ['visit.visitor_id->visitor.id', 'visit.museum_id->museum.museum_id'], 'primary key': ['museum.museum_id', 'visitor.id', 'visit.museum_id'], 'tables': [{'table_name':'museum', 'column_names': ['museum id', 'name', 'num of staff', 'open year']}, {'table_name': 'customer', 'column_names': ['customer id', 'name', 'level of membership', 'age']}, {'table_name': 'visit', 'column_names': ['museum id', 'customer id', 'num of ticket', 'total spent']}]}}assistant\n\n", "label": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "predict": "SELECT avg(t2.age) FROM visit AS t1 JOIN customer AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.level_of_membership  <=  4"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.', 'db_id':'museum_visit', 'db_schema': {'foreign key': ['visit.visitor_id->visitor.id', 'visit.museum_id->museum.museum_id'], 'primary key': ['museum.museum_id', 'visitor.id', 'visit.museum_id'], 'tables': [{'table_name':'museum', 'column_names': ['museum id', 'name', 'num of staff', 'open year']}, {'table_name': 'customer', 'column_names': ['customer id', 'name', 'level of membership', 'age']}, {'table_name': 'visit', 'column_names': ['museum id', 'customer id', 'num of ticket', 'total spent']}]}}assistant\n\n", "label": "SELECT name,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "predict": "SELECT name,  LEVEL_of_Membership FROM customer WHERE LEVEL_of_Membership  >  4 ORDER BY age DESC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the id and name of the museum that has the most staff members?', 'db_id':'museum_visit', 'db_schema': {'foreign key': ['visit.visitor_id->visitor.id', 'visit.museum_id->museum.museum_id'], 'primary key': ['museum.museum_id', 'visitor.id', 'visit.museum_id'], 'tables': [{'table_name':'museum', 'column_names': ['museum id', 'name', 'num of staff', 'open year']}, {'table_name': 'customer', 'column_names': ['customer id', 'name', 'level of membership', 'age']}, {'table_name': 'visit', 'column_names': ['museum id', 'customer id', 'num of ticket', 'total spent']}]}}assistant\n\n", "label": "SELECT museum_id,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "predict": "SELECT museum_id,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the average number of staff working for the museums that were open before 2009.', 'db_id':'museum_visit', 'db_schema': {'foreign key': ['visit.visitor_id->visitor.id', 'visit.museum_id->museum.museum_id'], 'primary key': ['museum.museum_id', 'visitor.id', 'visit.museum_id'], 'tables': [{'table_name':'museum', 'column_names': ['museum id', 'name', 'num of staff', 'open year']}, {'table_name': 'customer', 'column_names': ['customer id', 'name', 'level of membership', 'age']}, {'table_name': 'visit', 'column_names': ['museum id', 'customer id', 'num of ticket', 'total spent']}]}}assistant\n\n", "label": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "predict": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the opening year and staff number of the museum named Plaza Museum?', 'db_id':'museum_visit', 'db_schema': {'foreign key': ['visit.visitor_id->visitor.id', 'visit.museum_id->museum.museum_id'], 'primary key': ['museum.museum_id', 'visitor.id', 'visit.museum_id'], 'tables': [{'table_name':'museum', 'column_names': ['museum id', 'name', 'num of staff', 'open year']}, {'table_name': 'customer', 'column_names': ['customer id', 'name', 'level of membership', 'age']}, {'table_name': 'visit', 'column_names': ['museum id', 'customer id', 'num of ticket', 'total spent']}]}}assistant\n\n", "label": "SELECT Num_of_Staff,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "predict": "SELECT open_year,  num_of_staff FROM museum WHERE name  =  \"Plaza Museum\"?>\r\n\r\nátky?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.', 'db_id':'museum_visit', 'db_schema': {'foreign key': ['visit.visitor_id->visitor.id', 'visit.museum_id->museum.museum_id'], 'primary key': ['museum.museum_id', 'visitor.id', 'visit.museum_id'], 'tables': [{'table_name':'museum', 'column_names': ['museum id', 'name', 'num of staff', 'open year']}, {'table_name': 'customer', 'column_names': ['customer id', 'name', 'level of membership', 'age']}, {'table_name': 'visit', 'column_names': ['museum id', 'customer id', 'num of ticket', 'total spent']}]}}assistant\n\n", "label": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "predict": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)user"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'find the id, name and age for visitors who visited some museums more than once.', 'db_id':'museum_visit', 'db_schema': {'foreign key': ['visit.visitor_id->visitor.id', 'visit.museum_id->museum.museum_id'], 'primary key': ['museum.museum_id', 'visitor.id', 'visit.museum_id'], 'tables': [{'table_name':'museum', 'column_names': ['museum id', 'name', 'num of staff', 'open year']}, {'table_name': 'customer', 'column_names': ['customer id', 'name', 'level of membership', 'age']}, {'table_name': 'visit', 'column_names': ['museum id', 'customer id', 'num of ticket', 'total spent']}]}}assistant\n\n", "label": "SELECT t1.id,  t1.name,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "predict": "SELECT T1.customer_id,  T1.name,  T1.age FROM customer AS T1 JOIN visit AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  1?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?', 'db_id':'museum_visit', 'db_schema': {'foreign key': ['visit.visitor_id->visitor.id', 'visit.museum_id->museum.museum_id'], 'primary key': ['museum.museum_id', 'visitor.id', 'visit.museum_id'], 'tables': [{'table_name':'museum', 'column_names': ['museum id', 'name', 'num of staff', 'open year']}, {'table_name': 'customer', 'column_names': ['customer id', 'name', 'level of membership', 'age']}, {'table_name': 'visit', 'column_names': ['museum id', 'customer id', 'num of ticket', 'total spent']}]}}assistant\n\n", "label": "SELECT t2.visitor_id,  t1.name,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "predict": "SELECT T2.id,  T2.name,  T1.Level_of_Membership FROM customer AS T1 JOIN visit AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(total_spent) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the id and name of the museum visited most times?', 'db_id':'museum_visit', 'db_schema': {'foreign key': ['visit.visitor_id->visitor.id', 'visit.museum_id->museum.museum_id'], 'primary key': ['museum.museum_id', 'visitor.id', 'visit.museum_id'], 'tables': [{'table_name':'museum', 'column_names': ['museum id', 'name', 'num of staff', 'open year']}, {'table_name': 'customer', 'column_names': ['customer id', 'name', 'level of membership', 'age']}, {'table_name': 'visit', 'column_names': ['museum id', 'customer id', 'num of ticket', 'total spent']}]}}assistant\n\n", "label": "SELECT t2.Museum_ID,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.Museum_ID,  T2.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID  =  T2.Museum_ID GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name of the museum that had no visitor yet?', 'db_id':'museum_visit', 'db_schema': {'foreign key': ['visit.visitor_id->visitor.id', 'visit.museum_id->museum.museum_id'], 'primary key': ['museum.museum_id', 'visitor.id', 'visit.museum_id'], 'tables': [{'table_name':'museum', 'column_names': ['museum id', 'name', 'num of staff', 'open year']}, {'table_name': 'customer', 'column_names': ['customer id', 'name', 'level of membership', 'age']}, {'table_name': 'visit', 'column_names': ['museum id', 'customer id', 'num of ticket', 'total spent']}]}}assistant\n\n", "label": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)", "predict": "SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)user"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the name and age of the visitor who bought the most tickets at once.', 'db_id':'museum_visit', 'db_schema': {'foreign key': ['visit.visitor_id->visitor.id', 'visit.museum_id->museum.museum_id'], 'primary key': ['museum.museum_id', 'visitor.id', 'visit.museum_id'], 'tables': [{'table_name':'museum', 'column_names': ['museum id', 'name', 'num of staff', 'open year']}, {'table_name': 'customer', 'column_names': ['customer id', 'name', 'level of membership', 'age']}, {'table_name': 'visit', 'column_names': ['museum id', 'customer id', 'num of ticket', 'total spent']}]}}assistant\n\n", "label": "SELECT t1.name,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "predict": "SELECT T2.name,  T2.age FROM visit AS T1 JOIN customer AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the average and maximum number of tickets bought in all visits?', 'db_id':'museum_visit', 'db_schema': {'foreign key': ['visit.visitor_id->visitor.id', 'visit.museum_id->museum.museum_id'], 'primary key': ['museum.museum_id', 'visitor.id', 'visit.museum_id'], 'tables': [{'table_name':'museum', 'column_names': ['museum id', 'name', 'num of staff', 'open year']}, {'table_name': 'customer', 'column_names': ['customer id', 'name', 'level of membership', 'age']}, {'table_name': 'visit', 'column_names': ['museum id', 'customer id', 'num of ticket', 'total spent']}]}}assistant\n\n", "label": "SELECT avg(num_of_ticket),  max(num_of_ticket) FROM visit", "predict": "SELECT avg(num_of_ticket),  max(num_of_ticket) FROM visit"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the total ticket expense of the visitors whose membership level is 1?', 'db_id':'museum_visit', 'db_schema': {'foreign key': ['visit.visitor_id->visitor.id', 'visit.museum_id->museum.museum_id'], 'primary key': ['museum.museum_id', 'visitor.id', 'visit.museum_id'], 'tables': [{'table_name':'museum', 'column_names': ['museum id', 'name', 'num of staff', 'open year']}, {'table_name': 'customer', 'column_names': ['customer id', 'name', 'level of membership', 'age']}, {'table_name': 'visit', 'column_names': ['museum id', 'customer id', 'num of ticket', 'total spent']}]}}assistant\n\n", "label": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "predict": "SELECT sum(T1.num_of_ticket) FROM visit AS T1 JOIN customer AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.level_of_membership  =  1?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?', 'db_id':'museum_visit', 'db_schema': {'foreign key': ['visit.visitor_id->visitor.id', 'visit.museum_id->museum.museum_id'], 'primary key': ['museum.museum_id', 'visitor.id', 'visit.museum_id'], 'tables': [{'table_name':'museum', 'column_names': ['museum id', 'name', 'num of staff', 'open year']}, {'table_name': 'customer', 'column_names': ['customer id', 'name', 'level of membership', 'age']}, {'table_name': 'visit', 'column_names': ['museum id', 'customer id', 'num of ticket', 'total spent']}]}}assistant\n\n", "label": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011", "predict": "SELECT T2.name FROM visit AS T1 JOIN museum AS T2 ON T1.museum_id  =  T2.museum_id WHERE T2.open_year  <  2009 INTERSECT SELECT T2.name FROM visit AS T1 JOIN museum AS T2 ON T1.museum_id  =  T2.museum_id WHERE T2.open_year  >  2011"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the number of visitors who did not visit any museum opened after 2010.', 'db_id':'museum_visit', 'db_schema': {'foreign key': ['visit.visitor_id->visitor.id', 'visit.museum_id->museum.museum_id'], 'primary key': ['museum.museum_id', 'visitor.id', 'visit.museum_id'], 'tables': [{'table_name':'museum', 'column_names': ['museum id', 'name', 'num of staff', 'open year']}, {'table_name': 'customer', 'column_names': ['customer id', 'name', 'level of membership', 'age']}, {'table_name': 'visit', 'column_names': ['museum id', 'customer id', 'num of ticket', 'total spent']}]}}assistant\n\n", "label": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)", "predict": "SELECT count(*) FROM visitor WHERE visitor.id NOT IN ( SELECT T1.customer_id FROM visit AS T1 JOIN museum AS T2 ON T1.museum_id  =  T2.museum_id WHERE T2.open_year  >  2010 )"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many museums were opened after 2013 or before 2008?', 'db_id':'museum_visit', 'db_schema': {'foreign key': ['visit.visitor_id->visitor.id', 'visit.museum_id->museum.museum_id'], 'primary key': ['museum.museum_id', 'visitor.id', 'visit.museum_id'], 'tables': [{'table_name':'museum', 'column_names': ['museum id', 'name', 'num of staff', 'open year']}, {'table_name': 'customer', 'column_names': ['customer id', 'name', 'level of membership', 'age']}, {'table_name': 'visit', 'column_names': ['museum id', 'customer id', 'num of ticket', 'total spent']}]}}assistant\n\n", "label": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008", "predict": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the total number of players.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT count(*) FROM players", "predict": "SELECT count(*) FROM players?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many players are there?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT count(*) FROM players", "predict": "SELECT count(*) FROM Players"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the total number of matches.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT count(*) FROM matches", "predict": "SELECT count(*) FROM MATCHES CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of matches.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT count(*) FROM matches", "predict": "SELECT count(*) FROM MATCHES"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the first name and birth date of all players from the country with code USA.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT first_name,  birth_date FROM players WHERE country_code  =  'USA'", "predict": "SELECT first_name,  birth_date FROM players WHERE country_code  =  'USA'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the first names and birth dates of players from the USA?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT first_name,  birth_date FROM players WHERE country_code  =  'USA'", "predict": "SELECT first_name,  birth_date FROM players WHERE country_code  =  'USA'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the average age of losers and winners of all matches.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT avg(loser_age),  avg(winner_age) FROM matches", "predict": "SELECT avg(winner_age),  avg(loser_age) FROM MATCHES CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the average ages of losers and winners across matches?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT avg(loser_age),  avg(winner_age) FROM matches", "predict": "SELECT avg(loser_age),  avg(winner_age) FROM MATCHES"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the average rank of winners in all matches.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT avg(winner_rank) FROM matches", "predict": "SELECT avg(T1.winner_rank) FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average rank for winners in all matches?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT avg(winner_rank) FROM matches", "predict": "SELECT avg(T1.winner_rank) FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the highest rank of losers in all matches.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT min(loser_rank) FROM matches", "predict": "SELECT max(loser_rank) FROM MATCHES"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the best rank of losers across all matches?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT min(loser_rank) FROM matches", "predict": "SELECT max(loser_rank) FROM matches CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'find the number of distinct country codes of all players.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT count(DISTINCT country_code) FROM players", "predict": "SELECT count(DISTINCT country_code) FROM players"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many distinct countries do players come from?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT count(DISTINCT country_code) FROM players", "predict": "SELECT count(DISTINCT country_code) FROM players"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the number of distinct name of losers.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT count(DISTINCT loser_name) FROM matches", "predict": "SELECT count(DISTINCT loser_name) FROM MATCHES"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many different loser names are there?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT count(DISTINCT loser_name) FROM matches", "predict": "SELECT count(DISTINCT loser_name) FROM MATCHES"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the name of tourney that has more than 10 matches.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "predict": "SELECT tourney_name FROM MATCHES GROUP BY tourney_name HAVING count(*)  >  10"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of tournaments that have more than 10 matches?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "predict": "SELECT DISTINCT tourname FROM MATCHES GROUP BY tourname HAVING count(*)  >  10"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the names of all winners who played in both 2013 and 2016.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "predict": "SELECT T1.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id WHERE T2.year  =  2013 INTERSECT SELECT T1.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id WHERE T2.year  =  2016"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of players who won in both 2013 and 2016?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "predict": "SELECT T1.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.year  =  2013 INTERSECT SELECT T1.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.year  =  2016"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the number of all matches who played in years of 2013 or 2016.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "predict": "SELECT count(*) FROM MATCHES WHERE YEAR  >=  2013 OR YEAR  =  2016"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many matches were played in 2013 or 2016?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "predict": "SELECT count(*) FROM MATCHES WHERE YEAR  =  2013 OR YEAR  =  2016"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT T1.country_code,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "predict": "SELECT T1.country_code,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id JOIN matches AS T3 ON T1.player_id  =  T3.winner_id WHERE T2.tourney_name  =  \"WTA Championships\" INTERSECT SELECT T1.country_code,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the first names and country codes for players who won both the WTA Championships and the Australian Open?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT T1.country_code,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "predict": "SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id WHERE T2.tourney_name  =  \"Australian Open\" INTERSECT SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id WHERE T2.tourney_name  =  \"WTA Championships\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the first name and country code of the oldest player.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT first_name,  country_code FROM players ORDER BY birth_date LIMIT 1", "predict": "SELECT first_name,  country_code FROM players ORDER BY birth_date LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the first name and country code of the oldest player?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT first_name,  country_code FROM players ORDER BY birth_date LIMIT 1", "predict": "SELECT fname,  country_code FROM players ORDER BY birth_date LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the first and last name of all players in the order of birth date.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT first_name,  last_name FROM players ORDER BY birth_date", "predict": "SELECT first_name,  last_name FROM players ORDER BY birth_date"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the full names of all players, sorted by birth date?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT first_name,  last_name FROM players ORDER BY birth_date", "predict": "SELECT first_name,  last_name FROM players ORDER BY birth_date"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the first and last name of all players who are left / L hand in the order of birth date.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT first_name,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "predict": "SELECT first_name,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the full names of all left handed players, in order of birth date?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT first_name,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "predict": "SELECT first_name,  last_name FROM players WHERE hand  =  'Left' ORDER BY birth_date"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the first name and country code of the player who did the most number of tours.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT T1.country_code,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "predict": "SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id GROUP BY T1.country_code ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the first name and country code of the player with the most tours?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT T1.country_code,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "predict": "SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id GROUP BY T1.country_code ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the year that has the most number of matches.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT YEAR FROM MATCHES GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which year had the most matches?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT YEAR FROM MATCHES GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the name and rank points of the winner who won the most times.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT winner_name,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.winner_name,  T1.winner_rank_points FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id GROUP BY T1.winner_id ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name of the winner who has won the most matches, and how many rank points does this player have?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT winner_name,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.winner_name,  T1.winner_rank_points FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id GROUP BY T1.winner_id ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "predict": "SELECT T2.winner_name FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id WHERE T1.tourney_name  =  \"Australian Open\" ORDER BY T1.winner_rank_points DESC LIMIT 1 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name of the winner with the most rank points who participated in the Australian Open tournament?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "predict": "SELECT T1.winner_name FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id WHERE T1.tourney_name  =  \"Australian Open\" ORDER BY T1.winner_rank_points DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'find the names of loser and winner who played in the match with greatest number of minutes.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT winner_name,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "predict": "SELECT T2.loser_name,  T2.winner_name FROM matches AS T1 JOIN players AS T2 ON T1.loser_id  =  T2.player_id ORDER BY T1.minutes DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of the winner and loser who played in the longest match?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT winner_name,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "predict": "SELECT T2.loser_name,  T1.winner_name FROM Matches AS T1 JOIN Players AS T2 ON T1.loser_id  =  T2.player_id ORDER BY minutes DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the average ranking for each player and their first name.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT avg(ranking),  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "predict": "SELECT avg(T2.Ranking),  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the first names of all players, and their average rankings?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT avg(ranking),  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "predict": "SELECT T1.first_name,  avg(T2.ranking) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the total ranking points for each player and their first name.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT sum(ranking_points),  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "predict": "SELECT sum(T2.ranking_points),  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the first names of all players, and their total ranking points?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT sum(ranking_points),  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "predict": "SELECT T1.first_name,  sum(T2.ranking_points) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY sum(T2.ranking_points) DESC LIMIT 10 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'find the number of players for each country.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT count(*),  country_code FROM players GROUP BY country_code", "predict": "SELECT count(*),  country_code FROM players GROUP BY country_code"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many players are from each country?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT count(*),  country_code FROM players GROUP BY country_code", "predict": "SELECT count(*),  country_code FROM players GROUP BY country_code"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'find the code of the country where has the greatest number of players.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the code of the country with the most players?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the codes of countries that have more than 50 players.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "predict": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the codes of countries with more than 50 players?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "predict": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50 CLIIIK CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the total number of tours for each ranking date.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT sum(tours),  ranking_date FROM rankings GROUP BY ranking_date", "predict": "SELECT Ranking,  Sum(Tours) FROM rankings GROUP BY Ranking ORDER BY Ranking"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many total tours were there for each ranking date?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT sum(tours),  ranking_date FROM rankings GROUP BY ranking_date", "predict": "SELECT rankingDate,  sum(Tours) FROM rankings GROUP BY rankingDate"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the number of matches happened in each year.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT count(*),  YEAR FROM matches GROUP BY YEAR", "predict": "SELECT count(*),  YEAR FROM MATCHES GROUP BY YEAR"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many matches were played in each year?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT count(*),  YEAR FROM matches GROUP BY YEAR", "predict": "SELECT count(*),  YEAR FROM MATCHS GROUP BY YEAR"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the name and rank of the 3 youngest winners across all matches.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT DISTINCT winner_name,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "predict": "SELECT T2.winner_name,  T1.winner_rank FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id ORDER BY T1.winner_id,  T1.tourney_id DESC LIMIT 3"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names and ranks of the three youngest winners across all matches?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT DISTINCT winner_name,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "predict": "SELECT T1.winner_name,  T1.winner_rank FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id ORDER BY T2.birth_date DESC LIMIT 3"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many different winners both participated in the WTA Championships and were left handed?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "predict": "SELECT count(*) FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id WHERE T1.hand  =  'L' INTERSECT SELECT count(*) FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id WHERE T1.hand  =  'L' INTERSECT SELECT count(*) FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the number of left handed winners who participated in the WTA Championships.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "predict": "SELECT count(*) FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id WHERE T1.hand  =  'Left' AND T2.tourney_name  =  'WTA Championships'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the first name, country code and birth date of the winner who has the highest rank points in all matches.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT T1.first_name,  T1.country_code,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "predict": "SELECT T1.first_name,  T1.country_code,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the first name, country code, and birth date of the player with the most winner rank points across all matches?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT T1.first_name,  T1.country_code,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "predict": "SELECT T1.first_name,  T1.country_code,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the number of players for each hand type.', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT count(*),  hand FROM players GROUP BY hand", "predict": "SELECT count(*),  hand FROM players GROUP BY hand CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many players are there for each hand type?', 'db_id': 'wta_1', 'db_schema': {'foreign key': ['matches.winner_id->players.player_id','matches.loser_id->players.player_id', 'rankings.player_id->players.player_id'], 'primary key': ['players.player_id'], 'tables': [{'table_name': 'players', 'column_names': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code']}, {'table_name':'matches', 'column_names': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed','match num','minutes', 'round','score','surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year']}, {'table_name': 'rankings', 'column_names': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}]}}assistant\n\n", "label": "SELECT count(*),  hand FROM players GROUP BY hand", "predict": "SELECT hand,  count(*) FROM players GROUP BY hand CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"How many ships ended up being 'Captured'?\", 'db_id': 'battle_death', 'db_schema': {'foreign key': ['ship.lost_in_battle->battle.id', 'death.caused_by_ship_id->ship.id'], 'primary key': ['battle.id','ship.id', 'death.id'], 'tables': [{'table_name': 'battle', 'column_names': ['id', 'name', 'date', 'bulgarian commander', 'latin commander','result']}, {'table_name':'ship', 'column_names': ['lost in battle', 'id', 'name', 'tonnage','ship type', 'location', 'disposition of ship']}, {'table_name': 'death', 'column_names': ['caused by ship id', 'id', 'note', 'killed', 'injured']}]}}assistant\n\n", "label": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "predict": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'query?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the name and tonnage ordered by in descending alphaetical order for the names.', 'db_id': 'battle_death', 'db_schema': {'foreign key': ['ship.lost_in_battle->battle.id', 'death.caused_by_ship_id->ship.id'], 'primary key': ['battle.id','ship.id', 'death.id'], 'tables': [{'table_name': 'battle', 'column_names': ['id', 'name', 'date', 'bulgarian commander', 'latin commander','result']}, {'table_name':'ship', 'column_names': ['lost in battle', 'id', 'name', 'tonnage','ship type', 'location', 'disposition of ship']}, {'table_name': 'death', 'column_names': ['caused by ship id', 'id', 'note', 'killed', 'injured']}]}}assistant\n\n", "label": "SELECT name,  tonnage FROM ship ORDER BY name DESC", "predict": "SELECT Name,  Tonnage FROM ship ORDER BY Name DESC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the name, date and result of each battle.', 'db_id': 'battle_death', 'db_schema': {'foreign key': ['ship.lost_in_battle->battle.id', 'death.caused_by_ship_id->ship.id'], 'primary key': ['battle.id','ship.id', 'death.id'], 'tables': [{'table_name': 'battle', 'column_names': ['id', 'name', 'date', 'bulgarian commander', 'latin commander','result']}, {'table_name':'ship', 'column_names': ['lost in battle', 'id', 'name', 'tonnage','ship type', 'location', 'disposition of ship']}, {'table_name': 'death', 'column_names': ['caused by ship id', 'id', 'note', 'killed', 'injured']}]}}assistant\n\n", "label": "SELECT name,  date FROM battle", "predict": "SELECT name,  date,  RESULT FROM battleQUERYSELECT name,  date,  RESULT FROM battleSELECT name,  date,  RESULT FROM battle"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is maximum and minimum death toll caused each time?', 'db_id': 'battle_death', 'db_schema': {'foreign key': ['ship.lost_in_battle->battle.id', 'death.caused_by_ship_id->ship.id'], 'primary key': ['battle.id','ship.id', 'death.id'], 'tables': [{'table_name': 'battle', 'column_names': ['id', 'name', 'date', 'bulgarian commander', 'latin commander','result']}, {'table_name':'ship', 'column_names': ['lost in battle', 'id', 'name', 'tonnage','ship type', 'location', 'disposition of ship']}, {'table_name': 'death', 'column_names': ['caused by ship id', 'id', 'note', 'killed', 'injured']}]}}assistant\n\n", "label": "SELECT max(killed),  min(killed) FROM death", "predict": "SELECT max(killed),  min(killed) FROM death CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average number of injuries caused each time?', 'db_id': 'battle_death', 'db_schema': {'foreign key': ['ship.lost_in_battle->battle.id', 'death.caused_by_ship_id->ship.id'], 'primary key': ['battle.id','ship.id', 'death.id'], 'tables': [{'table_name': 'battle', 'column_names': ['id', 'name', 'date', 'bulgarian commander', 'latin commander','result']}, {'table_name':'ship', 'column_names': ['lost in battle', 'id', 'name', 'tonnage','ship type', 'location', 'disposition of ship']}, {'table_name': 'death', 'column_names': ['caused by ship id', 'id', 'note', 'killed', 'injured']}]}}assistant\n\n", "label": "SELECT avg(injured) FROM death", "predict": "SELECT avg(Injured) FROM death"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What are the death and injury situations caused by the ship with tonnage 't'?\", 'db_id': 'battle_death', 'db_schema': {'foreign key': ['ship.lost_in_battle->battle.id', 'death.caused_by_ship_id->ship.id'], 'primary key': ['battle.id','ship.id', 'death.id'], 'tables': [{'table_name': 'battle', 'column_names': ['id', 'name', 'date', 'bulgarian commander', 'latin commander','result']}, {'table_name':'ship', 'column_names': ['lost in battle', 'id', 'name', 'tonnage','ship type', 'location', 'disposition of ship']}, {'table_name': 'death', 'column_names': ['caused by ship id', 'id', 'note', 'killed', 'injured']}]}}assistant\n\n", "label": "SELECT T1.killed,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "predict": "SELECT T2.note,  T2.killed,  T2.injured FROM ship AS T1 JOIN death AS T2 ON T1.id  =  T2.caused_by_ship_id JOIN (SELECT name FROM ship WHERE tonnage  =  't') AS T3 ON T1.id  =  T3.idSELECT T2.note,  T2.killed,  T2.injured FROM ship AS T1 JOIN death AS T2 ON T1.id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What are the name and results of the battles when the bulgarian commander is not 'Boril'\", 'db_id': 'battle_death', 'db_schema': {'foreign key': ['ship.lost_in_battle->battle.id', 'death.caused_by_ship_id->ship.id'], 'primary key': ['battle.id','ship.id', 'death.id'], 'tables': [{'table_name': 'battle', 'column_names': ['id', 'name', 'date', 'bulgarian commander', 'latin commander','result']}, {'table_name':'ship', 'column_names': ['lost in battle', 'id', 'name', 'tonnage','ship type', 'location', 'disposition of ship']}, {'table_name': 'death', 'column_names': ['caused by ship id', 'id', 'note', 'killed', 'injured']}]}}assistant\n\n", "label": "SELECT name,  RESULT FROM battle WHERE bulgarian_commander!= 'Boril'", "predict": "SELECT name,  RESULT FROM battle WHERE bulgarian_commander!= 'Boril'query"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What are the different ids and names of the battles that lost any 'Brig' type shipes?\", 'db_id': 'battle_death', 'db_schema': {'foreign key': ['ship.lost_in_battle->battle.id', 'death.caused_by_ship_id->ship.id'], 'primary key': ['battle.id','ship.id', 'death.id'], 'tables': [{'table_name': 'battle', 'column_names': ['id', 'name', 'date', 'bulgarian commander', 'latin commander','result']}, {'table_name':'ship', 'column_names': ['lost in battle', 'id', 'name', 'tonnage','ship type', 'location', 'disposition of ship']}, {'table_name': 'death', 'column_names': ['caused by ship id', 'id', 'note', 'killed', 'injured']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.id,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "predict": "SELECT DISTINCT T1.id,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'Query"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the ids and names of the battles that led to more than 10 people killed in total.', 'db_id': 'battle_death', 'db_schema': {'foreign key': ['ship.lost_in_battle->battle.id', 'death.caused_by_ship_id->ship.id'], 'primary key': ['battle.id','ship.id', 'death.id'], 'tables': [{'table_name': 'battle', 'column_names': ['id', 'name', 'date', 'bulgarian commander', 'latin commander','result']}, {'table_name':'ship', 'column_names': ['lost in battle', 'id', 'name', 'tonnage','ship type', 'location', 'disposition of ship']}, {'table_name': 'death', 'column_names': ['caused by ship id', 'id', 'note', 'killed', 'injured']}]}}assistant\n\n", "label": "SELECT T1.id,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "predict": "SELECT T1.id,  T1.name FROM battle AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.caused_by_ship_id HAVING sum(killed)  >  10"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the ship id and name that caused most total injuries?', 'db_id': 'battle_death', 'db_schema': {'foreign key': ['ship.lost_in_battle->battle.id', 'death.caused_by_ship_id->ship.id'], 'primary key': ['battle.id','ship.id', 'death.id'], 'tables': [{'table_name': 'battle', 'column_names': ['id', 'name', 'date', 'bulgarian commander', 'latin commander','result']}, {'table_name':'ship', 'column_names': ['lost in battle', 'id', 'name', 'tonnage','ship type', 'location', 'disposition of ship']}, {'table_name': 'death', 'column_names': ['caused by ship id', 'id', 'note', 'killed', 'injured']}]}}assistant\n\n", "label": "SELECT T2.id,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T2.id,  T1.name FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T1.caused_by_ship_id ORDER BY sum(T1.injured) DESC LIMIT 1?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?\", 'db_id': 'battle_death', 'db_schema': {'foreign key': ['ship.lost_in_battle->battle.id', 'death.caused_by_ship_id->ship.id'], 'primary key': ['battle.id','ship.id', 'death.id'], 'tables': [{'table_name': 'battle', 'column_names': ['id', 'name', 'date', 'bulgarian commander', 'latin commander','result']}, {'table_name':'ship', 'column_names': ['lost in battle', 'id', 'name', 'tonnage','ship type', 'location', 'disposition of ship']}, {'table_name': 'death', 'column_names': ['caused by ship id', 'id', 'note', 'killed', 'injured']}]}}assistant\n\n", "label": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "predict": "SELECT DISTINCT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many different results are there for the battles?', 'db_id': 'battle_death', 'db_schema': {'foreign key': ['ship.lost_in_battle->battle.id', 'death.caused_by_ship_id->ship.id'], 'primary key': ['battle.id','ship.id', 'death.id'], 'tables': [{'table_name': 'battle', 'column_names': ['id', 'name', 'date', 'bulgarian commander', 'latin commander','result']}, {'table_name':'ship', 'column_names': ['lost in battle', 'id', 'name', 'tonnage','ship type', 'location', 'disposition of ship']}, {'table_name': 'death', 'column_names': ['caused by ship id', 'id', 'note', 'killed', 'injured']}]}}assistant\n\n", "label": "SELECT count(DISTINCT RESULT) FROM battle", "predict": "SELECT count(DISTINCT RESULT) FROM battle?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"How many battles did not lose any ship with tonnage '225'?\", 'db_id': 'battle_death', 'db_schema': {'foreign key': ['ship.lost_in_battle->battle.id', 'death.caused_by_ship_id->ship.id'], 'primary key': ['battle.id','ship.id', 'death.id'], 'tables': [{'table_name': 'battle', 'column_names': ['id', 'name', 'date', 'bulgarian commander', 'latin commander','result']}, {'table_name':'ship', 'column_names': ['lost in battle', 'id', 'name', 'tonnage','ship type', 'location', 'disposition of ship']}, {'table_name': 'death', 'column_names': ['caused by ship id', 'id', 'note', 'killed', 'injured']}]}}assistant\n\n", "label": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "predict": "SELECT count(*) FROM battle WHERE RESULT  =  'lost' EXCEPT SELECT count(*) FROM ship WHERE Tonnage  =  225"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'\", 'db_id': 'battle_death', 'db_schema': {'foreign key': ['ship.lost_in_battle->battle.id', 'death.caused_by_ship_id->ship.id'], 'primary key': ['battle.id','ship.id', 'death.id'], 'tables': [{'table_name': 'battle', 'column_names': ['id', 'name', 'date', 'bulgarian commander', 'latin commander','result']}, {'table_name':'ship', 'column_names': ['lost in battle', 'id', 'name', 'tonnage','ship type', 'location', 'disposition of ship']}, {'table_name': 'death', 'column_names': ['caused by ship id', 'id', 'note', 'killed', 'injured']}]}}assistant\n\n", "label": "SELECT T1.name,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", "predict": "SELECT T2.date,  T1.Name FROM ship AS T1 JOIN battle AS T2 ON T1.lost_in_battle  =  T2.id WHERE T1.Name  =  'Lettice' UNION SELECT T2.date,  T1.Name FROM ship AS T1 JOIN battle AS T2 ON T1.lost_in_battle  =  T2.id WHERE T1.Name  =  'HMS Atalanta'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.\", 'db_id': 'battle_death', 'db_schema': {'foreign key': ['ship.lost_in_battle->battle.id', 'death.caused_by_ship_id->ship.id'], 'primary key': ['battle.id','ship.id', 'death.id'], 'tables': [{'table_name': 'battle', 'column_names': ['id', 'name', 'date', 'bulgarian commander', 'latin commander','result']}, {'table_name':'ship', 'column_names': ['lost in battle', 'id', 'name', 'tonnage','ship type', 'location', 'disposition of ship']}, {'table_name': 'death', 'column_names': ['caused by ship id', 'id', 'note', 'killed', 'injured']}]}}assistant\n\n", "label": "SELECT name,  RESULT,  bulgarian_commander FROM battle EXCEPT SELECT T1.name,  T1.result,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "predict": "SELECT name,  RESULT,  bulgarian_commander FROM battle WHERE id NOT IN (SELECT T1.id FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel')query"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What are the notes of the death events which has substring 'East'?\", 'db_id': 'battle_death', 'db_schema': {'foreign key': ['ship.lost_in_battle->battle.id', 'death.caused_by_ship_id->ship.id'], 'primary key': ['battle.id','ship.id', 'death.id'], 'tables': [{'table_name': 'battle', 'column_names': ['id', 'name', 'date', 'bulgarian commander', 'latin commander','result']}, {'table_name':'ship', 'column_names': ['lost in battle', 'id', 'name', 'tonnage','ship type', 'location', 'disposition of ship']}, {'table_name': 'death', 'column_names': ['caused by ship id', 'id', 'note', 'killed', 'injured']}]}}assistant\n\n", "label": "SELECT note FROM death WHERE note LIKE '%East%'", "predict": "SELECT T1.Note FROM death AS T1 JOIN ship AS T2 ON T1.Caused_by_Ship_ID  =  T2.ID WHERE T2.Location LIKE '%East%'query"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'what are all the addresses including line 1 and line 2?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT line_1,  line_2 FROM addresses", "predict": "SELECT line_1,  line_2 FROM addresses CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the first and second line for all addresses?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT line_1,  line_2 FROM addresses", "predict": "SELECT line_1,  line_2 FROM Addresses"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many courses in total are listed?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT count(*) FROM Courses", "predict": "SELECT count(*) FROM COURSESuser"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many courses are there?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT count(*) FROM Courses", "predict": "SELECT count(*) FROM COURSESuser CLIIIK CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How is the math course described?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT course_description FROM Courses WHERE course_name  = 'math'", "predict": "SELECT course_description FROM COURSES WHERE course_name  =  'Math'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the descriptions for all the math courses?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT course_description FROM Courses WHERE course_name  = 'math'", "predict": "SELECT course_description FROM COURSES WHERE course_name LIKE '%Math%'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the zip code of the address in the city Port Chelsea?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "predict": "SELECT zip_postcode FROM addresses WHERE city  =  \"Port Chelsea\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the zip code for Port Chelsea?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "predict": "SELECT zip_postcode FROM addresses WHERE city  =  \"Port Chelsea\" CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which department offers the most number of degrees? List department name and id.', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT T2.department_name,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T2.department_name,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name and id of the department with the most number of degrees?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "select t2.department_name,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1", "predict": "SELECT T1.department_name,  T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many departments offer any degree?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "predict": "SELECT count(DISTINCT department_id) FROM Degree_programs?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many different departments offer degrees?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "predict": "SELECT count(DISTINCT department_id) FROM Degree_Programs CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many different degree names are offered?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "predict": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programsuser"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many different degrees are offered?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "predict": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programsuser"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many degrees does the engineering department offer?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "predict": "SELECT count(*) FROM degree_programs AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  \"Engineering\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many degrees does the engineering department have?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "predict": "SELECT count(*) FROM degree_programs AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Engineering'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names and descriptions of all the sections?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT section_name,  section_description FROM Sections", "predict": "SELECT section_name,  section_description FROM  Sections"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names and descriptions for all the sections?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT section_name,  section_description FROM Sections", "predict": "SELECT section_name,  section_description FROM  Sections"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names and id of courses having at most 2 sections?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT T1.course_name,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "predict": "SELECT T1.course_name,  T1.course_id FROM courses AS T1 JOIN sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names and ids of every course with less than 2 sections?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT T1.course_name,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "predict": "SELECT T1.course_name,  T1.course_id FROM courses AS T1 JOIN sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the section_name in reversed lexicographical order.', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT section_name FROM Sections ORDER BY section_name DESC", "predict": "SELECT section_name FROM Sections ORDER BY section_name DESC?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of the sections in reverse alphabetical order?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT section_name FROM Sections ORDER BY section_name DESC", "predict": "SELECT section_name FROM sections ORDER BY section_name DESC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the semester which most student registered in? Show both the name and the id.', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT T1.semester_name,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.semester_name,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T2.semester_id ORDER BY count(*) DESC LIMIT 1?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'For each semester, what is the name and id of the one with the most students registered?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT T1.semester_name,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.semester_name,  T2.semester_id,  count(*) FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T2.semester_id ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the description of the department whose name has the substring the computer?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "predict": "SELECT department_description FROM DEPARTMENTS WHERE department_name LIKE '%the computer%'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the department description for the one whose name has the word computer?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "predict": "SELECT department_description FROM DEPARTMENTS WHERE department_name LIKE \"%computer%\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "predict": "SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T1.student_id FROM students AS T1 JOIN Student_enrolment AS T2 ON T1.student_id  =  T2.student_id WHERE T2.degree_program_id IN (SELECT T3.degree_program_id FROM degree_programs AS T3 JOIN Student_enrolment AS T4 ON T3.degree_program_id  =  T4.degree_program_id GROUP BY T3.degree_program_id HAVING"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "predict": "SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T2.degree_summary_name,  T2.degree_summary_description,  T1.student_id FROM students AS T1 JOIN degree_programs AS T2 ON T1.student_id  =  T2.degree_program_id WHERE T2.degree_summary_name  =  \"Bachelor of Science\" AND T2.degree_summary_description  =  \"Computer Science\" INTERSECT SELECT T1.first_name,  T"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.first_name,  T1.middle_name,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "predict": "SELECT T1.first_name,  T1.middle_name,  T1.last_name FROM students AS T1 JOIN Student_enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the first, middle, and last names for everybody enrolled in a Bachelors program?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.first_name,  T1.middle_name,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "predict": "SELECT T1.first_name,  T1.middle_name,  T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN degree_programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelors'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the kind of program which most number of students are enrolled in?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the degree summary name that has the most number of students enrolled?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T2.degree_summary_name FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the program which most number of students are enrolled in. List both the id and the summary.', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT T1.degree_program_id,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T2.degree_program_id,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T2.degree_program_id ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the program id and the summary of the degree that has the most students enrolled?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT T1.degree_program_id,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T2.degree_program_id,  T2.degree_summary_name FROM Student_enrolment AS T1 JOIN Degree_programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT T1.student_id,  T1.first_name,  T1.middle_name,  T1.last_name,  count(*),  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.student_id,  T3.first_name,  T3.middle_name,  T3.last_name,  count(*),  T2.degree_program_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id JOIN Students AS T3 ON T1.student_id  =  T3.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT T1.student_id,  T1.first_name,  T1.middle_name,  T1.last_name,  count(*),  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T1.student_id,  count(*) FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which semesters do not have any student enrolled? List the semester name.', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "predict": "SELECT semester_name FROM semesters EXCEPT SELECT T1.semester_name FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id  =  T2.semester_idquery"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name of the semester with no students enrolled?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "predict": "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are all the course names of the courses which ever have students enrolled in?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "predict": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of all courses that have some students enrolled?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "predict": "SELECT T1.course_name FROM courses AS T1 JOIN student_enrolment_courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >=  1?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What's the name of the course with most number of enrollments?\", 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.course_name FROM courses AS T1 JOIN student_enrolment_courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name of the course with the most students enrolled?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "predict": "SELECT last_name FROM students WHERE permanent_address_id IN (SELECT current_address_id FROM addresses WHERE state_province_county  =  'North Carolina') EXCEPT SELECT last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN degree_programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the last name of the students who live in North Carolina but have not registered in any degree programs?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "predict": "SELECT last_name FROM students WHERE permanent_address_id IN (SELECT current_address_id FROM addresses WHERE state_province_county  =  \"North Carolina\") EXCEPT SELECT T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN degree_programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the date and id of the transcript with at least 2 course results.', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT T2.transcript_date,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "predict": "SELECT T1.transcript_date,  T1.transcript_id FROM transcripts AS T1 JOIN student_enrolment_courses AS T2 ON T1.transcript_id  =  T2.student_course_id GROUP BY T1.transcript_id HAVING count(*)  >=  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the date and id of the transcript with at least 2 courses listed?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT T2.transcript_date,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "predict": "SELECT T1.transcript_date,  T1.transcript_id FROM transcripts AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the phone number of the man with the first name Timmothy and the last name Ward?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "predict": "SELECT cell_mobile_number FROM STUDENTS WHERE first_name  =  \"Timmothy\" AND last_name  =  \"Ward\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the mobile phone number of the student named Timmothy Ward?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "predict": "SELECT cell_mobile_number FROM STUDENTS WHERE first_name  =  \"Timmothy\" AND last_name  =  \"Ward\" CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Who is the first student to register? List the first name, middle name and last name.', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT first_name,  middle_name,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "predict": "SELECT first_name,  middle_name,  last_name FROM students ORDER BY date_first_registered ASC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the first, middle, and last name of the first student to register?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT first_name,  middle_name,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "predict": "SELECT first_name,  middle_name,  last_name FROM students ORDER BY date_first_registered ASC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Who is the earliest graduate of the school? List the first name, middle name and last name.', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT first_name,  middle_name,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "predict": "SELECT T1.first_name,  T1.middle_name,  T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN degree_programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.transcript_year  =  2019 ORDER BY T2.semester_id ASC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the first, middle, and last name of the earliest school graduate?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT first_name,  middle_name,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "predict": "SELECT T1.first_name,  T1.middle_name,  T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN degree_programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  \"Graduation\" ORDER BY T1.date_first_registered LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Whose permanent address is different from his or her current address? List his or her first name.', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT first_name FROM Students WHERE current_address_id!= permanent_address_id", "predict": "SELECT T1.first_name FROM students AS T1 JOIN addresses AS T2 ON T1.permanent_address_id  =  T2.address_id EXCEPT SELECT T1.first_name FROM students AS T1 JOIN addresses AS T2 ON T1.current_address_id  =  T2.address_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the first name of the student whose permanent address is different from his or her current one?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT first_name FROM Students WHERE current_address_id!= permanent_address_id", "predict": "SELECT first_name FROM students WHERE permanent_address_id!= current_address_id CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which address holds the most number of students currently? List the address id and all lines.', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT T1.address_id,  T1.line_1,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.address_id,  T2.line_1,  T2.line_2,  T2.line_3,  T2.city,  T2.zip_postcode,  T2.state_province_county FROM Addresses AS T1 JOIN (SELECT permanent_address_id FROM students GROUP BY permanent_address_id ORDER BY count(*) DESC LIMIT 1) AS T2 ON T1.address_id  =  T2.permanent_address_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the id, line 1, and line 2 of the address with the most students?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT T1.address_id,  T1.line_1,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.address_id,  T2.line_1,  T2.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.permanent_address_id GROUP BY T2.permanent_address_id ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'On average, when were the transcripts printed?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT avg(transcript_date) FROM Transcripts", "predict": "SELECT avg(transcript_date) FROM transcripts"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average transcript date?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT avg(transcript_date) FROM Transcripts", "predict": "SELECT avg(transcript_date) FROM transcripts"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'When is the first transcript released? List the date and details.', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT transcript_date,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "predict": "SELECT transcript_date,  other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the earliest date of a transcript release, and what details can you tell me?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT transcript_date,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "predict": "SELECT min(transcript_date),  other_details FROM transcripts GROUP BY other_detailsuser?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many transcripts are released?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT count(*) FROM Transcripts", "predict": "SELECT count(*) FROM TRANSCRIPTSátky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many transcripts are listed?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT count(*) FROM Transcripts", "predict": "SELECT count(*) FROM TRANSCRIPTS"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the last transcript release date?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "predict": "SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'When was the last transcript released?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "predict": "SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT count(*),  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.course_id,  count(*) FROM Student_Enrolment_Courses AS T1 JOIN Student_Enrolment AS T2 ON T1.student_enrolment_id  =  T2.student_enrolment_id GROUP BY T1.course_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?\", 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT count(*),  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT course_id,  count(*) FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the date of the transcript which shows the least number of results, also list the id.', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT T2.transcript_date,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "predict": "SELECT T1.transcript_date FROM TRANSCRIPTS AS T1 JOIN TRANSCRIPT_CONTENTS AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_date ORDER BY count(*) ASC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the date and id of the transcript with the least number of results?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT T2.transcript_date,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "predict": "SELECT T1.transcript_date,  T1.transcript_id FROM transcripts AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the semester when both Master students and Bachelor students got enrolled in.', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "predict": "SELECT semester_id FROM Student_Enrolment WHERE degree_program_id  =  (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name  =  'Master') INTERSECT SELECT semester_id FROM Student_Enrolment WHERE degree_program_id  =  (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name  =  'Bachelor')"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the id of the semester that had both Masters and Bachelors students enrolled?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "predict": "SELECT semester_id FROM Student_enrolment WHERE degree_program_id  =  1 INTERSECT SELECT semester_id FROM Student_enrolment WHERE degree_program_id  =  4"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many different addresses do the students currently live?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT count(DISTINCT current_address_id) FROM Students", "predict": "SELECT count(DISTINCT current_address_id) FROM students"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the different addresses that have students living there?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT count(DISTINCT current_address_id) FROM Students", "predict": "SELECT DISTINCT T1.line_1,  T1.line_2,  T1.line_3,  T1.city,  T1.zip_postcode,  T1.state_province_county FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.permanent_address_id referenced"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List all the student details in reversed lexicographical order.', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "predict": "SELECT other_student_details FROM Students ORDER BY last_name DESC CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What other details can you tell me about students in reverse alphabetical order?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "predict": "SELECT other_student_details FROM students ORDER BY last_name DESC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Describe the section h.', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "predict": "SELECT section_description FROM  Sections WHERE section_name  =  \"h\"átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the description for the section named h?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "predict": "SELECT section_description FROM  Sections WHERE section_name  =  \"h\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582.', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "predict": "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country  =  \"Haiti\") OR cell_mobile_number  =  \"09700166582\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582?', 'db_id':'student_transcripts_tracking', 'db_schema': {'foreign key': ['degree_programs.department_id->departments.department_id','sections.course_id->courses.course_id','students.permanent_address_id->addresses.address_id','students.current_address_id->addresses.address_id','student_enrolment.student_id->students.student_id','student_enrolment.semester_id->semesters.semester_id','student_enrolment.degree_program_id->degree_programs.degree_program_id','student_enrolment_courses.student_enrolment_id->student_enrolment.student_enrolment_id','student_enrolment_courses.course_id->courses.course_id', 'transcript_contents.transcript_id->transcripts.transcript_id', 'transcript_contents.student_course_id->student_enrolment_courses.student_course_id'], 'primary key': ['addresses.address_id', 'courses.course_id', 'departments.department_id', 'degree_programs.degree_program_id','sections.section_id','semesters.semester_id','students.student_id','student_enrolment.student_enrolment_id','student_enrolment_courses.student_course_id', 'transcripts.transcript_id'], 'tables': [{'table_name': 'addresses', 'column_names': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode','state province county', 'country', 'other address details']}, {'table_name': 'courses', 'column_names': ['course id', 'course name', 'course description', 'other details']}, {'table_name': 'departments', 'column_names': ['department id', 'department name', 'department description', 'other details']}, {'table_name': 'degree programs', 'column_names': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details']}, {'table_name':'sections', 'column_names': ['section id', 'course id','section name','section description', 'other details']}, {'table_name':'semesters', 'column_names': ['semester id','semester name','semester description', 'other details']}, {'table_name':'students', 'column_names': ['student id', 'current address id', 'permanent address id', 'first name','middle name', 'last name', 'cell mobile number', 'email address','ssn', 'date first registered', 'date left', 'other student details']}, {'table_name':'student enrolment', 'column_names': ['student enrolment id', 'degree program id','semester id','student id', 'other details']}, {'table_name':'student enrolment courses', 'column_names': ['student course id', 'course id','student enrolment id']}, {'table_name': 'transcripts', 'column_names': ['transcript id', 'transcript date', 'other details']}, {'table_name': 'transcript contents', 'column_names': ['student course id', 'transcript id']}]}}assistant\n\n", "label": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "predict": "SELECT first_name FROM students WHERE permanent_address_id  =  (SELECT address_id FROM addresses WHERE country  =  'Haiti') OR cell_mobile_number  =  09700166582"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the title of all cartoons in alphabetical order.', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT Title FROM Cartoon ORDER BY title", "predict": "SELECT title FROM cartoon ORDER BY title"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the titles of the cartoons sorted alphabetically?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT Title FROM Cartoon ORDER BY title", "predict": "SELECT title FROM cartoon ORDER BY title"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List all cartoon directed by \"Ben Jones\".', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "predict": "SELECT title FROM cartoon WHERE directedBy  =  \"Ben Jones\"átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of all cartoons directed by Ben Jones?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "predict": "SELECT title FROM cartoon WHERE directedBy  =  \"Ben Jones\"?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many cartoons were written by \"Joseph Kuhr\"?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "predict": "SELECT count(*) FROM cartoon WHERE writtenBy  =  \"Joseph Kuhr\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the number of cartoones written by Joseph Kuhr?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "predict": "SELECT count(*) FROM cartoon WHERE writtenBy  =  \"Joseph Kuhr\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'list all cartoon titles and their directors ordered by their air date', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT title,  Directed_by FROM Cartoon ORDER BY Original_air_date", "predict": "SELECT title,  directed_by FROM cartoon ORDER BY original_air_date"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name and directors of all the cartoons that are ordered by air date?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT title,  Directed_by FROM Cartoon ORDER BY Original_air_date", "predict": "SELECT title,  directed_by FROM cartoon ORDER BY original_air_date"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "predict": "SELECT title FROM cartoon WHERE directedBy  =  \"Ben Jones\" OR directedBy  =  \"Brandon Vietti\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "predict": "SELECT title FROM cartoon WHERE directedBy  =  \"Ben Jones\" OR directedBy  =  \"Brandon Vietti\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which country has the most of TV Channels? List the country and number of TV Channels it has.', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT Country,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "predict": "SELECT country,  count(*) FROM tv_channel GROUP BY country ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the country with the most number of TV Channels and how many does it have?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT Country,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "predict": "SELECT country,  count(*) FROM tv_channel GROUP BY country ORDER BY count(*) DESC LIMIT 1 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the number of different series names and contents in the TV Channel table.', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT count(DISTINCT series_name),  count(DISTINCT content) FROM TV_Channel;", "predict": "SELECT count(DISTINCT series_name),  count(DISTINCT content) FROM tv_channel"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many different series and contents are listed in the TV Channel table?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT count(DISTINCT series_name),  count(DISTINCT content) FROM TV_Channel;", "predict": "SELECT count(DISTINCT series_name),  count(DISTINCT content) FROM tv_channel"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the content of TV Channel with serial name \"Sky Radio\"?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "predict": "SELECT content FROM tv_channel WHERE series_name  =  \"Sky Radio\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the content of the series Sky Radio?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "predict": "SELECT content FROM tv_channel WHERE series_name  =  'Sky Radio'?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the Package Option of TV Channel with serial name \"Sky Radio\"?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "predict": "SELECT package_option FROM tv_channel WHERE series_name  =  \"Sky Radio\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the Package Options of the TV Channels whose series names are Sky Radio?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "predict": "SELECT Package_option FROM tv_channel WHERE Series_name LIKE 'Sky Radio'?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many TV Channel using language English?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "predict": "SELECT count(*) FROM tv_channel WHERE language  =  'English'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many TV Channels use the English language?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "predict": "SELECT count(*) FROM tv_channel WHERE language  =  \"english\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the language used least number of TV Channel. List language and number of TV Channel.', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT LANGUAGE,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "predict": "SELECT language,  count(*) FROM tv_channel GROUP BY language ORDER BY count(*) ASC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the languages used by the least number of TV Channels and how many channels use it?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT LANGUAGE,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "predict": "SELECT language,  count(*) FROM tv_channel GROUP BY language ORDER BY count(*) ASC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List each language and the number of TV Channels using it.', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT LANGUAGE,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "predict": "SELECT language,  count(*) FROM tv_channel GROUP BY language"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'For each language, list the number of TV Channels that use it.', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT LANGUAGE,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "predict": "SELECT language,  count(*) FROM tv_channel GROUP BY language"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel\\'s series name.', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "predict": "SELECT T2.series_name FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T1.title  =  \"The Rise of the Blue Beetle!\"?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "predict": "SELECT T2.series_name FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id JOIN tv_series AS T3 ON T2.id  =  T3.channel WHERE T1.title  =  \"The Rise of the Blue Beetle\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "predict": "SELECT T1.title FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T2.series_name  =  \"Sky Radio\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "predict": "SELECT T1.title FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T2.series_name  =  \"Sky Radio\"átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the Episode of all TV series sorted by rating.', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT Episode FROM TV_series ORDER BY rating", "predict": "SELECT Episode FROM tv_series ORDER BY rating"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are all of the episodes ordered by ratings?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT Episode FROM TV_series ORDER BY rating", "predict": "SELECT Episode FROM tv_series ORDER BY Rating"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"List top 3 highest Rating  TV series. List the TV series's Episode and Rating.\", 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT Episode,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "predict": "SELECT Episode,  Rating FROM tv_series ORDER BY Rating DESC LIMIT 3"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are 3 most highly rated episodes in the TV series table and what were those ratings?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT Episode,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "predict": "SELECT episode,  rating FROM tv_series ORDER BY rating DESC LIMIT 3"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is minimum and maximum share of TV series?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT max(SHARE), min(SHARE) FROM TV_series;", "predict": "SELECT min(share),  max(share) FROM tv_series"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the maximum and minimum share for the TV series?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT max(SHARE), min(SHARE) FROM TV_series;", "predict": "SELECT max(Share),  min(Share) FROM tv_series"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the air date of TV series with Episode \"A Love of a Lifetime\"?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "predict": "SELECT T1.Air_Date FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T1.Episode  =  \"A Love of a Lifetime\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'When did the episode \"A Love of a Lifetime\" air?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "predict": "SELECT T1.Air_Date FROM tv_series AS T1 JOIN tv_series AS T2 ON T1.id  =  T2.channel WHERE T2.episode  =  \"A Love of a Lifetime\"?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "predict": "SELECT t2.weekly_rank FROM tv_series AS t1 JOIN tv_series AS t2 ON t1.id  =  t2.channel WHERE t1.episode  =  \"A Love of a Lifetime\"?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the weekly rank for the episode \"A Love of a Lifetime\"?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "predict": "SELECT Weekly_Rank FROM tv_series WHERE Episode  =  \"A Love of a Lifetime\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel\\'s series name.', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "predict": "SELECT T2.series_name FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T1.episode  =  \"A Love of a Lifetime\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name of the series that has the episode \"A Love of a Lifetime\"?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "predict": "SELECT series_name FROM tv_series WHERE episode  =  \"A Love of a Lifetime\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "predict": "SELECT T2.episode FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T1.share  =  \"Sky Radio\" CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the episode for the TV series named \"Sky Radio\"?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "predict": "SELECT T2.episode FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.id  =  T2.channel WHERE T1.series_name  =  \"Sky Radio\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the number of cartoons directed by each of the listed directors.', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT count(*),  Directed_by FROM cartoon GROUP BY Directed_by", "predict": "SELECT count(*),  directed_by FROM cartoon GROUP BY directed_by"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many cartoons did each director create?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT count(*),  Directed_by FROM cartoon GROUP BY Directed_by", "predict": "SELECT directed_by,  count(*) FROM cartoon GROUP BY directed_by CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the production code and channel of the most recently aired cartoon.', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "select production_code,  channel from cartoon order by original_air_date desc limit 1", "predict": "SELECT production_code,  channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the produdction code and channel of the most recent cartoon?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "select production_code,  channel from cartoon order by original_air_date desc limit 1", "predict": "SELECT production_code,  channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the package choice and series name of the TV channel that has high definition TV.', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT package_option,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "predict": "SELECT package_option,  series_name FROM tv_channel WHERE Hight_definition_TV  =  'Yes'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the package options and the name of the series for the TV Channel that supports high definition TV?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT package_option,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "predict": "SELECT package_option,  series_name FROM tv_channel WHERE HDTV  =  'Yes'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"which countries' tv channels are playing some cartoon written by Todd Casey?\", 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "predict": "SELECT T1.country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel WHERE T2.written_by  =  'Todd Casey'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the countries that have cartoons on TV that were written by Todd Casey?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "predict": "SELECT country FROM cartoon WHERE written_by  =  'Todd Casey'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"which countries' tv channels are not playing any cartoon written by Todd Casey?\", 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "predict": "SELECT country FROM tv_channel EXCEPT SELECT T1.country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel WHERE T2.written_by  =  'Todd Casey'?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the countries that are not playing cartoons written by Todd Casey?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "predict": "SELECT country FROM tv_channel EXCEPT SELECT country FROM cartoon WHERE written_by  =  'Todd Casey'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT T1.series_name,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "predict": "SELECT T1.series_name,  T1.country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel WHERE T2.directed_by  =  \"Ben Jones\" INTERSECT SELECT T1.series_name,  T1.country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel WHERE T2.directed_by  =  \"Michael Chang\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT T1.series_name,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "predict": "SELECT T1.series_name,  T1.country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T2.channel  =  T1.id WHERE T2.directed_by  =  \"Ben Jones\" INTERSECT SELECT T1.series_name,  T1.country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T2.channel  =  T1.id WHERE T2.directed_by  =  \"Michael Chang\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'find the pixel aspect ratio and nation of the tv channels that do not use English.', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT Pixel_aspect_ratio_PAR,  country FROM tv_channel WHERE LANGUAGE!= 'English'", "predict": "SELECT par,  country FROM tv_channel WHERE language!= 'English'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the pixel aspect ratio and country of origin for all TV channels that do not use English?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT Pixel_aspect_ratio_PAR,  country FROM tv_channel WHERE LANGUAGE!= 'English'", "predict": "SELECT par,  country FROM tv_channel WHERE language!= 'english'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'find id of the tv channels that from the countries where have more than two tv channels.', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "predict": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the ids of all tv channels that have more than 2 TV channels?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "predict": "SELECT id FROM tv_channel GROUP BY id HAVING count(*)  >  2átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'find the id of tv channels that do not play any cartoon directed by Ben Jones.', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "predict": "SELECT id FROM tv_channel EXCEPT SELECT t1.id FROM tv_channel AS t1 JOIN cartoon AS t2 ON t1.id  =  t2.channel WHERE t2.directed_by  =  \"Ben Jones\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "predict": "SELECT id FROM tv_channel EXCEPT SELECT channel FROM cartoon WHERE directedBy  =  \"Ben Jones\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'find the package option of the tv channel that do not have any cartoon directed by Ben Jones.', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "predict": "SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  \"Ben Jones\")?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?', 'db_id': 'tvshow', 'db_schema': {'foreign key': ['tv_series.channel->tv_channel.id', 'cartoon.channel->tv_channel.id'], 'primary key': ['tv_channel.id', 'tv_series.id', 'cartoon.id'], 'tables': [{'table_name': 'tv channel', 'column_names': ['id','series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option']}, {'table_name': 'tv series', 'column_names': ['id', 'episode', 'air date', 'rating','share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel']}, {'table_name': 'cartoon', 'column_names': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}]}}assistant\n\n", "label": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "predict": "SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  \"Ben Jones\")"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many poker players are there?', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT count(*) FROM poker_player", "predict": "SELECT count(*) FROM poker_player"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of poker players.', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT count(*) FROM poker_player", "predict": "SELECT count(*) FROM poker_playerreferenceSELECT * FROM people"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the earnings of poker players in descending order.', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "predict": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the earnings of poker players, ordered descending by value?', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "predict": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the final tables made and the best finishes of poker players.', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT Final_Table_Made,  Best_Finish FROM poker_player", "predict": "SELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the final tables made and best finishes for all poker players?', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT Final_Table_Made,  Best_Finish FROM poker_player", "predict": "SELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average earnings of poker players?', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT avg(Earnings) FROM poker_player", "predict": "SELECT avg(Earnings) FROM poker_player?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the average earnings across all poker players.', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT avg(Earnings) FROM poker_player", "predict": "SELECT avg(Earnings) FROM poker_player"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the money rank of the poker player with the highest earnings?', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "predict": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the money rank of the player with the greatest earnings.', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "predict": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the maximum number of final tables made among poker players with earnings less than 200000?', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "predict": "SELECT max(T1.final_table_made) FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.earnings  <  200000"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the maximum final tables made across all poker players who have earnings below 200000.', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "predict": "SELECT max(T1.final_table_made) FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.earnings  <  200000?>\r\n\r\n CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of poker players?', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "predict": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the names of all the poker players.', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "predict": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_IDátky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of poker players whose earnings is higher than 300000?', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "predict": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE Earnings  >  300000"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the names of poker players who have earnings above 300000.', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "predict": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE Earnings  >  300000átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the names of poker players ordered by the final tables made in ascending order.', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "predict": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1Final_Table_Made ASC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of poker players, ordered ascending by the number of final tables they have made?', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "predict": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY Final_Table_Made ASC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the birth date of the poker player with the lowest earnings?', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "predict": "SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY Earnings ASC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the birth date of the poker player with the lowest earnings.', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "predict": "SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY Earnings ASC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the money rank of the tallest poker player?', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "predict": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the money rank of the poker player with the greatest height.', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "predict": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average earnings of poker players with height higher than 200?', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "predict": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give average earnings of poker players who are taller than 200.', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "predict": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of poker players in descending order of earnings?', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "predict": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY Earnings DESC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the names of poker players sorted by their earnings descending.', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "predict": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Earnings DESC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are different nationalities of people and the corresponding number of people from each nation?', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT Nationality,  COUNT(*) FROM people GROUP BY Nationality", "predict": "SELECT Nationality,  COUNT(*) FROM people GROUP BY Nationality"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many people are there of each nationality?', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT Nationality,  COUNT(*) FROM people GROUP BY Nationality", "predict": "SELECT Nationality,  COUNT(*) FROM people GROUP BY Nationality"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the most common nationality of people?', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "predict": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the nationality that is most common across all people.', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "predict": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the nationalities that are shared by at least two people?', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "predict": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the nationalities for which there are two or more people.', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "predict": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2 CLIIIK CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the names and birth dates of people in ascending alphabetical order of name.', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT Name,  Birth_Date FROM people ORDER BY Name ASC", "predict": "SELECT Name,  Birth_Date FROM people ORDER BY Name ASC CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names and birth dates of people, ordered by their names in alphabetical order?', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT Name,  Birth_Date FROM people ORDER BY Name ASC", "predict": "SELECT Name,  Birth_Date FROM People ORDER BY Name ASC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show names of people whose nationality is not \"Russia\".', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT Name FROM people WHERE Nationality!= \"Russia\"", "predict": "SELECT Name FROM People WHERE Nationality!= \"Russia\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of people who are not from Russia?', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT Name FROM people WHERE Nationality!= \"Russia\"", "predict": "SELECT Name FROM People WHERE Nationality!= \"Russia\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the names of people that are not poker players.', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "predict": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of people who do not play poker?', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "predict": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)reference"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many distinct nationalities are there?', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT count(DISTINCT Nationality) FROM people", "predict": "SELECT count(DISTINCT Nationality) FROM people"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of different nationalities.', 'db_id': 'poker_player', 'db_schema': {'foreign key': ['poker_player.people_id->people.people_id'], 'primary key': ['poker_player.poker_player_id', 'people.people_id'], 'tables': [{'table_name': 'poker player', 'column_names': ['poker player id', 'people id', 'final table made', 'best finish','money rank', 'earnings']}, {'table_name': 'people', 'column_names': ['people id', 'nationality', 'name', 'birth date', 'height']}]}}assistant\n\n", "label": "SELECT count(DISTINCT Nationality) FROM people", "predict": "SELECT count(DISTINCT Nationality) FROM people"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many states are there?', 'db_id': 'voter_1', 'db_schema': {'foreign key': ['votes.contestant_number->contestants.contestant_number', 'votes.state->area_code_state.state'], 'primary key': ['area_code_state.area_code', 'contestants.contestant_number', 'votes.vote_id'], 'tables': [{'table_name': 'area code state', 'column_names': ['area code','state']}, {'table_name': 'contestants', 'column_names': ['contestant number', 'contestant name']}, {'table_name': 'votes', 'column_names': ['vote id', 'phone number','state', 'contestant number', 'created']}]}}assistant\n\n", "label": "SELECT count(*) FROM area_code_state", "predict": "SELECT count(DISTINCT State) FROM area_code_state"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the contestant numbers and names, ordered by contestant name descending.', 'db_id': 'voter_1', 'db_schema': {'foreign key': ['votes.contestant_number->contestants.contestant_number', 'votes.state->area_code_state.state'], 'primary key': ['area_code_state.area_code', 'contestants.contestant_number', 'votes.vote_id'], 'tables': [{'table_name': 'area code state', 'column_names': ['area code','state']}, {'table_name': 'contestants', 'column_names': ['contestant number', 'contestant name']}, {'table_name': 'votes', 'column_names': ['vote id', 'phone number','state', 'contestant number', 'created']}]}}assistant\n\n", "label": "SELECT contestant_number,  contestant_name FROM contestants ORDER BY contestant_name DESC", "predict": "SELECT Contestant_Number,  Contestant_Name FROM Contestants ORDER BY Contestant_Name DESC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the vote ids, phone numbers and states of all votes.', 'db_id': 'voter_1', 'db_schema': {'foreign key': ['votes.contestant_number->contestants.contestant_number', 'votes.state->area_code_state.state'], 'primary key': ['area_code_state.area_code', 'contestants.contestant_number', 'votes.vote_id'], 'tables': [{'table_name': 'area code state', 'column_names': ['area code','state']}, {'table_name': 'contestants', 'column_names': ['contestant number', 'contestant name']}, {'table_name': 'votes', 'column_names': ['vote id', 'phone number','state', 'contestant number', 'created']}]}}assistant\n\n", "label": "SELECT vote_id,  phone_number,  state FROM votes", "predict": "SELECT Vote_ID,  Phone_Number,  STATE FROM Votes"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the maximum and minimum values of area codes?', 'db_id': 'voter_1', 'db_schema': {'foreign key': ['votes.contestant_number->contestants.contestant_number', 'votes.state->area_code_state.state'], 'primary key': ['area_code_state.area_code', 'contestants.contestant_number', 'votes.vote_id'], 'tables': [{'table_name': 'area code state', 'column_names': ['area code','state']}, {'table_name': 'contestants', 'column_names': ['contestant number', 'contestant name']}, {'table_name': 'votes', 'column_names': ['vote id', 'phone number','state', 'contestant number', 'created']}]}}assistant\n\n", "label": "SELECT max(area_code),  min(area_code) FROM area_code_state", "predict": "SELECT max(area_code),  min(area_code) FROM area_code_state"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What is last date created of votes from the state 'CA'?\", 'db_id': 'voter_1', 'db_schema': {'foreign key': ['votes.contestant_number->contestants.contestant_number', 'votes.state->area_code_state.state'], 'primary key': ['area_code_state.area_code', 'contestants.contestant_number', 'votes.vote_id'], 'tables': [{'table_name': 'area code state', 'column_names': ['area code','state']}, {'table_name': 'contestants', 'column_names': ['contestant number', 'contestant name']}, {'table_name': 'votes', 'column_names': ['vote id', 'phone number','state', 'contestant number', 'created']}]}}assistant\n\n", "label": "SELECT max(created) FROM votes WHERE state  =  'CA'", "predict": "SELECT max(T1.Created) FROM Votes AS T1 JOIN Area_code_State AS T2 ON T1.State  =  T2.State WHERE T2.State  =  'CA'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What are the names of the contestants whose names are not 'Jessie Alloway'\", 'db_id': 'voter_1', 'db_schema': {'foreign key': ['votes.contestant_number->contestants.contestant_number', 'votes.state->area_code_state.state'], 'primary key': ['area_code_state.area_code', 'contestants.contestant_number', 'votes.vote_id'], 'tables': [{'table_name': 'area code state', 'column_names': ['area code','state']}, {'table_name': 'contestants', 'column_names': ['contestant number', 'contestant name']}, {'table_name': 'votes', 'column_names': ['vote id', 'phone number','state', 'contestant number', 'created']}]}}assistant\n\n", "label": "SELECT contestant_name FROM contestants WHERE contestant_name!= 'Jessie Alloway'", "predict": "SELECT Contestant_Name FROM Contestants WHERE Contestant_Name!= \"Jessie Alloway\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the distinct states and create time of all votes?', 'db_id': 'voter_1', 'db_schema': {'foreign key': ['votes.contestant_number->contestants.contestant_number', 'votes.state->area_code_state.state'], 'primary key': ['area_code_state.area_code', 'contestants.contestant_number', 'votes.vote_id'], 'tables': [{'table_name': 'area code state', 'column_names': ['area code','state']}, {'table_name': 'contestants', 'column_names': ['contestant number', 'contestant name']}, {'table_name': 'votes', 'column_names': ['vote id', 'phone number','state', 'contestant number', 'created']}]}}assistant\n\n", "label": "SELECT DISTINCT state,  created FROM votes", "predict": "SELECT DISTINCT T1.State,  T2.Created FROM area_code_state AS T1 JOIN votes AS T2 ON T1.State  =  T2.State"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the contestant numbers and names of the contestants who had at least two votes?', 'db_id': 'voter_1', 'db_schema': {'foreign key': ['votes.contestant_number->contestants.contestant_number', 'votes.state->area_code_state.state'], 'primary key': ['area_code_state.area_code', 'contestants.contestant_number', 'votes.vote_id'], 'tables': [{'table_name': 'area code state', 'column_names': ['area code','state']}, {'table_name': 'contestants', 'column_names': ['contestant number', 'contestant name']}, {'table_name': 'votes', 'column_names': ['vote id', 'phone number','state', 'contestant number', 'created']}]}}assistant\n\n", "label": "SELECT T1.contestant_number, T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2", "predict": "SELECT T2.Contestant_Number,  T2.Contestant_Name FROM votes AS T1 JOIN Contestants AS T2 ON T1.Contestant_Number  =  T2.Contestant_Number GROUP BY T1.Contestant_Number HAVING COUNT(*)  >=  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?', 'db_id': 'voter_1', 'db_schema': {'foreign key': ['votes.contestant_number->contestants.contestant_number', 'votes.state->area_code_state.state'], 'primary key': ['area_code_state.area_code', 'contestants.contestant_number', 'votes.vote_id'], 'tables': [{'table_name': 'area code state', 'column_names': ['area code','state']}, {'table_name': 'contestants', 'column_names': ['contestant number', 'contestant name']}, {'table_name': 'votes', 'column_names': ['vote id', 'phone number','state', 'contestant number', 'created']}]}}assistant\n\n", "label": "SELECT T1.contestant_number, T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1", "predict": "SELECT contestant_number,  contestant_name FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes GROUP BY contestant_number ORDER BY count(*) DESC LIMIT 1) ORDER BY count(*) ASC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What are the number of votes from state 'NY' or 'CA'?\", 'db_id': 'voter_1', 'db_schema': {'foreign key': ['votes.contestant_number->contestants.contestant_number', 'votes.state->area_code_state.state'], 'primary key': ['area_code_state.area_code', 'contestants.contestant_number', 'votes.vote_id'], 'tables': [{'table_name': 'area code state', 'column_names': ['area code','state']}, {'table_name': 'contestants', 'column_names': ['contestant number', 'contestant name']}, {'table_name': 'votes', 'column_names': ['vote id', 'phone number','state', 'contestant number', 'created']}]}}assistant\n\n", "label": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'", "predict": "SELECT count(*) FROM votes WHERE State  =  'NY' OR State  =  'CA'?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many contestants did not get voted?', 'db_id': 'voter_1', 'db_schema': {'foreign key': ['votes.contestant_number->contestants.contestant_number', 'votes.state->area_code_state.state'], 'primary key': ['area_code_state.area_code', 'contestants.contestant_number', 'votes.vote_id'], 'tables': [{'table_name': 'area code state', 'column_names': ['area code','state']}, {'table_name': 'contestants', 'column_names': ['contestant number', 'contestant name']}, {'table_name': 'votes', 'column_names': ['vote id', 'phone number','state', 'contestant number', 'created']}]}}assistant\n\n", "label": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )", "predict": "SELECT count(*) FROM Contestants WHERE Contestant_Number NOT IN (SELECT Contestant_Number FROM Votes)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the area code in which the most voters voted?', 'db_id': 'voter_1', 'db_schema': {'foreign key': ['votes.contestant_number->contestants.contestant_number', 'votes.state->area_code_state.state'], 'primary key': ['area_code_state.area_code', 'contestants.contestant_number', 'votes.vote_id'], 'tables': [{'table_name': 'area code state', 'column_names': ['area code','state']}, {'table_name': 'contestants', 'column_names': ['contestant number', 'contestant name']}, {'table_name': 'votes', 'column_names': ['vote id', 'phone number','state', 'contestant number', 'created']}]}}assistant\n\n", "label": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.Area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.State  =  T2.State GROUP BY T1.Area_code ORDER BY COUNT(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?\", 'db_id': 'voter_1', 'db_schema': {'foreign key': ['votes.contestant_number->contestants.contestant_number', 'votes.state->area_code_state.state'], 'primary key': ['area_code_state.area_code', 'contestants.contestant_number', 'votes.vote_id'], 'tables': [{'table_name': 'area code state', 'column_names': ['area code','state']}, {'table_name': 'contestants', 'column_names': ['contestant number', 'contestant name']}, {'table_name': 'votes', 'column_names': ['vote id', 'phone number','state', 'contestant number', 'created']}]}}assistant\n\n", "label": "SELECT T2.created,  T2.state,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "predict": "SELECT T1.Vote_ID,  T1.Phone_Number,  T1.State,  T1.Created FROM Votes AS T1 JOIN Contestants AS T2 ON T1.Contestant_Number  =  T2.Contestant_Number WHERE T2.Contestant_Name  =  'Tabatha Gehling'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.\", 'db_id': 'voter_1', 'db_schema': {'foreign key': ['votes.contestant_number->contestants.contestant_number', 'votes.state->area_code_state.state'], 'primary key': ['area_code_state.area_code', 'contestants.contestant_number', 'votes.vote_id'], 'tables': [{'table_name': 'area code state', 'column_names': ['area code','state']}, {'table_name': 'contestants', 'column_names': ['contestant number', 'contestant name']}, {'table_name': 'votes', 'column_names': ['vote id', 'phone number','state', 'contestant number', 'created']}]}}assistant\n\n", "label": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "predict": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.area_code  =  T2.state WHERE T2.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.area_code  =  T2.state WHERE T2.contestant_name  =  'Kelly Clauss'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Return the names of the contestants whose names contain the substring 'Al'.\", 'db_id': 'voter_1', 'db_schema': {'foreign key': ['votes.contestant_number->contestants.contestant_number', 'votes.state->area_code_state.state'], 'primary key': ['area_code_state.area_code', 'contestants.contestant_number', 'votes.vote_id'], 'tables': [{'table_name': 'area code state', 'column_names': ['area code','state']}, {'table_name': 'contestants', 'column_names': ['contestant number', 'contestant name']}, {'table_name': 'votes', 'column_names': ['vote id', 'phone number','state', 'contestant number', 'created']}]}}assistant\n\n", "label": "select contestant_name from contestants where contestant_name like \"%al%\"", "predict": "SELECT Contestant_name FROM Contestants WHERE Contestant_name LIKE '%Al%'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of all the countries that became independent after 1950?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name FROM country WHERE IndepYear  >  1950", "predict": "SELECT name FROM country WHERE independentyear  >  1950 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the names of the nations that were founded after 1950.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name FROM country WHERE IndepYear  >  1950", "predict": "SELECT name FROM country WHERE independentyear  >  1950"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many countries have a republic as their form of government?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "predict": "SELECT count(*) FROM country WHERE governmentform  =  \"republic\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many countries have governments that are republics?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "predict": "SELECT count(*) FROM country WHERE Governmentform  =  \"Republic\"?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the total surface area of the countries in the Caribbean region?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "predict": "SELECT sum(surfacearea) FROM country WHERE region  =  \"Caribbean\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How much surface area do the countires in the Carribean cover together?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "predict": "SELECT sum(surfacearea) FROM country WHERE continent  =  \"North America\" AND region  =  \"Caribbean\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which continent is Anguilla in?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "predict": "SELECT continent FROM country WHERE name  =  \"Anguilla\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the continent name which Anguilla belongs to?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "predict": "SELECT T1.continent FROM country AS T1 JOIN city AS T2 ON T1.code  =  T2.countrycode WHERE T1.name  =  \"Anguilla\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which region is the city Kabul located in?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "predict": "SELECT T2.region FROM city AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.name  =  'Kabul'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What region is Kabul in?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "predict": "SELECT region FROM country WHERE capital = \"Kabul\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which language is the most popular in Aruba?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "predict": "SELECT T2.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T2.name  =  'Aruba' ORDER BY Percentage DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What language is predominantly spoken in Aruba?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "predict": "SELECT T2.language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T2.name  =  'Aruba' ORDER BY T1.percentage DESC LIMIT 1átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the population and life expectancies in Brazil?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Population,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "predict": "SELECT Population,  LifeExpectancy FROM country WHERE continent  =  \"South America\" AND name  =  \"Brazil\"?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give me Brazil’s population and life expectancies.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Population,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "predict": "SELECT Population,  LifeExpectancy FROM country WHERE name  =  'Brazil'?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the region and population of Angola?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Population,  Region FROM country WHERE Name  =  \"Angola\"", "predict": "SELECT region,  population FROM country WHERE name  =  'Angola'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What region does Angola belong to and what is its population?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Population,  Region FROM country WHERE Name  =  \"Angola\"", "predict": "SELECT Region,  Population FROM country WHERE name  =  'Angola'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average expected life expectancy for countries in the region of Central Africa?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "predict": "SELECT avg(lifeexpectancy) FROM country WHERE region  =  \"Central Africa\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How long is the people’s average life expectancy in Central Africa?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "predict": "SELECT avg(lifeexpectancy) FROM country WHERE continent  =  \"Central Africa\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name of country that has the shortest life expectancy in Asia?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "predict": "SELECT name FROM country WHERE continent  =  'Asia' ORDER BY lifeexpectancy LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the name of the country in Asia with the lowest life expectancy.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "predict": "SELECT name FROM country WHERE continent  =  'Asia' ORDER BY lifeexpectancy LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the total population and maximum GNP in Asia?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT sum(Population),  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "predict": "SELECT sum(population),  max(gnp) FROM country WHERE continent  =  'Asia'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many people live in Asia, and what is the largest GNP among them?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT sum(Population),  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "predict": "SELECT max(population),  max(gnp) FROM country WHERE continent  =  'Asia' CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average life expectancy in African countries that are republics?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "predict": "SELECT avg(T1.lifeexpectancy) FROM country AS T1 JOIN country AS T2 ON T1.code2  =  T2.capital JOIN city AS T3 ON T3.countrycode  =  T2.code WHERE T1.governmentform  =  \"Republic\" AND T1.continent  =  \"Africa\"?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the average life expectancy for countries in Africa which are republics?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "predict": "SELECT avg(lifeexpectancy) FROM country WHERE governmentform  =  \"Republic\" AND continent  =  \"Africa\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the total surface area of the continents Asia and Europe?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "predict": "SELECT sum(surfacearea) FROM country WHERE continent  =  'Asia' OR continent  =  'Europe'?>\r\n\r\n CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the total surface area covered by countries in Asia or Europe.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "predict": "SELECT sum(surfacearea) FROM country WHERE continent  =  'Asia' OR continent  =  'Europe'átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many people live in Gelderland district?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "predict": "SELECT sum(population) FROM city WHERE district  =  \"Gelderland\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the total population of Gelderland district?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "predict": "SELECT sum(population) FROM city WHERE district  =  \"Gelderland\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average GNP and total population in all nations whose government is US territory?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT avg(GNP),  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "predict": "SELECT avg(gnp),  sum(population) FROM country WHERE governmentform  =  \"US territory\"ıldığı"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the mean GNP and total population of nations which are considered US territory.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT avg(GNP),  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "predict": "SELECT avg(t1.GNP),  sum(t2.population) FROM country AS t1 JOIN city AS t2 ON t1.code2  =  t2.countrycode WHERE t1.name  =  \"United States\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many unique languages are spoken in the world?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "predict": "SELECT count(DISTINCT language) FROM countrylanguageSELECT FROM countrylanguage"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the number of distinct languages used around the world?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "predict": "SELECT count(DISTINCT language) FROM countrylanguage"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many type of governments are in Africa?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "predict": "SELECT count(DISTINCT governmentform) FROM country WHERE continent  =  'Africa'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many different forms of governments are there in Africa?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "predict": "SELECT count(DISTINCT governmentform) FROM country WHERE continent  =  'Africa'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the total number of languages used in Aruba?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "predict": "SELECT sum(percentage) FROM countrylanguage WHERE countrycode = \"AR\"?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many languages are spoken in Aruba?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "predict": "SELECT count(*) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T2.name  =  'Aruba'átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many official languages does Afghanistan have?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "predict": "SELECT count(*) FROM countrylanguage WHERE countrycode = \"AF\" AND isofficial  =  'yes'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many official languages are spoken in Afghanistan?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "predict": "SELECT count(*) FROM countrylanguage WHERE countrycode = \"AF\" AND isofficial  =  'YES' CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is name of the country that speaks the largest number of languages?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "predict": "SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2  =  T2.countrycode GROUP BY T1.code2 ORDER BY T2.percentage DESC LIMIT 1?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the name of the nation that uses the greatest amount of languages.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "predict": "SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2  =  T2.countrycode GROUP BY T1.code2 ORDER BY T2.percentage DESC LIMIT 1?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which continent has the most diverse languages?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "predict": "SELECT T1.continent FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code GROUP BY T1.countrycode ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which continent speaks the most languages?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "predict": "SELECT T1.continent FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code GROUP BY T1.countrycode ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many countries speak both English and Dutch?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "predict": "SELECT count(*) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  \"english\" AND T2.name  =  \"Netherlands\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the number of nations that use English and Dutch?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "predict": "SELECT count(*) FROM CountryLanguage WHERE percentage  >  50 AND language  =  'Dutch' INTERSECT SELECT count(*) FROM CountryLanguage WHERE percentage  >  50 AND language  =  'English'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of nations speak both English and French?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "predict": "SELECT T1.Name FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2  =  T2.CountryCode WHERE T2.Language  =  \"French\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the names of nations that speak both English and French.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "predict": "SELECT T1.Name FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2  =  T2.Countrycode WHERE T2.Language  =  \"english\" INTERSECT SELECT T1.Name FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2  =  T2.Countrycode WHERE T2.Language  =  \"French\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of nations where both English and French are official languages?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "predict": "SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2  =  T2.countrycode WHERE T2.language  =  \"english\" AND T2.isofficial  =  1 INTERSECT SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2  =  T2.countrycode WHERE T2.language  =  \"french\" AND T2.isofficial  =  1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the names of countries with English and French as official languages.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "predict": "SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2  =  T2.countrycode WHERE T2.language  =  \"english\" AND T2.isofficial  =  1 INTERSECT SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2  =  T2.countrycode WHERE T2.language  =  \"french\" AND T2.isofficial  =  1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the number of distinct continents where Chinese is spoken?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "predict": "SELECT count(DISTINCT T1.continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2  =  T2.countrycode WHERE T2.language  =  \"Chinese\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many continents speak Chinese?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "predict": "SELECT count(T2.Continent) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  \"Chinese\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the regions that use English or Dutch?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "predict": "SELECT T1.region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2  =  T2.countrycode WHERE T2.language  =  \"english\" OR T2.language  =  \"dutch\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which regions speak Dutch or English?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "predict": "SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2  =  T2.countrycode WHERE T2.Language  =  \"Dutch\" OR T2.Language  =  \"English\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the countries where either English or Dutch is the official language?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"", "predict": "SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2  =  T2.countrycode WHERE T2.Language  =  \"english\" OR T2.Language  =  \"dutch\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which countries have either English or Dutch as an official language?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"", "predict": "SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2  =  T2.countrycode WHERE T2.language  =  \"english\" OR T2.language  =  \"dutch\"?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which language is the most popular on the Asian continent?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "predict": "SELECT T2.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T2.continent  =  \"Asia\" GROUP BY T1.Language ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the language that is used by the largest number of Asian nations?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "predict": "SELECT T2.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T2.continent  =  \"Asia\" GROUP BY T2.language ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which languages are spoken by only one country in republic governments?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "predict": "SELECT T2.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.GovernmentForm  =  \"Republic\" GROUP BY T1.Language HAVING COUNT(*)  =  1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What languages are only used by a single country with a republic government?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "predict": "SELECT T2.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.GovernmentForm  =  \"Republic\" GROUP BY T1.Language HAVING COUNT(*)  =  1 CLIIIK?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the city with the largest population that uses English.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT T1.Name,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "predict": "SELECT T1.name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.countrycode  =  T2.countrycode JOIN country AS T3 ON T1.countrycode  =  T3.code WHERE T2.language  =  'english' ORDER BY T1.population DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the most populace city that speaks English?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT T1.Name,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "predict": "SELECT T1.name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.countrycode  =  T2.countrycode WHERE T2.language  =  \"english\" ORDER BY T1.population DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the name, population and expected life length of asian country with the largest area?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name,  Population,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "predict": "SELECT name,  population,  lifeExpectancy FROM country WHERE continent  =  'Asia' ORDER BY surfaceArea DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the name, population, and life expectancy of the largest Asian country by land?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name,  Population,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "predict": "SELECT name,  population,  lifeexpectancy FROM country ORDER BY surfacearea DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is average life expectancy in the countries where English is not the official language?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "predict": "SELECT avg(T1.lifeexpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2  =  T2.countrycode WHERE T2.Language  =  \"english\" AND T2.IsOfficial  =  'no'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the mean life expectancy of countries in which English is not the official language.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "predict": "SELECT avg(T1.lifeexpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2  =  T2.countrycode WHERE T2.language!= \"English\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the total number of people living in the nations that do not use English?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "predict": "SELECT sum(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language  =  \"English\")"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many people live in countries that do not speak English?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "predict": "SELECT sum(population) FROM city WHERE countrycode NOT IN (SELECT countrycode FROM countrylanguage WHERE language  =  \"English\")"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the official language spoken in the country whose head of state is Beatrix?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "predict": "SELECT T1.Language FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.HeadOfState  =  \"Beatrix\" AND T1.IsOfficial  =  1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the official language used in the country the name of whose head of state is Beatrix.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "predict": "SELECT T1.Language FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.HeadOfState  =  \"Beatrix\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the total number of unique official languages spoken in the countries that are founded before 1930?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "predict": "SELECT count(DISTINCT T1.language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T2.indepdentyear  <  1930 AND T1.IsOfficial  =  1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'For the countries founded before 1930, what is the total number of distinct official languages?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "predict": "SELECT sum(T2.isofficial) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T2.indepdentyear  <  1930 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the countries that have greater surface area than any country in Europe?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "predict": "SELECT name FROM country WHERE surfacearea  >  (SELECT max(surfacearea) FROM country WHERE continent  =  'Europe')"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which countries have greater area than that of any country in Europe?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "predict": "SELECT name FROM country WHERE surfacearea  >  (SELECT max(surfacearea) FROM country WHERE continent  =  'Europe')"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the African countries that have a  population less than any country in Asia?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")", "predict": "SELECT * FROM country WHERE continent  =  'Africa' AND population  <  (SELECT min(population) FROM country WHERE continent  =  'Asia')"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which African countries have a smaller population than that of any country in Asia?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")", "predict": "SELECT code FROM country WHERE continent  =  'Africa' AND population  <  (SELECT min(population) FROM country WHERE continent  =  'Asia')"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which Asian countries have a population that is larger than any country in Africa?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "predict": "SELECT * FROM country WHERE continent  =  'Asia' AND population  >  (SELECT max(population) FROM country WHERE continent  =  'Africa')átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the Asian countries which have a population larger than that of any country in Africa?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")", "predict": "SELECT name FROM country WHERE continent  =  'Asia' AND population  >  (SELECT max(population) FROM country WHERE continent  =  'Africa')"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the country codes for countries that do not speak English?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "predict": "SELECT code2 FROM countrylanguage WHERE language!= \"english\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the country codes for countries that do not speak English.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "predict": "SELECT code2 FROM countrylanguage WHERE language!= \"english\" JOIN country ON countrylanguage.countrycode  =  country.code"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the country codes of countries where people use languages other than English?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE!= \"English\"", "predict": "SELECT code2 FROM countrylanguage WHERE percentage  >  1 INTERSECT SELECT code2 FROM country WHERE name  =  'England'átkyátky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the country codes for countries in which people speak langauges that are not English.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE!= \"English\"", "predict": "SELECT countrycode FROM countrylanguage WHERE language!= \"english\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the codes of the countries that do not speak English and whose government forms are not Republic?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Code FROM country WHERE GovernmentForm!= \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "predict": "SELECT code FROM country WHERE governmentform!= \"Republic\" AND countrylanguage.countrycode NOT IN (SELECT countrycode FROM countrylanguage WHERE language  =  \"English\")átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the codes of countries that do not speak English and do not have Republics for governments.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Code FROM country WHERE GovernmentForm!= \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "predict": "SELECT code FROM country EXCEPT SELECT code FROM countrylanguage WHERE language  =  \"English\" INTERSECT SELECT code FROM country WHERE GovernmentForm  =  \"Republic\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which cities are in European countries where English is not the official language?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "predict": "SELECT T1.name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.countrycode  =  T2.countrycode JOIN country AS T3 ON T1.countrycode  =  T3.code WHERE T2.language  =  \"english\" AND T3.continent  =  \"Europe\" AND T2.IsOfficial  =  0"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of cities in Europe for which English is not the official language?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "predict": "SELECT T1.name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.countrycode  =  T2.countrycode JOIN country AS T3 ON T1.countrycode  =  T3.code WHERE T2.IsOfficial  =  'No' AND T3.continent  =  'Europe'átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which unique cities are in Asian countries where Chinese is the official language?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "predict": "SELECT DISTINCT T1.name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.countrycode  =  T2.countrycode JOIN country AS T3 ON T2.countrycode  =  T3.code WHERE T2.language  =  \"Chinese\" AND T3.continent  =  \"Asia\" AND T3.governmentform  =  \"Republic\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the different names of cities that are in Asia and for which Chinese is the official language.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "predict": "SELECT DISTINCT T1.name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.countrycode  =  T2.countrycode JOIN country AS T3 ON T2.countrycode  =  T3.code WHERE T3.continent  =  'Asia' AND T2.language  =  'Chinese' CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the name, independence year, and surface area of the country with the smallest population?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name,  SurfaceArea,  IndepYear FROM country ORDER BY Population LIMIT 1", "predict": "SELECT name,  independenceyear,  surfacearea FROM country ORDER BY Population ASC LIMIT 1?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the name, year of independence, and surface area of the country that has the lowest population.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name,  SurfaceArea,  IndepYear FROM country ORDER BY Population LIMIT 1", "predict": "SELECT name,  independentyear,  surfacearea FROM country ORDER BY Population ASC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the population, name and leader of the country with the largest area?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name,  population,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "predict": "SELECT Population,  name,  headofstate FROM country ORDER BY surfacearea DESC LIMIT 1átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the name, population, and head of state for the country that has the largest area.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name,  population,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "predict": "SELECT name,  population,  headofstate FROM country ORDER BY surfacearea DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT COUNT(T2.Language),  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "predict": "SELECT T1.name,  T2.percentage FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode GROUP BY T2.countrycode HAVING sum(percentage)  >=  3"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of countries that speak more than 2 languages, as well as how many languages they speak?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT COUNT(T2.Language),  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "predict": "SELECT T1.name,  T2.percentage FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T2.percentage  >  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the number of cities in each district whose population is greater than the average population of cities?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT count(*),  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "predict": "SELECT district,  count(*) FROM city WHERE population  >  (SELECT avg(population) FROM city) GROUP BY district"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many cities in each district have a population that is above the average population across all cities?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT count(*),  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "predict": "SELECT district,  count(*) FROM city WHERE population  >  (SELECT avg(population) FROM city) GROUP BY district"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the government form name and total population for each government form whose average life expectancy is longer than 72.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT sum(Population),  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "predict": "SELECT governmentform,  sum(population) FROM country WHERE lifeexpectancy  >  72 GROUP BY governmentform"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT sum(Population),  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "predict": "SELECT governmentform,  sum(population) FROM country WHERE lifeexpectancy  >  72 GROUP BY governmentform"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT sum(Population),  avg(LifeExpectancy),  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "predict": "SELECT avg(lifeexpectancy),  sum(population) FROM country WHERE continent!= \" Antarctica\" AND lifeexpectancy  <  72 GROUP BY continent"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT sum(Population),  avg(LifeExpectancy),  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "predict": "SELECT continent,  sum(population),  avg(lifeexpectancy) FROM country WHERE lifeexpectancy  <  72 GROUP BY continent?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names and areas of countries with the top 5 largest area?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "predict": "SELECT name,  surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the names and surface areas of the 5 largest countries.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "predict": "SELECT name,  surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are names of countries with the top 3 largest population?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "predict": "SELECT name FROM country ORDER BY Population DESC LIMIT 3"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the names of the 3 most populated countries.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "predict": "SELECT name FROM country ORDER BY Population DESC LIMIT 3"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of the nations with the 3 lowest populations?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "predict": "SELECT name FROM country ORDER BY Population LIMIT 3"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the names of the 3 countries with the fewest people.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "predict": "SELECT name FROM country ORDER BY Population ASC LIMIT 3"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'how many countries are in Asia?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "predict": "SELECT count(*) FROM country WHERE continent  =  'Asia'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of countries in Asia.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "predict": "SELECT count(*) FROM country WHERE continent  =  'Asia'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of the countries that are in the continent of Europe and have a population of 80000?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "predict": "SELECT name FROM country WHERE continent  =  'Europe' AND Population  =  80000"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the names of countries that are in Europe and have a population equal to 80000.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "predict": "SELECT name FROM country WHERE continent  =  'Europe' AND Population  =  80000"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the total population and average area of countries in the continent of North America whose area is bigger than 3000?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "select sum(population),  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "predict": "SELECT sum(population),  avg(surfacearea) FROM country WHERE continent  =  'North America' AND surfacearea  >  3000"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "select sum(population),  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "predict": "SELECT sum(Population),  avg(SurfaceArea) FROM country WHERE continent  =  'North America' AND SurfaceArea  >  3000"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the cities whose population is between 160000 and 900000?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "predict": "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the names of cities that have a population between 160000 and 900000.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "select name from city where population between 160000 and 900000", "predict": "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which language is spoken by the largest number of countries?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT language FROM countrylanguage GROUP BY language ORDER BY count(*) DESC LIMIT 1átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the language that is spoken in the most countries.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT language FROM countrylanguage GROUP BY language ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the language spoken by the largest percentage of people in each country?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT LANGUAGE,  CountryCode,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "predict": "SELECT T1.language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code GROUP BY T1.countrycode ORDER BY T1.percentage DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT LANGUAGE,  CountryCode,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "predict": "SELECT countrycode,  language FROM countrylanguage GROUP BY countrycode ORDER BY percentage DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the total number of countries where Spanish is spoken by the largest percentage of people?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT count(*),   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "predict": "SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2  =  T2.countrycode WHERE T2.language  =  \"Spanish\" ORDER BY T2.percentage DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of countries for which Spanish is the predominantly spoken language.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT count(*),   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "predict": "SELECT count(*) FROM countrylanguage WHERE percentage  = 'spanish'?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the codes of countries where Spanish is spoken by the largest percentage of people?', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT CountryCode,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "predict": "SELECT countrycode FROM countrylanguage WHERE percentage  =  (SELECT max(percentage) FROM countrylanguage)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the codes of countries for which Spanish is the predominantly spoken language.', 'db_id': 'world_1', 'db_schema': {'foreign key': ['city.countrycode->country.code', 'countrylanguage.countrycode->country.code'], 'primary key': ['city.id', 'country.code', 'countrylanguage.countrycode'], 'tables': [{'table_name': 'city', 'column_names': ['id', 'name', 'country code', 'district', 'population']}, {'table_name':'sqlite sequence', 'column_names': ['name','seq']}, {'table_name': 'country', 'column_names': ['code', 'name', 'continent','region','surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2']}, {'table_name': 'countrylanguage', 'column_names': ['countrycode', 'language', 'is official', 'percentage']}]}}assistant\n\n", "label": "SELECT CountryCode,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "predict": "SELECT code FROM countrylanguage WHERE percentage  = 'spanish' AND isofficial  =  'yes'átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many conductors are there?', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT count(*) FROM conductor", "predict": "SELECT count(*) FROM conductor?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of conductors.', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT count(*) FROM conductor", "predict": "SELECT count(*) FROM conductor"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the names of conductors in ascending order of age.', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT Name FROM conductor ORDER BY Age ASC", "predict": "SELECT Name FROM conductor ORDER BY Age ASC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of conductors, ordered by age?', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT Name FROM conductor ORDER BY Age ASC", "predict": "SELECT Name FROM conductor ORDER BY Age"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of conductors whose nationalities are not \"USA\"?', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT Name FROM conductor WHERE Nationality!= 'USA'", "predict": "SELECT name FROM conductor WHERE nationality!= \"USA\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the names of conductors that do not have the nationality \"USA\".', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT Name FROM conductor WHERE Nationality!= 'USA'", "predict": "SELECT name FROM conductor WHERE nationality!= \"USA\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the record companies of orchestras in descending order of years in which they were founded?', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "predict": "SELECT Record_company FROM orchestra ORDER BY Year_of_founded DESC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the record companies of orchestras, sorted descending by the years in which they were founded.', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "predict": "SELECT Record_company FROM orchestra ORDER BY Year_of_founded DESC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average attendance of shows?', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT avg(Attendance) FROM SHOW", "predict": "SELECT avg(Attendance) FROM show?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the average attendance across all shows.', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT avg(Attendance) FROM SHOW", "predict": "SELECT avg(Attendance) FROM show"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the maximum and minimum share of performances whose type is not \"Live final\".', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT max(SHARE),  min(SHARE) FROM performance WHERE TYPE!= \"Live final\"", "predict": "SELECT max(Share),  min(Share) FROM performance WHERE TYPE!= \"Live final\" CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the maximum and minimum shares for performances that do not have the type \"Live final\".', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT max(SHARE),  min(SHARE) FROM performance WHERE TYPE!= \"Live final\"", "predict": "SELECT max(Share),  min(Share) FROM performance WHERE TYPE!= \"Live final\"?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many different nationalities do conductors have?', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT count(DISTINCT Nationality) FROM conductor", "predict": "SELECT count(DISTINCT nationality) FROM conductor?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of different nationalities of conductors.', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT count(DISTINCT Nationality) FROM conductor", "predict": "SELECT count(DISTINCT nationality) FROM conductor"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List names of conductors in descending order of years of work.', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "predict": "SELECT Name FROM conductor ORDER BY Year_of_work DESC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of conductors, sorted descending by the number of years they have worked?', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "predict": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the name of the conductor with the most years of work.', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "predict": "SELECT name FROM conductor ORDER BY Year_of_work DESC LIMIT 1átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name of the conductor who has worked the greatest number of years?', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "predict": "SELECT name FROM conductor ORDER BY Year_of_work DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the names of conductors and the orchestras they have conducted.', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT T1.Name,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "predict": "SELECT T2.Orchestra,  T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_IDuser"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of conductors as well as the corresonding orchestras that they have conducted?', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT T1.Name,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "predict": "SELECT T2.Orchestra,  T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the names of conductors that have conducted more than one orchestras.', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "predict": "SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(*)  >  1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of conductors who have conducted at more than one orchestra?', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "predict": "SELECT T2.Name FROM performance AS T1 JOIN orchestra AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T1.Orchestra_ID HAVING COUNT(*)  >  1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the name of the conductor that has conducted the most number of orchestras.', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "predict": "SELECT T2.name FROM performance AS T1 JOIN orchestra AS T2 ON T1.orchestra_ID  =  T2.orchestra_ID GROUP BY T2.name ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name of the conductor who has conducted the most orchestras?', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "predict": "SELECT t1.name FROM conductor AS t1 JOIN orchestra AS t2 ON t1.conductor_id  =  t2.conductor_id GROUP BY t1.conductor_id ORDER BY count(*) DESC LIMIT 1 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Please show the name of the conductor that has conducted orchestras founded after 2008.', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "predict": "SELECT T2.name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.conductor_id  =  T2.conductor_id WHERE T1.year_of_founded  >  2008"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of conductors who have conducted orchestras founded after the year 2008?', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "predict": "SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE T1.Year_of_founded  >  2008"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Please show the different record companies and the corresponding number of orchestras.', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT Record_Company,  COUNT(*) FROM orchestra GROUP BY Record_Company", "predict": "SELECT record_company,  count(*) FROM orchestra GROUP BY record_companyuser CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many orchestras does each record company manage?', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT Record_Company,  COUNT(*) FROM orchestra GROUP BY Record_Company", "predict": "SELECT Record_company,  count(*) FROM orchestra GROUP BY Record_companyátky?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Please show the record formats of orchestras in ascending order of count.', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "predict": "SELECT major_record_format FROM orchestra ORDER BY COUNT(*) ASC CLIIIK?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the major record formats of orchestras, sorted by their frequency?', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "predict": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) DESC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the record company shared by the most number of orchestras.', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "predict": "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the record company used by the greatest number of orchestras?', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "predict": "SELECT Record_company FROM orchestra GROUP BY Record_company ORDER BY count(*) DESC LIMIT 1 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the names of orchestras that have no performance.', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "predict": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the orchestras that do not have any performances?', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "predict": "SELECT Orchestra FROM orchestra WHERE Orchestra_id NOT IN (SELECT Orchestra_ID FROM performance)átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the record companies shared by orchestras founded before 2003 and after 2003.', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "predict": "SELECT Record_company FROM orchestra WHERE Year_of_founded  <  2003 INTERSECT SELECT Record_company FROM orchestra WHERE Year_of_founded  >  2003"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "predict": "SELECT record_company FROM orchestra WHERE year_of_founded  <  2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded  >  2003"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the number of orchestras whose record format is \"CD\" or \"DVD\".', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "predict": "SELECT count(*) FROM orchestra WHERE major_record_format  =  \"CD\" OR major_record_format  =  \"DVD\"?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of orchestras that have CD or DVD as their record format.', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "predict": "SELECT count(*) FROM orchestra WHERE major_record_format  =  \"CD\" OR major_record_format  =  \"DVD\"?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the years in which orchestras that have given more than one performance are founded.', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "predict": "SELECT YEAR_of_founded FROM orchestra GROUP BY YEAR_of_founded HAVING COUNT(*)  >  1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are years of founding for orchestras that have had more than a single performance?', 'db_id': 'orchestra', 'db_schema': {'foreign key': ['orchestra.conductor_id->conductor.conductor_id', 'performance.orchestra_id->orchestra.orchestra_id','show.performance_id->performance.performance_id'], 'primary key': ['conductor.conductor_id', 'orchestra.orchestra_id', 'performance.performance_id'], 'tables': [{'table_name': 'conductor', 'column_names': ['conductor id', 'name', 'age', 'nationality', 'year of work']}, {'table_name': 'orchestra', 'column_names': ['orchestra id', 'orchestra', 'conductor id','record company', 'year of founded','major record format']}, {'table_name': 'performance', 'column_names': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank','share']}, {'table_name':'show', 'column_names': ['show id', 'performance id', 'if first show','result', 'attendance']}]}}assistant\n\n", "label": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "predict": "SELECT T2.Year_of_Founded FROM performance AS T1 JOIN orchestra AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T1.Orchestra_ID HAVING COUNT(*)  >  1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many high schoolers are there?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT count(*) FROM Highschooler", "predict": "SELECT count(*) FROM highschooler WHERE grade  =  \"high schooler\" CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of high schoolers.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT count(*) FROM Highschooler", "predict": "SELECT count(*) FROM highschooler WHERE grade  =  \"High School\" CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the names and grades of each high schooler.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT name,  grade FROM Highschooler", "predict": "SELECT name,  grade FROM highschooler"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names and grades for each high schooler?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT name,  grade FROM Highschooler", "predict": "SELECT name,  grade FROM highschooler"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show all the grades of the high schoolers.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT grade FROM Highschooler", "predict": "SELECT DISTINCT grade FROM highschoolerSELECT grade FROM highschooler"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the grade of each high schooler?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT grade FROM Highschooler", "predict": "SELECT DISTINCT grade FROM highschooler"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What grade is Kyle in?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "predict": "SELECT grade FROM highschooler WHERE name  =  'Kyle'átky CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the grade for the high schooler named Kyle.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "predict": "SELECT grade FROM highschooler WHERE name  =  'Kyle'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the names of all high schoolers in grade 10.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT name FROM Highschooler WHERE grade  =  10", "predict": "SELECT name FROM highschooler WHERE grade  =  10 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of all high schoolers in grade 10?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT name FROM Highschooler WHERE grade  =  10", "predict": "SELECT name FROM highschooler WHERE grade  =  10"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the ID of the high schooler named Kyle.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "predict": "SELECT id FROM highschooler WHERE name  =  'Kyle'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What is Kyle's id?\", 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "predict": "SELECT friend_id FROM friend WHERE name  =  'Kyle'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many high schoolers are there in grade 9 or 10?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "predict": "SELECT count(*) FROM highschooler WHERE grade  =  9 OR grade  =  10"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of high schoolers in grades 9 or 10.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "predict": "SELECT count(*) FROM highschooler WHERE grade  =  9 OR grade  =  10"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the number of high schoolers for each grade.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT grade,  count(*) FROM Highschooler GROUP BY grade", "predict": "SELECT count(*),  grade FROM highschooler GROUP BY grade CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many high schoolers are in each grade?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT grade,  count(*) FROM Highschooler GROUP BY grade", "predict": "SELECT count(*),  grade FROM highschooler GROUP BY grade"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which grade has the most high schoolers?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the grade that has the greatest number of high schoolers.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show me all grades that have at least 4 students.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "predict": "SELECT DISTINCT grade FROM highschooler GROUP BY grade HAVING count(*)  >=  4"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which grades have 4 or more high schoolers?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "predict": "SELECT grade FROM highschooler GROUP BY grade HAVING count(*)  >=  4?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the student IDs and numbers of friends corresponding to each.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT student_id,  count(*) FROM Friend GROUP BY student_id", "predict": "SELECT T1.student_id,  count(*) FROM friend AS T1 JOIN highschooler AS T2 ON T1.friend_id  =  T2.id GROUP BY T1.student_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many friends does each student have?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT student_id,  count(*) FROM Friend GROUP BY student_id", "predict": "SELECT count(*),  T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the names of high school students and their corresponding number of friends.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT T2.name,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "predict": "SELECT count(*),  T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name�"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of the high schoolers and how many friends does each have?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT T2.name,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "predict": "SELECT T2.name,  count(*) FROM friend AS T1 JOIN highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T2.id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name of the high schooler who has the greatest number of friends?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T2.friend_id ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the name of the high school student with the most friends.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the names of high schoolers who have at least 3 friends.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "predict": "SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id HAVING count(*)  >=  3"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of high schoolers who have 3 or more friends?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "predict": "SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id HAVING count(*)  >=  3?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Show the names of all of the high schooler Kyle's friends.\", 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "predict": "SELECT T2.name FROM friend AS T1 JOIN highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  =  'highschooler' AND T2.name  =  'Kyle'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the names of friends of the high school student Kyle.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "predict": "SELECT T2.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id WHERE T1.name  =  'Kyle'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many friends does the high school student Kyle have?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "predict": "SELECT count(*) FROM friend AS T1 JOIN highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of friends Kyle has.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "predict": "SELECT count(*) FROM friend WHERE friend_id IN (SELECT T1.friend_id FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id WHERE T1.name  =  'Kyle')?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show ids of all students who do not have any friends.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "predict": "SELECT id FROM highschooler EXCEPT SELECT student_id FROM friendouser"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the ids of high school students who do not have friends?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "predict": "SELECT id FROM highschooler EXCEPT SELECT friend_id FROM friend UNION SELECT liked_id FROM likes"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show names of all high school students who do not have any friends.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "predict": "SELECT name FROM Highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT student_id FROM likes)?>\r\n\r\n?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of students who have no friends?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "predict": "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the ids of high schoolers who have friends and are also liked by someone else.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "predict": "SELECT id FROM highschooler WHERE id IN (SELECT friend_id FROM friend UNION SELECT liked_id FROM likes)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the ids of students who both have friends and are liked?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "predict": "SELECT id FROM friend INTERSECT SELECT student_id FROM likes CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show name of all students who have some friends and also are liked by someone else.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "predict": "SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id INTERSECT SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of high schoolers who both have friends and are liked?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "predict": "SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id INTERSECT SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of likes for each student id.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT student_id,  count(*) FROM Likes GROUP BY student_id", "predict": "SELECT count(*),  student_id FROM likes GROUP BY student_iduser"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many likes correspond to each student id?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT student_id,  count(*) FROM Likes GROUP BY student_id", "predict": "SELECT count(*),  student_id FROM likes GROUP BY student_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the names of high schoolers who have likes, and numbers of likes for each.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT T2.name,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "predict": "SELECT T1.name,  count(*) FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of high schoolers who have likes, and how many likes does each have?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT T2.name,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "predict": "SELECT T1.name,  count(*) FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name of the high schooler who has the greatest number of likes?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give the name of the student with the most likes.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the names of students who have at least 2 likes.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "predict": "SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id HAVING count(*)  >=  2?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of students who have 2 or more likes?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "predict": "SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id HAVING count(*)  >=  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the names of students who have a grade higher than 5 and have at least 2 friends.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "predict": "SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id WHERE grade  >  5 GROUP BY T2.student_id HAVING count(*)  >=  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "predict": "SELECT name FROM highschooler WHERE grade  >  5 GROUP BY id HAVING count(*)  >=  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many likes does Kyle have?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "predict": "SELECT count(*) FROM likes AS T1 JOIN highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the number of likes that the high schooler named Kyle has.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "predict": "SELECT count(*) FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id WHERE name  =  'Kyle'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the average grade of all students who have some friends.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "predict": "SELECT avg(grade) FROM highschooler WHERE id IN (SELECT T1.id FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id) CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average grade of students who have friends?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "predict": "SELECT avg(grade) FROM highschooler WHERE id IN (SELECT friend_id FROM friend UNION SELECT student_id FROM friend)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the minimum grade of students who have no friends.', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "predict": "SELECT min(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the lowest grade of students who do not have any friends?', 'db_id': 'network_1', 'db_schema': {'foreign key': ['friend.friend_id->highschooler.id', 'friend.student_id->highschooler.id', 'likes.student_id->highschooler.id', 'likes.liked_id->highschooler.id'], 'primary key': ['highschooler.id', 'friend.student_id', 'likes.student_id'], 'tables': [{'table_name': 'high schooler', 'column_names': ['id', 'name', 'grade']}, {'table_name': 'friend', 'column_names': ['student id', 'friend id']}, {'table_name': 'likes', 'column_names': ['student id', 'liked id']}]}}assistant\n\n", "label": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "predict": "SELECT min(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which states have both owners and professionals living there?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "predict": "SELECT state FROM owners INTERSECT SELECT state FROM professionals"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the states where both owners and professionals live.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "predict": "SELECT state FROM owners INTERSECT SELECT state FROM professionals"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average age of the dogs who have gone through any treatments?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "predict": "SELECT avg(T1.Age) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.Dog_ID  =  T2.Dog_ID"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the average age of the dogs who went through treatments.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "predict": "SELECT avg(T1.Age) FROM dogs AS T1 JOIN treatments AS T2 ON T1.Dog_ID  =  T2.Dog_ID?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT professional_id,  last_name,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id,  T1.last_name,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "predict": "SELECT Professional_ID,  last_name,  cell_number FROM Professionals WHERE state  =  'Indiana' OR COUNT(TREATMENTS)  >  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT professional_id,  last_name,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id,  T1.last_name,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "predict": "SELECT Professional_ID,  first_name,  cell_number FROM Professionals WHERE state  =  'Indiana' OR count(*)  >  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which dogs have not cost their owner more than 1000 for treatment? List the dog names.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "predict": "SELECT T2.Name FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.Dog_ID  =  T2.Dog_ID WHERE T1.Cost_of_Treatment  <  1000"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of the dogs for which the owner has not spend more than 1000 for treatment?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "predict": "SELECT T2.Name FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.Dog_ID  =  T2.Dog_ID WHERE T1.Cost_of_Treatment  >  1000"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which first names are used for professionals or owners but are not used as dog names?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "predict": "SELECT first_name FROM Professionals WHERE first_name IN (SELECT first_name FROM Owners EXCEPT SELECT first_name FROM Dogs)átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the first names that are used for professionals or owners but are not used as dog names.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "predict": "SELECT first_name FROM Professionals WHERE first_name IN (SELECT first_name FROM Owners EXCEPT SELECT first_name FROM Dogs)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Which professional did not operate any treatment on dogs? List the professional's id, role and email.\", 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT professional_id,  role_code,  email_address FROM Professionals EXCEPT SELECT T1.professional_id,  T1.role_code,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "predict": "SELECT professional_id,  role_code,  email_address FROM Professionals EXCEPT SELECT professional_id,  role_code,  email_address FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id  =  T2.dog_id WHERE T2.breed_code LIKE '%Dog%'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give me the id, role and email of the professionals who did not perform any treatment on dogs.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT professional_id,  role_code,  email_address FROM Professionals EXCEPT SELECT T1.professional_id,  T1.role_code,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "predict": "SELECT professional_id,  role_code,  email_address FROM professionals EXCEPT SELECT professional_id,  role_code,  email_address FROM treatments?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which owner owns the most dogs? List the owner id, first name and last name.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.owner_id,  T2.first_name,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.owner_id,  T1.first_name,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Return the owner id, first name and last name of the owner who has the most dogs.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.owner_id,  T2.first_name,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.owner_id,  T1.first_name,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Which professionals have done at least two treatments? List the professional's id, role, and first name.\", 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.professional_id,  T1.role_code,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "predict": "SELECT T1.professional_id,  T1.role_code,  T1.first_name FROM Professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the id, role, and first name of the professionals who have performed two or more treatments?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.professional_id,  T1.role_code,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "predict": "SELECT T1.professional_id,  T1.role_code,  T1.first_name FROM Professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name of the breed with the most dogs?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T2.breed_name FROM dogs AS T1 JOIN breeds AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_code ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which breed do the most dogs have? Give me the breed name.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T2.breed_name FROM dogs AS T1 JOIN breeds AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_code ORDER BY count(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.owner_id,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.owner_id,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.owner_id,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "predict": "SELECT T1.owner_id,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T3.dog_id  =  T2.dog_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the description of the treatment type that costs the least money in total?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "predict": "SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code JOIN Treatments AS T3 ON T3.treatment_type_code  =  T2.treatment_type_code WHERE T1.charge_amount  =  (SELECT sum(cost_of_treatment) FROM Treatments)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Give me the description of the treatment type whose total cost is the lowest.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "predict": "SELECT T1.treatment_type_description FROM treatment_types AS T1 JOIN treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code ORDER BY sum(T2.cost_of_treatment) ASC LIMIT 1?>\r\n\r\n?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.owner_id,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "predict": "SELECT T1.owner_id,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY sum(T3.charge_amount) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.owner_id,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "predict": "SELECT T1.owner_id,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY sum(T3.charge_amount) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which professionals have done at least two types of treatments? List the professional id and cell phone.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.professional_id,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "predict": "SELECT Professional_ID,  cell_number FROM Professionals GROUP BY Professional_ID HAVING count(*)  >=  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the id and cell phone of the professionals who operate two or more types of treatments.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.professional_id,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "predict": "SELECT T1.professional_id,  T1.cell_number FROM Professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*)  >=  2"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the first name and last name of the professionals who have done treatment with cost below average?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.first_name,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "predict": "SELECT T1.first_name,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.first_name,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "predict": "SELECT T2.first_name,  T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatments AS T3 ON T1.charge_id  =  T3.charge_id WHERE T3.cost_of_treatment  <  (SELECT avg(cost_of_treatment) FROM Treatments)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the date of each treatment, together with the first name of the professional who operated it.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.date_of_treatment,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "predict": "SELECT T1.Date_of_Treatment,  T2.First_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.Professional_ID  =  T2.Professional_ID"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What are the date and the operating professional's first name of each treatment?\", 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.date_of_treatment,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "predict": "SELECT date_of_treatment,  T1.first_name FROM Professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the cost of each treatment and the corresponding treatment type description.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.cost_of_treatment,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "predict": "SELECT T1.Charge_Amount,  T2.Treatment_Type_Description FROM Charges AS T1 JOIN Treatment_Types AS T2 ON T1.Charge_Type  =  T2.Treatment_Type_Code WHERE T1.Charge_Type  =  \"Treatment\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the cost and treatment type description of each treatment?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.cost_of_treatment,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "predict": "SELECT T1.treatment_type_description,  T2.Charge_Amount FROM Treatment_Types AS T1 JOIN Charges AS T2 ON T1.treatment_type_code  =  T2.Charge_Type WHERE T2.Charge_Type  =  \"Cost_of_Treatment\" CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"List each owner's first name, last name, and the size of his for her dog.\", 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.first_name,  T1.last_name,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "predict": "SELECT T1.first_name,  T1.last_name,  T2.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What are each owner's first name, last name, and the size of their dog?\", 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.first_name,  T1.last_name,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "predict": "SELECT T1.first_name,  T1.last_name,  T2.size_description FROM Owners AS T1 JOIN Sizes AS T2 ON T1.owner_id  =  T2.size_code"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"List pairs of the owner's first name and the dogs's name.\", 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.first_name,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "predict": "SELECT T1.first_name,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What are each owner's first name and their dogs's name?\", 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.first_name,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "predict": "SELECT T1.first_name,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the names of the dogs of the rarest breed and the treatment dates of them.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.name,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "predict": "SELECT T2.name,  T3.Date_of_Treatment FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T2.breed_code ORDER BY count(*) ASC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Which dogs are of the rarest breed? Show their names and treatment dates.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.name,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "predict": "SELECT T2.Name,  T1.Date_of_Treatment FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.Dog_ID  =  T2.Dog_ID WHERE T2.Breed_Code  =  (SELECT Breed_Code FROM Dogs GROUP BY Breed_Code ORDER BY COUNT(*) ASC LIMIT 1)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.\", 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.first_name,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "predict": "SELECT T2.first_name,  T2.name FROM dogs AS T1 JOIN owners AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.state  =  'Virginia'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the first names of owners living in Virginia and the names of dogs they own.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.first_name,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "predict": "SELECT T1.first_name,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the arriving date and the departing date of the dogs who have gone through a treatment?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.date_arrived,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "predict": "SELECT T1.date_arrived,  T1.date_departed FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id  =  T2.dog_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the arriving date and the departing date of the dogs that received a treatment.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.date_arrived,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "predict": "SELECT T1.date_arrived,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T2.treatment_type_code  =  \"medical\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the last name of the owner owning the youngest dog.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "predict": "SELECT T2.last_name FROM dogs AS T1 JOIN owners AS T2 ON T1.owner_id = T2.owner_id WHERE T1.age = (SELECT min(age) FROM dogs)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Who owns the youngest dog? Give me his or her last name.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "predict": "SELECT T2.last_name FROM dogs AS T1 JOIN owners AS T2 ON T1.owner_id = T2.owner_id WHERE T1.age = (SELECT min(age) FROM dogs)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "predict": "SELECT email_address FROM Professionals WHERE state  =  \"Hawaii\" OR state  =  \"Wisconsin\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "predict": "SELECT email_address FROM Professionals WHERE state  =  \"Hawaii\" OR state  =  \"Wisconsin\" CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the arriving date and the departing date of all the dogs?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT date_arrived,  date_departed FROM Dogs", "predict": "SELECT date_arrived,  date_departed FROM Dogs"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the arrival date and the departure date for all the dogs.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT date_arrived,  date_departed FROM Dogs", "predict": "SELECT date_arrived,  date_departed FROM dogs"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many dogs went through any treatments?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT count(DISTINCT dog_id) FROM Treatments", "predict": "SELECT count(DISTINCT dog_id) FROM treatments CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of dogs that went through a treatment.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT count(DISTINCT dog_id) FROM Treatments", "predict": "SELECT count(DISTINCT dog_id) FROM treatments"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many professionals have performed any treatment to dogs?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT count(DISTINCT professional_id) FROM Treatments", "predict": "SELECT count(DISTINCT Professional_ID) FROM treatments"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the number of professionals who have ever treated dogs.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT count(DISTINCT professional_id) FROM Treatments", "predict": "SELECT count(DISTINCT Professional_ID) FROM treatments CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.\", 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT role_code,  street,  city,  state FROM professionals WHERE city LIKE '%West%'", "predict": "SELECT role_code,  street,  city,  state FROM Professionals WHERE city LIKE '%West%'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.\", 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT role_code,  street,  city,  state FROM professionals WHERE city LIKE '%West%'", "predict": "SELECT role_code,  street,  city,  state FROM professionals WHERE city LIKE '%West%'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.\", 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT first_name,  last_name,  email_address FROM Owners WHERE state LIKE '%North%'", "predict": "SELECT first_name,  last_name,  email_address FROM  owners WHERE state LIKE '%North%'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.\", 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT first_name,  last_name,  email_address FROM Owners WHERE state LIKE '%North%'", "predict": "SELECT first_name,  last_name,  email_address FROM owners WHERE state LIKE '%North%'?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many dogs have an age below the average?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "predict": "SELECT count(*) FROM Dogs WHERE age  <  (SELECT avg(age) FROM Dogs)user"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Count the number of dogs of an age below the average.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "predict": "SELECT count(*) FROM Dogs WHERE age  <  (SELECT avg(age) FROM Dogs)user"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How much does the most recent treatment cost?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "predict": "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show me the cost of the most recently performed treatment.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "predict": "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many dogs have not gone through any treatment?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )", "predict": "SELECT count(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)user"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Tell me the number of dogs that have not received any treatment.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )", "predict": "SELECT count(DISTINCT dog_id) FROM dogs WHERE dog_id NOT IN ( SELECT dog_id FROM treatments );"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many owners temporarily do not have any dogs?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "predict": "SELECT count(*) FROM owners WHERE owner_id NOT IN ( SELECT owner_id FROM dogs )user"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the number of owners who do not own any dogs at this moment.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "predict": "SELECT count(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs)user"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many professionals did not operate any treatment on dogs?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "predict": "SELECT count(*) FROM Professionals WHERE Professional_ID NOT IN ( SELECT Professional_ID FROM Treatments );?>\r\n\r\n CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the number of professionals who have not treated any dogs.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "predict": "SELECT count(*) FROM professionals WHERE professional_id NOT IN ( SELECT professional_id FROM treatments );"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT name,  age,  weight FROM Dogs WHERE abandoned_yn  =  1", "predict": "SELECT name,  age,  weight FROM dogs WHERE abandoned  =  1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT name,  age,  weight FROM Dogs WHERE abandoned_yn  =  1", "predict": "SELECT name,  age,  weight FROM dogs WHERE abandoned  =  '1'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the average age of all the dogs?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT avg(age) FROM Dogs", "predict": "SELECT avg(Age) FROM dogsuser"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Compute the average age of all the dogs.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT avg(age) FROM Dogs", "predict": "SELECT avg(Age) FROM dogsuser"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the age of the oldest dog?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT max(age) FROM Dogs", "predict": "SELECT age FROM dogs ORDER BY age DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Tell me the age of the oldest dog.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT max(age) FROM Dogs", "predict": "SELECT age FROM dogs ORDER BY age DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How much does each charge type costs? List both charge type and amount.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT charge_type,  charge_amount FROM Charges", "predict": "SELECT charge_type,  charge_amount FROM Charges"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List each charge type and its amount.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT charge_type,  charge_amount FROM Charges", "predict": "SELECT Charge_Type,  Charge_Amount FROM Charges"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How much does the most expensive charge type costs?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT max(charge_amount) FROM Charges", "predict": "SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the charge amount of the most expensive charge type?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT max(charge_amount) FROM Charges", "predict": "SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the email, cell phone and home phone of all the professionals.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT email_address,  cell_number,  home_phone FROM professionals", "predict": "SELECT email_address,  cell_number,  home_phone FROM Professionals"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the email, cell phone and home phone of each professional?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT email_address,  cell_number,  home_phone FROM professionals", "predict": "SELECT email_address,  cell_number,  home_phone FROM Professionals"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are all the possible breed type and size type combinations?', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT DISTINCT breed_code,  size_code FROM dogs", "predict": "SELECT count(*) FROM breeds AS T1 JOIN dogs AS T2 ON T1.breed_code  =  T2.breed_code JOIN sizes AS T3 ON T2.size_code  =  T3.size_code GROUP BY T3.size_descriptionuser"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Find the distinct breed type and size type combinations for dogs.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT DISTINCT breed_code,  size_code FROM dogs", "predict": "SELECT DISTINCT T1.breed_name,  T2.size_description FROM Breeds AS T1 JOIN Sizes AS T2 ON T1.breed_code  =  T2.size_code"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the first name of all the professionals along with the description of the treatment they have done.', 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.first_name,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "predict": "SELECT T1.first_name,  T2.treatment_type_description FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': \"What are each professional's first name and description of the treatment they have performed?\", 'db_id': 'dog_kennels', 'db_schema': {'foreign key': ['dogs.owner_id->owners.owner_id', 'dogs.owner_id->owners.owner_id', 'dogs.size_code->sizes.size_code', 'dogs.breed_code->breeds.breed_code', 'treatments.dog_id->dogs.dog_id', 'treatments.professional_id->professionals.professional_id', 'treatments.treatment_type_code->treatment_types.treatment_type_code'], 'primary key': ['breeds.breed_code', 'charges.charge_id','sizes.size_code', 'treatment_types.treatment_type_code', 'owners.owner_id', 'dogs.dog_id', 'professionals.professional_id', 'treatments.treatment_id'], 'tables': [{'table_name': 'breeds', 'column_names': ['breed code', 'breed name']}, {'table_name': 'charges', 'column_names': ['charge id', 'charge type', 'charge amount']}, {'table_name':'sizes', 'column_names': ['size code','size description']}, {'table_name': 'treatment types', 'column_names': ['treatment type code', 'treatment type description']}, {'table_name': 'owners', 'column_names': ['owner id', 'first name', 'last name','street', 'city','state', 'zip code', 'email address', 'home phone', 'cell number']}, {'table_name': 'dogs', 'column_names': ['dog id', 'owner id', 'abandoned yes or no', 'breed code','size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed']}, {'table_name': 'professionals', 'column_names': ['professional id', 'role code', 'first name','street', 'city','state', 'zip code', 'last name', 'email address', 'home phone', 'cell number']}, {'table_name': 'treatments', 'column_names': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.first_name,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "predict": "SELECT T1.first_name,  T2.treatment_type_description FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id WHERE T1.role_code  =  'professional'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many singers are there?', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT count(*) FROM singer", "predict": "SELECT count(*) FROM singer"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the count of singers?', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT count(*) FROM singer", "predict": "SELECT count(*) FROM singer"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the name of singers in ascending order of net worth.', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "predict": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of singers ordered by ascending net worth?', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "predict": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the birth year and citizenship of singers?', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT Birth_Year,  Citizenship FROM singer", "predict": "SELECT Birth_Year,  Citizenship FROM singer"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the birth years and citizenships of the singers?', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT Birth_Year,  Citizenship FROM singer", "predict": "SELECT Birth_Year,  Citizenship FROM singer CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the name of singers whose citizenship is not \"France\".', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT Name FROM singer WHERE Citizenship!= \"France\"", "predict": "SELECT name FROM singer WHERE citizenship!= \"France\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of the singers who are not French citizens?', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT Name FROM singer WHERE Citizenship!= \"France\"", "predict": "SELECT name FROM singer WHERE citizenship!= 'French'"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the name of singers whose birth year is either 1948 or 1949?', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "predict": "SELECT name FROM singer WHERE birth_year  =  1948 OR birth_year  =  1949"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of the singers whose birth years are either 1948 or 1949?', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "predict": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name of the singer with the largest net worth?', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "predict": "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the name of the singer who is worth the most?', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "predict": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show different citizenship of singers and the number of singers of each citizenship.', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT Citizenship,  COUNT(*) FROM singer GROUP BY Citizenship", "predict": "SELECT Citizenship,  COUNT(*) FROM singer GROUP BY Citizenship"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'For each citizenship, how many singers are from that country?', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT Citizenship,  COUNT(*) FROM singer GROUP BY Citizenship", "predict": "SELECT Citizenship,  COUNT(*) FROM singer GROUP BY Citizenship"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Please show the most common citizenship of singers.', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "predict": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1 CLIIIK"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the most common singer citizenship?', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "select citizenship from singer group by citizenship order by count(*) desc limit 1", "predict": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show different citizenships and the maximum net worth of singers of each citizenship.', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT Citizenship,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "predict": "SELECT Citizenship,  max(Net_worth_millions) FROM singer GROUP BY Citizenship"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'For each citizenship, what is the maximum net worth?', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT Citizenship,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "predict": "SELECT max(Net_worth_millions),  citizenship FROM singer GROUP BY citizenship"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show titles of songs and names of singers.', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT T2.Title,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "predict": "SELECT T2.Title,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the song titles and singer names?', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT T2.Title,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "predict": "SELECT T2.Title,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show distinct names of singers that have songs with sales more than 300000.', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "predict": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'what are the different names of the singers that have sales more than 300000?', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "predict": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000átky"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the names of singers that have more than one song.', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "predict": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T2.Singer_ID HAVING COUNT(*)  >  1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of the singers that have more than one songs?', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "predict": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T2.Singer_ID HAVING COUNT(*)  >  1"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the names of singers and the total sales of their songs.', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT T1.Name,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "predict": "SELECT T1.Name,  SUM(Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'For each singer name, what is the total sales for their songs?', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT T1.Name,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "predict": "SELECT T1.Name,  sum(Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'List the name of singers that do not have any song.', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "predict": "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the sname of every sing that does not have any song?', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "predict": "SELECT DISTINCT sName FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the citizenship shared by singers with birth year before 1945 and after 1955.', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "predict": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?', 'db_id':'singer', 'db_schema': {'foreign key': ['song.singer_id->singer.singer_id'], 'primary key': ['singer.singer_id','song.song_id'], 'tables': [{'table_name':'singer', 'column_names': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship']}, {'table_name':'song', 'column_names': ['song id', 'title','singer id','sales', 'highest position']}]}}assistant\n\n", "label": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "predict": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'How many available features are there in total?', 'db_id':'real_estate_properties', 'db_schema': {'foreign key': ['other_available_features.feature_type_code->ref_feature_types.feature_type_code', 'properties.property_type_code->ref_property_types.property_type_code', 'other_property_features.property_id->properties.property_id', 'other_property_features.feature_id->other_available_features.feature_id'], 'primary key': ['ref_feature_types.feature_type_code','ref_property_types.property_type_code', 'other_available_features.feature_id', 'properties.property_id'], 'tables': [{'table_name':'reference feature types', 'column_names': ['feature type code', 'feature type name']}, {'table_name':'reference property types', 'column_names': ['property type code', 'property type description']}, {'table_name': 'other available features', 'column_names': ['feature id', 'feature type code', 'feature name', 'feature description']}, {'table_name': 'properties', 'column_names': ['property id', 'property type code', 'date on market', 'date sold', 'property name', 'property address', 'room count','vendor requested price', 'buyer offered price', 'agreed selling price', 'apt feature 1', 'apt feature 2', 'apt feature 3', 'fld feature 1', 'fld feature 2', 'fld feature 3', 'hse feature 1', 'hse feature 2', 'hse feature 3', 'oth feature 1', 'oth feature 2', 'oth feature 3','shp feature 1','shp feature 2','shp feature 3', 'other property details']}, {'table_name': 'other property features', 'column_names': ['property id', 'feature id', 'property feature description']}]}}assistant\n\n", "label": "SELECT count(*) FROM Other_Available_Features", "predict": "SELECT count(*) FROM Other_Available_Features?>\r\n\r\n?>\r\n\r\n"}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What is the feature type name of feature AirCon?', 'db_id':'real_estate_properties', 'db_schema': {'foreign key': ['other_available_features.feature_type_code->ref_feature_types.feature_type_code', 'properties.property_type_code->ref_property_types.property_type_code', 'other_property_features.property_id->properties.property_id', 'other_property_features.feature_id->other_available_features.feature_id'], 'primary key': ['ref_feature_types.feature_type_code','ref_property_types.property_type_code', 'other_available_features.feature_id', 'properties.property_id'], 'tables': [{'table_name':'reference feature types', 'column_names': ['feature type code', 'feature type name']}, {'table_name':'reference property types', 'column_names': ['property type code', 'property type description']}, {'table_name': 'other available features', 'column_names': ['feature id', 'feature type code', 'feature name', 'feature description']}, {'table_name': 'properties', 'column_names': ['property id', 'property type code', 'date on market', 'date sold', 'property name', 'property address', 'room count','vendor requested price', 'buyer offered price', 'agreed selling price', 'apt feature 1', 'apt feature 2', 'apt feature 3', 'fld feature 1', 'fld feature 2', 'fld feature 3', 'hse feature 1', 'hse feature 2', 'hse feature 3', 'oth feature 1', 'oth feature 2', 'oth feature 3','shp feature 1','shp feature 2','shp feature 3', 'other property details']}, {'table_name': 'other property features', 'column_names': ['property id', 'feature id', 'property feature description']}]}}assistant\n\n", "label": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "predict": "SELECT feature_type_name FROM Other_Available_Features WHERE feature_name  =  \"AirCon\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'Show the property type descriptions of properties belonging to that code.', 'db_id':'real_estate_properties', 'db_schema': {'foreign key': ['other_available_features.feature_type_code->ref_feature_types.feature_type_code', 'properties.property_type_code->ref_property_types.property_type_code', 'other_property_features.property_id->properties.property_id', 'other_property_features.feature_id->other_available_features.feature_id'], 'primary key': ['ref_feature_types.feature_type_code','ref_property_types.property_type_code', 'other_available_features.feature_id', 'properties.property_id'], 'tables': [{'table_name':'reference feature types', 'column_names': ['feature type code', 'feature type name']}, {'table_name':'reference property types', 'column_names': ['property type code', 'property type description']}, {'table_name': 'other available features', 'column_names': ['feature id', 'feature type code', 'feature name', 'feature description']}, {'table_name': 'properties', 'column_names': ['property id', 'property type code', 'date on market', 'date sold', 'property name', 'property address', 'room count','vendor requested price', 'buyer offered price', 'agreed selling price', 'apt feature 1', 'apt feature 2', 'apt feature 3', 'fld feature 1', 'fld feature 2', 'fld feature 3', 'hse feature 1', 'hse feature 2', 'hse feature 3', 'oth feature 1', 'oth feature 2', 'oth feature 3','shp feature 1','shp feature 2','shp feature 3', 'other property details']}, {'table_name': 'other property features', 'column_names': ['property id', 'feature id', 'property feature description']}]}}assistant\n\n", "label": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "predict": "SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code  =  \"Residential\""}
{"prompt": "user\n\nWrite an SQL query to retrieve the information based on the given database schema.The result should be only a sql query.\n{'question': 'What are the names of properties that are either houses or apartments with more than 1 room?', 'db_id':'real_estate_properties', 'db_schema': {'foreign key': ['other_available_features.feature_type_code->ref_feature_types.feature_type_code', 'properties.property_type_code->ref_property_types.property_type_code', 'other_property_features.property_id->properties.property_id', 'other_property_features.feature_id->other_available_features.feature_id'], 'primary key': ['ref_feature_types.feature_type_code','ref_property_types.property_type_code', 'other_available_features.feature_id', 'properties.property_id'], 'tables': [{'table_name':'reference feature types', 'column_names': ['feature type code', 'feature type name']}, {'table_name':'reference property types', 'column_names': ['property type code', 'property type description']}, {'table_name': 'other available features', 'column_names': ['feature id', 'feature type code', 'feature name', 'feature description']}, {'table_name': 'properties', 'column_names': ['property id', 'property type code', 'date on market', 'date sold', 'property name', 'property address', 'room count','vendor requested price', 'buyer offered price', 'agreed selling price', 'apt feature 1', 'apt feature 2', 'apt feature 3', 'fld feature 1', 'fld feature 2', 'fld feature 3', 'hse feature 1', 'hse feature 2', 'hse feature 3', 'oth feature 1', 'oth feature 2', 'oth feature 3','shp feature 1','shp feature 2','shp feature 3', 'other property details']}, {'table_name': 'other property features', 'column_names': ['property id', 'feature id', 'property feature description']}]}}assistant\n\n", "label": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "predict": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" OR property_type_code  =  \"Apartment\" GROUP BY property_name HAVING room_count  >  1"}