SELECT count(*) FROM singer;
SELECT count(*) FROM singer;
SELECT name,  country,  age FROM singer ORDER BY age DESC;
SELECT Name,  Country,  age FROM singer ORDER BY age DESC;
SELECT avg(age),  min(age),  max(age) FROM singer WHERE country  =  "France";
SELECT avg(age),  min(age),  max(age) FROM singer WHERE country  =  "France";
SELECT name,  song_release_year FROM singer ORDER BY age ASC LIMIT 1;
SELECT name,  song_release_year FROM singer ORDER BY age ASC LIMIT 1;
SELECT DISTINCT Country FROM singer WHERE Age  >  20;
SELECT DISTINCT country FROM singer WHERE age  >  20;
SELECT country,  count(*) FROM singer GROUP BY country;
SELECT count(*),  country FROM singer GROUP BY country;
SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer);
SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer);
SELECT LOCATION,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT LOCATION,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT max(capacity),  avg(capacity) FROM stadium;
SELECT average,  max(capacity) FROM stadium;
SELECT name,  capacity FROM stadium ORDER BY average DESC LIMIT 1;
SELECT name,  capacity FROM stadium ORDER BY average DESC LIMIT 1;
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015;
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015;
SELECT T2.name,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id;
SELECT count(*),  T1.name FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.name;
SELECT T2.name,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T1.stadium_id ORDER BY count(*) DESC LIMIT 1;
SELECT t1.name,  t1.capacity FROM stadium AS t1 JOIN concert AS t2 ON t1.stadium_id  =  t2.stadium_id WHERE t2.year  >  2013 ORDER BY count(*) DESC LIMIT 1;
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1;
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1;
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);
SELECT Country FROM singer WHERE Age  >  40 INTERSECT SELECT Country FROM singer WHERE Age  <  30;
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE YEAR  =  2014);
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE YEAR  =  2014);
SELECT T1.concert_name,  T1.theme,  count(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T1.concert_name;
SELECT T1.concert_name,  T1.theme,  COUNT(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T1.concert_name;
SELECT T1.Name,  count(*) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Singer_ID;
SELECT T2.Name,  COUNT(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T2.Singer_ID;
SELECT T3.name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id  =  T2.concert_id JOIN singer AS T3 ON T2.singer_id  =  T3.singer_id WHERE T1.year  =  2014;
SELECT T2.name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id  =  T2.concert_id JOIN singer AS T3 ON T2.singer_id  =  T3.singer_id WHERE T1.year  =  2014;
SELECT T1.Name,  T1.Country FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T1.Song_Name LIKE "%Hey%";
SELECT T1.Name,  T1.Country FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID JOIN concert AS T3 ON T2.Concert_ID  =  T3.Concert_ID WHERE T3.concert_name LIKE '%Hey%';
SELECT T1.name,  T1.location FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year  =  2014 INTERSECT SELECT T1.name,  T1.location FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year  =  2015;
SELECT T3.name,  T3.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T1.year  =  2014 INTERSECT SELECT T3.name,  T3.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id JOIN concert;
SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T2.capacity DESC LIMIT 1;
SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.capacity  =  (SELECT max(capacity) FROM stadium);
SELECT count(*) FROM pets WHERE weight  >  10;
SELECT count(*) FROM pets WHERE weight  >  10;
SELECT weight FROM pets WHERE pettype  =  "dog" AND petage  =  (SELECT min(petage) FROM pets WHERE pettype  =  "dog");
SELECT max(weight) FROM pets WHERE pettype  =  "dog";
SELECT max(weight),  pettype FROM pets GROUP BY pettype;
SELECT max(weight),  pettype FROM pets GROUP BY pettype;
SELECT count(*) FROM has_pet AS T1 JOIN student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  >  20;
SELECT count(*) FROM Has_pet AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID JOIN pets AS T3 ON T1.PetID  =  T3.PetID WHERE T2.age  >  20;
SELECT count(*) FROM Has_pet AS T1 JOIN student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  'F' AND T1.petid IN (SELECT petid FROM pets WHERE pettype  =  "dog");
SELECT count(*) FROM pets AS T1 JOIN has_pet AS T2 ON T1.petid  =  T2.petid JOIN student AS T3 ON T2.stuid  =  T3.stuid WHERE T3.sex  =  'F' AND T3.major  =  'MS';
SELECT count(DISTINCT pettype) FROM pets;
SELECT count(DISTINCT pettype) FROM pets;
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID  =  T2.StuID JOIN pets AS T3 ON T3.PetID  =  T2.PetID WHERE T3.PetType  =  "cat" OR T3.PetType  =  "dog";
SELECT T1.fname FROM student AS T1 JOIN Has_Pet AS T2 ON T1.stuid  =  T2.stuid JOIN Pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog';
SELECT T1.Fname FROM student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN pets AS T3 ON T3.PetID  =  T2.PetID WHERE T3.PetType  =  "cat" INTERSECT SELECT T1.Fname FROM student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN pets AS T;
SELECT T1.fname FROM student AS T1 JOIN Has_pet AS T2 ON T1.StuID  =  T2.StuID JOIN pets AS T3 ON T3.PetID  =  T2.PetID WHERE T3.Pet_type  =  'cat' INTERSECT SELECT T1.fname FROM student AS T1 JOIN Has_pet AS T2 ON T1.StuID  =  T2.StuID JOIN pets AS T3 ON T3;
SELECT major,  age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE pettype  =  "cat");
SELECT major,  age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_pet);
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pet;
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pet;
SELECT T1.fname,  T1.age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.stuid  =  T2.stuid JOIN Pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pettype  =  "dog" EXCEPT SELECT T1.fname,  T1.age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.stuid  =  T2.stuid JOIN Pets AS;
SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  "dog" EXCEPT SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid ;
SELECT PetType,  Weight FROM pets ORDER BY petage ASC LIMIT 1;
SELECT ptype,  avg(weight) FROM pets GROUP BY ptype ORDER BY avg(petage) LIMIT 1;
SELECT petid,  weight FROM pets WHERE petage  >  1;
SELECT petid,  weight FROM pets WHERE petage  >  1;
SELECT pettype,  avg(petage),  max(petage) FROM pets GROUP BY pettype;
SELECT avg(petage),  max(petage),  pettype FROM pets GROUP BY pettype;
SELECT avg(weight),  pettype FROM pets GROUP BY pettype;
SELECT avg(weight),  pettype FROM pets GROUP BY pettype;
SELECT T1.fname,  T1.age FROM student AS T1 JOIN Has_Pet AS T2 ON T1.stuid  =  T2.stuid WHERE T2.petid IN (SELECT petid FROM pets WHERE pettype  =  'dog');
SELECT DISTINCT T1.fname,  T1.age FROM student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID WHERE T2.petid IN (SELECT petid FROM pets WHERE pettype  =  'dog');
SELECT T1.petid FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.lname  =  'Smith';
SELECT T2.petid FROM has_pet AS T1 JOIN student AS T2 ON T1.stuid  =  T2.stuid WHERE T2.lname  =  'Smith';
SELECT count(*),  StuID FROM Has_Pet GROUP BY StuID;
SELECT count(*),  StuID FROM Has_pet GROUP BY StuID;
SELECT T1.fname,  T1.sex FROM student AS T1 JOIN Has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1;
SELECT DISTINCT T1.fname,  T1.sex FROM student AS T1 JOIN Has_pet AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID HAVING count(*)  >  1;
SELECT T1.Lname FROM student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN pets AS T3 ON T3.PetID  =  T2.PetID WHERE T3.PetAge  =  3 AND T3.PetType  =  "cat";
SELECT t1.lname FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid  =  t2.stuid JOIN pets AS t3 ON t2.petid  =  t3.petid WHERE t3.pettype  =  "cat" AND t3.petage  =  3;
SELECT avg(age) FROM student WHERE StuID NOT IN (SELECT StuID FROM Has_pet);
SELECT avg(age) FROM student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT count(*) FROM continents;
SELECT count(*) FROM continents;
SELECT T1.contid,  T1.continent,  COUNT(*) FROM countries AS T1 JOIN continents AS T2 ON T1.continent  =  T2.contid GROUP BY T1.continent;
SELECT T2.contid,  T1.continent,  count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.contid  =  T2.contid GROUP BY T1.continent;
SELECT count(*) FROM countries;
SELECT count(*) FROM countries;
SELECT T2.maker,  count(*),  T1.id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker GROUP BY T1.id;
SELECT T1.full_name,  T1.id,  count(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker GROUP BY T1.id;
SELECT Model FROM cars_data GROUP BY Model ORDER BY horsepower ASC LIMIT 1;
SELECT model FROM cars_data ORDER BY horsepower ASC LIMIT 1;
SELECT model FROM cars_data WHERE weight  <  (SELECT avg(weight) FROM cars_data);
SELECT model FROM cars_data WHERE weight  <  (SELECT avg(weight) FROM cars_data);
SELECT T2.fullname FROM cars_data AS T1 JOIN car_makers AS T2 ON T1.makeid  =  T2.id WHERE T1.year  =  1970;
SELECT DISTINCT T2.fullname FROM cars_data AS T1 JOIN car_makers AS T2 ON T1.id  =  T2.id WHERE T1.year  =  1970;
SELECT DISTINCT T1.make,  T2.year FROM car_names AS T1 JOIN cars_data AS T2 ON T1.makeid  =  T2.id ORDER BY T2.year ASC LIMIT 1;
SELECT T2.maker,  T1.year FROM cars_data AS T1 JOIN car_makers AS T2 ON T1.makeid  =  T2.id WHERE T1.year  =  (SELECT min(year) FROM cars_data);
SELECT DISTINCT model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.makeid  =  T2.id WHERE T2.year  >  1980;
SELECT DISTINCT model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.makeid  =  T2.id WHERE T2.year  >  1980;
SELECT T2.continent,  count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.contid  =  T2.contid JOIN car_makers AS T3 ON T2.countryname  =  T3.country JOIN continents AS T4 ON T3.contid  =  T4.contid GROUP BY T2.continent;
SELECT T2.continent,  count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.countryid GROUP BY T2.continent;
SELECT T2.countryname FROM car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.countryid GROUP BY T1.country ORDER BY count(*) DESC LIMIT 1;
SELECT T1.Full_Name FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country  =  T2.CountryID GROUP BY T1.Country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT count(*),  T1.fullname FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker GROUP BY T1.fullname;
SELECT count(*),  T1.maker,  T1.full_name FROM Car_makers AS T1 JOIN Model_list AS T2 ON T1.id  =  T2.maker GROUP BY T1.maker;
SELECT accelerate FROM cars_data WHERE make LIKE '%AMC%' AND model LIKE '%Hornet%SPORTABOUT%' AND edispl LIKE '%SW%';
SELECT accelerate FROM cars_data WHERE make LIKE "%Hornet Sportabout%";
SELECT count(*) FROM car_makers WHERE country  =  "France";
SELECT count(*) FROM car_makers WHERE country  =  'France';
SELECT count(*) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.makeid  =  T2.makeid WHERE T1.mpg  >  20 AND T2.model LIKE "%Toyota%";
SELECT count(*) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id  =  T2.makeid WHERE T1.mpg  >  20 AND T2.model LIKE "%Toyota%";
SELECT avg(mpg) FROM cars_data WHERE cylinders  =  4;
SELECT avg(mpg) FROM cars_data WHERE cylinders  =  4;
SELECT min(weight) FROM cars_data WHERE cylinders  =  8 AND YEAR  =  1974;
SELECT min(weight) FROM cars_data WHERE cylinders  =  8 AND YEAR  =  1974;
SELECT T2.maker,  T2.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model  =  T2.Model;
SELECT T2.maker,  T2.Model FROM Car_names AS T1 JOIN Model_list AS T2 ON T1.Model  =  T2.Model;
SELECT T1.countryname,  T1.countryid FROM Countries AS T1 JOIN Car_Makers AS T2 ON T1.countryid  =  T2.country INTERSECT SELECT T1.countryname,  T1.countryid FROM Countries AS T1;
SELECT T2.countryname,  T1.id FROM Car_makers AS T1 JOIN countries AS T2 ON T1.Country  =  T2.countryid GROUP BY T1.country HAVING count(*)  >=  1;
SELECT count(*) FROM cars_data WHERE horsepower  >  150;
SELECT count(*) FROM cars_data WHERE horsepower  >  150;
SELECT avg(weight),  YEAR FROM cars_data GROUP BY YEAR;
SELECT avg(weight),  YEAR FROM cars_data GROUP BY YEAR;
SELECT T2.countryName FROM Continents AS T1 JOIN Countries AS T2 ON T1.ContID  =  T2.ContID JOIN Car_Makers AS T3 ON T3.Country  =  T2.CountryID WHERE T1.continent  =  'Europe' GROUP BY T2.CountryName HAVING COUNT(*)  >=  3;
SELECT T1.Full_Name FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country  =  T2.CountryID GROUP BY T1.CountryID HAVING COUNT(*)  >=  3;
SELECT max(hp),  model FROM cars_data WHERE cylinders  =  3;
SELECT max(Horsepower),  T1.Make FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Maker  =  T2.Maker WHERE T1.cylinders  =  3;
SELECT model FROM cars_data GROUP BY model ORDER BY max(mpg) DESC LIMIT 1;
SELECT model FROM cars_data ORDER BY mpg DESC LIMIT 1;
SELECT avg(hp) FROM cars_data WHERE YEAR  <  1980;
SELECT avg(hp) FROM cars_data WHERE year  <  1980;
SELECT avg(edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.makeid  =  T2.makeid JOIN model_list AS T3 ON T2.model  =  T3.model WHERE T3.maker  =  "volvo";
SELECT avg(edispl) FROM cars_data WHERE make  =  "VOLVO";
SELECT max(accelerate),  cylinders FROM cars_data GROUP BY cylinders;
SELECT max(accelerate),  cylinders FROM cars_data GROUP BY cylinders;
SELECT T1.maker FROM Model_list AS T1 JOIN Car_names AS T2 ON T1.Model  =  T2.Model GROUP BY T1.maker ORDER BY count(*) DESC LIMIT 1;
SELECT DISTINCT model FROM car_names GROUP BY model ORDER BY count(*) DESC LIMIT 1;
SELECT count(*) FROM cars_data WHERE cylinders  >  4;
SELECT count(*) FROM cars_data WHERE cylinders  >  4;
SELECT count(*) FROM cars_data WHERE YEAR  =  1980;
SELECT count(*) FROM cars_data WHERE YEAR  =  1980;
SELECT count(*) FROM Model_list AS T1 JOIN Car_makers AS T2 ON T1.maker  =  T2.id WHERE T2.full_name  =  "American Motor Company";
SELECT count(*) FROM Model_List AS T1 JOIN Car_Makers AS T2 ON T1.maker  =  T2.id WHERE T2.maker  =  "American Motor Company";
SELECT T2.full_name,  T1.id FROM Model_List AS T1 JOIN Car_Makers AS T2 ON T1.maker  =  T2.id GROUP BY T1.maker HAVING count(*)  >  3;
SELECT T2.maker,  T2.id FROM Model_List AS T1 JOIN Car_Makers AS T2 ON T1.maker  =  T2.id GROUP BY T1.maker HAVING count(*)  >  3;
SELECT DISTINCT T2.model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.id  =  T2.makeid WHERE T1.weight  >  3500 OR T2.maker  =  "General Motors";
SELECT DISTINCT T1.model FROM Model_List AS T1 JOIN Car_Makers AS T2 ON T1.maker  =  T2.id WHERE T2.full_name  =  "General Motors" OR T1.weight  >  3500;
SELECT YEAR FROM cars_data WHERE weight BETWEEN 3000 AND 4000;
SELECT DISTINCT YEAR FROM cars_data WHERE weight  <  4000 INTERSECT SELECT DISTINCT YEAR FROM cars_data WHERE weight  >  3000;
SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1;
SELECT HP FROM cars_data ORDER BY accelerate DESC LIMIT 1;
SELECT min(cylinders) FROM cars_data WHERE accelerate LIKE "volvo%";
SELECT min(cylinders) FROM cars_data WHERE accelerate  =  (SELECT min(accelerate) FROM cars_data WHERE make  =  'Volvo');
SELECT count(*) FROM cars_data WHERE accelerate  >  (SELECT max(horsepower) FROM cars_data);
SELECT count(*) FROM cars_data WHERE accelerate  >  (SELECT max(horsepower) FROM cars_data);
SELECT count(*) FROM car_makers WHERE id IN (SELECT id FROM car_makers GROUP BY countryid HAVING count(*)  >  2);
SELECT count(*) FROM car_makers WHERE country IN (SELECT country FROM car_makers GROUP BY country HAVING count(*)  >  2);
SELECT count(*) FROM cars_data WHERE cylinders  >  6;
SELECT count(*) FROM cars_data WHERE cylinders  >  6;
SELECT model FROM cars_data WHERE cylinders  =  4 ORDER BY horsepower DESC LIMIT 1;
SELECT model FROM cars_data WHERE cylinders  =  4 ORDER BY horsepower DESC LIMIT 1;
SELECT T1.make,  T1.id FROM Car_names AS T1 JOIN cars_data AS T2 ON T1.makeid  =  T2.id WHERE horsepower  >  (SELECT min(horsepower) FROM cars_data) GROUP BY T2.id HAVING count(*)  >  3;
SELECT T2.make,  T1.makeid FROM car_names AS T1 JOIN cars_data AS T2 ON T1.makeid  =  T2.id WHERE T2.horsepower!= (SELECT min(horsepower) FROM cars_data) AND T2.cylinders  <  4;
SELECT max(mpg) FROM cars_data WHERE cylinders  =  8 OR YEAR  <  1980;
SELECT max(mpg) FROM cars_data WHERE cylinders  =  8 OR YEAR  <  1980;
SELECT DISTINCT model FROM cars_data WHERE weight  <  3500 EXCEPT SELECT DISTINCT model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id  =  T2.makeid JOIN model_list AS T3 ON T3.modelid  =  T2.model WHERE T3.maker  =  "Ford Motor Company";
SELECT DISTINCT model FROM cars_data WHERE weight  <  3500 EXCEPT SELECT DISTINCT model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id  =  T2.makeid JOIN model_list AS T3 ON T3.model  =  T2.model WHERE T3.maker  =  "Ford";
SELECT country FROM car_makers EXCEPT SELECT T2.country FROM car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.countryID GROUP BY T1.country HAVING count(*) !=  (SELECT count(*) FROM car_makers);
SELECT country FROM countries EXCEPT SELECT T2.country FROM car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.countryID;
SELECT T1.id,  T1.maker FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.maker GROUP BY T1.maker HAVING count(*)  >=  2 INTERSECT SELECT T1.id,  T1.maker FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.maker GROUP BY T1.maker HAVING count(*)  >=  ;
SELECT T1.id,  T1.maker FROM Car_makers AS T1 JOIN Model_list AS T2 ON T1.id  =  T2.maker GROUP BY T1.maker HAVING count(*)  >=  2 INTERSECT SELECT T1.id,  T1.maker FROM Car_makers AS T1 JOIN Cars_data AS T2 ON T1.id  =  T2.id GROUP BY T1.maker HAVING count(*)  >=  3;
SELECT T1.id,  T1.fullname FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid  =  T2.country GROUP BY T1.countryid HAVING count(*)  >  3 UNION SELECT T1.id,  T1.fullname FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid  =  T2.country WHERE T2.maker  =  "fiat";
SELECT T1.id,  T1.countryName FROM Countries AS T1 JOIN Car_Makers AS T2 ON T1.countryid  =  T2.country WHERE T2.maker  >  3 UNION SELECT T1.id,  T1.countryName FROM Countries AS T1 JOIN Car_Makers AS T2 ON T1.countryid  =  T2.country WHERE T2.maker  =  "Fiat";
SELECT country FROM airlines WHERE airlineName  =  "JetBlue Airways";
SELECT country FROM airlines WHERE airlineName = "Jetblue Airways";
SELECT abbreviation FROM airlines WHERE airlineName  =  "JetBlue Airways";
SELECT abbreviation FROM airlines WHERE airlineName  =  "Jetblue Airways";
SELECT DISTINCT T1.airlineName,  T1.abbreviation FROM airlines AS T1 JOIN airports AS T2 ON T1.country  =  T2.country WHERE T2.country  =  'USA';
SELECT airlineName,  abbreviation FROM airlines WHERE country  =  'USA';
SELECT destinationairport,  airportname FROM airports WHERE city  =  'Anthony';
SELECT destinationairport,  airportname FROM airports WHERE city  =  'Anthony';
SELECT count(*) FROM airlines;
SELECT count(*) FROM airlines;
SELECT count(*) FROM airports;
SELECT count(*) FROM airports;
SELECT count(*) FROM Flights;
SELECT count(*) FROM flights;
SELECT airlineName FROM airlines WHERE abbreviation  =  'UAL';
SELECT abbreviation FROM airlines WHERE airlineid  =  "UAL";
SELECT count(*) FROM airlines WHERE country  =  'USA';
SELECT count(*) FROM airlines WHERE country  =  'USA';
SELECT DISTINCT T1.city,  T1.countryAbb FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport;
SELECT T1.city,  T1.country FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport WHERE T1.countryabbrev  =  'US' AND T1.city  =  'Alton';
SELECT airportname FROM airports WHERE airportcode  =  'AKO';
SELECT airportname FROM airports WHERE airportcode  =  'AKO';
SELECT DestAirport FROM airports WHERE City  =  'Aberdeen';
SELECT airportname FROM airports WHERE airportname LIKE '%Aberdeen%';
SELECT count(*) FROM flights WHERE sourceairport  =  'APG';
SELECT count(*) FROM flights WHERE sourceairport  =  "APG";
SELECT count(*) FROM flights WHERE destairport  =  'ATO';
SELECT count(*) FROM flights WHERE destairport  =  "ATO";
SELECT count(*) FROM flights WHERE sourceairport  =  "Aberdeen";
SELECT count(*) FROM flights WHERE sourceairport  =  "Aberdeen";
SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.city  =  "Aberdeen";
SELECT count(*) FROM flights WHERE destairport  =  "Aberdeen";
SELECT count(*) FROM flights WHERE sourceairport  =  'Aberdeen' AND destairport  =  'Ashley';
SELECT count(*) FROM flights WHERE sourceairport  =  "Aberdeen" AND destairport  =  "Ashley";
SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.airline  =  T2.uid WHERE T2.abbreviation  =  'JetBlue Airways';
SELECT count(*) FROM flights WHERE airline  =  "Jetblue Airways";
SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.airportname  =  'ASY' AND T1.airline  =  'United Airlines';
SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.airportname  =  'ASY' AND T1.airline  =  'United';
SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.sourceairport  =  T2.airportcode WHERE T2.airportname  =  'AHD' AND T1.airline  =  'United Airlines';
SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport WHERE T1.airportname  =  'AHD' AND T2.airline  =  'United';
SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.city  =  'Aberdeen' AND T1.airline  =  'United';
SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.city  =  'Aberdeen' AND T1.airline  =  'United';
SELECT T1.city FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;
SELECT T2.city FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode GROUP BY T1.destairport ORDER BY count(*) DESC LIMIT 1;
SELECT T2.city FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode GROUP BY T1.destairport ORDER BY count(*) DESC LIMIT 1;
SELECT T1.city FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport GROUP BY T2.sourceairport ORDER BY count(*) DESC LIMIT 1;
SELECT T1.airportcode FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport GROUP BY T1.airportcode ORDER BY count(*) DESC LIMIT 1;
SELECT T1.airportcode FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport GROUP BY T1.airportcode ORDER BY count(*) DESC LIMIT 1;
SELECT destinationairport FROM flights GROUP BY destinationairport ORDER BY count(*) ASC LIMIT 1;
SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY count(*) ASC LIMIT 1;
SELECT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.abbreviation  =  T2.airline GROUP BY T2.airline ORDER BY count(*) DESC LIMIT 1;
SELECT T1.abb FROM airlines AS T1 JOIN flights AS T2 ON T1.abb  =  T2.airline GROUP BY T2.airline ORDER BY count(*) DESC LIMIT 1;
SELECT abbreviation,  country FROM airlines ORDER BY count(*) ASC LIMIT 1;
SELECT abbreviation,  country FROM airlines ORDER BY count(*) ASC LIMIT 1;
SELECT T1.name FROM airlines AS T1 JOIN flights AS T2 ON T1.abbreviation  =  T2.airline WHERE T2.sourceairport  =  'AHD';
SELECT DISTINCT T1.airline FROM airlines AS T1 JOIN flights AS T2 ON T1.abbreviation  =  T2.airline WHERE T2.sourceairport  =  "AHD";
SELECT DISTINCT T1.airline FROM airlines AS T1 JOIN flights AS T2 ON T1.abbreviation  =  T2.airline WHERE T2.destairport  =  'AHD';
SELECT DISTINCT T1.airline FROM airlines AS T1 JOIN flights AS T2 ON T1.abbreviation  =  T2.airline WHERE T2.destairport  =  "AHD";
SELECT DISTINCT T1.abbr FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.sourceairport  =  'APG' INTERSECT SELECT DISTINCT T1.abbr FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.destairport  =  'CVO';
SELECT T1.airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.sourceairport  =  "APG" INTERSECT SELECT T1.airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.destinationairport  =  "CVO";
SELECT DISTINCT T1.name FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.destairport  =  'CVO' EXCEPT SELECT DISTINCT T1.name FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.destairport  =  'APG';
SELECT DISTINCT T1.name FROM airlines AS T1 JOIN flights AS T2 ON T1.abbreviation  =  T2.airline WHERE T2.destairport  =  'CVO' EXCEPT SELECT DISTINCT T1.name FROM airlines AS T1 JOIN flights AS T2 ON T1.abbreviation  =  T2.airline WHERE T2.destairport  =  'APG';
SELECT DISTINCT T1.abb FROM airlines AS T1 JOIN flights AS T2 ON T1.abb  =  T2.airline GROUP BY T1.abb HAVING count(*)  >=  10;
SELECT T1.abb FROM airlines AS T1 JOIN flights AS T2 ON T1.abb  =  T2.airline GROUP BY T2.airline HAVING count(*)  >=  10;
SELECT DISTINCT T1.name FROM airlines AS T1 JOIN flights AS T2 ON T1.abbrev  =  T2.airline WHERE count(*)  <  200;
SELECT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.abbreviation  =  T2.airline WHERE T2.flightnumber  >  200;
SELECT T1.flightnumber FROM flights AS T1 JOIN airlines AS T2 ON T1.airline  =  T2.uid WHERE T2.abbreviation  =  "United Airlines";
SELECT T1.flightnumber FROM flights AS T1 JOIN airlines AS T2 ON T1.airline  =  T2.uid WHERE T2.abbreviation  =  'UN';
SELECT T1.flightnumber FROM flights AS T1 JOIN airports AS T2 ON T1.sourceairport  =  T2.airportcode WHERE T2.airportname  =  "APG";
SELECT flightnumber FROM flights WHERE sourceairport  =  "APG";
SELECT T1.flightnumber FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.airportname  =  "APG";
SELECT T1.flightnumber FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.airportname  =  'APG';
SELECT T2.flightnumber FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport WHERE T1.city  =  "Aberdeen";
SELECT flightnumber FROM flights WHERE sourceairport  =  "Aberdeen";
SELECT flightnumber FROM flights WHERE destairport  =  "Aberdeen";
SELECT flightnumber FROM flights WHERE destairport  =  'Aberdeen';
SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.destairport WHERE T1.city  =  "Aberdeen" OR T1.city  =  "Abilene";
SELECT count(*) FROM flights WHERE destairport  =  "Aberdeen" OR sourceairport  =  "Abilene";
SELECT airportname FROM airports EXCEPT SELECT T1.airportname FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport UNION SELECT T1.airportname FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.destairport;
SELECT airportcode FROM airports EXCEPT (SELECT destairport FROM Flights UNION SELECT sourceairport FROM Flights);
SELECT count(*) FROM employee;
SELECT count(*) FROM employee;
SELECT name FROM employee ORDER BY age ASC;
SELECT name FROM employee ORDER BY age ASC;
SELECT city,  count(*) FROM employee GROUP BY city;
SELECT city,  count(*) FROM employee GROUP BY city;
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1;
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1;
SELECT count(*),  LOCATION FROM shop GROUP BY LOCATION;
SELECT count(*),  LOCATION FROM shop GROUP BY LOCATION;
SELECT manager_name,  District FROM shop ORDER BY Number_products DESC LIMIT 1;
SELECT manager_name,  district FROM shop ORDER BY Number_products DESC LIMIT 1;
SELECT min(number_products),  max(number_products) FROM shop;
SELECT min(number_products),  max(number_products) FROM shop;
SELECT name,  LOCATION,  district FROM shop ORDER BY Number_products DESC;
SELECT name,  LOCATION,  district FROM shop ORDER BY Number_products DESC;
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop);
SELECT name FROM shop WHERE Number_products  >  (SELECT avg(Number_products) FROM shop);
SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id GROUP BY T1.employee_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id GROUP BY T1.employee_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id ORDER BY bonus DESC LIMIT 1;
SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id ORDER BY T2.bonus DESC LIMIT 1;
SELECT name FROM employee EXCEPT SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id;
SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation);
SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.shop_id ORDER BY count(*) DESC LIMIT 1;
SELECT name FROM shop ORDER BY count(*) DESC LIMIT 1;
SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring);
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring);
SELECT count(*),  T1.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T2.name;
SELECT count(*),  T1.name FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.name;
SELECT sum(bonus) FROM evaluation;
SELECT sum(bonus) FROM evaluation;
SELECT * FROM hiring;
SELECT * FROM hiring;
SELECT District FROM shop WHERE Number_products  <  3000 INTERSECT SELECT District FROM shop WHERE Number_products  >  10000;
SELECT District FROM shop WHERE Number_products  <  3000 INTERSECT SELECT District FROM shop WHERE Number_products  >  10000;
SELECT count(DISTINCT LOCATION) FROM shop;
SELECT count(DISTINCT LOCATION) FROM shop;
SELECT count(*) FROM Documents;
SELECT count(*) FROM Documents;
SELECT document_id,  document_name,  document_description FROM Documents;
SELECT document_id,  document_name,  document_description FROM Documents;
SELECT document_name,  template_id FROM Documents WHERE document_description LIKE '%w%';
SELECT document_name,  template_id FROM Documents WHERE document_description LIKE '%w%';
SELECT template_id,  document_name,  document_description FROM Documents WHERE document_name  =  "Robbin CV";
SELECT template_id,  document_description FROM documents WHERE document_name  =  'Robbin CV';
SELECT count(DISTINCT template_id) FROM Documents;
SELECT count(DISTINCT template_id) FROM Documents;
SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT';
SELECT count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "PPT";
SELECT template_id,  count(*) FROM Documents GROUP BY template_id;
SELECT template_id,  count(*) FROM Documents GROUP BY template_id;
SELECT T1.template_id,  T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1;
SELECT templates.template_id,  templates.template_type_code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.template_type_code  =  T2.template_type_code GROUP BY templates.template_type_code ORDER BY count(*) DESC LIMIT 1;
SELECT template_id FROM documents GROUP BY template_id HAVING count(*)  >  1;
SELECT template_id FROM documents GROUP BY template_id HAVING count(*)  >  1;
SELECT template_id FROM templates EXCEPT SELECT template_id FROM documents;
SELECT template_id FROM templates EXCEPT SELECT template_id FROM documents;
SELECT count(*) FROM Templates;
SELECT count(*) FROM Templates;
SELECT template_id,  version_number,  template_type_code FROM Templates;
SELECT template_id,  version_number,  template_type_code FROM Templates;
SELECT DISTINCT template_type_code FROM Templates;
SELECT DISTINCT template_type_code FROM Templates;
SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT";
SELECT template_id FROM templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT";
SELECT count(*) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T1.template_type_description  =  "CV";
SELECT count(*) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T1.template_type_description  =  "CV";
SELECT template_type_code,  version_number FROM Templates WHERE version_number  >  5;
SELECT template_type_code,  version_number FROM Templates WHERE version_number  >  5;
SELECT template_type_code,  count(*) FROM Templates GROUP BY template_type_code;
SELECT template_type_code,  count(*) FROM Templates GROUP BY template_type_code;
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3;
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3;
SELECT min(version_number),  template_type_code FROM Templates GROUP BY template_type_code;
SELECT min(version_number),  template_type_code FROM Templates GROUP BY template_type_code;
SELECT T2.template_type_code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id WHERE T1.document_name  =  "Data base";
SELECT t2.template_type_code FROM documents AS t1 JOIN templates AS t2 ON t1.template_id  =  t2.template_id WHERE t1.document_name  =  "Data base";
SELECT t1.document_name FROM Documents AS t1 JOIN Templates AS t2 ON t1.template_id  =  t2.template_id WHERE t2.template_type_code  =  "BK";
SELECT T1.document_name FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id WHERE T2.template_type_code  =  "BK";
SELECT template_type_code,  count(*) FROM Templates GROUP BY template_type_code;
SELECT template_type_code,  count(*) FROM Templates GROUP BY template_type_code;
SELECT T1.template_type_code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1;
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;
SELECT template_type_code FROM Ref_Template_Types EXCEPT SELECT template_type_code FROM Templates;
SELECT template_type_code FROM Ref_Template_Types EXCEPT SELECT template_type_code FROM Templates;
SELECT template_type_code,  template_type_description FROM Ref_Template_Types;
SELECT template_type_code,  template_type_description FROM Ref_Template_Types;
SELECT template_type_description FROM Ref_Template_Types WHERE template_type_code  =  "AD";
SELECT template_type_description FROM Ref_Template_Types WHERE template_type_code  =  "AD";
SELECT template_type_code FROM Ref_Template_Types WHERE template_type_description  =  "Book";
SELECT template_type_code FROM Ref_Template_Types WHERE template_type_description  =  "Book";
SELECT DISTINCT T2.template_type_description FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id;
SELECT DISTINCT T1.template_type_description FROM Reference_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN Documents AS T3 ON T2.template_id  =  T3.template_id;
SELECT template_id FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T1.template_type_description  =  "Presentation";
SELECT template_id FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T2.template_type_description  =  'Presentation';
SELECT count(*) FROM Paragraphs;
SELECT count(*) FROM Paragraphs;
SELECT count(*) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name  =  "Summer Show";
SELECT count(*) FROM Documents AS t1 JOIN Paragraphs AS t2 ON t1.document_id  =  t2.document_id WHERE t1.document_name  =  "Summer Show";
SELECT t1.paragraph_text FROM Paragraphs AS t1 JOIN Documents AS t2 ON t1.document_id  =  t2.document_id WHERE t1.paragraph_text  =  "Korea";
SELECT T2.other_details FROM Paragraps AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T1.paragraph_text LIKE '%Korea%';
SELECT t1.paragraph_id,  t1.paragraph_text FROM Paragraphs AS t1 JOIN Documents AS t2 ON t1.document_id  =  t2.document_id WHERE t2.document_name  =  'Welcome to NY';
SELECT T1.paragraph_ID,  T2.paragraph_text FROM Paragraps AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Welcome to NY";
SELECT t1.paragraph_text FROM Paragraphs AS t1 JOIN Documents AS t2 ON t1.document_id  =  t2.document_id WHERE t2.document_name  =  "Customer reviews";
SELECT t1.paragraph_text FROM Paragraphs AS t1 JOIN Documents AS t2 ON t1.document_id  =  t2.document_id WHERE t2.document_name  =  "Customer reviews";
SELECT document_id,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id;
SELECT document_id,  count(*) FROM paragraphs GROUP BY document_id ORDER BY document_id;
SELECT document_id,  document_name,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T2.document_id;
SELECT T1.document_id,  T1.document_name,  count(*) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id;
SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*)  >=  2;
SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*)  >=  2;
SELECT T1.document_id,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.template_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.document_id,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1;
SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1;
SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1;
SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*)  >=  2 AND count(*)  <=  2;
SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2;
SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland';
SELECT document_id FROM paragraphs WHERE paragraph_text  =  "Brazil" INTERSECT SELECT document_id FROM paragraphs WHERE paragraph_text  =  "Ireland";
SELECT count(*) FROM teacher;
SELECT count(*) FROM teacher;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT age,  hometown FROM teacher;
SELECT age,  hometown FROM teacher;
SELECT name FROM teacher WHERE Hometown!= 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Hometown!= 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33;
SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33;
SELECT Hometown FROM teacher ORDER BY age ASC LIMIT 1;
SELECT Hometown FROM teacher ORDER BY age ASC LIMIT 1;
SELECT Hometown,  COUNT(*) FROM teacher GROUP BY Hometown;
SELECT hometown,  count(*) FROM teacher GROUP BY hometown;
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 3;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2;
SELECT DISTINCT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2;
SELECT T2.Name,  T3.Course_name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID JOIN course AS T3 ON T1.Course_ID  =  T3.Course_ID;
SELECT T2.Name,  T1.Course_ID FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID;
SELECT T2.Name,  T3.Course_ID FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_ID  =  T2.teacher_ID JOIN course AS T3 ON T1.course_ID  =  T3.course_id ORDER BY T2.Name ASC;
SELECT T2.Name,  T1.Course_ID FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID ORDER BY T2.Name ASC;
SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID WHERE T1.course_id IN (SELECT course_id FROM course WHERE course LIKE "%math%");
SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID WHERE T1.Course_ID IN (SELECT Course_ID FROM course WHERE Course LIKE "%Math%");
SELECT T2.Name,  count(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T2.Name;
SELECT T2.Name,  count(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id;
SELECT T2.name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id HAVING count(*)  >=  2;
SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id HAVING count(*)  >=  2;
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange);
SELECT count(*) FROM customer WHERE age  <  30;
SELECT T2.name FROM visit AS T1 JOIN customer AS T2 ON T1.visitor_id  =  T2.customer_id WHERE T2.level_of_membership  >  4 ORDER BY T2.level_of_membership;
SELECT avg(age) FROM customer WHERE level_of_membership  <=  4;
SELECT t1.name,  t1.level_of_membership FROM customer AS t1 JOIN visit AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.level_of_membership  >  4 ORDER BY t1.age;
SELECT museum_id,  name FROM museum ORDER BY Num_of_staff DESC LIMIT 1;
SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009;
SELECT open_year,  num_of_staff FROM museum WHERE name  =  'Plaza Museum';
SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010);
SELECT T1.customer_id,  T2.age,  T1.name FROM visitor AS T1 JOIN customer AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.customer_id IN (SELECT T3.customer_id FROM visit AS T3 JOIN museum AS T4 ON T3.museum_id  =  T4.museum_id GROUP BY T3.customer_id HAVING COUNT(*)  >  1);
SELECT T1.id,  T1.name,  T1.level_of_membership FROM customer AS T1 JOIN visit AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(T2.total_spent) DESC LIMIT 1;
SELECT T1.museum_id,  T1.name FROM museum AS T1 JOIN visit AS T2 ON T1.museum_id  =  T2.museum_id GROUP BY T2.museum_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.name FROM museum AS T1 JOIN visit AS T2 ON T1.museum_id  =  T2.museum_id GROUP BY T2.museum_id HAVING count(*)  =  0;
SELECT T1.name,  T1.age FROM customer AS T1 JOIN visit AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY sum(T2.num_of_ticket) DESC LIMIT 1;
SELECT avg(num_of_ticket),  max(num_of_ticket) FROM visit;
SELECT sum(t1.total_spent) FROM visit AS t1 JOIN customer AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.level_of_membership  =  1;
SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id  =  T2.visitor_id JOIN museum AS T3 ON T3.museum_id  =  T2.museum_id WHERE T3.open_year  <  2009 INTERSECT SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id  =  T2.visitor_id JOIN museum AS T3 ON T3.museum_id  =  T;
SELECT count(*) FROM visitor WHERE id NOT IN (SELECT visitor_id FROM visit AS T1 JOIN museum AS T2 ON T1.museum_id  =  T2.museum_id WHERE T2.open_year  >  2010);
SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008;
SELECT count(*) FROM players;
SELECT count(*) FROM players;
SELECT count(*) FROM MATCHES;
SELECT count(*) FROM MATCHES;
SELECT T1.first_name,  T1.birth_date FROM players AS T1 JOIN (SELECT country_code FROM players GROUP BY country_code HAVING country_code  =  "USA" LIMIT 1) AS T2 ON T1.country_code  =  T2.country_code;
SELECT FirstName,  Birth_Date FROM players WHERE Country_Code  =  "USA";
SELECT avg(T1.Loser_Age),  avg(T1.Winner_Age) FROM matches AS T1;
SELECT avg(loser_age),  avg(winner_age) FROM matches;
SELECT avg(T1.winner_rank_points) FROM MATCHES AS T1;
SELECT avg(T1.winner_rank_points) FROM matches AS T1;
SELECT max(Loser_Rank) FROM MATCHES;
SELECT max(Loser_Rank) FROM matches;
SELECT count(DISTINCT country_code) FROM players;
SELECT count(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT Loser_Name) FROM MATCHES;
SELECT count(DISTINCT loser_name) FROM matches;
SELECT tourney_name FROM MATCHES GROUP BY tourney_name HAVING count(*)  >  10;
SELECT T1.Tourney_name FROM matches AS T1 JOIN players AS T2 ON T1.loser_id  =  T2.player_id GROUP BY T1.Tourney_name HAVING COUNT(*)  >  10;
SELECT T1.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.year  =  2013 INTERSECT SELECT T1.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.year  =  2016;
SELECT T1.player_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.year  =  2013 INTERSECT SELECT T1.player_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.year  =  2016;
SELECT count(*) FROM MATCHES WHERE YEAR  >=  2013 OR YEAR  >=  2016;
SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016;
SELECT T1.country_code,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id WHERE T2.Tourney_name  =  "WTA Championships" INTERSECT SELECT T1.country_code,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id WHERE T2.Tourney_name  =  "Australian Open";
SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id WHERE T2.tourney_name  =  "WTA Championships" INTERSECT SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id WHERE T2.tourney_name  =  "Australian Open";
SELECT first_name,  country_code FROM players ORDER BY birth_date DESC LIMIT 1;
SELECT T1.first_name,  T1.country_code FROM players AS T1 ORDER BY T1.birth_date ASC LIMIT 1;
SELECT first_name,  last_name FROM players ORDER BY birth_date;
SELECT first_name,  last_name FROM players ORDER BY birth_date;
SELECT first_name,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date;
SELECT first_name,  last_name FROM players WHERE Hand  =  'Left' ORDER BY Birth_Date;
SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id GROUP BY T1.country_code ORDER BY count(*) DESC LIMIT 1;
SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN MATCHES AS T2 ON T1.player_id  =  T2.loser_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;
SELECT YEAR FROM MATCHES GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;
SELECT YEAR FROM MATCHES GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;
SELECT T1.winner_name,  T1.winner_rank_points FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id GROUP BY T1.winner_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.winner_name,  T1.winner_rank_points FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id GROUP BY T1.winner_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.winner_name FROM players AS T1 JOIN MATCHES AS T2 ON T1.winner_id  =  T2.winner_id WHERE T2.Tourney_name  =  "Australian Open" ORDER BY T2.winner_rank_points DESC LIMIT 1;
SELECT T1.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.winner_id  =  T2.winner_id WHERE T2.Tourney_name  =  "Australian Open" ORDER BY T2.winner_rank_points DESC LIMIT 1;
SELECT T1.Loser_Name,  T1.Winner_Name FROM players AS T1 JOIN MATCHES AS T2 ON T1.Player_ID  =  T2.Loser_ID ORDER BY T2.minutes DESC LIMIT 1;
SELECT T1.loser_name,  T1.winner_name FROM matches AS T1 JOIN players AS T2 ON T1.loser_id  =  T2.player_id ORDER BY T1.minutes DESC LIMIT 1;
SELECT T1.first_name,  avg(T2.ranking) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id;
SELECT T1.first_name,  avg(T2.Ranking) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id;
SELECT T1.first_name,  T1.Ranking_points,  T1.Ranking FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T1.Ranking_points DESC;
SELECT T1.first_name,  T1.Ranking_points,  count(*) FROM Players AS T1 JOIN rankings AS T2 ON T1.Player_ID  =  T2.Player_ID GROUP BY T1.Player_ID;
SELECT count(*),  country_code FROM players GROUP BY country_code;
SELECT count(*),  country_code FROM players GROUP BY country_code;
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50;
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50;
SELECT ranking,  sum(Tours) FROM rankings GROUP BY ranking;
SELECT ranking_date,  count(*) FROM rankings GROUP BY ranking_date;
SELECT YEAR(),  count(*) FROM matches GROUP BY YEAR();
SELECT YEAR,  count(*) FROM matches GROUP BY YEAR;
SELECT T1.winner_name,  T1.winner_rank FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id ORDER BY T1.winner_age LIMIT 3;
SELECT T1.winner_name,  T1.winner_rank FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id ORDER BY T1.winner_age DESC LIMIT 3;
SELECT count(DISTINCT T1.winner_name) FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id WHERE T1.hand  =  'Left' INTERSECT SELECT count(DISTINCT T1.winner_name) FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T1.hand  =  'Left';
SELECT count(*) FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id WHERE T1.hand  =  'L' AND T2.tourney_name  =  "WTA Championships";
SELECT T1.first_name,  T1.country_code,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1;
SELECT T1.first_name,  T1.country_code,  T1.birth_date FROM players AS T1 JOIN MATCHES AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1;
SELECT Hand,  count(*) FROM players GROUP BY Hand;
SELECT Hand,  COUNT(*) FROM players GROUP BY Hand;
SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured';
SELECT Name,  Tonnage FROM ship ORDER BY Name DESC;
SELECT name,  date,  RESULT FROM battle;
SELECT max(killed),  min(killed) FROM death;
SELECT avg(Injured) FROM death;
SELECT T2.note,  T2.killed,  T2.injured FROM ship AS T1 JOIN death AS T2 ON T1.id  =  T2.caused_by_ship_id WHERE T1.tonnage  =  't';
SELECT name,  RESULT FROM battle WHERE bulgarian_commander!= 'Boril';
SELECT DISTINCT T1.id,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig';
SELECT T1.id,  T1.name FROM battle AS T1 JOIN death AS T2 ON T1.id  =  T2.caused_by_ship_id GROUP BY T1.id HAVING sum(killed)  >  10;
SELECT T2.id,  T1.name FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T1.caused_by_ship_id ORDER BY sum(T1.injured) DESC LIMIT 1;
SELECT DISTINCT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I';
SELECT count(DISTINCT RESULT) FROM battle;
SELECT count(*) FROM battle AS t1 JOIN ship AS t2 ON t1.id  =  t2.lost_in_battle WHERE t2.tonnage!= 225 AND t1.result  =  'lost';
SELECT T1.name,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' UNION SELECT T1.name,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta';
SELECT T1.name,  T1.result,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.Location!= 'English Channel';
SELECT T2.Note FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.location LIKE '%East%';
SELECT line_1,  line_2 FROM Addresses;
SELECT line_1,  line_2 FROM Addresses;;
SELECT count(*) FROM COURSES;
SELECT count(*) FROM COURSES;
SELECT course_description FROM COURSES WHERE course_name  = 'math';
SELECT course_description FROM courses WHERE course_name  =  'Math';
SELECT zip_postcode FROM addresses WHERE city  =  'Port Chelsea';
SELECT zip_postcode FROM addresses WHERE city = "Port Chelsea";
SELECT T1.department_name,  T1.department_id FROM departments AS T1 JOIN degree_programs AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.department_name,  T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1;
SELECT count(*) FROM degree_programs;
SELECT count(DISTINCT department_id) FROM Degree_Programs;
SELECT count(DISTINCT degree_summary_name) FROM degree_programs;
SELECT count(DISTINCT degree_summary_name) FROM DEGREE_PROGRAMS;
SELECT count(*) FROM DEGREE_PROGRAMS WHERE department_id IN (SELECT department_id FROM departments WHERE department_name  =  'Engineering');
SELECT count(*) FROM DEGREE_PROGRAMS WHERE degree_programs.department_id IN (SELECT department_id FROM departments WHERE department_name  =  'Engineering');
SELECT section_name,  section_description FROM COURSES AS T1 JOIN SECTIONS AS T2 ON T1.course_id  =  T2.course_id;
SELECT section_name,  section_description FROM SECTIONS;
SELECT T1.course_name,  T1.course_id FROM COURSES AS T1 JOIN SECTIONS AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2;
SELECT T1.course_name,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <  2;
SELECT section_name FROM COURSES AS T1 JOIN SECTIONS AS T2 ON T1.course_id  =  T2.course_id ORDER BY section_name DESC;
SELECT section_name FROM SECTIONS ORDER BY section_name DESC;
SELECT T1.semester_name,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T2.semester_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.semester_name,  T1.semester_id,  T2.student_id FROM Semesters AS T1 JOIN Student_enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1;
SELECT department_description FROM DEPARTMENTS WHERE department_name LIKE '%the computer%';
SELECT department_description FROM DEPARTMENTS WHERE department_name LIKE '%computer%';
SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id WHERE T2.semester_id  =  1 INTERSECT SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2;
SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T2.degree_program_id,  T2.degree_summary_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id WHERE T2.semester_id  =  2 GROUP BY T2.student_id HAVING count(*)  =  2;
SELECT T1.first_name,  T1.middle_name,  T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN degree_programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  "Bachelor";
SELECT T1.first_name,  T1.middle_name,  T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN degree_programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  "Bachelors";
SELECT T1.degree_program_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T2.degree_program_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1;
SELECT T1.degree_program_id,  T2.degree_summary_name FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.degree_program_id,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.student_id,  T1.first_name,  T1.middle_name,  T1.last_name,  count(*),  count(*),  count(*) FROM Students AS T1 JOIN Student_enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T2.student_id,  count(*) FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1;
SELECT semester_name FROM semesters WHERE semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment );
SELECT semester_name FROM semesters EXCEPT SELECT T1.semester_name FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id  =  T2.semester_id;
SELECT DISTINCT T1.course_name FROM courses AS T1 JOIN student_enrolment_courses AS T2 ON T1.course_id  =  T2.course_id;
SELECT T1.course_name FROM courses AS T1 JOIN student_enrolment_courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  >  0;
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.last_name FROM addresses AS T1 JOIN students AS T2 ON T1.address_id  =  T2.permament_address_id WHERE T1.state_province_county  =  "North Carolina" EXCEPT SELECT T1.last_name FROM addresses AS T1 JOIN students AS T2 ON T1.address_id  =  T2.permament_address_id WHERE T2.date_left  =  "Graduated" INTERSECT SELECT T1.last_name FROM degree_programs AS T;
SELECT T1.last_name FROM addresses AS T1 JOIN students AS T2 ON T1.address_id  =  T2.permanent_address_id WHERE T1.state_province_county  =  "North Carolina" EXCEPT SELECT T1.last_name FROM addresses AS T1 JOIN students AS T2 ON T1.address_id  =  T2.permanent_address_id JOIN student_enrolment AS T3 ON T2.student_id  =  T3.student_id WHERE T3.degree;
SELECT T1.transcript_date,  T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2;
SELECT T1.transcript_date,  T1.transcript_id FROM TRANSCRIPTS AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(*)  >=  2;
SELECT cell_mobile_number FROM students WHERE first_name = "Timmothy" AND last_name = "Ward";
SELECT cell_mobile_number FROM STUDENTS WHERE first_name = "Timmothy" AND last_name = "Ward";
SELECT first_name,  middle_name,  last_name FROM students ORDER BY date_first_registered LIMIT 1;
SELECT first_name,  middle_name,  last_name FROM students ORDER BY date_first_registered LIMIT 1;
SELECT T1.first_name,  T1.middle_name,  T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN degree_programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  "Doctor of Philosophy" ORDER BY T2.transcript_date ASC LIMIT 1;
SELECT T1.first_name,  T1.middle_name,  T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id WHERE T2.degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name  =  "School Graduate") ORDER BY T2.transcript_date LIMIT 1;
SELECT DISTINCT first_name FROM addresses AS T1 JOIN students AS T2 ON T1.address_id  =  T2.permanent_address_id EXCEPT SELECT DISTINCT first_name FROM addresses AS T1 JOIN students AS T2 ON T1.address_id  =  T2.current_address_id;
SELECT first_name FROM students WHERE permanent_address_id!= current_address_id;
SELECT T1.address_id,  T1.line_1,  T1.line_2,  T1.line_3,  T1.city,  T1.zip_postcode,  T1.state_province_county,  T1.country,  T1.other_address_details FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.permanent_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.address_id,  T1.line_1,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.permanent_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1;
SELECT avg(transcript_date) FROM transcripts;
SELECT avg(transcript_date) FROM TRANSCRIPTS;
SELECT transcript_date,  other_details FROM TRANSCRIPTS ORDER BY transcript_date ASC LIMIT 1;
SELECT T1.transcript_date,  T1.other_details FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id ORDER BY T1.transcript_date ASC LIMIT 1;
SELECT count(*) FROM TRANSCRIPTS;
SELECT count(*) FROM TRANSCRIPTS;
SELECT transcript_date FROM TRANSCRIPTS ORDER BY transcript_date DESC LIMIT 1;
SELECT transcript_date FROM TRANSCRIPTS ORDER BY transcript_date DESC LIMIT 1;
SELECT T1.student_course_id,  count(*) FROM Student_Enrolment_Courses AS T1 JOIN Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.student_course_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.course_id,  max(T1.student_course_id) FROM Student_Enrolment_Courses AS T1 JOIN Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id;
SELECT T1.transcript_date,  T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) LIMIT 1;
SELECT T1.transcript_date,  T1.transcript_id FROM TRANSCRIPTS AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1;
SELECT semester_id FROM student_enrolment WHERE degree_program_summary_name  =  "Master" INTERSECT SELECT semester_id FROM student_enrolment WHERE degree_program_summary_name  =  "Bachelor";
SELECT semester_id FROM Student_enrolment WHERE degree_program_summary_name  =  'Masters' INTERSECT SELECT semester_id FROM Student_enrolment WHERE degree_program_summary_name  =  'Bachelors';
SELECT count(DISTINCT current_address_id) FROM STUDENTS;
SELECT DISTINCT T1.line_1 FROM addresses AS T1 JOIN students AS T2 ON T1.address_id  =  T2.permanent_address_id;
SELECT * FROM STUDENTS ORDER BY last_name,  first_name DESC;
SELECT other_student_details FROM students ORDER BY last_name DESC;
SELECT section_name FROM SECTIONS WHERE section_name  =  "h.";
SELECT section_description FROM SECTIONS WHERE section_name  =  'h';
SELECT T1.first_name FROM students AS T1 JOIN addresses AS T2 ON T1.permanent_address_id  =  T2.address_id JOIN countries AS T3 ON T2.country  =  T3.country_code WHERE T3.country  =  "Haiti" UNION SELECT T1.first_name FROM students AS T1 JOIN addresses AS T2 ON T1.current_address_id  =  T2.address_id JOIN countries AS T3 ON T2.country  =  T;
SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country  =  "Haiti") OR cell_mobile_number  =  "09700166582";
SELECT title FROM cartoon ORDER BY title;
SELECT title FROM cartoon ORDER BY title;
SELECT * FROM cartoon WHERE directed_by = "Ben Jones";
SELECT title FROM cartoon WHERE directed_by = "Ben Jones";
SELECT count(*) FROM cartoon WHERE written_by  =  "Joseph Kuhr";
SELECT count(*) FROM cartoon WHERE written_by = "Joseph Kuhr";
SELECT title,  directed_by FROM cartoon ORDER BY original_air_date;
SELECT title,  directed_by FROM cartoon ORDER BY original_air_date;
SELECT title FROM cartoon WHERE directed_by = "Ben Jones" OR directed_by = "Brandon Vietti";
SELECT title FROM cartoon WHERE directed_by = "Ben Jones" OR directed_by = "Brandon Vietti";
SELECT country,  count(*) FROM tv_channel GROUP BY country ORDER BY count(*) DESC LIMIT 1;
SELECT country,  count(*) FROM tv_channel GROUP BY country ORDER BY count(*) DESC LIMIT 1;
SELECT count(DISTINCT series_name),  count(DISTINCT content) FROM tv_channel;
SELECT count(DISTINCT series_name),  count(DISTINCT content) FROM tv_channel;
SELECT content FROM tv_channel WHERE series_name  =  "Sky Radio";
SELECT series_name FROM tv_channel WHERE series_name  =  "Sky Radio";
SELECT package_option FROM tv_channel WHERE Series_name  =  "Sky Radio";
SELECT DISTINCT package_option FROM tv_channel WHERE Series_name  =  "Sky Radio";
SELECT count(*) FROM tv_channel WHERE language  =  "English";
SELECT count(*) FROM tv_channel WHERE language  =  "English";
SELECT language,  count(*) FROM tv_channel GROUP BY language ORDER BY count(*) ASC LIMIT 1;
SELECT language,  count(*) FROM tv_channel GROUP BY language ORDER BY count(*) ASC LIMIT 1;;
SELECT language,  count(*) FROM tv_channel GROUP BY language;
SELECT language,  count(*) FROM tv_channel GROUP BY language;
SELECT T1.series_name FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel WHERE T2.title  =  "The Rise of the Blue Beetle!";
SELECT T1.Series_name FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel WHERE T2.title  =  "The Rise of the Blue Beetle";
SELECT T2.title FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel JOIN tv_series AS T3 ON T1.id  =  T3.channel WHERE T3.Series_name  =  "Sky Radio";
SELECT T1.title FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T2.series_name  =  "Sky Radio";
SELECT episode FROM tv_series ORDER BY rating;
SELECT episode FROM tv_series ORDER BY rating;
SELECT episode,  rating FROM tv_series ORDER BY rating DESC LIMIT 3;
SELECT episode,  rating FROM tv_series ORDER BY rating DESC LIMIT 3;
SELECT min(Share),  max(Share) FROM tv_series;
SELECT max(Share),  min(Share) FROM tv_series;
SELECT Air_date FROM tv_series WHERE Episode  =  "A Love of a Lifetime";
SELECT air_date FROM tv_series WHERE episode  =  "A Love of a Lifetime";
SELECT Weekly_Rank FROM tv_series WHERE Episode  =  "A Love of a Lifetime";
SELECT weekly_rank FROM tv_series WHERE episode  =  "A Love of a Lifetime";
SELECT T1.series_name FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.id  =  T2.channel WHERE T2.episode  =  "A Love of a Lifetime";
SELECT T2.Series_name FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T1.episode  =  "A Love of a Lifetime";
SELECT T1.Episode FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T2.Series_Name  =  "Sky Radio";
SELECT episode FROM tv_series WHERE series_name  =  "Sky Radio";
SELECT count(*),  directed_by FROM cartoon GROUP BY directed_by;
SELECT directed_by,  count(*) FROM cartoon GROUP BY directed_by;
SELECT production_code,  channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1;
SELECT production_code,  channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1;
SELECT package_option,  series_name FROM tv_channel WHERE Hight_Definition_TV  =  'Yes';
SELECT package_option,  series_name FROM tv_channel WHERE Hight_Definition_TV  =  'Yes';
SELECT T1.country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel WHERE T2.written_by  =  "Todd Casey";
SELECT T2.country FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T1.written_by  =  "Todd Casey";
SELECT country FROM tv_channel EXCEPT SELECT T2.country FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id JOIN cartoon AS T2 ON T1.channel  =  T2.channel AND T1.written_by  =  'Todd Casey';
SELECT country FROM tv_channel EXCEPT SELECT country FROM tv_channel JOIN cartoon ON cartoon.id  =  cartoon.channel JOIN tv_channel AS T1 ON T1.id  =  T1.channel WHERE T1.written_by  =  "Todd Casey";
SELECT T2.series_name,  T2.country FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T1.directed_by  =  "Ben Jones" INTERSECT SELECT T2.series_name,  T2.country FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T1.directed_by  =  "Michael Chang";
SELECT T2.series_name,  T2.country FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T1.directed_by  =  "Ben Jones" INTERSECT SELECT T2.series_name,  T2.country FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T1.directed_by  =  "Michael Chang";
SELECT par,  country FROM tv_channel WHERE language!= 'English';
SELECT PAR,  country FROM tv_channel WHERE language!= 'English';
SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2;
SELECT id FROM tv_channel GROUP BY id HAVING count(*)  >  2;
SELECT id FROM tv_channel EXCEPT SELECT channel FROM cartoon WHERE directedBy  =  "Ben Jones";
SELECT id FROM cartoon EXCEPT SELECT channel FROM cartoon WHERE directedBy  =  "Ben Jones";
SELECT package_option FROM tv_channel EXCEPT SELECT t1.package_option FROM tv_channel AS t1 JOIN cartoon AS t2 ON t1.id  =  t2.channel WHERE t2.directed_by  =  "Ben Jones";
SELECT DISTINCT package_option FROM tv_channel EXCEPT SELECT t1.package_option FROM tv_channel AS t1 JOIN cartoon AS t2 ON t1.id  =  t2.channel JOIN series AS t3 ON t2.id  =  t3.id WHERE t3.director  =  "Ben Jones";
SELECT count(*) FROM poker_player;
SELECT count(*) FROM poker_player;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Final_Table_Made,  BEST_Finish FROM poker_player;
SELECT Final_Table_Made,  Best_Finish FROM poker_player;
SELECT avg(Earnings) FROM poker_player;
SELECT avg(Earnings) FROM poker_player;
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000;
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000;
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID;
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID;
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000;
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE Earnings  >  300000;
SELECT T1.Name,  T1.Nationality FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY Final_Table_Made;
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made ASC;
SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY Earnings LIMIT 1;
SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Earnings LIMIT 1;
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;
SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1;
SELECT avg(T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200;
SELECT avg(T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200;
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Earnings DESC;
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Earnings DESC;
SELECT Nationality,  COUNT(*) FROM people GROUP BY Nationality;
SELECT Nationality,  COUNT(*) FROM people GROUP BY Nationality;
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2;
SELECT Name,  Birth_Date FROM people ORDER BY Name ASC;
SELECT Name,  Birth_Date FROM people ORDER BY Name;
SELECT Name FROM people WHERE Nationality!= "Russia";
SELECT Name FROM People WHERE Nationality!= "Russian";
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
SELECT count(DISTINCT Nationality) FROM people;
SELECT count(DISTINCT Nationality) FROM people;
SELECT count(DISTINCT State) FROM Area_code_state;
SELECT Contestant_Number,  Contestant_Name FROM Contestants ORDER BY Contestant_Name DESC;
SELECT Vote_ID,  phone_number,  STATE FROM votes;
SELECT max(area_code),  min(area_code) FROM Area_code_state;
SELECT max(T2.Created) FROM area_code_state AS T1 JOIN votes AS T2 ON T1.State  =  T2.State WHERE T1.State  =  "CA";
SELECT Contestant_name FROM Contestants WHERE Contestant_name!= 'Jessie Alloway';
SELECT DISTINCT State,  Created FROM votes;
SELECT T1.Contestant_Number,  T2.Contestant_Name FROM Votes AS T1 JOIN Contestants AS T2 ON T1.Contestant_Number  =  T2.Contestant_Number GROUP BY T1.Contestant_Number HAVING COUNT(*)  >=  2;
SELECT contestant_number,  contestant_name FROM Contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes GROUP BY contestant_number ORDER BY count(*) DESC LIMIT 1);
SELECT count(*) FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state WHERE T1.state  =  'NY' OR T1.state  =  'CA';
SELECT count(*) FROM Contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes);
SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T2.state ORDER BY COUNT(*) DESC LIMIT 1;
SELECT created,  state,  phone_number FROM votes WHERE contestant_number  =  (SELECT contestant_number FROM contestants WHERE contestant_name  =  'Tabatha Gehling');
SELECT T2.area_code FROM Contestants AS T1 JOIN Votes AS T2 ON T1.Contestant_Number  =  T2.Contestant_Number WHERE T1.Contestant_Name  =  'Tabatha Gehling' INTERSECT SELECT T2.area_code FROM Contestants AS T1 JOIN Votes AS T2 ON T1.Contestant_Number  =  T2.Contestant_Number WHERE T1.Contestant_Name  =  'Kelly Clauss';
SELECT Contestant_name FROM Contestants WHERE Contestant_name LIKE '%Al%';
SELECT Name FROM country WHERE IndepYear  >  1950;
SELECT Name FROM country WHERE IndepYear  >  1950;
SELECT count(*) FROM country WHERE GovernmentForm  =  "republic";
SELECT count(*) FROM country WHERE GovernmentForm  =  "republic";
SELECT sum(surfacearea) FROM country WHERE region  =  'Caribbean';
SELECT sum(surfacearea) FROM country WHERE continent  =  "Carribean";
SELECT continent FROM country WHERE name = "Anguilla";
SELECT T2.continent FROM country AS T1 JOIN country AS T2 ON T1.code  =  T2.code WHERE T1.name  =  "Anguilla";
SELECT region FROM country AS t1 JOIN city AS t2 ON t1.code  =  t2.countrycode WHERE t2.name  =  'Kabul';
SELECT region FROM country WHERE Capital  =  "Kabul";
SELECT T2.Language FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2  =  T2.Countrycode WHERE T1.Name  =  "Aruba" GROUP BY T2.Language ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.Language FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba";
SELECT Population,  LifeExpectancy FROM country WHERE Continent  =  "South America" AND Name  =  "Brazil";
SELECT Population,  LifeExpectancy FROM country WHERE Continent  =  "South America" AND Name  =  "Brazil";
SELECT Region,  Population FROM country WHERE Name = "Angola";
SELECT region,  sum(Population) FROM country WHERE Name  =  'Angola' GROUP BY region;
SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa";
SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Central Africa";
SELECT name FROM country WHERE LifeExpectancy  IN ( SELECT min(LifeExpectancy) FROM country WHERE Continent  =  'Asia' );
SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1;
SELECT sum(Population),  max(GNP) FROM country WHERE Continent  =  "Asia";
SELECT sum(population),  max(GNP) FROM country WHERE Continent  =  "Asia";
SELECT avg(LifeExpectancy) FROM country WHERE GovernmentForm  =  "republic" AND continent  =  "Africa";
SELECT avg(LifeExpectancy) FROM country WHERE GovernmentForm  =  "republic" AND Continent  =  "Africa";
SELECT sum(surface_area) FROM country WHERE continent  =  'Asia' OR continent  =  'Europe';
SELECT sum(surfacearea) FROM country WHERE continent  =  'Asia' OR continent  =  'Europe';
SELECT sum(Population) FROM city WHERE District  =  "Gelderland";
SELECT sum(Population) FROM City WHERE District  =  "Gelderland";
SELECT avg(GNP),  sum(Population) FROM country WHERE GovernmentForm  =  "US territory";
SELECT avg(GNP),  sum(Population) FROM country WHERE Code2  =  'USA';
SELECT count(DISTINCT Language) FROM CountryLanguage;
SELECT count(DISTINCT language) FROM CountryLanguage;
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa";
SELECT count(DISTINCT GovernmentForm) FROM Country WHERE Continent  =  "Africa";
SELECT sum(T2.Percentage) FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2  =  T2.Countrycode WHERE T1.Name  =  "Aruba";
SELECT count(DISTINCT language) FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.countrycode  =  T2.code WHERE T2.name  =  "Aruba";
SELECT count(*) FROM CountryLanguage WHERE CountryCode  =  'AFG' AND IsOfficial  =  'Y';
SELECT count(DISTINCT language) FROM CountryLanguage WHERE countrycode = "AF" AND IsOfficial  =  "true";
SELECT T2.name FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.countrycode  =  T2.code ORDER BY T1.Percentage DESC LIMIT 1;
SELECT T2.Name FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.CountryCode  =  T2.Code ORDER BY T1.Percentage DESC LIMIT 1;
SELECT T2.Continent FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.CountryCode  =  T2.Code WHERE T1.Percentage  =  (SELECT max(T3.Percentage) FROM CountryLanguage AS T3);
SELECT T2.continent FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code GROUP BY T2.continent ORDER BY count(*) DESC LIMIT 1;
SELECT count(*) FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "Dutch" AND T2.name  =  "England";
SELECT count(*) FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "english" AND T1.isofficial  =  1 AND T2.name IN (SELECT T3.name FROM Country AS T3 JOIN CountryLanguage AS T4 ON T3.code  =  T4.countrycode WHERE T4.language  =  "dutch" AND T4.isofficial  =  1);
SELECT T1.Name FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2  =  T2.CountryCode WHERE T2.Language  =  "French";
SELECT T2.Name FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.CountryCode  =  T2.Code WHERE T1.Language  =  "English" INTERSECT SELECT T2.Name FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.CountryCode  =  T2.Code WHERE T1.Language  =  "French";
SELECT T2.name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "English" AND T1.isofficial  =  1 INTERSECT SELECT T2.name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "French" AND T1.isofficial  =  1;
SELECT T2.name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "English" AND T1.isofficial  =  1 INTERSECT SELECT T2.name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "French" AND T1.isofficial  =  1;
SELECT count(DISTINCT t2.continent) FROM countrylanguage AS t1 JOIN country AS t2 ON t1.countrycode  =  t2.code WHERE t1.language  =  "Chinese";
SELECT count(DISTINCT continent) FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "Chinese";
SELECT T2.name FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "english" OR T1.language  =  "dutch";
SELECT T2.region FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "Dutch" OR T1.language  =  "English";
SELECT T2.name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "english" OR T1.language  =  "dutch";
SELECT T2.name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "english" OR T1.language  =  "dutch";
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code2  =  T2.Countrycode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.Language FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Continent  =  "Asia" GROUP BY T1.Language ORDER BY count(*) DESC LIMIT 1;
SELECT T2.Language FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.CountryCode  =  T2.Code WHERE T1.IsOfficial  =  'Yes' GROUP BY T2.Language HAVING count(*)  =  1;
SELECT T2.Language FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2  =  T2.Countrycode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1;
SELECT name FROM city WHERE population  =  (SELECT max(population) FROM city WHERE countrycode  =  'USA' AND language  =  "english");
SELECT name FROM city WHERE Population  =  (SELECT max(Population) FROM city) AND countrycode IN (SELECT countrycode FROM countrylanguage WHERE language  =  "english");
SELECT Name,  Population,  LifeExpectancy FROM Country WHERE Continent  =  'Asia' ORDER BY SurfaceArea DESC LIMIT 1;
SELECT name,  population,  LifeExpectancy FROM Country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1;
SELECT avg(T2.LifeExpectancy) FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.CountryCode  =  T2.Code WHERE T1.IsOfficial!= "English";
SELECT avg(T2-LifeExpectancy) FROM countrylanguage WHERE isofficial  =  'No';
SELECT sum(Population) FROM city WHERE CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language  =  "english");
SELECT sum(Population) FROM city WHERE CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language  =  "English");
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code2 = T2.Countrycode WHERE T1.HeadofState = "Beatrix";
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code2 = T2.CountryCode WHERE T1.HeadofState = "Beatrix";
SELECT count(DISTINCT T2.Language) FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2  =  T2.CountryCode WHERE T1.IndepdentYear  <  1930;
SELECT count(DISTINCT language) FROM CountryLanguage WHERE countrycode IN (SELECT code FROM Country WHERE IndepYear  <  1930);
SELECT name FROM country WHERE SurfaceArea  >  (SELECT max(SurfaceArea) FROM country WHERE continent  =  'Europe');
SELECT name FROM country WHERE SurfaceArea  >  (SELECT max(SurfaceArea) FROM country WHERE Continent  =  "Europe");
SELECT Name FROM country WHERE Continent  =  "Africa" AND Population  <  (SELECT max(Population) FROM country WHERE Continent  =  "Asia");
SELECT * FROM country WHERE Continent  =  "Africa" AND Population  <  (SELECT max(Population) FROM country WHERE Continent  =  "Asia");
SELECT * FROM country WHERE continent  =  'Asia' AND Population  >  (SELECT max(Population) FROM city WHERE continent  =  'Africa');
SELECT name FROM country WHERE continent  =  'Asia' AND population  >  (SELECT max(population) FROM city WHERE continent  =  'Africa');
SELECT code2 FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language  =  "english");
SELECT code2 FROM countrylanguage WHERE language!= "English";
SELECT T2.Code2 FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T1.Language!= "English";
SELECT t2.code2 FROM countrylanguage AS t1 JOIN country AS t2 ON t1.countrycode  =  t2.code WHERE t1.language!= "english";
SELECT code2 FROM country EXCEPT SELECT code2 FROM country WHERE governmentform  =  "Republic" INTERSECT SELECT code2 FROM countrylanguage WHERE Language  =  "English";
SELECT code2 FROM country EXCEPT SELECT code2 FROM country WHERE GovernmentForm  =  "Republic" INTERSECT SELECT code2 FROM countrylanguage WHERE Language  =  "English";
SELECT T2.Name FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2  =  T2.CountryCode WHERE T1.continent  =  "Europe" AND T2.IsOfficial  =  0;
SELECT T2.Name FROM CountryLanguage AS T1 JOIN city AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T1.IsOfficial  =  'No' AND T2.Name LIKE '% Europe';
SELECT DISTINCT T2.Name FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.CountryCode  =  T2.Code WHERE T1.Language  =  "Chinese" AND T2.Continent  =  "Asia";
SELECT DISTINCT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "Chinese" AND T1.continent  =  "Asia";
SELECT Name,  IndependenceYear,  SurfaceArea FROM Country ORDER BY Population LIMIT 1;
SELECT Name,  IndepDentYear,  SurfaceArea FROM Country ORDER BY Population LIMIT 1;
SELECT Population,  Name,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;
SELECT Name,  Population,  HeadOfState FROM Country ORDER BY SurfaceArea DESC LIMIT 1;
SELECT T2.Name,  count(*) FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.CountryCode  =  T2.Code GROUP BY T1.CountryCode HAVING count(*)  >=  3;
SELECT T2.Name,  count(*) FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.CountryCode  =  T2.Code GROUP BY T1.CountryCode HAVING count(*)  >  2;
SELECT district,  count(*) FROM city WHERE population  >  (SELECT avg(population) FROM city) GROUP BY district;
SELECT district,  count(*) FROM city WHERE population  >  (SELECT avg(population) FROM city) GROUP BY district;
SELECT GovernmentForm,  Sum(Population) FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72;
SELECT GovernmentForm,  Sum(Population) FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72;
SELECT avg(lifeExpectancy),  sum(Population),  continent FROM country GROUP BY continent HAVING avg(lifeExpectancy)  <  72;
SELECT continent,  sum(population),  avg(lifeExpectancy) FROM country GROUP BY continent HAVING avg(lifeExpectancy)  <  72;
SELECT Name,  Continent,  Region,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name FROM Country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT count(*) FROM country WHERE continent  =  "Asia";
SELECT count(*) FROM country WHERE continent  =  'Asia';
SELECT Name FROM country WHERE Continent  =  "Europe" AND Population  =  80000;
SELECT Name FROM Country WHERE Continent  =  "Europe" AND Population =  80000;
SELECT sum(Population),  avg(Surface_area) FROM country WHERE Continent  =  "North America" AND Surface_area  >  3000;
SELECT sum(Population),  avg(SurfaceArea) FROM country WHERE Continent  =  "North America" AND SurfaceArea  >  3000;
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT T2.Language FROM countryAS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T2.Language ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code2  =  T2.CountryCode GROUP BY T2.Language ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.Name,  T3.Language FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code2  =  T2.CountryCode JOIN CountryLanguage AS T3 ON T1.Code2  =  T3.CountryCode AND T3.Percentage  =  (SELECT max(Percentage) FROM CountryLanguage);
SELECT T2.Code2,  T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code ORDER BY T1.Percentage DESC LIMIT 1;
SELECT T1.name,  T1.continent,  sum(T2.Percentage) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2  =  T2.countrycode WHERE T2.language  =  "Spanish" GROUP BY T1.continent ORDER BY sum(T2.Percentage) DESC LIMIT 1;
SELECT count(*) FROM CountryLanguage WHERE Percentage  =  'Spanish';
SELECT T2.code2 FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "Spanish" GROUP BY T1.countrycode ORDER BY avg(percentage) DESC LIMIT 1;
SELECT T2.code2 FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "Spanish" AND T1.isofficial  =  1;
SELECT count(*) FROM conductor;
SELECT count(*) FROM conductor;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Name FROM conductor ORDER BY Age;
SELECT name FROM conductor WHERE nationality!= "USA";
SELECT name FROM conductor WHERE nationality!= "USA";
SELECT Record_company FROM orchestra ORDER BY Year_of_founded DESC;
SELECT Record_company FROM orchestra ORDER BY Year_of_founded DESC;
SELECT avg(Attendance) FROM show;
SELECT avg(Attendance) FROM show;
SELECT max(Share),  min(Share) FROM performance WHERE TYPE!= "Live final";
SELECT max(Share),  min(Share) FROM performance WHERE TYPE!= "Live final";
SELECT count(DISTINCT nationality) FROM conductor;
SELECT count(DISTINCT Nationality) FROM conductor;
SELECT Name FROM conductor ORDER BY Year_of_work DESC;
SELECT name FROM conductor ORDER BY Year_of_work DESC;
SELECT name FROM conductor ORDER BY YEAR_of_work DESC LIMIT 1;
SELECT name FROM conductor ORDER BY YEAR_of_work DESC LIMIT 1;
SELECT T3.Name,  T2.Orchestra FROM performance AS T1 JOIN orchestra AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID JOIN conductor AS T3 ON T2.Conductor_ID  =  T3.Conductor_ID;
SELECT T2.Orchestra,  T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID;
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(*)  >  1;
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(*)  >  1;
SELECT T2.Name FROM performance AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.conductor_id  =  T2.conductor_id WHERE T2.year_of_founded  >  2008;
SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE T1.Year_of_Founded  >  2008;
SELECT Record_company,  COUNT(*) FROM orchestra GROUP BY Record_company;
SELECT Record_company,  count(*) FROM orchestra GROUP BY Record_company;
SELECT major_record_format FROM orchestra ORDER BY count(*) ASC;
SELECT Major_Record_Format FROM orchestra ORDER BY COUNT(*) DESC;
SELECT Record_company FROM orchestra GROUP BY Record_company ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Record_company FROM orchestra GROUP BY Record_company ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Orchestra FROM orchestra WHERE Orchestra_id NOT IN (SELECT Orchestra_id FROM performance);
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);
SELECT Record_company FROM orchestra WHERE Year_of_founded  <  2003 INTERSECT SELECT Record_company FROM orchestra WHERE Year_of_founded  >  2003;
SELECT Record_company FROM orchestra WHERE Year_of_founded  <  2003 INTERSECT SELECT Record_company FROM orchestra WHERE Year_of_founded  >  2003;
SELECT count(*) FROM orchestra WHERE major_record_format  =  "CD" OR major_record_format  =  "DVD";
SELECT count(*) FROM orchestra WHERE major_record_format  =  "CD" OR major_record_format  =  "DVD";
SELECT YEAR_of_founded FROM orchestra GROUP BY YEAR_of_founded HAVING COUNT(*)  >  1;
SELECT YEAR_of_founded FROM orchestra GROUP BY YEAR_of_founded HAVING COUNT(*)  >  1;
SELECT count(*) FROM highschooler WHERE grade  =  'High School';
SELECT count(*) FROM Highschooler WHERE grade  =  "High School";
SELECT name,  grade FROM highschooler WHERE grade  >=  10;
SELECT name,  grade FROM highschooler WHERE grade  =  'high';
SELECT DISTINCT grade FROM highschooler WHERE grade  >=  15;
SELECT DISTINCT grade FROM highschooler;
SELECT grade FROM highschooler WHERE name  =  'Kyle';
SELECT grade FROM highschooler WHERE name  =  'Kyle';
SELECT name FROM highschooler WHERE grade  =  "10";
SELECT name FROM highschooler WHERE grade  =  10;
SELECT id FROM highschooler WHERE name  =  'Kyle';
SELECT T2.id FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id JOIN highschooler AS T3 ON T2.student_id  =  T3.id WHERE T3.name  =  'Kyle';
SELECT count(*) FROM highschooler WHERE grade  =  9 OR grade  =  10;
SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10;
SELECT count(*),  grade FROM highschooler GROUP BY grade;
SELECT count(*),  grade FROM highschooler GROUP BY grade;
SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1;
SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1;
SELECT DISTINCT grade FROM highschooler GROUP BY grade HAVING count(*)  >=  4;
SELECT DISTINCT grade FROM highschooler GROUP BY grade HAVING count(*)  >=  4;
SELECT T1.student_id,  count(*) FROM friend AS T1 JOIN highschooler AS T2 ON T1.friend_id  =  T2.id GROUP BY T1.student_id;
SELECT count(*),  T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name;
SELECT count(*),  T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name;
SELECT count(*),  T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name;
SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T2.friend_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.id HAVING count(*)  >=  3;
SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id HAVING count(*)  >=  3;
SELECT T3.name FROM friend AS T1 JOIN highschooler AS T2 ON T1.friend_id  =  T2.id JOIN highschooler AS T3 ON T1.student_id  =  T3.id WHERE T2.grade  =  'High' AND T2.name  =  'Kyle';
SELECT T3.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id JOIN highschooler AS T3 ON T2.student_id  =  T3.id WHERE T1.grade  =  'High School' AND T3.name  =  'Kyle';
SELECT count(*) FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id WHERE name  =  "Kyle";
SELECT count(*) FROM friend WHERE friend_id IN (SELECT friend_id FROM highschooler WHERE name  =  "Kyle");
SELECT id FROM highschooler EXCEPT SELECT friend_id FROM friend;
SELECT id FROM highschooler EXCEPT SELECT friend_id FROM friend;
SELECT name FROM highschooler WHERE id NOT IN (SELECT friend_id FROM friend);
SELECT name FROM highschooler EXCEPT SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id;
SELECT id FROM highschooler WHERE grade  =  "High" INTERSECT SELECT T1.liked_id FROM likes AS T1 JOIN highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  =  "High";
SELECT T1.id FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id INTERSECT SELECT T1.id FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id;
SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id INTERSECT SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id;
SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id JOIN likes AS T3 ON T1.id  =  T3.student_id WHERE T2.friend_id IN (SELECT liked_id FROM likes) INTERSECT SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id WHERE T2.liked_id IN (SELECT friend_id FROM friend);
SELECT count(*),  student_id FROM likes GROUP BY student_id;
SELECT count(*),  student_id FROM likes GROUP BY student_id;
SELECT T2.name,  count(*) FROM likes AS T1 JOIN highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T2.id HAVING avg(grade)  =  'high';
SELECT T1.name,  count(*) FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id HAVING avg(grade)  =  12;
SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id HAVING count(*)  >=  2;
SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id HAVING count(*)  >=  2;
SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.id HAVING count(*)  >=  2 INTERSECT SELECT name FROM highschooler WHERE grade  >  5;
SELECT name FROM highschooler WHERE grade  >  5 INTERSECT SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id HAVING count(*)  >=  2;
SELECT count(*) FROM likes AS T1 JOIN highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle';
SELECT count(*) FROM highschooler WHERE name  =  'Kyle' AND grade  =  "High School";
SELECT avg(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend);
SELECT avg(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend);
SELECT min(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);
SELECT min(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);
SELECT state FROM owners INTERSECT SELECT state FROM professionals;
SELECT state FROM owners INTERSECT SELECT state FROM professionals;
SELECT avg(age) FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id  =  T2.dog_id;
SELECT avg(T1.age) FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id  =  T2.dog_id;
SELECT professional_id,  last_name,  cell_number FROM professionals WHERE state  =  'Indiana' OR count(*)  >  2;
SELECT professional_id,  last_name,  cell_number FROM professionals WHERE state  =  'Indiana' OR count(*)  >  2;
SELECT T1.name FROM dogs AS T1 JOIN owners AS T2 ON T1.owner_id = T2.owner_id WHERE T2.first_name,  T2.last_name IN ( SELECT T4.first_name,  T4.last_name FROM owners AS T3 JOIN treatments AS T4 ON T3.owner_id = T4.owner_id WHERE T4.cost_of_treatment  >  1000 );
SELECT T1.name FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id  =  T2.dog_id JOIN owners AS T3 ON T1.owner_id  =  T3.owner_id WHERE T3.first_name,  T3.last_name,  T3.street,  T3.city,  T3.state,  T3.zip_code,  T3.email_address,  T3.home_phone,  T3.cell_number,  T2.cost;
SELECT first_name FROM owners EXCEPT SELECT first_name FROM professionals UNION SELECT first_name FROM dogs;
SELECT first_name FROM owners EXCEPT SELECT first_name FROM professionals INTERSECT SELECT first_name FROM dogs;
SELECT professional_id,  role_code,  email_address FROM Professionals EXCEPT SELECT professional_id,  role_code,  email_address FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id  =  T2.dog_id;
SELECT professional_id,  role_code,  email_address FROM professionals EXCEPT SELECT professional_id,  role_code,  email_address FROM treatments AS T1 JOIN dogs AS T2 ON T1.dog_id  =  T2.dog_id;
SELECT T1.owner_id,  T1.first_name,  T1.last_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.owner_id,  T1.first_name,  T1.last_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;
SELECT Professional_ID,  role_code,  first_name FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY Professional_ID HAVING count(*)  >=  2;
SELECT T1.professional_id,  T1.role_code,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2;
SELECT T1.breed_name FROM breeds AS T1 JOIN dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.breed_code ORDER BY count(*) DESC LIMIT 1;
SELECT T2.breed_name FROM dogs AS T1 JOIN breeds AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_code ORDER BY count(*) DESC LIMIT 1;
SELECT T1.owner_id,  T2.last_name FROM dogs AS T1 JOIN owners AS T2 ON T1.owner_id  =  T2.owner_id JOIN treatments AS T3 ON T1.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1;
SELECT T1.owner_id,  T3.last_name FROM dogs AS T1 JOIN owners AS T2 ON T1.owner_id  =  T2.owner_id JOIN (SELECT sum(T2.cost_of_treatment),  T1.owner_id FROM treatments AS T1 JOIN dogs AS T2 ON T1.dog_id  =  T2.dog_id GROUP BY T1.owner_id ORDER BY sum(T2.cost_of_treatment) DESC LIMIT 1) AS T3 ON T;
SELECT t1.treatment_type_description FROM treatment_types AS t1 JOIN treatments AS t2 ON t1.treatment_type_code  =  t2.treatment_type_code GROUP BY t1.treatment_type_code ORDER BY sum(t2.cost_of_treatment) LIMIT 1;
SELECT t1.treatment_type_description FROM treatment_types AS t1 JOIN treatments AS t2 ON t1.treatment_type_code  =  t2.treatment_type_code GROUP BY t2.treatment_type_code ORDER BY sum(t2.cost_of_treatment) LIMIT 1;
SELECT T1.owner_id,  T1.zip_code FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN charges AS T3 ON T3.charge_id  =  T2.weight ORDER BY sum(T3.charge_amount) DESC LIMIT 1;
SELECT T1.owner_id,  T1.zip_code FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY sum(T2.charge_amount) DESC LIMIT 1;
SELECT Professional_ID,  cell_number FROM professionals GROUP BY Professional_ID HAVING count(*)  >=  2;
SELECT Professional_ID,  cell_number FROM treatments AS T1 JOIN professionals AS T2 ON T1.professional_ID  =  T2.professional_ID GROUP BY Professional_ID HAVING count(*)  >=  2;
SELECT T2.first_name,  T2.last_name FROM treatments AS T1 JOIN professionals AS T2 ON T1.professional_id  =  T2.professional_id WHERE T1.cost_of_treatment  <  (SELECT avg(cost_of_treatment) FROM treatments);
SELECT T1.first_name,  T1.last_name FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM treatments );
SELECT T1.date_of_treatment,  T2.first_name FROM treatments AS T1 JOIN professionals AS T2 ON T1.professional_id  =  T2.professional_id;
SELECT T2.date_of_treatment,  T3.first_name FROM treatments AS T1 JOIN professionals AS T2 ON T1.professional_id  =  T2.professional_id JOIN owners AS T3 ON T1.professional_id  =  T3.owner_id;
SELECT T2.charge_type,  T1.cost_of_treatment FROM treatments AS T1 JOIN Charges AS T2 ON T1.charge_id  =  T2.charge_id;
SELECT T2.cost_of_treatment,  T1.treatment_type_description FROM treatment_types AS T1 JOIN treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code;
SELECT T1.first_name,  T1.last_name,  T2.size_description FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id;
SELECT T1.first_name,  T1.last_name,  T2.size_description FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id;
SELECT T2.first_name,  T1.name FROM dogs AS T1 JOIN owners AS T2 ON T1.owner_id  =  T2.owner_id;
SELECT T1.first_name,  T2.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id;
SELECT T2.name,  T4.date_of_treatment FROM breeds AS T1 JOIN dogs AS T2 ON T1.breed_code  =  T2.breed_code JOIN treatments AS T3 ON T2.dog_id  =  T3.dog_id JOIN treatment_types AS T4 ON T3.treatment_type_code  =  T4.treatment_type_code WHERE T1.breed_name  =  "French Bulldog" GROUP BY T2.dog_id ORDER BY;
SELECT T1.name,  T2.Date_of_Treatment FROM dogs AS T1 JOIN treatments AS T2 ON T1.Dog_ID  =  T2.Dog_ID JOIN breeds AS T3 ON T1.breed_code  =  T3.breed_code ORDER BY T3.breed_name ASC LIMIT 1;
SELECT T2.first_name,  T1.name FROM dogs AS T1 JOIN owners AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.state  =  "VA";
SELECT T1.first_name,  T2.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'VA';
SELECT T1.date_arrived,  T1.date_departed FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id  =  T2.dog_id;
SELECT T1.date_arrived,  T1.date_departed FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id  =  T2.dog_id;
SELECT T1.last_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.age LIMIT 1;
SELECT t2.last_name FROM dogs AS t1 JOIN owners AS t2 ON t1.owner_id  =  t2.owner_id WHERE t1.age  =  (SELECT min(age) FROM dogs);
SELECT email_address FROM professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin';
SELECT email_address FROM professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin';
SELECT date_arrived,  date_departed FROM dogs;
SELECT date_arrived,  date_departed FROM dogs;
SELECT count(DISTINCT dog_id) FROM treatments;
SELECT count(DISTINCT dog_id) FROM treatments;
SELECT count(DISTINCT professional_id) FROM treatments;
SELECT count(DISTINCT professional_id) FROM treatments AS T1 JOIN professionals AS T2 ON T1.professional_id  =  T2.professional_id WHERE T1.dog_id IN (SELECT dog_id FROM dogs WHERE breed_code  =  "German Shepherd");
SELECT role_code,  street,  city,  state FROM Professionals WHERE city LIKE '%West%';
SELECT role_code,  street,  city,  state FROM professionals WHERE city LIKE '%West%';
SELECT first_name, last_name,  email_address FROM owners WHERE state LIKE '%North%';
SELECT first_name,  last_name,  email_address FROM owners WHERE state LIKE '%North%';
SELECT count(*) FROM dogs WHERE age  <  (SELECT avg(age) FROM dogs);
SELECT count(*) FROM dogs WHERE age  <  (SELECT avg(age) FROM dogs);
SELECT max(cost_of_treatment) FROM treatments;
SELECT max(cost_of_treatment) FROM treatments;
SELECT count(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments);
SELECT count(*) FROM dogs WHERE dog_id NOT IN ( SELECT dog_id FROM treatments );
SELECT count(*) FROM owners WHERE owner_id NOT IN ( SELECT owner_id FROM dogs );
SELECT count(*) FROM owners WHERE owner_id NOT IN ( SELECT owner_id FROM dogs );
SELECT count(*) FROM professionals WHERE professional_id NOT IN ( SELECT professional_id FROM treatments WHERE dog_id IN ( SELECT dog_id FROM dogs WHERE breed_code LIKE "%dog%" ) );
SELECT count(*) FROM professionals WHERE professional_id NOT IN ( SELECT professional_id FROM treatments );
SELECT name,  age,  weight FROM dogs WHERE abandoned_yes_or_no  =  1;
SELECT name,  age,  weight FROM dogs WHERE abandoned_yes_or_no = 1;
SELECT avg(age) FROM dogs;
SELECT avg(age) FROM dogs;
SELECT age FROM dogs ORDER BY age DESC LIMIT 1;
SELECT age FROM dogs ORDER BY age DESC LIMIT 1;
SELECT charge_type,  charge_amount FROM Charges;
SELECT charge_type,  charge_amount FROM charges;
SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1;
SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1;
SELECT email_address,  cell_number,  home_phone FROM Professionals;
SELECT email_address,  cell_number,  home_phone FROM Professionals;
SELECT breed_code,  size_code FROM dogs GROUP BY breed_code,  size_code;
SELECT DISTINCT T1.breed_code,  T1.size_code FROM breeds AS T1 JOIN dogs AS T2 ON T1.breed_code  =  T2.breed_code;
SELECT T1.first_name,  T2.treatment_type_description FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id;
SELECT T1.first_name,  T3.treatment_type_description FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code;
SELECT count(*) FROM singer;
SELECT count(*) FROM singer;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Birth_Year,  Citizenship FROM singer;
SELECT Birth_Year,  Citizenship FROM singer;
SELECT name FROM singer WHERE citizenship!= "France";
SELECT name FROM singer WHERE citizenship!= 'French';
SELECT name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949;
SELECT name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949;
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;
SELECT name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT Citizenship,  COUNT(*) FROM singer GROUP BY Citizenship;
SELECT Citizenship,  COUNT(*) FROM singer GROUP BY Citizenship;
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Citizenship,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship;
SELECT citizenship,  max(net_worth_millions) FROM singer GROUP BY citizenship;
SELECT T2.title,  T1.name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id;
SELECT T2.title,  T1.name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id;
SELECT DISTINCT T1.name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id WHERE T2.sales  >  300000;
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000;
SELECT T2.name FROM song AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.singer_id HAVING count(*)  >  1;
SELECT T1.name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.name HAVING count(*)  >  1;
SELECT T2.name,  sum(T1.sales) FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id;
SELECT T1.name,  sum(T1.sales) FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id;
SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song);
SELECT name FROM singer EXCEPT SELECT T1.name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id;
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955;
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955;
SELECT count(*) FROM Other_Available_features;
SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  "AirCon";
SELECT T2.property_type_description FROM Other_Available_Features AS T1 JOIN Ref_Property_Types AS T2 ON T1.feature_type_code  =  T2.property_type_code WHERE T1.feature_name  =  "Residential";
SELECT T1.property_name FROM properties AS T1 JOIN ref_property_types AS T2 ON T1.property_type_code  =  T2.property_type_code WHERE T2.property_type_description  =  'House' OR T2.property_type_description  =  'Apartment' AND T1.room_count  >  1;
