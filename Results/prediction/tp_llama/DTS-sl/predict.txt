CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool ); Sample rows from `singer`: (1, Joe Sharp, Netherlands, You, 1992, 52, F), (2, Timbaland, United States, Dangerous, 2008, 32, T), (3, Justin Brown, France, Hey Oh, 2013, 29,;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool ); Sample rows from `singer`: (1, Joe Sharp, Netherlands, You, 1992, 52, F), (2, Timbaland, United States, Dangerous, 2008, 32, T), (3, Justin Brown, France, Hey Oh, 2013, 29,;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool ); Sample rows from `singer`: (1, Joe Sharp, Netherlands, You, 1992, 52, F), (2, Timbaland, United States, Dangerous, 2008, 32, T), (3, Justin Brown, France, Hey Oh, 2013, 29,;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool ); Sample rows from `singer`: (1, Joe Sharp, Netherlands, You, 1992, 52, F), (2, Timbaland, United States, Dangerous, 2008, 32, T), (3, Justin Brown, France, Hey Oh, 2013, 29,;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool ); Sample rows from `singer`: (1, Joe Sharp, Netherlands, You, 1992, 52, F), (2, Timbaland, United States, Dangerous, 2008, 32, T), (3, Justin Brown, France, Hey Oh, 2013, 29,;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool ); Sample rows from `singer`: (1, Joe Sharp, Netherlands, You, 1992, 52, F), (2, Timbaland, United States, Dangerous, 2008, 32, T), (3, Justin Brown, France, Hey Oh, 2013, 29,;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool ); Sample rows from `singer`: (1, Joe Sharp, Netherlands, You, 1992, 52, F), (2, Timbaland, United States, Dangerous, 2008, 32, T), (3, Justin Brown, France, Hey Oh, 2013, 29,;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool ); Sample rows from `singer`: (1, Joe Sharp, Netherlands, You, 1992, 52, F), (2, Timbaland, United States, Dangerous, 2008, 32, T), (3, Justin Brown, France, Hey Oh, 2013, 29,;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool ); Sample rows from `singer`: (1, Joe Sharp, Netherlands, You, 1992, 52, F), (2, Timbaland, United States, Dangerous, 2008, 32, T), (3, Justin Brown, France, Hey Oh, 2013, 29,;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool ); Sample rows from `singer`: (1, Joe Sharp, Netherlands, You, 1992, 52, F), (2, Timbaland, United States, Dangerous, 2008, 32, T), (3, Justin Brown, France, Hey Oh, 2013, 29,;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool ); Sample rows from `singer`: (1, Joe Sharp, Netherlands, You, 1992, 52, F), (2, Timbaland, United States, Dangerous, 2008, 32, T), (3, Justin Brown, France, Hey Oh, 2013, 29,;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool ); Sample rows from `singer`: (1, Joe Sharp, Netherlands, You, 1992, 52, F), (2, Timbaland, United States, Dangerous, 2008, 32, T), (3, Justin Brown, France, Hey Oh, 2013, 29,;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool ); Sample rows from `singer`: (1, Joe Sharp, Netherlands, You, 1992, 52, F), (2, Timbaland, United States, Dangerous, 2008, 32, T), (3, Justin Brown, France, Hey Oh, 2013, 29,;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool ); Sample rows from `singer`: (1, Joe Sharp, Netherlands, You, 1992, 52, F), (2, Timbaland, United States, Dangerous, 2008, 32, T), (3, Justin Brown, France, Hey Oh, 2013, 29,;
CREATE TABLE `stadium` ( Stadium_ID INT PRIMARY KEY, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT ); Sample rows from `stadium`: (1, Raith Rovers, Stark's Park, 10104, 4812, 1294, 2106), (2, Ayr United, Somerset Park, 11998, 2363, 1057, 1477), (3, East Fife, Bay;
CREATE TABLE `stadium` ( Stadium_ID INT PRIMARY KEY, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT ); Sample rows from `stadium`: (1, Raith Rovers, Stark's Park, 10104, 4812, 1294, 2106), (2, Ayr United, Somerset Park, 11998, 2363, 1057, 1477), (3, East Fife, Bay;
CREATE TABLE `stadium` ( Stadium_ID INT PRIMARY KEY, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT ); Sample rows from `stadium`: (1, Raith Rovers, Stark's Park, 10104, 4812, 1294, 2106), (2, Ayr United, Somerset Park, 11998, 2363, 1057, 1477), (3, East Fife, Bay;
CREATE TABLE `stadium` ( Stadium_ID INT PRIMARY KEY, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT ); Sample rows from `stadium`: (1, Raith Rovers, Stark's Park, 10104, 4812, 1294, 2106), (2, Ayr United, Somerset Park, 11998, 2363, 1057, 1477), (3, East Fife, Bay;
CREATE TABLE `stadium` ( Stadium_ID INT PRIMARY KEY, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT ); Sample rows from `stadium`: (1, Raith Rovers, Stark's Park, 10104, 4812, 1294, 2106), (2, Ayr United, Somerset Park, 11998, 2363, 1057, 1477), (3, East Fife, Bay;
CREATE TABLE `stadium` ( Stadium_ID INT PRIMARY KEY, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT ); Sample rows from `stadium`: (1, Raith Rovers, Stark's Park, 10104, 4812, 1294, 2106), (2, Ayr United, Somerset Park, 11998, 2363, 1057, 1477), (3, East Fife, Bay;
CREATE TABLE `concert` ( concert_ID INT PRIMARY KEY, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT REFERENCES stadium(Stadium_ID), Year TEXT ); Sample rows from `concert`: (1, Auditions, Free choice, 1, 2014), (2, Super bootcamp, Free choice 2, 2, 2014), (3, Home Visits, Bleeding Love, 2, 2015), ;
CREATE TABLE `concert` ( concert_ID INT PRIMARY KEY, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT REFERENCES stadium(Stadium_ID), Year TEXT ); Sample rows from `concert`: (1, Auditions, Free choice, 1, 2014), (2, Super bootcamp, Free choice 2, 2, 2014), (3, Home Visits, Bleeding Love, 2, 2015), ;
CREATE TABLE `concert` ( concert_ID INT PRIMARY KEY, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT REFERENCES stadium(Stadium_ID), Year TEXT ); Sample rows from `concert`: (1, Auditions, Free choice, 1, 2014), (2, Super bootcamp, Free choice 2, 2, 2014), (3, Home Visits, Bleeding Love, 2, 2015), CREATE TABLE `stadium` ( Stadium_ID;
CREATE TABLE `concert` ( concert_ID INT PRIMARY KEY, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT REFERENCES stadium(Stadium_ID), Year TEXT ); Sample rows from `concert`: (1, Auditions, Free choice, 1, 2014), (2, Super bootcamp, Free choice 2, 2, 2014), (3, Home Visits, Bleeding Love, 2, 2015), CREATE TABLE `stadium` ( Stadium_ID;
CREATE TABLE `stadium` ( Stadium_ID INT PRIMARY KEY, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT ); Sample rows from `stadium`: (1, Raith Rovers, Stark's Park, 10104, 4812, 1294, 2106), (2, Ayr United, Somerset Park, 11998, 2363, 1057, 1477), (3, East Fife, Bay;
CREATE TABLE `stadium` ( Stadium_ID INT PRIMARY KEY, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT ); Sample rows from `stadium`: (1, Raith Rovers, Stark's Park, 10104, 4812, 1294, 2106), (2, Ayr United, Somerset Park, 11998, 2363, 1057, 1477), (3, East Fife, Bay;
CREATE TABLE `concert` ( concert_ID INT PRIMARY KEY, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT REFERENCES stadium(Stadium_ID), Year TEXT ); Sample rows from `concert`: (1, Auditions, Free choice, 1, 2014), (2, Super bootcamp, Free choice 2, 2, 2014), (3, Home Visits, Bleeding Love, 2, 2015), ;
CREATE TABLE `concert` ( concert_ID INT PRIMARY KEY, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT REFERENCES stadium(Stadium_ID), Year TEXT ); Sample rows from `concert`: (1, Auditions, Free choice, 1, 2014), (2, Super bootcamp, Free choice 2, 2, 2014), (3, Home Visits, Bleeding Love, 2, 2015), ;
CREATE TABLE `stadium` ( Stadium_ID INT PRIMARY KEY, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT ); Sample rows from `stadium`: (1, Raith Rovers, Stark's Park, 10104, 4812, 1294, 2106), (2, Ayr United, Somerset Park, 11998, 2363, 1057, 1477), (3, East Fife, Bay;
CREATE TABLE `stadium` ( Stadium_ID INT PRIMARY KEY, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT ); Sample rows from `stadium`: (1, Raith Rovers, Stark's Park, 10104, 4812, 1294, 2106), (2, Ayr United, Somerset Park, 11998, 2363, 1057, 1477), (3, East Fife, Bay;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool ); Sample rows from `singer`: (1, Joe Sharp, Netherlands, You, 1992, 52, F), (2, Timbaland, United States, Dangerous, 2008, 32, T), (3, Justin Brown, France, Hey Oh, 2013, 29,;
CREATE TABLE `stadium` ( Stadium_ID INT PRIMARY KEY, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT ); Sample rows from `stadium`: (1, Raith Rovers, Stark's Park, 10104, 4812, 1294, 2106), (2, Ayr United, Somerset Park, 11998, 2363, 1057, 1477), (3, East Fife, Bay;
CREATE TABLE `stadium` ( Stadium_ID INT PRIMARY KEY, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT ); Sample rows from `stadium`: (1, Raith Rovers, Stark's Park, 10104, 4812, 1294, 2106), (2, Ayr United, Somerset Park, 11998, 2363, 1057, 1477), (3, East Fife, Bay;
CREATE TABLE `concert` ( concert_ID INT PRIMARY KEY, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT REFERENCES stadium(Stadium_ID), Year TEXT ); Sample rows from `concert`: (1, Auditions, Free choice, 1, 2014), (2, Super bootcamp, Free choice 2, 2, 2014), (3, Home Visits, Bleeding Love, 2, 2015), CREATE TABLE `singer_in_concert`;
CREATE TABLE `concert` ( concert_ID INT PRIMARY KEY, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT REFERENCES stadium(Stadium_ID), Year TEXT ); Sample rows from `concert`: (1, Auditions, Free choice, 1, 2014), (2, Super bootcamp, Free choice 2, 2, 2014), (3, Home Visits, Bleeding Love, 2, 2015), CREATE TABLE `singer_in_concert`;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool ); Sample rows from `singer`: (1, Joe Sharp, Netherlands, You, 1992, 52, F), (2, Timbaland, United States, Dangerous, 2008, 32, T), (3, Justin Brown, France, Hey Oh, 2013, 29,;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool ); Sample rows from `singer`: (1, Joe Sharp, Netherlands, You, 1992, 52, F), (2, Timbaland, United States, Dangerous, 2008, 32, T), (3, Justin Brown, France, Hey Oh, 2013, 29,;
CREATE TABLE `concert` ( concert_ID INT PRIMARY KEY, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT REFERENCES stadium(Stadium_ID), Year TEXT ); Sample rows from `concert`: (1, Auditions, Free choice, 1, 2014), (2, Super bootcamp, Free choice 2, 2, 2014), (3, Home Visits, Bleeding Love, 2, 2015), CREATE TABLE `singer_in_concert`;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool ); Sample rows from `singer`: (1, Joe Sharp, Netherlands, You, 1992, 52, F), (2, Timbaland, United States, Dangerous, 2008, 32, T), (3, Justin Brown, France, Hey Oh, 2013, 29,;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool ); Sample rows from `singer`: (1, Joe Sharp, Netherlands, You, 1992, 52, F), (2, Timbaland, United States, Dangerous, 2008, 32, T), (3, Justin Brown, France, Hey Oh, 2013, 29,;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool ); Sample rows from `singer`: (1, Joe Sharp, Netherlands, You, 1992, 52, F), (2, Timbaland, United States, Dangerous, 2008, 32, T), (3, Justin Brown, France, Hey Oh, 2013, 29,;
CREATE TABLE `stadium` ( Stadium_ID INT PRIMARY KEY, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT ); Sample rows from `stadium`: (1, Raith Rovers, Stark's Park, 10104, 4812, 1294, 2106), (2, Ayr United, Somerset Park, 11998, 2363, 1057, 1477), (3, East Fife, Bay;
CREATE TABLE `stadium` ( Stadium_ID INT PRIMARY KEY, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT ); Sample rows from `stadium`: (1, Raith Rovers, Stark's Park, 10104, 4812, 1294, 2106), (2, Ayr United, Somerset Park, 11998, 2363, 1057, 1477), (3, East Fife, Bay;
CREATE TABLE `stadium` ( Stadium_ID INT PRIMARY KEY, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT ); Sample rows from `stadium`: (1, Raith Rovers, Stark's Park, 10104, 4812, 1294, 2106), (2, Ayr United, Somerset Park, 11998, 2363, 1057, 1477), (3, East Fife, Bay;
CREATE TABLE `stadium` ( Stadium_ID INT PRIMARY KEY, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT ); Sample rows from `stadium`: (1, Raith Rovers, Stark's Park, 10104, 4812, 1294, 2106), (2, Ayr United, Somerset Park, 11998, 2363, 1057, 1477), (3, East Fife, Bay;
CREATE TABLE `pets` ( PetID INTEGER, PetType VARCHAR(20), pet_age INTEGER, weight REAL ); Sample rows from `pets`: (2001, cat, 3, 12.0), (2002, dog, 2, 13.4), (2003, dog, 1, 9.3), ;
CREATE TABLE `pets` ( PetID INTEGER, PetType VARCHAR(20), pet_age INTEGER, weight REAL ); Sample rows from `pets`: (2001, cat, 3, 12.0), (2002, dog, 2, 13.4), (2003, dog, 1, 9.3), ;
CREATE TABLE `pets` ( PetID INTEGER, PetType VARCHAR(20), pet_age INTEGER, weight REAL ); Sample rows from `pets`: (2001, cat, 3, 12.0), (2002, dog, 2, 13.4), (2003, dog, 1, 9.3), ;
CREATE TABLE `pets` ( PetID INTEGER, PetType VARCHAR(20), pet_age INTEGER, weight REAL ); Sample rows from `pets`: (2001, cat, 3, 12.0), (2002, dog, 2, 13.4), (2003, dog, 1, 9.3), ;
CREATE TABLE `pets` ( PetID INTEGER, PetType VARCHAR(20), pet_age INTEGER, weight REAL ); Sample rows from `pets`: (2001, cat, 3, 12.0), (2002, dog, 2, 13.4), (2003, dog, 1, 9.3), ;
CREATE TABLE `pets` ( PetID INTEGER, PetType VARCHAR(20), pet_age INTEGER, weight REAL ); Sample rows from `pets`: (2001, cat, 3, 12.0), (2002, dog, 2, 13.4), (2003, dog, 1, 9.3), ;
CREATE TABLE `student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones;
CREATE TABLE `has_pet` ( StuID INTEGER REFERENCES Student(StuID), PetID INTEGER REFERENCES Pets(PetID) ); Sample rows from `has_pet`: (1001, 2001), (1002, 2002), (1002, 2003), CREATE TABLE `pets` ( PetID INTEGER, PetType VARCHAR(20), pet_age INTEGER, weight REAL ); Sample rows from `pets`: (2001, cat, 3, 12.;
CREATE TABLE `pets` ( PetID INTEGER, PetType VARCHAR(20), pet_age INTEGER, weight REAL ); Sample rows from `pets`: (2001, cat, 3, 12.0), (2002, dog, 2, 13.4), (2003, dog, 1, 9.3), CREATE TABLE `has_pet` ( StuID INTEGER REFERENCES Student(StuID), PetID INTEGER REFERENCES Pets(PetID) ); Sample;
CREATE TABLE `has_pet` ( StuID INTEGER REFERENCES Student(StuID), PetID INTEGER REFERENCES Pets(PetID) ); Sample rows from `has_pet`: (1001, 2001), (1002, 2002), (1002, 2003), CREATE TABLE `pets` ( PetID INTEGER, PetType VARCHAR(20), pet_age INTEGER, weight REAL ); Sample rows from `pets`: (2001, cat, 3, 12.;
CREATE TABLE `pets` ( PetID INTEGER, PetType VARCHAR(20), pet_age INTEGER, weight REAL ); Sample rows from `pets`: (2001, cat, 3, 12.0), (2002, dog, 2, 13.4), (2003, dog, 1, 9.3), ;
CREATE TABLE `pets` ( PetID INTEGER, PetType VARCHAR(20), pet_age INTEGER, weight REAL ); Sample rows from `pets`: (2001, cat, 3, 12.0), (2002, dog, 2, 13.4), (2003, dog, 1, 9.3), ;
CREATE TABLE `has_pet` ( StuID INTEGER REFERENCES Student(StuID), PetID INTEGER REFERENCES Pets(PetID) ); Sample rows from `has_pet`: (1001, 2001), (1002, 2002), (1002, 2003), CREATE TABLE `pets` ( PetID INTEGER, PetType VARCHAR(20), pet_age INTEGER, weight REAL ); Sample rows from `pets`: (2001, cat, 3, 12.;
CREATE TABLE `student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones;
CREATE TABLE `student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones;
CREATE TABLE `student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones;
CREATE TABLE `student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones;
CREATE TABLE `student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones;
CREATE TABLE `student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones;
CREATE TABLE `student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones;
CREATE TABLE `student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones;
CREATE TABLE `student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones;
CREATE TABLE `pets` ( PetID INTEGER, PetType VARCHAR(20), pet_age INTEGER, weight REAL ); Sample rows from `pets`: (2001, cat, 3, 12.0), (2002, dog, 2, 13.4), (2003, dog, 1, 9.3), ;
CREATE TABLE `pets` ( PetID INTEGER, PetType VARCHAR(20), pet_age INTEGER, weight REAL ); Sample rows from `pets`: (2001, cat, 3, 12.0), (2002, dog, 2, 13.4), (2003, dog, 1, 9.3), ;
CREATE TABLE `pets` ( PetID INTEGER, PetType VARCHAR(20), pet_age INTEGER, weight REAL ); Sample rows from `pets`: (2001, cat, 3, 12.0), (2002, dog, 2, 13.4), (2003, dog, 1, 9.3), ;
CREATE TABLE `pets` ( PetID INTEGER, PetType VARCHAR(20), pet_age INTEGER, weight REAL ); Sample rows from `pets`: (2001, cat, 3, 12.0), (2002, dog, 2, 13.4), (2003, dog, 1, 9.3), ;
CREATE TABLE `pets` ( PetID INTEGER, PetType VARCHAR(20), pet_age INTEGER, weight REAL ); Sample rows from `pets`: (2001, cat, 3, 12.0), (2002, dog, 2, 13.4), (2003, dog, 1, 9.3), ;
CREATE TABLE `pets` ( PetID INTEGER, PetType VARCHAR(20), pet_age INTEGER, weight REAL ); Sample rows from `pets`: (2001, cat, 3, 12.0), (2002, dog, 2, 13.4), (2003, dog, 1, 9.3), ;
CREATE TABLE `pets` ( PetID INTEGER, PetType VARCHAR(20), pet_age INTEGER, weight REAL ); Sample rows from `pets`: (2001, cat, 3, 12.0), (2002, dog, 2, 13.4), (2003, dog, 1, 9.3), ;
CREATE TABLE `pets` ( PetID INTEGER, PetType VARCHAR(20), pet_age INTEGER, weight REAL ); Sample rows from `pets`: (2001, cat, 3, 12.0), (2002, dog, 2, 13.4), (2003, dog, 1, 9.3), ;
CREATE TABLE `student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones;
CREATE TABLE `student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones;
CREATE TABLE `has_pet` ( StuID INTEGER REFERENCES Student(StuID), PetID INTEGER REFERENCES Pets(PetID) ); Sample rows from `has_pet`: (1001, 2001), (1002, 2002), (1002, 2003), CREATE TABLE `pets` ( PetID INTEGER, PetType VARCHAR(20), pet_age INTEGER, weight REAL ); Sample rows from `pets`: (2001, cat, 3, 12.;
CREATE TABLE `has_pet` ( StuID INTEGER REFERENCES Student(StuID), PetID INTEGER REFERENCES Pets(PetID) ); Sample rows from `has_pet`: (1001, 2001), (1002, 2002), (1002, 2003), CREATE TABLE `student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(;
CREATE TABLE `has_pet` ( StuID INTEGER REFERENCES Student(StuID), PetID INTEGER REFERENCES Pets(PetID) ); Sample rows from `has_pet`: (1001, 2001), (1002, 2002), (1002, 2003), CREATE TABLE `student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(;
CREATE TABLE `has_pet` ( StuID INTEGER REFERENCES Student(StuID), PetID INTEGER REFERENCES Pets(PetID) ); Sample rows from `has_pet`: (1001, 2001), (1002, 2002), (1002, 2003), CREATE TABLE `pets` ( PetID INTEGER, PetType VARCHAR(20), pet_age INTEGER, weight REAL ); Sample rows from `pets`: (2001, cat, 3, 12.;
CREATE TABLE `has_pet` ( StuID INTEGER REFERENCES Student(StuID), PetID INTEGER REFERENCES Pets(PetID) ); Sample rows from `has_pet`: (1001, 2001), (1002, 2002), (1002, 2003), CREATE TABLE `student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(;
CREATE TABLE `student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones;
CREATE TABLE `student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones;
CREATE TABLE `student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones;
CREATE TABLE `student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones;
CREATE TABLE `student` ( StuID INTEGER, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) ); Sample rows from `student`: (1001, Smith, Linda, 18, F, 600, 1121, BAL), (1002, Kim, Tracy, 19, F, 600, 7712, HKG), (1003, Jones;
CREATE TABLE `continents` ( ContId INTEGER, Continent TEXT ); Sample rows from `continents`: (1, america), (2, europe), (3, asia), ;
CREATE TABLE `continents` ( ContId INTEGER, Continent TEXT ); Sample rows from `continents`: (1, america), (2, europe), (3, asia), ;
CREATE TABLE `continents` ( ContId INTEGER, Continent TEXT ); Sample rows from `continents`: (1, america), (2, europe), (3, asia), CREATE TABLE `countries` ( CountryId INTEGER, CountryName TEXT, Continent INTEGER REFERENCES continents(ContId) ); Sample rows from `countries`: (1, usa, 1), (2, germany, 2), (3, france, 2), ;
CREATE TABLE `continents` ( ContId INTEGER, Continent TEXT ); Sample rows from `continents`: (1, america), (2, europe), (3, asia), CREATE TABLE `countries` ( CountryId INTEGER, CountryName TEXT, Continent INTEGER REFERENCES continents(ContId) ); Sample rows from `countries`: (1, usa, 1), (2, germany, 2), (3, france, 2), ;
CREATE TABLE `countries` ( CountryId INTEGER, CountryName TEXT, Continent INTEGER REFERENCES continents(ContId) ); Sample rows from `countries`: (1, usa, 1), (2, germany, 2), (3, france, 2), ;
CREATE TABLE `countries` ( CountryId INTEGER, CountryName TEXT, Continent INTEGER REFERENCES continents(ContId) ); Sample rows from `countries`: (1, usa, 1), (2, germany, 2), (3, france, 2), ;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list;
CREATE TABLE `car_names` ( MakeId INTEGER, Model TEXT REFERENCES model_list(Model), Make TEXT ); Sample rows from `car_names`: (1, chevrolet, chevrolet chevelle malibu), (2, buick, buick skylark 320), (3, plymouth, plymouth satellite), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list`: (1, ;
CREATE TABLE `car_names` ( MakeId INTEGER, Model TEXT REFERENCES model_list(Model), Make TEXT ); Sample rows from `car_names`: (1, chevrolet, chevrolet chevelle malibu), (2, buick, buick skylark 320), (3, plymouth, plymouth satellite), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list`: (1, ;
CREATE TABLE `car_names` ( MakeId INTEGER, Model TEXT REFERENCES model_list(Model), Make TEXT ); Sample rows from `car_names`: (1, chevrolet, chevrolet chevelle malibu), (2, buick, buick skylark 320), (3, plymouth, plymouth satellite), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list`: (1, ;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horse;
CREATE TABLE `car_names` ( MakeId INTEGER, Model TEXT REFERENCES model_list(Model), Make TEXT ); Sample rows from `car_names`: (1, chevrolet, chevrolet chevelle malibu), (2, buick, buick skylark 320), (3, plymouth, plymouth satellite), CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (;
CREATE TABLE `car_names` ( MakeId INTEGER, Model TEXT REFERENCES model_list(Model), Make TEXT ); Sample rows from `car_names`: (1, chevrolet, chevrolet chevelle malibu), (2, buick, buick skylark 320), (3, plymouth, plymouth satellite), CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horse;
CREATE TABLE `car_names` ( MakeId INTEGER, Model TEXT REFERENCES model_list(Model), Make TEXT ); Sample rows from `car_names`: (1, chevrolet, chevrolet chevelle malibu), (2, buick, buick skylark 320), (3, plymouth, plymouth satellite), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list`: (1, ;
CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list`: (1, 1, amc), (2, 2, audi), (3, 3, bmw), CREATE TABLE `car_names` ( MakeId INTEGER, Model TEXT REFERENCES model_list(Model), Make TEXT ); Sample rows from `car_names`: (1, chevrolet, chevrolet chevelle malibu), (2;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), ;
CREATE TABLE `continents` ( ContId INTEGER, Continent TEXT ); Sample rows from `continents`: (1, america), (2, europe), (3, asia), CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), ;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), ;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list;
CREATE TABLE `car_names` ( MakeId INTEGER, Model TEXT REFERENCES model_list(Model), Make TEXT ); Sample rows from `car_names`: (1, chevrolet, chevrolet chevelle malibu), (2, buick, buick skylark 320), (3, plymouth, plymouth satellite), CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER;
CREATE TABLE `car_names` ( MakeId INTEGER, Model TEXT REFERENCES model_list(Model), Make TEXT ); Sample rows from `car_names`: (1, chevrolet, chevrolet chevelle malibu), (2, buick, buick skylark 320), (3, plymouth, plymouth satellite), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list`: (1, ;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), ;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), ;
CREATE TABLE `car_names` ( MakeId INTEGER, Model TEXT REFERENCES model_list(Model), Make TEXT ); Sample rows from `car_names`: (1, chevrolet, chevrolet chevelle malibu), (2, buick, buick skylark 320), (3, plymouth, plymouth satellite), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list`: (1, ;
CREATE TABLE `car_names` ( MakeId INTEGER, Model TEXT REFERENCES model_list(Model), Make TEXT ); Sample rows from `car_names`: (1, chevrolet, chevrolet chevelle malibu), (2, buick, buick skylark 320), (3, plymouth, plymouth satellite), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list`: (1, ;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), ;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), ;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), ;
CREATE TABLE `countries` ( CountryId INTEGER, CountryName TEXT, Continent INTEGER REFERENCES continents(ContId) ); Sample rows from `countries`: (1, usa, 1), (2, germany, 2), (3, france, 2), CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1),;
CREATE TABLE `car_names` ( MakeId INTEGER, Model TEXT REFERENCES model_list(Model), Make TEXT ); Sample rows from `car_names`: (1, chevrolet, chevrolet chevelle malibu), (2, buick, buick skylark 320), (3, plymouth, plymouth satellite), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list`: (1, ;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `car_names` ( MakeId INTEGER, Model TEXT REFERENCES model_list(Model), Make TEXT ); Sample rows from `car_names`: (1, chevrolet, chevrolet chevelle malibu), (2, buick, buick skylark 320), (3, plymouth, plymouth satellite), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list`: (1, ;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `car_names` ( MakeId INTEGER, Model TEXT REFERENCES model_list(Model), Make TEXT ); Sample rows from `car_names`: (1, chevrolet, chevrolet chevelle malibu), (2, buick, buick skylark 320), (3, plymouth, plymouth satellite), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list`: (1, ;
CREATE TABLE `car_names` ( MakeId INTEGER, Model TEXT REFERENCES model_list(Model), Make TEXT ); Sample rows from `car_names`: (1, chevrolet, chevrolet chevelle malibu), (2, buick, buick skylark 320), (3, plymouth, plymouth satellite), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list`: (1, ;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), ;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horse;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horse;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `car_names` ( MakeId INTEGER, Model TEXT REFERENCES model_list(Model), Make TEXT ); Sample rows from `car_names`: (1, chevrolet, chevrolet chevelle malibu), (2, buick, buick skylark 320), (3, plymouth, plymouth satellite), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list`: (1, ;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), ;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), ;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `car_names` ( MakeId INTEGER, Model TEXT REFERENCES model_list(Model), Make TEXT ); Sample rows from `car_names`: (1, chevrolet, chevrolet chevelle malibu), (2, buick, buick skylark 320), (3, plymouth, plymouth satellite), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list`: (1, ;
CREATE TABLE `car_names` ( MakeId INTEGER, Model TEXT REFERENCES model_list(Model), Make TEXT ); Sample rows from `car_names`: (1, chevrolet, chevrolet chevelle malibu), (2, buick, buick skylark 320), (3, plymouth, plymouth satellite), CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER;
CREATE TABLE `car_names` ( MakeId INTEGER, Model TEXT REFERENCES model_list(Model), Make TEXT ); Sample rows from `car_names`: (1, chevrolet, chevrolet chevelle malibu), (2, buick, buick skylark 320), (3, plymouth, plymouth satellite), CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `cars_data` ( Id INTEGER REFERENCES car_names(MakeId), MPG TEXT, Cylinders INTEGER, Edispl REAL, Horsepower TEXT, Weight INTEGER, Accelerate REAL, Year INTEGER ); Sample rows from `cars_data`: (1, 18, 8, 307.0, 130, 3504, 12.0, 1970), (2, 15, 8, 350.0, 165, 3693;
CREATE TABLE `car_names` ( MakeId INTEGER, Model TEXT REFERENCES model_list(Model), Make TEXT ); Sample rows from `car_names`: (1, chevrolet, chevrolet chevelle malibu), (2, buick, buick skylark 320), (3, plymouth, plymouth satellite), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list`: (1, ;
CREATE TABLE `car_names` ( MakeId INTEGER, Model TEXT REFERENCES model_list(Model), Make TEXT ); Sample rows from `car_names`: (1, chevrolet, chevrolet chevelle malibu), (2, buick, buick skylark 320), (3, plymouth, plymouth satellite), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list`: (1, ;
CREATE TABLE `countries` ( CountryId INTEGER, CountryName TEXT, Continent INTEGER REFERENCES continents(ContId) ); Sample rows from `countries`: (1, usa, 1), (2, germany, 2), (3, france, 2), CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1),;
CREATE TABLE `countries` ( CountryId INTEGER, CountryName TEXT, Continent INTEGER REFERENCES continents(ContId) ); Sample rows from `countries`: (1, usa, 1), (2, germany, 2), (3, france, 2), CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1),;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), CREATE TABLE `model_list` ( ModelId INTEGER, Maker INTEGER REFERENCES car_makers(Id), Model TEXT PRIMARY KEY ); Sample rows from `model_list;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), CREATE TABLE `countries` ( CountryId INTEGER, CountryName TEXT, Continent INTEGER REFERENCES continents(ContId) ); Sample rows from `countries`: (;
CREATE TABLE `car_makers` ( Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT REFERENCES countries(CountryId) ); Sample rows from `car_makers`: (1, amc, American Motor Company, 1), (2, volkswagen, Volkswagen, 2), (3, bmw, BMW, 2), CREATE TABLE `countries` ( CountryId INTEGER, CountryName TEXT, Continent INTEGER REFERENCES continents(ContId) ); Sample rows from `countries`: (;
CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation TEXT, Country TEXT ); Sample rows from `airlines`: (1, United Airlines, UAL, USA), (2, US Airways, USAir, USA), (3, Delta Airlines, Delta, USA), ;
CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation TEXT, Country TEXT ); Sample rows from `airlines`: (1, United Airlines, UAL, USA), (2, US Airways, USAir, USA), (3, Delta Airlines, Delta, USA), ;
CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation TEXT, Country TEXT ); Sample rows from `airlines`: (1, United Airlines, UAL, USA), (2, US Airways, USAir, USA), (3, Delta Airlines, Delta, USA), ;
CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation TEXT, Country TEXT ); Sample rows from `airlines`: (1, United Airlines, UAL, USA), (2, US Airways, USAir, USA), (3, Delta Airlines, Delta, USA), ;
CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation TEXT, Country TEXT ); Sample rows from `airlines`: (1, United Airlines, UAL, USA), (2, US Airways, USAir, USA), (3, Delta Airlines, Delta, USA), ;
CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation TEXT, Country TEXT ); Sample rows from `airlines`: (1, United Airlines, UAL, USA), (2, US Airways, USAir, USA), (3, Delta Airlines, Delta, USA), ;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), ;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), ;
CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation TEXT, Country TEXT ); Sample rows from `airlines`: (1, United Airlines, UAL, USA), (2, US Airways, USAir, USA), (3, Delta Airlines, Delta, USA), ;
CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation TEXT, Country TEXT ); Sample rows from `airlines`: (1, United Airlines, UAL, USA), (2, US Airways, USAir, USA), (3, Delta Airlines, Delta, USA), ;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), ;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), ;
CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo INTEGER PRIMARY KEY, SourceAirport TEXT REFERENCES airports(AirportCode), DestAirport TEXT REFERENCES airports(AirportCode) ); Sample rows from `flights`: (1, 28, APG, ASY), (1, 29, ASY, APG), (1, 44, CVO, ACV), ;
CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo INTEGER PRIMARY KEY, SourceAirport TEXT REFERENCES airports(AirportCode), DestAirport TEXT REFERENCES airports(AirportCode) ); Sample rows from `flights`: (1, 28, APG, ASY), (1, 29, ASY, APG), (1, 44, CVO, ACV), ;
CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation TEXT, Country TEXT ); Sample rows from `airlines`: (1, United Airlines, UAL, USA), (2, US Airways, USAir, USA), (3, Delta Airlines, Delta, USA), ;
CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation TEXT, Country TEXT ); Sample rows from `airlines`: (1, United Airlines, UAL, USA), (2, US Airways, USAir, USA), (3, Delta Airlines, Delta, USA), ;
CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation TEXT, Country TEXT ); Sample rows from `airlines`: (1, United Airlines, UAL, USA), (2, US Airways, USAir, USA), (3, Delta Airlines, Delta, USA), ;
CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation TEXT, Country TEXT ); Sample rows from `airlines`: (1, United Airlines, UAL, USA), (2, US Airways, USAir, USA), (3, Delta Airlines, Delta, USA), ;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), ;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), ;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), ;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), ;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), ;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), ;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo INTEGER PRIMARY KEY, SourceAirport TEXT REFERENCES airports(AirportCode), DestAirport TEXT REFERENCES airports(AirportCode) ); Sample rows from `flights`: (1, 28, APG, ASY), (1, 29, ASY, APG), (1, 44, CVO, ACV), ;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo INTEGER PRIMARY KEY, SourceAirport TEXT REFERENCES airports(AirportCode), DestAirport TEXT REFERENCES airports(AirportCode) ); Sample rows from `flights`: (1, 28, APG, ASY), (1, 29, ASY, APG), (1, 44, CVO, ACV), CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation;
CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo INTEGER PRIMARY KEY, SourceAirport TEXT REFERENCES airports(AirportCode), DestAirport TEXT REFERENCES airports(AirportCode) ); Sample rows from `flights`: (1, 28, APG, ASY), (1, 29, ASY, APG), (1, 44, CVO, ACV), CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation;
CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo INTEGER PRIMARY KEY, SourceAirport TEXT REFERENCES airports(AirportCode), DestAirport TEXT REFERENCES airports(AirportCode) ); Sample rows from `flights`: (1, 28, APG, ASY), (1, 29, ASY, APG), (1, 44, CVO, ACV), CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, Airport;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation TEXT, Country TEXT ); Sample rows from `airlines`: (1, United Airlines, UAL, USA), (2, US Airways, USAir, USA), (3, Delta Airlines, Delta, USA), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo INTEGER PRIMARY KEY, SourceAirport TEXT REFERENCES airports(AirportCode), DestAirport TEXT REFERENCES airports(AirportCode);
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation TEXT, Country TEXT ); Sample rows from `airlines`: (1, United Airlines, UAL, USA), (2, US Airways, USAir, USA), (3, Delta Airlines, Delta, USA), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo INTEGER PRIMARY KEY, SourceAirport TEXT REFERENCES airports(AirportCode), DestAirport TEXT REFERENCES airports(AirportCode);
CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation TEXT, Country TEXT ); Sample rows from `airlines`: (1, United Airlines, UAL, USA), (2, US Airways, USAir, USA), (3, Delta Airlines, Delta, USA), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo INTEGER PRIMARY KEY, SourceAirport TEXT REFERENCES airports(AirportCode), DestAirport TEXT REFERENCES airports(AirportCode);
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), ;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), ;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo INTEGER PRIMARY KEY, SourceAirport TEXT REFERENCES airports(AirportCode), DestAirport TEXT REFERENCES airports(AirportCode) ); Sample rows from `flights`: (1, 28, APG, ASY), (1, 29, ASY, APG), (1, 44, CVO, ACV), ;
CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo INTEGER PRIMARY KEY, SourceAirport TEXT REFERENCES airports(AirportCode), DestAirport TEXT REFERENCES airports(AirportCode) ); Sample rows from `flights`: (1, 28, APG, ASY), (1, 29, ASY, APG), (1, 44, CVO, ACV), ;
CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation TEXT, Country TEXT ); Sample rows from `airlines`: (1, United Airlines, UAL, USA), (2, US Airways, USAir, USA), (3, Delta Airlines, Delta, USA), ;
CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation TEXT, Country TEXT ); Sample rows from `airlines`: (1, United Airlines, UAL, USA), (2, US Airways, USAir, USA), (3, Delta Airlines, Delta, USA), ;
CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation TEXT, Country TEXT ); Sample rows from `airlines`: (1, United Airlines, UAL, USA), (2, US Airways, USAir, USA), (3, Delta Airlines, Delta, USA), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo INTEGER PRIMARY KEY, SourceAirport TEXT REFERENCES airports(AirportCode), DestAirport TEXT REFERENCES airports(AirportCode);
CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation TEXT, Country TEXT ); Sample rows from `airlines`: (1, United Airlines, UAL, USA), (2, US Airways, USAir, USA), (3, Delta Airlines, Delta, USA), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo INTEGER PRIMARY KEY, SourceAirport TEXT REFERENCES airports(AirportCode), DestAirport TEXT REFERENCES airports(AirportCode);
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation TEXT, Country TEXT ); Sample rows from `airlines`: (1, United Airlines, UAL, USA), (2, US Airways, USAir, USA), (3, Delta Airlines, Delta, USA), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo INTEGER PRIMARY KEY, SourceAirport TEXT REFERENCES airports(AirportCode), DestAirport TEXT REFERENCES airports(AirportCode);
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo INTEGER PRIMARY KEY, SourceAirport TEXT REFERENCES airports(AirportCode), DestAirport TEXT REFERENCES airports(AirportCode) ); Sample rows from `flights`: (1, 28, APG, ASY), (1, 29, ASY, APG), (1, 44, CVO, ACV), ;
CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo INTEGER PRIMARY KEY, SourceAirport TEXT REFERENCES airports(AirportCode), DestAirport TEXT REFERENCES airports(AirportCode) ); Sample rows from `flights`: (1, 28, APG, ASY), (1, 29, ASY, APG), (1, 44, CVO, ACV), ;
CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo INTEGER PRIMARY KEY, SourceAirport TEXT REFERENCES airports(AirportCode), DestAirport TEXT REFERENCES airports(AirportCode) ); Sample rows from `flights`: (1, 28, APG, ASY), (1, 29, ASY, APG), (1, 44, CVO, ACV), ;
CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation TEXT, Country TEXT ); Sample rows from `airlines`: (1, United Airlines, UAL, USA), (2, US Airways, USAir, USA), (3, Delta Airlines, Delta, USA), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo INTEGER PRIMARY KEY, SourceAirport TEXT REFERENCES airports(AirportCode), DestAirport TEXT REFERENCES airports(AirportCode);
CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation TEXT, Country TEXT ); Sample rows from `airlines`: (1, United Airlines, UAL, USA), (2, US Airways, USAir, USA), (3, Delta Airlines, Delta, USA), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo INTEGER PRIMARY KEY, SourceAirport TEXT REFERENCES airports(AirportCode), DestAirport TEXT REFERENCES airports(AirportCode);
CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo INTEGER PRIMARY KEY, SourceAirport TEXT REFERENCES airports(AirportCode), DestAirport TEXT REFERENCES airports(AirportCode) ); Sample rows from `flights`: (1, 28, APG, ASY), (1, 29, ASY, APG), (1, 44, CVO, ACV), CREATE TABLE `airlines` ( uid INTEGER, Airline TEXT, Abbreviation;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo INTEGER PRIMARY KEY, SourceAirport TEXT REFERENCES airports(AirportCode), DestAirport TEXT REFERENCES airports(AirportCode) ); Sample rows from `flights`: (1, 28, APG, ASY), (1, 29, ASY, APG), (1, 44, CVO, ACV), ;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), ;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), ;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `airports` ( City TEXT, AirportCode TEXT PRIMARY KEY, AirportName TEXT, Country TEXT, CountryAbbrev TEXT ); Sample rows from `airports`: (Aberdeen, APG, Phillips AAF, United States, US ), (Aberdeen, ABR, Municipal, United States, US), (Abilene, DYS, Dyess AFB, United States, US), CREATE TABLE `flights` ( Airline INTEGER PRIMARY KEY, FlightNo;
CREATE TABLE `employee` ( Employee_ID INT PRIMARY KEY, Name TEXT, Age INT, City TEXT ); Sample rows from `employee`: (1, George Chuter, 23, Bristol), (2, Lee Mears, 29, Bath), (3, Mark Regan, 43, Bristol), ;
CREATE TABLE `employee` ( Employee_ID INT PRIMARY KEY, Name TEXT, Age INT, City TEXT ); Sample rows from `employee`: (1, George Chuter, 23, Bristol), (2, Lee Mears, 29, Bath), (3, Mark Regan, 43, Bristol), ;
CREATE TABLE `employee` ( Employee_ID INT PRIMARY KEY, Name TEXT, Age INT, City TEXT ); Sample rows from `employee`: (1, George Chuter, 23, Bristol), (2, Lee Mears, 29, Bath), (3, Mark Regan, 43, Bristol), ;
CREATE TABLE `employee` ( Employee_ID INT PRIMARY KEY, Name TEXT, Age INT, City TEXT ); Sample rows from `employee`: (1, George Chuter, 23, Bristol), (2, Lee Mears, 29, Bath), (3, Mark Regan, 43, Bristol), ;
CREATE TABLE `employee` ( Employee_ID INT PRIMARY KEY, Name TEXT, Age INT, City TEXT ); Sample rows from `employee`: (1, George Chuter, 23, Bristol), (2, Lee Mears, 29, Bath), (3, Mark Regan, 43, Bristol), ;
CREATE TABLE `employee` ( Employee_ID INT PRIMARY KEY, Name TEXT, Age INT, City TEXT ); Sample rows from `employee`: (1, George Chuter, 23, Bristol), (2, Lee Mears, 29, Bath), (3, Mark Regan, 43, Bristol), ;
CREATE TABLE `employee` ( Employee_ID INT PRIMARY KEY, Name TEXT, Age INT, City TEXT ); Sample rows from `employee`: (1, George Chuter, 23, Bristol), (2, Lee Mears, 29, Bath), (3, Mark Regan, 43, Bristol), ;
CREATE TABLE `employee` ( Employee_ID INT PRIMARY KEY, Name TEXT, Age INT, City TEXT ); Sample rows from `employee`: (1, George Chuter, 23, Bristol), (2, Lee Mears, 29, Bath), (3, Mark Regan, 43, Bristol), ;
CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT ); Sample rows from `shop`: (1, FC Haka, Valkeakoski, Tehtaan kenttä, 3516, Olli Huttunen), (2, HJK, Helsinki, Finnair Stadium, 10770, Antti Muurinen), (3, FC Honka, Espoo, Tapi;
CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT ); Sample rows from `shop`: (1, FC Haka, Valkeakoski, Tehtaan kenttä, 3516, Olli Huttunen), (2, HJK, Helsinki, Finnair Stadium, 10770, Antti Muurinen), (3, FC Honka, Espoo, Tapi;
CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT ); Sample rows from `shop`: (1, FC Haka, Valkeakoski, Tehtaan kenttä, 3516, Olli Huttunen), (2, HJK, Helsinki, Finnair Stadium, 10770, Antti Muurinen), (3, FC Honka, Espoo, Tapi;
CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT ); Sample rows from `shop`: (1, FC Haka, Valkeakoski, Tehtaan kenttä, 3516, Olli Huttunen), (2, HJK, Helsinki, Finnair Stadium, 10770, Antti Muurinen), (3, FC Honka, Espoo, Tapi;
CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT ); Sample rows from `shop`: (1, FC Haka, Valkeakoski, Tehtaan kenttä, 3516, Olli Huttunen), (2, HJK, Helsinki, Finnair Stadium, 10770, Antti Muurinen), (3, FC Honka, Espoo, Tapi;
CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT ); Sample rows from `shop`: (1, FC Haka, Valkeakoski, Tehtaan kenttä, 3516, Olli Huttunen), (2, HJK, Helsinki, Finnair Stadium, 10770, Antti Muurinen), (3, FC Honka, Espoo, Tapi;
CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT ); Sample rows from `shop`: (1, FC Haka, Valkeakoski, Tehtaan kenttä, 3516, Olli Huttunen), (2, HJK, Helsinki, Finnair Stadium, 10770, Antti Muurinen), (3, FC Honka, Espoo, Tapi;
CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT ); Sample rows from `shop`: (1, FC Haka, Valkeakoski, Tehtaan kenttä, 3516, Olli Huttunen), (2, HJK, Helsinki, Finnair Stadium, 10770, Antti Muurinen), (3, FC Honka, Espoo, Tapi;
CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT ); Sample rows from `shop`: (1, FC Haka, Valkeakoski, Tehtaan kenttä, 3516, Olli Huttunen), (2, HJK, Helsinki, Finnair Stadium, 10770, Antti Muurinen), (3, FC Honka, Espoo, Tapi;
CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT ); Sample rows from `shop`: (1, FC Haka, Valkeakoski, Tehtaan kenttä, 3516, Olli Huttunen), (2, HJK, Helsinki, Finnair Stadium, 10770, Antti Muurinen), (3, FC Honka, Espoo, Tapi;
CREATE TABLE `employee` ( Employee_ID INT PRIMARY KEY, Name TEXT, Age INT, City TEXT ); Sample rows from `employee`: (1, George Chuter, 23, Bristol), (2, Lee Mears, 29, Bath), (3, Mark Regan, 43, Bristol), CREATE TABLE `evaluation` ( Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID), Year_awarded TEXT PRIMARY KEY, Bonus REAL ); Sample rows from `evaluation`: (1, 201;
CREATE TABLE `employee` ( Employee_ID INT PRIMARY KEY, Name TEXT, Age INT, City TEXT ); Sample rows from `employee`: (1, George Chuter, 23, Bristol), (2, Lee Mears, 29, Bath), (3, Mark Regan, 43, Bristol), CREATE TABLE `evaluation` ( Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID), Year_awarded TEXT PRIMARY KEY, Bonus REAL ); Sample rows from `evaluation`: (1, 201;
CREATE TABLE `evaluation` ( Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID), Year_awarded TEXT PRIMARY KEY, Bonus REAL ); Sample rows from `evaluation`: (1, 2011, 3000.0), (2, 2015, 3200.0), (1, 2016, 2900.0), CREATE TABLE `employee` ( Employee_ID INT PRIMARY KEY, Name TEXT, Age INT, City TEXT ); Sample rows from `employee`: (1;
CREATE TABLE `employee` ( Employee_ID INT PRIMARY KEY, Name TEXT, Age INT, City TEXT ); Sample rows from `employee`: (1, George Chuter, 23, Bristol), (2, Lee Mears, 29, Bath), (3, Mark Regan, 43, Bristol), CREATE TABLE `evaluation` ( Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID), Year_awarded TEXT PRIMARY KEY, Bonus REAL ); Sample rows from `evaluation`: (1, 201;
CREATE TABLE `employee` ( Employee_ID INT PRIMARY KEY, Name TEXT, Age INT, City TEXT ); Sample rows from `employee`: (1, George Chuter, 23, Bristol), (2, Lee Mears, 29, Bath), (3, Mark Regan, 43, Bristol), CREATE TABLE `evaluation` ( Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID), Year_awarded TEXT PRIMARY KEY, Bonus REAL ); Sample rows from `evaluation`: (1, 201;
CREATE TABLE `employee` ( Employee_ID INT PRIMARY KEY, Name TEXT, Age INT, City TEXT ); Sample rows from `employee`: (1, George Chuter, 23, Bristol), (2, Lee Mears, 29, Bath), (3, Mark Regan, 43, Bristol), CREATE TABLE `evaluation` ( Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID), Year_awarded TEXT PRIMARY KEY, Bonus REAL ); Sample rows from `evaluation`: (1, 201;
CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT ); Sample rows from `shop`: (1, FC Haka, Valkeakoski, Tehtaan kenttä, 3516, Olli Huttunen), (2, HJK, Helsinki, Finnair Stadium, 10770, Antti Muurinen), (3, FC Honka, Espoo, Tapi;
CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT ); Sample rows from `shop`: (1, FC Haka, Valkeakoski, Tehtaan kenttä, 3516, Olli Huttunen), (2, HJK, Helsinki, Finnair Stadium, 10770, Antti Muurinen), (3, FC Honka, Espoo, Tapi;
CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT ); Sample rows from `shop`: (1, FC Haka, Valkeakoski, Tehtaan kenttä, 3516, Olli Huttunen), (2, HJK, Helsinki, Finnair Stadium, 10770, Antti Muurinen), (3, FC Honka, Espoo, Tapi;
CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT ); Sample rows from `shop`: (1, FC Haka, Valkeakoski, Tehtaan kenttä, 3516, Olli Huttunen), (2, HJK, Helsinki, Finnair Stadium, 10770, Antti Muurinen), (3, FC Honka, Espoo, Tapi;
CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT ); Sample rows from `shop`: (1, FC Haka, Valkeakoski, Tehtaan kenttä, 3516, Olli Huttunen), (2, HJK, Helsinki, Finnair Stadium, 10770, Antti Muurinen), (3, FC Honka, Espoo, Tapi;
CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT ); Sample rows from `shop`: (1, FC Haka, Valkeakoski, Tehtaan kenttä, 3516, Olli Huttunen), (2, HJK, Helsinki, Finnair Stadium, 10770, Antti Muurinen), (3, FC Honka, Espoo, Tapi;
CREATE TABLE `employee` ( Employee_ID INT PRIMARY KEY, Name TEXT, Age INT, City TEXT ); Sample rows from `employee`: (1, George Chuter, 23, Bristol), (2, Lee Mears, 29, Bath), (3, Mark Regan, 43, Bristol), CREATE TABLE `evaluation` ( Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID), Year_awarded TEXT PRIMARY KEY, Bonus REAL ); Sample rows from `evaluation`: (1, 201;
CREATE TABLE `evaluation` ( Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID), Year_awarded TEXT PRIMARY KEY, Bonus REAL ); Sample rows from `evaluation`: (1, 2011, 3000.0), (2, 2015, 3200.0), (1, 2016, 2900.0), ;
CREATE TABLE `hiring` ( Shop_ID INT REFERENCES shop(Shop_ID), Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID), Start_from TEXT, Is_full_time bool ); Sample rows from `hiring`: (1, 1, 2009, T), (1, 2, 2003, T), (8, 3, 2011, F), ;
CREATE TABLE `hiring` ( Shop_ID INT REFERENCES shop(Shop_ID), Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID), Start_from TEXT, Is_full_time bool ); Sample rows from `hiring`: (1, 1, 2009, T), (1, 2, 2003, T), (8, 3, 2011, F), ;
CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT ); Sample rows from `shop`: (1, FC Haka, Valkeakoski, Tehtaan kenttä, 3516, Olli Huttunen), (2, HJK, Helsinki, Finnair Stadium, 10770, Antti Muurinen), (3, FC Honka, Espoo, Tapi;
CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT ); Sample rows from `shop`: (1, FC Haka, Valkeakoski, Tehtaan kenttä, 3516, Olli Huttunen), (2, HJK, Helsinki, Finnair Stadium, 10770, Antti Muurinen), (3, FC Honka, Espoo, Tapi;
CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT ); Sample rows from `shop`: (1, FC Haka, Valkeakoski, Tehtaan kenttä, 3516, Olli Huttunen), (2, HJK, Helsinki, Finnair Stadium, 10770, Antti Muurinen), (3, FC Honka, Espoo, Tapi;
CREATE TABLE `shop` ( Shop_ID INT PRIMARY KEY, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT ); Sample rows from `shop`: (1, FC Haka, Valkeakoski, Tehtaan kenttä, 3516, Olli Huttunen), (2, HJK, Helsinki, Finnair Stadium, 10770, Antti Muurinen), (3, FC Honka, Espoo, Tapi;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), ;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), ;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), ;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), ;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), ;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), ;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), ;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), ;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type;
CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255) ); Sample rows from `templates`: (0, 5, PP, 2005-11-12 07:09:48, 2008-01-05 14:19:28, ), (1, 9;
CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255) ); Sample rows from `templates`: (0, 5, PP, 2005-11-12 07:09:48, 2008-01-05 14:19:28, ), (1, 9;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type;
CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255) ); Sample rows from `templates`: (0, 5, PP, 2005-11-12 07:09:48, 2008-01-05 14:19:28, ), (1, 9;
CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255) ); Sample rows from `templates`: (0, 5, PP, 2005-11-12 07:09:48, 2008-01-05 14:19:28, ), (1, 9;
CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255) ); Sample rows from `templates`: (0, 5, PP, 2005-11-12 07:09:48, 2008-01-05 14:19:28, ), (1, 9;
CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255) ); Sample rows from `templates`: (0, 5, PP, 2005-11-12 07:09:48, 2008-01-05 14:19:28, ), (1, 9;
CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255) ); Sample rows from `templates`: (0, 5, PP, 2005-11-12 07:09:48, 2008-01-05 14:19:28, ), (1, 9;
CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255) ); Sample rows from `templates`: (0, 5, PP, 2005-11-12 07:09:48, 2008-01-05 14:19:28, ), (1, 9;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), ;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), ;
CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255) ); Sample rows from `templates`: (0, 5, PP, 2005-11-12 07:09:48, 2008-01-05 14:19:28, ), (1, 9;
CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255) ); Sample rows from `templates`: (0, 5, PP, 2005-11-12 07:09:48, 2008-01-05 14:19:28, ), (1, 9;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), ;
CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255) ); Sample rows from `templates`: (0, 5, PP, 2005-11-12 07:09:48, 2008-01-05 14:19:28, ), (1, 9;
CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255) ); Sample rows from `templates`: (0, 5, PP, 2005-11-12 07:09:48, 2008-01-05 14:19:28, ), (1, 9;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), ;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), ;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255;
CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255) ); Sample rows from `templates`: (0, 5, PP, 2005-11-12 07:09:48, 2008-01-05 14:19:28, ), (1, 9;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7,;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7,;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7,;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), ;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), ;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), ;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), ;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), ;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), ;
CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255) ); Sample rows from `templates`: (0, 5, PP, 2005-11-12 07:09:48, 2008-01-05 14:19:28, ), (1, 9;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255;
CREATE TABLE `ref_template_types` ( Template_Type_Code CHAR(15) PRIMARY KEY, Template_Type_Description VARCHAR(255) ); Sample rows from `ref_template_types`: (PPT, Presentation), (CV, CV), (AD, Advertisement), CREATE TABLE `templates` ( Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code), Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR(255;
CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents(Document_ID), Paragraph_Text VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `paragraphs`: (7, 2394, Korea, None), (9, 3, Somalia, None), (65, 50123, Palestinian Territory, None), ;
CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents(Document_ID), Paragraph_Text VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `paragraphs`: (7, 2394, Korea, None), (9, 3, Somalia, None), (65, 50123, Palestinian Territory, None), ;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents;
CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents(Document_ID), Paragraph_Text VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `paragraphs`: (7, 2394, Korea, None), (9, 3, Somalia, None), (65, 50123, Palestinian Territory, None), ;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents;
CREATE TABLE `documents` ( Document_ID INTEGER, Template_ID INTEGER REFERENCES Templates(Template_ID), Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255) ); Sample rows from `documents`: (0, 7, Introduction of OS, n, None), (1, 25, Understanding DB, y, None), (3, 6, Summer Show, u, None), CREATE TABLE `paragraphs` ( Paragraph_ID INTEGER, Document_ID INTEGER REFERENCES Documents;
CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1, Joseph Huts, 32, Blackrod Urban District), (2, Gustaaf Deloor, 29, Bolton County Borough), (3, Vicente Carretero, 26, Farnworth Municipal Borough), ;
CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1, Joseph Huts, 32, Blackrod Urban District), (2, Gustaaf Deloor, 29, Bolton County Borough), (3, Vicente Carretero, 26, Farnworth Municipal Borough), ;
CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1, Joseph Huts, 32, Blackrod Urban District), (2, Gustaaf Deloor, 29, Bolton County Borough), (3, Vicente Carretero, 26, Farnworth Municipal Borough), ;
CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1, Joseph Huts, 32, Blackrod Urban District), (2, Gustaaf Deloor, 29, Bolton County Borough), (3, Vicente Carretero, 26, Farnworth Municipal Borough), ;
CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1, Joseph Huts, 32, Blackrod Urban District), (2, Gustaaf Deloor, 29, Bolton County Borough), (3, Vicente Carretero, 26, Farnworth Municipal Borough), ;
CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1, Joseph Huts, 32, Blackrod Urban District), (2, Gustaaf Deloor, 29, Bolton County Borough), (3, Vicente Carretero, 26, Farnworth Municipal Borough), ;
CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1, Joseph Huts, 32, Blackrod Urban District), (2, Gustaaf Deloor, 29, Bolton County Borough), (3, Vicente Carretero, 26, Farnworth Municipal Borough), ;
CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1, Joseph Huts, 32, Blackrod Urban District), (2, Gustaaf Deloor, 29, Bolton County Borough), (3, Vicente Carretero, 26, Farnworth Municipal Borough), ;
CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1, Joseph Huts, 32, Blackrod Urban District), (2, Gustaaf Deloor, 29, Bolton County Borough), (3, Vicente Carretero, 26, Farnworth Municipal Borough), ;
CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1, Joseph Huts, 32, Blackrod Urban District), (2, Gustaaf Deloor, 29, Bolton County Borough), (3, Vicente Carretero, 26, Farnworth Municipal Borough), ;
CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1, Joseph Huts, 32, Blackrod Urban District), (2, Gustaaf Deloor, 29, Bolton County Borough), (3, Vicente Carretero, 26, Farnworth Municipal Borough), ;
CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1, Joseph Huts, 32, Blackrod Urban District), (2, Gustaaf Deloor, 29, Bolton County Borough), (3, Vicente Carretero, 26, Farnworth Municipal Borough), ;
CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1, Joseph Huts, 32, Blackrod Urban District), (2, Gustaaf Deloor, 29, Bolton County Borough), (3, Vicente Carretero, 26, Farnworth Municipal Borough), ;
CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1, Joseph Huts, 32, Blackrod Urban District), (2, Gustaaf Deloor, 29, Bolton County Borough), (3, Vicente Carretero, 26, Farnworth Municipal Borough), ;
CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1, Joseph Huts, 32, Blackrod Urban District), (2, Gustaaf Deloor, 29, Bolton County Borough), (3, Vicente Carretero, 26, Farnworth Municipal Borough), ;
CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1, Joseph Huts, 32, Blackrod Urban District), (2, Gustaaf Deloor, 29, Bolton County Borough), (3, Vicente Carretero, 26, Farnworth Municipal Borough), ;
CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1, Joseph Huts, 32, Blackrod Urban District), (2, Gustaaf Deloor, 29, Bolton County Borough), (3, Vicente Carretero, 26, Farnworth Municipal Borough), ;
CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1, Joseph Huts, 32, Blackrod Urban District), (2, Gustaaf Deloor, 29, Bolton County Borough), (3, Vicente Carretero, 26, Farnworth Municipal Borough), ;
CREATE TABLE `course_arrange` ( Course_ID INT PRIMARY KEY REFERENCES course(Course_ID), Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID), Grade INT PRIMARY KEY ); Sample rows from `course_arrange`: (2, 5, 1), (2, 3, 3), (3, 2, 5), CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1;
CREATE TABLE `course_arrange` ( Course_ID INT PRIMARY KEY REFERENCES course(Course_ID), Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID), Grade INT PRIMARY KEY ); Sample rows from `course_arrange`: (2, 5, 1), (2, 3, 3), (3, 2, 5), CREATE TABLE `course` ( Course_ID INT PRIMARY KEY, Staring_Date TEXT, Course TEXT ); Sample rows from `course`: (1, ;
CREATE TABLE `course_arrange` ( Course_ID INT PRIMARY KEY REFERENCES course(Course_ID), Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID), Grade INT PRIMARY KEY ); Sample rows from `course_arrange`: (2, 5, 1), (2, 3, 3), (3, 2, 5), CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1;
CREATE TABLE `course_arrange` ( Course_ID INT PRIMARY KEY REFERENCES course(Course_ID), Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID), Grade INT PRIMARY KEY ); Sample rows from `course_arrange`: (2, 5, 1), (2, 3, 3), (3, 2, 5), CREATE TABLE `course` ( Course_ID INT PRIMARY KEY, Staring_Date TEXT, Course TEXT ); Sample rows from `course`: (1, ;
CREATE TABLE `course_arrange` ( Course_ID INT PRIMARY KEY REFERENCES course(Course_ID), Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID), Grade INT PRIMARY KEY ); Sample rows from `course_arrange`: (2, 5, 1), (2, 3, 3), (3, 2, 5), CREATE TABLE `course` ( Course_ID INT PRIMARY KEY, Staring_Date TEXT, Course TEXT ); Sample rows from `course`: (1, ;
CREATE TABLE `course_arrange` ( Course_ID INT PRIMARY KEY REFERENCES course(Course_ID), Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID), Grade INT PRIMARY KEY ); Sample rows from `course_arrange`: (2, 5, 1), (2, 3, 3), (3, 2, 5), CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1;
CREATE TABLE `course_arrange` ( Course_ID INT PRIMARY KEY REFERENCES course(Course_ID), Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID), Grade INT PRIMARY KEY ); Sample rows from `course_arrange`: (2, 5, 1), (2, 3, 3), (3, 2, 5), CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1;
CREATE TABLE `course_arrange` ( Course_ID INT PRIMARY KEY REFERENCES course(Course_ID), Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID), Grade INT PRIMARY KEY ); Sample rows from `course_arrange`: (2, 5, 1), (2, 3, 3), (3, 2, 5), CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1;
CREATE TABLE `course_arrange` ( Course_ID INT PRIMARY KEY REFERENCES course(Course_ID), Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID), Grade INT PRIMARY KEY ); Sample rows from `course_arrange`: (2, 5, 1), (2, 3, 3), (3, 2, 5), CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1;
CREATE TABLE `course_arrange` ( Course_ID INT PRIMARY KEY REFERENCES course(Course_ID), Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID), Grade INT PRIMARY KEY ); Sample rows from `course_arrange`: (2, 5, 1), (2, 3, 3), (3, 2, 5), CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1;
CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1, Joseph Huts, 32, Blackrod Urban District), (2, Gustaaf Deloor, 29, Bolton County Borough), (3, Vicente Carretero, 26, Farnworth Municipal Borough), CREATE TABLE `course_arrange` ( Course_ID INT PRIMARY KEY REFERENCES course(Course_ID), Teacher_ID INT PRIMARY;
CREATE TABLE `teacher` ( Teacher_ID INT PRIMARY KEY, Name TEXT, Age TEXT, Hometown TEXT ); Sample rows from `teacher`: (1, Joseph Huts, 32, Blackrod Urban District), (2, Gustaaf Deloor, 29, Bolton County Borough), (3, Vicente Carretero, 26, Farnworth Municipal Borough), CREATE TABLE `course_arrange` ( Course_ID INT PRIMARY KEY REFERENCES course(Course_ID), Teacher_ID INT PRIMARY;
CREATE TABLE `visitor` ( ID INT PRIMARY KEY, Name TEXT, Level_of_membership INT, Age INT ); Sample rows from `visitor`: (1, Gonzalo Higuaín, 8, 35), (2, Guti Midfielder, 5, 28), (3, Arjen Robben, 1, 27), ;
CREATE TABLE `visitor` ( ID INT PRIMARY KEY, Name TEXT, Level_of_membership INT, Age INT ); Sample rows from `visitor`: (1, Gonzalo Higuaín, 8, 35), (2, Guti Midfielder, 5, 28), (3, Arjen Robben, 1, 27), ;
CREATE TABLE `visitor` ( ID INT PRIMARY KEY, Name TEXT, Level_of_membership INT, Age INT ); Sample rows from `visitor`: (1, Gonzalo Higuaín, 8, 35), (2, Guti Midfielder, 5, 28), (3, Arjen Robben, 1, 27), ;
CREATE TABLE `visitor` ( ID INT PRIMARY KEY, Name TEXT, Level_of_membership INT, Age INT ); Sample rows from `visitor`: (1, Gonzalo Higuaín, 8, 35), (2, Guti Midfielder, 5, 28), (3, Arjen Robben, 1, 27), ;
CREATE TABLE `museum` ( Museum_ID INT PRIMARY KEY, Name TEXT, Num_of_Staff INT, Open_Year TEXT ); Sample rows from `museum`: (1, Plaza Museum, 62, 2000), (2, Capital Plaza Museum, 25, 2012), (3, Jefferson Development Museum, 18, 2010), ;
CREATE TABLE `museum` ( Museum_ID INT PRIMARY KEY, Name TEXT, Num_of_Staff INT, Open_Year TEXT ); Sample rows from `museum`: (1, Plaza Museum, 62, 2000), (2, Capital Plaza Museum, 25, 2012), (3, Jefferson Development Museum, 18, 2010), ;
CREATE TABLE `museum` ( Museum_ID INT PRIMARY KEY, Name TEXT, Num_of_Staff INT, Open_Year TEXT ); Sample rows from `museum`: (1, Plaza Museum, 62, 2000), (2, Capital Plaza Museum, 25, 2012), (3, Jefferson Development Museum, 18, 2010), ;
CREATE TABLE `museum` ( Museum_ID INT PRIMARY KEY, Name TEXT, Num_of_Staff INT, Open_Year TEXT ); Sample rows from `museum`: (1, Plaza Museum, 62, 2000), (2, Capital Plaza Museum, 25, 2012), (3, Jefferson Development Museum, 18, 2010), ;
CREATE TABLE `visit` ( Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID), visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID), Num_of_Ticket INT, Total_spent REAL ); Sample rows from `visit`: (1, 5, 20, 320.14), (2, 5, 4, 89.98), (4, 3, 10, 320.44), CREATE TABLE `visitor` ( ID INT PRIMARY KEY, Name TEXT, Level;
CREATE TABLE `visit` ( Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID), visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID), Num_of_Ticket INT, Total_spent REAL ); Sample rows from `visit`: (1, 5, 20, 320.14), (2, 5, 4, 89.98), (4, 3, 10, 320.44), CREATE TABLE `visitor` ( ID INT PRIMARY KEY, Name TEXT, Level;
CREATE TABLE `visit` ( Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID), visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID), Num_of_Ticket INT, Total_spent REAL ); Sample rows from `visit`: (1, 5, 20, 320.14), (2, 5, 4, 89.98), (4, 3, 10, 320.44), CREATE TABLE `museum` ( Museum_ID INT PRIMARY KEY, Name TEXT;
CREATE TABLE `museum` ( Museum_ID INT PRIMARY KEY, Name TEXT, Num_of_Staff INT, Open_Year TEXT ); Sample rows from `museum`: (1, Plaza Museum, 62, 2000), (2, Capital Plaza Museum, 25, 2012), (3, Jefferson Development Museum, 18, 2010), CREATE TABLE `visit` ( Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID), visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID;
CREATE TABLE `visit` ( Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID), visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID), Num_of_Ticket INT, Total_spent REAL ); Sample rows from `visit`: (1, 5, 20, 320.14), (2, 5, 4, 89.98), (4, 3, 10, 320.44), CREATE TABLE `visitor` ( ID INT PRIMARY KEY, Name TEXT, Level;
CREATE TABLE `visit` ( Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID), visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID), Num_of_Ticket INT, Total_spent REAL ); Sample rows from `visit`: (1, 5, 20, 320.14), (2, 5, 4, 89.98), (4, 3, 10, 320.44), ;
CREATE TABLE `visit` ( Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID), visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID), Num_of_Ticket INT, Total_spent REAL ); Sample rows from `visit`: (1, 5, 20, 320.14), (2, 5, 4, 89.98), (4, 3, 10, 320.44), CREATE TABLE `visitor` ( ID INT PRIMARY KEY, Name TEXT, Level;
CREATE TABLE `museum` ( Museum_ID INT PRIMARY KEY, Name TEXT, Num_of_Staff INT, Open_Year TEXT ); Sample rows from `museum`: (1, Plaza Museum, 62, 2000), (2, Capital Plaza Museum, 25, 2012), (3, Jefferson Development Museum, 18, 2010), CREATE TABLE `visit` ( Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID), visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID;
CREATE TABLE `visit` ( Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID), visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID), Num_of_Ticket INT, Total_spent REAL ); Sample rows from `visit`: (1, 5, 20, 320.14), (2, 5, 4, 89.98), (4, 3, 10, 320.44), CREATE TABLE `museum` ( Museum_ID INT PRIMARY KEY, Name TEXT;
CREATE TABLE `museum` ( Museum_ID INT PRIMARY KEY, Name TEXT, Num_of_Staff INT, Open_Year TEXT ); Sample rows from `museum`: (1, Plaza Museum, 62, 2000), (2, Capital Plaza Museum, 25, 2012), (3, Jefferson Development Museum, 18, 2010), ;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), ;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), ;
CREATE TABLE `matches` ( best_of INT, draw_size INT, loser_age FLOAT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT REFERENCES players(player_id), loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date DATE, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age FLOAT,;
CREATE TABLE `matches` ( best_of INT, draw_size INT, loser_age FLOAT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT REFERENCES players(player_id), loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date DATE, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age FLOAT,;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), ;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), ;
CREATE TABLE `matches` ( best_of INT, draw_size INT, loser_age FLOAT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT REFERENCES players(player_id), loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date DATE, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age FLOAT,;
CREATE TABLE `matches` ( best_of INT, draw_size INT, loser_age FLOAT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT REFERENCES players(player_id), loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date DATE, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age FLOAT,;
CREATE TABLE `rankings` ( ranking_date DATE, ranking INT, player_id INT REFERENCES players(player_id), ranking_points INT, tours INT ); Sample rows from `rankings`: (20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0), CREATE TABLE `matches` ( best_of;
CREATE TABLE `rankings` ( ranking_date DATE, ranking INT, player_id INT REFERENCES players(player_id), ranking_points INT, tours INT ); Sample rows from `rankings`: (20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0), CREATE TABLE `matches` ( best_of;
CREATE TABLE `matches` ( best_of INT, draw_size INT, loser_age FLOAT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT REFERENCES players(player_id), loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date DATE, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age FLOAT,;
CREATE TABLE `rankings` ( ranking_date DATE, ranking INT, player_id INT REFERENCES players(player_id), ranking_points INT, tours INT ); Sample rows from `rankings`: (20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0), CREATE TABLE `players` ( player_id;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), ;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), ;
CREATE TABLE `matches` ( best_of INT, draw_size INT, loser_age FLOAT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT REFERENCES players(player_id), loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date DATE, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age FLOAT,;
CREATE TABLE `matches` ( best_of INT, draw_size INT, loser_age FLOAT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT REFERENCES players(player_id), loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date DATE, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age FLOAT,;
CREATE TABLE `matches` ( best_of INT, draw_size INT, loser_age FLOAT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT REFERENCES players(player_id), loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date DATE, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age FLOAT,;
CREATE TABLE `matches` ( best_of INT, draw_size INT, loser_age FLOAT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT REFERENCES players(player_id), loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date DATE, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age FLOAT,;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), CREATE TABLE;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), CREATE TABLE;
CREATE TABLE `matches` ( best_of INT, draw_size INT, loser_age FLOAT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT REFERENCES players(player_id), loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date DATE, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age FLOAT,;
CREATE TABLE `matches` ( best_of INT, draw_size INT, loser_age FLOAT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT REFERENCES players(player_id), loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date DATE, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age FLOAT,;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), CREATE TABLE;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), CREATE TABLE;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), ;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), ;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), ;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), ;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), ;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), ;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), CREATE TABLE;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), CREATE TABLE;
CREATE TABLE `matches` ( best_of INT, draw_size INT, loser_age FLOAT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT REFERENCES players(player_id), loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date DATE, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age FLOAT,;
CREATE TABLE `matches` ( best_of INT, draw_size INT, loser_age FLOAT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT REFERENCES players(player_id), loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date DATE, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age FLOAT,;
CREATE TABLE `rankings` ( ranking_date DATE, ranking INT, player_id INT REFERENCES players(player_id), ranking_points INT, tours INT ); Sample rows from `rankings`: (20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0), CREATE TABLE `players` ( player_id;
CREATE TABLE `rankings` ( ranking_date DATE, ranking INT, player_id INT REFERENCES players(player_id), ranking_points INT, tours INT ); Sample rows from `rankings`: (20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0), CREATE TABLE `players` ( player_id;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), CREATE TABLE;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), CREATE TABLE;
CREATE TABLE `matches` ( best_of INT, draw_size INT, loser_age FLOAT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT REFERENCES players(player_id), loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date DATE, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age FLOAT,;
CREATE TABLE `matches` ( best_of INT, draw_size INT, loser_age FLOAT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT REFERENCES players(player_id), loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date DATE, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age FLOAT,;
CREATE TABLE `rankings` ( ranking_date DATE, ranking INT, player_id INT REFERENCES players(player_id), ranking_points INT, tours INT ); Sample rows from `rankings`: (20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0), CREATE TABLE `players` ( player_id;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), CREATE TABLE;
CREATE TABLE `rankings` ( ranking_date DATE, ranking INT, player_id INT REFERENCES players(player_id), ranking_points INT, tours INT ); Sample rows from `rankings`: (20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0), CREATE TABLE `players` ( player_id;
CREATE TABLE `rankings` ( ranking_date DATE, ranking INT, player_id INT REFERENCES players(player_id), ranking_points INT, tours INT ); Sample rows from `rankings`: (20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0), CREATE TABLE `players` ( player_id;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), ;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), ;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), ;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), ;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), ;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), ;
CREATE TABLE `rankings` ( ranking_date DATE, ranking INT, player_id INT REFERENCES players(player_id), ranking_points INT, tours INT ); Sample rows from `rankings`: (20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0), ;
CREATE TABLE `rankings` ( ranking_date DATE, ranking INT, player_id INT REFERENCES players(player_id), ranking_points INT, tours INT ); Sample rows from `rankings`: (20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0), ;
CREATE TABLE `matches` ( best_of INT, draw_size INT, loser_age FLOAT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT REFERENCES players(player_id), loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date DATE, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age FLOAT,;
CREATE TABLE `matches` ( best_of INT, draw_size INT, loser_age FLOAT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT REFERENCES players(player_id), loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date DATE, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age FLOAT,;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), CREATE TABLE;
CREATE TABLE `matches` ( best_of INT, draw_size INT, loser_age FLOAT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT REFERENCES players(player_id), loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date DATE, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age FLOAT,;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), CREATE TABLE;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), CREATE TABLE;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), CREATE TABLE;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), CREATE TABLE;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), ;
CREATE TABLE `players` ( player_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date DATE, country_code TEXT ); Sample rows from `players`: (200001, Martina, Hingis, R, 19800930, SUI), (200002, Mirjana, Lucic, R, 19820309, CRO), (200003, Justine, Henin, R, 19820601, BEL), ;
CREATE TABLE `ship` ( lost_in_battle INT REFERENCES battle(id), id INT PRIMARY KEY, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT ); Sample rows from `ship`: (8, 1, Lettice, t, Brig, English Channel, Captured), (7, 2, Bon Accord, t, Brig, English Channel, Captured), (6, 3, Mary, t, Brig, English Channel, Capt;
CREATE TABLE `ship` ( lost_in_battle INT REFERENCES battle(id), id INT PRIMARY KEY, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT ); Sample rows from `ship`: (8, 1, Lettice, t, Brig, English Channel, Captured), (7, 2, Bon Accord, t, Brig, English Channel, Captured), (6, 3, Mary, t, Brig, English Channel, Capt;
CREATE TABLE `battle` ( id INT PRIMARY KEY, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT ); Sample rows from `battle`: (1, Battle of Adrianople, 14 April 1205, Kaloyan, Baldwin I, Bulgarian victory), (2, Battle of Serres, June 1205, Kaloyan, Unknown, Bulgarian victory), (3, Battle of Rusion, 31 January 1206,;
CREATE TABLE `death` ( caused_by_ship_id INT REFERENCES ship(id), id INT PRIMARY KEY, note TEXT, killed INT, injured INT ); Sample rows from `death`: (1, 1, Dantewada, Chhattisgarh, 8, 0), (2, 2, Dantewada, Chhattisgarh, 3, 0), (3, 13, Erraboru, Chhattisgarh, 25,;
CREATE TABLE `death` ( caused_by_ship_id INT REFERENCES ship(id), id INT PRIMARY KEY, note TEXT, killed INT, injured INT ); Sample rows from `death`: (1, 1, Dantewada, Chhattisgarh, 8, 0), (2, 2, Dantewada, Chhattisgarh, 3, 0), (3, 13, Erraboru, Chhattisgarh, 25,;
CREATE TABLE `death` ( caused_by_ship_id INT REFERENCES ship(id), id INT PRIMARY KEY, note TEXT, killed INT, injured INT ); Sample rows from `death`: (1, 1, Dantewada, Chhattisgarh, 8, 0), (2, 2, Dantewada, Chhattisgarh, 3, 0), (3, 13, Erraboru, Chhattisgarh, 25,;
CREATE TABLE `battle` ( id INT PRIMARY KEY, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT ); Sample rows from `battle`: (1, Battle of Adrianople, 14 April 1205, Kaloyan, Baldwin I, Bulgarian victory), (2, Battle of Serres, June 1205, Kaloyan, Unknown, Bulgarian victory), (3, Battle of Rusion, 31 January 1206,;
CREATE TABLE `ship` ( lost_in_battle INT REFERENCES battle(id), id INT PRIMARY KEY, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT ); Sample rows from `ship`: (8, 1, Lettice, t, Brig, English Channel, Captured), (7, 2, Bon Accord, t, Brig, English Channel, Captured), (6, 3, Mary, t, Brig, English Channel, Capt;
CREATE TABLE `battle` ( id INT PRIMARY KEY, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT ); Sample rows from `battle`: (1, Battle of Adrianople, 14 April 1205, Kaloyan, Baldwin I, Bulgarian victory), (2, Battle of Serres, June 1205, Kaloyan, Unknown, Bulgarian victory), (3, Battle of Rusion, 31 January 1206,;
CREATE TABLE `death` ( caused_by_ship_id INT REFERENCES ship(id), id INT PRIMARY KEY, note TEXT, killed INT, injured INT ); Sample rows from `death`: (1, 1, Dantewada, Chhattisgarh, 8, 0), (2, 2, Dantewada, Chhattisgarh, 3, 0), (3, 13, Erraboru, Chhattisgarh, 25,;
CREATE TABLE `battle` ( id INT PRIMARY KEY, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT ); Sample rows from `battle`: (1, Battle of Adrianople, 14 April 1205, Kaloyan, Baldwin I, Bulgarian victory), (2, Battle of Serres, June 1205, Kaloyan, Unknown, Bulgarian victory), (3, Battle of Rusion, 31 January 1206,;
CREATE TABLE `battle` ( id INT PRIMARY KEY, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT ); Sample rows from `battle`: (1, Battle of Adrianople, 14 April 1205, Kaloyan, Baldwin I, Bulgarian victory), (2, Battle of Serres, June 1205, Kaloyan, Unknown, Bulgarian victory), (3, Battle of Rusion, 31 January 1206,;
CREATE TABLE `ship` ( lost_in_battle INT REFERENCES battle(id), id INT PRIMARY KEY, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT ); Sample rows from `ship`: (8, 1, Lettice, t, Brig, English Channel, Captured), (7, 2, Bon Accord, t, Brig, English Channel, Captured), (6, 3, Mary, t, Brig, English Channel, Capt;
CREATE TABLE `ship` ( lost_in_battle INT REFERENCES battle(id), id INT PRIMARY KEY, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT ); Sample rows from `ship`: (8, 1, Lettice, t, Brig, English Channel, Captured), (7, 2, Bon Accord, t, Brig, English Channel, Captured), (6, 3, Mary, t, Brig, English Channel, Capt;
CREATE TABLE `battle` ( id INT PRIMARY KEY, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT ); Sample rows from `battle`: (1, Battle of Adrianople, 14 April 1205, Kaloyan, Baldwin I, Bulgarian victory), (2, Battle of Serres, June 1205, Kaloyan, Unknown, Bulgarian victory), (3, Battle of Rusion, 31 January 1206,;
CREATE TABLE `death` ( caused_by_ship_id INT REFERENCES ship(id), id INT PRIMARY KEY, note TEXT, killed INT, injured INT ); Sample rows from `death`: (1, 1, Dantewada, Chhattisgarh, 8, 0), (2, 2, Dantewada, Chhattisgarh, 3, 0), (3, 13, Erraboru, Chhattisgarh, 25,;
CREATE TABLE `addresses` ( address_id INTEGER, line_1 VARCHAR(255), line_2 VARCHAR(255), line_3 VARCHAR(255), city VARCHAR(255), zip_postcode VARCHAR(20), state_province_county VARCHAR(255), country VARCHAR(255), other_address_details VARCHAR(255) ); Sample rows from `addresses`: (1, 2294 Grant Square Apt. 235, Apt. 370, None, Port Chelsea, 148, Virginia, Iceland,;
CREATE TABLE `addresses` ( address_id INTEGER, line_1 VARCHAR(255), line_2 VARCHAR(255), line_3 VARCHAR(255), city VARCHAR(255), zip_postcode VARCHAR(20), state_province_county VARCHAR(255), country VARCHAR(255), other_address_details VARCHAR(255) ); Sample rows from `addresses`: (1, 2294 Grant Square Apt. 235, Apt. 370, None, Port Chelsea, 148, Virginia, Iceland,;
CREATE TABLE `courses` ( course_id INTEGER, course_name VARCHAR(255), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `courses`: (1, ds, p, None), (2, math, q, None), (3, os, v, None), CREATE TABLE `courses_sections` ( section_id INTEGER, course_id INTEGER REFERENCES Courses(course_id), section_name VARCHAR(255), section_description VARCHAR(255), other_details VARCHAR(255) );;
CREATE TABLE `courses` ( course_id INTEGER, course_name VARCHAR(255), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `courses`: (1, ds, p, None), (2, math, q, None), (3, os, v, None), CREATE TABLE `course_enrolment` ( course_enrolment_id, student_id INTEGER REFERENCES Students(student_id), sections_section_id INTEGER REFERENCES Sections(section_id), semester_id INTEGER REFERENCES Semesters;
CREATE TABLE `courses` ( course_id INTEGER, course_name VARCHAR(255), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `courses`: (1, ds, p, None), (2, math, q, None), (3, os, v, None), CREATE TABLE `course_info` ( course_info_id INTEGER, course_id INTEGER REFERENCES Courses(course_id), department_id INTEGER REFERENCES Departments(department_id), course_info_name VARCHAR(255), course_info;
CREATE TABLE `courses` ( course_id INTEGER, course_name VARCHAR(255), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `courses`: (1, ds, p, None), (2, math, q, None), (3, os, v, None), CREATE TABLE `course_instructors` ( course_id INTEGER PRIMARY KEY REFERENCES Courses(course_id), instructor_id INTEGER PRIMARY KEY REFERENCES Teachers(teacher_id), course_repeats VARCHAR(40), semester_id;
CREATE TABLE `addresses` ( address_id INTEGER, line_1 VARCHAR(255), line_2 VARCHAR(255), line_3 VARCHAR(255), city VARCHAR(255), zip_postcode VARCHAR(20), state_province_county VARCHAR(255), country VARCHAR(255), other_address_details VARCHAR(255) ); Sample rows from `addresses`: (1, 2294 Grant Square Apt. 235, Apt. 370, None, Port Chelsea, 148, Virginia, Iceland,;
CREATE TABLE `addresses` ( address_id INTEGER, line_1 VARCHAR(255), line_2 VARCHAR(255), line_3 VARCHAR(255), city VARCHAR(255), zip_postcode VARCHAR(20), state_province_county VARCHAR(255), country VARCHAR(255), other_address_details VARCHAR(255) ); Sample rows from `addresses`: (1, 2294 Grant Square Apt. 235, Apt. 370, None, Port Chelsea, 148, Virginia, Iceland,;
CREATE TABLE `degree_programs` ( degree_program_id INTEGER, department_id INTEGER REFERENCES Departments(department_id), degree_summary_name VARCHAR(255), degree_summary_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `degree_programs`: (1, 13, Master, architecto, None), (2, 2, Master, cumque, None), (3, 13, Master, placeat, None), CREATE TABLE `departments` ( department_id INTEGER,;
CREATE TABLE `degree_programs` ( degree_program_id INTEGER, department_id INTEGER REFERENCES Departments(department_id), degree_summary_name VARCHAR(255), degree_summary_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `degree_programs`: (1, 13, Master, architecto, None), (2, 2, Master, cumque, None), (3, 13, Master, placeat, None), CREATE TABLE `departments` ( department_id INTEGER,;
CREATE TABLE `departments` ( department_id INTEGER, department_name VARCHAR(255), department_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `departments`: (1, computer science, error, None), (2, history, nostrum, None), (3, art, aliquam, None), CREATE TABLE `degree_programs` ( degree_program_id INTEGER, department_id INTEGER REFERENCES Departments(department_id), degree_summary_name VARCHAR(255), degree_summary_description VARCHAR(255;
CREATE TABLE `departments` ( department_id INTEGER, department_name VARCHAR(255), department_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `departments`: (1, computer science, error, None), (2, history, nostrum, None), (3, art, aliquam, None), CREATE TABLE `degree_programs` ( degree_program_id INTEGER, department_id INTEGER REFERENCES Departments(department_id), degree_summary_name VARCHAR(255), degree_summary_description VARCHAR(255;
CREATE TABLE `degree_programs` ( degree_program_id INTEGER, department_id INTEGER REFERENCES Departments(department_id), degree_summary_name VARCHAR(255), degree_summary_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `degree_programs`: (1, 13, Master, architecto, None), (2, 2, Master, cumque, None), (3, 13, Master, placeat, None), CREATE TABLE `courses` ( course_id INTEGER,;
CREATE TABLE `degree_programs` ( degree_program_id INTEGER, department_id INTEGER REFERENCES Departments(department_id), degree_summary_name VARCHAR(255), degree_summary_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `degree_programs`: (1, 13, Master, architecto, None), (2, 2, Master, cumque, None), (3, 13, Master, placeat, None), CREATE TABLE `courses` ( course_id INTEGER,;
CREATE TABLE `departments` ( department_id INTEGER, department_name VARCHAR(255), department_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `departments`: (1, computer science, error, None), (2, history, nostrum, None), (3, art, aliquam, None), CREATE TABLE `degree_programs` ( degree_program_id INTEGER, department_id INTEGER REFERENCES Departments(department_id), degree_summary_name VARCHAR(255), degree_summary_description VARCHAR(255;
CREATE TABLE `departments` ( department_id INTEGER, department_name VARCHAR(255), department_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `departments`: (1, computer science, error, None), (2, history, nostrum, None), (3, art, aliquam, None), CREATE TABLE `faculty` ( faculty_id INTEGER, department_id INTEGER REFERENCES Departments(department_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(;
CREATE TABLE `sections` ( section_id INTEGER, course_id INTEGER REFERENCES Courses(course_id), section_name VARCHAR(255), section_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `sections`: (1, 9, a, non, None), (2, 2, b, voluptatem, None), (3, 8, c, qui, None), CREATE TABLE `courses` ( course_id INTEGER, course_name VARCHAR(255), course_description VARCHAR(;
CREATE TABLE `courses` ( course_id INTEGER, course_name VARCHAR(255), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `courses`: (1, ds, p, None), (2, math, q, None), (3, os, v, None), CREATE TABLE `sections` ( section_id INTEGER, course_id INTEGER REFERENCES Courses(course_id), section_name VARCHAR(255), section_description VARCHAR(255), other_details VARCHAR(255) ); Sample;
CREATE TABLE `courses` ( course_id INTEGER, course_name VARCHAR(255), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `courses`: (1, ds, p, None), (2, math, q, None), (3, os, v, None), CREATE TABLE `sections` ( section_id INTEGER, course_id INTEGER REFERENCES Courses(course_id), section_name VARCHAR(255), section_description VARCHAR(255), other_details VARCHAR(255) ); Sample;
CREATE TABLE `courses` ( course_id INTEGER, course_name VARCHAR(255), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `courses`: (1, ds, p, None), (2, math, q, None), (3, os, v, None), CREATE TABLE `course_sections` ( section_id INTEGER, course_id INTEGER REFERENCES Courses(course_id), section_name VARCHAR(255), section_description VARCHAR(255), other_details VARCHAR(255) );;
CREATE TABLE `sections` ( section_id INTEGER, course_id INTEGER REFERENCES Courses(course_id), section_name VARCHAR(255), section_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `sections`: (1, 9, a, non, None), (2, 2, b, voluptatem, None), (3, 8, c, qui, None), CREATE TABLE `courses` ( course_id INTEGER, course_name VARCHAR(255), course_description VARCHAR(;
CREATE TABLE `sections` ( section_id INTEGER, course_id INTEGER REFERENCES Courses(course_id), section_name VARCHAR(255), section_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `sections`: (1, 9, a, non, None), (2, 2, b, voluptatem, None), (3, 8, c, qui, None), CREATE TABLE `courses` ( course_id INTEGER, course_name VARCHAR(255), course_description VARCHAR(;
CREATE TABLE `students` ( student_id INTEGER, current_address_id INTEGER REFERENCES Addresses(address_id), permanent_address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(40), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), ssn VARCHAR(40), date_first_registered DATETIME, date_left DATETIME, other_student_details VARCHAR(255) ); Sample rows from `students`: (1, 10, 15, Tim;
CREATE TABLE `student_enrolment` ( student_enrolment_id INTEGER, degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id), semester_id INTEGER REFERENCES Semesters(semester_id), student_id INTEGER REFERENCES Students(student_id), other_details VARCHAR(255) ); Sample rows from `student_enrolment`: (1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2,;
CREATE TABLE `departments` ( department_id INTEGER, department_name VARCHAR(255), department_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `departments`: (1, computer science, error, None), (2, history, nostrum, None), (3, art, aliquam, None), CREATE TABLE `courses` ( course_id INTEGER, course_name VARCHAR(255), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `courses`:;
CREATE TABLE `departments` ( department_id INTEGER, department_name VARCHAR(255), department_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `departments`: (1, computer science, error, None), (2, history, nostrum, None), (3, art, aliquam, None), CREATE TABLE `courses` ( course_id INTEGER, course_name VARCHAR(255), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `courses`:;
CREATE TABLE `students` ( student_id INTEGER, current_address_id INTEGER REFERENCES Addresses(address_id), permanent_address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(40), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), ssn VARCHAR(40), date_first_registered DATETIME, date_left DATETIME, other_student_details VARCHAR(255) ); Sample rows from `students`: (1, 10, 15, Tim;
CREATE TABLE `students` ( student_id INTEGER, current_address_id INTEGER REFERENCES Addresses(address_id), permanent_address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(40), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), ssn VARCHAR(40), date_first_registered DATETIME, date_left DATETIME, other_student_details VARCHAR(255) ); Sample rows from `students`: (1, 10, 15, Tim;
CREATE TABLE `students` ( student_id INTEGER, current_address_id INTEGER REFERENCES Addresses(address_id), permanent_address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(40), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), ssn VARCHAR(40), date_first_registered DATETIME, date_left DATETIME, other_student_details VARCHAR(255) ); Sample rows from `students`: (1, 10, 15, Tim;
CREATE TABLE `students` ( student_id INTEGER, current_address_id INTEGER REFERENCES Addresses(address_id), permanent_address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(40), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), ssn VARCHAR(40), date_first_registered DATETIME, date_left DATETIME, other_student_details VARCHAR(255) ); Sample rows from `students`: (1, 10, 15, Tim;
CREATE TABLE `student_enrolment` ( student_enrolment_id INTEGER, degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id), semester_id INTEGER REFERENCES Semesters(semester_id), student_id INTEGER REFERENCES Students(student_id), other_details VARCHAR(255) ); Sample rows from `student_enrolment`: (1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2,;
CREATE TABLE `degree_programs` ( degree_program_id INTEGER, department_id INTEGER REFERENCES Departments(department_id), degree_summary_name VARCHAR(255), degree_summary_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `degree_programs`: (1, 13, Master, architecto, None), (2, 2, Master, cumque, None), (3, 13, Master, placeat, None), CREATE TABLE `students` ( student_id INTEGER,;
CREATE TABLE `student_enrolment` ( student_enrolment_id INTEGER, degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id), semester_id INTEGER REFERENCES Semesters(semester_id), student_id INTEGER REFERENCES Students(student_id), other_details VARCHAR(255) ); Sample rows from `student_enrolment`: (1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2,;
CREATE TABLE `degree_programs` ( degree_program_id INTEGER, department_id INTEGER REFERENCES Departments(department_id), degree_summary_name VARCHAR(255), degree_summary_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `degree_programs`: (1, 13, Master, architecto, None), (2, 2, Master, cumque, None), (3, 13, Master, placeat, None), CREATE TABLE `student_enrolment` ( student;
CREATE TABLE `student_enrolment` ( student_enrolment_id INTEGER, degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id), semester_id INTEGER REFERENCES Semesters(semester_id), student_id INTEGER REFERENCES Students(student_id), other_details VARCHAR(255) ); Sample rows from `student_enrolment`: (1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2,;
CREATE TABLE `students` ( student_id INTEGER, current_address_id INTEGER REFERENCES Addresses(address_id), permanent_address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(40), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), ssn VARCHAR(40), date_first_registered DATETIME, date_left DATETIME, other_student_details VARCHAR(255) ); Sample rows from `students`: (1, 10, 15, Tim;
CREATE TABLE `semesters` ( semester_id INTEGER, semester_name VARCHAR(255), semester_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `semesters`: (1, spring 2010, x, None), (2, summer 2010, g, None), (3, fall 2010, w, None), CREATE TABLE `student_enrolment` ( student_enrolment_id INTEGER, degree_program_id INTEGER REFERENCES Degree_Programs(degree_program;
CREATE TABLE `semesters` ( semester_id INTEGER, semester_name VARCHAR(255), semester_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `semesters`: (1, spring 2010, x, None), (2, summer 2010, g, None), (3, fall 2010, w, None), CREATE TABLE `student_enrolment` ( student_enrolment_id INTEGER, degree_program_id INTEGER REFERENCES Degree_Programs(degree_program;
CREATE TABLE `courses` ( course_id INTEGER, course_name VARCHAR(255), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `courses`: (1, ds, p, None), (2, math, q, None), (3, os, v, None), CREATE TABLE `student_enrolment_courses` ( student_course_id INTEGER, course_id INTEGER REFERENCES Courses(course_id), student_id INTEGER REFERENCES Student_Enrolment(student_id), course_completion_datetime;
CREATE TABLE `courses` ( course_id INTEGER, course_name VARCHAR(255), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `courses`: (1, ds, p, None), (2, math, q, None), (3, os, v, None), CREATE TABLE `student_enrolment_courses` ( student_course_id INTEGER, course_id INTEGER REFERENCES Courses(course_id), student_id INTEGER REFERENCES Student_Enrolment(student_id), semester_id INTEGER;
CREATE TABLE `courses` ( course_id INTEGER, course_name VARCHAR(255), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `courses`: (1, ds, p, None), (2, math, q, None), (3, os, v, None), CREATE TABLE `student_enrolment_courses` ( student_course_id INTEGER, course_id INTEGER REFERENCES Courses(course_id), student_id INTEGER REFERENCES Student_Enrolment(student_id), semester_id INTEGER;
CREATE TABLE `courses` ( course_id INTEGER, course_name VARCHAR(255), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `courses`: (1, ds, p, None), (2, math, q, None), (3, os, v, None), CREATE TABLE `student_enrolment_courses` ( student_course_id INTEGER, course_id INTEGER REFERENCES Courses(course_id), student_id INTEGER REFERENCES Students(student_id), enrolment_status VARCHAR(10),;
CREATE TABLE `students` ( student_id INTEGER, current_address_id INTEGER REFERENCES Addresses(address_id), permanent_address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(40), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), ssn VARCHAR(40), date_first_registered DATETIME, date_left DATETIME, other_student_details VARCHAR(255) ); Sample rows from `students`: (1, 10, 15, Tim;
CREATE TABLE `students` ( student_id INTEGER, current_address_id INTEGER REFERENCES Addresses(address_id), permanent_address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(40), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), ssn VARCHAR(40), date_first_registered DATETIME, date_left DATETIME, other_student_details VARCHAR(255) ); Sample rows from `students`: (1, 10, 15, Tim;
CREATE TABLE `transcript` ( transcript_id INTEGER, student_id INTEGER REFERENCES Student_Enrolment(student_id), semester_id INTEGER REFERENCES Semesters(semester_id), date_transcript_created DATETIME, date_transcript_updated DATETIME, other_details VARCHAR(255) ); Sample rows from `transcript`: (1, 9, 13, 2008-08-19 11:44:34, 2017-12-19 16:03:58, None),;
CREATE TABLE `transcripts` ( transcript_id INTEGER, student_id INTEGER REFERENCES Student_Enrolment(student_id), semester_id INTEGER REFERENCES Semesters(semester_id), transcript_name VARCHAR(255), transcript_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `transcripts`: (1, 9, 13, B, error, None), (2, 7, 4, A, error, None), (3, 5, 11, D,;
CREATE TABLE `students` ( student_id INTEGER, current_address_id INTEGER REFERENCES Addresses(address_id), permanent_address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(40), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), ssn VARCHAR(40), date_first_registered DATETIME, date_left DATETIME, other_student_details VARCHAR(255) ); Sample rows from `students`: (1, 10, 15, Tim;
CREATE TABLE `students` ( student_id INTEGER, current_address_id INTEGER REFERENCES Addresses(address_id), permanent_address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(40), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), ssn VARCHAR(40), date_first_registered DATETIME, date_left DATETIME, other_student_details VARCHAR(255) ); Sample rows from `students`: (1, 10, 15, Tim;
CREATE TABLE `students` ( student_id INTEGER, current_address_id INTEGER REFERENCES Addresses(address_id), permanent_address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(40), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), ssn VARCHAR(40), date_first_registered DATETIME, date_left DATETIME, other_student_details VARCHAR(255) ); Sample rows from `students`: (1, 10, 15, Tim;
CREATE TABLE `students` ( student_id INTEGER, current_address_id INTEGER REFERENCES Addresses(address_id), permanent_address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(40), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), ssn VARCHAR(40), date_first_registered DATETIME, date_left DATETIME, other_student_details VARCHAR(255) ); Sample rows from `students`: (1, 10, 15, Tim;
CREATE TABLE `students` ( student_id INTEGER, current_address_id INTEGER REFERENCES Addresses(address_id), permanent_address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(40), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), ssn VARCHAR(40), date_first_registered DATETIME, date_left DATETIME, other_student_details VARCHAR(255) ); Sample rows from `students`: (1, 10, 15, Tim;
CREATE TABLE `students` ( student_id INTEGER, current_address_id INTEGER REFERENCES Addresses(address_id), permanent_address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(40), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), ssn VARCHAR(40), date_first_registered DATETIME, date_left DATETIME, other_student_details VARCHAR(255) ); Sample rows from `students`: (1, 10, 15, Tim;
CREATE TABLE `addresses` ( address_id INTEGER, line_1 VARCHAR(255), line_2 VARCHAR(255), line_3 VARCHAR(255), city VARCHAR(255), zip_postcode VARCHAR(20), state_province_county VARCHAR(255), country VARCHAR(255), other_address_details VARCHAR(255) ); Sample rows from `addresses`: (1, 2294 Grant Square Apt. 235, Apt. 370, None, Port Chelsea, 148, Virginia, Iceland,;
CREATE TABLE `addresses` ( address_id INTEGER, line_1 VARCHAR(255), line_2 VARCHAR(255), line_3 VARCHAR(255), city VARCHAR(255), zip_postcode VARCHAR(20), state_province_county VARCHAR(255), country VARCHAR(255), other_address_details VARCHAR(255) ); Sample rows from `addresses`: (1, 2294 Grant Square Apt. 235, Apt. 370, None, Port Chelsea, 148, Virginia, Iceland,;
CREATE TABLE `addresses` ( address_id INTEGER, line_1 VARCHAR(255), line_2 VARCHAR(255), line_3 VARCHAR(255), city VARCHAR(255), zip_postcode VARCHAR(20), state_province_county VARCHAR(255), country VARCHAR(255), other_address_details VARCHAR(255) ); Sample rows from `addresses`: (1, 2294 Grant Square Apt. 235, Apt. 370, None, Port Chelsea, 148, Virginia, Iceland,;
CREATE TABLE `addresses` ( address_id INTEGER, line_1 VARCHAR(255), line_2 VARCHAR(255), line_3 VARCHAR(255), city VARCHAR(255), zip_postcode VARCHAR(20), state_province_county VARCHAR(255), country VARCHAR(255), other_address_details VARCHAR(255) ); Sample rows from `addresses`: (1, 2294 Grant Square Apt. 235, Apt. 370, None, Port Chelsea, 148, Virginia, Iceland,;
CREATE TABLE `transcripts` ( transcript_id INTEGER, student_id INTEGER REFERENCES Students(student_id), semester_id INTEGER REFERENCES Semesters(semester_id), date_transcript_issued DATETIME, transcript_summary VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `transcripts`: (1, 19, 13, 2008-08-19 12:24:13, error, None), (2, 15, 4, 2013-03-17;
CREATE TABLE `transcript_information` ( transcript_information_id INTEGER, semester_id INTEGER REFERENCES Semesters(semester_id), student_id INTEGER REFERENCES Students(student_id), transcript_details VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `transcript_information`: (1, 13, 6, None, None), (2, 6, 8, a, None), (3, 2, 9, b, None), CREATE TABLE `transcripts` ( transcript_id;
CREATE TABLE `transcripts` ( transcript_id INTEGER, student_id INTEGER REFERENCES Student_Enrolment(student_id), semester_id INTEGER REFERENCES Semesters(semester_id), transcript_date DATETIME, transcript_details VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `transcripts`: (1, 9, 13, 2016-08-16 12:49:12, None, None), (2, 7, 4, 1976-03-;
CREATE TABLE `transcripts` ( transcript_id INTEGER, student_id INTEGER REFERENCES Students(student_id), semester_id INTEGER REFERENCES Semesters(semester_id), transcript_date DATETIME, transcript_status VARCHAR(10), other_details VARCHAR(255) ); Sample rows from `transcripts`: (1, 19, 13, 2016-07-10 21:14:12, good, None), (2, 15, 4, 2016-04-09 13:;
EnCREATE TABLE `transcripts` ( transcript_id INTEGER, student_id INTEGER REFERENCES Students(student_id), semester_id INTEGER REFERENCES Semesters(semester_id), transcript_details VARCHAR(40) ); Sample rows from `transcripts`: (1, 11, 13, None), (2, 2, 11, None), (3, 10, 2, None), CREATE TABLE `students` ( student_id INTEGER, current_address_id INTEGER REFERENCES Addresses(address_id), permanent_address_id INTEGER;
CREATE TABLE `transcripts` ( transcript_id INTEGER, student_id INTEGER REFERENCES Students(student_id), semester_id INTEGER REFERENCES Semesters(semester_id), transcript_floor_block_char VARCHAR(255), transcript_ceiling_block_char VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `transcripts`: (1, 11, 13, A, B, None), (2, 2, 3, B, A, None), (3, 6, 4, B;
CREATE TABLE `transcript_releases` ( transcript_release_id INTEGER, semester_id INTEGER REFERENCES Semesters(semester_id), institute_name VARCHAR(255), transcript_release_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `transcript_releases`: (1, 13, ite, None, None), (2, 2, irstling, None, None), (3, 11, qeda, None, None), CREATE TABLE `student_transcripts`;
CREATE TABLE `transcripts` ( transcript_id INTEGER, student_id INTEGER REFERENCES Students(student_id), semester_id INTEGER REFERENCES Semesters(semester_id), date_transcript_issued DATETIME, transcript_status VARCHAR(10), other_details VARCHAR(255) ); Sample rows from `transcripts`: (1, 19, 13, 2016-08-21 12:49:34, good, None), (2, 15, 4, 2016-03-26;
CREATE TABLE `student_course_enrolment` ( student_course_enrolment_id INTEGER, student_id INTEGER REFERENCES Student_Enrolment(student_id), course_id INTEGER REFERENCES Courses(course_id), enrolment_status VARCHAR(10), foreign_term_id INTEGER, date_enrolment_from DATETIME, date_enrolment_to DATETIME, other_details VARCHAR(255) ); Sample rows from `student_course_enrolment`: (1, 9, 14, transfer, 8, 2012;
CREATE TABLE `student_course_enrolment` ( student_course_id INTEGER, student_id INTEGER REFERENCES Students(student_id), course_id INTEGER REFERENCES Courses(course_id), enrolment_status VARCHAR(10), semester_id INTEGER REFERENCES Semesters(semester_id), course_year VARCHAR(10), transcript_date DATETIME, completed_course VARCHAR(1), other_details VARCHAR(255) ); Sample rows from `student_course_enrolment`: (1, 6, 2, transferred, 3, 2013,;
CREATE TABLE `transcripts` ( transcript_id INTEGER, student_id INTEGER REFERENCES Student_Enrolment(student_id), semester_id INTEGER REFERENCES Semesters(semester_id), transmission_status VARCHAR(10), date_transmitted DATETIME, date_received DATETIME, current_address_id INTEGER REFERENCES Addresses(address_id), permanent_address_id INTEGER REFERENCES Addresses(address_id), other_details VARCHAR(255) ); Sample rows from `transcripts`: (1, 9, 13, A, 2010-04-14;
CREATE TABLE `transcript` ( transcript_id INTEGER, student_id INTEGER REFERENCES Student_Enrolment(student_id), semester_id INTEGER REFERENCES Semesters(semester_id), date_transcript_created DATETIME, transcript_summary VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `transcript`: (1, 9, 13, 2008-08-21 12:44:34, None, None), (2, 7, 4, 1973-;
CREATE TABLE `student_enrolment` ( student_enrolment_id INTEGER, degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id), semester_id INTEGER REFERENCES Semesters(semester_id), student_id INTEGER REFERENCES Students(student_id), other_details VARCHAR(255) ); Sample rows from `student_enrolment`: (1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2,;
CREATE TABLE `student_enrolment` ( student_enrolment_id INTEGER, degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id), semester_id INTEGER REFERENCES Semesters(semester_id), student_id INTEGER REFERENCES Students(student_id), other_details VARCHAR(255) ); Sample rows from `student_enrolment`: (1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2,;
CREATE TABLE `addresses` ( address_id INTEGER, line_1 VARCHAR(255), line_2 VARCHAR(255), line_3 VARCHAR(255), city VARCHAR(255), zip_postcode VARCHAR(20), state_province_county VARCHAR(255), country VARCHAR(255), other_address_details VARCHAR(255) ); Sample rows from `addresses`: (1, 2294 Grant Square Apt. 235, Apt. 370, None, Port Chelsea, 148, Virginia, Iceland,;
CREATE TABLE `addresses` ( address_id INTEGER, line_1 VARCHAR(255), line_2 VARCHAR(255), line_3 VARCHAR(255), city VARCHAR(255), zip_postcode VARCHAR(20), state_province_county VARCHAR(255), country VARCHAR(255), other_address_details VARCHAR(255) ); Sample rows from `addresses`: (1, 2294 Grant Square Apt. 235, Apt. 370, None, Port Chelsea, 148, Virginia, Iceland,;
CREATE TABLE `students` ( student_id INTEGER, current_address_id INTEGER REFERENCES Addresses(address_id), permanent_address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(40), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), ssn VARCHAR(40), date_first_registered DATETIME, date_left DATETIME, other_student_details VARCHAR(255) ); Sample rows from `students`: (1, 10, 15, Tim;
CREATE TABLE `students` ( student_id INTEGER, current_address_id INTEGER REFERENCES Addresses(address_id), permanent_address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(40), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), ssn VARCHAR(40), date_first_registered DATETIME, date_left DATETIME, other_student_details VARCHAR(255) ); Sample rows from `students`: (1, 10, 15, Tim;
CREATE TABLE `sections` ( section_id INTEGER, course_id INTEGER REFERENCES Courses(course_id), section_name VARCHAR(255), section_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `sections`: (1, 9, a, non, None), (2, 2, b, voluptatem, None), (3, 8, c, qui, None), CREATE TABLE `courses` ( course_id INTEGER, course_name VARCHAR(255), course_description VARCHAR(;
CREATE TABLE `courses` ( course_id INTEGER, course_name VARCHAR(255), course_description VARCHAR(255), other_details VARCHAR(255) ); Sample rows from `courses`: (1, ds, p, None), (2, math, q, None), (3, os, v, None), CREATE TABLE `sections` ( section_id INTEGER, course_id INTEGER REFERENCES Courses(course_id), section_name VARCHAR(255), section_description VARCHAR(255), other_details VARCHAR(255) ); Sample;
CREATE TABLE `students` ( student_id INTEGER, current_address_id INTEGER REFERENCES Addresses(address_id), permanent_address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(40), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), ssn VARCHAR(40), date_first_registered DATETIME, date_left DATETIME, other_student_details VARCHAR(255) ); Sample rows from `students`: (1, 10, 15, Tim;
CREATE TABLE `students` ( student_id INTEGER, current_address_id INTEGER REFERENCES Addresses(address_id), permanent_address_id INTEGER REFERENCES Addresses(address_id), first_name VARCHAR(80), middle_name VARCHAR(40), last_name VARCHAR(40), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), ssn VARCHAR(40), date_first_registered DATETIME, date_left DATETIME, other_student_details VARCHAR(255) ); Sample rows from `students`: (1, 10, 15, Tim;
CREATE TABLE `cartoon` ( id REAL PRIMARY KEY, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `cartoon`: (1.0, The Rise of the Blue Beetle!, Ben Jones, Michael Jelenic, November14,2008, 101.0, 700), (2.0, Terror on Dinosaur Island!, Brandon Vietti, Steven Melching,;
CREATE TABLE `cartoon` ( id REAL PRIMARY KEY, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `cartoon`: (1.0, The Rise of the Blue Beetle!, Ben Jones, Michael Jelenic, November14,2008, 101.0, 700), (2.0, Terror on Dinosaur Island!, Brandon Vietti, Steven Melching,;
CREATE TABLE `cartoon` ( id REAL PRIMARY KEY, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `cartoon`: (1.0, The Rise of the Blue Beetle!, Ben Jones, Michael Jelenic, November14,2008, 101.0, 700), (2.0, Terror on Dinosaur Island!, Brandon Vietti, Steven Melching,;
CREATE TABLE `cartoon` ( id REAL PRIMARY KEY, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `cartoon`: (1.0, The Rise of the Blue Beetle!, Ben Jones, Michael Jelenic, November14,2008, 101.0, 700), (2.0, Terror on Dinosaur Island!, Brandon Vietti, Steven Melching,;
CREATE TABLE `cartoon` ( id REAL PRIMARY KEY, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `cartoon`: (1.0, The Rise of the Blue Beetle!, Ben Jones, Michael Jelenic, November14,2008, 101.0, 700), (2.0, Terror on Dinosaur Island!, Brandon Vietti, Steven Melching,;
CREATE TABLE `cartoon` ( id REAL PRIMARY KEY, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `cartoon`: (1.0, The Rise of the Blue Beetle!, Ben Jones, Michael Jelenic, November14,2008, 101.0, 700), (2.0, Terror on Dinosaur Island!, Brandon Vietti, Steven Melching,;
CREATE TABLE `cartoon` ( id REAL PRIMARY KEY, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `cartoon`: (1.0, The Rise of the Blue Beetle!, Ben Jones, Michael Jelenic, November14,2008, 101.0, 700), (2.0, Terror on Dinosaur Island!, Brandon Vietti, Steven Melching,;
CREATE TABLE `cartoon` ( id REAL PRIMARY KEY, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `cartoon`: (1.0, The Rise of the Blue Beetle!, Ben Jones, Michael Jelenic, November14,2008, 101.0, 700), (2.0, Terror on Dinosaur Island!, Brandon Vietti, Steven Melching,;
CREATE TABLE `cartoon` ( id REAL PRIMARY KEY, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `cartoon`: (1.0, The Rise of the Blue Beetle!, Ben Jones, Michael Jelenic, November14,2008, 101.0, 700), (2.0, Terror on Dinosaur Island!, Brandon Vietti, Steven Melching,;
CREATE TABLE `cartoon` ( id REAL PRIMARY KEY, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `cartoon`: (1.0, The Rise of the Blue Beetle!, Ben Jones, Michael Jelenic, November14,2008, 101.0, 700), (2.0, Terror on Dinosaur Island!, Brandon Vietti, Steven Melching,;
CREATE TABLE `TV_Channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `TV_Channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `tv_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `tv_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `tv_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `tv_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `TV_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `TV_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `TV_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `TV_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `TV_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `TV_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `TV_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `TV_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `tv_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `tv_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `TV_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `TV_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `tv_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `tv_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `tv_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `tv_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `TV_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `TV_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `TV_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `TV_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `tv_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `tv_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `tv_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `tv_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `tv_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `tv_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `cartoon` ( id REAL PRIMARY KEY, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `cartoon`: (1.0, The Rise of the Blue Beetle!, Ben Jones, Michael Jelenic, November14,2008, 101.0, 700), (2.0, Terror on Dinosaur Island!, Brandon Vietti, Steven Melching,;
CREATE TABLE `cartoon` ( id REAL PRIMARY KEY, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `cartoon`: (1.0, The Rise of the Blue Beetle!, Ben Jones, Michael Jelenic, November14,2008, 101.0, 700), (2.0, Terror on Dinosaur Island!, Brandon Vietti, Steven Melching,;
CREATE TABLE `tv_series` ( id REAL PRIMARY KEY, Episode TEXT, Air_Date TEXT, Rating TEXT, Share REAL, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `tv_series`: (1.0, A Love of a Lifetime, September 24, 2007, 5.8, 9.0, 3.5/9, 9.16;
CREATE TABLE `tv_series` ( id REAL PRIMARY KEY, Episode TEXT, Air_Date TEXT, Rating TEXT, Share REAL, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `tv_series`: (1.0, A Love of a Lifetime, September 24, 2007, 5.8, 9.0, 3.5/9, 9.16;
CREATE TABLE `tv_series` ( id REAL PRIMARY KEY, Episode TEXT, Air_Date TEXT, Rating TEXT, Share REAL, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `tv_series`: (1.0, A Love of a Lifetime, September 24, 2007, 5.8, 9.0, 3.5/9, 9.16;
CREATE TABLE `tv_series` ( id REAL PRIMARY KEY, Episode TEXT, Air_Date TEXT, Rating TEXT, Share REAL, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `tv_series`: (1.0, A Love of a Lifetime, September 24, 2007, 5.8, 9.0, 3.5/9, 9.16;
CREATE TABLE `tv_series` ( id REAL PRIMARY KEY, Episode TEXT, Air_Date TEXT, Rating TEXT, Share REAL, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `tv_series`: (1.0, A Love of a Lifetime, September 24, 2007, 5.8, 9.0, 3.5/9, 9.16;
CREATE TABLE `tv_series` ( id REAL PRIMARY KEY, Episode TEXT, Air_Date TEXT, Rating TEXT, Share REAL, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `tv_series`: (1.0, A Love of a Lifetime, September 24, 2007, 5.8, 9.0, 3.5/9, 9.16;
CREATE TABLE `tv_series` ( id REAL PRIMARY KEY, Episode TEXT, Air_Date TEXT, Rating TEXT, Share REAL, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `tv_series`: (1.0, A Love of a Lifetime, September 24, 2007, 5.8, 9.0, 3.5/9, 9.16;
CREATE TABLE `tv_series` ( id REAL PRIMARY KEY, Episode TEXT, Air_Date TEXT, Rating TEXT, Share REAL, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `tv_series`: (1.0, A Love of a Lifetime, September 24, 2007, 5.8, 9.0, 3.5/9, 9.16;
CREATE TABLE `tv_series` ( id REAL PRIMARY KEY, Episode TEXT, Air_Date TEXT, Rating TEXT, Share REAL, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `tv_series`: (1.0, A Love of a Lifetime, September 24, 2007, 5.8, 9.0, 3.5/9, 9.16;
CREATE TABLE `tv_series` ( id REAL PRIMARY KEY, Episode TEXT, Air_Date TEXT, Rating TEXT, Share REAL, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `tv_series`: (1.0, A Love of a Lifetime, September 24, 2007, 5.8, 9.0, 3.5/9, 9.16;
CREATE TABLE `tv_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `tv_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `tv_series` ( id REAL PRIMARY KEY, Episode TEXT, Air_Date TEXT, Rating TEXT, Share REAL, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `tv_series`: (1.0, A Love of a Lifetime, September 24, 2007, 5.8, 9.0, 3.5/9, 9.16;
CREATE TABLE `tv_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `tv_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `tv_series` ( id REAL PRIMARY KEY, Episode TEXT, Air_Date TEXT, Rating TEXT, Share REAL, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `tv_series`: (1.0, A Love of a Lifetime, September 24, 2007, 5.8, 9.0, 3.5/9, 9.16;
CREATE TABLE `cartoon` ( id REAL PRIMARY KEY, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `cartoon`: (1.0, The Rise of the Blue Beetle!, Ben Jones, Michael Jelenic, November14,2008, 101.0, 700), (2.0, Terror on Dinosaur Island!, Brandon Vietti, Steven Melching,;
CREATE TABLE `cartoon` ( id REAL PRIMARY KEY, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `cartoon`: (1.0, The Rise of the Blue Beetle!, Ben Jones, Michael Jelenic, November14,2008, 101.0, 700), (2.0, Terror on Dinosaur Island!, Brandon Vietti, Steven Melching,;
CREATE TABLE `cartoon` ( id REAL PRIMARY KEY, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `cartoon`: (1.0, The Rise of the Blue Beetle!, Ben Jones, Michael Jelenic, November14,2008, 101.0, 700), (2.0, Terror on Dinosaur Island!, Brandon Vietti, Steven Melching,;
CREATE TABLE `cartoon` ( id REAL PRIMARY KEY, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `cartoon`: (1.0, The Rise of the Blue Beetle!, Ben Jones, Michael Jelenic, November14,2008, 101.0, 700), (2.0, Terror on Dinosaur Island!, Brandon Vietti, Steven Melching,;
CREATE TABLE `TV_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `TV_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `TV_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `TV_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `tv_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `tv_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `cartoon` ( id REAL PRIMARY KEY, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code REAL, Channel TEXT REFERENCES TV_Channel(id) ); Sample rows from `cartoon`: (1.0, The Rise of the Blue Beetle!, Ben Jones, Michael Jelenic, November14,2008, 101.0, 700), (2.0, Terror on Dinosaur Island!, Brandon Vietti, Steven Melching,;
CREATE TABLE `tv_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `tv_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `tv_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `tv_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `tv_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `tv_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `tv_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `tv_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `TV_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `TV_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `tv_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `tv_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `TV_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `TV_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `TV_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `TV_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `tv_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `tv_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `tv_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `tv_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `tv_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `tv_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `tv_channel` ( id TEXT PRIMARY KEY, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT ); Sample rows from `tv_channel`: (700, Sky Radio, Italy, Italian, music, 4:3, no, no, Sky Famiglia), (701, Sky Music, Italy, Italian, music, 4:3, no,;
CREATE TABLE `poker_player` ( Poker_Player_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Final_Table_Made REAL, Best_Finish REAL, Money_Rank REAL, Earnings REAL ); Sample rows from `poker_player`: (1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0;
CREATE TABLE `poker_player` ( Poker_Player_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Final_Table_Made REAL, Best_Finish REAL, Money_Rank REAL, Earnings REAL ); Sample rows from `poker_player`: (1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0;
CREATE TABLE `poker_player` ( Poker_Player_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Final_Table_Made REAL, Best_Finish REAL, Money_Rank REAL, Earnings REAL ); Sample rows from `poker_player`: (1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0;
CREATE TABLE `poker_player` ( Poker_Player_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Final_Table_Made REAL, Best_Finish REAL, Money_Rank REAL, Earnings REAL ); Sample rows from `poker_player`: (1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0;
CREATE TABLE `poker_player` ( Poker_Player_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Final_Table_Made REAL, Best_Finish REAL, Money_Rank REAL, Earnings REAL ); Sample rows from `poker_player`: (1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0;
CREATE TABLE `poker_player` ( Poker_Player_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Final_Table_Made REAL, Best_Finish REAL, Money_Rank REAL, Earnings REAL ); Sample rows from `poker_player`: (1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0;
CREATE TABLE `poker_player` ( Poker_Player_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Final_Table_Made REAL, Best_Finish REAL, Money_Rank REAL, Earnings REAL ); Sample rows from `poker_player`: (1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0;
CREATE TABLE `poker_player` ( Poker_Player_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Final_Table_Made REAL, Best_Finish REAL, Money_Rank REAL, Earnings REAL ); Sample rows from `poker_player`: (1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0;
CREATE TABLE `poker_player` ( Poker_Player_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Final_Table_Made REAL, Best_Finish REAL, Money_Rank REAL, Earnings REAL ); Sample rows from `poker_player`: (1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0;
CREATE TABLE `poker_player` ( Poker_Player_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Final_Table_Made REAL, Best_Finish REAL, Money_Rank REAL, Earnings REAL ); Sample rows from `poker_player`: (1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0;
CREATE TABLE `poker_player` ( Poker_Player_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Final_Table_Made REAL, Best_Finish REAL, Money_Rank REAL, Earnings REAL ); Sample rows from `poker_player`: (1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0;
CREATE TABLE `poker_player` ( Poker_Player_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Final_Table_Made REAL, Best_Finish REAL, Money_Rank REAL, Earnings REAL ); Sample rows from `poker_player`: (1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0;
CREATE TABLE `poker_player` ( Poker_Player_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Final_Table_Made REAL, Best_Finish REAL, Money_Rank REAL, Earnings REAL ); Sample rows from `poker_player`: (1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0;
CREATE TABLE `poker_player` ( Poker_Player_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Final_Table_Made REAL, Best_Finish REAL, Money_Rank REAL, Earnings REAL ); Sample rows from `poker_player`: (1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0;
CREATE TABLE `poker_player` ( Poker_Player_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Final_Table_Made REAL, Best_Finish REAL, Money_Rank REAL, Earnings REAL ); Sample rows from `poker_player`: (1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0;
CREATE TABLE `poker_player` ( Poker_Player_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Final_Table_Made REAL, Best_Finish REAL, Money_Rank REAL, Earnings REAL ); Sample rows from `poker_player`: (1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0;
CREATE TABLE `poker_player` ( Poker_Player_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Final_Table_Made REAL, Best_Finish REAL, Money_Rank REAL, Earnings REAL ); Sample rows from `poker_player`: (1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0;
CREATE TABLE `poker_player` ( Poker_Player_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Final_Table_Made REAL, Best_Finish REAL, Money_Rank REAL, Earnings REAL ); Sample rows from `poker_player`: (1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0;
CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height REAL ); Sample rows from `people`: (1, Russia, Aleksey Ostapenko, May 26, 1986, 207.0), (2, Bulgaria, Teodor Salparov, August 16, 1982, 182.0), (3, Russia, Roman Bragin, April 17, 1987, ;
CREATE TABLE `poker_player` ( Poker_Player_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Final_Table_Made REAL, Best_Finish REAL, Money_Rank REAL, Earnings REAL ); Sample rows from `poker_player`: (1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0;
CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height REAL ); Sample rows from `people`: (1, Russia, Aleksey Ostapenko, May 26, 1986, 207.0), (2, Bulgaria, Teodor Salparov, August 16, 1982, 182.0), (3, Russia, Roman Bragin, April 17, 1987, ;
CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height REAL ); Sample rows from `people`: (1, Russia, Aleksey Ostapenko, May 26, 1986, 207.0), (2, Bulgaria, Teodor Salparov, August 16, 1982, 182.0), (3, Russia, Roman Bragin, April 17, 1987, ;
CREATE TABLE `poker_player` ( Poker_Player_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Final_Table_Made REAL, Best_Finish REAL, Money_Rank REAL, Earnings REAL ); Sample rows from `poker_player`: (1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0;
CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height REAL ); Sample rows from `people`: (1, Russia, Aleksey Ostapenko, May 26, 1986, 207.0), (2, Bulgaria, Teodor Salparov, August 16, 1982, 182.0), (3, Russia, Roman Bragin, April 17, 1987, ;
CREATE TABLE `poker_player` ( Poker_Player_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Final_Table_Made REAL, Best_Finish REAL, Money_Rank REAL, Earnings REAL ); Sample rows from `poker_player`: (1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0;
CREATE TABLE `poker_player` ( Poker_Player_ID INT PRIMARY KEY, People_ID INT REFERENCES people(People_ID), Final_Table_Made REAL, Best_Finish REAL, Money_Rank REAL, Earnings REAL ); Sample rows from `poker_player`: (1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0;
CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height REAL ); Sample rows from `people`: (1, Russia, Aleksey Ostapenko, May 26, 1986, 207.0), (2, Bulgaria, Teodor Salparov, August 16, 1982, 182.0), (3, Russia, Roman Bragin, April 17, 1987, ;
CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height REAL ); Sample rows from `people`: (1, Russia, Aleksey Ostapenko, May 26, 1986, 207.0), (2, Bulgaria, Teodor Salparov, August 16, 1982, 182.0), (3, Russia, Roman Bragin, April 17, 1987, ;
CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height REAL ); Sample rows from `people`: (1, Russia, Aleksey Ostapenko, May 26, 1986, 207.0), (2, Bulgaria, Teodor Salparov, August 16, 1982, 182.0), (3, Russia, Roman Bragin, April 17, 1987, ;
CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height REAL ); Sample rows from `people`: (1, Russia, Aleksey Ostapenko, May 26, 1986, 207.0), (2, Bulgaria, Teodor Salparov, August 16, 1982, 182.0), (3, Russia, Roman Bragin, April 17, 1987, ;
CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height REAL ); Sample rows from `people`: (1, Russia, Aleksey Ostapenko, May 26, 1986, 207.0), (2, Bulgaria, Teodor Salparov, August 16, 1982, 182.0), (3, Russia, Roman Bragin, April 17, 1987, ;
CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height REAL ); Sample rows from `people`: (1, Russia, Aleksey Ostapenko, May 26, 1986, 207.0), (2, Bulgaria, Teodor Salparov, August 16, 1982, 182.0), (3, Russia, Roman Bragin, April 17, 1987, ;
CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height REAL ); Sample rows from `people`: (1, Russia, Aleksey Ostapenko, May 26, 1986, 207.0), (2, Bulgaria, Teodor Salparov, August 16, 1982, 182.0), (3, Russia, Roman Bragin, April 17, 1987, ;
CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height REAL ); Sample rows from `people`: (1, Russia, Aleksey Ostapenko, May 26, 1986, 207.0), (2, Bulgaria, Teodor Salparov, August 16, 1982, 182.0), (3, Russia, Roman Bragin, April 17, 1987, ;
CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height REAL ); Sample rows from `people`: (1, Russia, Aleksey Ostapenko, May 26, 1986, 207.0), (2, Bulgaria, Teodor Salparov, August 16, 1982, 182.0), (3, Russia, Roman Bragin, April 17, 1987, ;
CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height REAL ); Sample rows from `people`: (1, Russia, Aleksey Ostapenko, May 26, 1986, 207.0), (2, Bulgaria, Teodor Salparov, August 16, 1982, 182.0), (3, Russia, Roman Bragin, April 17, 1987, ;
CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height REAL ); Sample rows from `people`: (1, Russia, Aleksey Ostapenko, May 26, 1986, 207.0), (2, Bulgaria, Teodor Salparov, August 16, 1982, 182.0), (3, Russia, Roman Bragin, April 17, 1987, ;
CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height REAL ); Sample rows from `people`: (1, Russia, Aleksey Ostapenko, May 26, 1986, 207.0), (2, Bulgaria, Teodor Salparov, August 16, 1982, 182.0), (3, Russia, Roman Bragin, April 17, 1987, ;
CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height REAL ); Sample rows from `people`: (1, Russia, Aleksey Ostapenko, May 26, 1986, 207.0), (2, Bulgaria, Teodor Salparov, August 16, 1982, 182.0), (3, Russia, Roman Bragin, April 17, 1987, ;
CREATE TABLE `people` ( People_ID INT PRIMARY KEY, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height REAL ); Sample rows from `people`: (1, Russia, Aleksey Ostapenko, May 26, 1986, 207.0), (2, Bulgaria, Teodor Salparov, August 16, 1982, 182.0), (3, Russia, Roman Bragin, April 17, 1987, ;
CREATE TABLE `area_code_state` ( area_code INTEGER, state varchar(2) ); Sample rows from `area_code_state`: (201, NJ), (202, DC), (203, CT), ;
CREATE TABLE `contestants` ( contestant_number INTEGER, contestant_name varchar(50) ); Sample rows from `contestants`: (1, Edwina Burnam), (2, Tabatha Gehling), (3, Kelly Clauss), ;
CREATE TABLE `votes` ( vote_id INTEGER, phone_number INTEGER PRIMARY KEY, state varchar(2) REFERENCES AREA_CODE_STATE(state), contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number), created timestamp ); Sample rows from `votes`: (1, 7182887233, NY, 2, 2018-03-09 19:03:21), (2, 7148407040, NY, 3, 2018-03-09 19:;
CREATE TABLE `area_code_state` ( area_code INTEGER, state varchar(2) ); Sample rows from `area_code_state`: (201, NJ), (202, DC), (203, CT), ;
CREATE TABLE `votes` ( vote_id INTEGER, phone_number INTEGER PRIMARY KEY, state varchar(2) REFERENCES AREA_CODE_STATE(state), contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number), created timestamp ); Sample rows from `votes`: (1, 7182887233, NY, 2, 2018-03-09 19:03:21), (2, 7148407040, NY, 3, 2018-03-09 19:;
CREATE TABLE `contestants` ( contestant_number INTEGER, contestant_name varchar(50) ); Sample rows from `contestants`: (1, Edwina Burnam), (2, Tabatha Gehling), (3, Kelly Clauss), ;
CREATE TABLE `votes` ( vote_id INTEGER, phone_number INTEGER PRIMARY KEY, state varchar(2) REFERENCES AREA_CODE_STATE(state), contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number), created timestamp ); Sample rows from `votes`: (1, 7182887233, NY, 2, 2018-03-09 19:03:21), (2, 7148407040, NY, 3, 2018-03-09 19:;
CREATE TABLE `votes` ( vote_id INTEGER, phone_number INTEGER PRIMARY KEY, state varchar(2) REFERENCES AREA_CODE_STATE(state), contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number), created timestamp ); Sample rows from `votes`: (1, 7182887233, NY, 2, 2018-03-09 19:03:21), (2, 7148407040, NY, 3, 2018-03-09 19:;
CREATE TABLE `votes` ( vote_id INTEGER, phone_number INTEGER PRIMARY KEY, state varchar(2) REFERENCES AREA_CODE_STATE(state), contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number), created timestamp ); Sample rows from `votes`: (1, 7182887233, NY, 2, 2018-03-09 19:03:21), (2, 7148407040, NY, 3, 2018-03-09 19:;
CREATE TABLE `votes` ( vote_id INTEGER, phone_number INTEGER PRIMARY KEY, state varchar(2) REFERENCES AREA_CODE_STATE(state), contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number), created timestamp ); Sample rows from `votes`: (1, 7182887233, NY, 2, 2018-03-09 19:03:21), (2, 7148407040, NY, 3, 2018-03-09 19:;
CREATE TABLE `contestants` ( contestant_number INTEGER, contestant_name varchar(50) ); Sample rows from `contestants`: (1, Edwina Burnam), (2, Tabatha Gehling), (3, Kelly Clauss), CREATE TABLE `votes` ( vote_id INTEGER, phone_number INTEGER PRIMARY KEY, state varchar(2) REFERENCES AREA_CODE_STATE(state), contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number), created timestamp ); Sample rows from `votes`: (1,;
CREATE TABLE `area_code_state` ( area_code INTEGER, state varchar(2) ); Sample rows from `area_code_state`: (201, NJ), (202, DC), (203, CT), CREATE TABLE `votes` ( vote_id INTEGER, phone_number INTEGER PRIMARY KEY, state varchar(2) REFERENCES AREA_CODE_STATE(state), contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number), created timestamp ); Sample rows from `votes`: (1, 7182887233, NY,;
CREATE TABLE `votes` ( vote_id INTEGER, phone_number INTEGER PRIMARY KEY, state varchar(2) REFERENCES AREA_CODE_STATE(state), contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number), created timestamp ); Sample rows from `votes`: (1, 7182887233, NY, 2, 2018-03-09 19:03:21), (2, 7148407040, NY, 3, 2018-03-09 19:;
CREATE TABLE `votes` ( vote_id INTEGER, phone_number INTEGER PRIMARY KEY, state varchar(2) REFERENCES AREA_CODE_STATE(state), contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number), created timestamp ); Sample rows from `votes`: (1, 7182887233, NY, 2, 2018-03-09 19:03:21), (2, 7148407040, NY, 3, 2018-03-09 19:;
CREATE TABLE `contestants` ( contestant_number INTEGER, contestant_name varchar(50) ); Sample rows from `contestants`: (1, Edwina Burnam), (2, Tabatha Gehling), (3, Kelly Clauss), ;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `city` ( ID INTEGER, Name char(35), CountryCode char(3) PRIMARY KEY REFERENCES country(Code), District char(20), Population INTEGER ); Sample rows from `city`: (1, Kabul, AFG, Kabol, 1780000), (2, Qandahar, AFG, Qandahar, 237500), (3, Herat, AFG, Herat, 186800), ;
CREATE TABLE `city` ( ID INTEGER, Name char(35), CountryCode char(3) PRIMARY KEY REFERENCES country(Code), District char(20), Population INTEGER ); Sample rows from `city`: (1, Kabul, AFG, Kabol, 1780000), (2, Qandahar, AFG, Qandahar, 237500), (3, Herat, AFG, Herat, 186800), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), CREATE TABLE `country` ( Code char(3) PRIMARY KEY;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), CREATE TABLE `country` ( Code char(3) PRIMARY KEY;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), CREATE TABLE `country` ( Code char(3) PRIMARY KEY;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `city` ( ID INTEGER, Name char(35), CountryCode char(3) PRIMARY KEY REFERENCES country(Code), District char(20), Population INTEGER ); Sample rows from `city`: (1, Kabul, AFG, Kabol, 1780000), (2, Qandahar, AFG, Qandahar, 237500), (3, Herat, AFG, Herat, 186800), ;
CREATE TABLE `city` ( ID INTEGER, Name char(35), CountryCode char(3) PRIMARY KEY REFERENCES country(Code), District char(20), Population INTEGER ); Sample rows from `city`: (1, Kabul, AFG, Kabol, 1780000), (2, Qandahar, AFG, Qandahar, 237500), (3, Herat, AFG, Herat, 186800), ;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), CREATE TABLE `country` ( Code char(3) PRIMARY KEY;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), CREATE TABLE `country` ( Code char(3) PRIMARY KEY;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), CREATE TABLE `country` ( Code char(3) PRIMARY KEY;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), CREATE TABLE `country` ( Code char(3) PRIMARY KEY;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), CREATE TABLE `country` ( Code char(3) PRIMARY KEY;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `city` ( ID INTEGER, Name char(35), CountryCode char(3) PRIMARY KEY REFERENCES country(Code), District char(20), Population INTEGER ); Sample rows from `city`: (1, Kabul, AFG, Kabol, 1780000), (2, Qandahar, AFG, Qandahar, 237500), (3, Herat, AFG, Herat, 186800), CREATE TABLE `countrylanguage` ( Country;
CREATE TABLE `city` ( ID INTEGER, Name char(35), CountryCode char(3) PRIMARY KEY REFERENCES country(Code), District char(20), Population INTEGER ); Sample rows from `city`: (1, Kabul, AFG, Kabol, 1780000), (2, Qandahar, AFG, Qandahar, 237500), (3, Herat, AFG, Herat, 186800), CREATE TABLE `countrylanguage` ( Country;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), CREATE TABLE `country` ( Code char(3) PRIMARY KEY;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), CREATE TABLE `country` ( Code char(3) PRIMARY KEY;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), CREATE TABLE `country` ( Code char(3) PRIMARY KEY;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), CREATE TABLE `country` ( Code char(3) PRIMARY KEY;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), CREATE TABLE `country` ( Code char(3) PRIMARY KEY;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), CREATE TABLE `country` ( Code char(3) PRIMARY KEY;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), CREATE TABLE `country` ( Code char(3) PRIMARY KEY;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), CREATE TABLE `country` ( Code char(3) PRIMARY KEY;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), CREATE TABLE `country` ( Code char(3) PRIMARY KEY;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), CREATE TABLE `country` ( Code char(3) PRIMARY KEY;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), CREATE TABLE `country` ( Code char(3) PRIMARY KEY;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), CREATE TABLE `country` ( Code char(3) PRIMARY KEY;
CREATE TABLE `city` ( ID INTEGER, Name char(35), CountryCode char(3) PRIMARY KEY REFERENCES country(Code), District char(20), Population INTEGER ); Sample rows from `city`: (1, Kabul, AFG, Kabol, 1780000), (2, Qandahar, AFG, Qandahar, 237500), (3, Herat, AFG, Herat, 186800), CREATE TABLE `countrylanguage` ( Country;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), CREATE TABLE `country` ( Code char(3) PRIMARY KEY;
CREATE TABLE `city` ( ID INTEGER, Name char(35), CountryCode char(3) PRIMARY KEY REFERENCES country(Code), District char(20), Population INTEGER ); Sample rows from `city`: (1, Kabul, AFG, Kabol, 1780000), (2, Qandahar, AFG, Qandahar, 237500), (3, Herat, AFG, Herat, 186800), CREATE TABLE `countrylanguage` ( Country;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `city` ( ID INTEGER, Name char(35), CountryCode char(3) PRIMARY KEY REFERENCES country(Code), District char(20), Population INTEGER ); Sample rows from `city`: (1, Kabul, AFG, Kabol, 1780000), (2, Qandahar, AFG, Qandahar, 237500), (3, Herat, AFG, Herat, 186800), ;
CREATE TABLE `city` ( ID INTEGER, Name char(35), CountryCode char(3) PRIMARY KEY REFERENCES country(Code), District char(20), Population INTEGER ); Sample rows from `city`: (1, Kabul, AFG, Kabol, 1780000), (2, Qandahar, AFG, Qandahar, 237500), (3, Herat, AFG, Herat, 186800), ;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `country` ( Code char(3) PRIMARY KEY, Name char(52), Continent TEXT, Region char(26), SurfaceArea float(10,2), IndepYear INTEGER, Population INTEGER, LifeExpectancy float(3,1), GNP float(10,2), GNPOld float(10,2), LocalName char(45), GovernmentForm char(45), HeadOfState char(60), Capital INTEGER, Code2 char(2) ); Sample rows;
CREATE TABLE `city` ( ID INTEGER, Name char(35), CountryCode char(3) PRIMARY KEY REFERENCES country(Code), District char(20), Population INTEGER ); Sample rows from `city`: (1, Kabul, AFG, Kabol, 1780000), (2, Qandahar, AFG, Qandahar, 237500), (3, Herat, AFG, Herat, 186800), ;
CREATE TABLE `city` ( ID INTEGER, Name char(35), CountryCode char(3) PRIMARY KEY REFERENCES country(Code), District char(20), Population INTEGER ); Sample rows from `city`: (1, Kabul, AFG, Kabol, 1780000), (2, Qandahar, AFG, Qandahar, 237500), (3, Herat, AFG, Herat, 186800), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `countrylanguage` ( CountryCode char(3) PRIMARY KEY REFERENCES country(Code), Language char(30) PRIMARY KEY, IsOfficial TEXT, Percentage float(4,1) ); Sample rows from `countrylanguage`: (ABW, Dutch, T, 5.3), (ABW, English, F, 9.5), (ABW, Papiamento, F, 76.7), ;
CREATE TABLE `conductor` ( Conductor_ID INT PRIMARY KEY, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT ); Sample rows from `conductor`: (1, Antal Doráti, 40, USA, 10), (2, Igor Stravinsky, 41, UK, 11), (3, Colin Davis, 42, USA, 6), ;
CREATE TABLE `conductor` ( Conductor_ID INT PRIMARY KEY, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT ); Sample rows from `conductor`: (1, Antal Doráti, 40, USA, 10), (2, Igor Stravinsky, 41, UK, 11), (3, Colin Davis, 42, USA, 6), ;
CREATE TABLE `conductor` ( Conductor_ID INT PRIMARY KEY, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT ); Sample rows from `conductor`: (1, Antal Doráti, 40, USA, 10), (2, Igor Stravinsky, 41, UK, 11), (3, Colin Davis, 42, USA, 6), ;
CREATE TABLE `conductor` ( Conductor_ID INT PRIMARY KEY, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT ); Sample rows from `conductor`: (1, Antal Doráti, 40, USA, 10), (2, Igor Stravinsky, 41, UK, 11), (3, Colin Davis, 42, USA, 6), ;
CREATE TABLE `conductor` ( Conductor_ID INT PRIMARY KEY, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT ); Sample rows from `conductor`: (1, Antal Doráti, 40, USA, 10), (2, Igor Stravinsky, 41, UK, 11), (3, Colin Davis, 42, USA, 6), ;
CREATE TABLE `conductor` ( Conductor_ID INT PRIMARY KEY, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT ); Sample rows from `conductor`: (1, Antal Doráti, 40, USA, 10), (2, Igor Stravinsky, 41, UK, 11), (3, Colin Davis, 42, USA, 6), ;
CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT, Conductor_ID INT REFERENCES conductor(Conductor_ID), Record_Company TEXT, Year_of_Founded REAL, Major_Record_Format TEXT ); Sample rows from `orchestra`: (1, London Symphony Orchestra, 1, Mercury Records, 2003.0, CD), (2, Columbia Symphony Orchestra, 2, Columbia Masterworks, 2009.0, CD / LP), (3,;
CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT, Conductor_ID INT REFERENCES conductor(Conductor_ID), Record_Company TEXT, Year_of_Founded REAL, Major_Record_Format TEXT ); Sample rows from `orchestra`: (1, London Symphony Orchestra, 1, Mercury Records, 2003.0, CD), (2, Columbia Symphony Orchestra, 2, Columbia Masterworks, 2009.0, CD / LP), (3,;
CREATE TABLE `show` ( Show_ID INT, Performance_ID INT REFERENCES performance(Performance_ID), If_first_show bool, Result TEXT, Attendance REAL ); Sample rows from `show`: (1, 1, Glebe Park, T, 1026.0), (2, 2, Fir Park, T, 695.0), (3, 3, St. Mirren Park, F, 555.0), ;
CREATE TABLE `show` ( Show_ID INT, Performance_ID INT REFERENCES performance(Performance_ID), If_first_show bool, Result TEXT, Attendance REAL ); Sample rows from `show`: (1, 1, Glebe Park, T, 1026.0), (2, 2, Fir Park, T, 695.0), (3, 3, St. Mirren Park, F, 555.0), ;
CREATE TABLE `performance` ( Performance_ID INT PRIMARY KEY, Orchestra_ID INT REFERENCES orchestra(Orchestra_ID), Type TEXT, Date TEXT, Official_ratings_(millions) REAL, Weekly_rank TEXT, Share TEXT ); Sample rows from `performance`: (1, 1, Auditions 1, 9 June, 5.2, 12, 22.7%), (2, 2, Auditions 2, 10 June, 6.73, 8,;
CREATE TABLE `performance` ( Performance_ID INT PRIMARY KEY, Orchestra_ID INT REFERENCES orchestra(Orchestra_ID), Type TEXT, Date TEXT, Official_ratings_(millions) REAL, Weekly_rank TEXT, Share TEXT ); Sample rows from `performance`: (1, 1, Auditions 1, 9 June, 5.2, 12, 22.7%), (2, 2, Auditions 2, 10 June, 6.73, 8,;
CREATE TABLE `conductor` ( Conductor_ID INT PRIMARY KEY, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT ); Sample rows from `conductor`: (1, Antal Doráti, 40, USA, 10), (2, Igor Stravinsky, 41, UK, 11), (3, Colin Davis, 42, USA, 6), ;
CREATE TABLE `conductor` ( Conductor_ID INT PRIMARY KEY, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT ); Sample rows from `conductor`: (1, Antal Doráti, 40, USA, 10), (2, Igor Stravinsky, 41, UK, 11), (3, Colin Davis, 42, USA, 6), ;
CREATE TABLE `conductor` ( Conductor_ID INT PRIMARY KEY, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT ); Sample rows from `conductor`: (1, Antal Doráti, 40, USA, 10), (2, Igor Stravinsky, 41, UK, 11), (3, Colin Davis, 42, USA, 6), ;
CREATE TABLE `conductor` ( Conductor_ID INT PRIMARY KEY, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT ); Sample rows from `conductor`: (1, Antal Doráti, 40, USA, 10), (2, Igor Stravinsky, 41, UK, 11), (3, Colin Davis, 42, USA, 6), ;
CREATE TABLE `conductor` ( Conductor_ID INT PRIMARY KEY, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT ); Sample rows from `conductor`: (1, Antal Doráti, 40, USA, 10), (2, Igor Stravinsky, 41, UK, 11), (3, Colin Davis, 42, USA, 6), ;
CREATE TABLE `conductor` ( Conductor_ID INT PRIMARY KEY, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT ); Sample rows from `conductor`: (1, Antal Doráti, 40, USA, 10), (2, Igor Stravinsky, 41, UK, 11), (3, Colin Davis, 42, USA, 6), ;
CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT, Conductor_ID INT REFERENCES conductor(Conductor_ID), Record_Company TEXT, Year_of_Founded REAL, Major_Record_Format TEXT ); Sample rows from `orchestra`: (1, London Symphony Orchestra, 1, Mercury Records, 2003.0, CD), (2, Columbia Symphony Orchestra, 2, Columbia Masterworks, 2009.0, CD / LP), (3,;
CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT, Conductor_ID INT REFERENCES conductor(Conductor_ID), Record_Company TEXT, Year_of_Founded REAL, Major_Record_Format TEXT ); Sample rows from `orchestra`: (1, London Symphony Orchestra, 1, Mercury Records, 2003.0, CD), (2, Columbia Symphony Orchestra, 2, Columbia Masterworks, 2009.0, CD / LP), (3,;
CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT, Conductor_ID INT REFERENCES conductor(Conductor_ID), Record_Company TEXT, Year_of_Founded REAL, Major_Record_Format TEXT ); Sample rows from `orchestra`: (1, London Symphony Orchestra, 1, Mercury Records, 2003.0, CD), (2, Columbia Symphony Orchestra, 2, Columbia Masterworks, 2009.0, CD / LP), (3,;
CREATE TABLE `conductor` ( Conductor_ID INT PRIMARY KEY, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT ); Sample rows from `conductor`: (1, Antal Doráti, 40, USA, 10), (2, Igor Stravinsky, 41, UK, 11), (3, Colin Davis, 42, USA, 6), CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT,;
CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT, Conductor_ID INT REFERENCES conductor(Conductor_ID), Record_Company TEXT, Year_of_Founded REAL, Major_Record_Format TEXT ); Sample rows from `orchestra`: (1, London Symphony Orchestra, 1, Mercury Records, 2003.0, CD), (2, Columbia Symphony Orchestra, 2, Columbia Masterworks, 2009.0, CD / LP), (3,;
CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT, Conductor_ID INT REFERENCES conductor(Conductor_ID), Record_Company TEXT, Year_of_Founded REAL, Major_Record_Format TEXT ); Sample rows from `orchestra`: (1, London Symphony Orchestra, 1, Mercury Records, 2003.0, CD), (2, Columbia Symphony Orchestra, 2, Columbia Masterworks, 2009.0, CD / LP), (3,;
CREATE TABLE `conductor` ( Conductor_ID INT PRIMARY KEY, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT ); Sample rows from `conductor`: (1, Antal Doráti, 40, USA, 10), (2, Igor Stravinsky, 41, UK, 11), (3, Colin Davis, 42, USA, 6), CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT,;
CREATE TABLE `conductor` ( Conductor_ID INT PRIMARY KEY, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT ); Sample rows from `conductor`: (1, Antal Doráti, 40, USA, 10), (2, Igor Stravinsky, 41, UK, 11), (3, Colin Davis, 42, USA, 6), CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT,;
CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT, Conductor_ID INT REFERENCES conductor(Conductor_ID), Record_Company TEXT, Year_of_Founded REAL, Major_Record_Format TEXT ); Sample rows from `orchestra`: (1, London Symphony Orchestra, 1, Mercury Records, 2003.0, CD), (2, Columbia Symphony Orchestra, 2, Columbia Masterworks, 2009.0, CD / LP), (3,;
CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT, Conductor_ID INT REFERENCES conductor(Conductor_ID), Record_Company TEXT, Year_of_Founded REAL, Major_Record_Format TEXT ); Sample rows from `orchestra`: (1, London Symphony Orchestra, 1, Mercury Records, 2003.0, CD), (2, Columbia Symphony Orchestra, 2, Columbia Masterworks, 2009.0, CD / LP), (3,;
CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT, Conductor_ID INT REFERENCES conductor(Conductor_ID), Record_Company TEXT, Year_of_Founded REAL, Major_Record_Format TEXT ); Sample rows from `orchestra`: (1, London Symphony Orchestra, 1, Mercury Records, 2003.0, CD), (2, Columbia Symphony Orchestra, 2, Columbia Masterworks, 2009.0, CD / LP), (3,;
CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT, Conductor_ID INT REFERENCES conductor(Conductor_ID), Record_Company TEXT, Year_of_Founded REAL, Major_Record_Format TEXT ); Sample rows from `orchestra`: (1, London Symphony Orchestra, 1, Mercury Records, 2003.0, CD), (2, Columbia Symphony Orchestra, 2, Columbia Masterworks, 2009.0, CD / LP), (3,;
CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT, Conductor_ID INT REFERENCES conductor(Conductor_ID), Record_Company TEXT, Year_of_Founded REAL, Major_Record_Format TEXT ); Sample rows from `orchestra`: (1, London Symphony Orchestra, 1, Mercury Records, 2003.0, CD), (2, Columbia Symphony Orchestra, 2, Columbia Masterworks, 2009.0, CD / LP), (3,;
CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT, Conductor_ID INT REFERENCES conductor(Conductor_ID), Record_Company TEXT, Year_of_Founded REAL, Major_Record_Format TEXT ); Sample rows from `orchestra`: (1, London Symphony Orchestra, 1, Mercury Records, 2003.0, CD), (2, Columbia Symphony Orchestra, 2, Columbia Masterworks, 2009.0, CD / LP), (3,;
CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT, Conductor_ID INT REFERENCES conductor(Conductor_ID), Record_Company TEXT, Year_of_Founded REAL, Major_Record_Format TEXT ); Sample rows from `orchestra`: (1, London Symphony Orchestra, 1, Mercury Records, 2003.0, CD), (2, Columbia Symphony Orchestra, 2, Columbia Masterworks, 2009.0, CD / LP), (3,;
CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT, Conductor_ID INT REFERENCES conductor(Conductor_ID), Record_Company TEXT, Year_of_Founded REAL, Major_Record_Format TEXT ); Sample rows from `orchestra`: (1, London Symphony Orchestra, 1, Mercury Records, 2003.0, CD), (2, Columbia Symphony Orchestra, 2, Columbia Masterworks, 2009.0, CD / LP), (3,;
CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT, Conductor_ID INT REFERENCES conductor(Conductor_ID), Record_Company TEXT, Year_of_Founded REAL, Major_Record_Format TEXT ); Sample rows from `orchestra`: (1, London Symphony Orchestra, 1, Mercury Records, 2003.0, CD), (2, Columbia Symphony Orchestra, 2, Columbia Masterworks, 2009.0, CD / LP), (3,;
CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT, Conductor_ID INT REFERENCES conductor(Conductor_ID), Record_Company TEXT, Year_of_Founded REAL, Major_Record_Format TEXT ); Sample rows from `orchestra`: (1, London Symphony Orchestra, 1, Mercury Records, 2003.0, CD), (2, Columbia Symphony Orchestra, 2, Columbia Masterworks, 2009.0, CD / LP), (3,;
CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT, Conductor_ID INT REFERENCES conductor(Conductor_ID), Record_Company TEXT, Year_of_Founded REAL, Major_Record_Format TEXT ); Sample rows from `orchestra`: (1, London Symphony Orchestra, 1, Mercury Records, 2003.0, CD), (2, Columbia Symphony Orchestra, 2, Columbia Masterworks, 2009.0, CD / LP), (3,;
CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT, Conductor_ID INT REFERENCES conductor(Conductor_ID), Record_Company TEXT, Year_of_Founded REAL, Major_Record_Format TEXT ); Sample rows from `orchestra`: (1, London Symphony Orchestra, 1, Mercury Records, 2003.0, CD), (2, Columbia Symphony Orchestra, 2, Columbia Masterworks, 2009.0, CD / LP), (3,;
CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT, Conductor_ID INT REFERENCES conductor(Conductor_ID), Record_Company TEXT, Year_of_Founded REAL, Major_Record_Format TEXT ); Sample rows from `orchestra`: (1, London Symphony Orchestra, 1, Mercury Records, 2003.0, CD), (2, Columbia Symphony Orchestra, 2, Columbia Masterworks, 2009.0, CD / LP), (3,;
CREATE TABLE `orchestra` ( Orchestra_ID INT PRIMARY KEY, Orchestra TEXT, Conductor_ID INT REFERENCES conductor(Conductor_ID), Record_Company TEXT, Year_of_Founded REAL, Major_Record_Format TEXT ); Sample rows from `orchestra`: (1, London Symphony Orchestra, 1, Mercury Records, 2003.0, CD), (2, Columbia Symphony Orchestra, 2, Columbia Masterworks, 2009.0, CD / LP), (3,;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), ;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), ;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), ;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), ;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), ;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), ;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), ;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), ;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), ;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), ;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), ;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), ;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), ;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), ;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), ;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), ;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), ;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), ;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), ;
CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510, 1689), (1689, 1709), ;
CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510, 1689), (1689, 1709), ;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510;
CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510, 1689), (1689, 1709), ;
CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510, 1689), (1689, 1709), ;
CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510, 1689), (1689, 1709), CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510;
CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510, 1689), (1689, 1709), CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel;
CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510, 1689), (1689, 1709), CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel;
CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510, 1689), (1689, 1709), ;
CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510, 1689), (1689, 1709), ;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510;
CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510, 1689), (1689, 1709), CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510;
CREATE TABLE `likes` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), liked_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `likes`: (1689, 1709), (1709, 1689), (1782, 1709), ;
CREATE TABLE `likes` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), liked_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `likes`: (1689, 1709), (1709, 1689), (1782, 1709), ;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), CREATE TABLE `likes` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), liked_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `likes`: (1689, 1709), (1709;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), CREATE TABLE `likes` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), liked_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `likes`: (1689, 1709), (1709;
CREATE TABLE `likes` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), liked_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `likes`: (1689, 1709), (1709, 1689), (1782, 1709), CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel;
CREATE TABLE `likes` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), liked_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `likes`: (1689, 1709), (1709, 1689), (1782, 1709), CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel;
CREATE TABLE `likes` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), liked_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `likes`: (1689, 1709), (1709, 1689), (1782, 1709), CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel;
CREATE TABLE `likes` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), liked_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `likes`: (1689, 1709), (1709, 1689), (1782, 1709), CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510;
CREATE TABLE `likes` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), liked_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `likes`: (1689, 1709), (1709, 1689), (1782, 1709), ;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), CREATE TABLE `likes` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), liked_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `likes`: (1689, 1709), (1709;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510;
CREATE TABLE `highschooler` ( ID INT PRIMARY KEY, name TEXT, grade INT ); Sample rows from `highschooler`: (1510, Jordan, 9), (1689, Gabriel, 9), (1381, Tiffany, 9), CREATE TABLE `friend` ( student_id INT PRIMARY KEY REFERENCES Highschooler(ID), friend_id INT PRIMARY KEY REFERENCES Highschooler(ID) ); Sample rows from `friend`: (1510, 1381), (1510;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `dogs` ( dog_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), abandoned_yn VARCHAR(1), breed_code VARCHAR(10) REFERENCES Breeds(breed_code), size_code VARCHAR(10) REFERENCES Sizes(size_code), name VARCHAR(50), age VARCHAR(20), date_of_birth DATETIME, gender VARCHAR(1), weight VARCHAR(20), date_arrived DATETIME, date_adopted DATETIME, date_departed DATETIME ); Sample;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `treatment` ( treatment_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), dog_id INTEGER REFERENCES Dogs(dog_id) REFERENCES Dogs(dog_id), treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code), date_treatment_started DATETIME, date_treatment_ended DATETIME, total_amount DECIMAL(19,4) ); Sample rows from `treatment`: (1, 3, 2, VAC, ;
CREATE TABLE `professional_pets` ( professional_id INTEGER PRIMARY KEY REFERENCES Professionals(professional_id) REFERENCES Professionals(professional_id), dog_id INTEGER PRIMARY KEY REFERENCES Dogs(dog_id) REFERENCES Dogs(dog_id), date_pets_date DATETIME PRIMARY KEY, date_pets_end DATETIME ); Sample rows from `professional_pets`: (10, 6, 2017-09-05 22:04:14, 2018-03-24 10:04:;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `treatment_providers` ( professional_id INTEGER REFERENCES Professionals(professional_id), clinic_id INTEGER REFERENCES Clinics(clinic_id) ); Sample rows from `treatment_providers`: (8, 2), (6, 3), (10, 2), CREATE TABLE `treatments` ( treatment_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id), dog_id INTEGER REFERENCES Dogs(dog_id), treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type;
CREATE TABLE `professional_treatment` ( professional_id INTEGER REFERENCES Professionals(professional_id) REFERENCES Professionals(professional_id), dog_id INTEGER REFERENCES Dogs(dog_id) REFERENCES Dogs(dog_id), treatment_date DATETIME, treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code) ); Sample rows from `professional_treatment`: (5, 3, 2017-09-10 00:38:15, VAC), (10, 14, ;
CREATE TABLE `breeds` ( breed_code VARCHAR(10) PRIMARY KEY, breed_name VARCHAR(80) ); Sample rows from `breeds`: (ESK, Eskimo), (HUS, Husky), (BUL, Bulldog), CREATE TABLE `dogs` ( dog_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), abandoned_yn VARCHAR(1), breed_code VARCHAR(10) REFERENCES Breeds(breed_code), size_code VARCHAR(10);
CREATE TABLE `breeds` ( breed_code VARCHAR(10) PRIMARY KEY, breed_name VARCHAR(80) ); Sample rows from `breeds`: (ESK, Eskimo), (HUS, Husky), (BUL, Bulldog), CREATE TABLE `dogs` ( dog_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), abandoned_yn VARCHAR(1), breed_code VARCHAR(10) REFERENCES Breeds(breed_code), size_code VARCHAR(10);
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `charges` ( charge_id INTEGER, charge_type VARCHAR(10), charge_amount DECIMAL(19,4) ); Sample rows from `charges`: (1, Daily Accommodation, 98), (2, Drugs, 322), (3, Health Check, 640), CREATE TABLE `treatment_types` ( treatment_type_code VARCHAR(10) PRIMARY KEY, treatment_type_description VARCHAR(80) ); Sample rows from `treatment_types`: (EXAM, Physical examination),;
CREATE TABLE `treatment_types` ( treatment_type_code VARCHAR(10) PRIMARY KEY, treatment_type_description VARCHAR(80) ); Sample rows from `treatment_types`: (EXAM, Physical examination), (VAC, Vaccination), (WALK, Take for a Walk), CREATE TABLE `treat_dogs` ( dog_id INTEGER PRIMARY KEY REFERENCES Dogs(dog_id) REFERENCES Dogs(dog_id), treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code), professional;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `professionals` ( professional_id INTEGER, role_code VARCHAR(10), first_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), last_name VARCHAR(50), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `professionals`: (1, Employee, Taryn, 6915 Oberbrunner Point Suite 491 Gleasonville, LA;
CREATE TABLE `professionals` ( professional_id INTEGER, role_code VARCHAR(10), first_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), last_name VARCHAR(50), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `professionals`: (1, Employee, Taryn, 6915 Oberbrunner Point Suite 491 Gleasonville, LA;
CREATE TABLE `professional_dog_owners` ( owner_id INTEGER PRIMARY KEY REFERENCES Owners(owner_id), dog_id INTEGER PRIMARY KEY REFERENCES Dogs(dog_id), date_of_treatment_start DATETIME, date_of_treatment_end DATETIME, total_cost DECIMAL(19,4) ); Sample rows from `professional_dog_owners`: (3, 6, 2017-08-21 00:49:18, 2018-03-25 00:49:18;
CREATE TABLE `treatment` ( treatment_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id), dog_id INTEGER REFERENCES Dogs(dog_id), treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code), date_treatment_started DATETIME, date_treatment_ended DATETIME, total_charge DECIMAL(19,4) ); Sample rows from `treatment`: (1, 6, 2, VAC, 2018-02-28 12:49:;
CREATE TABLE `treatment_by_dog` ( dog_id INTEGER PRIMARY KEY REFERENCES Dogs(dog_id), treatment_type_code VARCHAR(10) PRIMARY KEY REFERENCES Treatment_Types(treatment_type_code), date_treatment_started DATETIME, date_treatment_ended DATETIME ); Sample rows from `treatment_by_dog`: (5, EXAM, 2016-07-16 04:35:33, 2018-03-25 21:43:52), (11;
CREATE TABLE `treatment` ( treatment_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id), dog_id INTEGER REFERENCES Dogs(dog_id), treatment_date DATETIME, treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code), comment VARCHAR(20) ); Sample rows from `treatment`: (1, 3, 2, 2018-03-25 15:00:22, EXAM, None), (2, 11, 1, ;
CREATE TABLE `treatment_types` ( treatment_type_code VARCHAR(10) PRIMARY KEY, treatment_type_description VARCHAR(80) ); Sample rows from `treatment_types`: (EXAM, Physical examination), (VAC, Vaccination), (WALK, Take for a Walk), CREATE TABLE `treatments` ( treatment_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), dog_id INTEGER REFERENCES Dogs(dog_id) REFERENCES Dogs(dog_id), treatment_type_code;
CREATE TABLE `treatment_types` ( treatment_type_code VARCHAR(10) PRIMARY KEY, treatment_type_description VARCHAR(80) ); Sample rows from `treatment_types`: (EXAM, Physical examination), (VAC, Vaccination), (WALK, Take for a Walk), CREATE TABLE `treatments` ( treatment_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), dog_id INTEGER REFERENCES Dogs(dog_id) REFERENCES Dogs(dog_id), treatment_type_code;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `dogs` ( dog_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), abandoned_yn VARCHAR(1), breed_code VARCHAR(10) REFERENCES Breeds(breed_code), size_code VARCHAR(10) REFERENCES Sizes(size_code), name VARCHAR(50), age VARCHAR(20), date_of_birth DATETIME, gender VARCHAR(1), weight VARCHAR(20), date_arrived DATETIME, date_adopted DATETIME, date_departed DATETIME ); Sample;
CREATE TABLE `dogs` ( dog_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), abandoned_yn VARCHAR(1), breed_code VARCHAR(10) REFERENCES Breeds(breed_code), size_code VARCHAR(10) REFERENCES Sizes(size_code), name VARCHAR(50), age VARCHAR(20), date_of_birth DATETIME, gender VARCHAR(1), weight VARCHAR(20), date_arrived DATETIME, date_adopted DATETIME, date_departed DATETIME ); Sample;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `dogs` ( dog_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), abandoned_yn VARCHAR(1), breed_code VARCHAR(10) REFERENCES Breeds(breed_code), size_code VARCHAR(10) REFERENCES Sizes(size_code), name VARCHAR(50), age VARCHAR(20), date_of_birth DATETIME, gender VARCHAR(1), weight VARCHAR(20), date_arrived DATETIME, date_adopted DATETIME, date_departed DATETIME ); Sample;
CREATE TABLE `treatment` ( treatment_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id), dog_id INTEGER REFERENCES Dogs(dog_id), treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code), date_treatment_start DATETIME, date_treatment_end DATETIME, remarks VARCHAR(200) ); Sample rows from `treatment`: (1, 3, 2, EXAM, 2017-06-11 12:44:48, 2018;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `dogs` ( dog_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), abandoned_yn VARCHAR(1), breed_code VARCHAR(10) REFERENCES Breeds(breed_code), size_code VARCHAR(10) REFERENCES Sizes(size_code), name VARCHAR(50), age VARCHAR(20), date_of_birth DATETIME, gender VARCHAR(1), weight VARCHAR(20), date_arrived DATETIME, date_adopted DATETIME, date_departed DATETIME ); Sample;
CREATE TABLE `dogs` ( dog_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), abandoned_yn VARCHAR(1), breed_code VARCHAR(10) REFERENCES Breeds(breed_code), size_code VARCHAR(10) REFERENCES Sizes(size_code), name VARCHAR(50), age VARCHAR(20), date_of_birth DATETIME, gender VARCHAR(1), weight VARCHAR(20), date_arrived DATETIME, date_adopted DATETIME, date_departed DATETIME ); Sample;
CREATE TABLE `treatment_types` ( treatment_type_code VARCHAR(10) PRIMARY KEY, treatment_type_description VARCHAR(80) ); Sample rows from `treatment_types`: (EXAM, Physical examination), (VAC, Vaccination), (WALK, Take for a Walk), CREATE TABLE `treat_dogs` ( dog_id INTEGER PRIMARY KEY REFERENCES Dogs(dog_id), treatment_type_code VARCHAR(10) PRIMARY KEY REFERENCES Treatment_Types(treatment_type_code), treatment_datetime DATETIME,;
CREATE TABLE `treatment` ( treatment_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id), dog_id INTEGER REFERENCES Dogs(dog_id), treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code), date_treatment_start DATETIME, date_treatment_end DATETIME, remarks VARCHAR(200) ); Sample rows from `treatment`: (1, 6, 3, EXAM, 2017-06-19 12:28:48, 2018;
CREATE TABLE `professional_treatment_of_pets` ( professional_id INTEGER REFERENCES Professionals(professional_id) REFERENCES Professionals(professional_id), pet_id INTEGER REFERENCES Pets(pet_id) REFERENCES Pets(pet_id), Date_of_Treatment DATETIME, Treatment_Type_Code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code) ); Sample rows from `professional_treatment_of_pets`: (11, 6, 2018-03-25 16:28:32, VAC;
CREATE TABLE `professional_pets` ( professional_id INTEGER REFERENCES Professionals(professional_id) REFERENCES Professionals(professional_id), owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), dog_id INTEGER REFERENCES Dogs(dog_id) REFERENCES Dogs(dog_id), date_of_treatment DATETIME, date_of_visit DATETIME ); Sample rows from `professional_pets`: (8, 3, 6, 2018-03-25 10:25:46, 2018;
CREATE TABLE `professionals` ( professional_id INTEGER, role_code VARCHAR(10), first_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), last_name VARCHAR(50), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `professionals`: (1, Employee, Taryn, 6915 Oberbrunner Point Suite 491 Gleasonville, LA;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `dogs` ( dog_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), abandoned_yn VARCHAR(1), breed_code VARCHAR(10) REFERENCES Breeds(breed_code), size_code VARCHAR(10) REFERENCES Sizes(size_code), name VARCHAR(50), age VARCHAR(20), date_of_birth DATETIME, gender VARCHAR(1), weight VARCHAR(20), date_arrived DATETIME, date_adopted DATETIME, date_departed DATETIME ); Sample;
CREATE TABLE `dogs` ( dog_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), abandoned_yn VARCHAR(1), breed_code VARCHAR(10) REFERENCES Breeds(breed_code), size_code VARCHAR(10) REFERENCES Sizes(size_code), name VARCHAR(50), age VARCHAR(20), date_of_birth DATETIME, gender VARCHAR(1), weight VARCHAR(20), date_arrived DATETIME, date_adopted DATETIME, date_departed DATETIME ); Sample;
CREATE TABLE `treatment_types` ( treatment_type_code VARCHAR(10) PRIMARY KEY, treatment_type_description VARCHAR(80) ); Sample rows from `treatment_types`: (EXAM, Physical examination), (VAC, Vaccination), (WALK, Take for a Walk), CREATE TABLE `treatments` ( treatment_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), dog_id INTEGER REFERENCES Dogs(dog_id) REFERENCES Dogs(dog_id), treatment_type_code;
CREATE TABLE `treatment_types` ( treatment_type_code VARCHAR(10) PRIMARY KEY, treatment_type_description VARCHAR(80) ); Sample rows from `treatment_types`: (EXAM, Physical examination), (VAC, Vaccination), (WALK, Take for a Walk), CREATE TABLE `treatments` ( treatment_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id), dog_id INTEGER REFERENCES Dogs(dog_id), treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type;
CREATE TABLE `dogs` ( dog_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), abandoned_yn VARCHAR(1), breed_code VARCHAR(10) REFERENCES Breeds(breed_code), size_code VARCHAR(10) REFERENCES Sizes(size_code), name VARCHAR(50), age VARCHAR(20), date_of_birth DATETIME, gender VARCHAR(1), weight VARCHAR(20), date_arrived DATETIME, date_adopted DATETIME, date_departed DATETIME ); Sample;
CREATE TABLE `dogs` ( dog_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), abandoned_yn VARCHAR(1), breed_code VARCHAR(10) REFERENCES Breeds(breed_code), size_code VARCHAR(10) REFERENCES Sizes(size_code), name VARCHAR(50), age VARCHAR(20), date_of_birth DATETIME, gender VARCHAR(1), weight VARCHAR(20), date_arrived DATETIME, date_adopted DATETIME, date_departed DATETIME ); Sample;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `professionals` ( professional_id INTEGER, role_code VARCHAR(10), first_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), last_name VARCHAR(50), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `professionals`: (1, Employee, Taryn, 6915 Oberbrunner Point Suite 491 Gleasonville, LA;
CREATE TABLE `professional_pets` ( professional_id INTEGER REFERENCES Professionals(professional_id) REFERENCES Professionals(professional_id), owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), pet_id INTEGER REFERENCES Pets(pet_id) REFERENCES Pets(pet_id), date_of_visit DATETIME, problem VARCHAR(20), recommendation VARCHAR(20), id INTEGER ); Sample rows from `professional_pets`: (2, 3, 11, 2018-03-28 03:07;
CREATE TABLE `dogs` ( dog_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), abandoned_yn VARCHAR(1), breed_code VARCHAR(10) REFERENCES Breeds(breed_code), size_code VARCHAR(10) REFERENCES Sizes(size_code), name VARCHAR(50), age VARCHAR(20), date_of_birth DATETIME, gender VARCHAR(1), weight VARCHAR(20), date_arrived DATETIME, date_adopted DATETIME, date_departed DATETIME ); Sample;
CREATE TABLE `dogs` ( dog_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), abandoned_yn VARCHAR(1), breed_code VARCHAR(10) REFERENCES Breeds(breed_code), size_code VARCHAR(10) REFERENCES Sizes(size_code), name VARCHAR(50), age VARCHAR(20), date_of_birth DATETIME, gender VARCHAR(1), weight VARCHAR(20), date_arrived DATETIME, date_adopted DATETIME, date_departed DATETIME ); Sample;
CREATE TABLE `dogs` ( dog_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), abandoned_yn VARCHAR(1), breed_code VARCHAR(10) REFERENCES Breeds(breed_code), size_code VARCHAR(10) REFERENCES Sizes(size_code), name VARCHAR(50), age VARCHAR(20), date_of_birth DATETIME, gender VARCHAR(1), weight VARCHAR(20), date_arrived DATETIME, date_adopted DATETIME, date_departed DATETIME ); Sample;
CREATE TABLE `dogs` ( dog_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), abandoned_yn VARCHAR(1), breed_code VARCHAR(10) REFERENCES Breeds(breed_code), size_code VARCHAR(10) REFERENCES Sizes(size_code), name VARCHAR(50), age VARCHAR(20), date_of_birth DATETIME, gender VARCHAR(1), weight VARCHAR(20), date_arrived DATETIME, date_adopted DATETIME, date_departed DATETIME ); Sample;
CREATE TABLE `dogs` ( dog_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), abandoned_yn VARCHAR(1), breed_code VARCHAR(10) REFERENCES Breeds(breed_code), size_code VARCHAR(10) REFERENCES Sizes(size_code), name VARCHAR(50), age VARCHAR(20), date_of_birth DATETIME, gender VARCHAR(1), weight VARCHAR(20), date_arrived DATETIME, date_adopted DATETIME, date_departed DATETIME ); Sample;
CREATE TABLE `dogs` ( dog_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), abandoned_yn VARCHAR(1), breed_code VARCHAR(10) REFERENCES Breeds(breed_code), size_code VARCHAR(10) REFERENCES Sizes(size_code), name VARCHAR(50), age VARCHAR(20), date_of_birth DATETIME, gender VARCHAR(1), weight VARCHAR(20), date_arrived DATETIME, date_adopted DATETIME, date_departed DATETIME ); Sample;
CREATE TABLE `charges` ( charge_id INTEGER, charge_type VARCHAR(10), charge_amount DECIMAL(19,4) ); Sample rows from `charges`: (1, Daily Accommodation, 98), (2, Drugs, 322), (3, Health Check, 640), CREATE TABLE `charges_dog_stay` ( stay_id INTEGER, dog_id INTEGER REFERENCES Dogs(dog_id) REFERENCES Dogs(dog_id), stay_start_datetime DATETIME, stay_end_datetime DATETIME,;
CREATE TABLE `charges` ( charge_id INTEGER, charge_type VARCHAR(10), charge_amount DECIMAL(19,4) ); Sample rows from `charges`: (1, Daily Accommodation, 98), (2, Drugs, 322), (3, Health Check, 640), CREATE TABLE `pets` ( pet_id INTEGER, name VARCHAR(50), owner_id INTEGER REFERENCES Owners(owner_id), dog_id INTEGER REFERENCES Dogs(dog_id), stray_yn VARCHAR(1), date;
CREATE TABLE `charges` ( charge_id INTEGER, charge_type VARCHAR(10), charge_amount DECIMAL(19,4) ); Sample rows from `charges`: (1, Daily Accommodation, 98), (2, Drugs, 322), (3, Health Check, 640), CREATE TABLE `pet_owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code;
CREATE TABLE `charges` ( charge_id INTEGER, charge_type VARCHAR(10), charge_amount DECIMAL(19,4) ); Sample rows from `charges`: (1, Daily Accommodation, 98), (2, Drugs, 322), (3, Health Check, 640), CREATE TABLE `owner_account` ( account_number INTEGER, owner_id INTEGER REFERENCES Owners(owner_id), professional_id INTEGER REFERENCES Professionals(professional_id), store_id INTEGER ); Sample rows from `owner_account`: (;
CREATE TABLE `professionals` ( professional_id INTEGER, role_code VARCHAR(10), first_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), last_name VARCHAR(50), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `professionals`: (1, Employee, Taryn, 6915 Oberbrunner Point Suite 491 Gleasonville, LA;
CREATE TABLE `owners` ( owner_id INTEGER, first_name VARCHAR(50), last_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `owners`: (1, Nora, Haley, 0647 Hintz Village Apt. 024, Lake Tia, Wisconsin, 93165, lynn81@example;
CREATE TABLE `sizes` ( size_code VARCHAR(10) PRIMARY KEY, size_description VARCHAR(80) ); Sample rows from `sizes`: (SML, Small), (MED, Medium), (LGE, Large), CREATE TABLE `dogs` ( dog_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), abandoned_yn VARCHAR(1), breed_code VARCHAR(10) REFERENCES Breeds(breed_code), size_code VARCHAR(10) REFERENCES Sizes(size_code), name;
CREATE TABLE `sizes` ( size_code VARCHAR(10) PRIMARY KEY, size_description VARCHAR(80) ); Sample rows from `sizes`: (SML, Small), (MED, Medium), (LGE, Large), CREATE TABLE `dogs` ( dog_id INTEGER, owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id), abandoned_yn VARCHAR(1), breed_code VARCHAR(10) REFERENCES Breeds(breed_code), size_code VARCHAR(10) REFERENCES Sizes(size_code), name;
CREATE TABLE `professionals` ( professional_id INTEGER, role_code VARCHAR(10), first_name VARCHAR(50), street VARCHAR(50), city VARCHAR(50), state VARCHAR(20), zip_code VARCHAR(20), last_name VARCHAR(50), email_address VARCHAR(50), home_phone VARCHAR(20), cell_number VARCHAR(20) ); Sample rows from `professionals`: (1, Employee, Taryn, 6915 Oberbrunner Point Suite 491 Gleasonville, LA;
CREATE TABLE `professional_treatment` ( professional_id INTEGER REFERENCES Professionals(professional_id) REFERENCES Professionals(professional_id), dog_id INTEGER REFERENCES Dogs(dog_id) REFERENCES Dogs(dog_id), treatment_date DATETIME, treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code) ); Sample rows from `professional_treatment`: (2, 6, 2018-03-25 15:20:22, VAC), (10, 14, ;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `song` ( Song_ID INT PRIMARY KEY, Title TEXT, Singer_ID INT REFERENCES singer(Singer_ID), Sales REAL, Highest_Position REAL ); Sample rows from `song`: (1, Do They Know It's Christmas, 1, 1094000.0, 1.0), (2, F**k It (I Don't Want You Back), 1, 552407.0, 1.0), (3, Cha Cha Slide, 2;
CREATE TABLE `song` ( Song_ID INT PRIMARY KEY, Title TEXT, Singer_ID INT REFERENCES singer(Singer_ID), Sales REAL, Highest_Position REAL ); Sample rows from `song`: (1, Do They Know It's Christmas, 1, 1094000.0, 1.0), (2, F**k It (I Don't Want You Back), 1, 552407.0, 1.0), (3, Cha Cha Slide, 2;
CREATE TABLE `song` ( Song_ID INT PRIMARY KEY, Title TEXT, Singer_ID INT REFERENCES singer(Singer_ID), Sales REAL, Highest_Position REAL ); Sample rows from `song`: (1, Do They Know It's Christmas, 1, 1094000.0, 1.0), (2, F**k It (I Don't Want You Back), 1, 552407.0, 1.0), (3, Cha Cha Slide, 2;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `song` ( Song_ID INT PRIMARY KEY, Title TEXT, Singer_ID INT REFERENCES singer(Singer_ID), Sales REAL, Highest_Position REAL ); Sample rows from `song`: (1, Do They Know It's Christmas, 1, 1094000.0, 1.0), (2, F**k It (I Don't Want You Back), 1, 552407.0, 1.0), (3, Cha Cha Slide, 2;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `song` ( Song_ID INT PRIMARY KEY, Title TEXT, Singer_ID INT REFERENCES singer(Singer_ID), Sales REAL, Highest_Position REAL ); Sample rows from `song`: (1, Do They Know It's Christmas, 1, 1094000.0, 1.0), (2, F**k It (I Don't Want You Back), 1, 552407.0, 1.0), (3, Cha Cha Slide, 2;
CREATE TABLE `song` ( Song_ID INT PRIMARY KEY, Title TEXT, Singer_ID INT REFERENCES singer(Singer_ID), Sales REAL, Highest_Position REAL ); Sample rows from `song`: (1, Do They Know It's Christmas, 1, 1094000.0, 1.0), (2, F**k It (I Don't Want You Back), 1, 552407.0, 1.0), (3, Cha Cha Slide, 2;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `singer` ( Singer_ID INT PRIMARY KEY, Name TEXT, Birth_Year REAL, Net_Worth_Millions REAL, Citizenship TEXT ); Sample rows from `singer`: (1, Liliane Bettencourt, 1944.0, 30.0, France), (2, Christy Walton, 1948.0, 28.8, United States), (3, Alice Walton, 1949.0, 26.3, United States;
CREATE TABLE `other_available_features` ( feature_id INTEGER, feature_type_code VARCHAR(20) REFERENCES Ref_Feature_Types(feature_type_code), feature_name VARCHAR(80), feature_description VARCHAR(80) ); Sample rows from `other_available_features`: (2, Amenity, AirCon, Air Conditioning.), (3, Amenity, Pool, Swimming Pool.), (4, Security, BurglarAlarm, Burglar Alarm), ;
CREATE TABLE `other_available_features` ( feature_id INTEGER, feature_type_code VARCHAR(20) REFERENCES Ref_Feature_Types(feature_type_code), feature_name VARCHAR(80), feature_description VARCHAR(80) ); Sample rows from `other_available_features`: (2, Amenity, AirCon, Air Conditioning.), (3, Amenity, Pool, Swimming Pool.), (4, Security, BurglarAlarm, Burglar Alarm), ;
CREATE TABLE `ref_property_types` ( property_type_code VARCHAR(20) PRIMARY KEY, property_type_description VARCHAR(80) ); Sample rows from `ref_property_types`: (House, House, Bungalow, etc.), (Apartment, Apartment, Flat, Condo, etc.), (Field, Field, Meadow.), ;
CREATE TABLE `properties` ( property_id INTEGER, property_type_code VARCHAR(20) REFERENCES Ref_Property_Types(property_type_code), date_on_market DATETIME, date_sold DATETIME, property_name VARCHAR(80), property_address VARCHAR(255), room_count INTEGER, vendor_requested_price DECIMAL(19,4), buyer_offered_price DECIMAL(19,4), agreed_selling_price DECIMAL(19,4), apt_feature_1 VARCHAR(255), apt_feature_2 VARCHAR(255;
