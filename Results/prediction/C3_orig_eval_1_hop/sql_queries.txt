SELECT count(*) FROM singer CLIIIK;
SELECT count(*) FROM singerSELECT count(*) FROM singer;
SELECT name,  country,  age FROM singer ORDER BY age DESC;
SELECT Name,  Country,  Age FROM singer ORDER BY Age DESC;
SELECT avg(age),  min(age),  max(age) FROM singer WHERE country  =  'France' CLIIIK;
SELECT avg(age),  min(age),  max(age) FROM singer WHERE country  =  'France';
SELECT Song_Name,  Song_Release_Year FROM singer ORDER BY Age ASC LIMIT 1 CLIIIK;
SELECT Song_Name,  Song_Release_Year FROM singer ORDER BY Age DESC LIMIT 1;
SELECT DISTINCT Country FROM singer WHERE Age  >  20?>



;
SELECT Country FROM singer WHERE Age  >  20?>



;
SELECT Country,  COUNT(*) FROM singer GROUP BY Countryátky;
SELECT Country,  COUNT(*) FROM singer GROUP BY Country;
SELECT Song_Name FROM singer WHERE Age  >  (SELECT avg(Age) FROM singer)SELECT Song_Name FROM singer WHERE Age  >  (SELECT avg(Age) FROM singer)SELECT Song_Name FROM singer WHERE Age  >  (SELECT avg(Age) FROM singer)SELECT Song_Name FROM singer WHERE Age  >  (SELECT avg(Age) FROM singer)SELECT Song_Name FROM singer WHERE Age  >  (SELECT avg(Age);
SELECT Song_Name FROM singer WHERE Age  >  (SELECT avg(Age) FROM singer);
SELECT LOCATION,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT LOCATION,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT max(capacity),  avg(capacity) FROM stadium;
SELECT average,  MAX(capacity) FROM stadium;
SELECT name,  capacity FROM stadium ORDER BY average DESC LIMIT 1;
SELECT name,  capacity FROM stadium ORDER BY average DESC LIMIT 1;
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015;
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015;
SELECT T2.name,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_idátky;
SELECT count(*),  T1.name FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.name;
SELECT T2.name,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_ID  =  T2.stadium_ID WHERE T1.year  >=  2014 GROUP BY T1.stadium_ID ORDER BY count(*) DESC LIMIT 1;
SELECT T2.name,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_ID  =  T2.stadium_ID WHERE T1.year  >  2013 ORDER BY T1.year DESC LIMIT 1;
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1átky;
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert) resultat CLIIIK;
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT Stadium_ID FROM concert)Student;
SELECT Country FROM singer WHERE age  >  40 INTERSECT SELECT Country FROM singer WHERE age  <  30 CLIIIK;
SELECT name FROM stadium EXCEPT SELECT T3.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id JOIN singer_in_concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T1.year  =  2014;
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE YEAR  =  2014);
SELECT T3.concert_name,  T3.theme,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id GROUP BY T3.concert_name;
SELECT T3.concert_name,  T2.theme,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id JOIN singer AS T3 ON T1.singer_id  =  T3.singer_id GROUP BY T2.concert_name CLIIIK;
SELECT T1.Name,  COUNT(*) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name CLIIIK;
SELECT T2.Name,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Singer_ID?>



 CLIIIK CLIIIK;
SELECT T3.Name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.Concert_ID  =  T2.Concert_ID JOIN singer AS T3 ON T2.Singer_ID  =  T3.Singer_ID WHERE T1.Year  =  2014;
SELECT T2.Name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.Concert_ID  =  T2.Concert_ID WHERE T1.Year  =  2014?>



;
SELECT name,  country FROM singer WHERE song_name LIKE '%Hey%'?>



;
SELECT T1.Name,  T1.Country FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID JOIN concert AS T3 ON T2.Concert_ID  =  T3.Concert_ID WHERE T1.Song_Name LIKE '%Hey%';
SELECT T2.name,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_ID  =  T2.stadium_ID WHERE T1.year  =  2014 INTERSECT SELECT T2.name,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_ID  =  T2.stadium_ID WHERE T1.year  =  2015;
SELECT T2.name,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014 INTERSECT SELECT T2.name,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2015;
SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T2.capacity DESC LIMIT 1átky CLIIIK;
SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T2.capacity DESC LIMIT 1?>



átky;
SELECT count(*) FROM Pets WHERE Weight  >  10;
SELECT count(*) FROM Pets WHERE Weight  >  10;
SELECT Weight FROM Pets ORDER BY PetAge ASC LIMIT 1;
SELECT min(weight) FROM pets WHERE pettype  =  "dog"user;
SELECT max(weight),  pettype FROM Pets GROUP BY pettypeSELECT max(weight),  pettype FROM Pets GROUP BY pettype;
SELECT max(weight),  pettype FROM Pets GROUP BY pettype;
SELECT count(*) FROM pets AS T1 JOIN has_pet AS T2 ON T1.petid  =  T2.petid JOIN student AS T3 ON T3.stuid  =  T2.stuid WHERE T3.age  >  20SELECT count(*) FROM pets AS T1 JOIN has_pet AS T2 ON T1.petid  =  T2.petid JOIN student AS T3 ON T3.stuid  =  T2.stuid WHERE T3;
SELECT count(*) FROM has_pet AS T1 JOIN pets AS T2 ON T1.petid  =  T2.petid WHERE T2.petage  >  20 AND T1.StuID IN (SELECT StuID FROM student WHERE age  >  20)SELECT count(*) FROM has_pet AS T1 JOIN pets AS T2 ON T1.petid  =  T2.petid WHERE T2.petage  >  20 AND StuID;
SELECT count(*) FROM pets AS T1 JOIN has_pet AS T2 ON T1.petid  =  T2.petid JOIN student AS T3 ON T2.stuid  =  T3.stuid WHERE T3.sex  =  'F' AND T1.pettype  =  "dog";
SELECT count(*) FROM pets AS T1 JOIN has_pet AS T2 ON T1.petid  =  T2.petid JOIN student AS T3 ON T2.stuid  =  T3.stuid WHERE T3.sex  =  'F' AND T1.pettype  =  "dog";
SELECT count(DISTINCT pettype) FROM petsuser;
SELECT count(DISTINCT pettype) FROM Petsquery;
SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pet_type  =  "cat" OR T3.pet_type  =  "dog";
SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID  =  T2.StuID JOIN pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.pet_type  =  "cat" OR T3.pet_type  =  "dog";
SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID  =  T2.StuID JOIN pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.Pet_type  =  "cat" INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID  =  T2.StuID JOIN pets AS T3 ON;
SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.Pet_type  =  'cat' INTERSECT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T;
SELECT Major,  Age FROM Student EXCEPT SELECT T1.Major,  T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  "cat";
SELECT major,  avg(age) FROM student WHERE StuID NOT IN (SELECT StuID FROM has_pet WHERE pettype  =  "Cat") GROUP BY majorreferencereference;
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_pet;
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID  =  T2.PetID WHERE T2.PetType  =  "Cat";
SELECT T1.fname,  T1.age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.pettype  =  "dog" EXCEPT SELECT T1.fname,  T1.age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2;
SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  "dog" EXCEPT SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS;
SELECT PetType,  Weight FROM Pets ORDER BY PetAge ASC LIMIT 1;
SELECT Pet_type,  Weight FROM Pets ORDER BY Pet_age ASC LIMIT 1SELECT Pet_type,  Weight FROM Pets ORDER BY Pet_age ASC LIMIT 1SELECT Pet_type,  Weight FROM Pets ORDER BY Pet_age ASC LIMIT 1;
SELECT PetID,  weight FROM Pets WHERE PetAge  >  1;
SELECT PetID,  weight FROM pets WHERE PetAge  >  1;
SELECT avg(petage),  max(petage),  pettype FROM Pets GROUP BY pettypeSELECT avg(petage),  max(petage),  pettype FROM Pets GROUP BY pettype;
SELECT avg(petage),  max(petage),  pettype FROM Pets GROUP BY pettypereference;
SELECT avg(weight),  pettype FROM Pets GROUP BY pettype;
SELECT pettype,  avg(weight) FROM Pets GROUP BY pettype;
SELECT DISTINCT T1.fname,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pettype  =  "dog"SELECT DISTINCT T1.fname,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS;
SELECT DISTINCT T1.Fname,  T1.age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetAge  >  2;
SELECT T2.PetID FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID  =  T2.StuID WHERE T1.LName  =  'Smith'QUERYSELECT T2.PetID FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID  =  T2.StuID WHERE T1.LName  =  'Smith'SELECT T2.PetID FROM student AS T1;
SELECT T1.PetID FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.LName  =  'Smith'SELECT T1.PetID FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.LName  =  'Smith';
SELECT count(*),  StuID FROM Has_pet GROUP BY StuIDSELECT count(*),  StuID FROM Has_pet GROUP BY StuID;
SELECT count(*),  StuID FROM has_pet GROUP BY StuIDuser CLIIIK;
SELECT DISTINCT T1.fname,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID HAVING count(*)  >  1users SELECT DISTINCT T1.fname,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID HAVING count(*);
SELECT T1.fname,  T1.sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID HAVING count(*)  >  1SELECT T1.fname,  T1.sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID HAVING count(*) ;
SELECT T3.lname FROM pets AS T1 JOIN has_pet AS T2 ON T1.petid  =  T2.petid JOIN student AS T3 ON T2.StuID  =  T3.StuID WHERE T1.pettype  =  "cat" AND T1.petage  =  3;
SELECT T3.lname FROM has_pet AS T1 JOIN student AS T2 ON T1.StuID  =  T2.StuID JOIN pets AS T3 ON T1.PetID  =  T3.PetID WHERE T3.pettype  =  "cat" AND petage  =  3;
SELECT avg(age) FROM student WHERE StuID NOT IN (SELECT StuID FROM has_pet)user;
SELECT avg(age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)reference;
SELECT count(*) FROM continents;
SELECT count(*) FROM continents;
SELECT T1.contid,  T1.continent,  count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.contid  =  T2.continent GROUP BY T1.contid;
SELECT T2.contid,  T2.continent,  count(*) FROM countries AS T1 JOIN continents AS T2 ON T1.continent  =  T2.continent GROUP BY T2.contid;
SELECT count(*) FROM countries;
SELECT count(*) FROM countries?>



;
SELECT T1.maker,  T1.full_name,  count(*) FROM Car_makers AS T1 JOIN Model_list AS T2 ON T1.id  =  T2.maker GROUP BY T1.maker ORDER BY count(*) DESC LIMIT 10;
SELECT T1.maker,  T1.full_name,  count(*) FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.maker GROUP BY T1.maker;
SELECT DISTINCT model FROM cars_data ORDER BY horsepower ASC LIMIT 1;
SELECT model FROM cars_data ORDER BY horsepower ASC LIMIT 1;
SELECT DISTINCT model FROM cars_data WHERE weight  <  (SELECT avg(weight) FROM cars_data);
SELECT model FROM cars_data WHERE weight  <  (SELECT avg(weight) FROM cars_data);
SELECT T1.maker FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.id  =  T2.id WHERE YEAR  =  1970?>



;
SELECT DISTINCT T1.maker FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.id  =  T2.id WHERE T2.year  =  "1970";
SELECT make,  YEAR FROM cars_data ORDER BY YEAR ASC LIMIT 1;
SELECT T1.maker,  T1.year FROM car_names AS T1 JOIN cars_data AS T2 ON T1.makeid  =  T2.id ORDER BY T2.year ASC LIMIT 1;
SELECT DISTINCT model FROM car_names WHERE YEAR  >  1980;
SELECT DISTINCT T2.model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.makeid  =  T2.id WHERE T1.year  >  1980;
SELECT T2.continent,  count(*) FROM countries AS T1 JOIN car_makers AS T2 ON T1.contid  =  T2.country GROUP BY T1.contid;
SELECT T2.continent,  count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.countryid GROUP BY T2.continent?>



;
SELECT T1.countryname FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid  =  T2.country ORDER BY count(*) DESC LIMIT 1;
SELECT T1.countryname FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid  =  T2.country ORDER BY count(*) DESC LIMIT 1;
SELECT count(*),  maker FROM Model_List GROUP BY maker;
SELECT count(*),  T1.maker,  T1.full_name FROM Car_makers AS T1 JOIN Model_list AS T2 ON T1.id  =  T2.maker GROUP BY T1.maker;
SELECT accelerate FROM cars_data WHERE YEAR LIKE "1976%" AND MAKE LIKE "amc hornet sportabout (sw)";
SELECT accelerate FROM cars_data WHERE YEAR  =  "1976" AND stock  =  "amc hornet sportabout (sw)";
SELECT count(*) FROM car_makers WHERE country  =  "France";
SELECT count(*) FROM car_makers WHERE country  =  "France";
SELECT count(*) FROM cars_data WHERE continent  =  'USA';
SELECT count(*) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.makeid  =  T2.id WHERE T2.make LIKE "%% USA %%";
SELECT avg(mpg) FROM cars_data WHERE cylinders  =  4;
SELECT avg(mpg) FROM cars_data WHERE cylinders  =  4;
SELECT min(weight) FROM cars_data WHERE YEAR  =  1974 AND cylinders  =  8;
SELECT min(weight) FROM cars_data WHERE cyl  =  8 AND YEAR  =  1974;
SELECT DISTINCT T1.maker,  T1.model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker;
SELECT maker,  MODEL FROM Model_list?>



;
SELECT country,  countryid FROM car_makers GROUP BY countryid HAVING count(*)  >=  1;
SELECT T1.countryName,  T1.countryid FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid  =  T2.country INTERSECT SELECT T1.countryName,  T1.countryid FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid  =  T2.country ORDER BY T1.countryid;
SELECT count(*) FROM cars_data WHERE horsepower  >  150;
SELECT count(*) FROM cars_data WHERE horsepower  >  150;
SELECT avg(weight),  YEAR FROM cars_data GROUP BY YEAR;
SELECT avg(weight),  YEAR FROM cars_data GROUP BY YEAR;
SELECT T1.country FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid  =  T2.country GROUP BY T1.countryid HAVING count(*)  >=  3;
SELECT T1.countryname FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid  =  T2.country INTERSECT SELECT T1.countryname FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid  =  T2.country GROUP BY T1.countryname HAVING count(*)  >=  3;
SELECT max(Horsepower),  max(T1.Model) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.id  =  T2.makeid WHERE cylinders  =  3;
SELECT max(Horsepower),  maker FROM cars_data WHERE Cylinders  =  3;
SELECT model FROM cars_data GROUP BY model ORDER BY avg(mpg) DESC LIMIT 1;
SELECT model FROM cars_data GROUP BY model ORDER BY avg(mpg) DESC LIMIT 1?>



 CLIIIK;
SELECT avg(horsepower) FROM cars_data WHERE YEAR  <  1980átky;
SELECT avg(hp) FROM cars_data WHERE YEAR  <  1980?>



;
SELECT avg(edispl) FROM cars_data WHERE model  =  "volvo"?>



;
SELECT avg(edispl) FROM cars_data WHERE model  =  "Volvos";
SELECT max(acc),  cylinders FROM cars_data GROUP BY cylinders;
SELECT max(Accelerate) FROM cars_data;
SELECT T2.model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.makeid  =  T2.makeid GROUP BY T2.model ORDER BY count(*) DESC LIMIT 1;
SELECT DISTINCT T1.model FROM car_names AS T1 JOIN model_list AS T2 ON T1.model  =  T2.model GROUP BY T1.model ORDER BY count(*) DESC LIMIT 1;
SELECT count(*) FROM cars_data WHERE cylinders  >  4;
SELECT count(*) FROM Cars_data WHERE cylinders  >  4;
SELECT count(*) FROM cars_data WHERE YEAR  =  1980;
SELECT count(*) FROM cars_data WHERE YEAR  =  1980;
SELECT count(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker WHERE T1.full_name  =  "American Motor Company";
SELECT count(*) FROM Model_list AS T1 JOIN car_makers AS T2 ON T1.maker  =  T2.id WHERE T2.maker  =  "American Motor Company"?>



;
SELECT T2.full_name,  T1.id FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.maker GROUP BY T1.id HAVING count(*)  >  3;
SELECT T1.maker,  T1.id FROM Car_Makers AS T1 JOIN Model_List AS T2 ON T1.id  =  T2.maker GROUP BY T1.id HAVING count(*)  >  3;
SELECT DISTINCT T1.model FROM Model_List AS T1 JOIN Car_Makers AS T2 ON T1.maker  =  T2.id WHERE T2.full_name  =  "General Motors" OR T2.weight  >  3500;
SELECT DISTINCT T1.model FROM car_names AS T1 JOIN model_list AS T2 ON T1.makeid  =  T2.modelid WHERE T2.maker  =  "General Motors" OR T1.weight  >  3500;
SELECT YEAR FROM cars_data WHERE weight BETWEEN 3000 AND 4000;
SELECT DISTINCT YEAR FROM cars_data WHERE weight  <  4000 INTERSECT SELECT DISTINCT YEAR FROM cars_data WHERE weight  >  3000;
SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1?>LIMIT 1?>



;
SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1;
SELECT cylinders FROM cars_data ORDER BY accelerate ASC LIMIT 1;
SELECT min(cylinders) FROM cars_data WHERE accelerate  =  (SELECT min(acc) FROM cars_data);
SELECT count(*) FROM cars_data WHERE accelerate  >  (SELECT max(horsepower) FROM cars_data) CLIIIKátky;
SELECT count(*) FROM cars_data WHERE accelerate  >  (SELECT max(horsepower) FROM cars_data);
SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.countryid GROUP BY T2.countryid HAVING count(*)  >  2;
SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.countryid WHERE T1.maker  >  2;
SELECT count(*) FROM cars_data WHERE cylinders  >  6;
SELECT count(*) FROM cars_data WHERE cylinders  >  6;
SELECT model FROM cars_data WHERE cylinders  =  4 ORDER BY horsepower DESC LIMIT 1;
SELECT model,  horsepower FROM cars_data WHERE cylinders  =  4 GROUP BY horsepower ORDER BY count(*) DESC LIMIT 1;
SELECT T1.makeid,  T1.make FROM Car_names AS T1 JOIN Cars_data AS T2 ON T1.id  =  T2.makeid WHERE T2.horsepower  >  (SELECT min(horsepower) FROM Cars_data) GROUP BY T1.makeid HAVING count(*)  >  3;
SELECT T1.maker,  T1.make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.makeid  =  T2.id WHERE T2.horsepower!= (  MIN(  T2.horsepower ) ) AND T2.cylinders  <  4;
SELECT max(mpg) FROM cars_data WHERE cylinders  =  8 OR YEAR  <  1980;
SELECT max(mpg) FROM cars_data WHERE cylinders  =  8 OR YEAR  <  1980átky;
SELECT DISTINCT T2.model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.id  =  T2.modelid WHERE T1.weight  <  3500 AND T2.maker!= "Ford Motor Company";
SELECT DISTINCT T2.model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.makeid  =  T2.makeid WHERE T1.weight  <  3500 EXCEPT SELECT T2.model FROM car_names AS T1 JOIN model_list AS T2 ON T1.makeid  =  T2.modelid JOIN car_makers AS T3 ON T2.maker  =  T3.id WHERE T3.full_name  =  "Ford Motor Company";
SELECT countryname FROM countries EXCEPT SELECT T2.countryname FROM car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.countryid;
SELECT country FROM countries EXCEPT SELECT country FROM car_makers;
SELECT T2.id,  T2.maker FROM Model_list AS T1 JOIN Car_makers AS T2 ON T1.maker  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2 INTERSECT SELECT T2.id,  T2.maker FROM Car_makers AS T1 JOIN Model_list AS T2 ON T1.id  =  T2.maker GROUP BY T1.id HAVING count(*)  >=  4;
SELECT T1.id,  T1.maker FROM Car_makers AS T1 JOIN Model_list AS T2 ON T1.id  =  T2.id GROUP BY T1.id HAVING count(*)  >=  2 INTERSECT SELECT id,  maker FROM Cars_data GROUP BY id HAVING count(*)  >=  4 CLIIIK;
SELECT T1.countryid,  T2.fullname FROM Car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.countryid GROUP BY T1.country INTERSECT SELECT T1.countryid,  T2.fullname FROM Car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.countryid JOIN model_list AS T3 ON T1.id  =  T3.maker WHERE T3.model  = ;
SELECT T2.countryid,  T1.name FROM car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.countryid GROUP BY T1.countryid HAVING count(*)  >  3 UNION SELECT T2.countryid,  T1.name FROM model_list AS T3 JOIN car_names AS T4 ON T3.maker  =  T4.makeid JOIN cars_data AS T5 ON T4.id  =  T5.makeid;
SELECT country FROM airlines WHERE airlineName  =  "JetBlue Airways";
SELECT country FROM airlines WHERE airlineName  =  'Jetblue Airways';
SELECT Abbreviation FROM airlines WHERE airlineName  =  "JetBlue Airways";
SELECT abbreviation FROM airlines WHERE airlineName  =  "Jetblue Airways" CLIIIK CLIIIK;
SELECT airlineName,  abbreviation FROM airlines WHERE country  =  'USA';
SELECT airlineName,  abbreviation FROM airlines WHERE country  =  'USA'?>



?>



;
SELECT airportcode,  airportname FROM airports WHERE city  =  'Anthony';
SELECT airportcode,  airportname FROM airports WHERE city  =  'Anthony'?>



;
SELECT count(*) FROM airlines;
SELECT count(*) FROM airlinesSELECT count(*) FROM airlines;
SELECT count(*) FROM airports;
SELECT count(*) FROM airports?>



?>



;
SELECT count(*) FROM Flights;
SELECT count(*) FROM Flights;
SELECT airlineName FROM airlines WHERE abbreviation  =  'UAL';
SELECT abbreviation FROM airlines WHERE airlineName  =  'United Airlines';
SELECT count(*) FROM airlines WHERE country  =  'USA';
SELECT count(*) FROM airlines WHERE country  =  'USA';
SELECT city,  country FROM airports WHERE airportcode  =  'ALN';
SELECT city,  country FROM airports WHERE airportcode  =  'ALTON';
SELECT airportName FROM airports WHERE airportCode  =  'AKO';
SELECT airportName FROM airports WHERE airportCode  =  'AKO';
SELECT airportname FROM airports WHERE city  =  'Aberdeen' CLIIIK;
SELECT airportname FROM airports WHERE city  =  'Aberdeen';
SELECT count(*) FROM flights WHERE sourceairport  =  'APG';
SELECT count(*) FROM flights WHERE sourceairport  =  'APG'átky;
SELECT count(*) FROM flights WHERE destairport  =  'ATO';
SELECT count(*) FROM flights WHERE sourceairport  =  'ATO';
SELECT count(*) FROM flights WHERE sourceairport  =  'Aberdeen';
SELECT count(*) FROM flights WHERE sourceairport  =  'Aberdeen';
SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.city  =  'Aberdeen';
SELECT count(*) FROM flights WHERE destairport  =  'Aberdeen';
SELECT count(*) FROM flights WHERE sourceairport  =  'Aberdeen' AND destairport  =  'Ashley';
SELECT count(*) FROM flights WHERE sourceairport  =  "Aberdeen" AND destairport  =  "Ashley";
SELECT count(*) FROM flights WHERE airline  =  'JetBlue Airways' CLIIIK;
SELECT count(*) FROM airlines AS T1 JOIN flights AS T2 ON T1.abbreviation  =  T2.airline WHERE T1.airlineName  =  "Jetblue Airways";
SELECT count(*) FROM flights WHERE airline  =  "United Airlines" AND destairport  =  "ASY";
SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.airportname  =  "ASY" AND T1.airline  =  "United Airlines";
SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.sourceairport  =  T2.airportcode WHERE T2.airportname  =  'AHD' AND T1.airline  =  'United Airlines';
SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport WHERE T1.airportname  =  "AHD" AND T2.airline  =  "United Airlines" CLIIIK;
SELECT count(*) FROM flights WHERE airline  =  "United Airlines" AND destairport  =  "Aberdeen";
SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.city  =  'Aberdeen' AND T1.airline  =  'United Airlines';
SELECT T1.city,  T1.countryabbrev FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport GROUP BY T1.countryabbrev ORDER BY count(*) DESC LIMIT 1;
SELECT T2.city FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode GROUP BY T1.destairport ORDER BY count(*) DESC LIMIT 1;
SELECT T1.city,  T1.cityname FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport GROUP BY T1.cityname ORDER BY count(*) DESC LIMIT 1;
SELECT T1.city FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport GROUP BY T2.sourceairport ORDER BY count(*) DESC LIMIT 1;
SELECT T1.airportcode FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport GROUP BY T2.sourceairport ORDER BY count(*) DESC LIMIT 1;
SELECT T1.airportcode FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.destairport GROUP BY T2.destairport ORDER BY count(*) DESC LIMIT 1;
SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY count(*) LIMIT 1;
SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY count(*) LIMIT 1;
SELECT T1.abin FROM airlines AS T1 JOIN flights AS T2 ON T1.abin  =  T2.abin GROUP BY T2.abin ORDER BY count(*) DESC LIMIT 1;
SELECT T2.airlineName,  COUNT(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.airline  =  T2.uid GROUP BY T1.airline ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.abbreviation,  T1.country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline GROUP BY T2.airline ORDER BY count(*) LIMIT 1 CLIIIK;
SELECT T1.abbreviation,  T1.country FROM airlines AS T1 JOIN flights AS T2 ON T1.UID  =  T2.airline GROUP BY T1.abbreviation ORDER BY count(*) LIMIT 1;
SELECT T1.airlineName FROM airlines AS T1 JOIN flights AS T2 ON T1.UID  =  T2.airline WHERE T2.sourceairport  =  'AHD';
SELECT T2.abb FROM flights AS T1 JOIN airlines AS T2 ON T1.ArrivalID  =  T2.UID WHERE T1.sourceairport  =  "AHD" CLIIIK;
SELECT DISTINCT T1.airlineName FROM airlines AS T1 JOIN flights AS T2 ON T1.UID  =  T2.airline WHERE T2.destairport  =  'AHD';
SELECT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.abbreviation  =  T2.airline WHERE T2.destairport  =  'AHD'?>



;
SELECT DISTINCT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.abbreviation  =  T2.airline WHERE T2.sourceairport  =  'APG' INTERSECT SELECT DISTINCT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.abbreviation  =  T2.airline WHERE T2.destairport  =  'CVO';
SELECT T1.airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.sourceairport  =  "APG" INTERSECT SELECT T1.airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.sourceairport  =  "CVO";
SELECT T2.airlineName FROM flights AS T1 JOIN airlines AS T2 ON T1.airline  =  T2.uid WHERE T1.sourceairport  =  'CVO' EXCEPT SELECT T2.airlineName FROM flights AS T1 JOIN airlines AS T2 ON T1.airline  =  T2.uid WHERE T1.sourceairport  =  'APG';
SELECT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.abbreviation  =  T2.airline WHERE T2.destairport  =  'CVO' EXCEPT SELECT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.abbreviation  =  T2.airline WHERE T2.destairport  =  'APG';
SELECT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.abbreviation  =  T2.abbreviation GROUP BY T2.abbreviation HAVING count(*)  >=  10?>



;
SELECT T2.abbreviation FROM flights AS T1 JOIN airlines AS T2 ON T1.airline  =  T2.uid GROUP BY T1.airline HAVING count(*)  >=  10;
SELECT T1.abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline WHERE T2.flightscount  <  200?>



;
SELECT T2.abb FROM flights AS T1 JOIN airlines AS T2 ON T1.abb  =  T2.abb GROUP BY T1.abb HAVING count(*)  <  200;
SELECT DISTINCT flightnumber FROM flights WHERE airline  =  "United Airlines"átky;
SELECT flightnumber FROM flights WHERE airline  =  'United Airlines';
SELECT flightnumber FROM flights WHERE sourceairport  =  "APG";
SELECT flightnumber FROM flights WHERE sourceairport  =  'APG'átky;
SELECT T1.flightnumber FROM flights AS T1 JOIN airports AS T2 ON T1.destairport  =  T2.airportcode WHERE T2.airportname  =  "APG";
SELECT flightnumber FROM flights WHERE destairport  =  'APG';
SELECT flightnumber FROM flights WHERE sourceairport  =  'Aberdeen';
SELECT flightnumber FROM flights WHERE sourceairport  =  'Aberdeen';
SELECT flightnumber FROM flights WHERE destairport  =  'Aberdeen';
SELECT flightnumber FROM flights WHERE destairport  =  'Aberdeen' CLIIIK CLIIIK;
SELECT count(*) FROM flights WHERE destairport  =  'Aberdeen' OR destairport  =  'Abilene';
SELECT count(*) FROM flights WHERE destairport  =  'Aberdeen' OR destairport  =  'Abilene';
SELECT airportname FROM airports EXCEPT SELECT T1.airportname FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport EXCEPT SELECT T1.airportname FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.destairport;
SELECT airportcode FROM airports EXCEPT SELECT destairport FROM flights UNION SELECT sourceairport FROM flights;
SELECT count(*) FROM employeequery SELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT;
SELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count(*) FROM employeeSELECT count;
SELECT name FROM employee ORDER BY age ASCQUEST;
SELECT name FROM employee ORDER BY age ASCQUEST?>



;
SELECT city,  count(*) FROM employee GROUP BY cityQUERYSELECT city,  count(*) FROM employee GROUP BY city;
SELECT city,  count(*) FROM employee GROUP BY cityQUEST;
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING COUNT(*)  >  1;
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1;
SELECT count(*),  LOCATION FROM shop GROUP BY LOCATIONQUESSALECT count(*),  LOCATION FROM shop GROUP BY LOCATIONSELECT count(*),  LOCATION FROM shop GROUP BY LOCATION;
SELECT LOCATION,  count(*) FROM shop GROUP BY LOCATIONQUESSISTSELECT LOCATION,  count(*) FROM shop GROUP BY LOCATION;
SELECT District,  manager_name FROM shop ORDER BY Number_products DESC LIMIT 1;
SELECT manager_name,  District FROM shop ORDER BY Number_products DESC LIMIT 1ımlıátky;
SELECT min(number_products),  max(number_products) FROM shop;
SELECT min(Number_products),  max(Number_products) FROM shop CLIIIK;
SELECT name,  LOCATION,  district FROM shop ORDER BY Number_products DESC;
SELECT name,  LOCATION,  district FROM shop ORDER BY Number_products DESCátky;
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)QUESTSELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop);
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)query;
SELECT T2.name FROM evaluation AS T1 JOIN employee AS T2 ON T1.employee_id  =  T2.employee_id GROUP BY T1.employee_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id GROUP BY T1.employee_id ORDER BY count(*) DESC LIMIT 1 CLIIIK;
SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id ORDER BY T2.bonus DESC LIMIT 1�;
SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id ORDER BY bonus DESC LIMIT 1;
SELECT name FROM employee EXCEPT SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_idQUERY;
SELECT name FROM employee EXCEPT SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_idQUEST;
SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.shop_id ORDER BY count(*) DESC LIMIT 1;
SELECT name FROM shop ORDER BY count(*) FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T2.shop_id ORDER BY count(*) DESC LIMIT 1átky;
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)quote;
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)QUOTE;
SELECT T2.name,  count(*) FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.shop_idQUOTE SELECT count(*),  T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.shop_idSELECT count(*),  T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id;
SELECT count(*),  T1.name FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.nameQUASSASSINSELECT count(*),  T1.name FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.nameSELECT count(*),  T1.name FROM shop AS T1 JOIN hiring AS T2 ON T;
SELECT sum(bonus) FROM evaluationSELECT sum(bonus) FROM evaluationSELECT sum(bonus) FROM evaluationSELECT sum(bonus) FROM evaluation;
SELECT sum(bonus) FROM evaluation?>



;
SELECT * FROM hiringSELECT * FROM hiring;
SELECT * FROM hiringSELECT * FROM hiring;
SELECT district FROM shop WHERE number_products  <  3000 INTERSECT SELECT district FROM shop WHERE number_products  >  10000studentátky;
SELECT district FROM shop WHERE number_products  <  3000 INTERSECT SELECT district FROM shop WHERE number_products  >  10000SELECT district FROM shop WHERE number_products  <  3000 INTERSECT SELECT district FROM shop WHERE number_products  >  10000 CLIIIK;
SELECT count(DISTINCT LOCATION) FROM shopSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECT;
SELECT count(DISTINCT LOCATION) FROM shopSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECT;
SELECT count(*) FROM DocumentsassistantSELECT count(*) FROM Documents;
SELECT count(*) FROM DocumentsassistantSELECT count(*) FROM Documents;
SELECT document_id,  document_name,  document_description FROM Documents CLIIIK;
SELECT document_id,  document_name,  document_description FROM Documents;
SELECT document_name,  template_id FROM Documents WHERE document_description LIKE '%w%';
SELECT t2.document_name,  t1.template_id FROM Documents AS t1 JOIN Templates AS t2 ON t1.template_id  =  t2.template_id WHERE t1.document_description LIKE '%w%';
SELECT document_id,  template_id,  document_description FROM documents WHERE document_name  =  "Robbin CV";
SELECT document_id,  template_id,  document_description FROM Documents WHERE document_name  =  "Robbin CV";
SELECT count(DISTINCT template_id) FROM DocumentsassistantSELECT count(DISTINCT template_id) FROM Documentsassistant;
SELECT count(DISTINCT template_id) FROM Documents CLIIIKassistantSELECT count(DISTINCT template_id) FROM Documentsassistant;
SELECT count(*) FROM documents AS T1 JOIN templates AS T2 ON T1.template_id  =  T2.template_id WHERE T2.template_type_code  =  'PPT';
SELECT count(*) FROM documents AS T1 JOIN templates AS T2 ON T1.template_id  =  T2.template_id WHERE T2.template_type_code  =  "PPT";
SELECT template_id,  count(*) FROM Documents GROUP BY template_id;
SELECT template_id,  count(*) FROM Documents GROUP BY template_id;
SELECT T1.template_id,  T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id,  T1.template_type_code ORDER BY count(*) DESC LIMIT 1;
SELECT T1.template_type_code,  T1.template_type_description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1;
SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1 CLIIIK;
SELECT template_id FROM documents GROUP BY template_id HAVING count(*)  >  1;
SELECT template_id FROM templates EXCEPT SELECT template_id FROM documentsassistant CLIIIK;
SELECT template_id FROM templates EXCEPT SELECT template_id FROM documentsSELECT template_id FROM templates;
SELECT count(*) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T1.template_type_description  =  "Template"?>



;
SELECT count(*) FROM Ref_Template_TypesassistantSELECT count(*) FROM Ref_Template_TypesSELECT count(*) FROM Ref_Template_TypesSELECT count(*) FROM Ref_Template_Types;
SELECT template_id,  version_number,  template_type_code FROM Templates;
SELECT template_id,  version_number,  template_type_code FROM Templates;
SELECT DISTINCT template_type_code FROM Templates;
SELECT DISTINCT template_type_code FROM Ref_Template_Types UNION SELECT DISTINCT template_type_code FROM Templatesassistant;
SELECT template_id FROM Ref_Template_Types JOIN Templates ON Templates.template_id  =  Templates.template_id WHERE Templates.template_type_code  =  "PP" OR Templates.template_type_code  =  "PPT";
SELECT template_id FROM Ref_Template_Types JOIN Templates ON Templates.template_id  =  Templates.template_id WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT" CLIIIK;
SELECT count(*) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T1.template_type_description  =  "CV";
SELECT count(*) FROM Ref_Template_Types WHERE template_type_description  =  "CV";
SELECT template_type_code,  version_number FROM Templates WHERE version_number  >  5 CLIIIK;
SELECT template_type_code,  version_number FROM Templates WHERE version_number  >  5;
SELECT template_type_code,  count(*) FROM Templates GROUP BY template_type_code CLIIIK;
SELECT template_type_code,  count(*) FROM Templates GROUP BY template_type_code;
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1átky;
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3;
SELECT template_type_code FROM Ref_Template_Types GROUP BY template_type_code HAVING count(*)  <  3átky;
SELECT min(version_number),  template_type_code FROM Templates GROUP BY template_type_code;
SELECT min(version_number),  template_type_code FROM Templates GROUP BY template_type_code;
SELECT T1.template_type_code FROM Ref_Template_Types AS T1 JOIN Documents AS T2 ON T1.template_type_code  =  T2.template_id WHERE T2.document_name  =  "Data base";
SELECT T1.template_type_code FROM Ref_Template_Types AS T1 JOIN Documents AS T2 ON T1.template_type_code  =  T2.template_id WHERE T2.document_name  =  "Data base";
SELECT T1.document_name FROM documents AS T1 JOIN templates AS T2 ON T1.template_id  =  T2.template_id WHERE T2.template_type_code  =  "BK";
SELECT T1.document_name FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id WHERE T2.template_type_code  =  'BK';
SELECT template_type_code,  count(*) FROM Documents GROUP BY template_type_code?>



;
SELECT templates.template_type_code,  count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY templates.template_type_code;
SELECT template_type_code FROM Documents GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1?>



;
SELECT T1.template_type_code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1 CLIIIK;
SELECT template_type_code FROM Ref_Template_Types EXCEPT SELECT template_type_code FROM Templatesassistant;
SELECT template_type_code FROM Ref_Template_Types EXCEPT SELECT template_type_code FROM templates GROUP BY template_type_code?>



;
SELECT template_type_code,  template_type_description FROM Ref_Template_Types;
SELECT template_type_code,  template_type_description FROM Ref_Template_Types;
SELECT template_type_description FROM Ref_Template_Types WHERE template_type_code  =  "AD"ımlı;
SELECT template_type_description FROM Ref_Template_Types WHERE template_type_code  =  "AD";
SELECT template_type_code FROM Ref_Template_Types WHERE template_type_description  =  "Book" CLIIIK;
SELECT template_type_code FROM Ref_Template_Types WHERE template_type_description  =  "Book"assistant?>



;
SELECT DISTINCT T1.template_type_description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code;
SELECT DISTINCT T2.template_type_description FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id;
SELECT template_id FROM Ref_Template_Types WHERE template_type_description  =  "Presentation";
SELECT template_id FROM documents AS T1 JOIN templates AS T2 ON T1.template_id  =  T2.template_id JOIN Ref_Template_Types AS T3 ON T2.template_type_code  =  T3.template_type_code WHERE T3.template_type_description  =  "Presentation" CLIIIK;
SELECT count(*) FROM paragraphsassistantSELECT count(*) FROM paragraphs;
SELECT count(*) FROM paragraphsátky;
SELECT count(*) FROM paragraphs AS t1 JOIN documents AS t2 ON t1.document_id  =  t2.document_id WHERE t2.document_name  =  'Summer Show';
SELECT count(*) FROM paragraphs AS T1 JOIN documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Summer Show';
SELECT other_details FROM Paragrahs WHERE Paragraph_Text  =  "Korea ";
SELECT other_details FROM Paragraphs WHERE Paragraph_Text LIKE "%Korea%";
SELECT paragraph_id,  paragraph_text FROM paragraphs AS t1 JOIN documents AS t2 ON t1.document_id  =  t2.document_id WHERE t2.document_name  =  'Welcome to NY';
SELECT t1.paragraph_id,  t1.paragraph_text FROM Paragraphs AS t1 JOIN Documents AS t2 ON t1.document_id  =  t2.document_id WHERE t2.document_name  =  'Welcome to NY';
SELECT paragraph_text FROM paragraphs AS T1 JOIN documents AS T2 ON T1.document_id  =  T2.document_id WHERE document_name  =  "Customer reviews";
SELECT t3.paragraph_text FROM documents AS t1 JOIN paragraphs AS t2 ON t1.document_id  =  t2.document_id JOIN documents AS t3 ON t1.document_id  =  t3.document_id WHERE t1.document_name  =  "Customer reviews";
SELECT document_id,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id;
SELECT count(*),  document_id FROM paragraphs GROUP BY document_id ORDER BY document_id;
SELECT T1.document_id,  T2.document_name,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id;
SELECT T1.document_id,  T2.document_name,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id;
SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*)  >=  2;
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2;
SELECT t1.document_id,  t2.document_name FROM Paragraphs AS t1 JOIN Documents AS t2 ON t1.document_id  =  t2.document_id GROUP BY t1.document_id ORDER BY count(*) DESC LIMIT 1;
SELECT t1.document_id,  t1.document_name FROM Documents AS t1 JOIN Paragraphs AS t2 ON t1.document_id  =  t2.document_id GROUP BY t1.document_id ORDER BY count(*) DESC LIMIT 1;
SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1;
SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1;
SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*)  >=  2;
SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*)  >=  1 AND count(*)  <=  2;
SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland';
SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland';
SELECT count(*) FROM teacherSELECT count(*) FROM teacher;
SELECT count(*) FROM teacherSELECT count(*) FROM teacher;
SELECT Name FROM teacher ORDER BY Age ASCreference	SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Name FROM teacher ORDER BY Age ASCreferenceSELECT Name FROM teacher ORDER BY Age ASCátky;
SELECT age,  hometown FROM teacherSELECT age,  hometown FROM teacherSELECT age,  hometown FROM teacherSELECT age,  hometown FROM teacherSELECT age,  hometown FROM teacherSELECT age,  hometown FROM teacherSELECT age,  hometown FROM teacherSELECT age,  hometown FROM teacherSELECT age,  hometown FROM teacherSELECT age,  hometown FROM teacherSELECT age,  hometown FROM teacherSELECT;
SELECT age,  hometown FROM teacherSELECT age,  hometown FROM teacher;
SELECT name FROM teacher WHERE Hometown!= 'Little Lever Urban District';
SELECT name FROM teacher WHERE Hometown!= 'Little Lever Urban District' CLIIIK;
SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33 CLIIIK;
SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33 CLIIIK?>



;
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1;
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1;
SELECT hometown,  count(*) FROM teacher GROUP BY hometownuserSELECT DISTINCT hometown,  count(*) FROM teacher GROUP BY hometown;
SELECT Hometown,  count(*) FROM teacher GROUP BY HometownSELECT Hometown,  count(*) FROM teacher GROUP BY Hometown;
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING count(*)  >=  2 CLIIIK;
SELECT T3.Name,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID;
SELECT T2.Name,  T1.Course FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID;
SELECT T1.Name,  T3.Course ORDER BY T1.Name ASCstudent;
SELECT T1.Name,  T2.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1 Teacher_ID  =  T2.Teacher_ID ORDER BY T1.Name ASC;
SELECT T1.name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.course_id  =  1?>



;
SELECT T2.name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.course_id IN (SELECT course_id FROM course WHERE course  = 'math')SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange WHERE course_id IN (SELECT course_id FROM course WHERE course  = 'math'));
SELECT T2.Name,  count(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T2.teacher_iduser;
SELECT T1.Name,  COUNT(*) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_iduser;
SELECT T1.name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id HAVING count(*)  >=  2;
SELECT T2.name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id HAVING count(*)  >=  2átky;
SELECT Name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)query;
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.teacher_id NOT IN (SELECT teacher_id FROM course_arrange)SELECT Name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange);
SELECT count(*) FROM customer WHERE age  <  30;
SELECT name FROM customer WHERE level_of_membership  >  4 ORDER BY level_of_membership;
SELECT avg(age) FROM customer WHERE LEVEL_of_membership  <=  4?>



;
SELECT name,  LEVEL_of_Membership FROM customer WHERE LEVEL_of_Membership  >  4 ORDER BY age DESCátky;
SELECT museum_id,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1;
SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009;
SELECT open_year,  num_of_staff FROM museum WHERE name  =  "Plaza Museum";
SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)user;
SELECT T1.customer_id,  T1.name,  T1.age FROM customer AS T1 JOIN visit AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  1;
SELECT T1.id,  T1.name,  T1.level_of_membership FROM customer AS T1 JOIN visit AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(T2.total_spent) DESC LIMIT 1;
SELECT T1.museum_id,  T1.name FROM museum AS T1 JOIN visit AS T2 ON T1.museum_id  =  T2.museum_id GROUP BY T1.museum_id ORDER BY count(*) DESC LIMIT 1?>



?>



;
SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)user;
SELECT T2.name,  T2.age FROM visit AS T1 JOIN customer AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1;
SELECT avg(num_of_ticket),  max(num_of_ticket) FROM visit;
SELECT sum(T2.num_of_ticket) FROM visit AS T1 JOIN customer AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.level_of_membership  =  1 CLIIIK?>



;
SELECT T2.name FROM visit AS T1 JOIN museum AS T2 ON T1.museum_id  =  T2.museum_id WHERE T2.open_year  <  2009 INTERSECT SELECT T2.name FROM visit AS T1 JOIN museum AS T2 ON T1.museum_id  =  T2.museum_id WHERE T2.open_year  >  2011student;
SELECT count(*) FROM customer WHERE customer.id NOT IN ( SELECT customer_id FROM visit AS T1 JOIN museum AS T2 ON T1.museum_id  =  T2.museum_id WHERE T2.open_year  >  2010 )SELECT count(*) FROM customer WHERE customer.id NOT IN ( SELECT customer_id FROM visit AS T1 JOIN museum AS T2 ON T1.museum_id  =  T2.museum_id WHERE T2.open_year  >  201;
SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008;
SELECT count(*) FROM players;
SELECT count(*) FROM Players;
SELECT count(*) FROM MATCHES;
SELECT count(*) FROM MATCHES?>



átky;
SELECT first_name,  birth_date FROM players WHERE country_code  =  'USA';
SELECT first_name,  birth_date FROM players WHERE country_code  =  'USA';
SELECT avg(loser_age),  avg(winner_age) FROM matches CLIIIK;
SELECT avg(loser_age),  avg(winner_age) FROM matches;
SELECT avg(winner_rank) FROM matches;
SELECT avg(winner_rank) FROM matchesátky;
SELECT max(loser_rank) FROM matches;
SELECT max(loser_rank) FROM matches;
SELECT count(DISTINCT country_code) FROM players;
SELECT count(DISTINCT country_code) FROM players;
SELECT count(DISTINCT loser_name) FROM matches;
SELECT count(DISTINCT loser_name) FROM MATCHES;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10;
SELECT T1.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id WHERE T2.year  =  2013 INTERSECT SELECT T1.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id WHERE T2.year  =  2016;
SELECT T1.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id WHERE T2.year  =  2013 INTERSECT SELECT T1.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id WHERE T2.year  =  2016;
SELECT count(*) FROM MATCHES WHERE YEAR  =  2013 OR YEAR  =  2016;
SELECT count(*) FROM MATCHES WHERE YEAR  =  2013 OR YEAR  =  2016;
SELECT T1.country_code,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id JOIN matches AS T3 ON T2.winner_id  =  T3.winner_id WHERE T3.tourney_name  =  'Australian Open' INTERSECT SELECT T1.country_code,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2;
SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id JOIN players AS T3 ON T3.player_id  =  T2.winner_id WHERE T3.hand  =  'Right' AND T3.tourney_name  =  'Australian Open' INTERSECT SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN matches AS T2 ON;
SELECT first_name,  country_code FROM players ORDER BY birth_date LIMIT 1;
SELECT fname,  country_code FROM players ORDER BY birth_date LIMIT 1;
SELECT first_name,  last_name FROM players ORDER BY birth_date;
SELECT first_name,  last_name FROM players ORDER BY birth_date?>



;
SELECT first_name,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date;
SELECT first_name,  last_name FROM players WHERE hand  =  'Left' ORDER BY birth_date CLIIIK;
SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id GROUP BY T1.country_code ORDER BY count(*) DESC LIMIT 1;
SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY tours DESC LIMIT 1?>



;
SELECT YEAR FROM MATCHES GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;
SELECT YEAR FROM MATCHES GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;
SELECT T1.winner_name,  T1.winner_rank_points FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id GROUP BY T1.winner_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.winner_name,  T1.winner_rank_points FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id GROUP BY T1.winner_id ORDER BY count(*) DESC LIMIT 1;
SELECT T2.winner_name FROM rankings AS T1 JOIN players AS T2 ON T1.player_id  =  T2.player_id WHERE T1.ranking_points  =  ( SELECT max(ranking_points) FROM rankings ) AND T2.country_code  =  'Australia';
SELECT T1.winner_name FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id WHERE T1.tourney_name  =  'Australian Open' ORDER BY T1.winner_rank_points DESC LIMIT 1;
SELECT T2.loser_name,  T2.winner_name FROM matches AS T1 JOIN players AS T2 ON T1.loser_id  =  T2.player_id ORDER BY T1.minutes DESC LIMIT 1;
SELECT T2.loser_name,  T1.winner_name FROM matches AS T1 JOIN players AS T2 ON T1.loser_id  =  T2.player_id ORDER BY minutes DESC LIMIT 1;
SELECT avg(T1.ranking),  T1.first_name FROM Players AS T1 JOIN Rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name;
SELECT T1.first_name,  avg(T2.ranking) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id;
SELECT sum(T2.ranking_points),  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name CLIIIK;
SELECT T1.first_name,  sum(T2.ranking_points) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY sum(T2.ranking_points) DESC LIMIT 10;
SELECT count(*),  country_code FROM players GROUP BY country_code;
SELECT count(*),  country_code FROM players GROUP BY country_code?>



;
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1 CLIIIK;
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50átky;
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50 CLIIIK;
SELECT Ranking,  SUM(Tours) FROM rankings GROUP BY Ranking ORDER BY Ranking;
SELECT rankingDate,  sum(Tours) FROM rankings GROUP BY rankingDate;
SELECT count(*),  YEAR FROM matches GROUP BY YEAR;
SELECT count(*),  YEAR FROM matches GROUP BY YEAR?>



;
SELECT T2.winner_name,  T2.winner_rank FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id ORDER BY T1.tourney_id,  T1.winner_id DESC LIMIT 3;
SELECT T1.winner_name,  T1.winner_rank FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id ORDER BY T2.birth_date DESC LIMIT 3;
SELECT count(*) FROM (SELECT T1.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id WHERE T1.hand  =  'Left' INTERSECT SELECT T1.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T1.hand  =  'Left' );
SELECT count(*) FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id WHERE T1.hand  =  'Left' AND T2.tourney_id  =  2004;
SELECT T1.first_name,  T1.country_code,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1;
SELECT T1.first_name,  T1.country_code,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1;
SELECT count(*),  hand FROM players GROUP BY hand;
SELECT hand,  count(*) FROM players GROUP BY hand CLIIIK;
SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'query?>



;
SELECT name,  tonnage FROM ship ORDER BY name DESCSELECT name,  tonnage FROM ship ORDER BY name DESC;
SELECT name,  date,  RESULT FROM battlequery;
SELECT max(killed),  min(killed) FROM DeathquerySELECT max(killed),  min(killed) FROM DeathSELECT max(killed),  min(killed) FROM Death;
SELECT avg(Injured) FROM DeathQUERY;
SELECT T2.note,  T2.injured FROM ship AS T1 JOIN death AS T2 ON T1.id  =  T2.caused_by_ship_id WHERE T1.tonnage  =  't'SELECT T2.note,  T2.injured FROM ship AS T1 JOIN death AS T2 ON T1.id  =  T2.caused_by_ship_id WHERE T1.tonnage  =  't'SELECT T2.note;
SELECT name,  RESULT FROM battle WHERE bulgarian_commander!= 'Boril'query;
SELECT DISTINCT T1.id,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'querySELECT DISTINCT T1.id,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Br;
SELECT T1.id,  T1.name FROM battle AS T1 JOIN death AS T2 ON T1.id  =  T2.caused_by_ship_id GROUP BY T2.caused_by_ship_id HAVING sum(killed)  >  10SELECT T1.id,  T1.name FROM battle AS T1 JOIN death AS T2 ON T1.id  =  T2.caused_by_ship_id GROUP BY T2.caused_by_ship_id HAVING sum;
SELECT T2.id,  T1.name FROM Death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T1.caused_by_ship_id ORDER BY sum(T1.injured) DESC LIMIT 1SELECT T2.id,  T1.name FROM Death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T1.caused_by_ship_id ORDER BY;
SELECT DISTINCT name FROM battle WHERE latin_commander  =  'Baldwin I' AND bulgarian_commander  =  'Kaloyan'query?>



átky;
SELECT count(DISTINCT RESULT) FROM battlequerySELECT count(DISTINCT RESULT) FROM battleSELECT count(DISTINCT RESULT) FROM battle CLIIIK;
SELECT count(*) FROM battle WHERE RESULT  =  "win" EXCEPT SELECT count(*) FROM ship WHERE Tonnage  =  225SELECT;
SELECT T2.date,  T1.name FROM ship AS T1 JOIN battle AS T2 ON T1.lost_in_battle  =  T2.id WHERE T1.name  =  'Lettice' UNION SELECT T2.date,  T1.name FROM ship AS T1 JOIN battle AS T2 ON T1.lost_in_battle  =  T2.id WHERE T1.name  =  'HMS Atalanta';
SELECT T1.name,  T1.result,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location!= "English Channel"reference;
SELECT Note FROM Death WHERE Note LIKE '%East%'SELECT Note FROM Death WHERE Note LIKE '%East%'?>



;
SELECT line_1,  line_2 FROM Addresses;
SELECT line_1,  line_2 FROM Addresses;
SELECT count(*) FROM COURSESuser;
SELECT count(*) FROM COURSESuser CLIIIK;
SELECT course_description FROM COURSES WHERE course_name  =  "Math";
SELECT course_description FROM COURSES WHERE course_name LIKE '%Math%' CLIIIK;
SELECT zip_postcode FROM addresses WHERE city  =  "Port Chelsea";
SELECT zip_postcode FROM addresses WHERE city  =  "Port Chelsea";
SELECT T2.department_name,  T2.department_id FROM Degree_programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.department_name,  T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1átky;
SELECT count(DISTINCT department_id) FROM Degree_programs;
SELECT count(DISTINCT department_id) FROM Degree_Programs;
SELECT count(DISTINCT degree_summary_name) FROM Degree_programs?>



;
SELECT count(DISTINCT degree_summary_name) FROM Degree_ProgramsuserSELECT count(DISTINCT degree_summary_name) FROM Degree_Programsuser;
SELECT count(*) FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  "Engineering";
SELECT count(*) FROM Degree_programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Engineering';
SELECT section_name,  section_description FROM Sections;
SELECT section_name,  section_description FROM  Sections;
SELECT T1.course_name,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2 CLIIIK;
SELECT T1.course_name,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <  2;
SELECT section_name FROM Sections ORDER BY section_name DESC?>



;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT T1.semester_name,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T2.semester_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.semester_name,  T2.semester_id,  count(*) FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T2.semester_id ORDER BY count(*) DESC LIMIT 1;
SELECT department_description FROM DEPARTMENTS WHERE department_name LIKE '%the%computer%'SELECT department_description FROM DEPARTMENTS WHERE department_name LIKE '%the%computer%'SELECT department_description FROM DEPARTMENTS WHERE department_name LIKE '%the%computer%'SELECT department_description FROM DEPARTMENTS WHERE department_name LIKE '%the%computer%'SELECT department_description FROM DEPARTMENTS WHERE department_name LIKE '%the%computer%'SELECT department_description FROM DEPARTMENTS WHERE department_name;
SELECT department_description FROM DEPARTMENTS WHERE department_name LIKE "%computer%";
SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T2.degree_program_id FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id WHERE T2.semester_id  =  1 INTERSECT SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T2.degree_program_id FROM students AS T1 JOIN student_enrolment AS T2;
SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T2.degree_program_id,  T1.student_id FROM Students AS T1 JOIN Student_Employment AS T2 ON T1.student_id  =  T2.student_id WHERE T2.degree_program_id IN (SELECT degree_program_id FROM Student_Employment GROUP BY degree_program_id HAVING count(*)  =  2)SELECT T1.student_id,  T1.first_name;
SELECT T3.first_name,  T3.middle_name,  T3.last_name FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id JOIN Students AS T3 ON T1.student_id  =  T3.student_id WHERE T2.degree_summary_name  =  'Bachelor';
SELECT T1.first_name,  T1.middle_name,  T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN degree_programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelors';
SELECT T1.degree_program_summary_name FROM Degree_programs AS T1 JOIN Student_enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1?>



;
SELECT T2.degree_program_id,  T2.degree_summary_name FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T2.degree_program_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.degree_program_id,  T2.degree_summary_name FROM Degree_Programs AS T1 JOIN (SELECT degree_program_id,  COUNT(*) FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1) AS T2 ON T1.degree_program_id  =  T2.degree_program_idQUERY;
SELECT count(*),  T1.student_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1?>



;
SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T1.student_id,  count(*) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;
SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment);
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)quest;
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_idQUOTE;
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_iduserátky;
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1;
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1?>



;
SELECT last_name FROM students WHERE permanent_address_id IN (SELECT current_address_id FROM addresses WHERE state_province_county  =  "North Carolina") EXCEPT SELECT last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN degree_programs AS T3 ON T2.degree_program_id  =  T3.degree_program_idSELECT DISTINCT last_name FROM students WHERE permanent_address_id IN (SELECT current_address_id FROM addresses;
SELECT last_name FROM students WHERE permanent_address_id IN (SELECT current_address_id FROM addresses WHERE state_province_county  =  "North Carolina") EXCEPT SELECT T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN degree_programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id;
SELECT T1.transcript_date,  T1.transcript_id FROM TRANSCRIPTS AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.transcript_id  =  T2.student_course_id GROUP BY T2.student_course_id HAVING count(*)  >=  2;
SELECT T1.transcript_date,  T1.transcript_id FROM transcripts AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2;
SELECT cell_mobile_number FROM students WHERE first_name  =  "Timmothy" AND last_name  =  "Ward";
SELECT cell_mobile_number FROM STUDENTS WHERE first_name  =  "Timmothy" AND last_name  =  "Ward" CLIIIK CLIIIK;
SELECT first_name,  middle_name,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;
SELECT first_name,  middle_name,  last_name FROM students ORDER BY date_first_registered ASC LIMIT 1;
SELECT T1.first_name,  T1.middle_name,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Master of Science' ORDER BY T1.date_first_registered LIMIT 1;
SELECT T1.first_name,  T1.middle_name,  T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN degree_programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  "Diploma" ORDER BY T1.date_first_registered ASC LIMIT 1;
SELECT first_name FROM students WHERE permanent_address_id!= current_address_idstudent;
SELECT first_name FROM students WHERE permanent_address_id!= current_address_id?>



;
SELECT T1.address_id,  T2.line_1,  T2.line_2,  T2.line_3 FROM Addresses AS T1 JOIN (SELECT current_address_id FROM Students GROUP BY current_address_id ORDER BY count(*) DESC LIMIT 1) AS T2 ON T1.address_id  =  T2.current_address_idqueryеристи;
SELECT T1.address_id,  T2.line_1,  T2.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.permanent_address_id GROUP BY T2.permanent_address_id ORDER BY count(*) DESC LIMIT 1;
SELECT avg(transcript_date) FROM transcriptsSELECT;
SELECT avg(transcript_date) FROM transcripts;
SELECT T1.transcript_date,  T2.other_details FROM transcripts AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id  =  T2.transcript_id ORDER BY T1.transcript_date ASC LIMIT 1;
SELECT min(transcript_date),  other_details FROM transcripts;?>



;
SELECT count(*) FROM transcriptsuser;
SELECT count(*) FROM transcriptsuser CLIIIK;
SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1;
SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1;
SELECT T1.course_id,  count(*) FROM Student_Enrolment_Courses AS T1 JOIN Student_Enrolment AS T2 ON T1.student_enrolment_id  =  T2.student_enrolment_id GROUP BY T1.course_id;
SELECT T1.course_id,  count(*) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.transcript_date FROM TRANSCRIPTS AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_date ORDER BY count(*) ASC LIMIT 1guest;
SELECT T1.transcript_date,  T1.transcript_id FROM transcripts AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1;
SELECT T1.semester_name FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id WHERE T2.degree_program_summary_name  =  "Master" INTERSECT SELECT T1.semester_name FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id WHERE T2.degree_program_summary_name  =  "Bachelor";
SELECT semester_id FROM Student_Enrolment WHERE degree_program_id  =  1 INTERSECT SELECT semester_id FROM Student_Enrolment WHERE degree_program_id  =  2;
SELECT count(DISTINCT current_address_id) FROM students;
SELECT DISTINCT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.permanent_address_idquestion;
SELECT other_student_details FROM Students ORDER BY last_name DESC;
SELECT other_student_details FROM Students ORDER BY last_name DESC;
SELECT section_description FROM Sections WHERE section_name  =  "H"átky?>



;
SELECT section_description FROM SECTION WHERE section_name  =  "h" CLIIIK;
SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country  =  "Haiti") OR cell_mobile_number  =  "09700166582";
SELECT first_name FROM students WHERE permanent_address_id  =  (SELECT address_id FROM addresses WHERE country  =  'Haiti') OR cell_mobile_number  =  09700166582;
SELECT title FROM cartoon ORDER BY title;
SELECT title FROM cartoon ORDER BY title;
SELECT title FROM cartoon WHERE directed_by  =  "Ben Jones" CLIIIKıldığı;
SELECT title FROM cartoon WHERE directed_by  =  'Ben Jones';
SELECT count(*) FROM cartoon WHERE writtenBy  =  "Joseph Kuhr";
SELECT count(*) FROM cartoon WHERE writtenBy  =  "Joseph Kuhr";
SELECT title,  directed_by FROM cartoon ORDER BY original_air_date;
SELECT title,  directed_by FROM cartoon ORDER BY original_air_date;
SELECT title FROM cartoon WHERE directed_by  =  "Ben Jones" OR directed_by  =  "Brandon Vietti";
SELECT title FROM cartoon WHERE directed_by  =  'Ben Jones' OR directed_by  =  'Brandon Vietti';
SELECT country,  count(*) FROM tv_channel GROUP BY country ORDER BY count(*) DESC LIMIT 1;
SELECT country,  count(*) FROM tv_channel GROUP BY country ORDER BY count(*) DESC LIMIT 1 CLIIIK;
SELECT count(DISTINCT series_name),  count(DISTINCT content) FROM tv_channel;
SELECT count(DISTINCT series_name),  count(DISTINCT content) FROM tv_channel;
SELECT content FROM tv_channel WHERE series_name  =  "Sky Radio"?>



;
SELECT content FROM tv_channel WHERE series_name  =  'Sky Radio';
SELECT Package_option FROM tv_channel WHERE Series_name  =  "Sky Radio";
SELECT Package_option FROM tv_channel WHERE Series_name  =  'Sky Radio'?>



;
SELECT count(*) FROM tv_channel WHERE language  =  'English';
SELECT count(*) FROM tv_channel WHERE language  =  'english'?>



;
SELECT language,  count(*) FROM tv_channel GROUP BY language ORDER BY count(*) ASC LIMIT 1?>



;
SELECT language,  count(*) FROM tv_channel GROUP BY language ORDER BY count(*) ASC LIMIT 1;
SELECT language,  count(*) FROM tv_channel GROUP BY language;
SELECT count(*),  language FROM tv_channel GROUP BY language;
SELECT T2.series_name FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T1.title  =  "The Rise of the Blue Beetle!";
SELECT T2.series_name FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T1.title  =  "The Rise of the Blue Beetle"?>



;
SELECT T1.title FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T2.series_name  =  "Sky Radio";
SELECT T1.title FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T2.series_name  =  "Sky Radio"átky CLIIIK;
SELECT Episode FROM tv_series ORDER BY rating;
SELECT Episode FROM tv_series ORDER BY Rating;
SELECT Episode,  Rating FROM tv_series ORDER BY Rating DESC LIMIT 3;
SELECT episode,  rating FROM tv_series ORDER BY rating DESC LIMIT 3;
SELECT min(share),  max(share) FROM tv_series;
SELECT max(Share),  min(Share) FROM tv_series;
SELECT Air_Date FROM tv_series WHERE Episode  =  "A Love of a Lifetime";
SELECT T1.Air_Date FROM tv_series AS T1 JOIN tv_series AS T2 ON T1.id  =  T2.channel WHERE T2.Episode  =  "A Love of a Lifetime"?>



;
SELECT weekly_rank FROM tv_series WHERE episode  =  "A Love of a Lifetime";
SELECT Weekly_Rank FROM tv_series WHERE Episode  =  "A Love of a Lifetime"átky;
SELECT T2.series_name,  T1.channel FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T1.episode  =  "A Love of a Lifetime";
SELECT series_name FROM tv_series WHERE episode  =  "A Love of a Lifetime";
SELECT T2.episode FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T1.series_name  =  "Sky Radio";
SELECT T2.episode FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.id  =  T2.channel WHERE T1.series_name  =  "Sky Radio";
SELECT directed_by,  count(*) FROM cartoon GROUP BY directed_by CLIIIK;
SELECT directed_by,  count(*) FROM cartoon GROUP BY directed_by CLIIIK;
SELECT production_code,  channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1;
SELECT production_code,  channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1;
SELECT package_option,  series_name FROM tv_channel WHERE Hight_definition_TV  =  'Yes';
SELECT package_option,  series_name FROM tv_channel WHERE Hight_definition_tv  =  'Yes';
SELECT T1.country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel WHERE T2.written_by  =  'Todd Casey';
SELECT DISTINCT country FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel  =  T2.id WHERE T1.written_by  =  'Todd Casey';
SELECT country FROM tv_channel EXCEPT SELECT country FROM cartoon WHERE written_by  =  'Todd Casey';
SELECT country FROM tv_channel EXCEPT SELECT country FROM cartoon WHERE written_by  =  'Todd Casey';
SELECT T2.series_name,  T1.country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel WHERE directed_by  =  "Ben Jones" INTERSECT SELECT T2.series_name,  T1.country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel WHERE directed_by  =  "Michael Chang";
SELECT T1.series_name,  T1.country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel WHERE T2.directed_by  =  "Ben Jones" INTERSECT SELECT T1.series_name,  T1.country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.channel WHERE T2.directed_by  =  "Michael Chang";
SELECT par,  country FROM tv_channel WHERE language!= 'English';
SELECT par,  country FROM tv_channel WHERE language!= 'english';
SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2;
SELECT id FROM tv_channel GROUP BY id HAVING count(*)  >  2átky;
SELECT id FROM tv_channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones';
SELECT id FROM tv_channel EXCEPT SELECT id FROM cartoon WHERE directed_by  =  'Ben Jones';
SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  "Ben Jones")?>



;
SELECT package_option FROM tv_channel EXCEPT SELECT package_option FROM cartoon WHERE written_by  =  'Ben Jones';
SELECT count(*) FROM poker_playerSELECTSELECT.count(*) FROM poker_playerSELECTSELECT FROM poker_player?>



;
SELECT count(*) FROM poker_playerreferenceSELECT * FROM people?>



;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish;
SELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish FROM poker_playerSELECT Final_Table_Made,  Best_Finish;
SELECT avg(Earnings) FROM poker_player;
SELECT avg(Earnings) FROM poker_player;
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1 CLIIIK;
SELECT max(T1.final_table_made) FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.earnings  <  200000;
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000átky CLIIIK;
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_IDQuery;
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_IDQuery;
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Earnings  >  300000;
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Earnings  >  300000;
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.final_table_made ASC(reference) SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.final_table_made ASCSELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1;
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY Final_Table_Made ASCgetReference;
SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY Earnings ASC LIMIT 1;
SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY Earnings ASC LIMIT 1;
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1 CLIIIK CLIIIK;
SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1;
SELECT avg(T2.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200;
SELECT avg(T2.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200;
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY Earnings DESC;
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Earnings DESCreference;
SELECT Nationality,  COUNT(*) FROM people GROUP BY Nationality;
SELECT Nationality,  COUNT(*) FROM people GROUP BY Nationality;
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2?>



;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2 CLIIIK;
SELECT Name,  Birth_Date FROM people ORDER BY Name ASC;
SELECT Name,  Birth_Date FROM People ORDER BY Name ASC;
SELECT Name FROM People WHERE Nationality!= "Russia";
SELECT Name FROM People WHERE Nationality!= "Russia"átky;
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)query?>



;
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)reference;
SELECT count(DISTINCT Nationality) FROM people?>



;
SELECT count(DISTINCT Nationality) FROM people;
SELECT count(DISTINCT State) FROM area_code_state;
SELECT Contestant_Number,  Contestant_Name FROM Contestants ORDER BY Contestant_Name DESC;
SELECT Vote_ID,  Phone_Number,  STATE FROM Votesátky;
SELECT max(area_code),  min(area_code) FROM area_code_state;
SELECT max(T1.created) FROM votes AS T1 JOIN area_code_state AS T2 ON T1.state  =  T2.state WHERE T2.state  =  'CA';
SELECT Contestant_Name FROM Contestants EXCEPT SELECT Contestant_Name FROM Contestants WHERE Contestant_Name  =  "Jessie Alloway" CLIIIK;
SELECT DISTINCT T1.State,  T2.Created FROM area_code_state AS T1 JOIN votes AS T2 ON T1.State  =  T2.State;
SELECT T1.Contestant_Number,  T1.Contestant_name FROM Contestants AS T1 JOIN Votes AS T2 ON T1.Contestant_Number  =  T2.Contestant_Number GROUP BY T2.Contestant_Number HAVING COUNT(*)  >=  2;
SELECT contestant_number,  contestant_name FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes GROUP BY contestant_number ORDER BY count(*) ASC LIMIT 1) ORDER BY count(*) ASC LIMIT 1;
SELECT count(*) FROM votes WHERE State  =  "NY" OR State  =  "CA";
SELECT count(*) FROM Contestants WHERE Contestant_Number NOT IN (SELECT Contestant_Number FROM Votes);
SELECT T1.Area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.State  =  T2.State GROUP BY T1.Area_code ORDER BY COUNT(*) DESC LIMIT 1?>



;
SELECT Created,  STATE,  Phone_Number FROM VOTES WHERE Contestant_Number  =  'Tabatha Gehling';
SELECT T1.area_code FROM Area_code_State AS T1 JOIN votes AS T2 ON T1.area_code  =  T2.state WHERE T2.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T1.area_code FROM Area_code_State AS T1 JOIN votes AS T2 ON T1.area_code  =  T2.state WHERE T2.contestant_name  =  'Kelly Clauss';
SELECT Contestant_name FROM Contestants WHERE Contestant_name LIKE '%Al%';
SELECT name FROM country WHERE independentyear  >  1950;
SELECT name FROM country WHERE independentyear  >  1950;
SELECT count(*) FROM country WHERE governmentform  =  "republic";
SELECT count(*) FROM country WHERE Governmentform  =  "Republic"?>



 CLIIIK;
SELECT sum(surfacearea) FROM country WHERE region  =  "Caribbean";
SELECT sum(surfacearea) FROM country WHERE continent  =  "North America" AND region  =  "Caribbean";
SELECT continent FROM country WHERE name  =  "Anguilla";
SELECT T1.continent FROM country AS T1 JOIN city AS T2 ON T1.code = T2.countrycode WHERE T2.name = "Anguilla";
SELECT region FROM country WHERE name  =  'Kabul'?>



 CLIIIK;
SELECT region FROM country WHERE name  =  'Kabul';
SELECT T2.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T2.name  =  "Aruba" ORDER BY percentage DESC LIMIT 1;
SELECT T2.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T2.name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1;
SELECT Population,  LifeExpectancy FROM country WHERE continent  =  "South America" AND name  =  "Brazil";
SELECT Population,  LifeExpectancy FROM country WHERE name  =  'Brazil'�;
SELECT region,  population FROM country WHERE name  =  'Angola';
SELECT region,  population FROM country WHERE name  =  'Angola';
SELECT avg(lifeexpectancy) FROM country WHERE region  =  "Central Africa";
SELECT avg(lifeexpectancy) FROM country WHERE continent  =  "Central Africa";
SELECT name FROM country WHERE lifeexpectancy  =  (SELECT min(lifeexpectancy) FROM country WHERE continent  =  'Asia');
SELECT name FROM country WHERE continent  =  'Asia' ORDER BY lifeExpectancy LIMIT 1?>



;
SELECT sum(Population),  max(GNP) FROM country WHERE Continent  =  'Asia';
SELECT count(*),  max(gnp) FROM country WHERE continent  =  'Asia';
SELECT avg(lifeexpectancy) FROM country WHERE governmentform  =  "Republic" AND continent  =  "Africa";
SELECT avg(lifeExpectancy) FROM country WHERE governmentform  =  "Republic" AND continent  =  "Africa";
SELECT sum(surfacearea) FROM country WHERE continent  =  "Asia" OR continent  =  "Europe"?>



;
SELECT sum(surfacearea) FROM country WHERE continent  =  'Asia' OR continent  =  'Europe';
SELECT sum(population) FROM city WHERE district  =  "Gelderland";
SELECT sum(population) FROM city WHERE district  =  "Gelderland";
SELECT avg(gnp),  sum(population) FROM country WHERE governmentform  =  "US territory";
SELECT avg(gnp),  sum(population) FROM country WHERE continent  =  "North America" AND governmentform  =  "Constitution monarchy" AND name LIKE "%US%";
SELECT count(DISTINCT language) FROM countrylanguageSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECT;
SELECT count(DISTINCT language) FROM countrylanguage;
SELECT count(DISTINCT governmentform) FROM country WHERE continent  =  'Africa';
SELECT count(DISTINCT governmentform) FROM country WHERE continent  =  "Africa";
SELECT count(DISTINCT language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T2.name  =  "Aruba";
SELECT count(*) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T2.name  =  'Aruba'átky;
SELECT count(*) FROM countrylanguage WHERE countrycode  =  "Afghanistan" AND isofficial  =  1;
SELECT count(*) FROM countrylanguage WHERE countrycode = "AF" AND isofficial  =  'YES';
SELECT T2.name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE percentage  =  (SELECT max(percentage) FROM countrylanguage)assistant CLIIIK;
SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2  =  T2.countrycode GROUP BY T1.code2 ORDER BY sum(T2.percentage) DESC LIMIT 1;
SELECT T1.continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2  =  T2.countrycode GROUP BY T1.continent ORDER BY count(*) DESC LIMIT 1;
SELECT T2.continent FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  (SELECT language FROM countrylanguage GROUP BY language ORDER BY count(*) DESC LIMIT 1);
SELECT count(*) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "english" AND T2.name  =  "Netherlands";
SELECT count(*) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "english" AND T2.name  =  "Netherlands";
SELECT T2.name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "english" INTERSECT SELECT T2.name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "French";
SELECT T2.name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "english" INTERSECT SELECT T2.name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "French";
SELECT T2.name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "english" AND T1.isofficial  =  1 INTERSECT SELECT T2.name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "french" AND T1.isofficial  =  1;
SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2 = T2.countrycode WHERE T2.language = "english" AND T2.IsOfficial = 1 INTERSECT SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2 = T2.countrycode WHERE T2.language = "French" AND T2.IsOfficial = 1;
SELECT count(DISTINCT T1.continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2  =  T2.countrycode WHERE T2.language  =  "Chinese" CLIIIK;
SELECT count(T2.name) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "Chinese" AND T2.continent  =  "Asia";
SELECT T2.region FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "english" OR T1.language  =  "dutch";
SELECT T2.region FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.language  =  "Dutch" OR T1.language  =  "English";
SELECT T2.name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.Language  =  "english" OR T1.Language  =  "dutch";
SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2 = T2.countrycode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"?>



;
SELECT T2.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T2.continent  =  "Asia" GROUP BY T1.language ORDER BY count(*) DESC LIMIT 1;
SELECT T2.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T2.region  =  "Asia" GROUP BY T1.Language ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.GovernmentForm  =  "Republic" GROUP BY T1.CountryCode HAVING count(*)  =  1;
SELECT T2.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.GovernmentForm  =  "Republic" GROUP BY T1.CountryCode HAVING COUNT(*)  =  1;
SELECT name FROM city ORDER BY population DESC LIMIT 1 WHERE countrycode  =  "USA" AND percentage  =  "english"átky;
SELECT T1.name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.countrycode  =  T2.countrycode WHERE T2.language  =  "english" ORDER BY T1.population DESC LIMIT 1;
SELECT name,  population,  lifeExpectancy FROM country WHERE continent  =  'Asia' ORDER BY surfacearea DESC LIMIT 1;
SELECT name,  population,  lifeexpectancy FROM country ORDER BY surfacearea DESC LIMIT 1;
SELECT avg(T1.lifeexpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2  =  T2.countrycode WHERE T2.Language!= "English";
SELECT avg(T1.lifeexpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code2  =  T2.countrycode WHERE T2.IsOfficial!= "yes";
SELECT sum(population) FROM country WHERE name NOT IN (SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code2  =  t2.countrycode WHERE t2.language  =  "english") CLIIIK;
SELECT count(*) FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode WHERE t2.language!= "english";
SELECT T1.language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T2.headofstate  =  "Beatrix" AND T1.isofficial  =  1;
SELECT T1.Language FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.COUNTRYCODE  =  T2.Code WHERE T2.HeadofState  =  "Beatrix" AND T1.IsOfficial  =  1;
SELECT count(*) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T2.independentyear  <  1930 AND T1.isofficial  =  1;
SELECT sum(isofficial) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T2.independentyear  <  1930;
SELECT name FROM country WHERE surfacearea  >  (SELECT max(surfacearea) FROM country WHERE continent  =  'Europe');
SELECT name FROM country WHERE surfacearea  >  (SELECT max(surfacearea) FROM country WHERE continent  =  'Europe');
SELECT name FROM country WHERE continent  =  'Africa' AND population  <  (SELECT min(population) FROM country WHERE continent  =  'Asia');
SELECT code FROM country WHERE continent  =  'Africa' AND population  <  (SELECT min(population) FROM country WHERE continent  =  'Asia');
SELECT * FROM country WHERE continent  =  "Asia" AND population  >  (SELECT max(population) FROM country WHERE continent  =  "Africa");
SELECT name FROM country WHERE continent  =  "Asia" AND population  >  (SELECT max(population) FROM country WHERE continent  =  "Africa");
SELECT code2 FROM countrylanguage WHERE language!= "english" AND percentage  >= 1 AND isofficial  =  1;
SELECT code2 FROM countrylanguage WHERE language!= "english" JOIN country ON countrylanguage.countrycode  =  countrycode;
SELECT countrycode FROM countrylanguage WHERE language!= "english"átky;
SELECT countrycode FROM countrylanguage WHERE language!= "english";
SELECT code FROM country WHERE governmentform!= "Republic" AND countrylanguage.countrycode NOT IN (SELECT countrycode FROM countrylanguage WHERE language  =  "English")?>



;
SELECT code FROM countrylanguage EXCEPT SELECT code FROM countrylanguage WHERE language  =  "english" INTERSECT SELECT code FROM country WHERE governmentform!= "Republic";
SELECT T1.name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.countrycode  =  T2.countrycode JOIN country AS T3 ON T3.code  =  T2.countrycode WHERE T3.name IN ( "European" ) AND T2.isofficial  =  0еристи;
SELECT T1.name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.countrycode  =  T2.countrycode WHERE T2.IsOfficial  =  0 AND T2.Language  =  "english" AND T1 continent  =  "Europe";
SELECT DISTINCT T1.name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.countrycode  =  T2.countrycode WHERE T2.language  =  "Chinese" AND T2.IsOfficial  =  1 AND T1.continent  =  "Asia";
SELECT DISTINCT T1.name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.countrycode  =  T2.countrycode WHERE T2.language  =  "Chinese" AND T1.countrycode  =  "Asia"átky CLIIIK;
SELECT name,  independenceyear,  surfacearea FROM country ORDER BY Population ASC LIMIT 1;
SELECT name,  independyear,  surfacearea FROM country ORDER BY population ASC LIMIT 1;
SELECT population,  name,  headofstate FROM country ORDER BY surfacearea DESC LIMIT 1;
SELECT name,  population,  headofstate FROM country ORDER BY surfacearea DESC LIMIT 1átky;
SELECT T2.name,  T1.percentage FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE T1.percentage  >=  3 GROUP BY T1.countrycode;
SELECT T2.name,  T2.percentage FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE percentage  >  2 GROUP BY T1.countrycode;
SELECT district,  count(*) FROM city WHERE population  >  (SELECT avg(population) FROM city) GROUP BY district;
SELECT district,  count(*) FROM city WHERE population  >  (SELECT avg(population) FROM city) GROUP BY district;
SELECT governmentform,  sum(population) FROM country WHERE lifeexpectancy  >  72 GROUP BY governmentform;
SELECT governmentform,  sum(population) FROM country WHERE lifeexpectancy  >  72 GROUP BY governmentform;
SELECT avg(lifeexpectancy),  sum(population),  continent FROM country WHERE lifeexpectancy  <  72 GROUP BY continent;
SELECT continent,  sum(population),  avg(lifeexpectancy) FROM country WHERE lifeexpectancy  <  72 GROUP BY continent;
SELECT name,  surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5;
SELECT name,  surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5;
SELECT name FROM country ORDER BY population DESC LIMIT 3;
SELECT name FROM country ORDER BY Population DESC LIMIT 3;
SELECT name FROM country ORDER BY population ASC LIMIT 3;
SELECT name FROM country ORDER BY Population ASC LIMIT 3;
SELECT count(*) FROM country WHERE continent  =  'Asia';
SELECT count(*) FROM country WHERE continent  =  'Asia' CLIIIK;
SELECT name FROM country WHERE continent  =  "Europe" AND Population  =  80000;
SELECT name FROM country WHERE continent  =  "Europe" AND Population  =  80000?>



;
SELECT sum(population),  avg(surfacearea) FROM country WHERE continent  =  "North America" AND surfacearea  >  3000;
SELECT sum(Population),  avg(SurfaceArea) FROM country WHERE continent  =  "North America" AND SurfaceArea  >  3000;
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;
SELECT language FROM countrylanguage GROUP BY language ORDER BY count(*) DESC LIMIT 1?>



;
SELECT language FROM countrylanguage GROUP BY language ORDER BY count(*) DESC LIMIT 1 CLIIIK;
SELECT T1.language,  T2.percentage FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code ORDER BY T2.percentage DESC LIMIT 1;
SELECT countrycode,  language FROM countrylanguage GROUP BY countrycode ORDER BY percentage DESC LIMIT 1;
SELECT sum(percentage) FROM countrylanguage WHERE language  =  "Spanish" AND isofficial  =  1 GROUP BY countrycode ORDER BY sum(percentage) DESC LIMIT 1 CLIIIK;
SELECT count(*) FROM countrylanguage WHERE language  =  "Spanish" AND isofficial  =  1átky;
SELECT countrycode FROM countrylanguage WHERE percentage  =  (SELECT max(percentage) FROM countrylanguage);
SELECT countrycode FROM countrylanguage WHERE percentage  = 'spanish';
SELECT count(*) FROM conductor;
SELECT count(*) FROM conductor;
SELECT Name FROM conductor ORDER BY Age ASC?>



;
SELECT Name FROM conductor ORDER BY Age;
SELECT Name FROM conductor WHERE Nationality!= "USA"user;
SELECT Name FROM conductor WHERE Nationality!= "USA"user;
SELECT Record_company FROM orchestra ORDER BY Year_of_founded DESCátky;
SELECT Record_company FROM orchestra ORDER BY Year_of_founded DESC;
SELECT avg(Attendance) FROM show;
SELECT avg(Attendance) FROM show;
SELECT max(Share),  min(Share) FROM performance WHERE TYPE!= "Live final";
SELECT max(Share),  min(Share) FROM performance WHERE TYPE!= "Live final";
SELECT count(DISTINCT nationality) FROM conductor?>



;
SELECT count(DISTINCT nationality) FROM conductor;
SELECT Name FROM conductor ORDER BY Year_of_work DESC;
SELECT Name FROM conductor ORDER BY Year_of_work DESC;
SELECT name FROM conductor ORDER BY Year_of_work DESC LIMIT 1;
SELECT name FROM conductor ORDER BY Year_of_work DESC LIMIT 1átky;
SELECT T2.Orchestra,  T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID;
SELECT T3.Orchestra,  T2.Name FROM performance AS T1 JOIN orchestra AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID JOIN conductor AS T3 ON T2.Conductor_ID  =  T3.Conductor_ID CLIIIK;
SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(*)  >  1;
SELECT T2.Name FROM performance AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(*)  >  1;
SELECT T2.name FROM performance AS T1 JOIN orchestra AS T2 ON T1.orchestra_ID  =  T2.orchestra_ID GROUP BY T2.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.name FROM performance AS T1 JOIN orchestra AS T2 ON T1.orchestra_ID  =  T2.orchestra_ID GROUP BY T1.orchestra_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.conductor_id  =  T2.conductor_id WHERE T1.year_of_founded  >  2008;
SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE T1.Year_of_founded  >  2008?>



;
SELECT record_company,  count(*) FROM orchestra GROUP BY record_companyuserSELECT record_company,  count(*) FROM orchestra GROUP BY record_company CLIIIK;
SELECT count(*),  record_company FROM orchestra GROUP BY record_company;
SELECT major_record_format FROM orchestra ORDER BY count(*) ASC;
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) DESC;
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY count(*) DESC LIMIT 1;
SELECT Record_company FROM orchestra GROUP BY Record_company ORDER BY count(*) DESC LIMIT 1 CLIIIK;
SELECT Orchestra FROM orchestra WHERE Orchestra_id NOT IN (SELECT Orchestra_id FROM performance);
SELECT Orchestra FROM orchestra WHERE Orchestra_id NOT IN (SELECT Orchestra_id FROM performance);
SELECT Record_company FROM orchestra WHERE YEAR_of_founded  <  2003 INTERSECT SELECT Record_company FROM orchestra WHERE YEAR_of_founded  >  2003;
SELECT record_company FROM orchestra WHERE year_of_founded  <  2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded  >  2003?>



;
SELECT count(*) FROM orchestra WHERE major_record_format  =  "CD" OR major_record_format  =  "DVD";
SELECT count(*) FROM orchestra WHERE major_record_format  =  "CD" OR major_record_format  =  "DVD"?>



;
SELECT YEAR_of_founded FROM orchestra GROUP BY YEAR_of_founded HAVING COUNT(*)  >  1;
SELECT T2.Year_of_founded FROM performance AS T1 JOIN orchestra AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T1.Orchestra_ID HAVING COUNT(*)  >  1;
SELECT count(*) FROM highschooler WHERE grade  =  "high school"átky CLIIIK;
SELECT count(*) FROM highschooler WHERE grade  =  "high school"QUOTE;
SELECT name,  grade FROM highschooler WHERE grade  =  'high';
SELECT name,  grade FROM highschoolerSELECT name,  grade FROM highschoolerSELECT name,  grade FROM highschoolerSELECT name,  grade FROM highschoolerSELECT name,  grade FROM highschoolerSELECT name,  grade FROM highschoolerSELECT name,  grade FROM highschoolerSELECT name,  grade FROM highschoolerSELECT name,  grade FROM highschoolerSELECT;
SELECT DISTINCT grade FROM highschoolerSELECT grade FROM highschooler;
SELECT DISTINCT grade FROM highschoolerSELECT DISTINCT grade FROM highschooler;
SELECT grade FROM highschooler WHERE name  =  'Kyle' CLIIIK;
SELECT grade FROM highschooler WHERE name  =  'Kyle';
SELECT name FROM highschooler WHERE grade  =  10 CLIIIK;
SELECT name FROM highschooler WHERE grade  =  10?>



?>



;
SELECT id FROM highschooler WHERE name  =  'Kyle';
SELECT id FROM highschooler WHERE name  =  "Kyle";
SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10;
SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10;
SELECT count(*),  grade FROM highschooler GROUP BY gradeSELECT count(*),  grade FROM highschooler GROUP BY grade;
SELECT count(*),  grade FROM highschooler GROUP BY gradeSELECT count(*),  grade FROM highschooler GROUP BY grade;
SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1;
SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1;
SELECT DISTINCT grade FROM highschooler GROUP BY grade HAVING count(*)  >=  4;
SELECT grade FROM highschooler GROUP BY grade HAVING count(*)  >=  4;
SELECT T1.student_id,  count(*) FROM friend AS T1 JOIN highschooler AS T2 ON T1.friend_id  =  T2.id GROUP BY T1.student_idSELECT T1.student_id,  count(*) FROM friend AS T1 JOIN highschooler AS T2 ON T1.friend_id  =  T2.id GROUP BY T1.student_id;
SELECT count(*),  T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name;
SELECT count(*),  T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.nameuser;
SELECT T2.name,  count(*) FROM friend AS T1 JOIN highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T2.id;
SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1?>



;
SELECT t1.name FROM highschooler AS t1 JOIN friend AS t2 ON t1.id  =  t2.student_id GROUP BY t2.student_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.id HAVING count(*)  >=  3;
SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.id HAVING count(*)  >=  3;
SELECT T2.name FROM friend AS T1 JOIN highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  =  'highschooler' AND T2.name  =  'Kyle'?>



;
SELECT T2.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id WHERE T1.name  =  'Kyle';
SELECT count(*) FROM friend AS T1 JOIN highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle";
SELECT count(*) FROM friend WHERE friend_id IN (SELECT T1.friend_id FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id WHERE T1.name  =  "Kyle")result?>



;
SELECT id FROM highschooler EXCEPT SELECT student_id FROM friendouser;
SELECT id FROM highschooler EXCEPT SELECT friend_id FROM friendSELECT id FROM highschooler WHERE grade  =  'highschool' CLIIIK;
SELECT name FROM Highschooler WHERE id NOT IN (SELECT student_id FROM friend)SELECT name FROM Highschooler WHERE id NOT IN (SELECT student_id FROM friend)SELECT name FROM Highschooler WHERE id NOT IN (SELECT student_id FROM friend)SELECT name FROM Highschooler WHERE id NOT IN (SELECT student_id FROM friend)SELECT name FROM Highschooler WHERE id NOT IN (SELECT student_id FROM friend)SELECT name FROM Highschool;
SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)SELECT name FROM highschool;
SELECT id FROM friend INTERSECT SELECT student_id FROM likesSELECTOR;
SELECT id FROM friend INTERSECT SELECT student_id FROM likesSELECT id FROM highschooler WHERE id IN (result)?>



;
SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id UNION SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_iduser;
SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id INTERSECT SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id;
SELECT count(*),  student_id FROM likes GROUP BY student_idSELECT count(*),  student_id FROM likes GROUP BY student_id;
SELECT count(*),  student_id FROM likes GROUP BY student_id;
SELECT T1.name,  count(*) FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id WHERE grade  =  "high" GROUP BY T1.id;
SELECT T1.name,  count(*) FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id HAVING count(*)  >=  2;
SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id HAVING count(*)  >=  2?>



;
SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id HAVING count(*)  >=  2;
SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id WHERE grade  >  5 GROUP BY T1.id HAVING count(*)  >=  2;
SELECT name FROM highschooler WHERE grade  >  5 GROUP BY id HAVING count(*)  >=  2átkyátky;
SELECT count(*) FROM likes AS T1 JOIN highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle'átky;
SELECT count(*) FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id WHERE T1.name  =  "Kyle"átky;
SELECT avg(grade) FROM highschooler WHERE id IN (SELECT friend_id FROM friend UNION SELECT student_id FROM friend)SELECT avg(grade) FROM highschooler WHERE id IN (SELECT friend_id FROM friend UNION SELECT student_id FROM friend) CLIIIK;
SELECT avg(grade) FROM highschooler WHERE id IN (SELECT friend_id FROM friend UNION SELECT student_id FROM friend);
SELECT min(grade) FROM highschooler WHERE id NOT IN ( SELECT student_id FROM friend UNION SELECT student_id FROM likes )SELECT min(grade) FROM highschooler WHERE id NOT IN ( SELECT student_id FROM friend UNION SELECT student_id FROM likes )SELECT min(grade) FROM highschooler WHERE id NOT IN ( SELECT student_id FROM friend UNION SELECT student_id FROM likes )SELECT min(grade) FROM highschooler WHERE id NOT IN ( SELECT student;
SELECT min(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);
SELECT state FROM owners INTERSECT SELECT state FROM professionalsquery SELECT state FROM owners INTERSECT SELECT state FROM professionals;
SELECT state FROM owners INTERSECT SELECT state FROM professionalsquery SELECT state FROM owners INTERSECT SELECT state FROM professionals;
SELECT avg(T1.Age) FROM dogs AS T1 JOIN treatments AS T2 ON T1.Dog_ID  =  T2.Dog_ID WHERE T2.treatment_type_code  =  "Spay/Neuter";
SELECT avg(T1.Age) FROM dogs AS T1 JOIN treatments AS T2 ON T1.Dog_ID  =  T2.Dog_ID WHERE T2.Treatment_Type_Code  =  "Surgery";
SELECT Professional_ID,  last_name,  cell_number FROM Professionals WHERE state  =  'Indiana' OR COUNT(T1.Treatment_ID)  >  2;
SELECT Professional_ID,  last_name,  cell_number FROM Professionals WHERE state  =  'Indiana' OR count(*)  >  2;
SELECT T2.Name FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.Dog_ID  =  T2.Dog_ID WHERE T1.Cost_of_Treatment  <  1000?>



;
SELECT T2.Name FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.Dog_ID  =  T2.Dog_ID WHERE T1.Cost_of_Treatment  >  1000;
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT first_name FROM dogs?>



;
SELECT first_name FROM Professionals WHERE first_name IN (SELECT first_name FROM Owners EXCEPT SELECT first_name FROM Dogs) UNION SELECT first_name FROM Professionals WHERE first_name IN (SELECT first_name FROM Owners)query;
SELECT professional_id,  role_code,  email_address FROM Professionals EXCEPT SELECT professional_id,  role_code,  email_address FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id  =  T2.dog_id WHERE T2.breed_code LIKE '%Dog%';
SELECT professional_id,  role_code,  email_address FROM professionals EXCEPT SELECT professional_id,  role_code,  email_address FROM treatments AS T1 JOIN professionals AS T2 ON T1.professional_id  =  T2.professional_id;
SELECT T1.owner_id,  T1.first_name,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1 CLIIIK;
SELECT T1.owner_id,  T1.first_name,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;
SELECT T1.professional_id,  T1.role_code,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2;
SELECT T1.professional_id,  T1.role_code,  T1.first_name FROM Professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2;
SELECT T2.breed_name FROM dogs AS T1 JOIN breeds AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_code ORDER BY count(*) DESC LIMIT 1;
SELECT T1.breed_name FROM breeds AS T1 JOIN dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.breed_code ORDER BY count(*) DESC LIMIT 1;
SELECT T1.owner_id,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T1.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1;
SELECT T1.owner_id,  T2.last_name FROM Owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T2.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1;
SELECT T1.treatment_type_description FROM treatment_types AS T1 JOIN treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY sum(T2.charge_amount) ASC LIMIT 1;
SELECT T1.treatment_type_description FROM treatment_types AS T1 JOIN treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY sum(T2.cost_of_treatment) ASC LIMIT 1?>



;
SELECT T1.owner_id,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY sum(T2.charge_amount) DESC LIMIT 1;
SELECT T1.owner_id,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY sum(T3.charge_amount) DESC LIMIT 1;
SELECT Professional_ID,  Cell_Number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.Professional_ID  =  T2.Professional_ID GROUP BY Professional_ID HAVING COUNT(*)  >=  2;
SELECT T1.professional_id,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*)  >=  2;
SELECT T1.first_name,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments );
SELECT T1.first_name,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments );
SELECT T1.Date_of_Treatment,  T2.First_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.Professional_ID  =  T2.Professional_ID;
SELECT date_of_treatment,  T1.first_name FROM Professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id;
SELECT T1.Charge_Amount,  T2.Treatment_Type_Description FROM Charges AS T1 JOIN Treatment_Types AS T2 ON T1.Charge_Type  =  T2.Treatment_Type_Code WHERE T1.Charge_Type  =  "Treatment";
SELECT T1.treatment_type_description,  T2.Charge_Amount FROM Treatment_Types AS T1 JOIN Charges AS T2 ON T1.treatment_type_code  =  T2.Charge_id WHERE T2.Charge_type  =  "Medicine";
SELECT T1.first_name,  T1.last_name,  T2.size_description FROM Owners AS T1 JOIN Sizes AS T2 ON T1.owner_id  =  T2.size_codequery SELECT T1.first_name,  T1.last_name,  T2.size_description FROM Owners AS T1 JOIN Sizes AS T2 ON T1.owner_id  =  T2.size_codeSELECT T1.first_name,  T1.last_name,  T2.size_description;
SELECT T1.first_name,  T1.last_name,  T2.size_description FROM Owners AS T1 JOIN Sizes AS T2 ON T1.owner_id  =  T2.size_code?>



;
SELECT T1.first_name,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id;
SELECT T1.first_name,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id?>



;
SELECT T1.name,  T2.Date_of_Treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.Dog_ID  =  T2.Dog_ID WHERE T1.breed_code  =  (SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1)SELECT DISTINCT T1.name,  T2.Date_of_Treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.Dog_ID  = ;
SELECT T2.Name,  T1.Date_of_Treatment FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.Dog_ID  =  T2.Dog_ID JOIN Breeds AS T3 ON T2.Breed_Code  =  T3.Breed_Code WHERE T3.Breed_Name  =  (SELECT T4.Breed_Name FROM Breeds AS T4 JOIN Dogs AS T5 ON T4.Breed_Code  =  T5.Breed_Code GROUP BY;
SELECT T2.first_name,  T2.name FROM dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.state  =  'Virginia';
SELECT T1.first_name,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia';
SELECT T1.Date_arrived,  T1.Date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.Dog_ID  =  T2.Dog_IDUSER?>



;
SELECT T1.date_arrived,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T2.treatment_type_code  =  "medical";
SELECT T1.last_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id ORDER BY T2.age LIMIT 1;
SELECT T2.last_name FROM dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.age  =  (SELECT min(age) FROM dogs)reference CLIIIK;
SELECT email_address FROM professionals WHERE state  =  "Hawaii" OR state  =  "Wisconsin";
SELECT email_address FROM professionals WHERE state  =  "Hawaii" OR state  =  "Wisconsin";
SELECT date_arrived,  date_departed FROM Dogs;
SELECT date_arrived,  date_departed FROM dogs;
SELECT count(DISTINCT dog_id) FROM treatments CLIIIK;
SELECT count(DISTINCT dog_id) FROM treatmentsQUESTION SELECT count(DISTINCT dog_id) FROM treatmentsHVASE;
SELECT count(DISTINCT T1.professional_id) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.dog_id IN (SELECT dog_id FROM dogs WHERE breed_code  =  'Dog')SELECTSELECTSELECT;
SELECT count(DISTINCT professional_id) FROM treatments;
SELECT Role_Code,  street,  city,  state FROM Professionals WHERE city LIKE '%West%';
SELECT role_code,  street,  city,  state FROM professionals WHERE city LIKE '%West%'átky;
SELECT first_name,  last_name,  email_address FROM  owners WHERE state LIKE '%North%';
SELECT first_name,  last_name,  email_address FROM  owners WHERE state LIKE '%North%'.SEVER;
SELECT count(*) FROM Dogs WHERE age  <  (SELECT avg(age) FROM Dogs)user;
SELECT count(*) FROM Dogs WHERE age  <  (SELECT avg(age) FROM Dogs)user;
SELECT max(Cost_of_Treatment) FROM treatments;
SELECT Cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT count(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)query;
SELECT count(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)query;
SELECT count(*) FROM owners WHERE owner_id NOT IN ( SELECT owner_id FROM dogs )SELECT SELECT count(*) FROM owners WHERE owner_id NOT IN ( SELECT owner_id FROM dogs )SELECT;
SELECT count(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs)QUOTE SELECT count(*) FROM ownersEND;
SELECT count(*) FROM professionals WHERE professional_id NOT IN ( SELECT professional_id FROM treatments )querySELECT count(*) FROM professionals WHERE professional_id NOT IN ( SELECT professional_id FROM treatments )SELECT count(*) FROM professionals WHERE professional_id NOT IN ( SELECT professional_id FROM treatments ) CLIIIK;
SELECT count(*) FROM professionals WHERE professional_id NOT IN ( SELECT professional_id FROM treatments )query;
SELECT name,  age,  weight FROM dogs WHERE abandoned  =  1;
SELECT name,  age,  weight FROM dogs WHERE abandoned = 1;
SELECT avg(Age) FROM dogsSELECT;
SELECT avg(Age) FROM Dogsqueryımlı;
SELECT age FROM dogs ORDER BY age DESC LIMIT 1;
SELECT age FROM dogs ORDER BY age DESC LIMIT 1 CLIIIK;
SELECT charge_type,  charge_amount FROM Charges;
SELECT Charge_Type,  Charge_Amount FROM Charges;
SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1?>



;
SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1;
SELECT email_address,  cell_number,  home_phone FROM Professionals;
SELECT email_address,  cell_number,  home_phone FROM Professionals;
SELECT breed_code,  size_code FROM dogs GROUP BY breed_code,  size_code?>



?>



;
SELECT DISTINCT breed_code,  size_code FROM dogs CLIIIK;
SELECT T1.first_name,  T3.treatment_type_description FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_Types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_codeconverter;
SELECT T1.first_name,  T2.treatment_type_description FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id CLIIIK;
SELECT count(*) FROM singer;
SELECT count(*) FROM singer;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT name FROM singer ORDER BY net_worth_millions ASC;
SELECT Birth_Year,  Citizenship FROM singer;
SELECT Birth_Year,  Citizenship FROM singerátky;
SELECT Name FROM singer WHERE Citizenship!= "France";
SELECT name FROM singer WHERE citizenship!= 'French';
SELECT name FROM singer WHERE birth_year  =  1948 OR birth_year  =  1949 CLIIIK;
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949;
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;
SELECT Citizenship,  COUNT(*) FROM singer GROUP BY Citizenship;
SELECT citizenship,  COUNT(*) FROM singer GROUP BY citizenship CLIIIK;
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT citizenship,  max(net_worth_millions) FROM singer GROUP BY citizenship;
SELECT max(Net_worth_millions),  citizenship FROM singer GROUP BY citizenship;
SELECT T2.Title,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID;
SELECT T2.Title,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID;
SELECT DISTINCT T1.name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id WHERE T2.sales  >  300000?>



átky;
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000átky;
SELECT T2.name FROM song AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.singer_id HAVING count(*)  >  1;
SELECT T1.name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id HAVING COUNT(*)  >  1;
SELECT T2.name,  sum(T1.sales) FROM song AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.name;
SELECT T1.name,  sum(T2.sales) FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.name;
SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)quote?>



;
SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song);
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955;
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955;
SELECT count(*) FROM Other_Available_Features?>



;
SELECT feature_type_name FROM Other_Available_Features WHERE feature_name  =  "AirCon";
SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code WHERE T1.property_type_code  =  "Residential"SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code WHERE T1.property_type_code  =  "Res;
SELECT property_name FROM properties WHERE property_type_code  =  "House" OR property_type_code  =  "Apartment" GROUP BY property_name HAVING room_count  >  1;
